{"ast":null,"code":"import { warning } from '../../utils/errors.mjs';\nimport { secondsToMilliseconds } from '../../utils/time-conversion.mjs';\nimport { instantAnimationState } from '../../utils/use-instant-transition-state.mjs';\nimport { createAcceleratedAnimation } from '../animators/waapi/create-accelerated-animation.mjs';\nimport { createInstantAnimation } from '../animators/instant.mjs';\nimport { getDefaultTransition } from '../utils/default-transitions.mjs';\nimport { isAnimatable } from '../utils/is-animatable.mjs';\nimport { getKeyframes } from '../utils/keyframes.mjs';\nimport { getValueTransition, isTransitionDefined } from '../utils/transitions.mjs';\nimport { animateValue } from '../animators/js/index.mjs';\nimport { MotionGlobalConfig } from '../../utils/GlobalConfig.mjs';\nconst animateMotionValue = function (valueName, value, target) {\n  let transition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  return onComplete => {\n    const valueTransition = getValueTransition(transition, valueName) || {};\n    /**\r\n     * Most transition values are currently completely overwritten by value-specific\r\n     * transitions. In the future it'd be nicer to blend these transitions. But for now\r\n     * delay actually does inherit from the root transition if not value-specific.\r\n     */\n    const delay = valueTransition.delay || transition.delay || 0;\n    /**\r\n     * Elapsed isn't a public transition option but can be passed through from\r\n     * optimized appear effects in milliseconds.\r\n     */\n    let {\n      elapsed = 0\n    } = transition;\n    elapsed = elapsed - secondsToMilliseconds(delay);\n    const keyframes = getKeyframes(value, valueName, target, valueTransition);\n    /**\r\n     * Check if we're able to animate between the start and end keyframes,\r\n     * and throw a warning if we're attempting to animate between one that's\r\n     * animatable and another that isn't.\r\n     */\n    const originKeyframe = keyframes[0];\n    const targetKeyframe = keyframes[keyframes.length - 1];\n    const isOriginAnimatable = isAnimatable(valueName, originKeyframe);\n    const isTargetAnimatable = isAnimatable(valueName, targetKeyframe);\n    warning(isOriginAnimatable === isTargetAnimatable, \"You are trying to animate \".concat(valueName, \" from \\\"\").concat(originKeyframe, \"\\\" to \\\"\").concat(targetKeyframe, \"\\\". \").concat(originKeyframe, \" is not an animatable value - to enable this animation set \").concat(originKeyframe, \" to a value animatable to \").concat(targetKeyframe, \" via the `style` property.\"));\n    let options = {\n      keyframes,\n      velocity: value.getVelocity(),\n      ease: \"easeOut\",\n      ...valueTransition,\n      delay: -elapsed,\n      onUpdate: v => {\n        value.set(v);\n        valueTransition.onUpdate && valueTransition.onUpdate(v);\n      },\n      onComplete: () => {\n        onComplete();\n        valueTransition.onComplete && valueTransition.onComplete();\n      }\n    };\n    /**\r\n     * If there's no transition defined for this value, we can generate\r\n     * unqiue transition settings for this value.\r\n     */\n    if (!isTransitionDefined(valueTransition)) {\n      options = {\n        ...options,\n        ...getDefaultTransition(valueName, options)\n      };\n    }\n    /**\r\n     * Both WAAPI and our internal animation functions use durations\r\n     * as defined by milliseconds, while our external API defines them\r\n     * as seconds.\r\n     */\n    if (options.duration) {\n      options.duration = secondsToMilliseconds(options.duration);\n    }\n    if (options.repeatDelay) {\n      options.repeatDelay = secondsToMilliseconds(options.repeatDelay);\n    }\n    if (!isOriginAnimatable || !isTargetAnimatable || instantAnimationState.current || valueTransition.type === false || MotionGlobalConfig.skipAnimations) {\n      /**\r\n       * If we can't animate this value, or the global instant animation flag is set,\r\n       * or this is simply defined as an instant transition, return an instant transition.\r\n       */\n      return createInstantAnimation(instantAnimationState.current ? {\n        ...options,\n        delay: 0\n      } : options);\n    }\n    /**\r\n     * Animate via WAAPI if possible.\r\n     */\n    if (\n    /**\r\n     * If this is a handoff animation, the optimised animation will be running via\r\n     * WAAPI. Therefore, this animation must be JS to ensure it runs \"under\" the\r\n     * optimised animation.\r\n     */\n    !transition.isHandoff && value.owner && value.owner.current instanceof HTMLElement &&\n    /**\r\n     * If we're outputting values to onUpdate then we can't use WAAPI as there's\r\n     * no way to read the value from WAAPI every frame.\r\n     */\n    !value.owner.getProps().onUpdate) {\n      const acceleratedAnimation = createAcceleratedAnimation(value, valueName, options);\n      if (acceleratedAnimation) return acceleratedAnimation;\n    }\n    /**\r\n     * If we didn't create an accelerated animation, create a JS animation\r\n     */\n    return animateValue(options);\n  };\n};\nexport { animateMotionValue };","map":{"version":3,"names":["warning","secondsToMilliseconds","instantAnimationState","createAcceleratedAnimation","createInstantAnimation","getDefaultTransition","isAnimatable","getKeyframes","getValueTransition","isTransitionDefined","animateValue","MotionGlobalConfig","animateMotionValue","valueName","value","target","transition","arguments","length","undefined","onComplete","valueTransition","delay","elapsed","keyframes","originKeyframe","targetKeyframe","isOriginAnimatable","isTargetAnimatable","concat","options","velocity","getVelocity","ease","onUpdate","v","set","duration","repeatDelay","current","type","skipAnimations","isHandoff","owner","HTMLElement","getProps","acceleratedAnimation"],"sources":["D:/Repos/NIKE-DJANGO/Jord/l4fycy/node_modules/framer-motion/dist/es/animation/interfaces/motion-value.mjs"],"sourcesContent":["import { warning } from '../../utils/errors.mjs';\r\nimport { secondsToMilliseconds } from '../../utils/time-conversion.mjs';\r\nimport { instantAnimationState } from '../../utils/use-instant-transition-state.mjs';\r\nimport { createAcceleratedAnimation } from '../animators/waapi/create-accelerated-animation.mjs';\r\nimport { createInstantAnimation } from '../animators/instant.mjs';\r\nimport { getDefaultTransition } from '../utils/default-transitions.mjs';\r\nimport { isAnimatable } from '../utils/is-animatable.mjs';\r\nimport { getKeyframes } from '../utils/keyframes.mjs';\r\nimport { getValueTransition, isTransitionDefined } from '../utils/transitions.mjs';\r\nimport { animateValue } from '../animators/js/index.mjs';\r\nimport { MotionGlobalConfig } from '../../utils/GlobalConfig.mjs';\r\n\r\nconst animateMotionValue = (valueName, value, target, transition = {}) => {\r\n    return (onComplete) => {\r\n        const valueTransition = getValueTransition(transition, valueName) || {};\r\n        /**\r\n         * Most transition values are currently completely overwritten by value-specific\r\n         * transitions. In the future it'd be nicer to blend these transitions. But for now\r\n         * delay actually does inherit from the root transition if not value-specific.\r\n         */\r\n        const delay = valueTransition.delay || transition.delay || 0;\r\n        /**\r\n         * Elapsed isn't a public transition option but can be passed through from\r\n         * optimized appear effects in milliseconds.\r\n         */\r\n        let { elapsed = 0 } = transition;\r\n        elapsed = elapsed - secondsToMilliseconds(delay);\r\n        const keyframes = getKeyframes(value, valueName, target, valueTransition);\r\n        /**\r\n         * Check if we're able to animate between the start and end keyframes,\r\n         * and throw a warning if we're attempting to animate between one that's\r\n         * animatable and another that isn't.\r\n         */\r\n        const originKeyframe = keyframes[0];\r\n        const targetKeyframe = keyframes[keyframes.length - 1];\r\n        const isOriginAnimatable = isAnimatable(valueName, originKeyframe);\r\n        const isTargetAnimatable = isAnimatable(valueName, targetKeyframe);\r\n        warning(isOriginAnimatable === isTargetAnimatable, `You are trying to animate ${valueName} from \"${originKeyframe}\" to \"${targetKeyframe}\". ${originKeyframe} is not an animatable value - to enable this animation set ${originKeyframe} to a value animatable to ${targetKeyframe} via the \\`style\\` property.`);\r\n        let options = {\r\n            keyframes,\r\n            velocity: value.getVelocity(),\r\n            ease: \"easeOut\",\r\n            ...valueTransition,\r\n            delay: -elapsed,\r\n            onUpdate: (v) => {\r\n                value.set(v);\r\n                valueTransition.onUpdate && valueTransition.onUpdate(v);\r\n            },\r\n            onComplete: () => {\r\n                onComplete();\r\n                valueTransition.onComplete && valueTransition.onComplete();\r\n            },\r\n        };\r\n        /**\r\n         * If there's no transition defined for this value, we can generate\r\n         * unqiue transition settings for this value.\r\n         */\r\n        if (!isTransitionDefined(valueTransition)) {\r\n            options = {\r\n                ...options,\r\n                ...getDefaultTransition(valueName, options),\r\n            };\r\n        }\r\n        /**\r\n         * Both WAAPI and our internal animation functions use durations\r\n         * as defined by milliseconds, while our external API defines them\r\n         * as seconds.\r\n         */\r\n        if (options.duration) {\r\n            options.duration = secondsToMilliseconds(options.duration);\r\n        }\r\n        if (options.repeatDelay) {\r\n            options.repeatDelay = secondsToMilliseconds(options.repeatDelay);\r\n        }\r\n        if (!isOriginAnimatable ||\r\n            !isTargetAnimatable ||\r\n            instantAnimationState.current ||\r\n            valueTransition.type === false ||\r\n            MotionGlobalConfig.skipAnimations) {\r\n            /**\r\n             * If we can't animate this value, or the global instant animation flag is set,\r\n             * or this is simply defined as an instant transition, return an instant transition.\r\n             */\r\n            return createInstantAnimation(instantAnimationState.current\r\n                ? { ...options, delay: 0 }\r\n                : options);\r\n        }\r\n        /**\r\n         * Animate via WAAPI if possible.\r\n         */\r\n        if (\r\n        /**\r\n         * If this is a handoff animation, the optimised animation will be running via\r\n         * WAAPI. Therefore, this animation must be JS to ensure it runs \"under\" the\r\n         * optimised animation.\r\n         */\r\n        !transition.isHandoff &&\r\n            value.owner &&\r\n            value.owner.current instanceof HTMLElement &&\r\n            /**\r\n             * If we're outputting values to onUpdate then we can't use WAAPI as there's\r\n             * no way to read the value from WAAPI every frame.\r\n             */\r\n            !value.owner.getProps().onUpdate) {\r\n            const acceleratedAnimation = createAcceleratedAnimation(value, valueName, options);\r\n            if (acceleratedAnimation)\r\n                return acceleratedAnimation;\r\n        }\r\n        /**\r\n         * If we didn't create an accelerated animation, create a JS animation\r\n         */\r\n        return animateValue(options);\r\n    };\r\n};\r\n\r\nexport { animateMotionValue };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}