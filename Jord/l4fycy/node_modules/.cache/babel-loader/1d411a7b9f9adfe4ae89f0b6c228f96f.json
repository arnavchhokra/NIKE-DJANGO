{"ast":null,"code":"import _classCallCheck from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Loader, FileLoader, ShapePath } from 'three';\n\nvar FontLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(FontLoader, _Loader);\n\n  var _super = _createSuper(FontLoader);\n\n  function FontLoader(manager) {\n    _classCallCheck(this, FontLoader);\n\n    return _super.call(this, manager);\n  }\n\n  _createClass(FontLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var _this = this;\n\n      var loader = new FileLoader(this.manager);\n      loader.setPath(this.path);\n      loader.setRequestHeader(this.requestHeader);\n      loader.setWithCredentials(this.withCredentials);\n      loader.load(url, function (response) {\n        if (typeof response !== 'string') throw new Error('unsupported data type');\n        var json = JSON.parse(response);\n\n        var font = _this.parse(json);\n\n        if (onLoad) onLoad(font);\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(json) {\n      return new Font(json);\n    }\n  }]);\n\n  return FontLoader;\n}(Loader);\n\nvar Font = /*#__PURE__*/function () {\n  function Font(data) {\n    _classCallCheck(this, Font);\n\n    _defineProperty(this, \"data\", void 0);\n\n    this.data = data;\n  }\n\n  _createClass(Font, [{\n    key: \"generateShapes\",\n    value: function generateShapes(text) {\n      var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;\n      var shapes = [];\n      var paths = createPaths(text, size, this.data);\n\n      for (var p = 0, pl = paths.length; p < pl; p++) {\n        Array.prototype.push.apply(shapes, paths[p].toShapes(false));\n      }\n\n      return shapes;\n    }\n  }]);\n\n  return Font;\n}();\n\n_defineProperty(Font, \"isFont\", void 0);\n\n_defineProperty(Font, \"type\", void 0);\n\nfunction createPaths(text, size, data) {\n  var chars = Array.from(text);\n  var scale = size / data.resolution;\n  var line_height = (data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness) * scale;\n  var paths = [];\n  var offsetX = 0,\n      offsetY = 0;\n\n  for (var i = 0; i < chars.length; i++) {\n    var char = chars[i];\n\n    if (char === '\\n') {\n      offsetX = 0;\n      offsetY -= line_height;\n    } else {\n      var ret = createPath(char, scale, offsetX, offsetY, data);\n\n      if (ret) {\n        offsetX += ret.offsetX;\n        paths.push(ret.path);\n      }\n    }\n  }\n\n  return paths;\n}\n\nfunction createPath(char, scale, offsetX, offsetY, data) {\n  var glyph = data.glyphs[char] || data.glyphs['?'];\n\n  if (!glyph) {\n    console.error('THREE.Font: character \"' + char + '\" does not exists in font family ' + data.familyName + '.');\n    return;\n  }\n\n  var path = new ShapePath();\n  var x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\n\n  if (glyph.o) {\n    var outline = glyph._cachedOutline || (glyph._cachedOutline = glyph.o.split(' '));\n\n    for (var i = 0, l = outline.length; i < l;) {\n      var action = outline[i++];\n\n      switch (action) {\n        case 'm':\n          // moveTo\n          x = parseInt(outline[i++]) * scale + offsetX;\n          y = parseInt(outline[i++]) * scale + offsetY;\n          path.moveTo(x, y);\n          break;\n\n        case 'l':\n          // lineTo\n          x = parseInt(outline[i++]) * scale + offsetX;\n          y = parseInt(outline[i++]) * scale + offsetY;\n          path.lineTo(x, y);\n          break;\n\n        case 'q':\n          // quadraticCurveTo\n          cpx = parseInt(outline[i++]) * scale + offsetX;\n          cpy = parseInt(outline[i++]) * scale + offsetY;\n          cpx1 = parseInt(outline[i++]) * scale + offsetX;\n          cpy1 = parseInt(outline[i++]) * scale + offsetY;\n          path.quadraticCurveTo(cpx1, cpy1, cpx, cpy);\n          break;\n\n        case 'b':\n          // bezierCurveTo\n          cpx = parseInt(outline[i++]) * scale + offsetX;\n          cpy = parseInt(outline[i++]) * scale + offsetY;\n          cpx1 = parseInt(outline[i++]) * scale + offsetX;\n          cpy1 = parseInt(outline[i++]) * scale + offsetY;\n          cpx2 = parseInt(outline[i++]) * scale + offsetX;\n          cpy2 = parseInt(outline[i++]) * scale + offsetY;\n          path.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, cpx, cpy);\n          break;\n      }\n    }\n  }\n\n  return {\n    offsetX: glyph.ha * scale,\n    path: path\n  };\n}\n\nexport { Font, FontLoader };","map":{"version":3,"names":["_defineProperty","Loader","FileLoader","ShapePath","FontLoader","manager","url","onLoad","onProgress","onError","loader","setPath","path","setRequestHeader","requestHeader","setWithCredentials","withCredentials","load","response","Error","json","JSON","parse","font","Font","data","text","size","shapes","paths","createPaths","p","pl","length","Array","prototype","push","apply","toShapes","chars","from","scale","resolution","line_height","boundingBox","yMax","yMin","underlineThickness","offsetX","offsetY","i","char","ret","createPath","glyph","glyphs","console","error","familyName","x","y","cpx","cpy","cpx1","cpy1","cpx2","cpy2","o","outline","_cachedOutline","split","l","action","parseInt","moveTo","lineTo","quadraticCurveTo","bezierCurveTo","ha"],"sources":["D:/Jord/l4fycy/node_modules/three-stdlib/loaders/FontLoader.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Loader, FileLoader, ShapePath } from 'three';\n\nclass FontLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, response => {\n      if (typeof response !== 'string') throw new Error('unsupported data type');\n      const json = JSON.parse(response);\n      const font = this.parse(json);\n      if (onLoad) onLoad(font);\n    }, onProgress, onError);\n  }\n\n  parse(json) {\n    return new Font(json);\n  }\n\n}\nclass Font {\n  constructor(data) {\n    _defineProperty(this, \"data\", void 0);\n\n    this.data = data;\n  }\n\n  generateShapes(text, size = 100) {\n    const shapes = [];\n    const paths = createPaths(text, size, this.data);\n\n    for (let p = 0, pl = paths.length; p < pl; p++) {\n      Array.prototype.push.apply(shapes, paths[p].toShapes(false));\n    }\n\n    return shapes;\n  }\n\n}\n\n_defineProperty(Font, \"isFont\", void 0);\n\n_defineProperty(Font, \"type\", void 0);\n\nfunction createPaths(text, size, data) {\n  const chars = Array.from(text);\n  const scale = size / data.resolution;\n  const line_height = (data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness) * scale;\n  const paths = [];\n  let offsetX = 0,\n      offsetY = 0;\n\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i];\n\n    if (char === '\\n') {\n      offsetX = 0;\n      offsetY -= line_height;\n    } else {\n      const ret = createPath(char, scale, offsetX, offsetY, data);\n\n      if (ret) {\n        offsetX += ret.offsetX;\n        paths.push(ret.path);\n      }\n    }\n  }\n\n  return paths;\n}\n\nfunction createPath(char, scale, offsetX, offsetY, data) {\n  const glyph = data.glyphs[char] || data.glyphs['?'];\n\n  if (!glyph) {\n    console.error('THREE.Font: character \"' + char + '\" does not exists in font family ' + data.familyName + '.');\n    return;\n  }\n\n  const path = new ShapePath();\n  let x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\n\n  if (glyph.o) {\n    const outline = glyph._cachedOutline || (glyph._cachedOutline = glyph.o.split(' '));\n\n    for (let i = 0, l = outline.length; i < l;) {\n      const action = outline[i++];\n\n      switch (action) {\n        case 'm':\n          // moveTo\n          x = parseInt(outline[i++]) * scale + offsetX;\n          y = parseInt(outline[i++]) * scale + offsetY;\n          path.moveTo(x, y);\n          break;\n\n        case 'l':\n          // lineTo\n          x = parseInt(outline[i++]) * scale + offsetX;\n          y = parseInt(outline[i++]) * scale + offsetY;\n          path.lineTo(x, y);\n          break;\n\n        case 'q':\n          // quadraticCurveTo\n          cpx = parseInt(outline[i++]) * scale + offsetX;\n          cpy = parseInt(outline[i++]) * scale + offsetY;\n          cpx1 = parseInt(outline[i++]) * scale + offsetX;\n          cpy1 = parseInt(outline[i++]) * scale + offsetY;\n          path.quadraticCurveTo(cpx1, cpy1, cpx, cpy);\n          break;\n\n        case 'b':\n          // bezierCurveTo\n          cpx = parseInt(outline[i++]) * scale + offsetX;\n          cpy = parseInt(outline[i++]) * scale + offsetY;\n          cpx1 = parseInt(outline[i++]) * scale + offsetX;\n          cpy1 = parseInt(outline[i++]) * scale + offsetY;\n          cpx2 = parseInt(outline[i++]) * scale + offsetX;\n          cpy2 = parseInt(outline[i++]) * scale + offsetY;\n          path.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, cpx, cpy);\n          break;\n      }\n    }\n  }\n\n  return {\n    offsetX: glyph.ha * scale,\n    path\n  };\n}\n\nexport { Font, FontLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}