{"ast":null,"code":"import _classCallCheck from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Vector2, MeshNormalMaterial, ShaderMaterial, Vector4, WebGLRenderTarget, DepthTexture, NearestFilter, RGBAFormat } from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\n\nvar RenderPixelatedPass = /*#__PURE__*/function (_Pass) {\n  _inherits(RenderPixelatedPass, _Pass);\n\n  var _super = _createSuper(RenderPixelatedPass);\n\n  function RenderPixelatedPass(resolution, pixelSize, scene, camera) {\n    var _this;\n\n    var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n\n    _classCallCheck(this, RenderPixelatedPass);\n\n    var _options$normalEdgeSt, _options$depthEdgeStr;\n\n    _this = _super.call(this);\n    _this.pixelSize = pixelSize;\n    _this.resolution = new Vector2();\n    _this.renderResolution = new Vector2();\n\n    _this.setSize(resolution.x, resolution.y);\n\n    _this.fsQuad = new FullScreenQuad(_this.material());\n    _this.scene = scene;\n    _this.camera = camera;\n    _this.normalEdgeStrength = (_options$normalEdgeSt = options.normalEdgeStrength) != null ? _options$normalEdgeSt : 0.3;\n    _this.depthEdgeStrength = (_options$depthEdgeStr = options.depthEdgeStrength) != null ? _options$depthEdgeStr : 0.4;\n    _this.rgbRenderTarget = pixelRenderTarget(_this.renderResolution, RGBAFormat, true);\n    _this.normalRenderTarget = pixelRenderTarget(_this.renderResolution, RGBAFormat, false);\n    _this.normalMaterial = new MeshNormalMaterial();\n    return _this;\n  }\n\n  _createClass(RenderPixelatedPass, [{\n    key: \"dispose\",\n    value: function dispose() {\n      this.rgbRenderTarget.dispose();\n      this.normalRenderTarget.dispose();\n      this.fsQuad.dispose();\n    }\n  }, {\n    key: \"setSize\",\n    value: function setSize(width, height) {\n      var _this$rgbRenderTarget, _this$normalRenderTar, _this$fsQuad;\n\n      this.resolution.set(width, height);\n      this.renderResolution.set(width / this.pixelSize | 0, height / this.pixelSize | 0);\n      var _this$renderResolutio = this.renderResolution,\n          x = _this$renderResolutio.x,\n          y = _this$renderResolutio.y;\n      (_this$rgbRenderTarget = this.rgbRenderTarget) === null || _this$rgbRenderTarget === void 0 ? void 0 : _this$rgbRenderTarget.setSize(x, y);\n      (_this$normalRenderTar = this.normalRenderTarget) === null || _this$normalRenderTar === void 0 ? void 0 : _this$normalRenderTar.setSize(x, y);\n      (_this$fsQuad = this.fsQuad) === null || _this$fsQuad === void 0 ? void 0 : _this$fsQuad.material.uniforms.resolution.value.set(x, y, 1 / x, 1 / y);\n    }\n  }, {\n    key: \"setPixelSize\",\n    value: function setPixelSize(pixelSize) {\n      this.pixelSize = pixelSize;\n      this.setSize(this.resolution.x, this.resolution.y);\n    }\n  }, {\n    key: \"render\",\n    value: function render(renderer, writeBuffer) {\n      var uniforms = this.fsQuad.material.uniforms;\n      uniforms.normalEdgeStrength.value = this.normalEdgeStrength;\n      uniforms.depthEdgeStrength.value = this.depthEdgeStrength;\n      renderer.setRenderTarget(this.rgbRenderTarget);\n      renderer.render(this.scene, this.camera);\n      var overrideMaterial_old = this.scene.overrideMaterial;\n      renderer.setRenderTarget(this.normalRenderTarget);\n      this.scene.overrideMaterial = this.normalMaterial;\n      renderer.render(this.scene, this.camera);\n      this.scene.overrideMaterial = overrideMaterial_old;\n      uniforms.tDiffuse.value = this.rgbRenderTarget.texture;\n      uniforms.tDepth.value = this.rgbRenderTarget.depthTexture;\n      uniforms.tNormal.value = this.normalRenderTarget.texture;\n\n      if (this.renderToScreen) {\n        renderer.setRenderTarget(null);\n      } else {\n        renderer.setRenderTarget(writeBuffer);\n        if (this.clear) renderer.clear();\n      }\n\n      this.fsQuad.render(renderer);\n    }\n  }, {\n    key: \"material\",\n    value: function material() {\n      return new ShaderMaterial({\n        uniforms: {\n          tDiffuse: {\n            value: null\n          },\n          tDepth: {\n            value: null\n          },\n          tNormal: {\n            value: null\n          },\n          resolution: {\n            value: new Vector4(this.renderResolution.x, this.renderResolution.y, 1 / this.renderResolution.x, 1 / this.renderResolution.y)\n          },\n          normalEdgeStrength: {\n            value: 0\n          },\n          depthEdgeStrength: {\n            value: 0\n          }\n        },\n        vertexShader: \"\\n\\t\\t\\t\\tvarying vec2 vUv;\\n\\n\\t\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\t\\tvUv = uv;\\n\\t\\t\\t\\t\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\",\n        fragmentShader: \"\\n\\t\\t\\t\\tuniform sampler2D tDiffuse;\\n\\t\\t\\t\\tuniform sampler2D tDepth;\\n\\t\\t\\t\\tuniform sampler2D tNormal;\\n\\t\\t\\t\\tuniform vec4 resolution;\\n\\t\\t\\t\\tuniform float normalEdgeStrength;\\n\\t\\t\\t\\tuniform float depthEdgeStrength;\\n\\t\\t\\t\\tvarying vec2 vUv;\\n\\n\\t\\t\\t\\tfloat getDepth(int x, int y) {\\n\\n\\t\\t\\t\\t\\treturn texture2D( tDepth, vUv + vec2(x, y) * resolution.zw ).r;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tvec3 getNormal(int x, int y) {\\n\\n\\t\\t\\t\\t\\treturn texture2D( tNormal, vUv + vec2(x, y) * resolution.zw ).rgb * 2.0 - 1.0;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tfloat depthEdgeIndicator(float depth, vec3 normal) {\\n\\n\\t\\t\\t\\t\\tfloat diff = 0.0;\\n\\t\\t\\t\\t\\tdiff += clamp(getDepth(1, 0) - depth, 0.0, 1.0);\\n\\t\\t\\t\\t\\tdiff += clamp(getDepth(-1, 0) - depth, 0.0, 1.0);\\n\\t\\t\\t\\t\\tdiff += clamp(getDepth(0, 1) - depth, 0.0, 1.0);\\n\\t\\t\\t\\t\\tdiff += clamp(getDepth(0, -1) - depth, 0.0, 1.0);\\n\\t\\t\\t\\t\\treturn floor(smoothstep(0.01, 0.02, diff) * 2.) / 2.;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tfloat neighborNormalEdgeIndicator(int x, int y, float depth, vec3 normal) {\\n\\n\\t\\t\\t\\t\\tfloat depthDiff = getDepth(x, y) - depth;\\n\\t\\t\\t\\t\\tvec3 neighborNormal = getNormal(x, y);\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t// Edge pixels should yield to faces who's normals are closer to the bias normal.\\n\\t\\t\\t\\t\\tvec3 normalEdgeBias = vec3(1., 1., 1.); // This should probably be a parameter.\\n\\t\\t\\t\\t\\tfloat normalDiff = dot(normal - neighborNormal, normalEdgeBias);\\n\\t\\t\\t\\t\\tfloat normalIndicator = clamp(smoothstep(-.01, .01, normalDiff), 0.0, 1.0);\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t// Only the shallower pixel should detect the normal edge.\\n\\t\\t\\t\\t\\tfloat depthIndicator = clamp(sign(depthDiff * .25 + .0025), 0.0, 1.0);\\n\\n\\t\\t\\t\\t\\treturn (1.0 - dot(normal, neighborNormal)) * depthIndicator * normalIndicator;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tfloat normalEdgeIndicator(float depth, vec3 normal) {\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\tfloat indicator = 0.0;\\n\\n\\t\\t\\t\\t\\tindicator += neighborNormalEdgeIndicator(0, -1, depth, normal);\\n\\t\\t\\t\\t\\tindicator += neighborNormalEdgeIndicator(0, 1, depth, normal);\\n\\t\\t\\t\\t\\tindicator += neighborNormalEdgeIndicator(-1, 0, depth, normal);\\n\\t\\t\\t\\t\\tindicator += neighborNormalEdgeIndicator(1, 0, depth, normal);\\n\\n\\t\\t\\t\\t\\treturn step(0.1, indicator);\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\t\\tvec4 texel = texture2D( tDiffuse, vUv );\\n\\n\\t\\t\\t\\t\\tfloat depth = 0.0;\\n\\t\\t\\t\\t\\tvec3 normal = vec3(0.0);\\n\\n\\t\\t\\t\\t\\tif (depthEdgeStrength > 0.0 || normalEdgeStrength > 0.0) {\\n\\n\\t\\t\\t\\t\\t\\tdepth = getDepth(0, 0);\\n\\t\\t\\t\\t\\t\\tnormal = getNormal(0, 0);\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tfloat dei = 0.0;\\n\\t\\t\\t\\t\\tif (depthEdgeStrength > 0.0) \\n\\t\\t\\t\\t\\t\\tdei = depthEdgeIndicator(depth, normal);\\n\\n\\t\\t\\t\\t\\tfloat nei = 0.0; \\n\\t\\t\\t\\t\\tif (normalEdgeStrength > 0.0) \\n\\t\\t\\t\\t\\t\\tnei = normalEdgeIndicator(depth, normal);\\n\\n\\t\\t\\t\\t\\tfloat Strength = dei > 0.0 ? (1.0 - depthEdgeStrength * dei) : (1.0 + normalEdgeStrength * nei);\\n\\n\\t\\t\\t\\t\\tgl_FragColor = texel * Strength;\\n\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t\"\n      });\n    }\n  }]);\n\n  return RenderPixelatedPass;\n}(Pass);\n\nfunction pixelRenderTarget(resolution, pixelFormat, useDepthTexture) {\n  var renderTarget = new WebGLRenderTarget(resolution.x, resolution.y, !useDepthTexture ? undefined : {\n    depthTexture: new DepthTexture(resolution.x, resolution.y),\n    depthBuffer: true\n  });\n  renderTarget.texture.format = pixelFormat;\n  renderTarget.texture.minFilter = NearestFilter;\n  renderTarget.texture.magFilter = NearestFilter;\n  renderTarget.texture.generateMipmaps = false;\n  renderTarget.stencilBuffer = false;\n  return renderTarget;\n}\n\nexport { RenderPixelatedPass };","map":{"version":3,"names":["Vector2","MeshNormalMaterial","ShaderMaterial","Vector4","WebGLRenderTarget","DepthTexture","NearestFilter","RGBAFormat","Pass","FullScreenQuad","RenderPixelatedPass","resolution","pixelSize","scene","camera","options","_options$normalEdgeSt","_options$depthEdgeStr","renderResolution","setSize","x","y","fsQuad","material","normalEdgeStrength","depthEdgeStrength","rgbRenderTarget","pixelRenderTarget","normalRenderTarget","normalMaterial","dispose","width","height","_this$rgbRenderTarget","_this$normalRenderTar","_this$fsQuad","set","uniforms","value","renderer","writeBuffer","setRenderTarget","render","overrideMaterial_old","overrideMaterial","tDiffuse","texture","tDepth","depthTexture","tNormal","renderToScreen","clear","vertexShader","fragmentShader","pixelFormat","useDepthTexture","renderTarget","undefined","depthBuffer","format","minFilter","magFilter","generateMipmaps","stencilBuffer"],"sources":["C:/Users/Arnav/Downloads/l4fycy/node_modules/three-stdlib/postprocessing/RenderPixelatedPass.js"],"sourcesContent":["import { Vector2, MeshNormalMaterial, ShaderMaterial, Vector4, WebGLRenderTarget, DepthTexture, NearestFilter, RGBAFormat } from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\n\nclass RenderPixelatedPass extends Pass {\n  constructor(resolution, pixelSize, scene, camera, options = {}) {\n    var _options$normalEdgeSt, _options$depthEdgeStr;\n\n    super();\n    this.pixelSize = pixelSize;\n    this.resolution = new Vector2();\n    this.renderResolution = new Vector2();\n    this.setSize(resolution.x, resolution.y);\n    this.fsQuad = new FullScreenQuad(this.material());\n    this.scene = scene;\n    this.camera = camera;\n    this.normalEdgeStrength = (_options$normalEdgeSt = options.normalEdgeStrength) != null ? _options$normalEdgeSt : 0.3;\n    this.depthEdgeStrength = (_options$depthEdgeStr = options.depthEdgeStrength) != null ? _options$depthEdgeStr : 0.4;\n    this.rgbRenderTarget = pixelRenderTarget(this.renderResolution, RGBAFormat, true);\n    this.normalRenderTarget = pixelRenderTarget(this.renderResolution, RGBAFormat, false);\n    this.normalMaterial = new MeshNormalMaterial();\n  }\n\n  dispose() {\n    this.rgbRenderTarget.dispose();\n    this.normalRenderTarget.dispose();\n    this.fsQuad.dispose();\n  }\n\n  setSize(width, height) {\n    var _this$rgbRenderTarget, _this$normalRenderTar, _this$fsQuad;\n\n    this.resolution.set(width, height);\n    this.renderResolution.set(width / this.pixelSize | 0, height / this.pixelSize | 0);\n    const {\n      x,\n      y\n    } = this.renderResolution;\n    (_this$rgbRenderTarget = this.rgbRenderTarget) === null || _this$rgbRenderTarget === void 0 ? void 0 : _this$rgbRenderTarget.setSize(x, y);\n    (_this$normalRenderTar = this.normalRenderTarget) === null || _this$normalRenderTar === void 0 ? void 0 : _this$normalRenderTar.setSize(x, y);\n    (_this$fsQuad = this.fsQuad) === null || _this$fsQuad === void 0 ? void 0 : _this$fsQuad.material.uniforms.resolution.value.set(x, y, 1 / x, 1 / y);\n  }\n\n  setPixelSize(pixelSize) {\n    this.pixelSize = pixelSize;\n    this.setSize(this.resolution.x, this.resolution.y);\n  }\n\n  render(renderer, writeBuffer) {\n    const uniforms = this.fsQuad.material.uniforms;\n    uniforms.normalEdgeStrength.value = this.normalEdgeStrength;\n    uniforms.depthEdgeStrength.value = this.depthEdgeStrength;\n    renderer.setRenderTarget(this.rgbRenderTarget);\n    renderer.render(this.scene, this.camera);\n    const overrideMaterial_old = this.scene.overrideMaterial;\n    renderer.setRenderTarget(this.normalRenderTarget);\n    this.scene.overrideMaterial = this.normalMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = overrideMaterial_old;\n    uniforms.tDiffuse.value = this.rgbRenderTarget.texture;\n    uniforms.tDepth.value = this.rgbRenderTarget.depthTexture;\n    uniforms.tNormal.value = this.normalRenderTarget.texture;\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n    } else {\n      renderer.setRenderTarget(writeBuffer);\n      if (this.clear) renderer.clear();\n    }\n\n    this.fsQuad.render(renderer);\n  }\n\n  material() {\n    return new ShaderMaterial({\n      uniforms: {\n        tDiffuse: {\n          value: null\n        },\n        tDepth: {\n          value: null\n        },\n        tNormal: {\n          value: null\n        },\n        resolution: {\n          value: new Vector4(this.renderResolution.x, this.renderResolution.y, 1 / this.renderResolution.x, 1 / this.renderResolution.y)\n        },\n        normalEdgeStrength: {\n          value: 0\n        },\n        depthEdgeStrength: {\n          value: 0\n        }\n      },\n      vertexShader: `\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t\t\t}\n\t\t\t\t`,\n      fragmentShader: `\n\t\t\t\tuniform sampler2D tDiffuse;\n\t\t\t\tuniform sampler2D tDepth;\n\t\t\t\tuniform sampler2D tNormal;\n\t\t\t\tuniform vec4 resolution;\n\t\t\t\tuniform float normalEdgeStrength;\n\t\t\t\tuniform float depthEdgeStrength;\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\tfloat getDepth(int x, int y) {\n\n\t\t\t\t\treturn texture2D( tDepth, vUv + vec2(x, y) * resolution.zw ).r;\n\n\t\t\t\t}\n\n\t\t\t\tvec3 getNormal(int x, int y) {\n\n\t\t\t\t\treturn texture2D( tNormal, vUv + vec2(x, y) * resolution.zw ).rgb * 2.0 - 1.0;\n\n\t\t\t\t}\n\n\t\t\t\tfloat depthEdgeIndicator(float depth, vec3 normal) {\n\n\t\t\t\t\tfloat diff = 0.0;\n\t\t\t\t\tdiff += clamp(getDepth(1, 0) - depth, 0.0, 1.0);\n\t\t\t\t\tdiff += clamp(getDepth(-1, 0) - depth, 0.0, 1.0);\n\t\t\t\t\tdiff += clamp(getDepth(0, 1) - depth, 0.0, 1.0);\n\t\t\t\t\tdiff += clamp(getDepth(0, -1) - depth, 0.0, 1.0);\n\t\t\t\t\treturn floor(smoothstep(0.01, 0.02, diff) * 2.) / 2.;\n\n\t\t\t\t}\n\n\t\t\t\tfloat neighborNormalEdgeIndicator(int x, int y, float depth, vec3 normal) {\n\n\t\t\t\t\tfloat depthDiff = getDepth(x, y) - depth;\n\t\t\t\t\tvec3 neighborNormal = getNormal(x, y);\n\t\t\t\t\t\n\t\t\t\t\t// Edge pixels should yield to faces who's normals are closer to the bias normal.\n\t\t\t\t\tvec3 normalEdgeBias = vec3(1., 1., 1.); // This should probably be a parameter.\n\t\t\t\t\tfloat normalDiff = dot(normal - neighborNormal, normalEdgeBias);\n\t\t\t\t\tfloat normalIndicator = clamp(smoothstep(-.01, .01, normalDiff), 0.0, 1.0);\n\t\t\t\t\t\n\t\t\t\t\t// Only the shallower pixel should detect the normal edge.\n\t\t\t\t\tfloat depthIndicator = clamp(sign(depthDiff * .25 + .0025), 0.0, 1.0);\n\n\t\t\t\t\treturn (1.0 - dot(normal, neighborNormal)) * depthIndicator * normalIndicator;\n\n\t\t\t\t}\n\n\t\t\t\tfloat normalEdgeIndicator(float depth, vec3 normal) {\n\t\t\t\t\t\n\t\t\t\t\tfloat indicator = 0.0;\n\n\t\t\t\t\tindicator += neighborNormalEdgeIndicator(0, -1, depth, normal);\n\t\t\t\t\tindicator += neighborNormalEdgeIndicator(0, 1, depth, normal);\n\t\t\t\t\tindicator += neighborNormalEdgeIndicator(-1, 0, depth, normal);\n\t\t\t\t\tindicator += neighborNormalEdgeIndicator(1, 0, depth, normal);\n\n\t\t\t\t\treturn step(0.1, indicator);\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec4 texel = texture2D( tDiffuse, vUv );\n\n\t\t\t\t\tfloat depth = 0.0;\n\t\t\t\t\tvec3 normal = vec3(0.0);\n\n\t\t\t\t\tif (depthEdgeStrength > 0.0 || normalEdgeStrength > 0.0) {\n\n\t\t\t\t\t\tdepth = getDepth(0, 0);\n\t\t\t\t\t\tnormal = getNormal(0, 0);\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat dei = 0.0;\n\t\t\t\t\tif (depthEdgeStrength > 0.0) \n\t\t\t\t\t\tdei = depthEdgeIndicator(depth, normal);\n\n\t\t\t\t\tfloat nei = 0.0; \n\t\t\t\t\tif (normalEdgeStrength > 0.0) \n\t\t\t\t\t\tnei = normalEdgeIndicator(depth, normal);\n\n\t\t\t\t\tfloat Strength = dei > 0.0 ? (1.0 - depthEdgeStrength * dei) : (1.0 + normalEdgeStrength * nei);\n\n\t\t\t\t\tgl_FragColor = texel * Strength;\n\n\t\t\t\t}\n\t\t\t\t`\n    });\n  }\n\n}\n\nfunction pixelRenderTarget(resolution, pixelFormat, useDepthTexture) {\n  const renderTarget = new WebGLRenderTarget(resolution.x, resolution.y, !useDepthTexture ? undefined : {\n    depthTexture: new DepthTexture(resolution.x, resolution.y),\n    depthBuffer: true\n  });\n  renderTarget.texture.format = pixelFormat;\n  renderTarget.texture.minFilter = NearestFilter;\n  renderTarget.texture.magFilter = NearestFilter;\n  renderTarget.texture.generateMipmaps = false;\n  renderTarget.stencilBuffer = false;\n  return renderTarget;\n}\n\nexport { RenderPixelatedPass };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}