{"ast":null,"code":"import _classCallCheck from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Loader, FileLoader, AnimationClip, Skeleton, Vector3, Quaternion, Bone, VectorKeyframeTrack, QuaternionKeyframeTrack } from 'three';\n/**\n * Description: reads BVH files and outputs a single Skeleton and an AnimationClip\n *\n * Currently only supports bvh files containing a single root.\n *\n */\n\nvar BVHLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(BVHLoader, _Loader);\n\n  var _super = _createSuper(BVHLoader);\n\n  function BVHLoader(manager) {\n    var _this;\n\n    _classCallCheck(this, BVHLoader);\n\n    _this = _super.call(this, manager);\n    _this.animateBonePositions = true;\n    _this.animateBoneRotations = true;\n    return _this;\n  }\n\n  _createClass(BVHLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var loader = new FileLoader(scope.manager);\n      loader.setPath(scope.path);\n      loader.setRequestHeader(scope.requestHeader);\n      loader.setWithCredentials(scope.withCredentials);\n      loader.load(url, function (text) {\n        try {\n          onLoad(scope.parse(text));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(text) {\n      /*\n      reads a string array (lines) from a BVH file\n      and outputs a skeleton structure including motion data\n      returns thee root node:\n      { name: '', channels: [], children: [] }\n      */\n      function readBvh(lines) {\n        // read model structure\n        if (nextLine(lines) !== 'HIERARCHY') {\n          console.error('THREE.BVHLoader: HIERARCHY expected.');\n        }\n\n        var list = []; // collects flat array of all bones\n\n        var root = readNode(lines, nextLine(lines), list); // read motion data\n\n        if (nextLine(lines) !== 'MOTION') {\n          console.error('THREE.BVHLoader: MOTION expected.');\n        } // number of frames\n\n\n        var tokens = nextLine(lines).split(/[\\s]+/);\n        var numFrames = parseInt(tokens[1]);\n\n        if (isNaN(numFrames)) {\n          console.error('THREE.BVHLoader: Failed to read number of frames.');\n        } // frame time\n\n\n        tokens = nextLine(lines).split(/[\\s]+/);\n        var frameTime = parseFloat(tokens[2]);\n\n        if (isNaN(frameTime)) {\n          console.error('THREE.BVHLoader: Failed to read frame time.');\n        } // read frame data line by line\n\n\n        for (var i = 0; i < numFrames; i++) {\n          tokens = nextLine(lines).split(/[\\s]+/);\n          readFrameData(tokens, i * frameTime, root);\n        }\n\n        return list;\n      }\n      /*\n      Recursively reads data from a single frame into the bone hierarchy.\n      The passed bone hierarchy has to be structured in the same order as the BVH file.\n      keyframe data is stored in bone.frames.\n      - data: splitted string array (frame values), values are shift()ed so\n      this should be empty after parsing the whole hierarchy.\n      - frameTime: playback time for this keyframe.\n      - bone: the bone to read frame data from.\n      */\n\n\n      function readFrameData(data, frameTime, bone) {\n        // end sites have no motion data\n        if (bone.type === 'ENDSITE') return; // add keyframe\n\n        var keyframe = {\n          time: frameTime,\n          position: new Vector3(),\n          rotation: new Quaternion()\n        };\n        bone.frames.push(keyframe);\n        var quat = new Quaternion();\n        var vx = new Vector3(1, 0, 0);\n        var vy = new Vector3(0, 1, 0);\n        var vz = new Vector3(0, 0, 1); // parse values for each channel in node\n\n        for (var i = 0; i < bone.channels.length; i++) {\n          switch (bone.channels[i]) {\n            case 'Xposition':\n              keyframe.position.x = parseFloat(data.shift().trim());\n              break;\n\n            case 'Yposition':\n              keyframe.position.y = parseFloat(data.shift().trim());\n              break;\n\n            case 'Zposition':\n              keyframe.position.z = parseFloat(data.shift().trim());\n              break;\n\n            case 'Xrotation':\n              quat.setFromAxisAngle(vx, parseFloat(data.shift().trim()) * Math.PI / 180);\n              keyframe.rotation.multiply(quat);\n              break;\n\n            case 'Yrotation':\n              quat.setFromAxisAngle(vy, parseFloat(data.shift().trim()) * Math.PI / 180);\n              keyframe.rotation.multiply(quat);\n              break;\n\n            case 'Zrotation':\n              quat.setFromAxisAngle(vz, parseFloat(data.shift().trim()) * Math.PI / 180);\n              keyframe.rotation.multiply(quat);\n              break;\n\n            default:\n              console.warn('THREE.BVHLoader: Invalid channel type.');\n          }\n        } // parse child nodes\n\n\n        for (var _i = 0; _i < bone.children.length; _i++) {\n          readFrameData(data, frameTime, bone.children[_i]);\n        }\n      }\n      /*\n      Recursively parses the HIERACHY section of the BVH file\n      - lines: all lines of the file. lines are consumed as we go along.\n      - firstline: line containing the node type and name e.g. 'JOINT hip'\n      - list: collects a flat list of nodes\n      returns: a BVH node including children\n      */\n\n\n      function readNode(lines, firstline, list) {\n        var node = {\n          name: '',\n          type: '',\n          frames: []\n        };\n        list.push(node); // parse node type and name\n\n        var tokens = firstline.split(/[\\s]+/);\n\n        if (tokens[0].toUpperCase() === 'END' && tokens[1].toUpperCase() === 'SITE') {\n          node.type = 'ENDSITE';\n          node.name = 'ENDSITE'; // bvh end sites have no name\n        } else {\n          node.name = tokens[1];\n          node.type = tokens[0].toUpperCase();\n        }\n\n        if (nextLine(lines) !== '{') {\n          console.error('THREE.BVHLoader: Expected opening { after type & name');\n        } // parse OFFSET\n\n\n        tokens = nextLine(lines).split(/[\\s]+/);\n\n        if (tokens[0] !== 'OFFSET') {\n          console.error('THREE.BVHLoader: Expected OFFSET but got: ' + tokens[0]);\n        }\n\n        if (tokens.length !== 4) {\n          console.error('THREE.BVHLoader: Invalid number of values for OFFSET.');\n        }\n\n        var offset = new Vector3(parseFloat(tokens[1]), parseFloat(tokens[2]), parseFloat(tokens[3]));\n\n        if (isNaN(offset.x) || isNaN(offset.y) || isNaN(offset.z)) {\n          console.error('THREE.BVHLoader: Invalid values of OFFSET.');\n        }\n\n        node.offset = offset; // parse CHANNELS definitions\n\n        if (node.type !== 'ENDSITE') {\n          tokens = nextLine(lines).split(/[\\s]+/);\n\n          if (tokens[0] !== 'CHANNELS') {\n            console.error('THREE.BVHLoader: Expected CHANNELS definition.');\n          }\n\n          var numChannels = parseInt(tokens[1]);\n          node.channels = tokens.splice(2, numChannels);\n          node.children = [];\n        } // read children\n\n\n        while (true) {\n          var line = nextLine(lines);\n\n          if (line === '}') {\n            return node;\n          } else {\n            node.children.push(readNode(lines, line, list));\n          }\n        }\n      }\n      /*\n      recursively converts the internal bvh node structure to a Bone hierarchy\n      source: the bvh root node\n      list: pass an empty array, collects a flat list of all converted THREE.Bones\n      returns the root Bone\n      */\n\n\n      function toTHREEBone(source, list) {\n        var bone = new Bone();\n        list.push(bone);\n        bone.position.add(source.offset);\n        bone.name = source.name;\n\n        if (source.type !== 'ENDSITE') {\n          for (var i = 0; i < source.children.length; i++) {\n            bone.add(toTHREEBone(source.children[i], list));\n          }\n        }\n\n        return bone;\n      }\n      /*\n      builds a AnimationClip from the keyframe data saved in each bone.\n      bone: bvh root node\n      returns: a AnimationClip containing position and quaternion tracks\n      */\n\n\n      function toTHREEAnimation(bones) {\n        var tracks = []; // create a position and quaternion animation track for each node\n\n        for (var i = 0; i < bones.length; i++) {\n          var bone = bones[i];\n          if (bone.type === 'ENDSITE') continue; // track data\n\n          var times = [];\n          var positions = [];\n          var rotations = [];\n\n          for (var j = 0; j < bone.frames.length; j++) {\n            var frame = bone.frames[j];\n            times.push(frame.time); // the animation system animates the position property,\n            // so we have to add the joint offset to all values\n\n            positions.push(frame.position.x + bone.offset.x);\n            positions.push(frame.position.y + bone.offset.y);\n            positions.push(frame.position.z + bone.offset.z);\n            rotations.push(frame.rotation.x);\n            rotations.push(frame.rotation.y);\n            rotations.push(frame.rotation.z);\n            rotations.push(frame.rotation.w);\n          }\n\n          if (scope.animateBonePositions) {\n            tracks.push(new VectorKeyframeTrack('.bones[' + bone.name + '].position', times, positions));\n          }\n\n          if (scope.animateBoneRotations) {\n            tracks.push(new QuaternionKeyframeTrack('.bones[' + bone.name + '].quaternion', times, rotations));\n          }\n        }\n\n        return new AnimationClip('animation', -1, tracks);\n      }\n      /*\n      returns the next non-empty line in lines\n      */\n\n\n      function nextLine(lines) {\n        var line; // skip empty lines\n\n        while ((line = lines.shift().trim()).length === 0) {}\n\n        return line;\n      }\n\n      var scope = this;\n      var lines = text.split(/[\\r\\n]+/g);\n      var bones = readBvh(lines);\n      var threeBones = [];\n      toTHREEBone(bones[0], threeBones);\n      var threeClip = toTHREEAnimation(bones);\n      return {\n        skeleton: new Skeleton(threeBones),\n        clip: threeClip\n      };\n    }\n  }]);\n\n  return BVHLoader;\n}(Loader);\n\nexport { BVHLoader };","map":{"version":3,"names":["Loader","FileLoader","AnimationClip","Skeleton","Vector3","Quaternion","Bone","VectorKeyframeTrack","QuaternionKeyframeTrack","BVHLoader","manager","animateBonePositions","animateBoneRotations","url","onLoad","onProgress","onError","scope","loader","setPath","path","setRequestHeader","requestHeader","setWithCredentials","withCredentials","load","text","parse","e","console","error","itemError","readBvh","lines","nextLine","list","root","readNode","tokens","split","numFrames","parseInt","isNaN","frameTime","parseFloat","i","readFrameData","data","bone","type","keyframe","time","position","rotation","frames","push","quat","vx","vy","vz","channels","length","x","shift","trim","y","z","setFromAxisAngle","Math","PI","multiply","warn","children","firstline","node","name","toUpperCase","offset","numChannels","splice","line","toTHREEBone","source","add","toTHREEAnimation","bones","tracks","times","positions","rotations","j","frame","w","threeBones","threeClip","skeleton","clip"],"sources":["C:/Users/Arnav/Downloads/l4fycy/node_modules/three-stdlib/loaders/BVHLoader.js"],"sourcesContent":["import { Loader, FileLoader, AnimationClip, Skeleton, Vector3, Quaternion, Bone, VectorKeyframeTrack, QuaternionKeyframeTrack } from 'three';\n\n/**\n * Description: reads BVH files and outputs a single Skeleton and an AnimationClip\n *\n * Currently only supports bvh files containing a single root.\n *\n */\n\nclass BVHLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.animateBonePositions = true;\n    this.animateBoneRotations = true;\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(text) {\n    /*\n    reads a string array (lines) from a BVH file\n    and outputs a skeleton structure including motion data\n    returns thee root node:\n    { name: '', channels: [], children: [] }\n    */\n    function readBvh(lines) {\n      // read model structure\n      if (nextLine(lines) !== 'HIERARCHY') {\n        console.error('THREE.BVHLoader: HIERARCHY expected.');\n      }\n\n      const list = []; // collects flat array of all bones\n\n      const root = readNode(lines, nextLine(lines), list); // read motion data\n\n      if (nextLine(lines) !== 'MOTION') {\n        console.error('THREE.BVHLoader: MOTION expected.');\n      } // number of frames\n\n\n      let tokens = nextLine(lines).split(/[\\s]+/);\n      const numFrames = parseInt(tokens[1]);\n\n      if (isNaN(numFrames)) {\n        console.error('THREE.BVHLoader: Failed to read number of frames.');\n      } // frame time\n\n\n      tokens = nextLine(lines).split(/[\\s]+/);\n      const frameTime = parseFloat(tokens[2]);\n\n      if (isNaN(frameTime)) {\n        console.error('THREE.BVHLoader: Failed to read frame time.');\n      } // read frame data line by line\n\n\n      for (let i = 0; i < numFrames; i++) {\n        tokens = nextLine(lines).split(/[\\s]+/);\n        readFrameData(tokens, i * frameTime, root);\n      }\n\n      return list;\n    }\n    /*\n    Recursively reads data from a single frame into the bone hierarchy.\n    The passed bone hierarchy has to be structured in the same order as the BVH file.\n    keyframe data is stored in bone.frames.\n    - data: splitted string array (frame values), values are shift()ed so\n    this should be empty after parsing the whole hierarchy.\n    - frameTime: playback time for this keyframe.\n    - bone: the bone to read frame data from.\n    */\n\n\n    function readFrameData(data, frameTime, bone) {\n      // end sites have no motion data\n      if (bone.type === 'ENDSITE') return; // add keyframe\n\n      const keyframe = {\n        time: frameTime,\n        position: new Vector3(),\n        rotation: new Quaternion()\n      };\n      bone.frames.push(keyframe);\n      const quat = new Quaternion();\n      const vx = new Vector3(1, 0, 0);\n      const vy = new Vector3(0, 1, 0);\n      const vz = new Vector3(0, 0, 1); // parse values for each channel in node\n\n      for (let i = 0; i < bone.channels.length; i++) {\n        switch (bone.channels[i]) {\n          case 'Xposition':\n            keyframe.position.x = parseFloat(data.shift().trim());\n            break;\n\n          case 'Yposition':\n            keyframe.position.y = parseFloat(data.shift().trim());\n            break;\n\n          case 'Zposition':\n            keyframe.position.z = parseFloat(data.shift().trim());\n            break;\n\n          case 'Xrotation':\n            quat.setFromAxisAngle(vx, parseFloat(data.shift().trim()) * Math.PI / 180);\n            keyframe.rotation.multiply(quat);\n            break;\n\n          case 'Yrotation':\n            quat.setFromAxisAngle(vy, parseFloat(data.shift().trim()) * Math.PI / 180);\n            keyframe.rotation.multiply(quat);\n            break;\n\n          case 'Zrotation':\n            quat.setFromAxisAngle(vz, parseFloat(data.shift().trim()) * Math.PI / 180);\n            keyframe.rotation.multiply(quat);\n            break;\n\n          default:\n            console.warn('THREE.BVHLoader: Invalid channel type.');\n        }\n      } // parse child nodes\n\n\n      for (let i = 0; i < bone.children.length; i++) {\n        readFrameData(data, frameTime, bone.children[i]);\n      }\n    }\n    /*\n    Recursively parses the HIERACHY section of the BVH file\n    - lines: all lines of the file. lines are consumed as we go along.\n    - firstline: line containing the node type and name e.g. 'JOINT hip'\n    - list: collects a flat list of nodes\n    returns: a BVH node including children\n    */\n\n\n    function readNode(lines, firstline, list) {\n      const node = {\n        name: '',\n        type: '',\n        frames: []\n      };\n      list.push(node); // parse node type and name\n\n      let tokens = firstline.split(/[\\s]+/);\n\n      if (tokens[0].toUpperCase() === 'END' && tokens[1].toUpperCase() === 'SITE') {\n        node.type = 'ENDSITE';\n        node.name = 'ENDSITE'; // bvh end sites have no name\n      } else {\n        node.name = tokens[1];\n        node.type = tokens[0].toUpperCase();\n      }\n\n      if (nextLine(lines) !== '{') {\n        console.error('THREE.BVHLoader: Expected opening { after type & name');\n      } // parse OFFSET\n\n\n      tokens = nextLine(lines).split(/[\\s]+/);\n\n      if (tokens[0] !== 'OFFSET') {\n        console.error('THREE.BVHLoader: Expected OFFSET but got: ' + tokens[0]);\n      }\n\n      if (tokens.length !== 4) {\n        console.error('THREE.BVHLoader: Invalid number of values for OFFSET.');\n      }\n\n      const offset = new Vector3(parseFloat(tokens[1]), parseFloat(tokens[2]), parseFloat(tokens[3]));\n\n      if (isNaN(offset.x) || isNaN(offset.y) || isNaN(offset.z)) {\n        console.error('THREE.BVHLoader: Invalid values of OFFSET.');\n      }\n\n      node.offset = offset; // parse CHANNELS definitions\n\n      if (node.type !== 'ENDSITE') {\n        tokens = nextLine(lines).split(/[\\s]+/);\n\n        if (tokens[0] !== 'CHANNELS') {\n          console.error('THREE.BVHLoader: Expected CHANNELS definition.');\n        }\n\n        const numChannels = parseInt(tokens[1]);\n        node.channels = tokens.splice(2, numChannels);\n        node.children = [];\n      } // read children\n\n\n      while (true) {\n        const line = nextLine(lines);\n\n        if (line === '}') {\n          return node;\n        } else {\n          node.children.push(readNode(lines, line, list));\n        }\n      }\n    }\n    /*\n    recursively converts the internal bvh node structure to a Bone hierarchy\n    source: the bvh root node\n    list: pass an empty array, collects a flat list of all converted THREE.Bones\n    returns the root Bone\n    */\n\n\n    function toTHREEBone(source, list) {\n      const bone = new Bone();\n      list.push(bone);\n      bone.position.add(source.offset);\n      bone.name = source.name;\n\n      if (source.type !== 'ENDSITE') {\n        for (let i = 0; i < source.children.length; i++) {\n          bone.add(toTHREEBone(source.children[i], list));\n        }\n      }\n\n      return bone;\n    }\n    /*\n    builds a AnimationClip from the keyframe data saved in each bone.\n    bone: bvh root node\n    returns: a AnimationClip containing position and quaternion tracks\n    */\n\n\n    function toTHREEAnimation(bones) {\n      const tracks = []; // create a position and quaternion animation track for each node\n\n      for (let i = 0; i < bones.length; i++) {\n        const bone = bones[i];\n        if (bone.type === 'ENDSITE') continue; // track data\n\n        const times = [];\n        const positions = [];\n        const rotations = [];\n\n        for (let j = 0; j < bone.frames.length; j++) {\n          const frame = bone.frames[j];\n          times.push(frame.time); // the animation system animates the position property,\n          // so we have to add the joint offset to all values\n\n          positions.push(frame.position.x + bone.offset.x);\n          positions.push(frame.position.y + bone.offset.y);\n          positions.push(frame.position.z + bone.offset.z);\n          rotations.push(frame.rotation.x);\n          rotations.push(frame.rotation.y);\n          rotations.push(frame.rotation.z);\n          rotations.push(frame.rotation.w);\n        }\n\n        if (scope.animateBonePositions) {\n          tracks.push(new VectorKeyframeTrack('.bones[' + bone.name + '].position', times, positions));\n        }\n\n        if (scope.animateBoneRotations) {\n          tracks.push(new QuaternionKeyframeTrack('.bones[' + bone.name + '].quaternion', times, rotations));\n        }\n      }\n\n      return new AnimationClip('animation', -1, tracks);\n    }\n    /*\n    returns the next non-empty line in lines\n    */\n\n\n    function nextLine(lines) {\n      let line; // skip empty lines\n\n      while ((line = lines.shift().trim()).length === 0) {}\n\n      return line;\n    }\n\n    const scope = this;\n    const lines = text.split(/[\\r\\n]+/g);\n    const bones = readBvh(lines);\n    const threeBones = [];\n    toTHREEBone(bones[0], threeBones);\n    const threeClip = toTHREEAnimation(bones);\n    return {\n      skeleton: new Skeleton(threeBones),\n      clip: threeClip\n    };\n  }\n\n}\n\nexport { BVHLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}