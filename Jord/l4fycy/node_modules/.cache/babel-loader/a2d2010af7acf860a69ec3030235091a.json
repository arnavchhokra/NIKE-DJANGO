{"ast":null,"code":"'use client';\n\nimport _slicedToArray from \"D:/Github/NIKE-DJANGO/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { ListActionTypes } from './listActions.types';\nimport defaultReducer from './listReducer';\nimport useListChangeNotifiers from './useListChangeNotifiers';\nimport useControllableReducer from '../utils/useControllableReducer';\nimport areArraysEqual from '../utils/areArraysEqual';\nimport useLatest from '../utils/useLatest';\nimport useTextNavigation from '../utils/useTextNavigation';\nvar EMPTY_OBJECT = {};\n\nvar NOOP = function NOOP() {};\n\nvar defaultItemComparer = function defaultItemComparer(optionA, optionB) {\n  return optionA === optionB;\n};\n\nvar defaultIsItemDisabled = function defaultIsItemDisabled() {\n  return false;\n};\n\nvar defaultItemStringifier = function defaultItemStringifier(item) {\n  return typeof item === 'string' ? item : String(item);\n};\n\nvar defaultGetInitialState = function defaultGetInitialState() {\n  return {\n    highlightedValue: null,\n    selectedValues: []\n  };\n};\n/**\n * The useList is a lower-level utility that is used to build list-like components.\n * It's used to manage the state of the list and its items.\n *\n * Supports highlighting a single item and selecting an arbitrary number of items.\n *\n * The state of the list is managed by a controllable reducer - that is a reducer that can have its state\n * controlled from outside.\n *\n * By default, the state consists of `selectedValues` and `highlightedValue` but can be extended by the caller of the hook.\n * Also the actions that can be dispatched and the reducer function can be defined externally.\n *\n * @template ItemValue The type of the item values.\n * @template State The type of the list state. This should be a subtype of `ListState<ItemValue>`.\n * @template CustomAction The type of the actions that can be dispatched (besides the standard ListAction).\n * @template CustomActionContext The shape of additional properties that will be added to actions when dispatched.\n *\n * @ignore - internal hook.\n */\n\n\nfunction useList(params) {\n  var _params$controlledPro = params.controlledProps,\n      controlledProps = _params$controlledPro === void 0 ? EMPTY_OBJECT : _params$controlledPro,\n      _params$disabledItems = params.disabledItemsFocusable,\n      disabledItemsFocusable = _params$disabledItems === void 0 ? false : _params$disabledItems,\n      _params$disableListWr = params.disableListWrap,\n      disableListWrap = _params$disableListWr === void 0 ? false : _params$disableListWr,\n      _params$focusManageme = params.focusManagement,\n      focusManagement = _params$focusManageme === void 0 ? 'activeDescendant' : _params$focusManageme,\n      _params$getInitialSta = params.getInitialState,\n      getInitialState = _params$getInitialSta === void 0 ? defaultGetInitialState : _params$getInitialSta,\n      getItemDomElement = params.getItemDomElement,\n      getItemId = params.getItemId,\n      _params$isItemDisable = params.isItemDisabled,\n      isItemDisabled = _params$isItemDisable === void 0 ? defaultIsItemDisabled : _params$isItemDisable,\n      externalListRef = params.rootRef,\n      _params$onStateChange = params.onStateChange,\n      onStateChange = _params$onStateChange === void 0 ? NOOP : _params$onStateChange,\n      items = params.items,\n      _params$itemComparer = params.itemComparer,\n      itemComparer = _params$itemComparer === void 0 ? defaultItemComparer : _params$itemComparer,\n      _params$getItemAsStri = params.getItemAsString,\n      getItemAsString = _params$getItemAsStri === void 0 ? defaultItemStringifier : _params$getItemAsStri,\n      onChange = params.onChange,\n      onHighlightChange = params.onHighlightChange,\n      onItemsChange = params.onItemsChange,\n      _params$orientation = params.orientation,\n      orientation = _params$orientation === void 0 ? 'vertical' : _params$orientation,\n      _params$pageSize = params.pageSize,\n      pageSize = _params$pageSize === void 0 ? 5 : _params$pageSize,\n      _params$reducerAction = params.reducerActionContext,\n      reducerActionContext = _params$reducerAction === void 0 ? EMPTY_OBJECT : _params$reducerAction,\n      _params$selectionMode = params.selectionMode,\n      selectionMode = _params$selectionMode === void 0 ? 'single' : _params$selectionMode,\n      externalReducer = params.stateReducer;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (focusManagement === 'DOM' && getItemDomElement == null) {\n      throw new Error('useList: The `getItemDomElement` prop is required when using the `DOM` focus management.');\n    }\n\n    if (focusManagement === 'activeDescendant' && getItemId == null) {\n      throw new Error('useList: The `getItemId` prop is required when using the `activeDescendant` focus management.');\n    }\n  }\n\n  var listRef = React.useRef(null);\n  var handleRef = useForkRef(externalListRef, listRef);\n  var handleHighlightChange = React.useCallback(function (event, value, reason) {\n    onHighlightChange == null ? void 0 : onHighlightChange(event, value, reason);\n\n    if (focusManagement === 'DOM' && value != null && (reason === ListActionTypes.itemClick || reason === ListActionTypes.keyDown || reason === ListActionTypes.textNavigation)) {\n      var _getItemDomElement;\n\n      getItemDomElement == null || (_getItemDomElement = getItemDomElement(value)) == null ? void 0 : _getItemDomElement.focus();\n    }\n  }, [getItemDomElement, onHighlightChange, focusManagement]);\n  var stateComparers = React.useMemo(function () {\n    return {\n      highlightedValue: itemComparer,\n      selectedValues: function selectedValues(valuesArray1, valuesArray2) {\n        return areArraysEqual(valuesArray1, valuesArray2, itemComparer);\n      }\n    };\n  }, [itemComparer]); // This gets called whenever a reducer changes the state.\n\n  var handleStateChange = React.useCallback(function (event, field, value, reason, state) {\n    onStateChange == null ? void 0 : onStateChange(event, field, value, reason, state);\n\n    switch (field) {\n      case 'highlightedValue':\n        handleHighlightChange(event, value, reason);\n        break;\n\n      case 'selectedValues':\n        onChange == null ? void 0 : onChange(event, value, reason);\n        break;\n\n      default:\n        break;\n    }\n  }, [handleHighlightChange, onChange, onStateChange]); // The following object is added to each action when it's dispatched.\n  // It's accessible in the reducer via the `action.context` field.\n\n  var listActionContext = React.useMemo(function () {\n    return {\n      disabledItemsFocusable: disabledItemsFocusable,\n      disableListWrap: disableListWrap,\n      focusManagement: focusManagement,\n      isItemDisabled: isItemDisabled,\n      itemComparer: itemComparer,\n      items: items,\n      getItemAsString: getItemAsString,\n      onHighlightChange: handleHighlightChange,\n      orientation: orientation,\n      pageSize: pageSize,\n      selectionMode: selectionMode,\n      stateComparers: stateComparers\n    };\n  }, [disabledItemsFocusable, disableListWrap, focusManagement, isItemDisabled, itemComparer, items, getItemAsString, handleHighlightChange, orientation, pageSize, selectionMode, stateComparers]);\n  var initialState = getInitialState();\n  var reducer = externalReducer != null ? externalReducer : defaultReducer;\n  var actionContext = React.useMemo(function () {\n    return _extends({}, reducerActionContext, listActionContext);\n  }, [reducerActionContext, listActionContext]);\n\n  var _useControllableReduc = useControllableReducer({\n    reducer: reducer,\n    actionContext: actionContext,\n    initialState: initialState,\n    controlledProps: controlledProps,\n    stateComparers: stateComparers,\n    onStateChange: handleStateChange\n  }),\n      _useControllableReduc2 = _slicedToArray(_useControllableReduc, 2),\n      state = _useControllableReduc2[0],\n      dispatch = _useControllableReduc2[1];\n\n  var highlightedValue = state.highlightedValue,\n      selectedValues = state.selectedValues;\n  var handleTextNavigation = useTextNavigation(function (searchString, event) {\n    return dispatch({\n      type: ListActionTypes.textNavigation,\n      event: event,\n      searchString: searchString\n    });\n  }); // introducing refs to avoid recreating the getItemState function on each change.\n\n  var latestSelectedValues = useLatest(selectedValues);\n  var latestHighlightedValue = useLatest(highlightedValue);\n  var previousItems = React.useRef([]);\n  React.useEffect(function () {\n    // Whenever the `items` object changes, we need to determine if the actual items changed.\n    // If they did, we need to dispatch an `itemsChange` action, so the selected/highlighted state is updated.\n    if (areArraysEqual(previousItems.current, items, itemComparer)) {\n      return;\n    }\n\n    dispatch({\n      type: ListActionTypes.itemsChange,\n      event: null,\n      items: items,\n      previousItems: previousItems.current\n    });\n    previousItems.current = items;\n    onItemsChange == null ? void 0 : onItemsChange(items);\n  }, [items, itemComparer, dispatch, onItemsChange]); // Subitems are notified of changes to the highlighted and selected values.\n  // This is not done via context because we don't want to trigger a re-render of all the subitems each time any of them changes state.\n  // Instead, we use a custom message bus to publish messages about changes.\n  // On the child component, we use a custom hook to subscribe to these messages and re-render only when the value they care about changes.\n\n  var _useListChangeNotifie = useListChangeNotifiers(),\n      notifySelectionChanged = _useListChangeNotifie.notifySelectionChanged,\n      notifyHighlightChanged = _useListChangeNotifie.notifyHighlightChanged,\n      registerHighlightChangeHandler = _useListChangeNotifie.registerHighlightChangeHandler,\n      registerSelectionChangeHandler = _useListChangeNotifie.registerSelectionChangeHandler;\n\n  React.useEffect(function () {\n    notifySelectionChanged(selectedValues);\n  }, [selectedValues, notifySelectionChanged]);\n  React.useEffect(function () {\n    notifyHighlightChanged(highlightedValue);\n  }, [highlightedValue, notifyHighlightChanged]);\n\n  var createHandleKeyDown = function createHandleKeyDown(other) {\n    return function (event) {\n      var _other$onKeyDown;\n\n      (_other$onKeyDown = other.onKeyDown) == null ? void 0 : _other$onKeyDown.call(other, event);\n\n      if (event.defaultMuiPrevented) {\n        return;\n      }\n\n      var keysToPreventDefault = ['Home', 'End', 'PageUp', 'PageDown'];\n\n      if (orientation === 'vertical') {\n        keysToPreventDefault.push('ArrowUp', 'ArrowDown');\n      } else {\n        keysToPreventDefault.push('ArrowLeft', 'ArrowRight');\n      }\n\n      if (focusManagement === 'activeDescendant') {\n        // When the child element is focused using the activeDescendant attribute,\n        // the list handles keyboard events on its behalf.\n        // We have to `preventDefault()` is this case to prevent the browser from\n        // scrolling the view when space is pressed or submitting forms when enter is pressed.\n        keysToPreventDefault.push(' ', 'Enter');\n      }\n\n      if (keysToPreventDefault.includes(event.key)) {\n        event.preventDefault();\n      }\n\n      dispatch({\n        type: ListActionTypes.keyDown,\n        key: event.key,\n        event: event\n      });\n      handleTextNavigation(event);\n    };\n  };\n\n  var createHandleBlur = function createHandleBlur(other) {\n    return function (event) {\n      var _other$onBlur, _listRef$current;\n\n      (_other$onBlur = other.onBlur) == null ? void 0 : _other$onBlur.call(other, event);\n\n      if (event.defaultMuiPrevented) {\n        return;\n      }\n\n      if ((_listRef$current = listRef.current) != null && _listRef$current.contains(event.relatedTarget)) {\n        // focus remains within the list\n        return;\n      }\n\n      dispatch({\n        type: ListActionTypes.blur,\n        event: event\n      });\n    };\n  };\n\n  var getRootProps = function getRootProps() {\n    var otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _extends({}, otherHandlers, {\n      'aria-activedescendant': focusManagement === 'activeDescendant' && highlightedValue != null ? getItemId(highlightedValue) : undefined,\n      onBlur: createHandleBlur(otherHandlers),\n      onKeyDown: createHandleKeyDown(otherHandlers),\n      tabIndex: focusManagement === 'DOM' ? -1 : 0,\n      ref: handleRef\n    });\n  };\n\n  var getItemState = React.useCallback(function (item) {\n    var _latestSelectedValues;\n\n    var index = items.findIndex(function (i) {\n      return itemComparer(i, item);\n    });\n    var selected = ((_latestSelectedValues = latestSelectedValues.current) != null ? _latestSelectedValues : []).some(function (value) {\n      return value != null && itemComparer(item, value);\n    });\n    var disabled = isItemDisabled(item, index);\n    var highlighted = latestHighlightedValue.current != null && itemComparer(item, latestHighlightedValue.current);\n    var focusable = focusManagement === 'DOM';\n    return {\n      disabled: disabled,\n      focusable: focusable,\n      highlighted: highlighted,\n      index: index,\n      selected: selected\n    };\n  }, [items, isItemDisabled, itemComparer, latestSelectedValues, latestHighlightedValue, focusManagement]);\n  var contextValue = React.useMemo(function () {\n    return {\n      dispatch: dispatch,\n      getItemState: getItemState,\n      registerHighlightChangeHandler: registerHighlightChangeHandler,\n      registerSelectionChangeHandler: registerSelectionChangeHandler\n    };\n  }, [dispatch, getItemState, registerHighlightChangeHandler, registerSelectionChangeHandler]);\n  React.useDebugValue({\n    state: state\n  });\n  return {\n    contextValue: contextValue,\n    dispatch: dispatch,\n    getRootProps: getRootProps,\n    rootRef: handleRef,\n    state: state\n  };\n}\n\nexport default useList;","map":{"version":3,"names":["_extends","React","unstable_useForkRef","useForkRef","ListActionTypes","defaultReducer","useListChangeNotifiers","useControllableReducer","areArraysEqual","useLatest","useTextNavigation","EMPTY_OBJECT","NOOP","defaultItemComparer","optionA","optionB","defaultIsItemDisabled","defaultItemStringifier","item","String","defaultGetInitialState","highlightedValue","selectedValues","useList","params","controlledProps","disabledItemsFocusable","disableListWrap","focusManagement","getInitialState","getItemDomElement","getItemId","isItemDisabled","externalListRef","rootRef","onStateChange","items","itemComparer","getItemAsString","onChange","onHighlightChange","onItemsChange","orientation","pageSize","reducerActionContext","selectionMode","externalReducer","stateReducer","process","env","NODE_ENV","Error","listRef","useRef","handleRef","handleHighlightChange","useCallback","event","value","reason","itemClick","keyDown","textNavigation","_getItemDomElement","focus","stateComparers","useMemo","valuesArray1","valuesArray2","handleStateChange","field","state","listActionContext","initialState","reducer","actionContext","dispatch","handleTextNavigation","searchString","type","latestSelectedValues","latestHighlightedValue","previousItems","useEffect","current","itemsChange","notifySelectionChanged","notifyHighlightChanged","registerHighlightChangeHandler","registerSelectionChangeHandler","createHandleKeyDown","other","_other$onKeyDown","onKeyDown","call","defaultMuiPrevented","keysToPreventDefault","push","includes","key","preventDefault","createHandleBlur","_other$onBlur","_listRef$current","onBlur","contains","relatedTarget","blur","getRootProps","otherHandlers","undefined","tabIndex","ref","getItemState","_latestSelectedValues","index","findIndex","i","selected","some","disabled","highlighted","focusable","contextValue","useDebugValue"],"sources":["D:/Github/NIKE-DJANGO/Jord/l4fycy/node_modules/@mui/base/useList/useList.js"],"sourcesContent":["'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { ListActionTypes } from './listActions.types';\nimport defaultReducer from './listReducer';\nimport useListChangeNotifiers from './useListChangeNotifiers';\nimport useControllableReducer from '../utils/useControllableReducer';\nimport areArraysEqual from '../utils/areArraysEqual';\nimport useLatest from '../utils/useLatest';\nimport useTextNavigation from '../utils/useTextNavigation';\nconst EMPTY_OBJECT = {};\nconst NOOP = () => {};\nconst defaultItemComparer = (optionA, optionB) => optionA === optionB;\nconst defaultIsItemDisabled = () => false;\nconst defaultItemStringifier = item => typeof item === 'string' ? item : String(item);\nconst defaultGetInitialState = () => ({\n  highlightedValue: null,\n  selectedValues: []\n});\n\n/**\n * The useList is a lower-level utility that is used to build list-like components.\n * It's used to manage the state of the list and its items.\n *\n * Supports highlighting a single item and selecting an arbitrary number of items.\n *\n * The state of the list is managed by a controllable reducer - that is a reducer that can have its state\n * controlled from outside.\n *\n * By default, the state consists of `selectedValues` and `highlightedValue` but can be extended by the caller of the hook.\n * Also the actions that can be dispatched and the reducer function can be defined externally.\n *\n * @template ItemValue The type of the item values.\n * @template State The type of the list state. This should be a subtype of `ListState<ItemValue>`.\n * @template CustomAction The type of the actions that can be dispatched (besides the standard ListAction).\n * @template CustomActionContext The shape of additional properties that will be added to actions when dispatched.\n *\n * @ignore - internal hook.\n */\nfunction useList(params) {\n  const {\n    controlledProps = EMPTY_OBJECT,\n    disabledItemsFocusable = false,\n    disableListWrap = false,\n    focusManagement = 'activeDescendant',\n    getInitialState = defaultGetInitialState,\n    getItemDomElement,\n    getItemId,\n    isItemDisabled = defaultIsItemDisabled,\n    rootRef: externalListRef,\n    onStateChange = NOOP,\n    items,\n    itemComparer = defaultItemComparer,\n    getItemAsString = defaultItemStringifier,\n    onChange,\n    onHighlightChange,\n    onItemsChange,\n    orientation = 'vertical',\n    pageSize = 5,\n    reducerActionContext = EMPTY_OBJECT,\n    selectionMode = 'single',\n    stateReducer: externalReducer\n  } = params;\n  if (process.env.NODE_ENV !== 'production') {\n    if (focusManagement === 'DOM' && getItemDomElement == null) {\n      throw new Error('useList: The `getItemDomElement` prop is required when using the `DOM` focus management.');\n    }\n    if (focusManagement === 'activeDescendant' && getItemId == null) {\n      throw new Error('useList: The `getItemId` prop is required when using the `activeDescendant` focus management.');\n    }\n  }\n  const listRef = React.useRef(null);\n  const handleRef = useForkRef(externalListRef, listRef);\n  const handleHighlightChange = React.useCallback((event, value, reason) => {\n    onHighlightChange == null ? void 0 : onHighlightChange(event, value, reason);\n    if (focusManagement === 'DOM' && value != null && (reason === ListActionTypes.itemClick || reason === ListActionTypes.keyDown || reason === ListActionTypes.textNavigation)) {\n      var _getItemDomElement;\n      getItemDomElement == null || (_getItemDomElement = getItemDomElement(value)) == null ? void 0 : _getItemDomElement.focus();\n    }\n  }, [getItemDomElement, onHighlightChange, focusManagement]);\n  const stateComparers = React.useMemo(() => ({\n    highlightedValue: itemComparer,\n    selectedValues: (valuesArray1, valuesArray2) => areArraysEqual(valuesArray1, valuesArray2, itemComparer)\n  }), [itemComparer]);\n\n  // This gets called whenever a reducer changes the state.\n  const handleStateChange = React.useCallback((event, field, value, reason, state) => {\n    onStateChange == null ? void 0 : onStateChange(event, field, value, reason, state);\n    switch (field) {\n      case 'highlightedValue':\n        handleHighlightChange(event, value, reason);\n        break;\n      case 'selectedValues':\n        onChange == null ? void 0 : onChange(event, value, reason);\n        break;\n      default:\n        break;\n    }\n  }, [handleHighlightChange, onChange, onStateChange]);\n\n  // The following object is added to each action when it's dispatched.\n  // It's accessible in the reducer via the `action.context` field.\n  const listActionContext = React.useMemo(() => {\n    return {\n      disabledItemsFocusable,\n      disableListWrap,\n      focusManagement,\n      isItemDisabled,\n      itemComparer,\n      items,\n      getItemAsString,\n      onHighlightChange: handleHighlightChange,\n      orientation,\n      pageSize,\n      selectionMode,\n      stateComparers\n    };\n  }, [disabledItemsFocusable, disableListWrap, focusManagement, isItemDisabled, itemComparer, items, getItemAsString, handleHighlightChange, orientation, pageSize, selectionMode, stateComparers]);\n  const initialState = getInitialState();\n  const reducer = externalReducer != null ? externalReducer : defaultReducer;\n  const actionContext = React.useMemo(() => _extends({}, reducerActionContext, listActionContext), [reducerActionContext, listActionContext]);\n  const [state, dispatch] = useControllableReducer({\n    reducer,\n    actionContext,\n    initialState: initialState,\n    controlledProps,\n    stateComparers,\n    onStateChange: handleStateChange\n  });\n  const {\n    highlightedValue,\n    selectedValues\n  } = state;\n  const handleTextNavigation = useTextNavigation((searchString, event) => dispatch({\n    type: ListActionTypes.textNavigation,\n    event,\n    searchString\n  }));\n\n  // introducing refs to avoid recreating the getItemState function on each change.\n  const latestSelectedValues = useLatest(selectedValues);\n  const latestHighlightedValue = useLatest(highlightedValue);\n  const previousItems = React.useRef([]);\n  React.useEffect(() => {\n    // Whenever the `items` object changes, we need to determine if the actual items changed.\n    // If they did, we need to dispatch an `itemsChange` action, so the selected/highlighted state is updated.\n    if (areArraysEqual(previousItems.current, items, itemComparer)) {\n      return;\n    }\n    dispatch({\n      type: ListActionTypes.itemsChange,\n      event: null,\n      items,\n      previousItems: previousItems.current\n    });\n    previousItems.current = items;\n    onItemsChange == null ? void 0 : onItemsChange(items);\n  }, [items, itemComparer, dispatch, onItemsChange]);\n\n  // Subitems are notified of changes to the highlighted and selected values.\n  // This is not done via context because we don't want to trigger a re-render of all the subitems each time any of them changes state.\n  // Instead, we use a custom message bus to publish messages about changes.\n  // On the child component, we use a custom hook to subscribe to these messages and re-render only when the value they care about changes.\n  const {\n    notifySelectionChanged,\n    notifyHighlightChanged,\n    registerHighlightChangeHandler,\n    registerSelectionChangeHandler\n  } = useListChangeNotifiers();\n  React.useEffect(() => {\n    notifySelectionChanged(selectedValues);\n  }, [selectedValues, notifySelectionChanged]);\n  React.useEffect(() => {\n    notifyHighlightChanged(highlightedValue);\n  }, [highlightedValue, notifyHighlightChanged]);\n  const createHandleKeyDown = other => event => {\n    var _other$onKeyDown;\n    (_other$onKeyDown = other.onKeyDown) == null ? void 0 : _other$onKeyDown.call(other, event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    const keysToPreventDefault = ['Home', 'End', 'PageUp', 'PageDown'];\n    if (orientation === 'vertical') {\n      keysToPreventDefault.push('ArrowUp', 'ArrowDown');\n    } else {\n      keysToPreventDefault.push('ArrowLeft', 'ArrowRight');\n    }\n    if (focusManagement === 'activeDescendant') {\n      // When the child element is focused using the activeDescendant attribute,\n      // the list handles keyboard events on its behalf.\n      // We have to `preventDefault()` is this case to prevent the browser from\n      // scrolling the view when space is pressed or submitting forms when enter is pressed.\n      keysToPreventDefault.push(' ', 'Enter');\n    }\n    if (keysToPreventDefault.includes(event.key)) {\n      event.preventDefault();\n    }\n    dispatch({\n      type: ListActionTypes.keyDown,\n      key: event.key,\n      event\n    });\n    handleTextNavigation(event);\n  };\n  const createHandleBlur = other => event => {\n    var _other$onBlur, _listRef$current;\n    (_other$onBlur = other.onBlur) == null ? void 0 : _other$onBlur.call(other, event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if ((_listRef$current = listRef.current) != null && _listRef$current.contains(event.relatedTarget)) {\n      // focus remains within the list\n      return;\n    }\n    dispatch({\n      type: ListActionTypes.blur,\n      event\n    });\n  };\n  const getRootProps = (otherHandlers = {}) => {\n    return _extends({}, otherHandlers, {\n      'aria-activedescendant': focusManagement === 'activeDescendant' && highlightedValue != null ? getItemId(highlightedValue) : undefined,\n      onBlur: createHandleBlur(otherHandlers),\n      onKeyDown: createHandleKeyDown(otherHandlers),\n      tabIndex: focusManagement === 'DOM' ? -1 : 0,\n      ref: handleRef\n    });\n  };\n  const getItemState = React.useCallback(item => {\n    var _latestSelectedValues;\n    const index = items.findIndex(i => itemComparer(i, item));\n    const selected = ((_latestSelectedValues = latestSelectedValues.current) != null ? _latestSelectedValues : []).some(value => value != null && itemComparer(item, value));\n    const disabled = isItemDisabled(item, index);\n    const highlighted = latestHighlightedValue.current != null && itemComparer(item, latestHighlightedValue.current);\n    const focusable = focusManagement === 'DOM';\n    return {\n      disabled,\n      focusable,\n      highlighted,\n      index,\n      selected\n    };\n  }, [items, isItemDisabled, itemComparer, latestSelectedValues, latestHighlightedValue, focusManagement]);\n  const contextValue = React.useMemo(() => ({\n    dispatch,\n    getItemState,\n    registerHighlightChangeHandler,\n    registerSelectionChangeHandler\n  }), [dispatch, getItemState, registerHighlightChangeHandler, registerSelectionChangeHandler]);\n  React.useDebugValue({\n    state\n  });\n  return {\n    contextValue,\n    dispatch,\n    getRootProps,\n    rootRef: handleRef,\n    state\n  };\n}\nexport default useList;"],"mappings":"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"},"metadata":{},"sourceType":"module"}