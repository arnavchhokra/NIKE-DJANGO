{"ast":null,"code":"import _classCallCheck from \"D:/Github/NIKE-DJANGO/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Github/NIKE-DJANGO/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"D:/Github/NIKE-DJANGO/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"D:/Github/NIKE-DJANGO/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Loader, FileLoader, BufferGeometry, BufferAttribute, Vector3, Float32BufferAttribute, LoaderUtils } from 'three';\n/**\r\n * Description: A THREE loader for STL ASCII files, as created by Solidworks and other CAD programs.\r\n *\r\n * Supports both binary and ASCII encoded files, with automatic detection of type.\r\n *\r\n * The loader returns a non-indexed buffer geometry.\r\n *\r\n * Limitations:\r\n *  Binary decoding supports \"Magics\" color format (http://en.wikipedia.org/wiki/STL_(file_format)#Color_in_binary_STL).\r\n *  There is perhaps some question as to how valid it is to always assume little-endian-ness.\r\n *  ASCII decoding assumes file is UTF-8.\r\n *\r\n * Usage:\r\n *  const loader = new STLLoader();\r\n *  loader.load( './models/stl/slotted_disk.stl', function ( geometry ) {\r\n *    scene.add( new THREE.Mesh( geometry ) );\r\n *  });\r\n *\r\n * For binary STLs geometry might contain colors for vertices. To use it:\r\n *  // use the same code to load STL as above\r\n *  if (geometry.hasColors) {\r\n *    material = new THREE.MeshPhongMaterial({ opacity: geometry.alpha, vertexColors: true });\r\n *  } else { .... }\r\n *  const mesh = new THREE.Mesh( geometry, material );\r\n *\r\n * For ASCII STLs containing multiple solids, each solid is assigned to a different group.\r\n * Groups can be used to assign a different color by defining an array of materials with the same length of\r\n * geometry.groups and passing it to the Mesh constructor:\r\n *\r\n * const mesh = new THREE.Mesh( geometry, material );\r\n *\r\n * For example:\r\n *\r\n *  const materials = [];\r\n *  const nGeometryGroups = geometry.groups.length;\r\n *\r\n *  const colorMap = ...; // Some logic to index colors.\r\n *\r\n *  for (let i = 0; i < nGeometryGroups; i++) {\r\n *\r\n *\t\tconst material = new THREE.MeshPhongMaterial({\r\n *\t\t\tcolor: colorMap[i],\r\n *\t\t\twireframe: false\r\n *\t\t});\r\n *\r\n *  }\r\n *\r\n *  materials.push(material);\r\n *  const mesh = new THREE.Mesh(geometry, materials);\r\n */\n\nvar STLLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(STLLoader, _Loader);\n\n  var _super = _createSuper(STLLoader);\n\n  function STLLoader(manager) {\n    _classCallCheck(this, STLLoader);\n\n    return _super.call(this, manager);\n  }\n\n  _createClass(STLLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var loader = new FileLoader(this.manager);\n      loader.setPath(this.path);\n      loader.setResponseType('arraybuffer');\n      loader.setRequestHeader(this.requestHeader);\n      loader.setWithCredentials(this.withCredentials);\n      loader.load(url, function (text) {\n        try {\n          onLoad(scope.parse(text));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(data) {\n      function isBinary(data) {\n        var reader = new DataView(data);\n        var face_size = 32 / 8 * 3 + 32 / 8 * 3 * 3 + 16 / 8;\n        var n_faces = reader.getUint32(80, true);\n        var expect = 80 + 32 / 8 + n_faces * face_size;\n\n        if (expect === reader.byteLength) {\n          return true;\n        } // An ASCII STL data must begin with 'solid ' as the first six bytes.\n        // However, ASCII STLs lacking the SPACE after the 'd' are known to be\n        // plentiful.  So, check the first 5 bytes for 'solid'.\n        // Several encodings, such as UTF-8, precede the text with up to 5 bytes:\n        // https://en.wikipedia.org/wiki/Byte_order_mark#Byte_order_marks_by_encoding\n        // Search for \"solid\" to start anywhere after those prefixes.\n        // US-ASCII ordinal values for 's', 'o', 'l', 'i', 'd'\n\n\n        var solid = [115, 111, 108, 105, 100];\n\n        for (var off = 0; off < 5; off++) {\n          // If \"solid\" text is matched to the current offset, declare it to be an ASCII STL.\n          if (matchDataViewAt(solid, reader, off)) return false;\n        } // Couldn't find \"solid\" text at the beginning; it is binary STL.\n\n\n        return true;\n      }\n\n      function matchDataViewAt(query, reader, offset) {\n        // Check if each byte in query matches the corresponding byte from the current offset\n        for (var i = 0, il = query.length; i < il; i++) {\n          if (query[i] !== reader.getUint8(offset + i, false)) return false;\n        }\n\n        return true;\n      }\n\n      function parseBinary(data) {\n        var reader = new DataView(data);\n        var faces = reader.getUint32(80, true);\n        var r,\n            g,\n            b,\n            hasColors = false,\n            colors;\n        var defaultR, defaultG, defaultB, alpha; // process STL header\n        // check for default color in header (\"COLOR=rgba\" sequence).\n\n        for (var index = 0; index < 80 - 10; index++) {\n          if (reader.getUint32(index, false) == 0x434f4c4f\n          /*COLO*/\n          && reader.getUint8(index + 4) == 0x52\n          /*'R'*/\n          && reader.getUint8(index + 5) == 0x3d\n          /*'='*/\n          ) {\n            hasColors = true;\n            colors = new Float32Array(faces * 3 * 3);\n            defaultR = reader.getUint8(index + 6) / 255;\n            defaultG = reader.getUint8(index + 7) / 255;\n            defaultB = reader.getUint8(index + 8) / 255;\n            alpha = reader.getUint8(index + 9) / 255;\n          }\n        }\n\n        var dataOffset = 84;\n        var faceLength = 12 * 4 + 2;\n        var geometry = new BufferGeometry();\n        var vertices = new Float32Array(faces * 3 * 3);\n        var normals = new Float32Array(faces * 3 * 3);\n\n        for (var face = 0; face < faces; face++) {\n          var start = dataOffset + face * faceLength;\n          var normalX = reader.getFloat32(start, true);\n          var normalY = reader.getFloat32(start + 4, true);\n          var normalZ = reader.getFloat32(start + 8, true);\n\n          if (hasColors) {\n            var packedColor = reader.getUint16(start + 48, true);\n\n            if ((packedColor & 0x8000) === 0) {\n              // facet has its own unique color\n              r = (packedColor & 0x1f) / 31;\n              g = (packedColor >> 5 & 0x1f) / 31;\n              b = (packedColor >> 10 & 0x1f) / 31;\n            } else {\n              r = defaultR;\n              g = defaultG;\n              b = defaultB;\n            }\n          }\n\n          for (var i = 1; i <= 3; i++) {\n            var vertexstart = start + i * 12;\n            var componentIdx = face * 3 * 3 + (i - 1) * 3;\n            vertices[componentIdx] = reader.getFloat32(vertexstart, true);\n            vertices[componentIdx + 1] = reader.getFloat32(vertexstart + 4, true);\n            vertices[componentIdx + 2] = reader.getFloat32(vertexstart + 8, true);\n            normals[componentIdx] = normalX;\n            normals[componentIdx + 1] = normalY;\n            normals[componentIdx + 2] = normalZ;\n\n            if (hasColors) {\n              colors[componentIdx] = r;\n              colors[componentIdx + 1] = g;\n              colors[componentIdx + 2] = b;\n            }\n          }\n        }\n\n        geometry.setAttribute('position', new BufferAttribute(vertices, 3));\n        geometry.setAttribute('normal', new BufferAttribute(normals, 3));\n\n        if (hasColors) {\n          geometry.setAttribute('color', new BufferAttribute(colors, 3));\n          geometry.hasColors = true;\n          geometry.alpha = alpha;\n        }\n\n        return geometry;\n      }\n\n      function parseASCII(data) {\n        var geometry = new BufferGeometry();\n        var patternSolid = /solid([\\s\\S]*?)endsolid/g;\n        var patternFace = /facet([\\s\\S]*?)endfacet/g;\n        var faceCounter = 0;\n        var patternFloat = /[\\s]+([+-]?(?:\\d*)(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)/.source;\n        var patternVertex = new RegExp('vertex' + patternFloat + patternFloat + patternFloat, 'g');\n        var patternNormal = new RegExp('normal' + patternFloat + patternFloat + patternFloat, 'g');\n        var vertices = [];\n        var normals = [];\n        var normal = new Vector3();\n        var result;\n        var groupCount = 0;\n        var startVertex = 0;\n        var endVertex = 0;\n\n        while ((result = patternSolid.exec(data)) !== null) {\n          startVertex = endVertex;\n          var solid = result[0];\n\n          while ((result = patternFace.exec(solid)) !== null) {\n            var vertexCountPerFace = 0;\n            var normalCountPerFace = 0;\n            var text = result[0];\n\n            while ((result = patternNormal.exec(text)) !== null) {\n              normal.x = parseFloat(result[1]);\n              normal.y = parseFloat(result[2]);\n              normal.z = parseFloat(result[3]);\n              normalCountPerFace++;\n            }\n\n            while ((result = patternVertex.exec(text)) !== null) {\n              vertices.push(parseFloat(result[1]), parseFloat(result[2]), parseFloat(result[3]));\n              normals.push(normal.x, normal.y, normal.z);\n              vertexCountPerFace++;\n              endVertex++;\n            } // every face have to own ONE valid normal\n\n\n            if (normalCountPerFace !== 1) {\n              console.error(\"THREE.STLLoader: Something isn't right with the normal of face number \" + faceCounter);\n            } // each face have to own THREE valid vertices\n\n\n            if (vertexCountPerFace !== 3) {\n              console.error(\"THREE.STLLoader: Something isn't right with the vertices of face number \" + faceCounter);\n            }\n\n            faceCounter++;\n          }\n\n          var start = startVertex;\n          var count = endVertex - startVertex;\n          geometry.addGroup(start, count, groupCount);\n          groupCount++;\n        }\n\n        geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n        geometry.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n        return geometry;\n      }\n\n      function ensureString(buffer) {\n        if (typeof buffer !== 'string') {\n          return LoaderUtils.decodeText(new Uint8Array(buffer));\n        }\n\n        return buffer;\n      }\n\n      function ensureBinary(buffer) {\n        if (typeof buffer === 'string') {\n          var array_buffer = new Uint8Array(buffer.length);\n\n          for (var i = 0; i < buffer.length; i++) {\n            array_buffer[i] = buffer.charCodeAt(i) & 0xff; // implicitly assumes little-endian\n          }\n\n          return array_buffer.buffer || array_buffer;\n        } else {\n          return buffer;\n        }\n      } // start\n\n\n      var binData = ensureBinary(data);\n      return isBinary(binData) ? parseBinary(binData) : parseASCII(ensureString(data));\n    }\n  }]);\n\n  return STLLoader;\n}(Loader);\n\nexport { STLLoader };","map":{"version":3,"names":["Loader","FileLoader","BufferGeometry","BufferAttribute","Vector3","Float32BufferAttribute","LoaderUtils","STLLoader","manager","url","onLoad","onProgress","onError","scope","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","load","text","parse","e","console","error","itemError","data","isBinary","reader","DataView","face_size","n_faces","getUint32","expect","byteLength","solid","off","matchDataViewAt","query","offset","i","il","length","getUint8","parseBinary","faces","r","g","b","hasColors","colors","defaultR","defaultG","defaultB","alpha","index","Float32Array","dataOffset","faceLength","geometry","vertices","normals","face","start","normalX","getFloat32","normalY","normalZ","packedColor","getUint16","vertexstart","componentIdx","setAttribute","parseASCII","patternSolid","patternFace","faceCounter","patternFloat","source","patternVertex","RegExp","patternNormal","normal","result","groupCount","startVertex","endVertex","exec","vertexCountPerFace","normalCountPerFace","x","parseFloat","y","z","push","count","addGroup","ensureString","buffer","decodeText","Uint8Array","ensureBinary","array_buffer","charCodeAt","binData"],"sources":["D:/Github/NIKE-DJANGO/Jord/l4fycy/node_modules/three-stdlib/loaders/STLLoader.js"],"sourcesContent":["import { Loader, FileLoader, BufferGeometry, BufferAttribute, Vector3, Float32BufferAttribute, LoaderUtils } from 'three';\r\n\r\n/**\r\n * Description: A THREE loader for STL ASCII files, as created by Solidworks and other CAD programs.\r\n *\r\n * Supports both binary and ASCII encoded files, with automatic detection of type.\r\n *\r\n * The loader returns a non-indexed buffer geometry.\r\n *\r\n * Limitations:\r\n *  Binary decoding supports \"Magics\" color format (http://en.wikipedia.org/wiki/STL_(file_format)#Color_in_binary_STL).\r\n *  There is perhaps some question as to how valid it is to always assume little-endian-ness.\r\n *  ASCII decoding assumes file is UTF-8.\r\n *\r\n * Usage:\r\n *  const loader = new STLLoader();\r\n *  loader.load( './models/stl/slotted_disk.stl', function ( geometry ) {\r\n *    scene.add( new THREE.Mesh( geometry ) );\r\n *  });\r\n *\r\n * For binary STLs geometry might contain colors for vertices. To use it:\r\n *  // use the same code to load STL as above\r\n *  if (geometry.hasColors) {\r\n *    material = new THREE.MeshPhongMaterial({ opacity: geometry.alpha, vertexColors: true });\r\n *  } else { .... }\r\n *  const mesh = new THREE.Mesh( geometry, material );\r\n *\r\n * For ASCII STLs containing multiple solids, each solid is assigned to a different group.\r\n * Groups can be used to assign a different color by defining an array of materials with the same length of\r\n * geometry.groups and passing it to the Mesh constructor:\r\n *\r\n * const mesh = new THREE.Mesh( geometry, material );\r\n *\r\n * For example:\r\n *\r\n *  const materials = [];\r\n *  const nGeometryGroups = geometry.groups.length;\r\n *\r\n *  const colorMap = ...; // Some logic to index colors.\r\n *\r\n *  for (let i = 0; i < nGeometryGroups; i++) {\r\n *\r\n *\t\tconst material = new THREE.MeshPhongMaterial({\r\n *\t\t\tcolor: colorMap[i],\r\n *\t\t\twireframe: false\r\n *\t\t});\r\n *\r\n *  }\r\n *\r\n *  materials.push(material);\r\n *  const mesh = new THREE.Mesh(geometry, materials);\r\n */\r\n\r\nclass STLLoader extends Loader {\r\n  constructor(manager) {\r\n    super(manager);\r\n  }\r\n\r\n  load(url, onLoad, onProgress, onError) {\r\n    const scope = this;\r\n    const loader = new FileLoader(this.manager);\r\n    loader.setPath(this.path);\r\n    loader.setResponseType('arraybuffer');\r\n    loader.setRequestHeader(this.requestHeader);\r\n    loader.setWithCredentials(this.withCredentials);\r\n    loader.load(url, function (text) {\r\n      try {\r\n        onLoad(scope.parse(text));\r\n      } catch (e) {\r\n        if (onError) {\r\n          onError(e);\r\n        } else {\r\n          console.error(e);\r\n        }\r\n\r\n        scope.manager.itemError(url);\r\n      }\r\n    }, onProgress, onError);\r\n  }\r\n\r\n  parse(data) {\r\n    function isBinary(data) {\r\n      const reader = new DataView(data);\r\n      const face_size = 32 / 8 * 3 + 32 / 8 * 3 * 3 + 16 / 8;\r\n      const n_faces = reader.getUint32(80, true);\r\n      const expect = 80 + 32 / 8 + n_faces * face_size;\r\n\r\n      if (expect === reader.byteLength) {\r\n        return true;\r\n      } // An ASCII STL data must begin with 'solid ' as the first six bytes.\r\n      // However, ASCII STLs lacking the SPACE after the 'd' are known to be\r\n      // plentiful.  So, check the first 5 bytes for 'solid'.\r\n      // Several encodings, such as UTF-8, precede the text with up to 5 bytes:\r\n      // https://en.wikipedia.org/wiki/Byte_order_mark#Byte_order_marks_by_encoding\r\n      // Search for \"solid\" to start anywhere after those prefixes.\r\n      // US-ASCII ordinal values for 's', 'o', 'l', 'i', 'd'\r\n\r\n\r\n      const solid = [115, 111, 108, 105, 100];\r\n\r\n      for (let off = 0; off < 5; off++) {\r\n        // If \"solid\" text is matched to the current offset, declare it to be an ASCII STL.\r\n        if (matchDataViewAt(solid, reader, off)) return false;\r\n      } // Couldn't find \"solid\" text at the beginning; it is binary STL.\r\n\r\n\r\n      return true;\r\n    }\r\n\r\n    function matchDataViewAt(query, reader, offset) {\r\n      // Check if each byte in query matches the corresponding byte from the current offset\r\n      for (let i = 0, il = query.length; i < il; i++) {\r\n        if (query[i] !== reader.getUint8(offset + i, false)) return false;\r\n      }\r\n\r\n      return true;\r\n    }\r\n\r\n    function parseBinary(data) {\r\n      const reader = new DataView(data);\r\n      const faces = reader.getUint32(80, true);\r\n      let r,\r\n          g,\r\n          b,\r\n          hasColors = false,\r\n          colors;\r\n      let defaultR, defaultG, defaultB, alpha; // process STL header\r\n      // check for default color in header (\"COLOR=rgba\" sequence).\r\n\r\n      for (let index = 0; index < 80 - 10; index++) {\r\n        if (reader.getUint32(index, false) == 0x434f4c4f\r\n        /*COLO*/\r\n        && reader.getUint8(index + 4) == 0x52\r\n        /*'R'*/\r\n        && reader.getUint8(index + 5) == 0x3d\r\n        /*'='*/\r\n        ) {\r\n          hasColors = true;\r\n          colors = new Float32Array(faces * 3 * 3);\r\n          defaultR = reader.getUint8(index + 6) / 255;\r\n          defaultG = reader.getUint8(index + 7) / 255;\r\n          defaultB = reader.getUint8(index + 8) / 255;\r\n          alpha = reader.getUint8(index + 9) / 255;\r\n        }\r\n      }\r\n\r\n      const dataOffset = 84;\r\n      const faceLength = 12 * 4 + 2;\r\n      const geometry = new BufferGeometry();\r\n      const vertices = new Float32Array(faces * 3 * 3);\r\n      const normals = new Float32Array(faces * 3 * 3);\r\n\r\n      for (let face = 0; face < faces; face++) {\r\n        const start = dataOffset + face * faceLength;\r\n        const normalX = reader.getFloat32(start, true);\r\n        const normalY = reader.getFloat32(start + 4, true);\r\n        const normalZ = reader.getFloat32(start + 8, true);\r\n\r\n        if (hasColors) {\r\n          const packedColor = reader.getUint16(start + 48, true);\r\n\r\n          if ((packedColor & 0x8000) === 0) {\r\n            // facet has its own unique color\r\n            r = (packedColor & 0x1f) / 31;\r\n            g = (packedColor >> 5 & 0x1f) / 31;\r\n            b = (packedColor >> 10 & 0x1f) / 31;\r\n          } else {\r\n            r = defaultR;\r\n            g = defaultG;\r\n            b = defaultB;\r\n          }\r\n        }\r\n\r\n        for (let i = 1; i <= 3; i++) {\r\n          const vertexstart = start + i * 12;\r\n          const componentIdx = face * 3 * 3 + (i - 1) * 3;\r\n          vertices[componentIdx] = reader.getFloat32(vertexstart, true);\r\n          vertices[componentIdx + 1] = reader.getFloat32(vertexstart + 4, true);\r\n          vertices[componentIdx + 2] = reader.getFloat32(vertexstart + 8, true);\r\n          normals[componentIdx] = normalX;\r\n          normals[componentIdx + 1] = normalY;\r\n          normals[componentIdx + 2] = normalZ;\r\n\r\n          if (hasColors) {\r\n            colors[componentIdx] = r;\r\n            colors[componentIdx + 1] = g;\r\n            colors[componentIdx + 2] = b;\r\n          }\r\n        }\r\n      }\r\n\r\n      geometry.setAttribute('position', new BufferAttribute(vertices, 3));\r\n      geometry.setAttribute('normal', new BufferAttribute(normals, 3));\r\n\r\n      if (hasColors) {\r\n        geometry.setAttribute('color', new BufferAttribute(colors, 3));\r\n        geometry.hasColors = true;\r\n        geometry.alpha = alpha;\r\n      }\r\n\r\n      return geometry;\r\n    }\r\n\r\n    function parseASCII(data) {\r\n      const geometry = new BufferGeometry();\r\n      const patternSolid = /solid([\\s\\S]*?)endsolid/g;\r\n      const patternFace = /facet([\\s\\S]*?)endfacet/g;\r\n      let faceCounter = 0;\r\n      const patternFloat = /[\\s]+([+-]?(?:\\d*)(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)/.source;\r\n      const patternVertex = new RegExp('vertex' + patternFloat + patternFloat + patternFloat, 'g');\r\n      const patternNormal = new RegExp('normal' + patternFloat + patternFloat + patternFloat, 'g');\r\n      const vertices = [];\r\n      const normals = [];\r\n      const normal = new Vector3();\r\n      let result;\r\n      let groupCount = 0;\r\n      let startVertex = 0;\r\n      let endVertex = 0;\r\n\r\n      while ((result = patternSolid.exec(data)) !== null) {\r\n        startVertex = endVertex;\r\n        const solid = result[0];\r\n\r\n        while ((result = patternFace.exec(solid)) !== null) {\r\n          let vertexCountPerFace = 0;\r\n          let normalCountPerFace = 0;\r\n          const text = result[0];\r\n\r\n          while ((result = patternNormal.exec(text)) !== null) {\r\n            normal.x = parseFloat(result[1]);\r\n            normal.y = parseFloat(result[2]);\r\n            normal.z = parseFloat(result[3]);\r\n            normalCountPerFace++;\r\n          }\r\n\r\n          while ((result = patternVertex.exec(text)) !== null) {\r\n            vertices.push(parseFloat(result[1]), parseFloat(result[2]), parseFloat(result[3]));\r\n            normals.push(normal.x, normal.y, normal.z);\r\n            vertexCountPerFace++;\r\n            endVertex++;\r\n          } // every face have to own ONE valid normal\r\n\r\n\r\n          if (normalCountPerFace !== 1) {\r\n            console.error(\"THREE.STLLoader: Something isn't right with the normal of face number \" + faceCounter);\r\n          } // each face have to own THREE valid vertices\r\n\r\n\r\n          if (vertexCountPerFace !== 3) {\r\n            console.error(\"THREE.STLLoader: Something isn't right with the vertices of face number \" + faceCounter);\r\n          }\r\n\r\n          faceCounter++;\r\n        }\r\n\r\n        const start = startVertex;\r\n        const count = endVertex - startVertex;\r\n        geometry.addGroup(start, count, groupCount);\r\n        groupCount++;\r\n      }\r\n\r\n      geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\r\n      geometry.setAttribute('normal', new Float32BufferAttribute(normals, 3));\r\n      return geometry;\r\n    }\r\n\r\n    function ensureString(buffer) {\r\n      if (typeof buffer !== 'string') {\r\n        return LoaderUtils.decodeText(new Uint8Array(buffer));\r\n      }\r\n\r\n      return buffer;\r\n    }\r\n\r\n    function ensureBinary(buffer) {\r\n      if (typeof buffer === 'string') {\r\n        const array_buffer = new Uint8Array(buffer.length);\r\n\r\n        for (let i = 0; i < buffer.length; i++) {\r\n          array_buffer[i] = buffer.charCodeAt(i) & 0xff; // implicitly assumes little-endian\r\n        }\r\n\r\n        return array_buffer.buffer || array_buffer;\r\n      } else {\r\n        return buffer;\r\n      }\r\n    } // start\r\n\r\n\r\n    const binData = ensureBinary(data);\r\n    return isBinary(binData) ? parseBinary(binData) : parseASCII(ensureString(data));\r\n  }\r\n\r\n}\r\n\r\nexport { STLLoader };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}