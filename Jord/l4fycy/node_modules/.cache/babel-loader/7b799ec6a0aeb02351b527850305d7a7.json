{"ast":null,"code":"import _classCallCheck from \"D:/Github/NIKE-DJANGO/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Github/NIKE-DJANGO/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"D:/Github/NIKE-DJANGO/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"D:/Github/NIKE-DJANGO/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { DepthTexture, DepthStencilFormat, UnsignedInt248Type, WebGLRenderTarget, NearestFilter, ShaderMaterial, UniformsUtils, NoBlending, MeshNormalMaterial, DstColorFactor, ZeroFactor, AddEquation, DstAlphaFactor, Color, LuminanceFormat, CustomBlending, Vector3, MathUtils, DataTexture, RedFormat, FloatType, RepeatWrapping } from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { SimplexNoise } from '../math/SimplexNoise.js';\nimport { SSAOShader, SSAOBlurShader, SSAODepthShader } from '../shaders/SSAOShader.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\n\nvar SSAOPass = /*#__PURE__*/function (_Pass) {\n  _inherits(SSAOPass, _Pass);\n\n  var _super = _createSuper(SSAOPass);\n\n  function SSAOPass(scene, camera, width, height) {\n    var _this;\n\n    _classCallCheck(this, SSAOPass);\n\n    _this = _super.call(this);\n    _this.width = width !== undefined ? width : 512;\n    _this.height = height !== undefined ? height : 512;\n    _this.clear = true;\n    _this.camera = camera;\n    _this.scene = scene;\n    _this.kernelRadius = 8;\n    _this.kernelSize = 32;\n    _this.kernel = [];\n    _this.noiseTexture = null;\n    _this.output = 0;\n    _this.minDistance = 0.005;\n    _this.maxDistance = 0.1;\n    _this._visibilityCache = new Map(); //\n\n    _this.generateSampleKernel();\n\n    _this.generateRandomKernelRotations(); // beauty render target\n\n\n    var depthTexture = new DepthTexture();\n    depthTexture.format = DepthStencilFormat;\n    depthTexture.type = UnsignedInt248Type;\n    _this.beautyRenderTarget = new WebGLRenderTarget(_this.width, _this.height); // normal render target with depth buffer\n\n    _this.normalRenderTarget = new WebGLRenderTarget(_this.width, _this.height, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      depthTexture: depthTexture\n    }); // ssao render target\n\n    _this.ssaoRenderTarget = new WebGLRenderTarget(_this.width, _this.height);\n    _this.blurRenderTarget = _this.ssaoRenderTarget.clone(); // ssao material\n\n    if (SSAOShader === undefined) {\n      console.error('THREE.SSAOPass: The pass relies on SSAOShader.');\n    }\n\n    _this.ssaoMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAOShader.defines),\n      uniforms: UniformsUtils.clone(SSAOShader.uniforms),\n      vertexShader: SSAOShader.vertexShader,\n      fragmentShader: SSAOShader.fragmentShader,\n      blending: NoBlending\n    });\n    _this.ssaoMaterial.uniforms['tDiffuse'].value = _this.beautyRenderTarget.texture;\n    _this.ssaoMaterial.uniforms['tNormal'].value = _this.normalRenderTarget.texture;\n    _this.ssaoMaterial.uniforms['tDepth'].value = _this.normalRenderTarget.depthTexture;\n    _this.ssaoMaterial.uniforms['tNoise'].value = _this.noiseTexture;\n    _this.ssaoMaterial.uniforms['kernel'].value = _this.kernel;\n    _this.ssaoMaterial.uniforms['cameraNear'].value = _this.camera.near;\n    _this.ssaoMaterial.uniforms['cameraFar'].value = _this.camera.far;\n\n    _this.ssaoMaterial.uniforms['resolution'].value.set(_this.width, _this.height);\n\n    _this.ssaoMaterial.uniforms['cameraProjectionMatrix'].value.copy(_this.camera.projectionMatrix);\n\n    _this.ssaoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(_this.camera.projectionMatrixInverse); // normal material\n\n\n    _this.normalMaterial = new MeshNormalMaterial();\n    _this.normalMaterial.blending = NoBlending; // blur material\n\n    _this.blurMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAOBlurShader.defines),\n      uniforms: UniformsUtils.clone(SSAOBlurShader.uniforms),\n      vertexShader: SSAOBlurShader.vertexShader,\n      fragmentShader: SSAOBlurShader.fragmentShader\n    });\n    _this.blurMaterial.uniforms['tDiffuse'].value = _this.ssaoRenderTarget.texture;\n\n    _this.blurMaterial.uniforms['resolution'].value.set(_this.width, _this.height); // material for rendering the depth\n\n\n    _this.depthRenderMaterial = new ShaderMaterial({\n      defines: Object.assign({}, SSAODepthShader.defines),\n      uniforms: UniformsUtils.clone(SSAODepthShader.uniforms),\n      vertexShader: SSAODepthShader.vertexShader,\n      fragmentShader: SSAODepthShader.fragmentShader,\n      blending: NoBlending\n    });\n    _this.depthRenderMaterial.uniforms['tDepth'].value = _this.normalRenderTarget.depthTexture;\n    _this.depthRenderMaterial.uniforms['cameraNear'].value = _this.camera.near;\n    _this.depthRenderMaterial.uniforms['cameraFar'].value = _this.camera.far; // material for rendering the content of a render target\n\n    _this.copyMaterial = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\n      vertexShader: CopyShader.vertexShader,\n      fragmentShader: CopyShader.fragmentShader,\n      transparent: true,\n      depthTest: false,\n      depthWrite: false,\n      blendSrc: DstColorFactor,\n      blendDst: ZeroFactor,\n      blendEquation: AddEquation,\n      blendSrcAlpha: DstAlphaFactor,\n      blendDstAlpha: ZeroFactor,\n      blendEquationAlpha: AddEquation\n    });\n    _this.fsQuad = new FullScreenQuad(null);\n    _this.originalClearColor = new Color();\n    return _this;\n  }\n\n  _createClass(SSAOPass, [{\n    key: \"dispose\",\n    value: function dispose() {\n      // dispose render targets\n      this.beautyRenderTarget.dispose();\n      this.normalRenderTarget.dispose();\n      this.ssaoRenderTarget.dispose();\n      this.blurRenderTarget.dispose(); // dispose materials\n\n      this.normalMaterial.dispose();\n      this.blurMaterial.dispose();\n      this.copyMaterial.dispose();\n      this.depthRenderMaterial.dispose(); // dipsose full screen quad\n\n      this.fsQuad.dispose();\n    }\n  }, {\n    key: \"render\",\n    value: function render(renderer, writeBuffer\n    /*, readBuffer, deltaTime, maskActive */\n    ) {\n      if (renderer.capabilities.isWebGL2 === false) this.noiseTexture.format = LuminanceFormat; // render beauty\n\n      renderer.setRenderTarget(this.beautyRenderTarget);\n      renderer.clear();\n      renderer.render(this.scene, this.camera); // render normals and depth (honor only meshes, points and lines do not contribute to SSAO)\n\n      this.overrideVisibility();\n      this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0);\n      this.restoreVisibility(); // render SSAO\n\n      this.ssaoMaterial.uniforms['kernelRadius'].value = this.kernelRadius;\n      this.ssaoMaterial.uniforms['minDistance'].value = this.minDistance;\n      this.ssaoMaterial.uniforms['maxDistance'].value = this.maxDistance;\n      this.renderPass(renderer, this.ssaoMaterial, this.ssaoRenderTarget); // render blur\n\n      this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget); // output result to screen\n\n      switch (this.output) {\n        case SSAOPass.OUTPUT.SSAO:\n          this.copyMaterial.uniforms['tDiffuse'].value = this.ssaoRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n\n        case SSAOPass.OUTPUT.Blur:\n          this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n\n        case SSAOPass.OUTPUT.Beauty:\n          this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n\n        case SSAOPass.OUTPUT.Depth:\n          this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n\n        case SSAOPass.OUTPUT.Normal:\n          this.copyMaterial.uniforms['tDiffuse'].value = this.normalRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n\n        case SSAOPass.OUTPUT.Default:\n          this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\n          this.copyMaterial.blending = NoBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget.texture;\n          this.copyMaterial.blending = CustomBlending;\n          this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\n          break;\n\n        default:\n          console.warn('THREE.SSAOPass: Unknown output type.');\n      }\n    }\n  }, {\n    key: \"renderPass\",\n    value: function renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n      // save original state\n      renderer.getClearColor(this.originalClearColor);\n      var originalClearAlpha = renderer.getClearAlpha();\n      var originalAutoClear = renderer.autoClear;\n      renderer.setRenderTarget(renderTarget); // setup pass state\n\n      renderer.autoClear = false;\n\n      if (clearColor !== undefined && clearColor !== null) {\n        renderer.setClearColor(clearColor);\n        renderer.setClearAlpha(clearAlpha || 0.0);\n        renderer.clear();\n      }\n\n      this.fsQuad.material = passMaterial;\n      this.fsQuad.render(renderer); // restore original state\n\n      renderer.autoClear = originalAutoClear;\n      renderer.setClearColor(this.originalClearColor);\n      renderer.setClearAlpha(originalClearAlpha);\n    }\n  }, {\n    key: \"renderOverride\",\n    value: function renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n      renderer.getClearColor(this.originalClearColor);\n      var originalClearAlpha = renderer.getClearAlpha();\n      var originalAutoClear = renderer.autoClear;\n      renderer.setRenderTarget(renderTarget);\n      renderer.autoClear = false;\n      clearColor = overrideMaterial.clearColor || clearColor;\n      clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n\n      if (clearColor !== undefined && clearColor !== null) {\n        renderer.setClearColor(clearColor);\n        renderer.setClearAlpha(clearAlpha || 0.0);\n        renderer.clear();\n      }\n\n      this.scene.overrideMaterial = overrideMaterial;\n      renderer.render(this.scene, this.camera);\n      this.scene.overrideMaterial = null; // restore original state\n\n      renderer.autoClear = originalAutoClear;\n      renderer.setClearColor(this.originalClearColor);\n      renderer.setClearAlpha(originalClearAlpha);\n    }\n  }, {\n    key: \"setSize\",\n    value: function setSize(width, height) {\n      this.width = width;\n      this.height = height;\n      this.beautyRenderTarget.setSize(width, height);\n      this.ssaoRenderTarget.setSize(width, height);\n      this.normalRenderTarget.setSize(width, height);\n      this.blurRenderTarget.setSize(width, height);\n      this.ssaoMaterial.uniforms['resolution'].value.set(width, height);\n      this.ssaoMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix);\n      this.ssaoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse);\n      this.blurMaterial.uniforms['resolution'].value.set(width, height);\n    }\n  }, {\n    key: \"generateSampleKernel\",\n    value: function generateSampleKernel() {\n      var kernelSize = this.kernelSize;\n      var kernel = this.kernel;\n\n      for (var i = 0; i < kernelSize; i++) {\n        var sample = new Vector3();\n        sample.x = Math.random() * 2 - 1;\n        sample.y = Math.random() * 2 - 1;\n        sample.z = Math.random();\n        sample.normalize();\n        var scale = i / kernelSize;\n        scale = MathUtils.lerp(0.1, 1, scale * scale);\n        sample.multiplyScalar(scale);\n        kernel.push(sample);\n      }\n    }\n  }, {\n    key: \"generateRandomKernelRotations\",\n    value: function generateRandomKernelRotations() {\n      var width = 4,\n          height = 4;\n\n      if (SimplexNoise === undefined) {\n        console.error('THREE.SSAOPass: The pass relies on SimplexNoise.');\n      }\n\n      var simplex = new SimplexNoise();\n      var size = width * height;\n      var data = new Float32Array(size);\n\n      for (var i = 0; i < size; i++) {\n        var x = Math.random() * 2 - 1;\n        var y = Math.random() * 2 - 1;\n        var z = 0;\n        data[i] = simplex.noise3d(x, y, z);\n      }\n\n      this.noiseTexture = new DataTexture(data, width, height, RedFormat, FloatType);\n      this.noiseTexture.wrapS = RepeatWrapping;\n      this.noiseTexture.wrapT = RepeatWrapping;\n      this.noiseTexture.needsUpdate = true;\n    }\n  }, {\n    key: \"overrideVisibility\",\n    value: function overrideVisibility() {\n      var scene = this.scene;\n      var cache = this._visibilityCache;\n      scene.traverse(function (object) {\n        cache.set(object, object.visible);\n        if (object.isPoints || object.isLine) object.visible = false;\n      });\n    }\n  }, {\n    key: \"restoreVisibility\",\n    value: function restoreVisibility() {\n      var scene = this.scene;\n      var cache = this._visibilityCache;\n      scene.traverse(function (object) {\n        var visible = cache.get(object);\n        object.visible = visible;\n      });\n      cache.clear();\n    }\n  }]);\n\n  return SSAOPass;\n}(Pass);\n\nSSAOPass.OUTPUT = {\n  Default: 0,\n  SSAO: 1,\n  Blur: 2,\n  Beauty: 3,\n  Depth: 4,\n  Normal: 5\n};\nexport { SSAOPass };","map":{"version":3,"names":["DepthTexture","DepthStencilFormat","UnsignedInt248Type","WebGLRenderTarget","NearestFilter","ShaderMaterial","UniformsUtils","NoBlending","MeshNormalMaterial","DstColorFactor","ZeroFactor","AddEquation","DstAlphaFactor","Color","LuminanceFormat","CustomBlending","Vector3","MathUtils","DataTexture","RedFormat","FloatType","RepeatWrapping","Pass","FullScreenQuad","SimplexNoise","SSAOShader","SSAOBlurShader","SSAODepthShader","CopyShader","SSAOPass","scene","camera","width","height","undefined","clear","kernelRadius","kernelSize","kernel","noiseTexture","output","minDistance","maxDistance","_visibilityCache","Map","generateSampleKernel","generateRandomKernelRotations","depthTexture","format","type","beautyRenderTarget","normalRenderTarget","minFilter","magFilter","ssaoRenderTarget","blurRenderTarget","clone","console","error","ssaoMaterial","defines","Object","assign","uniforms","vertexShader","fragmentShader","blending","value","texture","near","far","set","copy","projectionMatrix","projectionMatrixInverse","normalMaterial","blurMaterial","depthRenderMaterial","copyMaterial","transparent","depthTest","depthWrite","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","fsQuad","originalClearColor","dispose","renderer","writeBuffer","capabilities","isWebGL2","setRenderTarget","render","overrideVisibility","renderOverride","restoreVisibility","renderPass","OUTPUT","SSAO","renderToScreen","Blur","Beauty","Depth","Normal","Default","warn","passMaterial","renderTarget","clearColor","clearAlpha","getClearColor","originalClearAlpha","getClearAlpha","originalAutoClear","autoClear","setClearColor","setClearAlpha","material","overrideMaterial","setSize","i","sample","x","Math","random","y","z","normalize","scale","lerp","multiplyScalar","push","simplex","size","data","Float32Array","noise3d","wrapS","wrapT","needsUpdate","cache","traverse","object","visible","isPoints","isLine","get"],"sources":["D:/Github/NIKE-DJANGO/Jord/l4fycy/node_modules/three-stdlib/postprocessing/SSAOPass.js"],"sourcesContent":["import { DepthTexture, DepthStencilFormat, UnsignedInt248Type, WebGLRenderTarget, NearestFilter, ShaderMaterial, UniformsUtils, NoBlending, MeshNormalMaterial, DstColorFactor, ZeroFactor, AddEquation, DstAlphaFactor, Color, LuminanceFormat, CustomBlending, Vector3, MathUtils, DataTexture, RedFormat, FloatType, RepeatWrapping } from 'three';\r\nimport { Pass, FullScreenQuad } from './Pass.js';\r\nimport { SimplexNoise } from '../math/SimplexNoise.js';\r\nimport { SSAOShader, SSAOBlurShader, SSAODepthShader } from '../shaders/SSAOShader.js';\r\nimport { CopyShader } from '../shaders/CopyShader.js';\r\n\r\nclass SSAOPass extends Pass {\r\n  constructor(scene, camera, width, height) {\r\n    super();\r\n    this.width = width !== undefined ? width : 512;\r\n    this.height = height !== undefined ? height : 512;\r\n    this.clear = true;\r\n    this.camera = camera;\r\n    this.scene = scene;\r\n    this.kernelRadius = 8;\r\n    this.kernelSize = 32;\r\n    this.kernel = [];\r\n    this.noiseTexture = null;\r\n    this.output = 0;\r\n    this.minDistance = 0.005;\r\n    this.maxDistance = 0.1;\r\n    this._visibilityCache = new Map(); //\r\n\r\n    this.generateSampleKernel();\r\n    this.generateRandomKernelRotations(); // beauty render target\r\n\r\n    const depthTexture = new DepthTexture();\r\n    depthTexture.format = DepthStencilFormat;\r\n    depthTexture.type = UnsignedInt248Type;\r\n    this.beautyRenderTarget = new WebGLRenderTarget(this.width, this.height); // normal render target with depth buffer\r\n\r\n    this.normalRenderTarget = new WebGLRenderTarget(this.width, this.height, {\r\n      minFilter: NearestFilter,\r\n      magFilter: NearestFilter,\r\n      depthTexture: depthTexture\r\n    }); // ssao render target\r\n\r\n    this.ssaoRenderTarget = new WebGLRenderTarget(this.width, this.height);\r\n    this.blurRenderTarget = this.ssaoRenderTarget.clone(); // ssao material\r\n\r\n    if (SSAOShader === undefined) {\r\n      console.error('THREE.SSAOPass: The pass relies on SSAOShader.');\r\n    }\r\n\r\n    this.ssaoMaterial = new ShaderMaterial({\r\n      defines: Object.assign({}, SSAOShader.defines),\r\n      uniforms: UniformsUtils.clone(SSAOShader.uniforms),\r\n      vertexShader: SSAOShader.vertexShader,\r\n      fragmentShader: SSAOShader.fragmentShader,\r\n      blending: NoBlending\r\n    });\r\n    this.ssaoMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\r\n    this.ssaoMaterial.uniforms['tNormal'].value = this.normalRenderTarget.texture;\r\n    this.ssaoMaterial.uniforms['tDepth'].value = this.normalRenderTarget.depthTexture;\r\n    this.ssaoMaterial.uniforms['tNoise'].value = this.noiseTexture;\r\n    this.ssaoMaterial.uniforms['kernel'].value = this.kernel;\r\n    this.ssaoMaterial.uniforms['cameraNear'].value = this.camera.near;\r\n    this.ssaoMaterial.uniforms['cameraFar'].value = this.camera.far;\r\n    this.ssaoMaterial.uniforms['resolution'].value.set(this.width, this.height);\r\n    this.ssaoMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix);\r\n    this.ssaoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse); // normal material\r\n\r\n    this.normalMaterial = new MeshNormalMaterial();\r\n    this.normalMaterial.blending = NoBlending; // blur material\r\n\r\n    this.blurMaterial = new ShaderMaterial({\r\n      defines: Object.assign({}, SSAOBlurShader.defines),\r\n      uniforms: UniformsUtils.clone(SSAOBlurShader.uniforms),\r\n      vertexShader: SSAOBlurShader.vertexShader,\r\n      fragmentShader: SSAOBlurShader.fragmentShader\r\n    });\r\n    this.blurMaterial.uniforms['tDiffuse'].value = this.ssaoRenderTarget.texture;\r\n    this.blurMaterial.uniforms['resolution'].value.set(this.width, this.height); // material for rendering the depth\r\n\r\n    this.depthRenderMaterial = new ShaderMaterial({\r\n      defines: Object.assign({}, SSAODepthShader.defines),\r\n      uniforms: UniformsUtils.clone(SSAODepthShader.uniforms),\r\n      vertexShader: SSAODepthShader.vertexShader,\r\n      fragmentShader: SSAODepthShader.fragmentShader,\r\n      blending: NoBlending\r\n    });\r\n    this.depthRenderMaterial.uniforms['tDepth'].value = this.normalRenderTarget.depthTexture;\r\n    this.depthRenderMaterial.uniforms['cameraNear'].value = this.camera.near;\r\n    this.depthRenderMaterial.uniforms['cameraFar'].value = this.camera.far; // material for rendering the content of a render target\r\n\r\n    this.copyMaterial = new ShaderMaterial({\r\n      uniforms: UniformsUtils.clone(CopyShader.uniforms),\r\n      vertexShader: CopyShader.vertexShader,\r\n      fragmentShader: CopyShader.fragmentShader,\r\n      transparent: true,\r\n      depthTest: false,\r\n      depthWrite: false,\r\n      blendSrc: DstColorFactor,\r\n      blendDst: ZeroFactor,\r\n      blendEquation: AddEquation,\r\n      blendSrcAlpha: DstAlphaFactor,\r\n      blendDstAlpha: ZeroFactor,\r\n      blendEquationAlpha: AddEquation\r\n    });\r\n    this.fsQuad = new FullScreenQuad(null);\r\n    this.originalClearColor = new Color();\r\n  }\r\n\r\n  dispose() {\r\n    // dispose render targets\r\n    this.beautyRenderTarget.dispose();\r\n    this.normalRenderTarget.dispose();\r\n    this.ssaoRenderTarget.dispose();\r\n    this.blurRenderTarget.dispose(); // dispose materials\r\n\r\n    this.normalMaterial.dispose();\r\n    this.blurMaterial.dispose();\r\n    this.copyMaterial.dispose();\r\n    this.depthRenderMaterial.dispose(); // dipsose full screen quad\r\n\r\n    this.fsQuad.dispose();\r\n  }\r\n\r\n  render(renderer, writeBuffer\r\n  /*, readBuffer, deltaTime, maskActive */\r\n  ) {\r\n    if (renderer.capabilities.isWebGL2 === false) this.noiseTexture.format = LuminanceFormat; // render beauty\r\n\r\n    renderer.setRenderTarget(this.beautyRenderTarget);\r\n    renderer.clear();\r\n    renderer.render(this.scene, this.camera); // render normals and depth (honor only meshes, points and lines do not contribute to SSAO)\r\n\r\n    this.overrideVisibility();\r\n    this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0);\r\n    this.restoreVisibility(); // render SSAO\r\n\r\n    this.ssaoMaterial.uniforms['kernelRadius'].value = this.kernelRadius;\r\n    this.ssaoMaterial.uniforms['minDistance'].value = this.minDistance;\r\n    this.ssaoMaterial.uniforms['maxDistance'].value = this.maxDistance;\r\n    this.renderPass(renderer, this.ssaoMaterial, this.ssaoRenderTarget); // render blur\r\n\r\n    this.renderPass(renderer, this.blurMaterial, this.blurRenderTarget); // output result to screen\r\n\r\n    switch (this.output) {\r\n      case SSAOPass.OUTPUT.SSAO:\r\n        this.copyMaterial.uniforms['tDiffuse'].value = this.ssaoRenderTarget.texture;\r\n        this.copyMaterial.blending = NoBlending;\r\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\r\n        break;\r\n\r\n      case SSAOPass.OUTPUT.Blur:\r\n        this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget.texture;\r\n        this.copyMaterial.blending = NoBlending;\r\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\r\n        break;\r\n\r\n      case SSAOPass.OUTPUT.Beauty:\r\n        this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\r\n        this.copyMaterial.blending = NoBlending;\r\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\r\n        break;\r\n\r\n      case SSAOPass.OUTPUT.Depth:\r\n        this.renderPass(renderer, this.depthRenderMaterial, this.renderToScreen ? null : writeBuffer);\r\n        break;\r\n\r\n      case SSAOPass.OUTPUT.Normal:\r\n        this.copyMaterial.uniforms['tDiffuse'].value = this.normalRenderTarget.texture;\r\n        this.copyMaterial.blending = NoBlending;\r\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\r\n        break;\r\n\r\n      case SSAOPass.OUTPUT.Default:\r\n        this.copyMaterial.uniforms['tDiffuse'].value = this.beautyRenderTarget.texture;\r\n        this.copyMaterial.blending = NoBlending;\r\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\r\n        this.copyMaterial.uniforms['tDiffuse'].value = this.blurRenderTarget.texture;\r\n        this.copyMaterial.blending = CustomBlending;\r\n        this.renderPass(renderer, this.copyMaterial, this.renderToScreen ? null : writeBuffer);\r\n        break;\r\n\r\n      default:\r\n        console.warn('THREE.SSAOPass: Unknown output type.');\r\n    }\r\n  }\r\n\r\n  renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\r\n    // save original state\r\n    renderer.getClearColor(this.originalClearColor);\r\n    const originalClearAlpha = renderer.getClearAlpha();\r\n    const originalAutoClear = renderer.autoClear;\r\n    renderer.setRenderTarget(renderTarget); // setup pass state\r\n\r\n    renderer.autoClear = false;\r\n\r\n    if (clearColor !== undefined && clearColor !== null) {\r\n      renderer.setClearColor(clearColor);\r\n      renderer.setClearAlpha(clearAlpha || 0.0);\r\n      renderer.clear();\r\n    }\r\n\r\n    this.fsQuad.material = passMaterial;\r\n    this.fsQuad.render(renderer); // restore original state\r\n\r\n    renderer.autoClear = originalAutoClear;\r\n    renderer.setClearColor(this.originalClearColor);\r\n    renderer.setClearAlpha(originalClearAlpha);\r\n  }\r\n\r\n  renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\r\n    renderer.getClearColor(this.originalClearColor);\r\n    const originalClearAlpha = renderer.getClearAlpha();\r\n    const originalAutoClear = renderer.autoClear;\r\n    renderer.setRenderTarget(renderTarget);\r\n    renderer.autoClear = false;\r\n    clearColor = overrideMaterial.clearColor || clearColor;\r\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\r\n\r\n    if (clearColor !== undefined && clearColor !== null) {\r\n      renderer.setClearColor(clearColor);\r\n      renderer.setClearAlpha(clearAlpha || 0.0);\r\n      renderer.clear();\r\n    }\r\n\r\n    this.scene.overrideMaterial = overrideMaterial;\r\n    renderer.render(this.scene, this.camera);\r\n    this.scene.overrideMaterial = null; // restore original state\r\n\r\n    renderer.autoClear = originalAutoClear;\r\n    renderer.setClearColor(this.originalClearColor);\r\n    renderer.setClearAlpha(originalClearAlpha);\r\n  }\r\n\r\n  setSize(width, height) {\r\n    this.width = width;\r\n    this.height = height;\r\n    this.beautyRenderTarget.setSize(width, height);\r\n    this.ssaoRenderTarget.setSize(width, height);\r\n    this.normalRenderTarget.setSize(width, height);\r\n    this.blurRenderTarget.setSize(width, height);\r\n    this.ssaoMaterial.uniforms['resolution'].value.set(width, height);\r\n    this.ssaoMaterial.uniforms['cameraProjectionMatrix'].value.copy(this.camera.projectionMatrix);\r\n    this.ssaoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse);\r\n    this.blurMaterial.uniforms['resolution'].value.set(width, height);\r\n  }\r\n\r\n  generateSampleKernel() {\r\n    const kernelSize = this.kernelSize;\r\n    const kernel = this.kernel;\r\n\r\n    for (let i = 0; i < kernelSize; i++) {\r\n      const sample = new Vector3();\r\n      sample.x = Math.random() * 2 - 1;\r\n      sample.y = Math.random() * 2 - 1;\r\n      sample.z = Math.random();\r\n      sample.normalize();\r\n      let scale = i / kernelSize;\r\n      scale = MathUtils.lerp(0.1, 1, scale * scale);\r\n      sample.multiplyScalar(scale);\r\n      kernel.push(sample);\r\n    }\r\n  }\r\n\r\n  generateRandomKernelRotations() {\r\n    const width = 4,\r\n          height = 4;\r\n\r\n    if (SimplexNoise === undefined) {\r\n      console.error('THREE.SSAOPass: The pass relies on SimplexNoise.');\r\n    }\r\n\r\n    const simplex = new SimplexNoise();\r\n    const size = width * height;\r\n    const data = new Float32Array(size);\r\n\r\n    for (let i = 0; i < size; i++) {\r\n      const x = Math.random() * 2 - 1;\r\n      const y = Math.random() * 2 - 1;\r\n      const z = 0;\r\n      data[i] = simplex.noise3d(x, y, z);\r\n    }\r\n\r\n    this.noiseTexture = new DataTexture(data, width, height, RedFormat, FloatType);\r\n    this.noiseTexture.wrapS = RepeatWrapping;\r\n    this.noiseTexture.wrapT = RepeatWrapping;\r\n    this.noiseTexture.needsUpdate = true;\r\n  }\r\n\r\n  overrideVisibility() {\r\n    const scene = this.scene;\r\n    const cache = this._visibilityCache;\r\n    scene.traverse(function (object) {\r\n      cache.set(object, object.visible);\r\n      if (object.isPoints || object.isLine) object.visible = false;\r\n    });\r\n  }\r\n\r\n  restoreVisibility() {\r\n    const scene = this.scene;\r\n    const cache = this._visibilityCache;\r\n    scene.traverse(function (object) {\r\n      const visible = cache.get(object);\r\n      object.visible = visible;\r\n    });\r\n    cache.clear();\r\n  }\r\n\r\n}\r\n\r\nSSAOPass.OUTPUT = {\r\n  Default: 0,\r\n  SSAO: 1,\r\n  Blur: 2,\r\n  Beauty: 3,\r\n  Depth: 4,\r\n  Normal: 5\r\n};\r\n\r\nexport { SSAOPass };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}