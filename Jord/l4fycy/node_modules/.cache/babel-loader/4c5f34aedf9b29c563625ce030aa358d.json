{"ast":null,"code":"import _classCallCheck from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { DataTextureLoader, HalfFloatType, FloatType, DataUtils, LinearEncoding, LinearFilter } from 'three'; // http://en.wikipedia.org/wiki/RGBE_image_format\n\nvar RGBELoader = /*#__PURE__*/function (_DataTextureLoader) {\n  _inherits(RGBELoader, _DataTextureLoader);\n\n  var _super = _createSuper(RGBELoader);\n\n  function RGBELoader(manager) {\n    var _this;\n\n    _classCallCheck(this, RGBELoader);\n\n    _this = _super.call(this, manager);\n    _this.type = HalfFloatType;\n    return _this;\n  } // adapted from http://www.graphics.cornell.edu/~bjw/rgbe.html\n\n\n  _createClass(RGBELoader, [{\n    key: \"parse\",\n    value: function parse(buffer) {\n      var\n      /* return codes for rgbe routines */\n      //RGBE_RETURN_SUCCESS = 0,\n      RGBE_RETURN_FAILURE = -1,\n\n      /* default error routine.  change this to change error handling */\n      rgbe_read_error = 1,\n          rgbe_write_error = 2,\n          rgbe_format_error = 3,\n          rgbe_memory_error = 4,\n          rgbe_error = function rgbe_error(rgbe_error_code, msg) {\n        switch (rgbe_error_code) {\n          case rgbe_read_error:\n            console.error('THREE.RGBELoader Read Error: ' + (msg || ''));\n            break;\n\n          case rgbe_write_error:\n            console.error('THREE.RGBELoader Write Error: ' + (msg || ''));\n            break;\n\n          case rgbe_format_error:\n            console.error('THREE.RGBELoader Bad File Format: ' + (msg || ''));\n            break;\n\n          default:\n          case rgbe_memory_error:\n            console.error('THREE.RGBELoader: Error: ' + (msg || ''));\n        }\n\n        return RGBE_RETURN_FAILURE;\n      },\n\n      /* offsets to red, green, and blue components in a data (float) pixel */\n      //RGBE_DATA_RED = 0,\n      //RGBE_DATA_GREEN = 1,\n      //RGBE_DATA_BLUE = 2,\n\n      /* number of floats per pixel, use 4 since stored in rgba image format */\n      //RGBE_DATA_SIZE = 4,\n\n      /* flags indicating which fields in an rgbe_header_info are valid */\n      RGBE_VALID_PROGRAMTYPE = 1,\n          RGBE_VALID_FORMAT = 2,\n          RGBE_VALID_DIMENSIONS = 4,\n          NEWLINE = '\\n',\n          fgets = function fgets(buffer, lineLimit, consume) {\n        var chunkSize = 128;\n        lineLimit = !lineLimit ? 1024 : lineLimit;\n        var p = buffer.pos,\n            i = -1,\n            len = 0,\n            s = '',\n            chunk = String.fromCharCode.apply(null, new Uint16Array(buffer.subarray(p, p + chunkSize)));\n\n        while (0 > (i = chunk.indexOf(NEWLINE)) && len < lineLimit && p < buffer.byteLength) {\n          s += chunk;\n          len += chunk.length;\n          p += chunkSize;\n          chunk += String.fromCharCode.apply(null, new Uint16Array(buffer.subarray(p, p + chunkSize)));\n        }\n\n        if (-1 < i) {\n          /*for (i=l-1; i>=0; i--) {\n          byteCode = m.charCodeAt(i);\n          if (byteCode > 0x7f && byteCode <= 0x7ff) byteLen++;\n          else if (byteCode > 0x7ff && byteCode <= 0xffff) byteLen += 2;\n          if (byteCode >= 0xDC00 && byteCode <= 0xDFFF) i--; //trail surrogate\n          }*/\n          if (false !== consume) buffer.pos += len + i + 1;\n          return s + chunk.slice(0, i);\n        }\n\n        return false;\n      },\n\n      /* minimal header reading.  modify if you want to parse more information */\n      RGBE_ReadHeader = function RGBE_ReadHeader(buffer) {\n        // regexes to parse header info fields\n        var magic_token_re = /^#\\?(\\S+)/,\n            gamma_re = /^\\s*GAMMA\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n            exposure_re = /^\\s*EXPOSURE\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n            format_re = /^\\s*FORMAT=(\\S+)\\s*$/,\n            dimensions_re = /^\\s*\\-Y\\s+(\\d+)\\s+\\+X\\s+(\\d+)\\s*$/,\n            // RGBE format header struct\n        header = {\n          valid: 0\n          /* indicate which fields are valid */\n          ,\n          string: ''\n          /* the actual header string */\n          ,\n          comments: ''\n          /* comments found in header */\n          ,\n          programtype: 'RGBE'\n          /* listed at beginning of file to identify it after \"#?\". defaults to \"RGBE\" */\n          ,\n          format: ''\n          /* RGBE format, default 32-bit_rle_rgbe */\n          ,\n          gamma: 1.0\n          /* image has already been gamma corrected with given gamma. defaults to 1.0 (no correction) */\n          ,\n          exposure: 1.0\n          /* a value of 1.0 in an image corresponds to <exposure> watts/steradian/m^2. defaults to 1.0 */\n          ,\n          width: 0,\n          height: 0\n          /* image dimensions, width/height */\n\n        };\n        var line, match;\n\n        if (buffer.pos >= buffer.byteLength || !(line = fgets(buffer))) {\n          return rgbe_error(rgbe_read_error, 'no header found');\n        }\n        /* if you want to require the magic token then uncomment the next line */\n\n\n        if (!(match = line.match(magic_token_re))) {\n          return rgbe_error(rgbe_format_error, 'bad initial token');\n        }\n\n        header.valid |= RGBE_VALID_PROGRAMTYPE;\n        header.programtype = match[1];\n        header.string += line + '\\n';\n\n        while (true) {\n          line = fgets(buffer);\n          if (false === line) break;\n          header.string += line + '\\n';\n\n          if ('#' === line.charAt(0)) {\n            header.comments += line + '\\n';\n            continue; // comment line\n          }\n\n          if (match = line.match(gamma_re)) {\n            header.gamma = parseFloat(match[1]);\n          }\n\n          if (match = line.match(exposure_re)) {\n            header.exposure = parseFloat(match[1]);\n          }\n\n          if (match = line.match(format_re)) {\n            header.valid |= RGBE_VALID_FORMAT;\n            header.format = match[1]; //'32-bit_rle_rgbe';\n          }\n\n          if (match = line.match(dimensions_re)) {\n            header.valid |= RGBE_VALID_DIMENSIONS;\n            header.height = parseInt(match[1], 10);\n            header.width = parseInt(match[2], 10);\n          }\n\n          if (header.valid & RGBE_VALID_FORMAT && header.valid & RGBE_VALID_DIMENSIONS) break;\n        }\n\n        if (!(header.valid & RGBE_VALID_FORMAT)) {\n          return rgbe_error(rgbe_format_error, 'missing format specifier');\n        }\n\n        if (!(header.valid & RGBE_VALID_DIMENSIONS)) {\n          return rgbe_error(rgbe_format_error, 'missing image size specifier');\n        }\n\n        return header;\n      },\n          RGBE_ReadPixels_RLE = function RGBE_ReadPixels_RLE(buffer, w, h) {\n        var scanline_width = w;\n\n        if ( // run length encoding is not allowed so read flat\n        scanline_width < 8 || scanline_width > 0x7fff || // this file is not run length encoded\n        2 !== buffer[0] || 2 !== buffer[1] || buffer[2] & 0x80) {\n          // return the flat buffer\n          return new Uint8Array(buffer);\n        }\n\n        if (scanline_width !== (buffer[2] << 8 | buffer[3])) {\n          return rgbe_error(rgbe_format_error, 'wrong scanline width');\n        }\n\n        var data_rgba = new Uint8Array(4 * w * h);\n\n        if (!data_rgba.length) {\n          return rgbe_error(rgbe_memory_error, 'unable to allocate buffer space');\n        }\n\n        var offset = 0,\n            pos = 0;\n        var ptr_end = 4 * scanline_width;\n        var rgbeStart = new Uint8Array(4);\n        var scanline_buffer = new Uint8Array(ptr_end);\n        var num_scanlines = h; // read in each successive scanline\n\n        while (num_scanlines > 0 && pos < buffer.byteLength) {\n          if (pos + 4 > buffer.byteLength) {\n            return rgbe_error(rgbe_read_error);\n          }\n\n          rgbeStart[0] = buffer[pos++];\n          rgbeStart[1] = buffer[pos++];\n          rgbeStart[2] = buffer[pos++];\n          rgbeStart[3] = buffer[pos++];\n\n          if (2 != rgbeStart[0] || 2 != rgbeStart[1] || (rgbeStart[2] << 8 | rgbeStart[3]) != scanline_width) {\n            return rgbe_error(rgbe_format_error, 'bad rgbe scanline format');\n          } // read each of the four channels for the scanline into the buffer\n          // first red, then green, then blue, then exponent\n\n\n          var ptr = 0,\n              count = void 0;\n\n          while (ptr < ptr_end && pos < buffer.byteLength) {\n            count = buffer[pos++];\n            var isEncodedRun = count > 128;\n            if (isEncodedRun) count -= 128;\n\n            if (0 === count || ptr + count > ptr_end) {\n              return rgbe_error(rgbe_format_error, 'bad scanline data');\n            }\n\n            if (isEncodedRun) {\n              // a (encoded) run of the same value\n              var byteValue = buffer[pos++];\n\n              for (var i = 0; i < count; i++) {\n                scanline_buffer[ptr++] = byteValue;\n              } //ptr += count;\n\n            } else {\n              // a literal-run\n              scanline_buffer.set(buffer.subarray(pos, pos + count), ptr);\n              ptr += count;\n              pos += count;\n            }\n          } // now convert data from buffer into rgba\n          // first red, then green, then blue, then exponent (alpha)\n\n\n          var l = scanline_width; //scanline_buffer.byteLength;\n\n          for (var _i = 0; _i < l; _i++) {\n            var off = 0;\n            data_rgba[offset] = scanline_buffer[_i + off];\n            off += scanline_width; //1;\n\n            data_rgba[offset + 1] = scanline_buffer[_i + off];\n            off += scanline_width; //1;\n\n            data_rgba[offset + 2] = scanline_buffer[_i + off];\n            off += scanline_width; //1;\n\n            data_rgba[offset + 3] = scanline_buffer[_i + off];\n            offset += 4;\n          }\n\n          num_scanlines--;\n        }\n\n        return data_rgba;\n      };\n\n      var RGBEByteToRGBFloat = function RGBEByteToRGBFloat(sourceArray, sourceOffset, destArray, destOffset) {\n        var e = sourceArray[sourceOffset + 3];\n        var scale = Math.pow(2.0, e - 128.0) / 255.0;\n        destArray[destOffset + 0] = sourceArray[sourceOffset + 0] * scale;\n        destArray[destOffset + 1] = sourceArray[sourceOffset + 1] * scale;\n        destArray[destOffset + 2] = sourceArray[sourceOffset + 2] * scale;\n        destArray[destOffset + 3] = 1;\n      };\n\n      var RGBEByteToRGBHalf = function RGBEByteToRGBHalf(sourceArray, sourceOffset, destArray, destOffset) {\n        var e = sourceArray[sourceOffset + 3];\n        var scale = Math.pow(2.0, e - 128.0) / 255.0; // clamping to 65504, the maximum representable value in float16\n\n        destArray[destOffset + 0] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 0] * scale, 65504));\n        destArray[destOffset + 1] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 1] * scale, 65504));\n        destArray[destOffset + 2] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 2] * scale, 65504));\n        destArray[destOffset + 3] = DataUtils.toHalfFloat(1);\n      };\n\n      var byteArray = new Uint8Array(buffer);\n      byteArray.pos = 0;\n      var rgbe_header_info = RGBE_ReadHeader(byteArray);\n\n      if (RGBE_RETURN_FAILURE !== rgbe_header_info) {\n        var w = rgbe_header_info.width,\n            h = rgbe_header_info.height,\n            image_rgba_data = RGBE_ReadPixels_RLE(byteArray.subarray(byteArray.pos), w, h);\n\n        if (RGBE_RETURN_FAILURE !== image_rgba_data) {\n          var data, format, type;\n          var numElements;\n\n          switch (this.type) {\n            case FloatType:\n              numElements = image_rgba_data.length / 4;\n              var floatArray = new Float32Array(numElements * 4);\n\n              for (var j = 0; j < numElements; j++) {\n                RGBEByteToRGBFloat(image_rgba_data, j * 4, floatArray, j * 4);\n              }\n\n              data = floatArray;\n              type = FloatType;\n              break;\n\n            case HalfFloatType:\n              numElements = image_rgba_data.length / 4;\n              var halfArray = new Uint16Array(numElements * 4);\n\n              for (var _j = 0; _j < numElements; _j++) {\n                RGBEByteToRGBHalf(image_rgba_data, _j * 4, halfArray, _j * 4);\n              }\n\n              data = halfArray;\n              type = HalfFloatType;\n              break;\n\n            default:\n              console.error('THREE.RGBELoader: unsupported type: ', this.type);\n              break;\n          }\n\n          return {\n            width: w,\n            height: h,\n            data: data,\n            header: rgbe_header_info.string,\n            gamma: rgbe_header_info.gamma,\n            exposure: rgbe_header_info.exposure,\n            format: format,\n            type: type\n          };\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"setDataType\",\n    value: function setDataType(value) {\n      this.type = value;\n      return this;\n    }\n  }, {\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      function onLoadCallback(texture, texData) {\n        switch (texture.type) {\n          case FloatType:\n            texture.encoding = LinearEncoding;\n            texture.minFilter = LinearFilter;\n            texture.magFilter = LinearFilter;\n            texture.generateMipmaps = false;\n            texture.flipY = true;\n            break;\n\n          case HalfFloatType:\n            texture.encoding = LinearEncoding;\n            texture.minFilter = LinearFilter;\n            texture.magFilter = LinearFilter;\n            texture.generateMipmaps = false;\n            texture.flipY = true;\n            break;\n        }\n\n        if (onLoad) onLoad(texture, texData);\n      }\n\n      return _get(_getPrototypeOf(RGBELoader.prototype), \"load\", this).call(this, url, onLoadCallback, onProgress, onError);\n    }\n  }]);\n\n  return RGBELoader;\n}(DataTextureLoader);\n\nexport { RGBELoader };","map":{"version":3,"names":["DataTextureLoader","HalfFloatType","FloatType","DataUtils","LinearEncoding","LinearFilter","RGBELoader","manager","type","buffer","RGBE_RETURN_FAILURE","rgbe_read_error","rgbe_write_error","rgbe_format_error","rgbe_memory_error","rgbe_error","rgbe_error_code","msg","console","error","RGBE_VALID_PROGRAMTYPE","RGBE_VALID_FORMAT","RGBE_VALID_DIMENSIONS","NEWLINE","fgets","lineLimit","consume","chunkSize","p","pos","i","len","s","chunk","String","fromCharCode","apply","Uint16Array","subarray","indexOf","byteLength","length","slice","RGBE_ReadHeader","magic_token_re","gamma_re","exposure_re","format_re","dimensions_re","header","valid","string","comments","programtype","format","gamma","exposure","width","height","line","match","charAt","parseFloat","parseInt","RGBE_ReadPixels_RLE","w","h","scanline_width","Uint8Array","data_rgba","offset","ptr_end","rgbeStart","scanline_buffer","num_scanlines","ptr","count","isEncodedRun","byteValue","set","l","off","RGBEByteToRGBFloat","sourceArray","sourceOffset","destArray","destOffset","e","scale","Math","pow","RGBEByteToRGBHalf","toHalfFloat","min","byteArray","rgbe_header_info","image_rgba_data","data","numElements","floatArray","Float32Array","j","halfArray","value","url","onLoad","onProgress","onError","onLoadCallback","texture","texData","encoding","minFilter","magFilter","generateMipmaps","flipY"],"sources":["C:/Users/Arnav/Downloads/l4fycy/node_modules/three-stdlib/loaders/RGBELoader.js"],"sourcesContent":["import { DataTextureLoader, HalfFloatType, FloatType, DataUtils, LinearEncoding, LinearFilter } from 'three';\n\n// http://en.wikipedia.org/wiki/RGBE_image_format\n\nclass RGBELoader extends DataTextureLoader {\n  constructor(manager) {\n    super(manager);\n    this.type = HalfFloatType;\n  } // adapted from http://www.graphics.cornell.edu/~bjw/rgbe.html\n\n\n  parse(buffer) {\n    const\n    /* return codes for rgbe routines */\n    //RGBE_RETURN_SUCCESS = 0,\n    RGBE_RETURN_FAILURE = -1,\n\n    /* default error routine.  change this to change error handling */\n    rgbe_read_error = 1,\n          rgbe_write_error = 2,\n          rgbe_format_error = 3,\n          rgbe_memory_error = 4,\n          rgbe_error = function (rgbe_error_code, msg) {\n      switch (rgbe_error_code) {\n        case rgbe_read_error:\n          console.error('THREE.RGBELoader Read Error: ' + (msg || ''));\n          break;\n\n        case rgbe_write_error:\n          console.error('THREE.RGBELoader Write Error: ' + (msg || ''));\n          break;\n\n        case rgbe_format_error:\n          console.error('THREE.RGBELoader Bad File Format: ' + (msg || ''));\n          break;\n\n        default:\n        case rgbe_memory_error:\n          console.error('THREE.RGBELoader: Error: ' + (msg || ''));\n      }\n\n      return RGBE_RETURN_FAILURE;\n    },\n\n    /* offsets to red, green, and blue components in a data (float) pixel */\n    //RGBE_DATA_RED = 0,\n    //RGBE_DATA_GREEN = 1,\n    //RGBE_DATA_BLUE = 2,\n\n    /* number of floats per pixel, use 4 since stored in rgba image format */\n    //RGBE_DATA_SIZE = 4,\n\n    /* flags indicating which fields in an rgbe_header_info are valid */\n    RGBE_VALID_PROGRAMTYPE = 1,\n          RGBE_VALID_FORMAT = 2,\n          RGBE_VALID_DIMENSIONS = 4,\n          NEWLINE = '\\n',\n          fgets = function (buffer, lineLimit, consume) {\n      const chunkSize = 128;\n      lineLimit = !lineLimit ? 1024 : lineLimit;\n      let p = buffer.pos,\n          i = -1,\n          len = 0,\n          s = '',\n          chunk = String.fromCharCode.apply(null, new Uint16Array(buffer.subarray(p, p + chunkSize)));\n\n      while (0 > (i = chunk.indexOf(NEWLINE)) && len < lineLimit && p < buffer.byteLength) {\n        s += chunk;\n        len += chunk.length;\n        p += chunkSize;\n        chunk += String.fromCharCode.apply(null, new Uint16Array(buffer.subarray(p, p + chunkSize)));\n      }\n\n      if (-1 < i) {\n        /*for (i=l-1; i>=0; i--) {\n        byteCode = m.charCodeAt(i);\n        if (byteCode > 0x7f && byteCode <= 0x7ff) byteLen++;\n        else if (byteCode > 0x7ff && byteCode <= 0xffff) byteLen += 2;\n        if (byteCode >= 0xDC00 && byteCode <= 0xDFFF) i--; //trail surrogate\n        }*/\n        if (false !== consume) buffer.pos += len + i + 1;\n        return s + chunk.slice(0, i);\n      }\n\n      return false;\n    },\n\n    /* minimal header reading.  modify if you want to parse more information */\n    RGBE_ReadHeader = function (buffer) {\n      // regexes to parse header info fields\n      const magic_token_re = /^#\\?(\\S+)/,\n            gamma_re = /^\\s*GAMMA\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n            exposure_re = /^\\s*EXPOSURE\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n            format_re = /^\\s*FORMAT=(\\S+)\\s*$/,\n            dimensions_re = /^\\s*\\-Y\\s+(\\d+)\\s+\\+X\\s+(\\d+)\\s*$/,\n            // RGBE format header struct\n      header = {\n        valid: 0\n        /* indicate which fields are valid */\n        ,\n        string: ''\n        /* the actual header string */\n        ,\n        comments: ''\n        /* comments found in header */\n        ,\n        programtype: 'RGBE'\n        /* listed at beginning of file to identify it after \"#?\". defaults to \"RGBE\" */\n        ,\n        format: ''\n        /* RGBE format, default 32-bit_rle_rgbe */\n        ,\n        gamma: 1.0\n        /* image has already been gamma corrected with given gamma. defaults to 1.0 (no correction) */\n        ,\n        exposure: 1.0\n        /* a value of 1.0 in an image corresponds to <exposure> watts/steradian/m^2. defaults to 1.0 */\n        ,\n        width: 0,\n        height: 0\n        /* image dimensions, width/height */\n\n      };\n      let line, match;\n\n      if (buffer.pos >= buffer.byteLength || !(line = fgets(buffer))) {\n        return rgbe_error(rgbe_read_error, 'no header found');\n      }\n      /* if you want to require the magic token then uncomment the next line */\n\n\n      if (!(match = line.match(magic_token_re))) {\n        return rgbe_error(rgbe_format_error, 'bad initial token');\n      }\n\n      header.valid |= RGBE_VALID_PROGRAMTYPE;\n      header.programtype = match[1];\n      header.string += line + '\\n';\n\n      while (true) {\n        line = fgets(buffer);\n        if (false === line) break;\n        header.string += line + '\\n';\n\n        if ('#' === line.charAt(0)) {\n          header.comments += line + '\\n';\n          continue; // comment line\n        }\n\n        if (match = line.match(gamma_re)) {\n          header.gamma = parseFloat(match[1]);\n        }\n\n        if (match = line.match(exposure_re)) {\n          header.exposure = parseFloat(match[1]);\n        }\n\n        if (match = line.match(format_re)) {\n          header.valid |= RGBE_VALID_FORMAT;\n          header.format = match[1]; //'32-bit_rle_rgbe';\n        }\n\n        if (match = line.match(dimensions_re)) {\n          header.valid |= RGBE_VALID_DIMENSIONS;\n          header.height = parseInt(match[1], 10);\n          header.width = parseInt(match[2], 10);\n        }\n\n        if (header.valid & RGBE_VALID_FORMAT && header.valid & RGBE_VALID_DIMENSIONS) break;\n      }\n\n      if (!(header.valid & RGBE_VALID_FORMAT)) {\n        return rgbe_error(rgbe_format_error, 'missing format specifier');\n      }\n\n      if (!(header.valid & RGBE_VALID_DIMENSIONS)) {\n        return rgbe_error(rgbe_format_error, 'missing image size specifier');\n      }\n\n      return header;\n    },\n          RGBE_ReadPixels_RLE = function (buffer, w, h) {\n      const scanline_width = w;\n\n      if ( // run length encoding is not allowed so read flat\n      scanline_width < 8 || scanline_width > 0x7fff || // this file is not run length encoded\n      2 !== buffer[0] || 2 !== buffer[1] || buffer[2] & 0x80) {\n        // return the flat buffer\n        return new Uint8Array(buffer);\n      }\n\n      if (scanline_width !== (buffer[2] << 8 | buffer[3])) {\n        return rgbe_error(rgbe_format_error, 'wrong scanline width');\n      }\n\n      const data_rgba = new Uint8Array(4 * w * h);\n\n      if (!data_rgba.length) {\n        return rgbe_error(rgbe_memory_error, 'unable to allocate buffer space');\n      }\n\n      let offset = 0,\n          pos = 0;\n      const ptr_end = 4 * scanline_width;\n      const rgbeStart = new Uint8Array(4);\n      const scanline_buffer = new Uint8Array(ptr_end);\n      let num_scanlines = h; // read in each successive scanline\n\n      while (num_scanlines > 0 && pos < buffer.byteLength) {\n        if (pos + 4 > buffer.byteLength) {\n          return rgbe_error(rgbe_read_error);\n        }\n\n        rgbeStart[0] = buffer[pos++];\n        rgbeStart[1] = buffer[pos++];\n        rgbeStart[2] = buffer[pos++];\n        rgbeStart[3] = buffer[pos++];\n\n        if (2 != rgbeStart[0] || 2 != rgbeStart[1] || (rgbeStart[2] << 8 | rgbeStart[3]) != scanline_width) {\n          return rgbe_error(rgbe_format_error, 'bad rgbe scanline format');\n        } // read each of the four channels for the scanline into the buffer\n        // first red, then green, then blue, then exponent\n\n\n        let ptr = 0,\n            count;\n\n        while (ptr < ptr_end && pos < buffer.byteLength) {\n          count = buffer[pos++];\n          const isEncodedRun = count > 128;\n          if (isEncodedRun) count -= 128;\n\n          if (0 === count || ptr + count > ptr_end) {\n            return rgbe_error(rgbe_format_error, 'bad scanline data');\n          }\n\n          if (isEncodedRun) {\n            // a (encoded) run of the same value\n            const byteValue = buffer[pos++];\n\n            for (let i = 0; i < count; i++) {\n              scanline_buffer[ptr++] = byteValue;\n            } //ptr += count;\n\n          } else {\n            // a literal-run\n            scanline_buffer.set(buffer.subarray(pos, pos + count), ptr);\n            ptr += count;\n            pos += count;\n          }\n        } // now convert data from buffer into rgba\n        // first red, then green, then blue, then exponent (alpha)\n\n\n        const l = scanline_width; //scanline_buffer.byteLength;\n\n        for (let i = 0; i < l; i++) {\n          let off = 0;\n          data_rgba[offset] = scanline_buffer[i + off];\n          off += scanline_width; //1;\n\n          data_rgba[offset + 1] = scanline_buffer[i + off];\n          off += scanline_width; //1;\n\n          data_rgba[offset + 2] = scanline_buffer[i + off];\n          off += scanline_width; //1;\n\n          data_rgba[offset + 3] = scanline_buffer[i + off];\n          offset += 4;\n        }\n\n        num_scanlines--;\n      }\n\n      return data_rgba;\n    };\n\n    const RGBEByteToRGBFloat = function (sourceArray, sourceOffset, destArray, destOffset) {\n      const e = sourceArray[sourceOffset + 3];\n      const scale = Math.pow(2.0, e - 128.0) / 255.0;\n      destArray[destOffset + 0] = sourceArray[sourceOffset + 0] * scale;\n      destArray[destOffset + 1] = sourceArray[sourceOffset + 1] * scale;\n      destArray[destOffset + 2] = sourceArray[sourceOffset + 2] * scale;\n      destArray[destOffset + 3] = 1;\n    };\n\n    const RGBEByteToRGBHalf = function (sourceArray, sourceOffset, destArray, destOffset) {\n      const e = sourceArray[sourceOffset + 3];\n      const scale = Math.pow(2.0, e - 128.0) / 255.0; // clamping to 65504, the maximum representable value in float16\n\n      destArray[destOffset + 0] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 0] * scale, 65504));\n      destArray[destOffset + 1] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 1] * scale, 65504));\n      destArray[destOffset + 2] = DataUtils.toHalfFloat(Math.min(sourceArray[sourceOffset + 2] * scale, 65504));\n      destArray[destOffset + 3] = DataUtils.toHalfFloat(1);\n    };\n\n    const byteArray = new Uint8Array(buffer);\n    byteArray.pos = 0;\n    const rgbe_header_info = RGBE_ReadHeader(byteArray);\n\n    if (RGBE_RETURN_FAILURE !== rgbe_header_info) {\n      const w = rgbe_header_info.width,\n            h = rgbe_header_info.height,\n            image_rgba_data = RGBE_ReadPixels_RLE(byteArray.subarray(byteArray.pos), w, h);\n\n      if (RGBE_RETURN_FAILURE !== image_rgba_data) {\n        let data, format, type;\n        let numElements;\n\n        switch (this.type) {\n          case FloatType:\n            numElements = image_rgba_data.length / 4;\n            const floatArray = new Float32Array(numElements * 4);\n\n            for (let j = 0; j < numElements; j++) {\n              RGBEByteToRGBFloat(image_rgba_data, j * 4, floatArray, j * 4);\n            }\n\n            data = floatArray;\n            type = FloatType;\n            break;\n\n          case HalfFloatType:\n            numElements = image_rgba_data.length / 4;\n            const halfArray = new Uint16Array(numElements * 4);\n\n            for (let j = 0; j < numElements; j++) {\n              RGBEByteToRGBHalf(image_rgba_data, j * 4, halfArray, j * 4);\n            }\n\n            data = halfArray;\n            type = HalfFloatType;\n            break;\n\n          default:\n            console.error('THREE.RGBELoader: unsupported type: ', this.type);\n            break;\n        }\n\n        return {\n          width: w,\n          height: h,\n          data: data,\n          header: rgbe_header_info.string,\n          gamma: rgbe_header_info.gamma,\n          exposure: rgbe_header_info.exposure,\n          format: format,\n          type: type\n        };\n      }\n    }\n\n    return null;\n  }\n\n  setDataType(value) {\n    this.type = value;\n    return this;\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    function onLoadCallback(texture, texData) {\n      switch (texture.type) {\n        case FloatType:\n          texture.encoding = LinearEncoding;\n          texture.minFilter = LinearFilter;\n          texture.magFilter = LinearFilter;\n          texture.generateMipmaps = false;\n          texture.flipY = true;\n          break;\n\n        case HalfFloatType:\n          texture.encoding = LinearEncoding;\n          texture.minFilter = LinearFilter;\n          texture.magFilter = LinearFilter;\n          texture.generateMipmaps = false;\n          texture.flipY = true;\n          break;\n      }\n\n      if (onLoad) onLoad(texture, texData);\n    }\n\n    return super.load(url, onLoadCallback, onProgress, onError);\n  }\n\n}\n\nexport { RGBELoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}