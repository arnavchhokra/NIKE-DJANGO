{"ast":null,"code":"import { Matrix3, OrthographicCamera, Scene, StereoCamera, WebGLRenderTarget, ShaderMaterial, Mesh, PlaneGeometry, LinearFilter, NearestFilter, RGBAFormat } from 'three';\n\nvar AnaglyphEffect = function AnaglyphEffect(renderer, width, height) {\n  // Dubois matrices from https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.7.6968&rep=rep1&type=pdf#page=4\n  this.colorMatrixLeft = new Matrix3().fromArray([0.4561, -0.0400822, -0.0152161, 0.500484, -0.0378246, -0.0205971, 0.176381, -0.0157589, -0.00546856]);\n  this.colorMatrixRight = new Matrix3().fromArray([-0.0434706, 0.378476, -0.0721527, -0.0879388, 0.73364, -0.112961, -0.00155529, -0.0184503, 1.2264]);\n\n  var _camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\n\n  var _scene = new Scene();\n\n  var _stereo = new StereoCamera();\n\n  var _params = {\n    minFilter: LinearFilter,\n    magFilter: NearestFilter,\n    format: RGBAFormat\n  };\n  if (width === undefined) width = 512;\n  if (height === undefined) height = 512;\n\n  var _renderTargetL = new WebGLRenderTarget(width, height, _params);\n\n  var _renderTargetR = new WebGLRenderTarget(width, height, _params);\n\n  var _material = new ShaderMaterial({\n    uniforms: {\n      mapLeft: {\n        value: _renderTargetL.texture\n      },\n      mapRight: {\n        value: _renderTargetR.texture\n      },\n      colorMatrixLeft: {\n        value: this.colorMatrixLeft\n      },\n      colorMatrixRight: {\n        value: this.colorMatrixRight\n      }\n    },\n    vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = vec2( uv.x, uv.y );', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n    fragmentShader: ['uniform sampler2D mapLeft;', 'uniform sampler2D mapRight;', 'varying vec2 vUv;', 'uniform mat3 colorMatrixLeft;', 'uniform mat3 colorMatrixRight;', // These functions implement sRGB linearization and gamma correction\n    'float lin( float c ) {', '\treturn c <= 0.04045 ? c * 0.0773993808 :', '\t\t\tpow( c * 0.9478672986 + 0.0521327014, 2.4 );', '}', 'vec4 lin( vec4 c ) {', '\treturn vec4( lin( c.r ), lin( c.g ), lin( c.b ), c.a );', '}', 'float dev( float c ) {', '\treturn c <= 0.0031308 ? c * 12.92', '\t\t\t: pow( c, 0.41666 ) * 1.055 - 0.055;', '}', 'void main() {', '\tvec2 uv = vUv;', '\tvec4 colorL = lin( texture2D( mapLeft, uv ) );', '\tvec4 colorR = lin( texture2D( mapRight, uv ) );', '\tvec3 color = clamp(', '\t\t\tcolorMatrixLeft * colorL.rgb +', '\t\t\tcolorMatrixRight * colorR.rgb, 0., 1. );', '\tgl_FragColor = vec4(', '\t\t\tdev( color.r ), dev( color.g ), dev( color.b ),', '\t\t\tmax( colorL.a, colorR.a ) );', '}'].join('\\n')\n  });\n\n  var _mesh = new Mesh(new PlaneGeometry(2, 2), _material);\n\n  _scene.add(_mesh);\n\n  this.setSize = function (width, height) {\n    renderer.setSize(width, height);\n    var pixelRatio = renderer.getPixelRatio();\n\n    _renderTargetL.setSize(width * pixelRatio, height * pixelRatio);\n\n    _renderTargetR.setSize(width * pixelRatio, height * pixelRatio);\n  };\n\n  this.render = function (scene, camera) {\n    var currentRenderTarget = renderer.getRenderTarget();\n    scene.updateMatrixWorld();\n    if (camera.parent === null) camera.updateMatrixWorld();\n\n    _stereo.update(camera);\n\n    renderer.setRenderTarget(_renderTargetL);\n    renderer.clear();\n    renderer.render(scene, _stereo.cameraL);\n    renderer.setRenderTarget(_renderTargetR);\n    renderer.clear();\n    renderer.render(scene, _stereo.cameraR);\n    renderer.setRenderTarget(null);\n    renderer.render(_scene, _camera);\n    renderer.setRenderTarget(currentRenderTarget);\n  };\n\n  this.dispose = function () {\n    if (_renderTargetL) _renderTargetL.dispose();\n    if (_renderTargetR) _renderTargetR.dispose();\n    if (_mesh) _mesh.geometry.dispose();\n    if (_material) _material.dispose();\n  };\n};\n\nexport { AnaglyphEffect };","map":{"version":3,"names":["Matrix3","OrthographicCamera","Scene","StereoCamera","WebGLRenderTarget","ShaderMaterial","Mesh","PlaneGeometry","LinearFilter","NearestFilter","RGBAFormat","AnaglyphEffect","renderer","width","height","colorMatrixLeft","fromArray","colorMatrixRight","_camera","_scene","_stereo","_params","minFilter","magFilter","format","undefined","_renderTargetL","_renderTargetR","_material","uniforms","mapLeft","value","texture","mapRight","vertexShader","join","fragmentShader","_mesh","add","setSize","pixelRatio","getPixelRatio","render","scene","camera","currentRenderTarget","getRenderTarget","updateMatrixWorld","parent","update","setRenderTarget","clear","cameraL","cameraR","dispose","geometry"],"sources":["D:/Github/NIKE-DJANGO/Jord/l4fycy/node_modules/three-stdlib/effects/AnaglyphEffect.js"],"sourcesContent":["import { Matrix3, OrthographicCamera, Scene, StereoCamera, WebGLRenderTarget, ShaderMaterial, Mesh, PlaneGeometry, LinearFilter, NearestFilter, RGBAFormat } from 'three';\r\n\r\nconst AnaglyphEffect = function (renderer, width, height) {\r\n  // Dubois matrices from https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.7.6968&rep=rep1&type=pdf#page=4\r\n  this.colorMatrixLeft = new Matrix3().fromArray([0.4561, -0.0400822, -0.0152161, 0.500484, -0.0378246, -0.0205971, 0.176381, -0.0157589, -0.00546856]);\r\n  this.colorMatrixRight = new Matrix3().fromArray([-0.0434706, 0.378476, -0.0721527, -0.0879388, 0.73364, -0.112961, -0.00155529, -0.0184503, 1.2264]);\r\n\r\n  const _camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\r\n\r\n  const _scene = new Scene();\r\n\r\n  const _stereo = new StereoCamera();\r\n\r\n  const _params = {\r\n    minFilter: LinearFilter,\r\n    magFilter: NearestFilter,\r\n    format: RGBAFormat\r\n  };\r\n  if (width === undefined) width = 512;\r\n  if (height === undefined) height = 512;\r\n\r\n  const _renderTargetL = new WebGLRenderTarget(width, height, _params);\r\n\r\n  const _renderTargetR = new WebGLRenderTarget(width, height, _params);\r\n\r\n  const _material = new ShaderMaterial({\r\n    uniforms: {\r\n      mapLeft: {\r\n        value: _renderTargetL.texture\r\n      },\r\n      mapRight: {\r\n        value: _renderTargetR.texture\r\n      },\r\n      colorMatrixLeft: {\r\n        value: this.colorMatrixLeft\r\n      },\r\n      colorMatrixRight: {\r\n        value: this.colorMatrixRight\r\n      }\r\n    },\r\n    vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = vec2( uv.x, uv.y );', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\r\n    fragmentShader: ['uniform sampler2D mapLeft;', 'uniform sampler2D mapRight;', 'varying vec2 vUv;', 'uniform mat3 colorMatrixLeft;', 'uniform mat3 colorMatrixRight;', // These functions implement sRGB linearization and gamma correction\r\n    'float lin( float c ) {', '\treturn c <= 0.04045 ? c * 0.0773993808 :', '\t\t\tpow( c * 0.9478672986 + 0.0521327014, 2.4 );', '}', 'vec4 lin( vec4 c ) {', '\treturn vec4( lin( c.r ), lin( c.g ), lin( c.b ), c.a );', '}', 'float dev( float c ) {', '\treturn c <= 0.0031308 ? c * 12.92', '\t\t\t: pow( c, 0.41666 ) * 1.055 - 0.055;', '}', 'void main() {', '\tvec2 uv = vUv;', '\tvec4 colorL = lin( texture2D( mapLeft, uv ) );', '\tvec4 colorR = lin( texture2D( mapRight, uv ) );', '\tvec3 color = clamp(', '\t\t\tcolorMatrixLeft * colorL.rgb +', '\t\t\tcolorMatrixRight * colorR.rgb, 0., 1. );', '\tgl_FragColor = vec4(', '\t\t\tdev( color.r ), dev( color.g ), dev( color.b ),', '\t\t\tmax( colorL.a, colorR.a ) );', '}'].join('\\n')\r\n  });\r\n\r\n  const _mesh = new Mesh(new PlaneGeometry(2, 2), _material);\r\n\r\n  _scene.add(_mesh);\r\n\r\n  this.setSize = (width, height) => {\r\n    renderer.setSize(width, height);\r\n    const pixelRatio = renderer.getPixelRatio();\r\n\r\n    _renderTargetL.setSize(width * pixelRatio, height * pixelRatio);\r\n\r\n    _renderTargetR.setSize(width * pixelRatio, height * pixelRatio);\r\n  };\r\n\r\n  this.render = (scene, camera) => {\r\n    const currentRenderTarget = renderer.getRenderTarget();\r\n    scene.updateMatrixWorld();\r\n    if (camera.parent === null) camera.updateMatrixWorld();\r\n\r\n    _stereo.update(camera);\r\n\r\n    renderer.setRenderTarget(_renderTargetL);\r\n    renderer.clear();\r\n    renderer.render(scene, _stereo.cameraL);\r\n    renderer.setRenderTarget(_renderTargetR);\r\n    renderer.clear();\r\n    renderer.render(scene, _stereo.cameraR);\r\n    renderer.setRenderTarget(null);\r\n    renderer.render(_scene, _camera);\r\n    renderer.setRenderTarget(currentRenderTarget);\r\n  };\r\n\r\n  this.dispose = () => {\r\n    if (_renderTargetL) _renderTargetL.dispose();\r\n    if (_renderTargetR) _renderTargetR.dispose();\r\n    if (_mesh) _mesh.geometry.dispose();\r\n    if (_material) _material.dispose();\r\n  };\r\n};\r\n\r\nexport { AnaglyphEffect };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}