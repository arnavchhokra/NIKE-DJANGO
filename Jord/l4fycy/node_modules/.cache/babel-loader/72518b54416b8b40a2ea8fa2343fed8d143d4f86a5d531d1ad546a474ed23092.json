{"ast":null,"code":"import { Vector3, BoxGeometry } from \"three\";\nconst tempNormal = new Vector3();\nfunction getUv(faceDirVector, normal, uvAxis, projectionAxis, radius, sideLength) {\n  const totArcLength = 2 * Math.PI * radius / 4;\n  const centerLength = Math.max(sideLength - 2 * radius, 0);\n  const halfArc = Math.PI / 4;\n  tempNormal.copy(normal);\n  tempNormal[projectionAxis] = 0;\n  tempNormal.normalize();\n  const arcUvRatio = 0.5 * totArcLength / (totArcLength + centerLength);\n  const arcAngleRatio = 1 - tempNormal.angleTo(faceDirVector) / halfArc;\n  if (Math.sign(tempNormal[uvAxis]) === 1) {\n    return arcAngleRatio * arcUvRatio;\n  } else {\n    const lenUv = centerLength / (totArcLength + centerLength);\n    return lenUv + arcUvRatio + arcUvRatio * (1 - arcAngleRatio);\n  }\n}\nclass RoundedBoxGeometry extends BoxGeometry {\n  constructor() {\n    let width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    let segments = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 2;\n    let radius = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0.1;\n    segments = segments * 2 + 1;\n    radius = Math.min(width / 2, height / 2, depth / 2, radius);\n    super(1, 1, 1, segments, segments, segments);\n    if (segments === 1) return;\n    const geometry2 = this.toNonIndexed();\n    this.index = null;\n    this.attributes.position = geometry2.attributes.position;\n    this.attributes.normal = geometry2.attributes.normal;\n    this.attributes.uv = geometry2.attributes.uv;\n    const position = new Vector3();\n    const normal = new Vector3();\n    const box = new Vector3(width, height, depth).divideScalar(2).subScalar(radius);\n    const positions = this.attributes.position.array;\n    const normals = this.attributes.normal.array;\n    const uvs = this.attributes.uv.array;\n    const faceTris = positions.length / 6;\n    const faceDirVector = new Vector3();\n    const halfSegmentSize = 0.5 / segments;\n    for (let i = 0, j = 0; i < positions.length; i += 3, j += 2) {\n      position.fromArray(positions, i);\n      normal.copy(position);\n      normal.x -= Math.sign(normal.x) * halfSegmentSize;\n      normal.y -= Math.sign(normal.y) * halfSegmentSize;\n      normal.z -= Math.sign(normal.z) * halfSegmentSize;\n      normal.normalize();\n      positions[i + 0] = box.x * Math.sign(position.x) + normal.x * radius;\n      positions[i + 1] = box.y * Math.sign(position.y) + normal.y * radius;\n      positions[i + 2] = box.z * Math.sign(position.z) + normal.z * radius;\n      normals[i + 0] = normal.x;\n      normals[i + 1] = normal.y;\n      normals[i + 2] = normal.z;\n      const side = Math.floor(i / faceTris);\n      switch (side) {\n        case 0:\n          faceDirVector.set(1, 0, 0);\n          uvs[j + 0] = getUv(faceDirVector, normal, \"z\", \"y\", radius, depth);\n          uvs[j + 1] = 1 - getUv(faceDirVector, normal, \"y\", \"z\", radius, height);\n          break;\n        case 1:\n          faceDirVector.set(-1, 0, 0);\n          uvs[j + 0] = 1 - getUv(faceDirVector, normal, \"z\", \"y\", radius, depth);\n          uvs[j + 1] = 1 - getUv(faceDirVector, normal, \"y\", \"z\", radius, height);\n          break;\n        case 2:\n          faceDirVector.set(0, 1, 0);\n          uvs[j + 0] = 1 - getUv(faceDirVector, normal, \"x\", \"z\", radius, width);\n          uvs[j + 1] = getUv(faceDirVector, normal, \"z\", \"x\", radius, depth);\n          break;\n        case 3:\n          faceDirVector.set(0, -1, 0);\n          uvs[j + 0] = 1 - getUv(faceDirVector, normal, \"x\", \"z\", radius, width);\n          uvs[j + 1] = 1 - getUv(faceDirVector, normal, \"z\", \"x\", radius, depth);\n          break;\n        case 4:\n          faceDirVector.set(0, 0, 1);\n          uvs[j + 0] = 1 - getUv(faceDirVector, normal, \"x\", \"y\", radius, width);\n          uvs[j + 1] = 1 - getUv(faceDirVector, normal, \"y\", \"x\", radius, height);\n          break;\n        case 5:\n          faceDirVector.set(0, 0, -1);\n          uvs[j + 0] = getUv(faceDirVector, normal, \"x\", \"y\", radius, width);\n          uvs[j + 1] = 1 - getUv(faceDirVector, normal, \"y\", \"x\", radius, height);\n          break;\n      }\n    }\n  }\n}\nexport { RoundedBoxGeometry };","map":{"version":3,"names":["tempNormal","Vector3","getUv","faceDirVector","normal","uvAxis","projectionAxis","radius","sideLength","totArcLength","Math","PI","centerLength","max","halfArc","copy","normalize","arcUvRatio","arcAngleRatio","angleTo","sign","lenUv","RoundedBoxGeometry","BoxGeometry","constructor","width","arguments","length","undefined","height","depth","segments","min","geometry2","toNonIndexed","index","attributes","position","uv","box","divideScalar","subScalar","positions","array","normals","uvs","faceTris","halfSegmentSize","i","j","fromArray","x","y","z","side","floor","set"],"sources":["D:\\Repos\\NIKE-DJANGO\\Jord\\l4fycy\\node_modules\\src\\geometries\\RoundedBoxGeometry.js"],"sourcesContent":["import { BoxGeometry, Vector3 } from 'three'\n\nconst tempNormal = new Vector3()\n\nfunction getUv(faceDirVector, normal, uvAxis, projectionAxis, radius, sideLength) {\n  const totArcLength = (2 * Math.PI * radius) / 4\n\n  // length of the planes between the arcs on each axis\n  const centerLength = Math.max(sideLength - 2 * radius, 0)\n  const halfArc = Math.PI / 4\n\n  // Get the vector projected onto the Y plane\n  tempNormal.copy(normal)\n  tempNormal[projectionAxis] = 0\n  tempNormal.normalize()\n\n  // total amount of UV space alloted to a single arc\n  const arcUvRatio = (0.5 * totArcLength) / (totArcLength + centerLength)\n\n  // the distance along one arc the point is at\n  const arcAngleRatio = 1.0 - tempNormal.angleTo(faceDirVector) / halfArc\n\n  if (Math.sign(tempNormal[uvAxis]) === 1) {\n    return arcAngleRatio * arcUvRatio\n  } else {\n    // total amount of UV space alloted to the plane between the arcs\n    const lenUv = centerLength / (totArcLength + centerLength)\n    return lenUv + arcUvRatio + arcUvRatio * (1.0 - arcAngleRatio)\n  }\n}\n\nclass RoundedBoxGeometry extends BoxGeometry {\n  constructor(width = 1, height = 1, depth = 1, segments = 2, radius = 0.1) {\n    // ensure segments is odd so we have a plane connecting the rounded corners\n    segments = segments * 2 + 1\n\n    // ensure radius isn't bigger than shortest side\n    radius = Math.min(width / 2, height / 2, depth / 2, radius)\n\n    super(1, 1, 1, segments, segments, segments)\n\n    // if we just have one segment we're the same as a regular box\n    if (segments === 1) return\n\n    const geometry2 = this.toNonIndexed()\n\n    this.index = null\n    this.attributes.position = geometry2.attributes.position\n    this.attributes.normal = geometry2.attributes.normal\n    this.attributes.uv = geometry2.attributes.uv\n\n    //\n\n    const position = new Vector3()\n    const normal = new Vector3()\n\n    const box = new Vector3(width, height, depth).divideScalar(2).subScalar(radius)\n\n    const positions = this.attributes.position.array\n    const normals = this.attributes.normal.array\n    const uvs = this.attributes.uv.array\n\n    const faceTris = positions.length / 6\n    const faceDirVector = new Vector3()\n    const halfSegmentSize = 0.5 / segments\n\n    for (let i = 0, j = 0; i < positions.length; i += 3, j += 2) {\n      position.fromArray(positions, i)\n      normal.copy(position)\n      normal.x -= Math.sign(normal.x) * halfSegmentSize\n      normal.y -= Math.sign(normal.y) * halfSegmentSize\n      normal.z -= Math.sign(normal.z) * halfSegmentSize\n      normal.normalize()\n\n      positions[i + 0] = box.x * Math.sign(position.x) + normal.x * radius\n      positions[i + 1] = box.y * Math.sign(position.y) + normal.y * radius\n      positions[i + 2] = box.z * Math.sign(position.z) + normal.z * radius\n\n      normals[i + 0] = normal.x\n      normals[i + 1] = normal.y\n      normals[i + 2] = normal.z\n\n      const side = Math.floor(i / faceTris)\n\n      switch (side) {\n        case 0: // right\n          // generate UVs along Z then Y\n          faceDirVector.set(1, 0, 0)\n          uvs[j + 0] = getUv(faceDirVector, normal, 'z', 'y', radius, depth)\n          uvs[j + 1] = 1.0 - getUv(faceDirVector, normal, 'y', 'z', radius, height)\n          break\n\n        case 1: // left\n          // generate UVs along Z then Y\n          faceDirVector.set(-1, 0, 0)\n          uvs[j + 0] = 1.0 - getUv(faceDirVector, normal, 'z', 'y', radius, depth)\n          uvs[j + 1] = 1.0 - getUv(faceDirVector, normal, 'y', 'z', radius, height)\n          break\n\n        case 2: // top\n          // generate UVs along X then Z\n          faceDirVector.set(0, 1, 0)\n          uvs[j + 0] = 1.0 - getUv(faceDirVector, normal, 'x', 'z', radius, width)\n          uvs[j + 1] = getUv(faceDirVector, normal, 'z', 'x', radius, depth)\n          break\n\n        case 3: // bottom\n          // generate UVs along X then Z\n          faceDirVector.set(0, -1, 0)\n          uvs[j + 0] = 1.0 - getUv(faceDirVector, normal, 'x', 'z', radius, width)\n          uvs[j + 1] = 1.0 - getUv(faceDirVector, normal, 'z', 'x', radius, depth)\n          break\n\n        case 4: // front\n          // generate UVs along X then Y\n          faceDirVector.set(0, 0, 1)\n          uvs[j + 0] = 1.0 - getUv(faceDirVector, normal, 'x', 'y', radius, width)\n          uvs[j + 1] = 1.0 - getUv(faceDirVector, normal, 'y', 'x', radius, height)\n          break\n\n        case 5: // back\n          // generate UVs along X then Y\n          faceDirVector.set(0, 0, -1)\n          uvs[j + 0] = getUv(faceDirVector, normal, 'x', 'y', radius, width)\n          uvs[j + 1] = 1.0 - getUv(faceDirVector, normal, 'y', 'x', radius, height)\n          break\n      }\n    }\n  }\n}\n\nexport { RoundedBoxGeometry }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}