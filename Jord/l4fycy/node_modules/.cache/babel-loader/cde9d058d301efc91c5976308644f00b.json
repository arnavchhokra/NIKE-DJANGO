{"ast":null,"code":"import _classCallCheck from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Matrix4, Vector3, Box3, DirectionalLight, MathUtils, ShaderChunk, Vector2 } from 'three';\nimport Frustum from './Frustum.js';\nimport Shader from './Shader.js';\n\nvar _cameraToLightMatrix = new Matrix4();\n\nvar _lightSpaceFrustum = new Frustum();\n\nvar _center = new Vector3();\n\nvar _bbox = new Box3();\n\nvar _uniformArray = [];\nvar _logArray = [];\n\nvar CSM = /*#__PURE__*/function () {\n  function CSM(data) {\n    _classCallCheck(this, CSM);\n\n    data = data || {};\n    this.camera = data.camera;\n    this.parent = data.parent;\n    this.cascades = data.cascades || 3;\n    this.maxFar = data.maxFar || 100000;\n    this.mode = data.mode || 'practical';\n    this.shadowMapSize = data.shadowMapSize || 2048;\n    this.shadowBias = data.shadowBias || 0.000001;\n    this.lightDirection = data.lightDirection || new Vector3(1, -1, 1).normalize();\n    this.lightIntensity = data.lightIntensity || 1;\n    this.lightNear = data.lightNear || 1;\n    this.lightFar = data.lightFar || 2000;\n    this.lightMargin = data.lightMargin || 200;\n    this.customSplitsCallback = data.customSplitsCallback;\n    this.fade = false;\n    this.mainFrustum = new Frustum();\n    this.frustums = [];\n    this.breaks = [];\n    this.lights = [];\n    this.shaders = new Map();\n    this.createLights();\n    this.updateFrustums();\n    this.injectInclude();\n  }\n\n  _createClass(CSM, [{\n    key: \"createLights\",\n    value: function createLights() {\n      for (var i = 0; i < this.cascades; i++) {\n        var light = new DirectionalLight(0xffffff, this.lightIntensity);\n        light.castShadow = true;\n        light.shadow.mapSize.width = this.shadowMapSize;\n        light.shadow.mapSize.height = this.shadowMapSize;\n        light.shadow.camera.near = this.lightNear;\n        light.shadow.camera.far = this.lightFar;\n        light.shadow.bias = this.shadowBias;\n        this.parent.add(light);\n        this.parent.add(light.target);\n        this.lights.push(light);\n      }\n    }\n  }, {\n    key: \"initCascades\",\n    value: function initCascades() {\n      var camera = this.camera;\n      camera.updateProjectionMatrix();\n      this.mainFrustum.setFromProjectionMatrix(camera.projectionMatrix, this.maxFar);\n      this.mainFrustum.split(this.breaks, this.frustums);\n    }\n  }, {\n    key: \"updateShadowBounds\",\n    value: function updateShadowBounds() {\n      var frustums = this.frustums;\n\n      for (var i = 0; i < frustums.length; i++) {\n        var light = this.lights[i];\n        var shadowCam = light.shadow.camera;\n        var frustum = this.frustums[i]; // Get the two points that represent that furthest points on the frustum assuming\n        // that's either the diagonal across the far plane or the diagonal across the whole\n        // frustum itself.\n\n        var nearVerts = frustum.vertices.near;\n        var farVerts = frustum.vertices.far;\n        var point1 = farVerts[0];\n        var point2 = void 0;\n\n        if (point1.distanceTo(farVerts[2]) > point1.distanceTo(nearVerts[2])) {\n          point2 = farVerts[2];\n        } else {\n          point2 = nearVerts[2];\n        }\n\n        var squaredBBWidth = point1.distanceTo(point2);\n\n        if (this.fade) {\n          // expand the shadow extents by the fade margin if fade is enabled.\n          var camera = this.camera;\n          var far = Math.max(camera.far, this.maxFar);\n          var linearDepth = frustum.vertices.far[0].z / (far - camera.near);\n          var margin = 0.25 * Math.pow(linearDepth, 2.0) * (far - camera.near);\n          squaredBBWidth += margin;\n        }\n\n        shadowCam.left = -squaredBBWidth / 2;\n        shadowCam.right = squaredBBWidth / 2;\n        shadowCam.top = squaredBBWidth / 2;\n        shadowCam.bottom = -squaredBBWidth / 2;\n        shadowCam.updateProjectionMatrix();\n      }\n    }\n  }, {\n    key: \"getBreaks\",\n    value: function getBreaks() {\n      var camera = this.camera;\n      var far = Math.min(camera.far, this.maxFar);\n      this.breaks.length = 0;\n\n      switch (this.mode) {\n        case 'uniform':\n          uniformSplit(this.cascades, camera.near, far, this.breaks);\n          break;\n\n        case 'logarithmic':\n          logarithmicSplit(this.cascades, camera.near, far, this.breaks);\n          break;\n\n        case 'practical':\n          practicalSplit(this.cascades, camera.near, far, 0.5, this.breaks);\n          break;\n\n        case 'custom':\n          if (this.customSplitsCallback === undefined) console.error('CSM: Custom split scheme callback not defined.');\n          this.customSplitsCallback(this.cascades, camera.near, far, this.breaks);\n          break;\n      }\n\n      function uniformSplit(amount, near, far, target) {\n        for (var i = 1; i < amount; i++) {\n          target.push((near + (far - near) * i / amount) / far);\n        }\n\n        target.push(1);\n      }\n\n      function logarithmicSplit(amount, near, far, target) {\n        for (var i = 1; i < amount; i++) {\n          target.push(near * Math.pow(far / near, i / amount) / far);\n        }\n\n        target.push(1);\n      }\n\n      function practicalSplit(amount, near, far, lambda, target) {\n        _uniformArray.length = 0;\n        _logArray.length = 0;\n        logarithmicSplit(amount, near, far, _logArray);\n        uniformSplit(amount, near, far, _uniformArray);\n\n        for (var i = 1; i < amount; i++) {\n          target.push(MathUtils.lerp(_uniformArray[i - 1], _logArray[i - 1], lambda));\n        }\n\n        target.push(1);\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var camera = this.camera;\n      var frustums = this.frustums;\n\n      for (var i = 0; i < frustums.length; i++) {\n        var light = this.lights[i];\n        var shadowCam = light.shadow.camera;\n        var texelWidth = (shadowCam.right - shadowCam.left) / this.shadowMapSize;\n        var texelHeight = (shadowCam.top - shadowCam.bottom) / this.shadowMapSize;\n        light.shadow.camera.updateMatrixWorld(true);\n\n        _cameraToLightMatrix.multiplyMatrices(light.shadow.camera.matrixWorldInverse, camera.matrixWorld);\n\n        frustums[i].toSpace(_cameraToLightMatrix, _lightSpaceFrustum);\n        var nearVerts = _lightSpaceFrustum.vertices.near;\n        var farVerts = _lightSpaceFrustum.vertices.far;\n\n        _bbox.makeEmpty();\n\n        for (var j = 0; j < 4; j++) {\n          _bbox.expandByPoint(nearVerts[j]);\n\n          _bbox.expandByPoint(farVerts[j]);\n        }\n\n        _bbox.getCenter(_center);\n\n        _center.z = _bbox.max.z + this.lightMargin;\n        _center.x = Math.floor(_center.x / texelWidth) * texelWidth;\n        _center.y = Math.floor(_center.y / texelHeight) * texelHeight;\n\n        _center.applyMatrix4(light.shadow.camera.matrixWorld);\n\n        light.position.copy(_center);\n        light.target.position.copy(_center);\n        light.target.position.x += this.lightDirection.x;\n        light.target.position.y += this.lightDirection.y;\n        light.target.position.z += this.lightDirection.z;\n      }\n    }\n  }, {\n    key: \"injectInclude\",\n    value: function injectInclude() {\n      ShaderChunk.lights_fragment_begin = Shader.lights_fragment_begin;\n      ShaderChunk.lights_pars_begin = Shader.lights_pars_begin;\n    }\n  }, {\n    key: \"setupMaterial\",\n    value: function setupMaterial(material) {\n      material.defines = material.defines || {};\n      material.defines.USE_CSM = 1;\n      material.defines.CSM_CASCADES = this.cascades;\n\n      if (this.fade) {\n        material.defines.CSM_FADE = '';\n      }\n\n      var breaksVec2 = [];\n      var scope = this;\n      var shaders = this.shaders;\n\n      material.onBeforeCompile = function (shader) {\n        var far = Math.min(scope.camera.far, scope.maxFar);\n        scope.getExtendedBreaks(breaksVec2);\n        shader.uniforms.CSM_cascades = {\n          value: breaksVec2\n        };\n        shader.uniforms.cameraNear = {\n          value: scope.camera.near\n        };\n        shader.uniforms.shadowFar = {\n          value: far\n        };\n        shaders.set(material, shader);\n      };\n\n      shaders.set(material, null);\n    }\n  }, {\n    key: \"updateUniforms\",\n    value: function updateUniforms() {\n      var far = Math.min(this.camera.far, this.maxFar);\n      var shaders = this.shaders;\n      shaders.forEach(function (shader, material) {\n        if (shader !== null) {\n          var uniforms = shader.uniforms;\n          this.getExtendedBreaks(uniforms.CSM_cascades.value);\n          uniforms.cameraNear.value = this.camera.near;\n          uniforms.shadowFar.value = far;\n        }\n\n        if (!this.fade && 'CSM_FADE' in material.defines) {\n          delete material.defines.CSM_FADE;\n          material.needsUpdate = true;\n        } else if (this.fade && !('CSM_FADE' in material.defines)) {\n          material.defines.CSM_FADE = '';\n          material.needsUpdate = true;\n        }\n      }, this);\n    }\n  }, {\n    key: \"getExtendedBreaks\",\n    value: function getExtendedBreaks(target) {\n      while (target.length < this.breaks.length) {\n        target.push(new Vector2());\n      }\n\n      target.length = this.breaks.length;\n\n      for (var i = 0; i < this.cascades; i++) {\n        var amount = this.breaks[i];\n        var prev = this.breaks[i - 1] || 0;\n        target[i].x = prev;\n        target[i].y = amount;\n      }\n    }\n  }, {\n    key: \"updateFrustums\",\n    value: function updateFrustums() {\n      this.getBreaks();\n      this.initCascades();\n      this.updateShadowBounds();\n      this.updateUniforms();\n    }\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      for (var i = 0; i < this.lights.length; i++) {\n        this.parent.remove(this.lights[i]);\n      }\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      var shaders = this.shaders;\n      shaders.forEach(function (shader, material) {\n        delete material.onBeforeCompile;\n        delete material.defines.USE_CSM;\n        delete material.defines.CSM_CASCADES;\n        delete material.defines.CSM_FADE;\n\n        if (shader !== null) {\n          delete shader.uniforms.CSM_cascades;\n          delete shader.uniforms.cameraNear;\n          delete shader.uniforms.shadowFar;\n        }\n\n        material.needsUpdate = true;\n      });\n      shaders.clear();\n    }\n  }]);\n\n  return CSM;\n}();\n\nexport { CSM };","map":{"version":3,"names":["Matrix4","Vector3","Box3","DirectionalLight","MathUtils","ShaderChunk","Vector2","Frustum","Shader","_cameraToLightMatrix","_lightSpaceFrustum","_center","_bbox","_uniformArray","_logArray","CSM","data","camera","parent","cascades","maxFar","mode","shadowMapSize","shadowBias","lightDirection","normalize","lightIntensity","lightNear","lightFar","lightMargin","customSplitsCallback","fade","mainFrustum","frustums","breaks","lights","shaders","Map","createLights","updateFrustums","injectInclude","i","light","castShadow","shadow","mapSize","width","height","near","far","bias","add","target","push","updateProjectionMatrix","setFromProjectionMatrix","projectionMatrix","split","length","shadowCam","frustum","nearVerts","vertices","farVerts","point1","point2","distanceTo","squaredBBWidth","Math","max","linearDepth","z","margin","pow","left","right","top","bottom","min","uniformSplit","logarithmicSplit","practicalSplit","undefined","console","error","amount","lambda","lerp","texelWidth","texelHeight","updateMatrixWorld","multiplyMatrices","matrixWorldInverse","matrixWorld","toSpace","makeEmpty","j","expandByPoint","getCenter","x","floor","y","applyMatrix4","position","copy","lights_fragment_begin","lights_pars_begin","material","defines","USE_CSM","CSM_CASCADES","CSM_FADE","breaksVec2","scope","onBeforeCompile","shader","getExtendedBreaks","uniforms","CSM_cascades","value","cameraNear","shadowFar","set","forEach","needsUpdate","prev","getBreaks","initCascades","updateShadowBounds","updateUniforms","remove","clear"],"sources":["D:/Jord/l4fycy/node_modules/three-stdlib/csm/CSM.js"],"sourcesContent":["import { Matrix4, Vector3, Box3, DirectionalLight, MathUtils, ShaderChunk, Vector2 } from 'three';\nimport Frustum from './Frustum.js';\nimport Shader from './Shader.js';\n\nconst _cameraToLightMatrix = new Matrix4();\n\nconst _lightSpaceFrustum = new Frustum();\n\nconst _center = new Vector3();\n\nconst _bbox = new Box3();\n\nconst _uniformArray = [];\nconst _logArray = [];\nclass CSM {\n  constructor(data) {\n    data = data || {};\n    this.camera = data.camera;\n    this.parent = data.parent;\n    this.cascades = data.cascades || 3;\n    this.maxFar = data.maxFar || 100000;\n    this.mode = data.mode || 'practical';\n    this.shadowMapSize = data.shadowMapSize || 2048;\n    this.shadowBias = data.shadowBias || 0.000001;\n    this.lightDirection = data.lightDirection || new Vector3(1, -1, 1).normalize();\n    this.lightIntensity = data.lightIntensity || 1;\n    this.lightNear = data.lightNear || 1;\n    this.lightFar = data.lightFar || 2000;\n    this.lightMargin = data.lightMargin || 200;\n    this.customSplitsCallback = data.customSplitsCallback;\n    this.fade = false;\n    this.mainFrustum = new Frustum();\n    this.frustums = [];\n    this.breaks = [];\n    this.lights = [];\n    this.shaders = new Map();\n    this.createLights();\n    this.updateFrustums();\n    this.injectInclude();\n  }\n\n  createLights() {\n    for (let i = 0; i < this.cascades; i++) {\n      const light = new DirectionalLight(0xffffff, this.lightIntensity);\n      light.castShadow = true;\n      light.shadow.mapSize.width = this.shadowMapSize;\n      light.shadow.mapSize.height = this.shadowMapSize;\n      light.shadow.camera.near = this.lightNear;\n      light.shadow.camera.far = this.lightFar;\n      light.shadow.bias = this.shadowBias;\n      this.parent.add(light);\n      this.parent.add(light.target);\n      this.lights.push(light);\n    }\n  }\n\n  initCascades() {\n    const camera = this.camera;\n    camera.updateProjectionMatrix();\n    this.mainFrustum.setFromProjectionMatrix(camera.projectionMatrix, this.maxFar);\n    this.mainFrustum.split(this.breaks, this.frustums);\n  }\n\n  updateShadowBounds() {\n    const frustums = this.frustums;\n\n    for (let i = 0; i < frustums.length; i++) {\n      const light = this.lights[i];\n      const shadowCam = light.shadow.camera;\n      const frustum = this.frustums[i]; // Get the two points that represent that furthest points on the frustum assuming\n      // that's either the diagonal across the far plane or the diagonal across the whole\n      // frustum itself.\n\n      const nearVerts = frustum.vertices.near;\n      const farVerts = frustum.vertices.far;\n      const point1 = farVerts[0];\n      let point2;\n\n      if (point1.distanceTo(farVerts[2]) > point1.distanceTo(nearVerts[2])) {\n        point2 = farVerts[2];\n      } else {\n        point2 = nearVerts[2];\n      }\n\n      let squaredBBWidth = point1.distanceTo(point2);\n\n      if (this.fade) {\n        // expand the shadow extents by the fade margin if fade is enabled.\n        const camera = this.camera;\n        const far = Math.max(camera.far, this.maxFar);\n        const linearDepth = frustum.vertices.far[0].z / (far - camera.near);\n        const margin = 0.25 * Math.pow(linearDepth, 2.0) * (far - camera.near);\n        squaredBBWidth += margin;\n      }\n\n      shadowCam.left = -squaredBBWidth / 2;\n      shadowCam.right = squaredBBWidth / 2;\n      shadowCam.top = squaredBBWidth / 2;\n      shadowCam.bottom = -squaredBBWidth / 2;\n      shadowCam.updateProjectionMatrix();\n    }\n  }\n\n  getBreaks() {\n    const camera = this.camera;\n    const far = Math.min(camera.far, this.maxFar);\n    this.breaks.length = 0;\n\n    switch (this.mode) {\n      case 'uniform':\n        uniformSplit(this.cascades, camera.near, far, this.breaks);\n        break;\n\n      case 'logarithmic':\n        logarithmicSplit(this.cascades, camera.near, far, this.breaks);\n        break;\n\n      case 'practical':\n        practicalSplit(this.cascades, camera.near, far, 0.5, this.breaks);\n        break;\n\n      case 'custom':\n        if (this.customSplitsCallback === undefined) console.error('CSM: Custom split scheme callback not defined.');\n        this.customSplitsCallback(this.cascades, camera.near, far, this.breaks);\n        break;\n    }\n\n    function uniformSplit(amount, near, far, target) {\n      for (let i = 1; i < amount; i++) {\n        target.push((near + (far - near) * i / amount) / far);\n      }\n\n      target.push(1);\n    }\n\n    function logarithmicSplit(amount, near, far, target) {\n      for (let i = 1; i < amount; i++) {\n        target.push(near * (far / near) ** (i / amount) / far);\n      }\n\n      target.push(1);\n    }\n\n    function practicalSplit(amount, near, far, lambda, target) {\n      _uniformArray.length = 0;\n      _logArray.length = 0;\n      logarithmicSplit(amount, near, far, _logArray);\n      uniformSplit(amount, near, far, _uniformArray);\n\n      for (let i = 1; i < amount; i++) {\n        target.push(MathUtils.lerp(_uniformArray[i - 1], _logArray[i - 1], lambda));\n      }\n\n      target.push(1);\n    }\n  }\n\n  update() {\n    const camera = this.camera;\n    const frustums = this.frustums;\n\n    for (let i = 0; i < frustums.length; i++) {\n      const light = this.lights[i];\n      const shadowCam = light.shadow.camera;\n      const texelWidth = (shadowCam.right - shadowCam.left) / this.shadowMapSize;\n      const texelHeight = (shadowCam.top - shadowCam.bottom) / this.shadowMapSize;\n      light.shadow.camera.updateMatrixWorld(true);\n\n      _cameraToLightMatrix.multiplyMatrices(light.shadow.camera.matrixWorldInverse, camera.matrixWorld);\n\n      frustums[i].toSpace(_cameraToLightMatrix, _lightSpaceFrustum);\n      const nearVerts = _lightSpaceFrustum.vertices.near;\n      const farVerts = _lightSpaceFrustum.vertices.far;\n\n      _bbox.makeEmpty();\n\n      for (let j = 0; j < 4; j++) {\n        _bbox.expandByPoint(nearVerts[j]);\n\n        _bbox.expandByPoint(farVerts[j]);\n      }\n\n      _bbox.getCenter(_center);\n\n      _center.z = _bbox.max.z + this.lightMargin;\n      _center.x = Math.floor(_center.x / texelWidth) * texelWidth;\n      _center.y = Math.floor(_center.y / texelHeight) * texelHeight;\n\n      _center.applyMatrix4(light.shadow.camera.matrixWorld);\n\n      light.position.copy(_center);\n      light.target.position.copy(_center);\n      light.target.position.x += this.lightDirection.x;\n      light.target.position.y += this.lightDirection.y;\n      light.target.position.z += this.lightDirection.z;\n    }\n  }\n\n  injectInclude() {\n    ShaderChunk.lights_fragment_begin = Shader.lights_fragment_begin;\n    ShaderChunk.lights_pars_begin = Shader.lights_pars_begin;\n  }\n\n  setupMaterial(material) {\n    material.defines = material.defines || {};\n    material.defines.USE_CSM = 1;\n    material.defines.CSM_CASCADES = this.cascades;\n\n    if (this.fade) {\n      material.defines.CSM_FADE = '';\n    }\n\n    const breaksVec2 = [];\n    const scope = this;\n    const shaders = this.shaders;\n\n    material.onBeforeCompile = shader => {\n      const far = Math.min(scope.camera.far, scope.maxFar);\n      scope.getExtendedBreaks(breaksVec2);\n      shader.uniforms.CSM_cascades = {\n        value: breaksVec2\n      };\n      shader.uniforms.cameraNear = {\n        value: scope.camera.near\n      };\n      shader.uniforms.shadowFar = {\n        value: far\n      };\n      shaders.set(material, shader);\n    };\n\n    shaders.set(material, null);\n  }\n\n  updateUniforms() {\n    const far = Math.min(this.camera.far, this.maxFar);\n    const shaders = this.shaders;\n    shaders.forEach(function (shader, material) {\n      if (shader !== null) {\n        const uniforms = shader.uniforms;\n        this.getExtendedBreaks(uniforms.CSM_cascades.value);\n        uniforms.cameraNear.value = this.camera.near;\n        uniforms.shadowFar.value = far;\n      }\n\n      if (!this.fade && 'CSM_FADE' in material.defines) {\n        delete material.defines.CSM_FADE;\n        material.needsUpdate = true;\n      } else if (this.fade && !('CSM_FADE' in material.defines)) {\n        material.defines.CSM_FADE = '';\n        material.needsUpdate = true;\n      }\n    }, this);\n  }\n\n  getExtendedBreaks(target) {\n    while (target.length < this.breaks.length) {\n      target.push(new Vector2());\n    }\n\n    target.length = this.breaks.length;\n\n    for (let i = 0; i < this.cascades; i++) {\n      const amount = this.breaks[i];\n      const prev = this.breaks[i - 1] || 0;\n      target[i].x = prev;\n      target[i].y = amount;\n    }\n  }\n\n  updateFrustums() {\n    this.getBreaks();\n    this.initCascades();\n    this.updateShadowBounds();\n    this.updateUniforms();\n  }\n\n  remove() {\n    for (let i = 0; i < this.lights.length; i++) {\n      this.parent.remove(this.lights[i]);\n    }\n  }\n\n  dispose() {\n    const shaders = this.shaders;\n    shaders.forEach((shader, material) => {\n      delete material.onBeforeCompile;\n      delete material.defines.USE_CSM;\n      delete material.defines.CSM_CASCADES;\n      delete material.defines.CSM_FADE;\n\n      if (shader !== null) {\n        delete shader.uniforms.CSM_cascades;\n        delete shader.uniforms.cameraNear;\n        delete shader.uniforms.shadowFar;\n      }\n\n      material.needsUpdate = true;\n    });\n    shaders.clear();\n  }\n\n}\n\nexport { CSM };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}