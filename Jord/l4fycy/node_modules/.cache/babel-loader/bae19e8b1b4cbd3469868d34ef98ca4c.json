{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GastRecorder = void 0;\n\nvar last_1 = __importDefault(require(\"lodash/last\"));\n\nvar isArray_1 = __importDefault(require(\"lodash/isArray\"));\n\nvar some_1 = __importDefault(require(\"lodash/some\"));\n\nvar forEach_1 = __importDefault(require(\"lodash/forEach\"));\n\nvar isFunction_1 = __importDefault(require(\"lodash/isFunction\"));\n\nvar has_1 = __importDefault(require(\"lodash/has\"));\n\nvar gast_1 = require(\"@chevrotain/gast\");\n\nvar lexer_public_1 = require(\"../../../scan/lexer_public\");\n\nvar tokens_1 = require(\"../../../scan/tokens\");\n\nvar tokens_public_1 = require(\"../../../scan/tokens_public\");\n\nvar parser_1 = require(\"../parser\");\n\nvar keys_1 = require(\"../../grammar/keys\");\n\nvar RECORDING_NULL_OBJECT = {\n  description: \"This Object indicates the Parser is during Recording Phase\"\n};\nObject.freeze(RECORDING_NULL_OBJECT);\nvar HANDLE_SEPARATOR = true;\nvar MAX_METHOD_IDX = Math.pow(2, keys_1.BITS_FOR_OCCURRENCE_IDX) - 1;\nvar RFT = (0, tokens_public_1.createToken)({\n  name: \"RECORDING_PHASE_TOKEN\",\n  pattern: lexer_public_1.Lexer.NA\n});\n(0, tokens_1.augmentTokenTypes)([RFT]);\nvar RECORDING_PHASE_TOKEN = (0, tokens_public_1.createTokenInstance)(RFT, \"This IToken indicates the Parser is in Recording Phase\\n\\t\" + \"\" + \"See: https://chevrotain.io/docs/guide/internals.html#grammar-recording for details\", // Using \"-1\" instead of NaN (as in EOF) because an actual number is less likely to\n// cause errors if the output of LA or CONSUME would be (incorrectly) used during the recording phase.\n-1, -1, -1, -1, -1, -1);\nObject.freeze(RECORDING_PHASE_TOKEN);\nvar RECORDING_PHASE_CSTNODE = {\n  name: \"This CSTNode indicates the Parser is in Recording Phase\\n\\t\" + \"See: https://chevrotain.io/docs/guide/internals.html#grammar-recording for details\",\n  children: {}\n};\n/**\r\n * This trait handles the creation of the GAST structure for Chevrotain Grammars\r\n */\n\nvar GastRecorder =\n/** @class */\nfunction () {\n  function GastRecorder() {}\n\n  GastRecorder.prototype.initGastRecorder = function (config) {\n    this.recordingProdStack = [];\n    this.RECORDING_PHASE = false;\n  };\n\n  GastRecorder.prototype.enableRecording = function () {\n    var _this = this;\n\n    this.RECORDING_PHASE = true;\n    this.TRACE_INIT(\"Enable Recording\", function () {\n      var _loop_1 = function _loop_1(i) {\n        var idx = i > 0 ? i : \"\";\n\n        _this[\"CONSUME\".concat(idx)] = function (arg1, arg2) {\n          return this.consumeInternalRecord(arg1, i, arg2);\n        };\n\n        _this[\"SUBRULE\".concat(idx)] = function (arg1, arg2) {\n          return this.subruleInternalRecord(arg1, i, arg2);\n        };\n\n        _this[\"OPTION\".concat(idx)] = function (arg1) {\n          return this.optionInternalRecord(arg1, i);\n        };\n\n        _this[\"OR\".concat(idx)] = function (arg1) {\n          return this.orInternalRecord(arg1, i);\n        };\n\n        _this[\"MANY\".concat(idx)] = function (arg1) {\n          this.manyInternalRecord(i, arg1);\n        };\n\n        _this[\"MANY_SEP\".concat(idx)] = function (arg1) {\n          this.manySepFirstInternalRecord(i, arg1);\n        };\n\n        _this[\"AT_LEAST_ONE\".concat(idx)] = function (arg1) {\n          this.atLeastOneInternalRecord(i, arg1);\n        };\n\n        _this[\"AT_LEAST_ONE_SEP\".concat(idx)] = function (arg1) {\n          this.atLeastOneSepFirstInternalRecord(i, arg1);\n        };\n      };\n      /**\r\n       * Warning Dark Voodoo Magic upcoming!\r\n       * We are \"replacing\" the public parsing DSL methods API\r\n       * With **new** alternative implementations on the Parser **instance**\r\n       *\r\n       * So far this is the only way I've found to avoid performance regressions during parsing time.\r\n       * - Approx 30% performance regression was measured on Chrome 75 Canary when attempting to replace the \"internal\"\r\n       *   implementations directly instead.\r\n       */\n\n\n      for (var i = 0; i < 10; i++) {\n        _loop_1(i);\n      } // DSL methods with the idx(suffix) as an argument\n\n\n      _this[\"consume\"] = function (idx, arg1, arg2) {\n        return this.consumeInternalRecord(arg1, idx, arg2);\n      };\n\n      _this[\"subrule\"] = function (idx, arg1, arg2) {\n        return this.subruleInternalRecord(arg1, idx, arg2);\n      };\n\n      _this[\"option\"] = function (idx, arg1) {\n        return this.optionInternalRecord(arg1, idx);\n      };\n\n      _this[\"or\"] = function (idx, arg1) {\n        return this.orInternalRecord(arg1, idx);\n      };\n\n      _this[\"many\"] = function (idx, arg1) {\n        this.manyInternalRecord(idx, arg1);\n      };\n\n      _this[\"atLeastOne\"] = function (idx, arg1) {\n        this.atLeastOneInternalRecord(idx, arg1);\n      };\n\n      _this.ACTION = _this.ACTION_RECORD;\n      _this.BACKTRACK = _this.BACKTRACK_RECORD;\n      _this.LA = _this.LA_RECORD;\n    });\n  };\n\n  GastRecorder.prototype.disableRecording = function () {\n    var _this = this;\n\n    this.RECORDING_PHASE = false; // By deleting these **instance** properties, any future invocation\n    // will be deferred to the original methods on the **prototype** object\n    // This seems to get rid of any incorrect optimizations that V8 may\n    // do during the recording phase.\n\n    this.TRACE_INIT(\"Deleting Recording methods\", function () {\n      var that = _this;\n\n      for (var i = 0; i < 10; i++) {\n        var idx = i > 0 ? i : \"\";\n        delete that[\"CONSUME\".concat(idx)];\n        delete that[\"SUBRULE\".concat(idx)];\n        delete that[\"OPTION\".concat(idx)];\n        delete that[\"OR\".concat(idx)];\n        delete that[\"MANY\".concat(idx)];\n        delete that[\"MANY_SEP\".concat(idx)];\n        delete that[\"AT_LEAST_ONE\".concat(idx)];\n        delete that[\"AT_LEAST_ONE_SEP\".concat(idx)];\n      }\n\n      delete that[\"consume\"];\n      delete that[\"subrule\"];\n      delete that[\"option\"];\n      delete that[\"or\"];\n      delete that[\"many\"];\n      delete that[\"atLeastOne\"];\n      delete that.ACTION;\n      delete that.BACKTRACK;\n      delete that.LA;\n    });\n  }; //   Parser methods are called inside an ACTION?\n  //   Maybe try/catch/finally on ACTIONS while disabling the recorders state changes?\n  // @ts-expect-error -- noop place holder\n\n\n  GastRecorder.prototype.ACTION_RECORD = function (impl) {// NO-OP during recording\n  }; // Executing backtracking logic will break our recording logic assumptions\n\n\n  GastRecorder.prototype.BACKTRACK_RECORD = function (grammarRule, args) {\n    return function () {\n      return true;\n    };\n  }; // LA is part of the official API and may be used for custom lookahead logic\n  // by end users who may forget to wrap it in ACTION or inside a GATE\n\n\n  GastRecorder.prototype.LA_RECORD = function (howMuch) {\n    // We cannot use the RECORD_PHASE_TOKEN here because someone may depend\n    // On LA return EOF at the end of the input so an infinite loop may occur.\n    return parser_1.END_OF_FILE;\n  };\n\n  GastRecorder.prototype.topLevelRuleRecord = function (name, def) {\n    try {\n      var newTopLevelRule = new gast_1.Rule({\n        definition: [],\n        name: name\n      });\n      newTopLevelRule.name = name;\n      this.recordingProdStack.push(newTopLevelRule);\n      def.call(this);\n      this.recordingProdStack.pop();\n      return newTopLevelRule;\n    } catch (originalError) {\n      if (originalError.KNOWN_RECORDER_ERROR !== true) {\n        try {\n          originalError.message = originalError.message + '\\n\\t This error was thrown during the \"grammar recording phase\" For more info see:\\n\\t' + \"https://chevrotain.io/docs/guide/internals.html#grammar-recording\";\n        } catch (mutabilityError) {\n          // We may not be able to modify the original error object\n          throw originalError;\n        }\n      }\n\n      throw originalError;\n    }\n  }; // Implementation of parsing DSL\n\n\n  GastRecorder.prototype.optionInternalRecord = function (actionORMethodDef, occurrence) {\n    return recordProd.call(this, gast_1.Option, actionORMethodDef, occurrence);\n  };\n\n  GastRecorder.prototype.atLeastOneInternalRecord = function (occurrence, actionORMethodDef) {\n    recordProd.call(this, gast_1.RepetitionMandatory, actionORMethodDef, occurrence);\n  };\n\n  GastRecorder.prototype.atLeastOneSepFirstInternalRecord = function (occurrence, options) {\n    recordProd.call(this, gast_1.RepetitionMandatoryWithSeparator, options, occurrence, HANDLE_SEPARATOR);\n  };\n\n  GastRecorder.prototype.manyInternalRecord = function (occurrence, actionORMethodDef) {\n    recordProd.call(this, gast_1.Repetition, actionORMethodDef, occurrence);\n  };\n\n  GastRecorder.prototype.manySepFirstInternalRecord = function (occurrence, options) {\n    recordProd.call(this, gast_1.RepetitionWithSeparator, options, occurrence, HANDLE_SEPARATOR);\n  };\n\n  GastRecorder.prototype.orInternalRecord = function (altsOrOpts, occurrence) {\n    return recordOrProd.call(this, altsOrOpts, occurrence);\n  };\n\n  GastRecorder.prototype.subruleInternalRecord = function (ruleToCall, occurrence, options) {\n    assertMethodIdxIsValid(occurrence);\n\n    if (!ruleToCall || (0, has_1.default)(ruleToCall, \"ruleName\") === false) {\n      var error = new Error(\"<SUBRULE\".concat(getIdxSuffix(occurrence), \"> argument is invalid\") + \" expecting a Parser method reference but got: <\".concat(JSON.stringify(ruleToCall), \">\") + \"\\n inside top level rule: <\".concat(this.recordingProdStack[0].name, \">\"));\n      error.KNOWN_RECORDER_ERROR = true;\n      throw error;\n    }\n\n    var prevProd = (0, last_1.default)(this.recordingProdStack);\n    var ruleName = ruleToCall.ruleName;\n    var newNoneTerminal = new gast_1.NonTerminal({\n      idx: occurrence,\n      nonTerminalName: ruleName,\n      label: options === null || options === void 0 ? void 0 : options.LABEL,\n      // The resolving of the `referencedRule` property will be done once all the Rule's GASTs have been created\n      referencedRule: undefined\n    });\n    prevProd.definition.push(newNoneTerminal);\n    return this.outputCst ? RECORDING_PHASE_CSTNODE : RECORDING_NULL_OBJECT;\n  };\n\n  GastRecorder.prototype.consumeInternalRecord = function (tokType, occurrence, options) {\n    assertMethodIdxIsValid(occurrence);\n\n    if (!(0, tokens_1.hasShortKeyProperty)(tokType)) {\n      var error = new Error(\"<CONSUME\".concat(getIdxSuffix(occurrence), \"> argument is invalid\") + \" expecting a TokenType reference but got: <\".concat(JSON.stringify(tokType), \">\") + \"\\n inside top level rule: <\".concat(this.recordingProdStack[0].name, \">\"));\n      error.KNOWN_RECORDER_ERROR = true;\n      throw error;\n    }\n\n    var prevProd = (0, last_1.default)(this.recordingProdStack);\n    var newNoneTerminal = new gast_1.Terminal({\n      idx: occurrence,\n      terminalType: tokType,\n      label: options === null || options === void 0 ? void 0 : options.LABEL\n    });\n    prevProd.definition.push(newNoneTerminal);\n    return RECORDING_PHASE_TOKEN;\n  };\n\n  return GastRecorder;\n}();\n\nexports.GastRecorder = GastRecorder;\n\nfunction recordProd(prodConstructor, mainProdArg, occurrence, handleSep) {\n  if (handleSep === void 0) {\n    handleSep = false;\n  }\n\n  assertMethodIdxIsValid(occurrence);\n  var prevProd = (0, last_1.default)(this.recordingProdStack);\n  var grammarAction = (0, isFunction_1.default)(mainProdArg) ? mainProdArg : mainProdArg.DEF;\n  var newProd = new prodConstructor({\n    definition: [],\n    idx: occurrence\n  });\n\n  if (handleSep) {\n    newProd.separator = mainProdArg.SEP;\n  }\n\n  if ((0, has_1.default)(mainProdArg, \"MAX_LOOKAHEAD\")) {\n    newProd.maxLookahead = mainProdArg.MAX_LOOKAHEAD;\n  }\n\n  this.recordingProdStack.push(newProd);\n  grammarAction.call(this);\n  prevProd.definition.push(newProd);\n  this.recordingProdStack.pop();\n  return RECORDING_NULL_OBJECT;\n}\n\nfunction recordOrProd(mainProdArg, occurrence) {\n  var _this = this;\n\n  assertMethodIdxIsValid(occurrence);\n  var prevProd = (0, last_1.default)(this.recordingProdStack); // Only an array of alternatives\n\n  var hasOptions = (0, isArray_1.default)(mainProdArg) === false;\n  var alts = hasOptions === false ? mainProdArg : mainProdArg.DEF;\n  var newOrProd = new gast_1.Alternation({\n    definition: [],\n    idx: occurrence,\n    ignoreAmbiguities: hasOptions && mainProdArg.IGNORE_AMBIGUITIES === true\n  });\n\n  if ((0, has_1.default)(mainProdArg, \"MAX_LOOKAHEAD\")) {\n    newOrProd.maxLookahead = mainProdArg.MAX_LOOKAHEAD;\n  }\n\n  var hasPredicates = (0, some_1.default)(alts, function (currAlt) {\n    return (0, isFunction_1.default)(currAlt.GATE);\n  });\n  newOrProd.hasPredicates = hasPredicates;\n  prevProd.definition.push(newOrProd);\n  (0, forEach_1.default)(alts, function (currAlt) {\n    var currAltFlat = new gast_1.Alternative({\n      definition: []\n    });\n    newOrProd.definition.push(currAltFlat);\n\n    if ((0, has_1.default)(currAlt, \"IGNORE_AMBIGUITIES\")) {\n      currAltFlat.ignoreAmbiguities = currAlt.IGNORE_AMBIGUITIES; // assumes end user provides the correct config value/type\n    } // **implicit** ignoreAmbiguities due to usage of gate\n    else if ((0, has_1.default)(currAlt, \"GATE\")) {\n      currAltFlat.ignoreAmbiguities = true;\n    }\n\n    _this.recordingProdStack.push(currAltFlat);\n\n    currAlt.ALT.call(_this);\n\n    _this.recordingProdStack.pop();\n  });\n  return RECORDING_NULL_OBJECT;\n}\n\nfunction getIdxSuffix(idx) {\n  return idx === 0 ? \"\" : \"\".concat(idx);\n}\n\nfunction assertMethodIdxIsValid(idx) {\n  if (idx < 0 || idx > MAX_METHOD_IDX) {\n    var error = new Error( // The stack trace will contain all the needed details\n    \"Invalid DSL Method idx value: <\".concat(idx, \">\\n\\t\") + \"Idx value must be a none negative value smaller than \".concat(MAX_METHOD_IDX + 1));\n    error.KNOWN_RECORDER_ERROR = true;\n    throw error;\n  }\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;AAgBA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AAYA;;AACA;;AACA;;AACA;;AACA;;AAIA,IAAMA,qBAAqB,GAAG;EAC5BC,WAAW,EAAE;AADe,CAA9B;AAGAC,MAAM,CAACC,MAAP,CAAcH,qBAAd;AAEA,IAAMI,gBAAgB,GAAG,IAAzB;AACA,IAAMC,cAAc,GAAGC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYC,8BAAZ,IAAuC,CAA9D;AAEA,IAAMC,GAAG,GAAG,iCAAY;EAAEC,IAAI,EAAE,uBAAR;EAAiCC,OAAO,EAAEC,qBAAMC;AAAhD,CAAZ,CAAZ;AACA,gCAAkB,CAACJ,GAAD,CAAlB;AACA,IAAMK,qBAAqB,GAAG,yCAC5BL,GAD4B,EAE5B,+DACE,EADF,GAEE,oFAJ0B,EAK5B;AACA;AACA,CAAC,CAP2B,EAQ5B,CAAC,CAR2B,EAS5B,CAAC,CAT2B,EAU5B,CAAC,CAV2B,EAW5B,CAAC,CAX2B,EAY5B,CAAC,CAZ2B,CAA9B;AAcAP,MAAM,CAACC,MAAP,CAAcW,qBAAd;AAEA,IAAMC,uBAAuB,GAAY;EACvCL,IAAI,EACF,gEACA,oFAHqC;EAIvCM,QAAQ,EAAE;AAJ6B,CAAzC;AAOA;;;;AAGA;AAAA;AAAA;EAAA,yBA2RC;;EAvRCC,oDAAsCC,MAAtC,EAA2D;IACzD,KAAKC,kBAAL,GAA0B,EAA1B;IACA,KAAKC,eAAL,GAAuB,KAAvB;EACD,CAHD;;EAKAH;IAAA;;IACE,KAAKG,eAAL,GAAuB,IAAvB;IAEA,KAAKC,UAAL,CAAgB,kBAAhB,EAAoC;qCAUzBC,GAAC;QACR,IAAMC,GAAG,GAAGD,CAAC,GAAG,CAAJ,GAAQA,CAAR,GAAY,EAAxB;;QACAE,KAAI,CAAC,iBAAUD,GAAV,CAAD,CAAJ,GAAqC,UAAUE,IAAV,EAAgBC,IAAhB,EAAoB;UACvD,OAAO,KAAKC,qBAAL,CAA2BF,IAA3B,EAAiCH,CAAjC,EAAoCI,IAApC,CAAP;QACD,CAFD;;QAGAF,KAAI,CAAC,iBAAUD,GAAV,CAAD,CAAJ,GAAqC,UAAUE,IAAV,EAAgBC,IAAhB,EAAoB;UACvD,OAAO,KAAKE,qBAAL,CAA2BH,IAA3B,EAAiCH,CAAjC,EAAoCI,IAApC,CAAP;QACD,CAFD;;QAGAF,KAAI,CAAC,gBAASD,GAAT,CAAD,CAAJ,GAAmC,UAAUE,IAAV,EAAc;UAC/C,OAAO,KAAKI,oBAAL,CAA0BJ,IAA1B,EAAgCH,CAAhC,CAAP;QACD,CAFD;;QAGAE,KAAI,CAAC,YAAKD,GAAL,CAAD,CAAJ,GAA2B,UAAUE,IAAV,EAAc;UACvC,OAAO,KAAKK,gBAAL,CAAsBL,IAAtB,EAA4BH,CAA5B,CAAP;QACD,CAFD;;QAGAE,KAAI,CAAC,cAAOD,GAAP,CAAD,CAAJ,GAA+B,UAAUE,IAAV,EAAc;UAC3C,KAAKM,kBAAL,CAAwBT,CAAxB,EAA2BG,IAA3B;QACD,CAFD;;QAGAD,KAAI,CAAC,kBAAWD,GAAX,CAAD,CAAJ,GAAuC,UAAUE,IAAV,EAAc;UACnD,KAAKO,0BAAL,CAAgCV,CAAhC,EAAmCG,IAAnC;QACD,CAFD;;QAGAD,KAAI,CAAC,sBAAeD,GAAf,CAAD,CAAJ,GAA+C,UAAUE,IAAV,EAAc;UAC3D,KAAKQ,wBAAL,CAA8BX,CAA9B,EAAiCG,IAAjC;QACD,CAFD;;QAGAD,KAAI,CAAC,0BAAmBD,GAAnB,CAAD,CAAJ,GAAuD,UAAUE,IAAV,EAAc;UACnE,KAAKS,gCAAL,CAAsCZ,CAAtC,EAAyCG,IAAzC;QACD,CAFD;;MAhCF;;;;;;;;;;;MASA,KAAK,IAAIH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA2B;gBAAlBA;MA0BR,CApCiC,CAsClC;;;MACAE,KAAI,CAAC,SAAD,CAAJ,GAAkB,UAAUD,GAAV,EAAeE,IAAf,EAAqBC,IAArB,EAAyB;QACzC,OAAO,KAAKC,qBAAL,CAA2BF,IAA3B,EAAiCF,GAAjC,EAAsCG,IAAtC,CAAP;MACD,CAFD;;MAGAF,KAAI,CAAC,SAAD,CAAJ,GAAkB,UAAUD,GAAV,EAAeE,IAAf,EAAqBC,IAArB,EAAyB;QACzC,OAAO,KAAKE,qBAAL,CAA2BH,IAA3B,EAAiCF,GAAjC,EAAsCG,IAAtC,CAAP;MACD,CAFD;;MAGAF,KAAI,CAAC,QAAD,CAAJ,GAAiB,UAAUD,GAAV,EAAeE,IAAf,EAAmB;QAClC,OAAO,KAAKI,oBAAL,CAA0BJ,IAA1B,EAAgCF,GAAhC,CAAP;MACD,CAFD;;MAGAC,KAAI,CAAC,IAAD,CAAJ,GAAa,UAAUD,GAAV,EAAeE,IAAf,EAAmB;QAC9B,OAAO,KAAKK,gBAAL,CAAsBL,IAAtB,EAA4BF,GAA5B,CAAP;MACD,CAFD;;MAGAC,KAAI,CAAC,MAAD,CAAJ,GAAe,UAAUD,GAAV,EAAeE,IAAf,EAAmB;QAChC,KAAKM,kBAAL,CAAwBR,GAAxB,EAA6BE,IAA7B;MACD,CAFD;;MAGAD,KAAI,CAAC,YAAD,CAAJ,GAAqB,UAAUD,GAAV,EAAeE,IAAf,EAAmB;QACtC,KAAKQ,wBAAL,CAA8BV,GAA9B,EAAmCE,IAAnC;MACD,CAFD;;MAIAD,KAAI,CAACW,MAAL,GAAcX,KAAI,CAACY,aAAnB;MACAZ,KAAI,CAACa,SAAL,GAAiBb,KAAI,CAACc,gBAAtB;MACAd,KAAI,CAACe,EAAL,GAAUf,KAAI,CAACgB,SAAf;IACD,CA7DD;EA8DD,CAjED;;EAmEAvB;IAAA;;IACE,KAAKG,eAAL,GAAuB,KAAvB,CADF,CAEE;IACA;IACA;IACA;;IACA,KAAKC,UAAL,CAAgB,4BAAhB,EAA8C;MAC5C,IAAMoB,IAAI,GAAQjB,KAAlB;;MAEA,KAAK,IAAIF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;QAC3B,IAAMC,GAAG,GAAGD,CAAC,GAAG,CAAJ,GAAQA,CAAR,GAAY,EAAxB;QACA,OAAOmB,IAAI,CAAC,iBAAUlB,GAAV,CAAD,CAAX;QACA,OAAOkB,IAAI,CAAC,iBAAUlB,GAAV,CAAD,CAAX;QACA,OAAOkB,IAAI,CAAC,gBAASlB,GAAT,CAAD,CAAX;QACA,OAAOkB,IAAI,CAAC,YAAKlB,GAAL,CAAD,CAAX;QACA,OAAOkB,IAAI,CAAC,cAAOlB,GAAP,CAAD,CAAX;QACA,OAAOkB,IAAI,CAAC,kBAAWlB,GAAX,CAAD,CAAX;QACA,OAAOkB,IAAI,CAAC,sBAAelB,GAAf,CAAD,CAAX;QACA,OAAOkB,IAAI,CAAC,0BAAmBlB,GAAnB,CAAD,CAAX;MACD;;MAED,OAAOkB,IAAI,CAAC,SAAD,CAAX;MACA,OAAOA,IAAI,CAAC,SAAD,CAAX;MACA,OAAOA,IAAI,CAAC,QAAD,CAAX;MACA,OAAOA,IAAI,CAAC,IAAD,CAAX;MACA,OAAOA,IAAI,CAAC,MAAD,CAAX;MACA,OAAOA,IAAI,CAAC,YAAD,CAAX;MAEA,OAAOA,IAAI,CAACN,MAAZ;MACA,OAAOM,IAAI,CAACJ,SAAZ;MACA,OAAOI,IAAI,CAACF,EAAZ;IACD,CAzBD;EA0BD,CAhCD,CA5EF,CA8GE;EACA;EACA;;;EACAtB,iDAAsCyB,IAAtC,EAAmD,CACjD;EACD,CAFD,CAjHF,CAqHE;;;EACAzB,oDACE0B,WADF,EAEEC,IAFF,EAEc;IAEZ,OAAO;MAAM;IAAI,CAAjB;EACD,CALD,CAtHF,CA6HE;EACA;;;EACA3B,6CAAU4B,OAAV,EAAyB;IACvB;IACA;IACA,OAAOC,oBAAP;EACD,CAJD;;EAMA7B,sDAAmBP,IAAnB,EAAiCqC,GAAjC,EAA8C;IAC5C,IAAI;MACF,IAAMC,eAAe,GAAG,IAAIC,WAAJ,CAAS;QAAEC,UAAU,EAAE,EAAd;QAAkBxC,IAAI,EAAEA;MAAxB,CAAT,CAAxB;MACAsC,eAAe,CAACtC,IAAhB,GAAuBA,IAAvB;MACA,KAAKS,kBAAL,CAAwBgC,IAAxB,CAA6BH,eAA7B;MACAD,GAAG,CAACK,IAAJ,CAAS,IAAT;MACA,KAAKjC,kBAAL,CAAwBkC,GAAxB;MACA,OAAOL,eAAP;IACD,CAPD,CAOE,OAAOM,aAAP,EAAsB;MACtB,IAAIA,aAAa,CAACC,oBAAd,KAAuC,IAA3C,EAAiD;QAC/C,IAAI;UACFD,aAAa,CAACE,OAAd,GACEF,aAAa,CAACE,OAAd,GACA,wFADA,GAEA,mEAHF;QAID,CALD,CAKE,OAAOC,eAAP,EAAwB;UACxB;UACA,MAAMH,aAAN;QACD;MACF;;MACD,MAAMA,aAAN;IACD;EACF,CAtBD,CArIF,CA6JE;;;EACArC,wDAEEyC,iBAFF,EAGEC,UAHF,EAGoB;IAElB,OAAOC,UAAU,CAACR,IAAX,CAAgB,IAAhB,EAAsBH,aAAtB,EAA8BS,iBAA9B,EAAiDC,UAAjD,CAAP;EACD,CAND;;EAQA1C,4DAEE0C,UAFF,EAGED,iBAHF,EAGmE;IAEjEE,UAAU,CAACR,IAAX,CAAgB,IAAhB,EAAsBH,0BAAtB,EAA2CS,iBAA3C,EAA8DC,UAA9D;EACD,CAND;;EAQA1C,oEAEE0C,UAFF,EAGEE,OAHF,EAGuC;IAErCD,UAAU,CAACR,IAAX,CACE,IADF,EAEEH,uCAFF,EAGEY,OAHF,EAIEF,UAJF,EAKEvD,gBALF;EAOD,CAZD;;EAcAa,sDAEE0C,UAFF,EAGED,iBAHF,EAG4D;IAE1DE,UAAU,CAACR,IAAX,CAAgB,IAAhB,EAAsBH,iBAAtB,EAAkCS,iBAAlC,EAAqDC,UAArD;EACD,CAND;;EAQA1C,8DAEE0C,UAFF,EAGEE,OAHF,EAGiC;IAE/BD,UAAU,CAACR,IAAX,CACE,IADF,EAEEH,8BAFF,EAGEY,OAHF,EAIEF,UAJF,EAKEvD,gBALF;EAOD,CAZD;;EAcAa,oDAEE6C,UAFF,EAGEH,UAHF,EAGoB;IAElB,OAAOI,YAAY,CAACX,IAAb,CAAkB,IAAlB,EAAwBU,UAAxB,EAAoCH,UAApC,CAAP;EACD,CAND;;EAQA1C,yDAEE+C,UAFF,EAGEL,UAHF,EAIEE,OAJF,EAImC;IAEjCI,sBAAsB,CAACN,UAAD,CAAtB;;IACA,IAAI,CAACK,UAAD,IAAe,mBAAIA,UAAJ,EAAgB,UAAhB,MAAgC,KAAnD,EAA0D;MACxD,IAAME,KAAK,GAAQ,IAAIC,KAAJ,CACjB,kBAAWC,YAAY,CAACT,UAAD,CAAvB,EAAmC,uBAAnC,IACE,yDAAkDU,IAAI,CAACC,SAAL,CAChDN,UADgD,CAAlD,EAEC,GAFD,CADF,GAIE,qCACS,KAAK7C,kBAAL,CAAwB,CAAxB,EAA4BT,IADrC,EACyC,GADzC,CALe,CAAnB;MASAwD,KAAK,CAACX,oBAAN,GAA6B,IAA7B;MACA,MAAMW,KAAN;IACD;;IAED,IAAMK,QAAQ,GAAQ,oBAAK,KAAKpD,kBAAV,CAAtB;IACA,IAAMqD,QAAQ,GAAGR,UAAU,CAACQ,QAA5B;IACA,IAAMC,eAAe,GAAG,IAAIxB,kBAAJ,CAAgB;MACtC1B,GAAG,EAAEoC,UADiC;MAEtCe,eAAe,EAAEF,QAFqB;MAGtCG,KAAK,EAAEd,OAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEe,KAHsB;MAItC;MACAC,cAAc,EAAEC;IALsB,CAAhB,CAAxB;IAOAP,QAAQ,CAACrB,UAAT,CAAoBC,IAApB,CAAyBsB,eAAzB;IAEA,OAAO,KAAKM,SAAL,GAAiBhE,uBAAjB,GAAgDf,qBAAvD;EACD,CAjCD;;EAmCAiB,yDAEE+D,OAFF,EAGErB,UAHF,EAIEE,OAJF,EAI6B;IAE3BI,sBAAsB,CAACN,UAAD,CAAtB;;IACA,IAAI,CAAC,kCAAoBqB,OAApB,CAAL,EAAmC;MACjC,IAAMd,KAAK,GAAQ,IAAIC,KAAJ,CACjB,kBAAWC,YAAY,CAACT,UAAD,CAAvB,EAAmC,uBAAnC,IACE,qDAA8CU,IAAI,CAACC,SAAL,CAC5CU,OAD4C,CAA9C,EAEC,GAFD,CADF,GAIE,qCACS,KAAK7D,kBAAL,CAAwB,CAAxB,EAA4BT,IADrC,EACyC,GADzC,CALe,CAAnB;MASAwD,KAAK,CAACX,oBAAN,GAA6B,IAA7B;MACA,MAAMW,KAAN;IACD;;IACD,IAAMK,QAAQ,GAAQ,oBAAK,KAAKpD,kBAAV,CAAtB;IACA,IAAMsD,eAAe,GAAG,IAAIxB,eAAJ,CAAa;MACnC1B,GAAG,EAAEoC,UAD8B;MAEnCsB,YAAY,EAAED,OAFqB;MAGnCL,KAAK,EAAEd,OAAO,SAAP,WAAO,WAAP,GAAO,MAAP,UAAO,CAAEe;IAHmB,CAAb,CAAxB;IAKAL,QAAQ,CAACrB,UAAT,CAAoBC,IAApB,CAAyBsB,eAAzB;IAEA,OAAO3D,qBAAP;EACD,CA7BD;;EA8BF;AAAC,CA3RD;;AAAaoE;;AA6Rb,SAAStB,UAAT,CACEuB,eADF,EAEEC,WAFF,EAGEzB,UAHF,EAIE0B,SAJF,EAI4B;EAA1B;IAAAA;EAA0B;;EAE1BpB,sBAAsB,CAACN,UAAD,CAAtB;EACA,IAAMY,QAAQ,GAAQ,oBAAK,KAAKpD,kBAAV,CAAtB;EACA,IAAMmE,aAAa,GAAG,0BAAWF,WAAX,IAA0BA,WAA1B,GAAwCA,WAAW,CAACG,GAA1E;EAEA,IAAMC,OAAO,GAAG,IAAIL,eAAJ,CAAoB;IAAEjC,UAAU,EAAE,EAAd;IAAkB3B,GAAG,EAAEoC;EAAvB,CAApB,CAAhB;;EACA,IAAI0B,SAAJ,EAAe;IACbG,OAAO,CAACC,SAAR,GAAoBL,WAAW,CAACM,GAAhC;EACD;;EACD,IAAI,mBAAIN,WAAJ,EAAiB,eAAjB,CAAJ,EAAuC;IACrCI,OAAO,CAACG,YAAR,GAAuBP,WAAW,CAACQ,aAAnC;EACD;;EAED,KAAKzE,kBAAL,CAAwBgC,IAAxB,CAA6BqC,OAA7B;EACAF,aAAa,CAAClC,IAAd,CAAmB,IAAnB;EACAmB,QAAQ,CAACrB,UAAT,CAAoBC,IAApB,CAAyBqC,OAAzB;EACA,KAAKrE,kBAAL,CAAwBkC,GAAxB;EAEA,OAAOrD,qBAAP;AACD;;AAED,SAAS+D,YAAT,CAAsBqB,WAAtB,EAAwCzB,UAAxC,EAA0D;EAA1D;;EACEM,sBAAsB,CAACN,UAAD,CAAtB;EACA,IAAMY,QAAQ,GAAQ,oBAAK,KAAKpD,kBAAV,CAAtB,CAFwD,CAGxD;;EACA,IAAM0E,UAAU,GAAG,uBAAQT,WAAR,MAAyB,KAA5C;EACA,IAAMU,IAAI,GACRD,UAAU,KAAK,KAAf,GAAuBT,WAAvB,GAAqCA,WAAW,CAACG,GADnD;EAGA,IAAMQ,SAAS,GAAG,IAAI9C,kBAAJ,CAAgB;IAChCC,UAAU,EAAE,EADoB;IAEhC3B,GAAG,EAAEoC,UAF2B;IAGhCqC,iBAAiB,EAAEH,UAAU,IAAIT,WAAW,CAACa,kBAAZ,KAAmC;EAHpC,CAAhB,CAAlB;;EAKA,IAAI,mBAAIb,WAAJ,EAAiB,eAAjB,CAAJ,EAAuC;IACrCW,SAAS,CAACJ,YAAV,GAAyBP,WAAW,CAACQ,aAArC;EACD;;EAED,IAAMM,aAAa,GAAG,oBAAKJ,IAAL,EAAW,UAACK,OAAD,EAAa;IAAK,iCAAWA,OAAO,CAACC,IAAnB;EAAwB,CAArD,CAAtB;EACAL,SAAS,CAACG,aAAV,GAA0BA,aAA1B;EAEA3B,QAAQ,CAACrB,UAAT,CAAoBC,IAApB,CAAyB4C,SAAzB;EAEA,uBAAQD,IAAR,EAAc,UAACK,OAAD,EAAQ;IACpB,IAAME,WAAW,GAAG,IAAIpD,kBAAJ,CAAgB;MAAEC,UAAU,EAAE;IAAd,CAAhB,CAApB;IACA6C,SAAS,CAAC7C,UAAV,CAAqBC,IAArB,CAA0BkD,WAA1B;;IACA,IAAI,mBAAIF,OAAJ,EAAa,oBAAb,CAAJ,EAAwC;MACtCE,WAAW,CAACL,iBAAZ,GAAgCG,OAAO,CAACF,kBAAxC,CADsC,CACgC;IACvE,CAFD,CAGA;IAHA,KAIK,IAAI,mBAAIE,OAAJ,EAAa,MAAb,CAAJ,EAA0B;MAC7BE,WAAW,CAACL,iBAAZ,GAAgC,IAAhC;IACD;;IACDxE,KAAI,CAACL,kBAAL,CAAwBgC,IAAxB,CAA6BkD,WAA7B;;IACAF,OAAO,CAACG,GAAR,CAAYlD,IAAZ,CAAiB5B,KAAjB;;IACAA,KAAI,CAACL,kBAAL,CAAwBkC,GAAxB;EACD,CAbD;EAcA,OAAOrD,qBAAP;AACD;;AAED,SAASoE,YAAT,CAAsB7C,GAAtB,EAAiC;EAC/B,OAAOA,GAAG,KAAK,CAAR,GAAY,EAAZ,GAAiB,UAAGA,GAAH,CAAxB;AACD;;AAED,SAAS0C,sBAAT,CAAgC1C,GAAhC,EAA2C;EACzC,IAAIA,GAAG,GAAG,CAAN,IAAWA,GAAG,GAAGlB,cAArB,EAAqC;IACnC,IAAM6D,KAAK,GAAQ,IAAIC,KAAJ,EACjB;IACA,yCAAkC5C,GAAlC,EAAqC,OAArC,IACE,+DACElB,cAAc,GAAG,CADnB,CAHe,CAAnB;IAOA6D,KAAK,CAACX,oBAAN,GAA6B,IAA7B;IACA,MAAMW,KAAN;EACD;AACF","names":["RECORDING_NULL_OBJECT","description","Object","freeze","HANDLE_SEPARATOR","MAX_METHOD_IDX","Math","pow","keys_1","RFT","name","pattern","lexer_public_1","NA","RECORDING_PHASE_TOKEN","RECORDING_PHASE_CSTNODE","children","GastRecorder","config","recordingProdStack","RECORDING_PHASE","TRACE_INIT","i","idx","_this","arg1","arg2","consumeInternalRecord","subruleInternalRecord","optionInternalRecord","orInternalRecord","manyInternalRecord","manySepFirstInternalRecord","atLeastOneInternalRecord","atLeastOneSepFirstInternalRecord","ACTION","ACTION_RECORD","BACKTRACK","BACKTRACK_RECORD","LA","LA_RECORD","that","impl","grammarRule","args","howMuch","parser_1","def","newTopLevelRule","gast_1","definition","push","call","pop","originalError","KNOWN_RECORDER_ERROR","message","mutabilityError","actionORMethodDef","occurrence","recordProd","options","altsOrOpts","recordOrProd","ruleToCall","assertMethodIdxIsValid","error","Error","getIdxSuffix","JSON","stringify","prevProd","ruleName","newNoneTerminal","nonTerminalName","label","LABEL","referencedRule","undefined","outputCst","tokType","terminalType","exports","prodConstructor","mainProdArg","handleSep","grammarAction","DEF","newProd","separator","SEP","maxLookahead","MAX_LOOKAHEAD","hasOptions","alts","newOrProd","ignoreAmbiguities","IGNORE_AMBIGUITIES","hasPredicates","currAlt","GATE","currAltFlat","ALT"],"sources":["D:\\Github\\NIKE-DJANGO\\Jord\\l4fycy\\node_modules\\chevrotain\\src\\parse\\parser\\traits\\gast_recorder.ts"],"sourcesContent":["import {\r\n  AtLeastOneSepMethodOpts,\r\n  ConsumeMethodOpts,\r\n  CstNode,\r\n  DSLMethodOpts,\r\n  DSLMethodOptsWithErr,\r\n  GrammarAction,\r\n  IOrAlt,\r\n  IParserConfig,\r\n  IProduction,\r\n  IToken,\r\n  ManySepMethodOpts,\r\n  OrMethodOpts,\r\n  SubruleMethodOpts,\r\n  TokenType\r\n} from \"@chevrotain/types\"\r\nimport peek from \"lodash/last\"\r\nimport isArray from \"lodash/isArray\"\r\nimport some from \"lodash/some\"\r\nimport forEach from \"lodash/forEach\"\r\nimport isFunction from \"lodash/isFunction\"\r\nimport has from \"lodash/has\"\r\nimport { MixedInParser } from \"./parser_traits\"\r\nimport {\r\n  Alternation,\r\n  Alternative,\r\n  NonTerminal,\r\n  Option,\r\n  Repetition,\r\n  RepetitionMandatory,\r\n  RepetitionMandatoryWithSeparator,\r\n  RepetitionWithSeparator,\r\n  Rule,\r\n  Terminal\r\n} from \"@chevrotain/gast\"\r\nimport { Lexer } from \"../../../scan/lexer_public\"\r\nimport { augmentTokenTypes, hasShortKeyProperty } from \"../../../scan/tokens\"\r\nimport { createToken, createTokenInstance } from \"../../../scan/tokens_public\"\r\nimport { END_OF_FILE } from \"../parser\"\r\nimport { BITS_FOR_OCCURRENCE_IDX } from \"../../grammar/keys\"\r\nimport { ParserMethodInternal } from \"../types\"\r\n\r\ntype ProdWithDef = IProduction & { definition?: IProduction[] }\r\nconst RECORDING_NULL_OBJECT = {\r\n  description: \"This Object indicates the Parser is during Recording Phase\"\r\n}\r\nObject.freeze(RECORDING_NULL_OBJECT)\r\n\r\nconst HANDLE_SEPARATOR = true\r\nconst MAX_METHOD_IDX = Math.pow(2, BITS_FOR_OCCURRENCE_IDX) - 1\r\n\r\nconst RFT = createToken({ name: \"RECORDING_PHASE_TOKEN\", pattern: Lexer.NA })\r\naugmentTokenTypes([RFT])\r\nconst RECORDING_PHASE_TOKEN = createTokenInstance(\r\n  RFT,\r\n  \"This IToken indicates the Parser is in Recording Phase\\n\\t\" +\r\n    \"\" +\r\n    \"See: https://chevrotain.io/docs/guide/internals.html#grammar-recording for details\",\r\n  // Using \"-1\" instead of NaN (as in EOF) because an actual number is less likely to\r\n  // cause errors if the output of LA or CONSUME would be (incorrectly) used during the recording phase.\r\n  -1,\r\n  -1,\r\n  -1,\r\n  -1,\r\n  -1,\r\n  -1\r\n)\r\nObject.freeze(RECORDING_PHASE_TOKEN)\r\n\r\nconst RECORDING_PHASE_CSTNODE: CstNode = {\r\n  name:\r\n    \"This CSTNode indicates the Parser is in Recording Phase\\n\\t\" +\r\n    \"See: https://chevrotain.io/docs/guide/internals.html#grammar-recording for details\",\r\n  children: {}\r\n}\r\n\r\n/**\r\n * This trait handles the creation of the GAST structure for Chevrotain Grammars\r\n */\r\nexport class GastRecorder {\r\n  recordingProdStack: ProdWithDef[]\r\n  RECORDING_PHASE: boolean\r\n\r\n  initGastRecorder(this: MixedInParser, config: IParserConfig): void {\r\n    this.recordingProdStack = []\r\n    this.RECORDING_PHASE = false\r\n  }\r\n\r\n  enableRecording(this: MixedInParser): void {\r\n    this.RECORDING_PHASE = true\r\n\r\n    this.TRACE_INIT(\"Enable Recording\", () => {\r\n      /**\r\n       * Warning Dark Voodoo Magic upcoming!\r\n       * We are \"replacing\" the public parsing DSL methods API\r\n       * With **new** alternative implementations on the Parser **instance**\r\n       *\r\n       * So far this is the only way I've found to avoid performance regressions during parsing time.\r\n       * - Approx 30% performance regression was measured on Chrome 75 Canary when attempting to replace the \"internal\"\r\n       *   implementations directly instead.\r\n       */\r\n      for (let i = 0; i < 10; i++) {\r\n        const idx = i > 0 ? i : \"\"\r\n        this[`CONSUME${idx}` as \"CONSUME\"] = function (arg1, arg2) {\r\n          return this.consumeInternalRecord(arg1, i, arg2)\r\n        }\r\n        this[`SUBRULE${idx}` as \"SUBRULE\"] = function (arg1, arg2) {\r\n          return this.subruleInternalRecord(arg1, i, arg2) as any\r\n        }\r\n        this[`OPTION${idx}` as \"OPTION\"] = function (arg1) {\r\n          return this.optionInternalRecord(arg1, i)\r\n        }\r\n        this[`OR${idx}` as \"OR\"] = function (arg1) {\r\n          return this.orInternalRecord(arg1, i)\r\n        }\r\n        this[`MANY${idx}` as \"MANY\"] = function (arg1) {\r\n          this.manyInternalRecord(i, arg1)\r\n        }\r\n        this[`MANY_SEP${idx}` as \"MANY_SEP\"] = function (arg1) {\r\n          this.manySepFirstInternalRecord(i, arg1)\r\n        }\r\n        this[`AT_LEAST_ONE${idx}` as \"AT_LEAST_ONE\"] = function (arg1) {\r\n          this.atLeastOneInternalRecord(i, arg1)\r\n        }\r\n        this[`AT_LEAST_ONE_SEP${idx}` as \"AT_LEAST_ONE_SEP\"] = function (arg1) {\r\n          this.atLeastOneSepFirstInternalRecord(i, arg1)\r\n        }\r\n      }\r\n\r\n      // DSL methods with the idx(suffix) as an argument\r\n      this[`consume`] = function (idx, arg1, arg2) {\r\n        return this.consumeInternalRecord(arg1, idx, arg2)\r\n      }\r\n      this[`subrule`] = function (idx, arg1, arg2) {\r\n        return this.subruleInternalRecord(arg1, idx, arg2) as any\r\n      }\r\n      this[`option`] = function (idx, arg1) {\r\n        return this.optionInternalRecord(arg1, idx)\r\n      }\r\n      this[`or`] = function (idx, arg1) {\r\n        return this.orInternalRecord(arg1, idx)\r\n      }\r\n      this[`many`] = function (idx, arg1) {\r\n        this.manyInternalRecord(idx, arg1)\r\n      }\r\n      this[`atLeastOne`] = function (idx, arg1) {\r\n        this.atLeastOneInternalRecord(idx, arg1)\r\n      }\r\n\r\n      this.ACTION = this.ACTION_RECORD\r\n      this.BACKTRACK = this.BACKTRACK_RECORD\r\n      this.LA = this.LA_RECORD\r\n    })\r\n  }\r\n\r\n  disableRecording(this: MixedInParser) {\r\n    this.RECORDING_PHASE = false\r\n    // By deleting these **instance** properties, any future invocation\r\n    // will be deferred to the original methods on the **prototype** object\r\n    // This seems to get rid of any incorrect optimizations that V8 may\r\n    // do during the recording phase.\r\n    this.TRACE_INIT(\"Deleting Recording methods\", () => {\r\n      const that: any = this\r\n\r\n      for (let i = 0; i < 10; i++) {\r\n        const idx = i > 0 ? i : \"\"\r\n        delete that[`CONSUME${idx}`]\r\n        delete that[`SUBRULE${idx}`]\r\n        delete that[`OPTION${idx}`]\r\n        delete that[`OR${idx}`]\r\n        delete that[`MANY${idx}`]\r\n        delete that[`MANY_SEP${idx}`]\r\n        delete that[`AT_LEAST_ONE${idx}`]\r\n        delete that[`AT_LEAST_ONE_SEP${idx}`]\r\n      }\r\n\r\n      delete that[`consume`]\r\n      delete that[`subrule`]\r\n      delete that[`option`]\r\n      delete that[`or`]\r\n      delete that[`many`]\r\n      delete that[`atLeastOne`]\r\n\r\n      delete that.ACTION\r\n      delete that.BACKTRACK\r\n      delete that.LA\r\n    })\r\n  }\r\n\r\n  //   Parser methods are called inside an ACTION?\r\n  //   Maybe try/catch/finally on ACTIONS while disabling the recorders state changes?\r\n  // @ts-expect-error -- noop place holder\r\n  ACTION_RECORD<T>(this: MixedInParser, impl: () => T): T {\r\n    // NO-OP during recording\r\n  }\r\n\r\n  // Executing backtracking logic will break our recording logic assumptions\r\n  BACKTRACK_RECORD<T>(\r\n    grammarRule: (...args: any[]) => T,\r\n    args?: any[]\r\n  ): () => boolean {\r\n    return () => true\r\n  }\r\n\r\n  // LA is part of the official API and may be used for custom lookahead logic\r\n  // by end users who may forget to wrap it in ACTION or inside a GATE\r\n  LA_RECORD(howMuch: number): IToken {\r\n    // We cannot use the RECORD_PHASE_TOKEN here because someone may depend\r\n    // On LA return EOF at the end of the input so an infinite loop may occur.\r\n    return END_OF_FILE\r\n  }\r\n\r\n  topLevelRuleRecord(name: string, def: Function): Rule {\r\n    try {\r\n      const newTopLevelRule = new Rule({ definition: [], name: name })\r\n      newTopLevelRule.name = name\r\n      this.recordingProdStack.push(newTopLevelRule)\r\n      def.call(this)\r\n      this.recordingProdStack.pop()\r\n      return newTopLevelRule\r\n    } catch (originalError) {\r\n      if (originalError.KNOWN_RECORDER_ERROR !== true) {\r\n        try {\r\n          originalError.message =\r\n            originalError.message +\r\n            '\\n\\t This error was thrown during the \"grammar recording phase\" For more info see:\\n\\t' +\r\n            \"https://chevrotain.io/docs/guide/internals.html#grammar-recording\"\r\n        } catch (mutabilityError) {\r\n          // We may not be able to modify the original error object\r\n          throw originalError\r\n        }\r\n      }\r\n      throw originalError\r\n    }\r\n  }\r\n\r\n  // Implementation of parsing DSL\r\n  optionInternalRecord<OUT>(\r\n    this: MixedInParser,\r\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\r\n    occurrence: number\r\n  ): OUT {\r\n    return recordProd.call(this, Option, actionORMethodDef, occurrence)\r\n  }\r\n\r\n  atLeastOneInternalRecord<OUT>(\r\n    this: MixedInParser,\r\n    occurrence: number,\r\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>\r\n  ): void {\r\n    recordProd.call(this, RepetitionMandatory, actionORMethodDef, occurrence)\r\n  }\r\n\r\n  atLeastOneSepFirstInternalRecord<OUT>(\r\n    this: MixedInParser,\r\n    occurrence: number,\r\n    options: AtLeastOneSepMethodOpts<OUT>\r\n  ): void {\r\n    recordProd.call(\r\n      this,\r\n      RepetitionMandatoryWithSeparator,\r\n      options,\r\n      occurrence,\r\n      HANDLE_SEPARATOR\r\n    )\r\n  }\r\n\r\n  manyInternalRecord<OUT>(\r\n    this: MixedInParser,\r\n    occurrence: number,\r\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>\r\n  ): void {\r\n    recordProd.call(this, Repetition, actionORMethodDef, occurrence)\r\n  }\r\n\r\n  manySepFirstInternalRecord<OUT>(\r\n    this: MixedInParser,\r\n    occurrence: number,\r\n    options: ManySepMethodOpts<OUT>\r\n  ): void {\r\n    recordProd.call(\r\n      this,\r\n      RepetitionWithSeparator,\r\n      options,\r\n      occurrence,\r\n      HANDLE_SEPARATOR\r\n    )\r\n  }\r\n\r\n  orInternalRecord<T>(\r\n    this: MixedInParser,\r\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\r\n    occurrence: number\r\n  ): T {\r\n    return recordOrProd.call(this, altsOrOpts, occurrence)\r\n  }\r\n\r\n  subruleInternalRecord<ARGS extends unknown[], R>(\r\n    this: MixedInParser,\r\n    ruleToCall: ParserMethodInternal<ARGS, R>,\r\n    occurrence: number,\r\n    options?: SubruleMethodOpts<ARGS>\r\n  ): R | CstNode {\r\n    assertMethodIdxIsValid(occurrence)\r\n    if (!ruleToCall || has(ruleToCall, \"ruleName\") === false) {\r\n      const error: any = new Error(\r\n        `<SUBRULE${getIdxSuffix(occurrence)}> argument is invalid` +\r\n          ` expecting a Parser method reference but got: <${JSON.stringify(\r\n            ruleToCall\r\n          )}>` +\r\n          `\\n inside top level rule: <${\r\n            (<Rule>this.recordingProdStack[0]).name\r\n          }>`\r\n      )\r\n      error.KNOWN_RECORDER_ERROR = true\r\n      throw error\r\n    }\r\n\r\n    const prevProd: any = peek(this.recordingProdStack)\r\n    const ruleName = ruleToCall.ruleName\r\n    const newNoneTerminal = new NonTerminal({\r\n      idx: occurrence,\r\n      nonTerminalName: ruleName,\r\n      label: options?.LABEL,\r\n      // The resolving of the `referencedRule` property will be done once all the Rule's GASTs have been created\r\n      referencedRule: undefined\r\n    })\r\n    prevProd.definition.push(newNoneTerminal)\r\n\r\n    return this.outputCst ? RECORDING_PHASE_CSTNODE : <any>RECORDING_NULL_OBJECT\r\n  }\r\n\r\n  consumeInternalRecord(\r\n    this: MixedInParser,\r\n    tokType: TokenType,\r\n    occurrence: number,\r\n    options?: ConsumeMethodOpts\r\n  ): IToken {\r\n    assertMethodIdxIsValid(occurrence)\r\n    if (!hasShortKeyProperty(tokType)) {\r\n      const error: any = new Error(\r\n        `<CONSUME${getIdxSuffix(occurrence)}> argument is invalid` +\r\n          ` expecting a TokenType reference but got: <${JSON.stringify(\r\n            tokType\r\n          )}>` +\r\n          `\\n inside top level rule: <${\r\n            (<Rule>this.recordingProdStack[0]).name\r\n          }>`\r\n      )\r\n      error.KNOWN_RECORDER_ERROR = true\r\n      throw error\r\n    }\r\n    const prevProd: any = peek(this.recordingProdStack)\r\n    const newNoneTerminal = new Terminal({\r\n      idx: occurrence,\r\n      terminalType: tokType,\r\n      label: options?.LABEL\r\n    })\r\n    prevProd.definition.push(newNoneTerminal)\r\n\r\n    return RECORDING_PHASE_TOKEN\r\n  }\r\n}\r\n\r\nfunction recordProd(\r\n  prodConstructor: any,\r\n  mainProdArg: any,\r\n  occurrence: number,\r\n  handleSep: boolean = false\r\n): any {\r\n  assertMethodIdxIsValid(occurrence)\r\n  const prevProd: any = peek(this.recordingProdStack)\r\n  const grammarAction = isFunction(mainProdArg) ? mainProdArg : mainProdArg.DEF\r\n\r\n  const newProd = new prodConstructor({ definition: [], idx: occurrence })\r\n  if (handleSep) {\r\n    newProd.separator = mainProdArg.SEP\r\n  }\r\n  if (has(mainProdArg, \"MAX_LOOKAHEAD\")) {\r\n    newProd.maxLookahead = mainProdArg.MAX_LOOKAHEAD\r\n  }\r\n\r\n  this.recordingProdStack.push(newProd)\r\n  grammarAction.call(this)\r\n  prevProd.definition.push(newProd)\r\n  this.recordingProdStack.pop()\r\n\r\n  return RECORDING_NULL_OBJECT\r\n}\r\n\r\nfunction recordOrProd(mainProdArg: any, occurrence: number): any {\r\n  assertMethodIdxIsValid(occurrence)\r\n  const prevProd: any = peek(this.recordingProdStack)\r\n  // Only an array of alternatives\r\n  const hasOptions = isArray(mainProdArg) === false\r\n  const alts: IOrAlt<unknown>[] =\r\n    hasOptions === false ? mainProdArg : mainProdArg.DEF\r\n\r\n  const newOrProd = new Alternation({\r\n    definition: [],\r\n    idx: occurrence,\r\n    ignoreAmbiguities: hasOptions && mainProdArg.IGNORE_AMBIGUITIES === true\r\n  })\r\n  if (has(mainProdArg, \"MAX_LOOKAHEAD\")) {\r\n    newOrProd.maxLookahead = mainProdArg.MAX_LOOKAHEAD\r\n  }\r\n\r\n  const hasPredicates = some(alts, (currAlt: any) => isFunction(currAlt.GATE))\r\n  newOrProd.hasPredicates = hasPredicates\r\n\r\n  prevProd.definition.push(newOrProd)\r\n\r\n  forEach(alts, (currAlt) => {\r\n    const currAltFlat = new Alternative({ definition: [] })\r\n    newOrProd.definition.push(currAltFlat)\r\n    if (has(currAlt, \"IGNORE_AMBIGUITIES\")) {\r\n      currAltFlat.ignoreAmbiguities = currAlt.IGNORE_AMBIGUITIES as boolean // assumes end user provides the correct config value/type\r\n    }\r\n    // **implicit** ignoreAmbiguities due to usage of gate\r\n    else if (has(currAlt, \"GATE\")) {\r\n      currAltFlat.ignoreAmbiguities = true\r\n    }\r\n    this.recordingProdStack.push(currAltFlat)\r\n    currAlt.ALT.call(this)\r\n    this.recordingProdStack.pop()\r\n  })\r\n  return RECORDING_NULL_OBJECT\r\n}\r\n\r\nfunction getIdxSuffix(idx: number): string {\r\n  return idx === 0 ? \"\" : `${idx}`\r\n}\r\n\r\nfunction assertMethodIdxIsValid(idx: number): void {\r\n  if (idx < 0 || idx > MAX_METHOD_IDX) {\r\n    const error: any = new Error(\r\n      // The stack trace will contain all the needed details\r\n      `Invalid DSL Method idx value: <${idx}>\\n\\t` +\r\n        `Idx value must be a none negative value smaller than ${\r\n          MAX_METHOD_IDX + 1\r\n        }`\r\n    )\r\n    error.KNOWN_RECORDER_ERROR = true\r\n    throw error\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}