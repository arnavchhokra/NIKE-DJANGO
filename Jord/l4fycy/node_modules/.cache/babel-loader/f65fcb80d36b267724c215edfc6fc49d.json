{"ast":null,"code":"import { ShaderNode, exp2, mul, sub, add, cond, pow, saturate, div, negate, and, greaterThan, pow2, sqrt, max, EPSILON, normalize, positionViewDirection, dot, transformedNormalView, addTo, diffuseColor, specularColor, roughness } from '../ShaderNode.js';\nvar F_Schlick = new ShaderNode(function (inputs) {\n  var f0 = inputs.f0,\n      f90 = inputs.f90,\n      dotVH = inputs.dotVH; // Original approximation by Christophe Schlick '94\n  // float fresnel = pow( 1.0 - dotVH, 5.0 );\n  // Optimized variant (presented by Epic at SIGGRAPH '13)\n  // https://cdn2.unrealengine.com/Resources/files/2013SiggraphPresentationsNotes-26915738.pdf\n\n  var fresnel = exp2(mul(sub(mul(-5.55473, dotVH), 6.98316), dotVH));\n  return add(mul(f0, sub(1.0, fresnel)), mul(f90, fresnel));\n}); // validated\n\nvar BRDF_Lambert = new ShaderNode(function (inputs) {\n  return mul(1 / Math.PI, inputs.diffuseColor); // punctual light\n}); // validated\n\nvar getDistanceAttenuation = new ShaderNode(function (inputs) {\n  var lightDistance = inputs.lightDistance,\n      cutoffDistance = inputs.cutoffDistance,\n      decayExponent = inputs.decayExponent;\n  return cond(and(greaterThan(cutoffDistance, 0), greaterThan(decayExponent, 0)), pow(saturate(add(div(negate(lightDistance), cutoffDistance), 1.0)), decayExponent), 1.0);\n}); // validated\n//\n// STANDARD\n//\n// Moving Frostbite to Physically Based Rendering 3.0 - page 12, listing 2\n// https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\nvar V_GGX_SmithCorrelated = new ShaderNode(function (inputs) {\n  var alpha = inputs.alpha,\n      dotNL = inputs.dotNL,\n      dotNV = inputs.dotNV;\n  var a2 = pow2(alpha);\n  var gv = mul(dotNL, sqrt(add(a2, mul(sub(1.0, a2), pow2(dotNV)))));\n  var gl = mul(dotNV, sqrt(add(a2, mul(sub(1.0, a2), pow2(dotNL)))));\n  return div(0.5, max(add(gv, gl), EPSILON));\n}); // validated\n// Microfacet Models for Refraction through Rough Surfaces - equation (33)\n// http://graphicrants.blogspot.com/2013/08/specular-brdf-reference.html\n// alpha is \"roughness squared\" in Disney’s reparameterization\n\nvar D_GGX = new ShaderNode(function (inputs) {\n  var alpha = inputs.alpha,\n      dotNH = inputs.dotNH;\n  var a2 = pow2(alpha);\n  var denom = add(mul(pow2(dotNH), sub(a2, 1.0)), 1.0); // avoid alpha = 0 with dotNH = 1\n\n  return mul(1 / Math.PI, div(a2, pow2(denom)));\n}); // validated\n// GGX Distribution, Schlick Fresnel, GGX_SmithCorrelated Visibility\n\nvar BRDF_GGX = new ShaderNode(function (inputs) {\n  var lightDirection = inputs.lightDirection,\n      f0 = inputs.f0,\n      f90 = inputs.f90,\n      roughness = inputs.roughness;\n  var alpha = pow2(roughness); // UE4's roughness\n\n  var halfDir = normalize(add(lightDirection, positionViewDirection));\n  var dotNL = saturate(dot(transformedNormalView, lightDirection));\n  var dotNV = saturate(dot(transformedNormalView, positionViewDirection));\n  var dotNH = saturate(dot(transformedNormalView, halfDir));\n  var dotVH = saturate(dot(positionViewDirection, halfDir));\n  var F = F_Schlick({\n    f0: f0,\n    f90: f90,\n    dotVH: dotVH\n  });\n  var V = V_GGX_SmithCorrelated({\n    alpha: alpha,\n    dotNL: dotNL,\n    dotNV: dotNV\n  });\n  var D = D_GGX({\n    alpha: alpha,\n    dotNH: dotNH\n  });\n  return mul(F, mul(V, D));\n}); // validated\n\nvar RE_Direct_Physical = new ShaderNode(function (inputs) {\n  var lightDirection = inputs.lightDirection,\n      lightColor = inputs.lightColor,\n      directDiffuse = inputs.directDiffuse,\n      directSpecular = inputs.directSpecular;\n  var dotNL = saturate(dot(transformedNormalView, lightDirection));\n  var irradiance = mul(dotNL, lightColor);\n  irradiance = mul(irradiance, Math.PI); // punctual light\n\n  addTo(directDiffuse, mul(irradiance, BRDF_Lambert({\n    diffuseColor: diffuseColor.rgb\n  })));\n  addTo(directSpecular, mul(irradiance, BRDF_GGX({\n    lightDirection: lightDirection,\n    f0: specularColor,\n    f90: 1,\n    roughness: roughness\n  })));\n});\nvar PhysicalLightingModel = new ShaderNode(function (inputs\n/*, builder*/\n) {\n  // PHYSICALLY_CORRECT_LIGHTS <-> builder.renderer.physicallyCorrectLights === true\n  RE_Direct_Physical(inputs);\n});\nexport { BRDF_GGX, BRDF_Lambert, D_GGX, F_Schlick, PhysicalLightingModel, RE_Direct_Physical, V_GGX_SmithCorrelated, getDistanceAttenuation };","map":{"version":3,"names":["ShaderNode","exp2","mul","sub","add","cond","pow","saturate","div","negate","and","greaterThan","pow2","sqrt","max","EPSILON","normalize","positionViewDirection","dot","transformedNormalView","addTo","diffuseColor","specularColor","roughness","F_Schlick","inputs","f0","f90","dotVH","fresnel","BRDF_Lambert","Math","PI","getDistanceAttenuation","lightDistance","cutoffDistance","decayExponent","V_GGX_SmithCorrelated","alpha","dotNL","dotNV","a2","gv","gl","D_GGX","dotNH","denom","BRDF_GGX","lightDirection","halfDir","F","V","D","RE_Direct_Physical","lightColor","directDiffuse","directSpecular","irradiance","rgb","PhysicalLightingModel"],"sources":["C:/Users/Arnav/Downloads/l4fycy/node_modules/three-stdlib/nodes/functions/BSDFs.js"],"sourcesContent":["import { ShaderNode, exp2, mul, sub, add, cond, pow, saturate, div, negate, and, greaterThan, pow2, sqrt, max, EPSILON, normalize, positionViewDirection, dot, transformedNormalView, addTo, diffuseColor, specularColor, roughness } from '../ShaderNode.js';\n\nconst F_Schlick = new ShaderNode(inputs => {\n  const {\n    f0,\n    f90,\n    dotVH\n  } = inputs; // Original approximation by Christophe Schlick '94\n  // float fresnel = pow( 1.0 - dotVH, 5.0 );\n  // Optimized variant (presented by Epic at SIGGRAPH '13)\n  // https://cdn2.unrealengine.com/Resources/files/2013SiggraphPresentationsNotes-26915738.pdf\n\n  const fresnel = exp2(mul(sub(mul(-5.55473, dotVH), 6.98316), dotVH));\n  return add(mul(f0, sub(1.0, fresnel)), mul(f90, fresnel));\n}); // validated\n\nconst BRDF_Lambert = new ShaderNode(inputs => {\n  return mul(1 / Math.PI, inputs.diffuseColor); // punctual light\n}); // validated\n\nconst getDistanceAttenuation = new ShaderNode(inputs => {\n  const {\n    lightDistance,\n    cutoffDistance,\n    decayExponent\n  } = inputs;\n  return cond(and(greaterThan(cutoffDistance, 0), greaterThan(decayExponent, 0)), pow(saturate(add(div(negate(lightDistance), cutoffDistance), 1.0)), decayExponent), 1.0);\n}); // validated\n//\n// STANDARD\n//\n// Moving Frostbite to Physically Based Rendering 3.0 - page 12, listing 2\n// https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\nconst V_GGX_SmithCorrelated = new ShaderNode(inputs => {\n  const {\n    alpha,\n    dotNL,\n    dotNV\n  } = inputs;\n  const a2 = pow2(alpha);\n  const gv = mul(dotNL, sqrt(add(a2, mul(sub(1.0, a2), pow2(dotNV)))));\n  const gl = mul(dotNV, sqrt(add(a2, mul(sub(1.0, a2), pow2(dotNL)))));\n  return div(0.5, max(add(gv, gl), EPSILON));\n}); // validated\n// Microfacet Models for Refraction through Rough Surfaces - equation (33)\n// http://graphicrants.blogspot.com/2013/08/specular-brdf-reference.html\n// alpha is \"roughness squared\" in Disney’s reparameterization\n\nconst D_GGX = new ShaderNode(inputs => {\n  const {\n    alpha,\n    dotNH\n  } = inputs;\n  const a2 = pow2(alpha);\n  const denom = add(mul(pow2(dotNH), sub(a2, 1.0)), 1.0); // avoid alpha = 0 with dotNH = 1\n\n  return mul(1 / Math.PI, div(a2, pow2(denom)));\n}); // validated\n// GGX Distribution, Schlick Fresnel, GGX_SmithCorrelated Visibility\n\nconst BRDF_GGX = new ShaderNode(inputs => {\n  const {\n    lightDirection,\n    f0,\n    f90,\n    roughness\n  } = inputs;\n  const alpha = pow2(roughness); // UE4's roughness\n\n  const halfDir = normalize(add(lightDirection, positionViewDirection));\n  const dotNL = saturate(dot(transformedNormalView, lightDirection));\n  const dotNV = saturate(dot(transformedNormalView, positionViewDirection));\n  const dotNH = saturate(dot(transformedNormalView, halfDir));\n  const dotVH = saturate(dot(positionViewDirection, halfDir));\n  const F = F_Schlick({\n    f0,\n    f90,\n    dotVH\n  });\n  const V = V_GGX_SmithCorrelated({\n    alpha,\n    dotNL,\n    dotNV\n  });\n  const D = D_GGX({\n    alpha,\n    dotNH\n  });\n  return mul(F, mul(V, D));\n}); // validated\n\nconst RE_Direct_Physical = new ShaderNode(inputs => {\n  const {\n    lightDirection,\n    lightColor,\n    directDiffuse,\n    directSpecular\n  } = inputs;\n  const dotNL = saturate(dot(transformedNormalView, lightDirection));\n  let irradiance = mul(dotNL, lightColor);\n  irradiance = mul(irradiance, Math.PI); // punctual light\n\n  addTo(directDiffuse, mul(irradiance, BRDF_Lambert({\n    diffuseColor: diffuseColor.rgb\n  })));\n  addTo(directSpecular, mul(irradiance, BRDF_GGX({\n    lightDirection,\n    f0: specularColor,\n    f90: 1,\n    roughness\n  })));\n});\nconst PhysicalLightingModel = new ShaderNode((inputs\n/*, builder*/\n) => {\n  // PHYSICALLY_CORRECT_LIGHTS <-> builder.renderer.physicallyCorrectLights === true\n  RE_Direct_Physical(inputs);\n});\n\nexport { BRDF_GGX, BRDF_Lambert, D_GGX, F_Schlick, PhysicalLightingModel, RE_Direct_Physical, V_GGX_SmithCorrelated, getDistanceAttenuation };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}