{"ast":null,"code":"import { intersectTri } from './ThreeRayIntersectUtilities.js';\nexport function intersectTris(geo, side, ray, offset, count, intersections) {\n  for (var i = offset, end = offset + count; i < end; i++) {\n    intersectTri(geo, side, ray, i, intersections);\n  }\n}\nexport function intersectClosestTri(geo, side, ray, offset, count) {\n  var dist = Infinity;\n  var res = null;\n\n  for (var i = offset, end = offset + count; i < end; i++) {\n    var intersection = intersectTri(geo, side, ray, i);\n\n    if (intersection && intersection.distance < dist) {\n      res = intersection;\n      dist = intersection.distance;\n    }\n  }\n\n  return res;\n} // converts the given BVH raycast intersection to align with the three.js raycast\n// structure (include object, world space distance and point).\n\nexport function convertRaycastIntersect(hit, object, raycaster) {\n  if (hit === null) {\n    return null;\n  }\n\n  hit.point.applyMatrix4(object.matrixWorld);\n  hit.distance = hit.point.distanceTo(raycaster.ray.origin);\n  hit.object = object;\n\n  if (hit.distance < raycaster.near || hit.distance > raycaster.far) {\n    return null;\n  } else {\n    return hit;\n  }\n}","map":{"version":3,"names":["intersectTri","intersectTris","geo","side","ray","offset","count","intersections","i","end","intersectClosestTri","dist","Infinity","res","intersection","distance","convertRaycastIntersect","hit","object","raycaster","point","applyMatrix4","matrixWorld","distanceTo","origin","near","far"],"sources":["D:/Jord/l4fycy/node_modules/three-mesh-bvh/src/utils/GeometryRayIntersectUtilities.js"],"sourcesContent":["import { intersectTri } from './ThreeRayIntersectUtilities.js';\n\nexport function intersectTris( geo, side, ray, offset, count, intersections ) {\n\n\tfor ( let i = offset, end = offset + count; i < end; i ++ ) {\n\n\t\tintersectTri( geo, side, ray, i, intersections );\n\n\t}\n\n}\n\nexport function intersectClosestTri( geo, side, ray, offset, count ) {\n\n\tlet dist = Infinity;\n\tlet res = null;\n\tfor ( let i = offset, end = offset + count; i < end; i ++ ) {\n\n\t\tconst intersection = intersectTri( geo, side, ray, i );\n\t\tif ( intersection && intersection.distance < dist ) {\n\n\t\t\tres = intersection;\n\t\t\tdist = intersection.distance;\n\n\t\t}\n\n\t}\n\n\treturn res;\n\n}\n\n// converts the given BVH raycast intersection to align with the three.js raycast\n// structure (include object, world space distance and point).\nexport function convertRaycastIntersect( hit, object, raycaster ) {\n\n\tif ( hit === null ) {\n\n\t\treturn null;\n\n\t}\n\n\thit.point.applyMatrix4( object.matrixWorld );\n\thit.distance = hit.point.distanceTo( raycaster.ray.origin );\n\thit.object = object;\n\n\tif ( hit.distance < raycaster.near || hit.distance > raycaster.far ) {\n\n\t\treturn null;\n\n\t} else {\n\n\t\treturn hit;\n\n\t}\n\n}\n"],"mappings":"AAAA,SAASA,YAAT,QAA6B,iCAA7B;AAEA,OAAO,SAASC,aAAT,CAAwBC,GAAxB,EAA6BC,IAA7B,EAAmCC,GAAnC,EAAwCC,MAAxC,EAAgDC,KAAhD,EAAuDC,aAAvD,EAAuE;EAE7E,KAAM,IAAIC,CAAC,GAAGH,MAAR,EAAgBI,GAAG,GAAGJ,MAAM,GAAGC,KAArC,EAA4CE,CAAC,GAAGC,GAAhD,EAAqDD,CAAC,EAAtD,EAA4D;IAE3DR,YAAY,CAAEE,GAAF,EAAOC,IAAP,EAAaC,GAAb,EAAkBI,CAAlB,EAAqBD,aAArB,CAAZ;EAEA;AAED;AAED,OAAO,SAASG,mBAAT,CAA8BR,GAA9B,EAAmCC,IAAnC,EAAyCC,GAAzC,EAA8CC,MAA9C,EAAsDC,KAAtD,EAA8D;EAEpE,IAAIK,IAAI,GAAGC,QAAX;EACA,IAAIC,GAAG,GAAG,IAAV;;EACA,KAAM,IAAIL,CAAC,GAAGH,MAAR,EAAgBI,GAAG,GAAGJ,MAAM,GAAGC,KAArC,EAA4CE,CAAC,GAAGC,GAAhD,EAAqDD,CAAC,EAAtD,EAA4D;IAE3D,IAAMM,YAAY,GAAGd,YAAY,CAAEE,GAAF,EAAOC,IAAP,EAAaC,GAAb,EAAkBI,CAAlB,CAAjC;;IACA,IAAKM,YAAY,IAAIA,YAAY,CAACC,QAAb,GAAwBJ,IAA7C,EAAoD;MAEnDE,GAAG,GAAGC,YAAN;MACAH,IAAI,GAAGG,YAAY,CAACC,QAApB;IAEA;EAED;;EAED,OAAOF,GAAP;AAEA,C,CAED;AACA;;AACA,OAAO,SAASG,uBAAT,CAAkCC,GAAlC,EAAuCC,MAAvC,EAA+CC,SAA/C,EAA2D;EAEjE,IAAKF,GAAG,KAAK,IAAb,EAAoB;IAEnB,OAAO,IAAP;EAEA;;EAEDA,GAAG,CAACG,KAAJ,CAAUC,YAAV,CAAwBH,MAAM,CAACI,WAA/B;EACAL,GAAG,CAACF,QAAJ,GAAeE,GAAG,CAACG,KAAJ,CAAUG,UAAV,CAAsBJ,SAAS,CAACf,GAAV,CAAcoB,MAApC,CAAf;EACAP,GAAG,CAACC,MAAJ,GAAaA,MAAb;;EAEA,IAAKD,GAAG,CAACF,QAAJ,GAAeI,SAAS,CAACM,IAAzB,IAAiCR,GAAG,CAACF,QAAJ,GAAeI,SAAS,CAACO,GAA/D,EAAqE;IAEpE,OAAO,IAAP;EAEA,CAJD,MAIO;IAEN,OAAOT,GAAP;EAEA;AAED"},"metadata":{},"sourceType":"module"}