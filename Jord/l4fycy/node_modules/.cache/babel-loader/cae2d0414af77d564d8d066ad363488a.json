{"ast":null,"code":"/**\r\n * Two pass Gaussian blur filter (horizontal and vertical blur shaders)\r\n * - described in http://www.gamerendering.com/2008/10/11/gaussian-blur-filter-shader/\r\n *   and used in http://www.cake23.de/traveling-wavefronts-lit-up.html\r\n *\r\n * - 9 samples per pass\r\n * - standard deviation 2.7\r\n * - \"h\" and \"v\" parameters should be set to \"1 / width\" and \"1 / height\"\r\n */\nvar VerticalBlurShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    v: {\n      value: 1.0 / 512.0\n    }\n  },\n  vertexShader:\n  /* glsl */\n  \"\\n    varying vec2 vUv;\\n\\n    void main() {\\n\\n      vUv = uv;\\n      gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\n    }\\n  \",\n  fragmentShader:\n  /* glsl */\n  \"\\n\\n  uniform sampler2D tDiffuse;\\n  uniform float v;\\n\\n  varying vec2 vUv;\\n\\n  void main() {\\n\\n    vec4 sum = vec4( 0.0 );\\n\\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * v ) ) * 0.051;\\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * v ) ) * 0.0918;\\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * v ) ) * 0.12245;\\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * v ) ) * 0.1531;\\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;\\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * v ) ) * 0.1531;\\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * v ) ) * 0.12245;\\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * v ) ) * 0.0918;\\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * v ) ) * 0.051;\\n\\n    gl_FragColor = sum;\\n\\n  }\\n  \"\n};\nexport { VerticalBlurShader };","map":{"version":3,"names":["VerticalBlurShader","uniforms","tDiffuse","value","v","vertexShader","fragmentShader"],"sources":["D:/Github/NIKE-DJANGO/Jord/l4fycy/node_modules/three-stdlib/shaders/VerticalBlurShader.js"],"sourcesContent":["/**\r\n * Two pass Gaussian blur filter (horizontal and vertical blur shaders)\r\n * - described in http://www.gamerendering.com/2008/10/11/gaussian-blur-filter-shader/\r\n *   and used in http://www.cake23.de/traveling-wavefronts-lit-up.html\r\n *\r\n * - 9 samples per pass\r\n * - standard deviation 2.7\r\n * - \"h\" and \"v\" parameters should be set to \"1 / width\" and \"1 / height\"\r\n */\r\nconst VerticalBlurShader = {\r\n  uniforms: {\r\n    tDiffuse: {\r\n      value: null\r\n    },\r\n    v: {\r\n      value: 1.0 / 512.0\r\n    }\r\n  },\r\n  vertexShader:\r\n  /* glsl */\r\n  `\r\n    varying vec2 vUv;\r\n\r\n    void main() {\r\n\r\n      vUv = uv;\r\n      gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n\r\n    }\r\n  `,\r\n  fragmentShader:\r\n  /* glsl */\r\n  `\r\n\r\n  uniform sampler2D tDiffuse;\r\n  uniform float v;\r\n\r\n  varying vec2 vUv;\r\n\r\n  void main() {\r\n\r\n    vec4 sum = vec4( 0.0 );\r\n\r\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * v ) ) * 0.051;\r\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * v ) ) * 0.0918;\r\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * v ) ) * 0.12245;\r\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * v ) ) * 0.1531;\r\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;\r\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * v ) ) * 0.1531;\r\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * v ) ) * 0.12245;\r\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * v ) ) * 0.0918;\r\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * v ) ) * 0.051;\r\n\r\n    gl_FragColor = sum;\r\n\r\n  }\r\n  `\r\n};\r\n\r\nexport { VerticalBlurShader };\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMA,kBAAkB,GAAG;EACzBC,QAAQ,EAAE;IACRC,QAAQ,EAAE;MACRC,KAAK,EAAE;IADC,CADF;IAIRC,CAAC,EAAE;MACDD,KAAK,EAAE,MAAM;IADZ;EAJK,CADe;EASzBE,YAAY;EACZ;EADY,+JATa;EAqBzBC,cAAc;EACd;EADc;AArBW,CAA3B;AAkDA,SAASN,kBAAT"},"metadata":{},"sourceType":"module"}