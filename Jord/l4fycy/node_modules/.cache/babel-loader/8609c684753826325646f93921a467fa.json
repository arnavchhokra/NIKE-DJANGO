{"ast":null,"code":"import { Object3D, Vector3, Quaternion, Matrix4, Mesh, Euler, Bone, MeshBasicMaterial, Color, BoxGeometry, SphereGeometry, CylinderGeometry } from 'three';\n/**\n * Dependencies\n *  - Ammo.js https://github.com/kripken/ammo.js\n *\n * MMDPhysics calculates physics with Ammo(Bullet based JavaScript Physics engine)\n * for MMD model loaded by MMDLoader.\n *\n * TODO\n *  - Physics in Worker\n */\n\n/* global Ammo */\n\nvar MMDPhysics = function () {\n  /**\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Array<Object>} rigidBodyParams\n   * @param {Array<Object>} (optional) constraintParams\n   * @param {Object} params - (optional)\n   * @param {Number} params.unitStep - Default is 1 / 65.\n   * @param {Integer} params.maxStepNum - Default is 3.\n   * @param {Vector3} params.gravity - Default is ( 0, - 9.8 * 10, 0 )\n   */\n  function MMDPhysics(mesh, rigidBodyParams, constraintParams, params) {\n    if (typeof Ammo === 'undefined') {\n      throw new Error('THREE.MMDPhysics: Import ammo.js https://github.com/kripken/ammo.js');\n    }\n\n    constraintParams = constraintParams || [];\n    params = params || {};\n    this.manager = new ResourceManager();\n    this.mesh = mesh;\n    /*\n     * I don't know why but 1/60 unitStep easily breaks models\n     * so I set it 1/65 so far.\n     * Don't set too small unitStep because\n     * the smaller unitStep can make the performance worse.\n     */\n\n    this.unitStep = params.unitStep !== undefined ? params.unitStep : 1 / 65;\n    this.maxStepNum = params.maxStepNum !== undefined ? params.maxStepNum : 3;\n    this.gravity = new Vector3(0, -9.8 * 10, 0);\n    if (params.gravity !== undefined) this.gravity.copy(params.gravity);\n    this.world = params.world !== undefined ? params.world : null; // experimental\n\n    this.bodies = [];\n    this.constraints = [];\n\n    this._init(mesh, rigidBodyParams, constraintParams);\n  }\n\n  MMDPhysics.prototype = {\n    constructor: MMDPhysics,\n\n    /**\n     * Advances Physics calculation and updates bones.\n     *\n     * @param {Number} delta - time in second\n     * @return {MMDPhysics}\n     */\n    update: function update(delta) {\n      var manager = this.manager;\n      var mesh = this.mesh; // rigid bodies and constrains are for\n      // mesh's world scale (1, 1, 1).\n      // Convert to (1, 1, 1) if it isn't.\n\n      var isNonDefaultScale = false;\n      var position = manager.allocThreeVector3();\n      var quaternion = manager.allocThreeQuaternion();\n      var scale = manager.allocThreeVector3();\n      mesh.matrixWorld.decompose(position, quaternion, scale);\n\n      if (scale.x !== 1 || scale.y !== 1 || scale.z !== 1) {\n        isNonDefaultScale = true;\n      }\n\n      var parent;\n\n      if (isNonDefaultScale) {\n        parent = mesh.parent;\n        if (parent !== null) mesh.parent = null;\n        scale.copy(this.mesh.scale);\n        mesh.scale.set(1, 1, 1);\n        mesh.updateMatrixWorld(true);\n      } // calculate physics and update bones\n\n\n      this._updateRigidBodies();\n\n      this._stepSimulation(delta);\n\n      this._updateBones(); // restore mesh if converted above\n\n\n      if (isNonDefaultScale) {\n        if (parent !== null) mesh.parent = parent;\n        mesh.scale.copy(scale);\n      }\n\n      manager.freeThreeVector3(scale);\n      manager.freeThreeQuaternion(quaternion);\n      manager.freeThreeVector3(position);\n      return this;\n    },\n\n    /**\n     * Resets rigid bodies transorm to current bone's.\n     *\n     * @return {MMDPhysics}\n     */\n    reset: function reset() {\n      for (var i = 0, il = this.bodies.length; i < il; i++) {\n        this.bodies[i].reset();\n      }\n\n      return this;\n    },\n\n    /**\n     * Warm ups Rigid bodies. Calculates cycles steps.\n     *\n     * @param {Integer} cycles\n     * @return {MMDPhysics}\n     */\n    warmup: function warmup(cycles) {\n      for (var i = 0; i < cycles; i++) {\n        this.update(1 / 60);\n      }\n\n      return this;\n    },\n\n    /**\n     * Sets gravity.\n     *\n     * @param {Vector3} gravity\n     * @return {MMDPhysicsHelper}\n     */\n    setGravity: function setGravity(gravity) {\n      this.world.setGravity(new Ammo.btVector3(gravity.x, gravity.y, gravity.z));\n      this.gravity.copy(gravity);\n      return this;\n    },\n\n    /**\n     * Creates MMDPhysicsHelper\n     *\n     * @return {MMDPhysicsHelper}\n     */\n    createHelper: function createHelper() {\n      return new MMDPhysicsHelper(this.mesh, this);\n    },\n    // private methods\n    _init: function _init(mesh, rigidBodyParams, constraintParams) {\n      var manager = this.manager; // rigid body/constraint parameters are for\n      // mesh's default world transform as position(0, 0, 0),\n      // quaternion(0, 0, 0, 1) and scale(0, 0, 0)\n\n      var parent = mesh.parent;\n      if (parent !== null) parent = null;\n      var currentPosition = manager.allocThreeVector3();\n      var currentQuaternion = manager.allocThreeQuaternion();\n      var currentScale = manager.allocThreeVector3();\n      currentPosition.copy(mesh.position);\n      currentQuaternion.copy(mesh.quaternion);\n      currentScale.copy(mesh.scale);\n      mesh.position.set(0, 0, 0);\n      mesh.quaternion.set(0, 0, 0, 1);\n      mesh.scale.set(1, 1, 1);\n      mesh.updateMatrixWorld(true);\n\n      if (this.world === null) {\n        this.world = this._createWorld();\n        this.setGravity(this.gravity);\n      }\n\n      this._initRigidBodies(rigidBodyParams);\n\n      this._initConstraints(constraintParams);\n\n      if (parent !== null) mesh.parent = parent;\n      mesh.position.copy(currentPosition);\n      mesh.quaternion.copy(currentQuaternion);\n      mesh.scale.copy(currentScale);\n      mesh.updateMatrixWorld(true);\n      this.reset();\n      manager.freeThreeVector3(currentPosition);\n      manager.freeThreeQuaternion(currentQuaternion);\n      manager.freeThreeVector3(currentScale);\n    },\n    _createWorld: function _createWorld() {\n      var config = new Ammo.btDefaultCollisionConfiguration();\n      var dispatcher = new Ammo.btCollisionDispatcher(config);\n      var cache = new Ammo.btDbvtBroadphase();\n      var solver = new Ammo.btSequentialImpulseConstraintSolver();\n      var world = new Ammo.btDiscreteDynamicsWorld(dispatcher, cache, solver, config);\n      return world;\n    },\n    _initRigidBodies: function _initRigidBodies(rigidBodies) {\n      for (var i = 0, il = rigidBodies.length; i < il; i++) {\n        this.bodies.push(new RigidBody(this.mesh, this.world, rigidBodies[i], this.manager));\n      }\n    },\n    _initConstraints: function _initConstraints(constraints) {\n      for (var i = 0, il = constraints.length; i < il; i++) {\n        var params = constraints[i];\n        var bodyA = this.bodies[params.rigidBodyIndex1];\n        var bodyB = this.bodies[params.rigidBodyIndex2];\n        this.constraints.push(new Constraint(this.mesh, this.world, bodyA, bodyB, params, this.manager));\n      }\n    },\n    _stepSimulation: function _stepSimulation(delta) {\n      var unitStep = this.unitStep;\n      var stepTime = delta;\n      var maxStepNum = (delta / unitStep | 0) + 1;\n\n      if (stepTime < unitStep) {\n        stepTime = unitStep;\n        maxStepNum = 1;\n      }\n\n      if (maxStepNum > this.maxStepNum) {\n        maxStepNum = this.maxStepNum;\n      }\n\n      this.world.stepSimulation(stepTime, maxStepNum, unitStep);\n    },\n    _updateRigidBodies: function _updateRigidBodies() {\n      for (var i = 0, il = this.bodies.length; i < il; i++) {\n        this.bodies[i].updateFromBone();\n      }\n    },\n    _updateBones: function _updateBones() {\n      for (var i = 0, il = this.bodies.length; i < il; i++) {\n        this.bodies[i].updateBone();\n      }\n    }\n  };\n  /**\n   * This manager's responsibilies are\n   *\n   * 1. manage Ammo.js and Three.js object resources and\n   *    improve the performance and the memory consumption by\n   *    reusing objects.\n   *\n   * 2. provide simple Ammo object operations.\n   */\n\n  function ResourceManager() {\n    // for Three.js\n    this.threeVector3s = [];\n    this.threeMatrix4s = [];\n    this.threeQuaternions = [];\n    this.threeEulers = []; // for Ammo.js\n\n    this.transforms = [];\n    this.quaternions = [];\n    this.vector3s = [];\n  }\n\n  ResourceManager.prototype = {\n    constructor: ResourceManager,\n    allocThreeVector3: function allocThreeVector3() {\n      return this.threeVector3s.length > 0 ? this.threeVector3s.pop() : new Vector3();\n    },\n    freeThreeVector3: function freeThreeVector3(v) {\n      this.threeVector3s.push(v);\n    },\n    allocThreeMatrix4: function allocThreeMatrix4() {\n      return this.threeMatrix4s.length > 0 ? this.threeMatrix4s.pop() : new Matrix4();\n    },\n    freeThreeMatrix4: function freeThreeMatrix4(m) {\n      this.threeMatrix4s.push(m);\n    },\n    allocThreeQuaternion: function allocThreeQuaternion() {\n      return this.threeQuaternions.length > 0 ? this.threeQuaternions.pop() : new Quaternion();\n    },\n    freeThreeQuaternion: function freeThreeQuaternion(q) {\n      this.threeQuaternions.push(q);\n    },\n    allocThreeEuler: function allocThreeEuler() {\n      return this.threeEulers.length > 0 ? this.threeEulers.pop() : new Euler();\n    },\n    freeThreeEuler: function freeThreeEuler(e) {\n      this.threeEulers.push(e);\n    },\n    allocTransform: function allocTransform() {\n      return this.transforms.length > 0 ? this.transforms.pop() : new Ammo.btTransform();\n    },\n    freeTransform: function freeTransform(t) {\n      this.transforms.push(t);\n    },\n    allocQuaternion: function allocQuaternion() {\n      return this.quaternions.length > 0 ? this.quaternions.pop() : new Ammo.btQuaternion();\n    },\n    freeQuaternion: function freeQuaternion(q) {\n      this.quaternions.push(q);\n    },\n    allocVector3: function allocVector3() {\n      return this.vector3s.length > 0 ? this.vector3s.pop() : new Ammo.btVector3();\n    },\n    freeVector3: function freeVector3(v) {\n      this.vector3s.push(v);\n    },\n    setIdentity: function setIdentity(t) {\n      t.setIdentity();\n    },\n    getBasis: function getBasis(t) {\n      var q = this.allocQuaternion();\n      t.getBasis().getRotation(q);\n      return q;\n    },\n    getBasisAsMatrix3: function getBasisAsMatrix3(t) {\n      var q = this.getBasis(t);\n      var m = this.quaternionToMatrix3(q);\n      this.freeQuaternion(q);\n      return m;\n    },\n    getOrigin: function getOrigin(t) {\n      return t.getOrigin();\n    },\n    setOrigin: function setOrigin(t, v) {\n      t.getOrigin().setValue(v.x(), v.y(), v.z());\n    },\n    copyOrigin: function copyOrigin(t1, t2) {\n      var o = t2.getOrigin();\n      this.setOrigin(t1, o);\n    },\n    setBasis: function setBasis(t, q) {\n      t.setRotation(q);\n    },\n    setBasisFromMatrix3: function setBasisFromMatrix3(t, m) {\n      var q = this.matrix3ToQuaternion(m);\n      this.setBasis(t, q);\n      this.freeQuaternion(q);\n    },\n    setOriginFromArray3: function setOriginFromArray3(t, a) {\n      t.getOrigin().setValue(a[0], a[1], a[2]);\n    },\n    setOriginFromThreeVector3: function setOriginFromThreeVector3(t, v) {\n      t.getOrigin().setValue(v.x, v.y, v.z);\n    },\n    setBasisFromArray3: function setBasisFromArray3(t, a) {\n      var thQ = this.allocThreeQuaternion();\n      var thE = this.allocThreeEuler();\n      thE.set(a[0], a[1], a[2]);\n      this.setBasisFromThreeQuaternion(t, thQ.setFromEuler(thE));\n      this.freeThreeEuler(thE);\n      this.freeThreeQuaternion(thQ);\n    },\n    setBasisFromThreeQuaternion: function setBasisFromThreeQuaternion(t, a) {\n      var q = this.allocQuaternion();\n      q.setX(a.x);\n      q.setY(a.y);\n      q.setZ(a.z);\n      q.setW(a.w);\n      this.setBasis(t, q);\n      this.freeQuaternion(q);\n    },\n    multiplyTransforms: function multiplyTransforms(t1, t2) {\n      var t = this.allocTransform();\n      this.setIdentity(t);\n      var m1 = this.getBasisAsMatrix3(t1);\n      var m2 = this.getBasisAsMatrix3(t2);\n      var o1 = this.getOrigin(t1);\n      var o2 = this.getOrigin(t2);\n      var v1 = this.multiplyMatrix3ByVector3(m1, o2);\n      var v2 = this.addVector3(v1, o1);\n      this.setOrigin(t, v2);\n      var m3 = this.multiplyMatrices3(m1, m2);\n      this.setBasisFromMatrix3(t, m3);\n      this.freeVector3(v1);\n      this.freeVector3(v2);\n      return t;\n    },\n    inverseTransform: function inverseTransform(t) {\n      var t2 = this.allocTransform();\n      var m1 = this.getBasisAsMatrix3(t);\n      var o = this.getOrigin(t);\n      var m2 = this.transposeMatrix3(m1);\n      var v1 = this.negativeVector3(o);\n      var v2 = this.multiplyMatrix3ByVector3(m2, v1);\n      this.setOrigin(t2, v2);\n      this.setBasisFromMatrix3(t2, m2);\n      this.freeVector3(v1);\n      this.freeVector3(v2);\n      return t2;\n    },\n    multiplyMatrices3: function multiplyMatrices3(m1, m2) {\n      var m3 = [];\n      var v10 = this.rowOfMatrix3(m1, 0);\n      var v11 = this.rowOfMatrix3(m1, 1);\n      var v12 = this.rowOfMatrix3(m1, 2);\n      var v20 = this.columnOfMatrix3(m2, 0);\n      var v21 = this.columnOfMatrix3(m2, 1);\n      var v22 = this.columnOfMatrix3(m2, 2);\n      m3[0] = this.dotVectors3(v10, v20);\n      m3[1] = this.dotVectors3(v10, v21);\n      m3[2] = this.dotVectors3(v10, v22);\n      m3[3] = this.dotVectors3(v11, v20);\n      m3[4] = this.dotVectors3(v11, v21);\n      m3[5] = this.dotVectors3(v11, v22);\n      m3[6] = this.dotVectors3(v12, v20);\n      m3[7] = this.dotVectors3(v12, v21);\n      m3[8] = this.dotVectors3(v12, v22);\n      this.freeVector3(v10);\n      this.freeVector3(v11);\n      this.freeVector3(v12);\n      this.freeVector3(v20);\n      this.freeVector3(v21);\n      this.freeVector3(v22);\n      return m3;\n    },\n    addVector3: function addVector3(v1, v2) {\n      var v = this.allocVector3();\n      v.setValue(v1.x() + v2.x(), v1.y() + v2.y(), v1.z() + v2.z());\n      return v;\n    },\n    dotVectors3: function dotVectors3(v1, v2) {\n      return v1.x() * v2.x() + v1.y() * v2.y() + v1.z() * v2.z();\n    },\n    rowOfMatrix3: function rowOfMatrix3(m, i) {\n      var v = this.allocVector3();\n      v.setValue(m[i * 3 + 0], m[i * 3 + 1], m[i * 3 + 2]);\n      return v;\n    },\n    columnOfMatrix3: function columnOfMatrix3(m, i) {\n      var v = this.allocVector3();\n      v.setValue(m[i + 0], m[i + 3], m[i + 6]);\n      return v;\n    },\n    negativeVector3: function negativeVector3(v) {\n      var v2 = this.allocVector3();\n      v2.setValue(-v.x(), -v.y(), -v.z());\n      return v2;\n    },\n    multiplyMatrix3ByVector3: function multiplyMatrix3ByVector3(m, v) {\n      var v4 = this.allocVector3();\n      var v0 = this.rowOfMatrix3(m, 0);\n      var v1 = this.rowOfMatrix3(m, 1);\n      var v2 = this.rowOfMatrix3(m, 2);\n      var x = this.dotVectors3(v0, v);\n      var y = this.dotVectors3(v1, v);\n      var z = this.dotVectors3(v2, v);\n      v4.setValue(x, y, z);\n      this.freeVector3(v0);\n      this.freeVector3(v1);\n      this.freeVector3(v2);\n      return v4;\n    },\n    transposeMatrix3: function transposeMatrix3(m) {\n      var m2 = [];\n      m2[0] = m[0];\n      m2[1] = m[3];\n      m2[2] = m[6];\n      m2[3] = m[1];\n      m2[4] = m[4];\n      m2[5] = m[7];\n      m2[6] = m[2];\n      m2[7] = m[5];\n      m2[8] = m[8];\n      return m2;\n    },\n    quaternionToMatrix3: function quaternionToMatrix3(q) {\n      var m = [];\n      var x = q.x();\n      var y = q.y();\n      var z = q.z();\n      var w = q.w();\n      var xx = x * x;\n      var yy = y * y;\n      var zz = z * z;\n      var xy = x * y;\n      var yz = y * z;\n      var zx = z * x;\n      var xw = x * w;\n      var yw = y * w;\n      var zw = z * w;\n      m[0] = 1 - 2 * (yy + zz);\n      m[1] = 2 * (xy - zw);\n      m[2] = 2 * (zx + yw);\n      m[3] = 2 * (xy + zw);\n      m[4] = 1 - 2 * (zz + xx);\n      m[5] = 2 * (yz - xw);\n      m[6] = 2 * (zx - yw);\n      m[7] = 2 * (yz + xw);\n      m[8] = 1 - 2 * (xx + yy);\n      return m;\n    },\n    matrix3ToQuaternion: function matrix3ToQuaternion(m) {\n      var t = m[0] + m[4] + m[8];\n      var s, x, y, z, w;\n\n      if (t > 0) {\n        s = Math.sqrt(t + 1.0) * 2;\n        w = 0.25 * s;\n        x = (m[7] - m[5]) / s;\n        y = (m[2] - m[6]) / s;\n        z = (m[3] - m[1]) / s;\n      } else if (m[0] > m[4] && m[0] > m[8]) {\n        s = Math.sqrt(1.0 + m[0] - m[4] - m[8]) * 2;\n        w = (m[7] - m[5]) / s;\n        x = 0.25 * s;\n        y = (m[1] + m[3]) / s;\n        z = (m[2] + m[6]) / s;\n      } else if (m[4] > m[8]) {\n        s = Math.sqrt(1.0 + m[4] - m[0] - m[8]) * 2;\n        w = (m[2] - m[6]) / s;\n        x = (m[1] + m[3]) / s;\n        y = 0.25 * s;\n        z = (m[5] + m[7]) / s;\n      } else {\n        s = Math.sqrt(1.0 + m[8] - m[0] - m[4]) * 2;\n        w = (m[3] - m[1]) / s;\n        x = (m[2] + m[6]) / s;\n        y = (m[5] + m[7]) / s;\n        z = 0.25 * s;\n      }\n\n      var q = this.allocQuaternion();\n      q.setX(x);\n      q.setY(y);\n      q.setZ(z);\n      q.setW(w);\n      return q;\n    }\n  };\n  /**\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Ammo.btDiscreteDynamicsWorld} world\n   * @param {Object} params\n   * @param {ResourceManager} manager\n   */\n\n  function RigidBody(mesh, world, params, manager) {\n    this.mesh = mesh;\n    this.world = world;\n    this.params = params;\n    this.manager = manager;\n    this.body = null;\n    this.bone = null;\n    this.boneOffsetForm = null;\n    this.boneOffsetFormInverse = null;\n\n    this._init();\n  }\n\n  RigidBody.prototype = {\n    constructor: MMDPhysics.RigidBody,\n\n    /**\n     * Resets rigid body transform to the current bone's.\n     *\n     * @return {RigidBody}\n     */\n    reset: function reset() {\n      this._setTransformFromBone();\n\n      return this;\n    },\n\n    /**\n     * Updates rigid body's transform from the current bone.\n     *\n     * @return {RidigBody}\n     */\n    updateFromBone: function updateFromBone() {\n      if (this.params.boneIndex !== -1 && this.params.type === 0) {\n        this._setTransformFromBone();\n      }\n\n      return this;\n    },\n\n    /**\n     * Updates bone from the current ridid body's transform.\n     *\n     * @return {RidigBody}\n     */\n    updateBone: function updateBone() {\n      if (this.params.type === 0 || this.params.boneIndex === -1) {\n        return this;\n      }\n\n      this._updateBoneRotation();\n\n      if (this.params.type === 1) {\n        this._updateBonePosition();\n      }\n\n      this.bone.updateMatrixWorld(true);\n\n      if (this.params.type === 2) {\n        this._setPositionFromBone();\n      }\n\n      return this;\n    },\n    // private methods\n    _init: function _init() {\n      function generateShape(p) {\n        switch (p.shapeType) {\n          case 0:\n            return new Ammo.btSphereShape(p.width);\n\n          case 1:\n            return new Ammo.btBoxShape(new Ammo.btVector3(p.width, p.height, p.depth));\n\n          case 2:\n            return new Ammo.btCapsuleShape(p.width, p.height);\n\n          default:\n            throw \"unknown shape type \".concat(p.shapeType);\n        }\n      }\n\n      var manager = this.manager;\n      var params = this.params;\n      var bones = this.mesh.skeleton.bones;\n      var bone = params.boneIndex === -1 ? new Bone() : bones[params.boneIndex];\n      var shape = generateShape(params);\n      var weight = params.type === 0 ? 0 : params.weight;\n      var localInertia = manager.allocVector3();\n      localInertia.setValue(0, 0, 0);\n\n      if (weight !== 0) {\n        shape.calculateLocalInertia(weight, localInertia);\n      }\n\n      var boneOffsetForm = manager.allocTransform();\n      manager.setIdentity(boneOffsetForm);\n      manager.setOriginFromArray3(boneOffsetForm, params.position);\n      manager.setBasisFromArray3(boneOffsetForm, params.rotation);\n      var vector = manager.allocThreeVector3();\n      var boneForm = manager.allocTransform();\n      manager.setIdentity(boneForm);\n      manager.setOriginFromThreeVector3(boneForm, bone.getWorldPosition(vector));\n      var form = manager.multiplyTransforms(boneForm, boneOffsetForm);\n      var state = new Ammo.btDefaultMotionState(form);\n      var info = new Ammo.btRigidBodyConstructionInfo(weight, state, shape, localInertia);\n      info.set_m_friction(params.friction);\n      info.set_m_restitution(params.restitution);\n      var body = new Ammo.btRigidBody(info);\n\n      if (params.type === 0) {\n        body.setCollisionFlags(body.getCollisionFlags() | 2);\n        /*\n         * It'd be better to comment out this line though in general I should call this method\n         * because I'm not sure why but physics will be more like MMD's\n         * if I comment out.\n         */\n\n        body.setActivationState(4);\n      }\n\n      body.setDamping(params.positionDamping, params.rotationDamping);\n      body.setSleepingThresholds(0, 0);\n      this.world.addRigidBody(body, 1 << params.groupIndex, params.groupTarget);\n      this.body = body;\n      this.bone = bone;\n      this.boneOffsetForm = boneOffsetForm;\n      this.boneOffsetFormInverse = manager.inverseTransform(boneOffsetForm);\n      manager.freeVector3(localInertia);\n      manager.freeTransform(form);\n      manager.freeTransform(boneForm);\n      manager.freeThreeVector3(vector);\n    },\n    _getBoneTransform: function _getBoneTransform() {\n      var manager = this.manager;\n      var p = manager.allocThreeVector3();\n      var q = manager.allocThreeQuaternion();\n      var s = manager.allocThreeVector3();\n      this.bone.matrixWorld.decompose(p, q, s);\n      var tr = manager.allocTransform();\n      manager.setOriginFromThreeVector3(tr, p);\n      manager.setBasisFromThreeQuaternion(tr, q);\n      var form = manager.multiplyTransforms(tr, this.boneOffsetForm);\n      manager.freeTransform(tr);\n      manager.freeThreeVector3(s);\n      manager.freeThreeQuaternion(q);\n      manager.freeThreeVector3(p);\n      return form;\n    },\n    _getWorldTransformForBone: function _getWorldTransformForBone() {\n      var manager = this.manager;\n      var tr = this.body.getCenterOfMassTransform();\n      return manager.multiplyTransforms(tr, this.boneOffsetFormInverse);\n    },\n    _setTransformFromBone: function _setTransformFromBone() {\n      var manager = this.manager;\n\n      var form = this._getBoneTransform(); // TODO: check the most appropriate way to set\n      //this.body.setWorldTransform( form );\n\n\n      this.body.setCenterOfMassTransform(form);\n      this.body.getMotionState().setWorldTransform(form);\n      manager.freeTransform(form);\n    },\n    _setPositionFromBone: function _setPositionFromBone() {\n      var manager = this.manager;\n\n      var form = this._getBoneTransform();\n\n      var tr = manager.allocTransform();\n      this.body.getMotionState().getWorldTransform(tr);\n      manager.copyOrigin(tr, form); // TODO: check the most appropriate way to set\n      //this.body.setWorldTransform( tr );\n\n      this.body.setCenterOfMassTransform(tr);\n      this.body.getMotionState().setWorldTransform(tr);\n      manager.freeTransform(tr);\n      manager.freeTransform(form);\n    },\n    _updateBoneRotation: function _updateBoneRotation() {\n      var manager = this.manager;\n\n      var tr = this._getWorldTransformForBone();\n\n      var q = manager.getBasis(tr);\n      var thQ = manager.allocThreeQuaternion();\n      var thQ2 = manager.allocThreeQuaternion();\n      var thQ3 = manager.allocThreeQuaternion();\n      thQ.set(q.x(), q.y(), q.z(), q.w());\n      thQ2.setFromRotationMatrix(this.bone.matrixWorld);\n      thQ2.conjugate();\n      thQ2.multiply(thQ); //this.bone.quaternion.multiply( thQ2 );\n\n      thQ3.setFromRotationMatrix(this.bone.matrix); // Renormalizing quaternion here because repeatedly transforming\n      // quaternion continuously accumulates floating point error and\n      // can end up being overflow. See #15335\n\n      this.bone.quaternion.copy(thQ2.multiply(thQ3).normalize());\n      manager.freeThreeQuaternion(thQ);\n      manager.freeThreeQuaternion(thQ2);\n      manager.freeThreeQuaternion(thQ3);\n      manager.freeQuaternion(q);\n      manager.freeTransform(tr);\n    },\n    _updateBonePosition: function _updateBonePosition() {\n      var manager = this.manager;\n\n      var tr = this._getWorldTransformForBone();\n\n      var thV = manager.allocThreeVector3();\n      var o = manager.getOrigin(tr);\n      thV.set(o.x(), o.y(), o.z());\n\n      if (this.bone.parent) {\n        this.bone.parent.worldToLocal(thV);\n      }\n\n      this.bone.position.copy(thV);\n      manager.freeThreeVector3(thV);\n      manager.freeTransform(tr);\n    }\n  };\n  /**\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Ammo.btDiscreteDynamicsWorld} world\n   * @param {RigidBody} bodyA\n   * @param {RigidBody} bodyB\n   * @param {Object} params\n   * @param {ResourceManager} manager\n   */\n\n  function Constraint(mesh, world, bodyA, bodyB, params, manager) {\n    this.mesh = mesh;\n    this.world = world;\n    this.bodyA = bodyA;\n    this.bodyB = bodyB;\n    this.params = params;\n    this.manager = manager;\n    this.constraint = null;\n\n    this._init();\n  }\n\n  Constraint.prototype = {\n    constructor: Constraint,\n    // private method\n    _init: function _init() {\n      var manager = this.manager;\n      var params = this.params;\n      var bodyA = this.bodyA;\n      var bodyB = this.bodyB;\n      var form = manager.allocTransform();\n      manager.setIdentity(form);\n      manager.setOriginFromArray3(form, params.position);\n      manager.setBasisFromArray3(form, params.rotation);\n      var formA = manager.allocTransform();\n      var formB = manager.allocTransform();\n      bodyA.body.getMotionState().getWorldTransform(formA);\n      bodyB.body.getMotionState().getWorldTransform(formB);\n      var formInverseA = manager.inverseTransform(formA);\n      var formInverseB = manager.inverseTransform(formB);\n      var formA2 = manager.multiplyTransforms(formInverseA, form);\n      var formB2 = manager.multiplyTransforms(formInverseB, form);\n      var constraint = new Ammo.btGeneric6DofSpringConstraint(bodyA.body, bodyB.body, formA2, formB2, true);\n      var lll = manager.allocVector3();\n      var lul = manager.allocVector3();\n      var all = manager.allocVector3();\n      var aul = manager.allocVector3();\n      lll.setValue(params.translationLimitation1[0], params.translationLimitation1[1], params.translationLimitation1[2]);\n      lul.setValue(params.translationLimitation2[0], params.translationLimitation2[1], params.translationLimitation2[2]);\n      all.setValue(params.rotationLimitation1[0], params.rotationLimitation1[1], params.rotationLimitation1[2]);\n      aul.setValue(params.rotationLimitation2[0], params.rotationLimitation2[1], params.rotationLimitation2[2]);\n      constraint.setLinearLowerLimit(lll);\n      constraint.setLinearUpperLimit(lul);\n      constraint.setAngularLowerLimit(all);\n      constraint.setAngularUpperLimit(aul);\n\n      for (var i = 0; i < 3; i++) {\n        if (params.springPosition[i] !== 0) {\n          constraint.enableSpring(i, true);\n          constraint.setStiffness(i, params.springPosition[i]);\n        }\n      }\n\n      for (var _i = 0; _i < 3; _i++) {\n        if (params.springRotation[_i] !== 0) {\n          constraint.enableSpring(_i + 3, true);\n          constraint.setStiffness(_i + 3, params.springRotation[_i]);\n        }\n      }\n      /*\n       * Currently(10/31/2016) official ammo.js doesn't support\n       * btGeneric6DofSpringConstraint.setParam method.\n       * You need custom ammo.js (add the method into idl) if you wanna use.\n       * By setting this parameter, physics will be more like MMD's\n       */\n\n\n      if (constraint.setParam !== undefined) {\n        for (var _i2 = 0; _i2 < 6; _i2++) {\n          // this parameter is from http://www20.atpages.jp/katwat/three.js_r58/examples/mytest37/mmd.three.js\n          constraint.setParam(2, 0.475, _i2);\n        }\n      }\n\n      this.world.addConstraint(constraint, true);\n      this.constraint = constraint;\n      manager.freeTransform(form);\n      manager.freeTransform(formA);\n      manager.freeTransform(formB);\n      manager.freeTransform(formInverseA);\n      manager.freeTransform(formInverseB);\n      manager.freeTransform(formA2);\n      manager.freeTransform(formB2);\n      manager.freeVector3(lll);\n      manager.freeVector3(lul);\n      manager.freeVector3(all);\n      manager.freeVector3(aul);\n    }\n  };\n  /**\n   * Visualize Rigid bodies\n   *\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Physics} physics\n   */\n\n  function MMDPhysicsHelper(mesh, physics) {\n    Object3D.call(this);\n    this.root = mesh;\n    this.physics = physics;\n    this.matrix.copy(mesh.matrixWorld);\n    this.matrixAutoUpdate = false;\n    this.materials = [];\n    this.materials.push(new MeshBasicMaterial({\n      color: new Color(0xff8888),\n      wireframe: true,\n      depthTest: false,\n      depthWrite: false,\n      opacity: 0.25,\n      transparent: true\n    }));\n    this.materials.push(new MeshBasicMaterial({\n      color: new Color(0x88ff88),\n      wireframe: true,\n      depthTest: false,\n      depthWrite: false,\n      opacity: 0.25,\n      transparent: true\n    }));\n    this.materials.push(new MeshBasicMaterial({\n      color: new Color(0x8888ff),\n      wireframe: true,\n      depthTest: false,\n      depthWrite: false,\n      opacity: 0.25,\n      transparent: true\n    }));\n\n    this._init();\n  }\n\n  MMDPhysicsHelper.prototype = Object.assign(Object.create(Object3D.prototype), {\n    constructor: MMDPhysicsHelper,\n\n    /**\n     * Updates Rigid Bodies visualization.\n     */\n    updateMatrixWorld: function () {\n      var position = new Vector3();\n      var quaternion = new Quaternion();\n      var scale = new Vector3();\n      var matrixWorldInv = new Matrix4();\n      return function updateMatrixWorld(force) {\n        var mesh = this.root;\n\n        if (this.visible) {\n          var bodies = this.physics.bodies;\n          matrixWorldInv.copy(mesh.matrixWorld).decompose(position, quaternion, scale).compose(position, quaternion, scale.set(1, 1, 1)).invert();\n\n          for (var i = 0, il = bodies.length; i < il; i++) {\n            var body = bodies[i].body;\n            var child = this.children[i];\n            var tr = body.getCenterOfMassTransform();\n            var origin = tr.getOrigin();\n            var rotation = tr.getRotation();\n            child.position.set(origin.x(), origin.y(), origin.z()).applyMatrix4(matrixWorldInv);\n            child.quaternion.setFromRotationMatrix(matrixWorldInv).multiply(quaternion.set(rotation.x(), rotation.y(), rotation.z(), rotation.w()));\n          }\n        }\n\n        this.matrix.copy(mesh.matrixWorld).decompose(position, quaternion, scale).compose(position, quaternion, scale.set(1, 1, 1));\n        Object3D.prototype.updateMatrixWorld.call(this, force);\n      };\n    }(),\n    // private method\n    _init: function _init() {\n      var bodies = this.physics.bodies;\n\n      function createGeometry(param) {\n        switch (param.shapeType) {\n          case 0:\n            return new SphereGeometry(param.width, 16, 8);\n\n          case 1:\n            return new BoxGeometry(param.width * 2, param.height * 2, param.depth * 2, 8, 8, 8);\n\n          case 2:\n            return new createCapsuleGeometry(param.width, param.height, 16, 8);\n\n          default:\n            return null;\n        }\n      } // copy from http://www20.atpages.jp/katwat/three.js_r58/examples/mytest37/mytest37.js?ver=20160815\n\n\n      function createCapsuleGeometry(radius, cylinderHeight, segmentsRadius, segmentsHeight) {\n        var geometry = new CylinderGeometry(radius, radius, cylinderHeight, segmentsRadius, segmentsHeight, true);\n        var upperSphere = new Mesh(new SphereGeometry(radius, segmentsRadius, segmentsHeight, 0, Math.PI * 2, 0, Math.PI / 2));\n        var lowerSphere = new Mesh(new SphereGeometry(radius, segmentsRadius, segmentsHeight, 0, Math.PI * 2, Math.PI / 2, Math.PI / 2));\n        upperSphere.position.set(0, cylinderHeight / 2, 0);\n        lowerSphere.position.set(0, -cylinderHeight / 2, 0);\n        upperSphere.updateMatrix();\n        lowerSphere.updateMatrix();\n        geometry.merge(upperSphere.geometry, upperSphere.matrix);\n        geometry.merge(lowerSphere.geometry, lowerSphere.matrix);\n        return geometry;\n      }\n\n      for (var i = 0, il = bodies.length; i < il; i++) {\n        var param = bodies[i].params;\n        this.add(new Mesh(createGeometry(param), this.materials[param.type]));\n      }\n    }\n  });\n  return MMDPhysics;\n}();\n\nexport { MMDPhysics };","map":{"version":3,"names":["Object3D","Vector3","Quaternion","Matrix4","Mesh","Euler","Bone","MeshBasicMaterial","Color","BoxGeometry","SphereGeometry","CylinderGeometry","MMDPhysics","mesh","rigidBodyParams","constraintParams","params","Ammo","Error","manager","ResourceManager","unitStep","undefined","maxStepNum","gravity","copy","world","bodies","constraints","_init","prototype","constructor","update","delta","isNonDefaultScale","position","allocThreeVector3","quaternion","allocThreeQuaternion","scale","matrixWorld","decompose","x","y","z","parent","set","updateMatrixWorld","_updateRigidBodies","_stepSimulation","_updateBones","freeThreeVector3","freeThreeQuaternion","reset","i","il","length","warmup","cycles","setGravity","btVector3","createHelper","MMDPhysicsHelper","currentPosition","currentQuaternion","currentScale","_createWorld","_initRigidBodies","_initConstraints","config","btDefaultCollisionConfiguration","dispatcher","btCollisionDispatcher","cache","btDbvtBroadphase","solver","btSequentialImpulseConstraintSolver","btDiscreteDynamicsWorld","rigidBodies","push","RigidBody","bodyA","rigidBodyIndex1","bodyB","rigidBodyIndex2","Constraint","stepTime","stepSimulation","updateFromBone","updateBone","threeVector3s","threeMatrix4s","threeQuaternions","threeEulers","transforms","quaternions","vector3s","pop","v","allocThreeMatrix4","freeThreeMatrix4","m","q","allocThreeEuler","freeThreeEuler","e","allocTransform","btTransform","freeTransform","t","allocQuaternion","btQuaternion","freeQuaternion","allocVector3","freeVector3","setIdentity","getBasis","getRotation","getBasisAsMatrix3","quaternionToMatrix3","getOrigin","setOrigin","setValue","copyOrigin","t1","t2","o","setBasis","setRotation","setBasisFromMatrix3","matrix3ToQuaternion","setOriginFromArray3","a","setOriginFromThreeVector3","setBasisFromArray3","thQ","thE","setBasisFromThreeQuaternion","setFromEuler","setX","setY","setZ","setW","w","multiplyTransforms","m1","m2","o1","o2","v1","multiplyMatrix3ByVector3","v2","addVector3","m3","multiplyMatrices3","inverseTransform","transposeMatrix3","negativeVector3","v10","rowOfMatrix3","v11","v12","v20","columnOfMatrix3","v21","v22","dotVectors3","v4","v0","xx","yy","zz","xy","yz","zx","xw","yw","zw","s","Math","sqrt","body","bone","boneOffsetForm","boneOffsetFormInverse","_setTransformFromBone","boneIndex","type","_updateBoneRotation","_updateBonePosition","_setPositionFromBone","generateShape","p","shapeType","btSphereShape","width","btBoxShape","height","depth","btCapsuleShape","bones","skeleton","shape","weight","localInertia","calculateLocalInertia","rotation","vector","boneForm","getWorldPosition","form","state","btDefaultMotionState","info","btRigidBodyConstructionInfo","set_m_friction","friction","set_m_restitution","restitution","btRigidBody","setCollisionFlags","getCollisionFlags","setActivationState","setDamping","positionDamping","rotationDamping","setSleepingThresholds","addRigidBody","groupIndex","groupTarget","_getBoneTransform","tr","_getWorldTransformForBone","getCenterOfMassTransform","setCenterOfMassTransform","getMotionState","setWorldTransform","getWorldTransform","thQ2","thQ3","setFromRotationMatrix","conjugate","multiply","matrix","normalize","thV","worldToLocal","constraint","formA","formB","formInverseA","formInverseB","formA2","formB2","btGeneric6DofSpringConstraint","lll","lul","all","aul","translationLimitation1","translationLimitation2","rotationLimitation1","rotationLimitation2","setLinearLowerLimit","setLinearUpperLimit","setAngularLowerLimit","setAngularUpperLimit","springPosition","enableSpring","setStiffness","springRotation","setParam","addConstraint","physics","call","root","matrixAutoUpdate","materials","color","wireframe","depthTest","depthWrite","opacity","transparent","Object","assign","create","matrixWorldInv","force","visible","compose","invert","child","children","origin","applyMatrix4","createGeometry","param","createCapsuleGeometry","radius","cylinderHeight","segmentsRadius","segmentsHeight","geometry","upperSphere","PI","lowerSphere","updateMatrix","merge","add"],"sources":["D:/Jord/l4fycy/node_modules/three-stdlib/animation/MMDPhysics.js"],"sourcesContent":["import { Object3D, Vector3, Quaternion, Matrix4, Mesh, Euler, Bone, MeshBasicMaterial, Color, BoxGeometry, SphereGeometry, CylinderGeometry } from 'three';\n\n/**\n * Dependencies\n *  - Ammo.js https://github.com/kripken/ammo.js\n *\n * MMDPhysics calculates physics with Ammo(Bullet based JavaScript Physics engine)\n * for MMD model loaded by MMDLoader.\n *\n * TODO\n *  - Physics in Worker\n */\n\n/* global Ammo */\n\nconst MMDPhysics = (() => {\n  /**\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Array<Object>} rigidBodyParams\n   * @param {Array<Object>} (optional) constraintParams\n   * @param {Object} params - (optional)\n   * @param {Number} params.unitStep - Default is 1 / 65.\n   * @param {Integer} params.maxStepNum - Default is 3.\n   * @param {Vector3} params.gravity - Default is ( 0, - 9.8 * 10, 0 )\n   */\n  function MMDPhysics(mesh, rigidBodyParams, constraintParams, params) {\n    if (typeof Ammo === 'undefined') {\n      throw new Error('THREE.MMDPhysics: Import ammo.js https://github.com/kripken/ammo.js');\n    }\n\n    constraintParams = constraintParams || [];\n    params = params || {};\n    this.manager = new ResourceManager();\n    this.mesh = mesh;\n    /*\n     * I don't know why but 1/60 unitStep easily breaks models\n     * so I set it 1/65 so far.\n     * Don't set too small unitStep because\n     * the smaller unitStep can make the performance worse.\n     */\n\n    this.unitStep = params.unitStep !== undefined ? params.unitStep : 1 / 65;\n    this.maxStepNum = params.maxStepNum !== undefined ? params.maxStepNum : 3;\n    this.gravity = new Vector3(0, -9.8 * 10, 0);\n    if (params.gravity !== undefined) this.gravity.copy(params.gravity);\n    this.world = params.world !== undefined ? params.world : null; // experimental\n\n    this.bodies = [];\n    this.constraints = [];\n\n    this._init(mesh, rigidBodyParams, constraintParams);\n  }\n\n  MMDPhysics.prototype = {\n    constructor: MMDPhysics,\n\n    /**\n     * Advances Physics calculation and updates bones.\n     *\n     * @param {Number} delta - time in second\n     * @return {MMDPhysics}\n     */\n    update: function (delta) {\n      const manager = this.manager;\n      const mesh = this.mesh; // rigid bodies and constrains are for\n      // mesh's world scale (1, 1, 1).\n      // Convert to (1, 1, 1) if it isn't.\n\n      let isNonDefaultScale = false;\n      const position = manager.allocThreeVector3();\n      const quaternion = manager.allocThreeQuaternion();\n      const scale = manager.allocThreeVector3();\n      mesh.matrixWorld.decompose(position, quaternion, scale);\n\n      if (scale.x !== 1 || scale.y !== 1 || scale.z !== 1) {\n        isNonDefaultScale = true;\n      }\n\n      let parent;\n\n      if (isNonDefaultScale) {\n        parent = mesh.parent;\n        if (parent !== null) mesh.parent = null;\n        scale.copy(this.mesh.scale);\n        mesh.scale.set(1, 1, 1);\n        mesh.updateMatrixWorld(true);\n      } // calculate physics and update bones\n\n\n      this._updateRigidBodies();\n\n      this._stepSimulation(delta);\n\n      this._updateBones(); // restore mesh if converted above\n\n\n      if (isNonDefaultScale) {\n        if (parent !== null) mesh.parent = parent;\n        mesh.scale.copy(scale);\n      }\n\n      manager.freeThreeVector3(scale);\n      manager.freeThreeQuaternion(quaternion);\n      manager.freeThreeVector3(position);\n      return this;\n    },\n\n    /**\n     * Resets rigid bodies transorm to current bone's.\n     *\n     * @return {MMDPhysics}\n     */\n    reset: function () {\n      for (let i = 0, il = this.bodies.length; i < il; i++) {\n        this.bodies[i].reset();\n      }\n\n      return this;\n    },\n\n    /**\n     * Warm ups Rigid bodies. Calculates cycles steps.\n     *\n     * @param {Integer} cycles\n     * @return {MMDPhysics}\n     */\n    warmup: function (cycles) {\n      for (let i = 0; i < cycles; i++) {\n        this.update(1 / 60);\n      }\n\n      return this;\n    },\n\n    /**\n     * Sets gravity.\n     *\n     * @param {Vector3} gravity\n     * @return {MMDPhysicsHelper}\n     */\n    setGravity: function (gravity) {\n      this.world.setGravity(new Ammo.btVector3(gravity.x, gravity.y, gravity.z));\n      this.gravity.copy(gravity);\n      return this;\n    },\n\n    /**\n     * Creates MMDPhysicsHelper\n     *\n     * @return {MMDPhysicsHelper}\n     */\n    createHelper: function () {\n      return new MMDPhysicsHelper(this.mesh, this);\n    },\n    // private methods\n    _init: function (mesh, rigidBodyParams, constraintParams) {\n      const manager = this.manager; // rigid body/constraint parameters are for\n      // mesh's default world transform as position(0, 0, 0),\n      // quaternion(0, 0, 0, 1) and scale(0, 0, 0)\n\n      let parent = mesh.parent;\n      if (parent !== null) parent = null;\n      const currentPosition = manager.allocThreeVector3();\n      const currentQuaternion = manager.allocThreeQuaternion();\n      const currentScale = manager.allocThreeVector3();\n      currentPosition.copy(mesh.position);\n      currentQuaternion.copy(mesh.quaternion);\n      currentScale.copy(mesh.scale);\n      mesh.position.set(0, 0, 0);\n      mesh.quaternion.set(0, 0, 0, 1);\n      mesh.scale.set(1, 1, 1);\n      mesh.updateMatrixWorld(true);\n\n      if (this.world === null) {\n        this.world = this._createWorld();\n        this.setGravity(this.gravity);\n      }\n\n      this._initRigidBodies(rigidBodyParams);\n\n      this._initConstraints(constraintParams);\n\n      if (parent !== null) mesh.parent = parent;\n      mesh.position.copy(currentPosition);\n      mesh.quaternion.copy(currentQuaternion);\n      mesh.scale.copy(currentScale);\n      mesh.updateMatrixWorld(true);\n      this.reset();\n      manager.freeThreeVector3(currentPosition);\n      manager.freeThreeQuaternion(currentQuaternion);\n      manager.freeThreeVector3(currentScale);\n    },\n    _createWorld: function () {\n      const config = new Ammo.btDefaultCollisionConfiguration();\n      const dispatcher = new Ammo.btCollisionDispatcher(config);\n      const cache = new Ammo.btDbvtBroadphase();\n      const solver = new Ammo.btSequentialImpulseConstraintSolver();\n      const world = new Ammo.btDiscreteDynamicsWorld(dispatcher, cache, solver, config);\n      return world;\n    },\n    _initRigidBodies: function (rigidBodies) {\n      for (let i = 0, il = rigidBodies.length; i < il; i++) {\n        this.bodies.push(new RigidBody(this.mesh, this.world, rigidBodies[i], this.manager));\n      }\n    },\n    _initConstraints: function (constraints) {\n      for (let i = 0, il = constraints.length; i < il; i++) {\n        const params = constraints[i];\n        const bodyA = this.bodies[params.rigidBodyIndex1];\n        const bodyB = this.bodies[params.rigidBodyIndex2];\n        this.constraints.push(new Constraint(this.mesh, this.world, bodyA, bodyB, params, this.manager));\n      }\n    },\n    _stepSimulation: function (delta) {\n      const unitStep = this.unitStep;\n      let stepTime = delta;\n      let maxStepNum = (delta / unitStep | 0) + 1;\n\n      if (stepTime < unitStep) {\n        stepTime = unitStep;\n        maxStepNum = 1;\n      }\n\n      if (maxStepNum > this.maxStepNum) {\n        maxStepNum = this.maxStepNum;\n      }\n\n      this.world.stepSimulation(stepTime, maxStepNum, unitStep);\n    },\n    _updateRigidBodies: function () {\n      for (let i = 0, il = this.bodies.length; i < il; i++) {\n        this.bodies[i].updateFromBone();\n      }\n    },\n    _updateBones: function () {\n      for (let i = 0, il = this.bodies.length; i < il; i++) {\n        this.bodies[i].updateBone();\n      }\n    }\n  };\n  /**\n   * This manager's responsibilies are\n   *\n   * 1. manage Ammo.js and Three.js object resources and\n   *    improve the performance and the memory consumption by\n   *    reusing objects.\n   *\n   * 2. provide simple Ammo object operations.\n   */\n\n  function ResourceManager() {\n    // for Three.js\n    this.threeVector3s = [];\n    this.threeMatrix4s = [];\n    this.threeQuaternions = [];\n    this.threeEulers = []; // for Ammo.js\n\n    this.transforms = [];\n    this.quaternions = [];\n    this.vector3s = [];\n  }\n\n  ResourceManager.prototype = {\n    constructor: ResourceManager,\n    allocThreeVector3: function () {\n      return this.threeVector3s.length > 0 ? this.threeVector3s.pop() : new Vector3();\n    },\n    freeThreeVector3: function (v) {\n      this.threeVector3s.push(v);\n    },\n    allocThreeMatrix4: function () {\n      return this.threeMatrix4s.length > 0 ? this.threeMatrix4s.pop() : new Matrix4();\n    },\n    freeThreeMatrix4: function (m) {\n      this.threeMatrix4s.push(m);\n    },\n    allocThreeQuaternion: function () {\n      return this.threeQuaternions.length > 0 ? this.threeQuaternions.pop() : new Quaternion();\n    },\n    freeThreeQuaternion: function (q) {\n      this.threeQuaternions.push(q);\n    },\n    allocThreeEuler: function () {\n      return this.threeEulers.length > 0 ? this.threeEulers.pop() : new Euler();\n    },\n    freeThreeEuler: function (e) {\n      this.threeEulers.push(e);\n    },\n    allocTransform: function () {\n      return this.transforms.length > 0 ? this.transforms.pop() : new Ammo.btTransform();\n    },\n    freeTransform: function (t) {\n      this.transforms.push(t);\n    },\n    allocQuaternion: function () {\n      return this.quaternions.length > 0 ? this.quaternions.pop() : new Ammo.btQuaternion();\n    },\n    freeQuaternion: function (q) {\n      this.quaternions.push(q);\n    },\n    allocVector3: function () {\n      return this.vector3s.length > 0 ? this.vector3s.pop() : new Ammo.btVector3();\n    },\n    freeVector3: function (v) {\n      this.vector3s.push(v);\n    },\n    setIdentity: function (t) {\n      t.setIdentity();\n    },\n    getBasis: function (t) {\n      const q = this.allocQuaternion();\n      t.getBasis().getRotation(q);\n      return q;\n    },\n    getBasisAsMatrix3: function (t) {\n      const q = this.getBasis(t);\n      const m = this.quaternionToMatrix3(q);\n      this.freeQuaternion(q);\n      return m;\n    },\n    getOrigin: function (t) {\n      return t.getOrigin();\n    },\n    setOrigin: function (t, v) {\n      t.getOrigin().setValue(v.x(), v.y(), v.z());\n    },\n    copyOrigin: function (t1, t2) {\n      const o = t2.getOrigin();\n      this.setOrigin(t1, o);\n    },\n    setBasis: function (t, q) {\n      t.setRotation(q);\n    },\n    setBasisFromMatrix3: function (t, m) {\n      const q = this.matrix3ToQuaternion(m);\n      this.setBasis(t, q);\n      this.freeQuaternion(q);\n    },\n    setOriginFromArray3: function (t, a) {\n      t.getOrigin().setValue(a[0], a[1], a[2]);\n    },\n    setOriginFromThreeVector3: function (t, v) {\n      t.getOrigin().setValue(v.x, v.y, v.z);\n    },\n    setBasisFromArray3: function (t, a) {\n      const thQ = this.allocThreeQuaternion();\n      const thE = this.allocThreeEuler();\n      thE.set(a[0], a[1], a[2]);\n      this.setBasisFromThreeQuaternion(t, thQ.setFromEuler(thE));\n      this.freeThreeEuler(thE);\n      this.freeThreeQuaternion(thQ);\n    },\n    setBasisFromThreeQuaternion: function (t, a) {\n      const q = this.allocQuaternion();\n      q.setX(a.x);\n      q.setY(a.y);\n      q.setZ(a.z);\n      q.setW(a.w);\n      this.setBasis(t, q);\n      this.freeQuaternion(q);\n    },\n    multiplyTransforms: function (t1, t2) {\n      const t = this.allocTransform();\n      this.setIdentity(t);\n      const m1 = this.getBasisAsMatrix3(t1);\n      const m2 = this.getBasisAsMatrix3(t2);\n      const o1 = this.getOrigin(t1);\n      const o2 = this.getOrigin(t2);\n      const v1 = this.multiplyMatrix3ByVector3(m1, o2);\n      const v2 = this.addVector3(v1, o1);\n      this.setOrigin(t, v2);\n      const m3 = this.multiplyMatrices3(m1, m2);\n      this.setBasisFromMatrix3(t, m3);\n      this.freeVector3(v1);\n      this.freeVector3(v2);\n      return t;\n    },\n    inverseTransform: function (t) {\n      const t2 = this.allocTransform();\n      const m1 = this.getBasisAsMatrix3(t);\n      const o = this.getOrigin(t);\n      const m2 = this.transposeMatrix3(m1);\n      const v1 = this.negativeVector3(o);\n      const v2 = this.multiplyMatrix3ByVector3(m2, v1);\n      this.setOrigin(t2, v2);\n      this.setBasisFromMatrix3(t2, m2);\n      this.freeVector3(v1);\n      this.freeVector3(v2);\n      return t2;\n    },\n    multiplyMatrices3: function (m1, m2) {\n      const m3 = [];\n      const v10 = this.rowOfMatrix3(m1, 0);\n      const v11 = this.rowOfMatrix3(m1, 1);\n      const v12 = this.rowOfMatrix3(m1, 2);\n      const v20 = this.columnOfMatrix3(m2, 0);\n      const v21 = this.columnOfMatrix3(m2, 1);\n      const v22 = this.columnOfMatrix3(m2, 2);\n      m3[0] = this.dotVectors3(v10, v20);\n      m3[1] = this.dotVectors3(v10, v21);\n      m3[2] = this.dotVectors3(v10, v22);\n      m3[3] = this.dotVectors3(v11, v20);\n      m3[4] = this.dotVectors3(v11, v21);\n      m3[5] = this.dotVectors3(v11, v22);\n      m3[6] = this.dotVectors3(v12, v20);\n      m3[7] = this.dotVectors3(v12, v21);\n      m3[8] = this.dotVectors3(v12, v22);\n      this.freeVector3(v10);\n      this.freeVector3(v11);\n      this.freeVector3(v12);\n      this.freeVector3(v20);\n      this.freeVector3(v21);\n      this.freeVector3(v22);\n      return m3;\n    },\n    addVector3: function (v1, v2) {\n      const v = this.allocVector3();\n      v.setValue(v1.x() + v2.x(), v1.y() + v2.y(), v1.z() + v2.z());\n      return v;\n    },\n    dotVectors3: function (v1, v2) {\n      return v1.x() * v2.x() + v1.y() * v2.y() + v1.z() * v2.z();\n    },\n    rowOfMatrix3: function (m, i) {\n      const v = this.allocVector3();\n      v.setValue(m[i * 3 + 0], m[i * 3 + 1], m[i * 3 + 2]);\n      return v;\n    },\n    columnOfMatrix3: function (m, i) {\n      const v = this.allocVector3();\n      v.setValue(m[i + 0], m[i + 3], m[i + 6]);\n      return v;\n    },\n    negativeVector3: function (v) {\n      const v2 = this.allocVector3();\n      v2.setValue(-v.x(), -v.y(), -v.z());\n      return v2;\n    },\n    multiplyMatrix3ByVector3: function (m, v) {\n      const v4 = this.allocVector3();\n      const v0 = this.rowOfMatrix3(m, 0);\n      const v1 = this.rowOfMatrix3(m, 1);\n      const v2 = this.rowOfMatrix3(m, 2);\n      const x = this.dotVectors3(v0, v);\n      const y = this.dotVectors3(v1, v);\n      const z = this.dotVectors3(v2, v);\n      v4.setValue(x, y, z);\n      this.freeVector3(v0);\n      this.freeVector3(v1);\n      this.freeVector3(v2);\n      return v4;\n    },\n    transposeMatrix3: function (m) {\n      const m2 = [];\n      m2[0] = m[0];\n      m2[1] = m[3];\n      m2[2] = m[6];\n      m2[3] = m[1];\n      m2[4] = m[4];\n      m2[5] = m[7];\n      m2[6] = m[2];\n      m2[7] = m[5];\n      m2[8] = m[8];\n      return m2;\n    },\n    quaternionToMatrix3: function (q) {\n      const m = [];\n      const x = q.x();\n      const y = q.y();\n      const z = q.z();\n      const w = q.w();\n      const xx = x * x;\n      const yy = y * y;\n      const zz = z * z;\n      const xy = x * y;\n      const yz = y * z;\n      const zx = z * x;\n      const xw = x * w;\n      const yw = y * w;\n      const zw = z * w;\n      m[0] = 1 - 2 * (yy + zz);\n      m[1] = 2 * (xy - zw);\n      m[2] = 2 * (zx + yw);\n      m[3] = 2 * (xy + zw);\n      m[4] = 1 - 2 * (zz + xx);\n      m[5] = 2 * (yz - xw);\n      m[6] = 2 * (zx - yw);\n      m[7] = 2 * (yz + xw);\n      m[8] = 1 - 2 * (xx + yy);\n      return m;\n    },\n    matrix3ToQuaternion: function (m) {\n      const t = m[0] + m[4] + m[8];\n      let s, x, y, z, w;\n\n      if (t > 0) {\n        s = Math.sqrt(t + 1.0) * 2;\n        w = 0.25 * s;\n        x = (m[7] - m[5]) / s;\n        y = (m[2] - m[6]) / s;\n        z = (m[3] - m[1]) / s;\n      } else if (m[0] > m[4] && m[0] > m[8]) {\n        s = Math.sqrt(1.0 + m[0] - m[4] - m[8]) * 2;\n        w = (m[7] - m[5]) / s;\n        x = 0.25 * s;\n        y = (m[1] + m[3]) / s;\n        z = (m[2] + m[6]) / s;\n      } else if (m[4] > m[8]) {\n        s = Math.sqrt(1.0 + m[4] - m[0] - m[8]) * 2;\n        w = (m[2] - m[6]) / s;\n        x = (m[1] + m[3]) / s;\n        y = 0.25 * s;\n        z = (m[5] + m[7]) / s;\n      } else {\n        s = Math.sqrt(1.0 + m[8] - m[0] - m[4]) * 2;\n        w = (m[3] - m[1]) / s;\n        x = (m[2] + m[6]) / s;\n        y = (m[5] + m[7]) / s;\n        z = 0.25 * s;\n      }\n\n      const q = this.allocQuaternion();\n      q.setX(x);\n      q.setY(y);\n      q.setZ(z);\n      q.setW(w);\n      return q;\n    }\n  };\n  /**\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Ammo.btDiscreteDynamicsWorld} world\n   * @param {Object} params\n   * @param {ResourceManager} manager\n   */\n\n  function RigidBody(mesh, world, params, manager) {\n    this.mesh = mesh;\n    this.world = world;\n    this.params = params;\n    this.manager = manager;\n    this.body = null;\n    this.bone = null;\n    this.boneOffsetForm = null;\n    this.boneOffsetFormInverse = null;\n\n    this._init();\n  }\n\n  RigidBody.prototype = {\n    constructor: MMDPhysics.RigidBody,\n\n    /**\n     * Resets rigid body transform to the current bone's.\n     *\n     * @return {RigidBody}\n     */\n    reset: function () {\n      this._setTransformFromBone();\n\n      return this;\n    },\n\n    /**\n     * Updates rigid body's transform from the current bone.\n     *\n     * @return {RidigBody}\n     */\n    updateFromBone: function () {\n      if (this.params.boneIndex !== -1 && this.params.type === 0) {\n        this._setTransformFromBone();\n      }\n\n      return this;\n    },\n\n    /**\n     * Updates bone from the current ridid body's transform.\n     *\n     * @return {RidigBody}\n     */\n    updateBone: function () {\n      if (this.params.type === 0 || this.params.boneIndex === -1) {\n        return this;\n      }\n\n      this._updateBoneRotation();\n\n      if (this.params.type === 1) {\n        this._updateBonePosition();\n      }\n\n      this.bone.updateMatrixWorld(true);\n\n      if (this.params.type === 2) {\n        this._setPositionFromBone();\n      }\n\n      return this;\n    },\n    // private methods\n    _init: function () {\n      function generateShape(p) {\n        switch (p.shapeType) {\n          case 0:\n            return new Ammo.btSphereShape(p.width);\n\n          case 1:\n            return new Ammo.btBoxShape(new Ammo.btVector3(p.width, p.height, p.depth));\n\n          case 2:\n            return new Ammo.btCapsuleShape(p.width, p.height);\n\n          default:\n            throw `unknown shape type ${p.shapeType}`;\n        }\n      }\n\n      const manager = this.manager;\n      const params = this.params;\n      const bones = this.mesh.skeleton.bones;\n      const bone = params.boneIndex === -1 ? new Bone() : bones[params.boneIndex];\n      const shape = generateShape(params);\n      const weight = params.type === 0 ? 0 : params.weight;\n      const localInertia = manager.allocVector3();\n      localInertia.setValue(0, 0, 0);\n\n      if (weight !== 0) {\n        shape.calculateLocalInertia(weight, localInertia);\n      }\n\n      const boneOffsetForm = manager.allocTransform();\n      manager.setIdentity(boneOffsetForm);\n      manager.setOriginFromArray3(boneOffsetForm, params.position);\n      manager.setBasisFromArray3(boneOffsetForm, params.rotation);\n      const vector = manager.allocThreeVector3();\n      const boneForm = manager.allocTransform();\n      manager.setIdentity(boneForm);\n      manager.setOriginFromThreeVector3(boneForm, bone.getWorldPosition(vector));\n      const form = manager.multiplyTransforms(boneForm, boneOffsetForm);\n      const state = new Ammo.btDefaultMotionState(form);\n      const info = new Ammo.btRigidBodyConstructionInfo(weight, state, shape, localInertia);\n      info.set_m_friction(params.friction);\n      info.set_m_restitution(params.restitution);\n      const body = new Ammo.btRigidBody(info);\n\n      if (params.type === 0) {\n        body.setCollisionFlags(body.getCollisionFlags() | 2);\n        /*\n         * It'd be better to comment out this line though in general I should call this method\n         * because I'm not sure why but physics will be more like MMD's\n         * if I comment out.\n         */\n\n        body.setActivationState(4);\n      }\n\n      body.setDamping(params.positionDamping, params.rotationDamping);\n      body.setSleepingThresholds(0, 0);\n      this.world.addRigidBody(body, 1 << params.groupIndex, params.groupTarget);\n      this.body = body;\n      this.bone = bone;\n      this.boneOffsetForm = boneOffsetForm;\n      this.boneOffsetFormInverse = manager.inverseTransform(boneOffsetForm);\n      manager.freeVector3(localInertia);\n      manager.freeTransform(form);\n      manager.freeTransform(boneForm);\n      manager.freeThreeVector3(vector);\n    },\n    _getBoneTransform: function () {\n      const manager = this.manager;\n      const p = manager.allocThreeVector3();\n      const q = manager.allocThreeQuaternion();\n      const s = manager.allocThreeVector3();\n      this.bone.matrixWorld.decompose(p, q, s);\n      const tr = manager.allocTransform();\n      manager.setOriginFromThreeVector3(tr, p);\n      manager.setBasisFromThreeQuaternion(tr, q);\n      const form = manager.multiplyTransforms(tr, this.boneOffsetForm);\n      manager.freeTransform(tr);\n      manager.freeThreeVector3(s);\n      manager.freeThreeQuaternion(q);\n      manager.freeThreeVector3(p);\n      return form;\n    },\n    _getWorldTransformForBone: function () {\n      const manager = this.manager;\n      const tr = this.body.getCenterOfMassTransform();\n      return manager.multiplyTransforms(tr, this.boneOffsetFormInverse);\n    },\n    _setTransformFromBone: function () {\n      const manager = this.manager;\n\n      const form = this._getBoneTransform(); // TODO: check the most appropriate way to set\n      //this.body.setWorldTransform( form );\n\n\n      this.body.setCenterOfMassTransform(form);\n      this.body.getMotionState().setWorldTransform(form);\n      manager.freeTransform(form);\n    },\n    _setPositionFromBone: function () {\n      const manager = this.manager;\n\n      const form = this._getBoneTransform();\n\n      const tr = manager.allocTransform();\n      this.body.getMotionState().getWorldTransform(tr);\n      manager.copyOrigin(tr, form); // TODO: check the most appropriate way to set\n      //this.body.setWorldTransform( tr );\n\n      this.body.setCenterOfMassTransform(tr);\n      this.body.getMotionState().setWorldTransform(tr);\n      manager.freeTransform(tr);\n      manager.freeTransform(form);\n    },\n    _updateBoneRotation: function () {\n      const manager = this.manager;\n\n      const tr = this._getWorldTransformForBone();\n\n      const q = manager.getBasis(tr);\n      const thQ = manager.allocThreeQuaternion();\n      const thQ2 = manager.allocThreeQuaternion();\n      const thQ3 = manager.allocThreeQuaternion();\n      thQ.set(q.x(), q.y(), q.z(), q.w());\n      thQ2.setFromRotationMatrix(this.bone.matrixWorld);\n      thQ2.conjugate();\n      thQ2.multiply(thQ); //this.bone.quaternion.multiply( thQ2 );\n\n      thQ3.setFromRotationMatrix(this.bone.matrix); // Renormalizing quaternion here because repeatedly transforming\n      // quaternion continuously accumulates floating point error and\n      // can end up being overflow. See #15335\n\n      this.bone.quaternion.copy(thQ2.multiply(thQ3).normalize());\n      manager.freeThreeQuaternion(thQ);\n      manager.freeThreeQuaternion(thQ2);\n      manager.freeThreeQuaternion(thQ3);\n      manager.freeQuaternion(q);\n      manager.freeTransform(tr);\n    },\n    _updateBonePosition: function () {\n      const manager = this.manager;\n\n      const tr = this._getWorldTransformForBone();\n\n      const thV = manager.allocThreeVector3();\n      const o = manager.getOrigin(tr);\n      thV.set(o.x(), o.y(), o.z());\n\n      if (this.bone.parent) {\n        this.bone.parent.worldToLocal(thV);\n      }\n\n      this.bone.position.copy(thV);\n      manager.freeThreeVector3(thV);\n      manager.freeTransform(tr);\n    }\n  };\n  /**\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Ammo.btDiscreteDynamicsWorld} world\n   * @param {RigidBody} bodyA\n   * @param {RigidBody} bodyB\n   * @param {Object} params\n   * @param {ResourceManager} manager\n   */\n\n  function Constraint(mesh, world, bodyA, bodyB, params, manager) {\n    this.mesh = mesh;\n    this.world = world;\n    this.bodyA = bodyA;\n    this.bodyB = bodyB;\n    this.params = params;\n    this.manager = manager;\n    this.constraint = null;\n\n    this._init();\n  }\n\n  Constraint.prototype = {\n    constructor: Constraint,\n    // private method\n    _init: function () {\n      const manager = this.manager;\n      const params = this.params;\n      const bodyA = this.bodyA;\n      const bodyB = this.bodyB;\n      const form = manager.allocTransform();\n      manager.setIdentity(form);\n      manager.setOriginFromArray3(form, params.position);\n      manager.setBasisFromArray3(form, params.rotation);\n      const formA = manager.allocTransform();\n      const formB = manager.allocTransform();\n      bodyA.body.getMotionState().getWorldTransform(formA);\n      bodyB.body.getMotionState().getWorldTransform(formB);\n      const formInverseA = manager.inverseTransform(formA);\n      const formInverseB = manager.inverseTransform(formB);\n      const formA2 = manager.multiplyTransforms(formInverseA, form);\n      const formB2 = manager.multiplyTransforms(formInverseB, form);\n      const constraint = new Ammo.btGeneric6DofSpringConstraint(bodyA.body, bodyB.body, formA2, formB2, true);\n      const lll = manager.allocVector3();\n      const lul = manager.allocVector3();\n      const all = manager.allocVector3();\n      const aul = manager.allocVector3();\n      lll.setValue(params.translationLimitation1[0], params.translationLimitation1[1], params.translationLimitation1[2]);\n      lul.setValue(params.translationLimitation2[0], params.translationLimitation2[1], params.translationLimitation2[2]);\n      all.setValue(params.rotationLimitation1[0], params.rotationLimitation1[1], params.rotationLimitation1[2]);\n      aul.setValue(params.rotationLimitation2[0], params.rotationLimitation2[1], params.rotationLimitation2[2]);\n      constraint.setLinearLowerLimit(lll);\n      constraint.setLinearUpperLimit(lul);\n      constraint.setAngularLowerLimit(all);\n      constraint.setAngularUpperLimit(aul);\n\n      for (let i = 0; i < 3; i++) {\n        if (params.springPosition[i] !== 0) {\n          constraint.enableSpring(i, true);\n          constraint.setStiffness(i, params.springPosition[i]);\n        }\n      }\n\n      for (let i = 0; i < 3; i++) {\n        if (params.springRotation[i] !== 0) {\n          constraint.enableSpring(i + 3, true);\n          constraint.setStiffness(i + 3, params.springRotation[i]);\n        }\n      }\n      /*\n       * Currently(10/31/2016) official ammo.js doesn't support\n       * btGeneric6DofSpringConstraint.setParam method.\n       * You need custom ammo.js (add the method into idl) if you wanna use.\n       * By setting this parameter, physics will be more like MMD's\n       */\n\n\n      if (constraint.setParam !== undefined) {\n        for (let i = 0; i < 6; i++) {\n          // this parameter is from http://www20.atpages.jp/katwat/three.js_r58/examples/mytest37/mmd.three.js\n          constraint.setParam(2, 0.475, i);\n        }\n      }\n\n      this.world.addConstraint(constraint, true);\n      this.constraint = constraint;\n      manager.freeTransform(form);\n      manager.freeTransform(formA);\n      manager.freeTransform(formB);\n      manager.freeTransform(formInverseA);\n      manager.freeTransform(formInverseB);\n      manager.freeTransform(formA2);\n      manager.freeTransform(formB2);\n      manager.freeVector3(lll);\n      manager.freeVector3(lul);\n      manager.freeVector3(all);\n      manager.freeVector3(aul);\n    }\n  };\n  /**\n   * Visualize Rigid bodies\n   *\n   * @param {THREE.SkinnedMesh} mesh\n   * @param {Physics} physics\n   */\n\n  function MMDPhysicsHelper(mesh, physics) {\n    Object3D.call(this);\n    this.root = mesh;\n    this.physics = physics;\n    this.matrix.copy(mesh.matrixWorld);\n    this.matrixAutoUpdate = false;\n    this.materials = [];\n    this.materials.push(new MeshBasicMaterial({\n      color: new Color(0xff8888),\n      wireframe: true,\n      depthTest: false,\n      depthWrite: false,\n      opacity: 0.25,\n      transparent: true\n    }));\n    this.materials.push(new MeshBasicMaterial({\n      color: new Color(0x88ff88),\n      wireframe: true,\n      depthTest: false,\n      depthWrite: false,\n      opacity: 0.25,\n      transparent: true\n    }));\n    this.materials.push(new MeshBasicMaterial({\n      color: new Color(0x8888ff),\n      wireframe: true,\n      depthTest: false,\n      depthWrite: false,\n      opacity: 0.25,\n      transparent: true\n    }));\n\n    this._init();\n  }\n\n  MMDPhysicsHelper.prototype = Object.assign(Object.create(Object3D.prototype), {\n    constructor: MMDPhysicsHelper,\n\n    /**\n     * Updates Rigid Bodies visualization.\n     */\n    updateMatrixWorld: (() => {\n      const position = new Vector3();\n      const quaternion = new Quaternion();\n      const scale = new Vector3();\n      const matrixWorldInv = new Matrix4();\n      return function updateMatrixWorld(force) {\n        const mesh = this.root;\n\n        if (this.visible) {\n          const bodies = this.physics.bodies;\n          matrixWorldInv.copy(mesh.matrixWorld).decompose(position, quaternion, scale).compose(position, quaternion, scale.set(1, 1, 1)).invert();\n\n          for (let i = 0, il = bodies.length; i < il; i++) {\n            const body = bodies[i].body;\n            const child = this.children[i];\n            const tr = body.getCenterOfMassTransform();\n            const origin = tr.getOrigin();\n            const rotation = tr.getRotation();\n            child.position.set(origin.x(), origin.y(), origin.z()).applyMatrix4(matrixWorldInv);\n            child.quaternion.setFromRotationMatrix(matrixWorldInv).multiply(quaternion.set(rotation.x(), rotation.y(), rotation.z(), rotation.w()));\n          }\n        }\n\n        this.matrix.copy(mesh.matrixWorld).decompose(position, quaternion, scale).compose(position, quaternion, scale.set(1, 1, 1));\n        Object3D.prototype.updateMatrixWorld.call(this, force);\n      };\n    })(),\n    // private method\n    _init: function () {\n      const bodies = this.physics.bodies;\n\n      function createGeometry(param) {\n        switch (param.shapeType) {\n          case 0:\n            return new SphereGeometry(param.width, 16, 8);\n\n          case 1:\n            return new BoxGeometry(param.width * 2, param.height * 2, param.depth * 2, 8, 8, 8);\n\n          case 2:\n            return new createCapsuleGeometry(param.width, param.height, 16, 8);\n\n          default:\n            return null;\n        }\n      } // copy from http://www20.atpages.jp/katwat/three.js_r58/examples/mytest37/mytest37.js?ver=20160815\n\n\n      function createCapsuleGeometry(radius, cylinderHeight, segmentsRadius, segmentsHeight) {\n        const geometry = new CylinderGeometry(radius, radius, cylinderHeight, segmentsRadius, segmentsHeight, true);\n        const upperSphere = new Mesh(new SphereGeometry(radius, segmentsRadius, segmentsHeight, 0, Math.PI * 2, 0, Math.PI / 2));\n        const lowerSphere = new Mesh(new SphereGeometry(radius, segmentsRadius, segmentsHeight, 0, Math.PI * 2, Math.PI / 2, Math.PI / 2));\n        upperSphere.position.set(0, cylinderHeight / 2, 0);\n        lowerSphere.position.set(0, -cylinderHeight / 2, 0);\n        upperSphere.updateMatrix();\n        lowerSphere.updateMatrix();\n        geometry.merge(upperSphere.geometry, upperSphere.matrix);\n        geometry.merge(lowerSphere.geometry, lowerSphere.matrix);\n        return geometry;\n      }\n\n      for (let i = 0, il = bodies.length; i < il; i++) {\n        const param = bodies[i].params;\n        this.add(new Mesh(createGeometry(param), this.materials[param.type]));\n      }\n    }\n  });\n  return MMDPhysics;\n})();\n\nexport { MMDPhysics };\n"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,OAAnB,EAA4BC,UAA5B,EAAwCC,OAAxC,EAAiDC,IAAjD,EAAuDC,KAAvD,EAA8DC,IAA9D,EAAoEC,iBAApE,EAAuFC,KAAvF,EAA8FC,WAA9F,EAA2GC,cAA3G,EAA2HC,gBAA3H,QAAmJ,OAAnJ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,IAAMC,UAAU,GAAI,YAAM;EACxB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASA,UAAT,CAAoBC,IAApB,EAA0BC,eAA1B,EAA2CC,gBAA3C,EAA6DC,MAA7D,EAAqE;IACnE,IAAI,OAAOC,IAAP,KAAgB,WAApB,EAAiC;MAC/B,MAAM,IAAIC,KAAJ,CAAU,qEAAV,CAAN;IACD;;IAEDH,gBAAgB,GAAGA,gBAAgB,IAAI,EAAvC;IACAC,MAAM,GAAGA,MAAM,IAAI,EAAnB;IACA,KAAKG,OAAL,GAAe,IAAIC,eAAJ,EAAf;IACA,KAAKP,IAAL,GAAYA,IAAZ;IACA;AACJ;AACA;AACA;AACA;AACA;;IAEI,KAAKQ,QAAL,GAAgBL,MAAM,CAACK,QAAP,KAAoBC,SAApB,GAAgCN,MAAM,CAACK,QAAvC,GAAkD,IAAI,EAAtE;IACA,KAAKE,UAAL,GAAkBP,MAAM,CAACO,UAAP,KAAsBD,SAAtB,GAAkCN,MAAM,CAACO,UAAzC,GAAsD,CAAxE;IACA,KAAKC,OAAL,GAAe,IAAIvB,OAAJ,CAAY,CAAZ,EAAe,CAAC,GAAD,GAAO,EAAtB,EAA0B,CAA1B,CAAf;IACA,IAAIe,MAAM,CAACQ,OAAP,KAAmBF,SAAvB,EAAkC,KAAKE,OAAL,CAAaC,IAAb,CAAkBT,MAAM,CAACQ,OAAzB;IAClC,KAAKE,KAAL,GAAaV,MAAM,CAACU,KAAP,KAAiBJ,SAAjB,GAA6BN,MAAM,CAACU,KAApC,GAA4C,IAAzD,CApBmE,CAoBJ;;IAE/D,KAAKC,MAAL,GAAc,EAAd;IACA,KAAKC,WAAL,GAAmB,EAAnB;;IAEA,KAAKC,KAAL,CAAWhB,IAAX,EAAiBC,eAAjB,EAAkCC,gBAAlC;EACD;;EAEDH,UAAU,CAACkB,SAAX,GAAuB;IACrBC,WAAW,EAAEnB,UADQ;;IAGrB;AACJ;AACA;AACA;AACA;AACA;IACIoB,MAAM,EAAE,gBAAUC,KAAV,EAAiB;MACvB,IAAMd,OAAO,GAAG,KAAKA,OAArB;MACA,IAAMN,IAAI,GAAG,KAAKA,IAAlB,CAFuB,CAEC;MACxB;MACA;;MAEA,IAAIqB,iBAAiB,GAAG,KAAxB;MACA,IAAMC,QAAQ,GAAGhB,OAAO,CAACiB,iBAAR,EAAjB;MACA,IAAMC,UAAU,GAAGlB,OAAO,CAACmB,oBAAR,EAAnB;MACA,IAAMC,KAAK,GAAGpB,OAAO,CAACiB,iBAAR,EAAd;MACAvB,IAAI,CAAC2B,WAAL,CAAiBC,SAAjB,CAA2BN,QAA3B,EAAqCE,UAArC,EAAiDE,KAAjD;;MAEA,IAAIA,KAAK,CAACG,CAAN,KAAY,CAAZ,IAAiBH,KAAK,CAACI,CAAN,KAAY,CAA7B,IAAkCJ,KAAK,CAACK,CAAN,KAAY,CAAlD,EAAqD;QACnDV,iBAAiB,GAAG,IAApB;MACD;;MAED,IAAIW,MAAJ;;MAEA,IAAIX,iBAAJ,EAAuB;QACrBW,MAAM,GAAGhC,IAAI,CAACgC,MAAd;QACA,IAAIA,MAAM,KAAK,IAAf,EAAqBhC,IAAI,CAACgC,MAAL,GAAc,IAAd;QACrBN,KAAK,CAACd,IAAN,CAAW,KAAKZ,IAAL,CAAU0B,KAArB;QACA1B,IAAI,CAAC0B,KAAL,CAAWO,GAAX,CAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB;QACAjC,IAAI,CAACkC,iBAAL,CAAuB,IAAvB;MACD,CAxBsB,CAwBrB;;;MAGF,KAAKC,kBAAL;;MAEA,KAAKC,eAAL,CAAqBhB,KAArB;;MAEA,KAAKiB,YAAL,GA/BuB,CA+BF;;;MAGrB,IAAIhB,iBAAJ,EAAuB;QACrB,IAAIW,MAAM,KAAK,IAAf,EAAqBhC,IAAI,CAACgC,MAAL,GAAcA,MAAd;QACrBhC,IAAI,CAAC0B,KAAL,CAAWd,IAAX,CAAgBc,KAAhB;MACD;;MAEDpB,OAAO,CAACgC,gBAAR,CAAyBZ,KAAzB;MACApB,OAAO,CAACiC,mBAAR,CAA4Bf,UAA5B;MACAlB,OAAO,CAACgC,gBAAR,CAAyBhB,QAAzB;MACA,OAAO,IAAP;IACD,CApDoB;;IAsDrB;AACJ;AACA;AACA;AACA;IACIkB,KAAK,EAAE,iBAAY;MACjB,KAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAG,KAAK5B,MAAL,CAAY6B,MAAjC,EAAyCF,CAAC,GAAGC,EAA7C,EAAiDD,CAAC,EAAlD,EAAsD;QACpD,KAAK3B,MAAL,CAAY2B,CAAZ,EAAeD,KAAf;MACD;;MAED,OAAO,IAAP;IACD,CAjEoB;;IAmErB;AACJ;AACA;AACA;AACA;AACA;IACII,MAAM,EAAE,gBAAUC,MAAV,EAAkB;MACxB,KAAK,IAAIJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGI,MAApB,EAA4BJ,CAAC,EAA7B,EAAiC;QAC/B,KAAKtB,MAAL,CAAY,IAAI,EAAhB;MACD;;MAED,OAAO,IAAP;IACD,CA/EoB;;IAiFrB;AACJ;AACA;AACA;AACA;AACA;IACI2B,UAAU,EAAE,oBAAUnC,OAAV,EAAmB;MAC7B,KAAKE,KAAL,CAAWiC,UAAX,CAAsB,IAAI1C,IAAI,CAAC2C,SAAT,CAAmBpC,OAAO,CAACkB,CAA3B,EAA8BlB,OAAO,CAACmB,CAAtC,EAAyCnB,OAAO,CAACoB,CAAjD,CAAtB;MACA,KAAKpB,OAAL,CAAaC,IAAb,CAAkBD,OAAlB;MACA,OAAO,IAAP;IACD,CA3FoB;;IA6FrB;AACJ;AACA;AACA;AACA;IACIqC,YAAY,EAAE,wBAAY;MACxB,OAAO,IAAIC,gBAAJ,CAAqB,KAAKjD,IAA1B,EAAgC,IAAhC,CAAP;IACD,CApGoB;IAqGrB;IACAgB,KAAK,EAAE,eAAUhB,IAAV,EAAgBC,eAAhB,EAAiCC,gBAAjC,EAAmD;MACxD,IAAMI,OAAO,GAAG,KAAKA,OAArB,CADwD,CAC1B;MAC9B;MACA;;MAEA,IAAI0B,MAAM,GAAGhC,IAAI,CAACgC,MAAlB;MACA,IAAIA,MAAM,KAAK,IAAf,EAAqBA,MAAM,GAAG,IAAT;MACrB,IAAMkB,eAAe,GAAG5C,OAAO,CAACiB,iBAAR,EAAxB;MACA,IAAM4B,iBAAiB,GAAG7C,OAAO,CAACmB,oBAAR,EAA1B;MACA,IAAM2B,YAAY,GAAG9C,OAAO,CAACiB,iBAAR,EAArB;MACA2B,eAAe,CAACtC,IAAhB,CAAqBZ,IAAI,CAACsB,QAA1B;MACA6B,iBAAiB,CAACvC,IAAlB,CAAuBZ,IAAI,CAACwB,UAA5B;MACA4B,YAAY,CAACxC,IAAb,CAAkBZ,IAAI,CAAC0B,KAAvB;MACA1B,IAAI,CAACsB,QAAL,CAAcW,GAAd,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB;MACAjC,IAAI,CAACwB,UAAL,CAAgBS,GAAhB,CAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAA7B;MACAjC,IAAI,CAAC0B,KAAL,CAAWO,GAAX,CAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB;MACAjC,IAAI,CAACkC,iBAAL,CAAuB,IAAvB;;MAEA,IAAI,KAAKrB,KAAL,KAAe,IAAnB,EAAyB;QACvB,KAAKA,KAAL,GAAa,KAAKwC,YAAL,EAAb;QACA,KAAKP,UAAL,CAAgB,KAAKnC,OAArB;MACD;;MAED,KAAK2C,gBAAL,CAAsBrD,eAAtB;;MAEA,KAAKsD,gBAAL,CAAsBrD,gBAAtB;;MAEA,IAAI8B,MAAM,KAAK,IAAf,EAAqBhC,IAAI,CAACgC,MAAL,GAAcA,MAAd;MACrBhC,IAAI,CAACsB,QAAL,CAAcV,IAAd,CAAmBsC,eAAnB;MACAlD,IAAI,CAACwB,UAAL,CAAgBZ,IAAhB,CAAqBuC,iBAArB;MACAnD,IAAI,CAAC0B,KAAL,CAAWd,IAAX,CAAgBwC,YAAhB;MACApD,IAAI,CAACkC,iBAAL,CAAuB,IAAvB;MACA,KAAKM,KAAL;MACAlC,OAAO,CAACgC,gBAAR,CAAyBY,eAAzB;MACA5C,OAAO,CAACiC,mBAAR,CAA4BY,iBAA5B;MACA7C,OAAO,CAACgC,gBAAR,CAAyBc,YAAzB;IACD,CA1IoB;IA2IrBC,YAAY,EAAE,wBAAY;MACxB,IAAMG,MAAM,GAAG,IAAIpD,IAAI,CAACqD,+BAAT,EAAf;MACA,IAAMC,UAAU,GAAG,IAAItD,IAAI,CAACuD,qBAAT,CAA+BH,MAA/B,CAAnB;MACA,IAAMI,KAAK,GAAG,IAAIxD,IAAI,CAACyD,gBAAT,EAAd;MACA,IAAMC,MAAM,GAAG,IAAI1D,IAAI,CAAC2D,mCAAT,EAAf;MACA,IAAMlD,KAAK,GAAG,IAAIT,IAAI,CAAC4D,uBAAT,CAAiCN,UAAjC,EAA6CE,KAA7C,EAAoDE,MAApD,EAA4DN,MAA5D,CAAd;MACA,OAAO3C,KAAP;IACD,CAlJoB;IAmJrByC,gBAAgB,EAAE,0BAAUW,WAAV,EAAuB;MACvC,KAAK,IAAIxB,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGuB,WAAW,CAACtB,MAAjC,EAAyCF,CAAC,GAAGC,EAA7C,EAAiDD,CAAC,EAAlD,EAAsD;QACpD,KAAK3B,MAAL,CAAYoD,IAAZ,CAAiB,IAAIC,SAAJ,CAAc,KAAKnE,IAAnB,EAAyB,KAAKa,KAA9B,EAAqCoD,WAAW,CAACxB,CAAD,CAAhD,EAAqD,KAAKnC,OAA1D,CAAjB;MACD;IACF,CAvJoB;IAwJrBiD,gBAAgB,EAAE,0BAAUxC,WAAV,EAAuB;MACvC,KAAK,IAAI0B,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAG3B,WAAW,CAAC4B,MAAjC,EAAyCF,CAAC,GAAGC,EAA7C,EAAiDD,CAAC,EAAlD,EAAsD;QACpD,IAAMtC,MAAM,GAAGY,WAAW,CAAC0B,CAAD,CAA1B;QACA,IAAM2B,KAAK,GAAG,KAAKtD,MAAL,CAAYX,MAAM,CAACkE,eAAnB,CAAd;QACA,IAAMC,KAAK,GAAG,KAAKxD,MAAL,CAAYX,MAAM,CAACoE,eAAnB,CAAd;QACA,KAAKxD,WAAL,CAAiBmD,IAAjB,CAAsB,IAAIM,UAAJ,CAAe,KAAKxE,IAApB,EAA0B,KAAKa,KAA/B,EAAsCuD,KAAtC,EAA6CE,KAA7C,EAAoDnE,MAApD,EAA4D,KAAKG,OAAjE,CAAtB;MACD;IACF,CA/JoB;IAgKrB8B,eAAe,EAAE,yBAAUhB,KAAV,EAAiB;MAChC,IAAMZ,QAAQ,GAAG,KAAKA,QAAtB;MACA,IAAIiE,QAAQ,GAAGrD,KAAf;MACA,IAAIV,UAAU,GAAG,CAACU,KAAK,GAAGZ,QAAR,GAAmB,CAApB,IAAyB,CAA1C;;MAEA,IAAIiE,QAAQ,GAAGjE,QAAf,EAAyB;QACvBiE,QAAQ,GAAGjE,QAAX;QACAE,UAAU,GAAG,CAAb;MACD;;MAED,IAAIA,UAAU,GAAG,KAAKA,UAAtB,EAAkC;QAChCA,UAAU,GAAG,KAAKA,UAAlB;MACD;;MAED,KAAKG,KAAL,CAAW6D,cAAX,CAA0BD,QAA1B,EAAoC/D,UAApC,EAAgDF,QAAhD;IACD,CA/KoB;IAgLrB2B,kBAAkB,EAAE,8BAAY;MAC9B,KAAK,IAAIM,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAG,KAAK5B,MAAL,CAAY6B,MAAjC,EAAyCF,CAAC,GAAGC,EAA7C,EAAiDD,CAAC,EAAlD,EAAsD;QACpD,KAAK3B,MAAL,CAAY2B,CAAZ,EAAekC,cAAf;MACD;IACF,CApLoB;IAqLrBtC,YAAY,EAAE,wBAAY;MACxB,KAAK,IAAII,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAG,KAAK5B,MAAL,CAAY6B,MAAjC,EAAyCF,CAAC,GAAGC,EAA7C,EAAiDD,CAAC,EAAlD,EAAsD;QACpD,KAAK3B,MAAL,CAAY2B,CAAZ,EAAemC,UAAf;MACD;IACF;EAzLoB,CAAvB;EA2LA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE,SAASrE,eAAT,GAA2B;IACzB;IACA,KAAKsE,aAAL,GAAqB,EAArB;IACA,KAAKC,aAAL,GAAqB,EAArB;IACA,KAAKC,gBAAL,GAAwB,EAAxB;IACA,KAAKC,WAAL,GAAmB,EAAnB,CALyB,CAKF;;IAEvB,KAAKC,UAAL,GAAkB,EAAlB;IACA,KAAKC,WAAL,GAAmB,EAAnB;IACA,KAAKC,QAAL,GAAgB,EAAhB;EACD;;EAED5E,eAAe,CAACU,SAAhB,GAA4B;IAC1BC,WAAW,EAAEX,eADa;IAE1BgB,iBAAiB,EAAE,6BAAY;MAC7B,OAAO,KAAKsD,aAAL,CAAmBlC,MAAnB,GAA4B,CAA5B,GAAgC,KAAKkC,aAAL,CAAmBO,GAAnB,EAAhC,GAA2D,IAAIhG,OAAJ,EAAlE;IACD,CAJyB;IAK1BkD,gBAAgB,EAAE,0BAAU+C,CAAV,EAAa;MAC7B,KAAKR,aAAL,CAAmBX,IAAnB,CAAwBmB,CAAxB;IACD,CAPyB;IAQ1BC,iBAAiB,EAAE,6BAAY;MAC7B,OAAO,KAAKR,aAAL,CAAmBnC,MAAnB,GAA4B,CAA5B,GAAgC,KAAKmC,aAAL,CAAmBM,GAAnB,EAAhC,GAA2D,IAAI9F,OAAJ,EAAlE;IACD,CAVyB;IAW1BiG,gBAAgB,EAAE,0BAAUC,CAAV,EAAa;MAC7B,KAAKV,aAAL,CAAmBZ,IAAnB,CAAwBsB,CAAxB;IACD,CAbyB;IAc1B/D,oBAAoB,EAAE,gCAAY;MAChC,OAAO,KAAKsD,gBAAL,CAAsBpC,MAAtB,GAA+B,CAA/B,GAAmC,KAAKoC,gBAAL,CAAsBK,GAAtB,EAAnC,GAAiE,IAAI/F,UAAJ,EAAxE;IACD,CAhByB;IAiB1BkD,mBAAmB,EAAE,6BAAUkD,CAAV,EAAa;MAChC,KAAKV,gBAAL,CAAsBb,IAAtB,CAA2BuB,CAA3B;IACD,CAnByB;IAoB1BC,eAAe,EAAE,2BAAY;MAC3B,OAAO,KAAKV,WAAL,CAAiBrC,MAAjB,GAA0B,CAA1B,GAA8B,KAAKqC,WAAL,CAAiBI,GAAjB,EAA9B,GAAuD,IAAI5F,KAAJ,EAA9D;IACD,CAtByB;IAuB1BmG,cAAc,EAAE,wBAAUC,CAAV,EAAa;MAC3B,KAAKZ,WAAL,CAAiBd,IAAjB,CAAsB0B,CAAtB;IACD,CAzByB;IA0B1BC,cAAc,EAAE,0BAAY;MAC1B,OAAO,KAAKZ,UAAL,CAAgBtC,MAAhB,GAAyB,CAAzB,GAA6B,KAAKsC,UAAL,CAAgBG,GAAhB,EAA7B,GAAqD,IAAIhF,IAAI,CAAC0F,WAAT,EAA5D;IACD,CA5ByB;IA6B1BC,aAAa,EAAE,uBAAUC,CAAV,EAAa;MAC1B,KAAKf,UAAL,CAAgBf,IAAhB,CAAqB8B,CAArB;IACD,CA/ByB;IAgC1BC,eAAe,EAAE,2BAAY;MAC3B,OAAO,KAAKf,WAAL,CAAiBvC,MAAjB,GAA0B,CAA1B,GAA8B,KAAKuC,WAAL,CAAiBE,GAAjB,EAA9B,GAAuD,IAAIhF,IAAI,CAAC8F,YAAT,EAA9D;IACD,CAlCyB;IAmC1BC,cAAc,EAAE,wBAAUV,CAAV,EAAa;MAC3B,KAAKP,WAAL,CAAiBhB,IAAjB,CAAsBuB,CAAtB;IACD,CArCyB;IAsC1BW,YAAY,EAAE,wBAAY;MACxB,OAAO,KAAKjB,QAAL,CAAcxC,MAAd,GAAuB,CAAvB,GAA2B,KAAKwC,QAAL,CAAcC,GAAd,EAA3B,GAAiD,IAAIhF,IAAI,CAAC2C,SAAT,EAAxD;IACD,CAxCyB;IAyC1BsD,WAAW,EAAE,qBAAUhB,CAAV,EAAa;MACxB,KAAKF,QAAL,CAAcjB,IAAd,CAAmBmB,CAAnB;IACD,CA3CyB;IA4C1BiB,WAAW,EAAE,qBAAUN,CAAV,EAAa;MACxBA,CAAC,CAACM,WAAF;IACD,CA9CyB;IA+C1BC,QAAQ,EAAE,kBAAUP,CAAV,EAAa;MACrB,IAAMP,CAAC,GAAG,KAAKQ,eAAL,EAAV;MACAD,CAAC,CAACO,QAAF,GAAaC,WAAb,CAAyBf,CAAzB;MACA,OAAOA,CAAP;IACD,CAnDyB;IAoD1BgB,iBAAiB,EAAE,2BAAUT,CAAV,EAAa;MAC9B,IAAMP,CAAC,GAAG,KAAKc,QAAL,CAAcP,CAAd,CAAV;MACA,IAAMR,CAAC,GAAG,KAAKkB,mBAAL,CAAyBjB,CAAzB,CAAV;MACA,KAAKU,cAAL,CAAoBV,CAApB;MACA,OAAOD,CAAP;IACD,CAzDyB;IA0D1BmB,SAAS,EAAE,mBAAUX,CAAV,EAAa;MACtB,OAAOA,CAAC,CAACW,SAAF,EAAP;IACD,CA5DyB;IA6D1BC,SAAS,EAAE,mBAAUZ,CAAV,EAAaX,CAAb,EAAgB;MACzBW,CAAC,CAACW,SAAF,GAAcE,QAAd,CAAuBxB,CAAC,CAACxD,CAAF,EAAvB,EAA8BwD,CAAC,CAACvD,CAAF,EAA9B,EAAqCuD,CAAC,CAACtD,CAAF,EAArC;IACD,CA/DyB;IAgE1B+E,UAAU,EAAE,oBAAUC,EAAV,EAAcC,EAAd,EAAkB;MAC5B,IAAMC,CAAC,GAAGD,EAAE,CAACL,SAAH,EAAV;MACA,KAAKC,SAAL,CAAeG,EAAf,EAAmBE,CAAnB;IACD,CAnEyB;IAoE1BC,QAAQ,EAAE,kBAAUlB,CAAV,EAAaP,CAAb,EAAgB;MACxBO,CAAC,CAACmB,WAAF,CAAc1B,CAAd;IACD,CAtEyB;IAuE1B2B,mBAAmB,EAAE,6BAAUpB,CAAV,EAAaR,CAAb,EAAgB;MACnC,IAAMC,CAAC,GAAG,KAAK4B,mBAAL,CAAyB7B,CAAzB,CAAV;MACA,KAAK0B,QAAL,CAAclB,CAAd,EAAiBP,CAAjB;MACA,KAAKU,cAAL,CAAoBV,CAApB;IACD,CA3EyB;IA4E1B6B,mBAAmB,EAAE,6BAAUtB,CAAV,EAAauB,CAAb,EAAgB;MACnCvB,CAAC,CAACW,SAAF,GAAcE,QAAd,CAAuBU,CAAC,CAAC,CAAD,CAAxB,EAA6BA,CAAC,CAAC,CAAD,CAA9B,EAAmCA,CAAC,CAAC,CAAD,CAApC;IACD,CA9EyB;IA+E1BC,yBAAyB,EAAE,mCAAUxB,CAAV,EAAaX,CAAb,EAAgB;MACzCW,CAAC,CAACW,SAAF,GAAcE,QAAd,CAAuBxB,CAAC,CAACxD,CAAzB,EAA4BwD,CAAC,CAACvD,CAA9B,EAAiCuD,CAAC,CAACtD,CAAnC;IACD,CAjFyB;IAkF1B0F,kBAAkB,EAAE,4BAAUzB,CAAV,EAAauB,CAAb,EAAgB;MAClC,IAAMG,GAAG,GAAG,KAAKjG,oBAAL,EAAZ;MACA,IAAMkG,GAAG,GAAG,KAAKjC,eAAL,EAAZ;MACAiC,GAAG,CAAC1F,GAAJ,CAAQsF,CAAC,CAAC,CAAD,CAAT,EAAcA,CAAC,CAAC,CAAD,CAAf,EAAoBA,CAAC,CAAC,CAAD,CAArB;MACA,KAAKK,2BAAL,CAAiC5B,CAAjC,EAAoC0B,GAAG,CAACG,YAAJ,CAAiBF,GAAjB,CAApC;MACA,KAAKhC,cAAL,CAAoBgC,GAApB;MACA,KAAKpF,mBAAL,CAAyBmF,GAAzB;IACD,CAzFyB;IA0F1BE,2BAA2B,EAAE,qCAAU5B,CAAV,EAAauB,CAAb,EAAgB;MAC3C,IAAM9B,CAAC,GAAG,KAAKQ,eAAL,EAAV;MACAR,CAAC,CAACqC,IAAF,CAAOP,CAAC,CAAC1F,CAAT;MACA4D,CAAC,CAACsC,IAAF,CAAOR,CAAC,CAACzF,CAAT;MACA2D,CAAC,CAACuC,IAAF,CAAOT,CAAC,CAACxF,CAAT;MACA0D,CAAC,CAACwC,IAAF,CAAOV,CAAC,CAACW,CAAT;MACA,KAAKhB,QAAL,CAAclB,CAAd,EAAiBP,CAAjB;MACA,KAAKU,cAAL,CAAoBV,CAApB;IACD,CAlGyB;IAmG1B0C,kBAAkB,EAAE,4BAAUpB,EAAV,EAAcC,EAAd,EAAkB;MACpC,IAAMhB,CAAC,GAAG,KAAKH,cAAL,EAAV;MACA,KAAKS,WAAL,CAAiBN,CAAjB;MACA,IAAMoC,EAAE,GAAG,KAAK3B,iBAAL,CAAuBM,EAAvB,CAAX;MACA,IAAMsB,EAAE,GAAG,KAAK5B,iBAAL,CAAuBO,EAAvB,CAAX;MACA,IAAMsB,EAAE,GAAG,KAAK3B,SAAL,CAAeI,EAAf,CAAX;MACA,IAAMwB,EAAE,GAAG,KAAK5B,SAAL,CAAeK,EAAf,CAAX;MACA,IAAMwB,EAAE,GAAG,KAAKC,wBAAL,CAA8BL,EAA9B,EAAkCG,EAAlC,CAAX;MACA,IAAMG,EAAE,GAAG,KAAKC,UAAL,CAAgBH,EAAhB,EAAoBF,EAApB,CAAX;MACA,KAAK1B,SAAL,CAAeZ,CAAf,EAAkB0C,EAAlB;MACA,IAAME,EAAE,GAAG,KAAKC,iBAAL,CAAuBT,EAAvB,EAA2BC,EAA3B,CAAX;MACA,KAAKjB,mBAAL,CAAyBpB,CAAzB,EAA4B4C,EAA5B;MACA,KAAKvC,WAAL,CAAiBmC,EAAjB;MACA,KAAKnC,WAAL,CAAiBqC,EAAjB;MACA,OAAO1C,CAAP;IACD,CAlHyB;IAmH1B8C,gBAAgB,EAAE,0BAAU9C,CAAV,EAAa;MAC7B,IAAMgB,EAAE,GAAG,KAAKnB,cAAL,EAAX;MACA,IAAMuC,EAAE,GAAG,KAAK3B,iBAAL,CAAuBT,CAAvB,CAAX;MACA,IAAMiB,CAAC,GAAG,KAAKN,SAAL,CAAeX,CAAf,CAAV;MACA,IAAMqC,EAAE,GAAG,KAAKU,gBAAL,CAAsBX,EAAtB,CAAX;MACA,IAAMI,EAAE,GAAG,KAAKQ,eAAL,CAAqB/B,CAArB,CAAX;MACA,IAAMyB,EAAE,GAAG,KAAKD,wBAAL,CAA8BJ,EAA9B,EAAkCG,EAAlC,CAAX;MACA,KAAK5B,SAAL,CAAeI,EAAf,EAAmB0B,EAAnB;MACA,KAAKtB,mBAAL,CAAyBJ,EAAzB,EAA6BqB,EAA7B;MACA,KAAKhC,WAAL,CAAiBmC,EAAjB;MACA,KAAKnC,WAAL,CAAiBqC,EAAjB;MACA,OAAO1B,EAAP;IACD,CA/HyB;IAgI1B6B,iBAAiB,EAAE,2BAAUT,EAAV,EAAcC,EAAd,EAAkB;MACnC,IAAMO,EAAE,GAAG,EAAX;MACA,IAAMK,GAAG,GAAG,KAAKC,YAAL,CAAkBd,EAAlB,EAAsB,CAAtB,CAAZ;MACA,IAAMe,GAAG,GAAG,KAAKD,YAAL,CAAkBd,EAAlB,EAAsB,CAAtB,CAAZ;MACA,IAAMgB,GAAG,GAAG,KAAKF,YAAL,CAAkBd,EAAlB,EAAsB,CAAtB,CAAZ;MACA,IAAMiB,GAAG,GAAG,KAAKC,eAAL,CAAqBjB,EAArB,EAAyB,CAAzB,CAAZ;MACA,IAAMkB,GAAG,GAAG,KAAKD,eAAL,CAAqBjB,EAArB,EAAyB,CAAzB,CAAZ;MACA,IAAMmB,GAAG,GAAG,KAAKF,eAAL,CAAqBjB,EAArB,EAAyB,CAAzB,CAAZ;MACAO,EAAE,CAAC,CAAD,CAAF,GAAQ,KAAKa,WAAL,CAAiBR,GAAjB,EAAsBI,GAAtB,CAAR;MACAT,EAAE,CAAC,CAAD,CAAF,GAAQ,KAAKa,WAAL,CAAiBR,GAAjB,EAAsBM,GAAtB,CAAR;MACAX,EAAE,CAAC,CAAD,CAAF,GAAQ,KAAKa,WAAL,CAAiBR,GAAjB,EAAsBO,GAAtB,CAAR;MACAZ,EAAE,CAAC,CAAD,CAAF,GAAQ,KAAKa,WAAL,CAAiBN,GAAjB,EAAsBE,GAAtB,CAAR;MACAT,EAAE,CAAC,CAAD,CAAF,GAAQ,KAAKa,WAAL,CAAiBN,GAAjB,EAAsBI,GAAtB,CAAR;MACAX,EAAE,CAAC,CAAD,CAAF,GAAQ,KAAKa,WAAL,CAAiBN,GAAjB,EAAsBK,GAAtB,CAAR;MACAZ,EAAE,CAAC,CAAD,CAAF,GAAQ,KAAKa,WAAL,CAAiBL,GAAjB,EAAsBC,GAAtB,CAAR;MACAT,EAAE,CAAC,CAAD,CAAF,GAAQ,KAAKa,WAAL,CAAiBL,GAAjB,EAAsBG,GAAtB,CAAR;MACAX,EAAE,CAAC,CAAD,CAAF,GAAQ,KAAKa,WAAL,CAAiBL,GAAjB,EAAsBI,GAAtB,CAAR;MACA,KAAKnD,WAAL,CAAiB4C,GAAjB;MACA,KAAK5C,WAAL,CAAiB8C,GAAjB;MACA,KAAK9C,WAAL,CAAiB+C,GAAjB;MACA,KAAK/C,WAAL,CAAiBgD,GAAjB;MACA,KAAKhD,WAAL,CAAiBkD,GAAjB;MACA,KAAKlD,WAAL,CAAiBmD,GAAjB;MACA,OAAOZ,EAAP;IACD,CAxJyB;IAyJ1BD,UAAU,EAAE,oBAAUH,EAAV,EAAcE,EAAd,EAAkB;MAC5B,IAAMrD,CAAC,GAAG,KAAKe,YAAL,EAAV;MACAf,CAAC,CAACwB,QAAF,CAAW2B,EAAE,CAAC3G,CAAH,KAAS6G,EAAE,CAAC7G,CAAH,EAApB,EAA4B2G,EAAE,CAAC1G,CAAH,KAAS4G,EAAE,CAAC5G,CAAH,EAArC,EAA6C0G,EAAE,CAACzG,CAAH,KAAS2G,EAAE,CAAC3G,CAAH,EAAtD;MACA,OAAOsD,CAAP;IACD,CA7JyB;IA8J1BoE,WAAW,EAAE,qBAAUjB,EAAV,EAAcE,EAAd,EAAkB;MAC7B,OAAOF,EAAE,CAAC3G,CAAH,KAAS6G,EAAE,CAAC7G,CAAH,EAAT,GAAkB2G,EAAE,CAAC1G,CAAH,KAAS4G,EAAE,CAAC5G,CAAH,EAA3B,GAAoC0G,EAAE,CAACzG,CAAH,KAAS2G,EAAE,CAAC3G,CAAH,EAApD;IACD,CAhKyB;IAiK1BmH,YAAY,EAAE,sBAAU1D,CAAV,EAAa/C,CAAb,EAAgB;MAC5B,IAAM4C,CAAC,GAAG,KAAKe,YAAL,EAAV;MACAf,CAAC,CAACwB,QAAF,CAAWrB,CAAC,CAAC/C,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAZ,EAAyB+C,CAAC,CAAC/C,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAA1B,EAAuC+C,CAAC,CAAC/C,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAxC;MACA,OAAO4C,CAAP;IACD,CArKyB;IAsK1BiE,eAAe,EAAE,yBAAU9D,CAAV,EAAa/C,CAAb,EAAgB;MAC/B,IAAM4C,CAAC,GAAG,KAAKe,YAAL,EAAV;MACAf,CAAC,CAACwB,QAAF,CAAWrB,CAAC,CAAC/C,CAAC,GAAG,CAAL,CAAZ,EAAqB+C,CAAC,CAAC/C,CAAC,GAAG,CAAL,CAAtB,EAA+B+C,CAAC,CAAC/C,CAAC,GAAG,CAAL,CAAhC;MACA,OAAO4C,CAAP;IACD,CA1KyB;IA2K1B2D,eAAe,EAAE,yBAAU3D,CAAV,EAAa;MAC5B,IAAMqD,EAAE,GAAG,KAAKtC,YAAL,EAAX;MACAsC,EAAE,CAAC7B,QAAH,CAAY,CAACxB,CAAC,CAACxD,CAAF,EAAb,EAAoB,CAACwD,CAAC,CAACvD,CAAF,EAArB,EAA4B,CAACuD,CAAC,CAACtD,CAAF,EAA7B;MACA,OAAO2G,EAAP;IACD,CA/KyB;IAgL1BD,wBAAwB,EAAE,kCAAUjD,CAAV,EAAaH,CAAb,EAAgB;MACxC,IAAMqE,EAAE,GAAG,KAAKtD,YAAL,EAAX;MACA,IAAMuD,EAAE,GAAG,KAAKT,YAAL,CAAkB1D,CAAlB,EAAqB,CAArB,CAAX;MACA,IAAMgD,EAAE,GAAG,KAAKU,YAAL,CAAkB1D,CAAlB,EAAqB,CAArB,CAAX;MACA,IAAMkD,EAAE,GAAG,KAAKQ,YAAL,CAAkB1D,CAAlB,EAAqB,CAArB,CAAX;MACA,IAAM3D,CAAC,GAAG,KAAK4H,WAAL,CAAiBE,EAAjB,EAAqBtE,CAArB,CAAV;MACA,IAAMvD,CAAC,GAAG,KAAK2H,WAAL,CAAiBjB,EAAjB,EAAqBnD,CAArB,CAAV;MACA,IAAMtD,CAAC,GAAG,KAAK0H,WAAL,CAAiBf,EAAjB,EAAqBrD,CAArB,CAAV;MACAqE,EAAE,CAAC7C,QAAH,CAAYhF,CAAZ,EAAeC,CAAf,EAAkBC,CAAlB;MACA,KAAKsE,WAAL,CAAiBsD,EAAjB;MACA,KAAKtD,WAAL,CAAiBmC,EAAjB;MACA,KAAKnC,WAAL,CAAiBqC,EAAjB;MACA,OAAOgB,EAAP;IACD,CA7LyB;IA8L1BX,gBAAgB,EAAE,0BAAUvD,CAAV,EAAa;MAC7B,IAAM6C,EAAE,GAAG,EAAX;MACAA,EAAE,CAAC,CAAD,CAAF,GAAQ7C,CAAC,CAAC,CAAD,CAAT;MACA6C,EAAE,CAAC,CAAD,CAAF,GAAQ7C,CAAC,CAAC,CAAD,CAAT;MACA6C,EAAE,CAAC,CAAD,CAAF,GAAQ7C,CAAC,CAAC,CAAD,CAAT;MACA6C,EAAE,CAAC,CAAD,CAAF,GAAQ7C,CAAC,CAAC,CAAD,CAAT;MACA6C,EAAE,CAAC,CAAD,CAAF,GAAQ7C,CAAC,CAAC,CAAD,CAAT;MACA6C,EAAE,CAAC,CAAD,CAAF,GAAQ7C,CAAC,CAAC,CAAD,CAAT;MACA6C,EAAE,CAAC,CAAD,CAAF,GAAQ7C,CAAC,CAAC,CAAD,CAAT;MACA6C,EAAE,CAAC,CAAD,CAAF,GAAQ7C,CAAC,CAAC,CAAD,CAAT;MACA6C,EAAE,CAAC,CAAD,CAAF,GAAQ7C,CAAC,CAAC,CAAD,CAAT;MACA,OAAO6C,EAAP;IACD,CA1MyB;IA2M1B3B,mBAAmB,EAAE,6BAAUjB,CAAV,EAAa;MAChC,IAAMD,CAAC,GAAG,EAAV;MACA,IAAM3D,CAAC,GAAG4D,CAAC,CAAC5D,CAAF,EAAV;MACA,IAAMC,CAAC,GAAG2D,CAAC,CAAC3D,CAAF,EAAV;MACA,IAAMC,CAAC,GAAG0D,CAAC,CAAC1D,CAAF,EAAV;MACA,IAAMmG,CAAC,GAAGzC,CAAC,CAACyC,CAAF,EAAV;MACA,IAAM0B,EAAE,GAAG/H,CAAC,GAAGA,CAAf;MACA,IAAMgI,EAAE,GAAG/H,CAAC,GAAGA,CAAf;MACA,IAAMgI,EAAE,GAAG/H,CAAC,GAAGA,CAAf;MACA,IAAMgI,EAAE,GAAGlI,CAAC,GAAGC,CAAf;MACA,IAAMkI,EAAE,GAAGlI,CAAC,GAAGC,CAAf;MACA,IAAMkI,EAAE,GAAGlI,CAAC,GAAGF,CAAf;MACA,IAAMqI,EAAE,GAAGrI,CAAC,GAAGqG,CAAf;MACA,IAAMiC,EAAE,GAAGrI,CAAC,GAAGoG,CAAf;MACA,IAAMkC,EAAE,GAAGrI,CAAC,GAAGmG,CAAf;MACA1C,CAAC,CAAC,CAAD,CAAD,GAAO,IAAI,KAAKqE,EAAE,GAAGC,EAAV,CAAX;MACAtE,CAAC,CAAC,CAAD,CAAD,GAAO,KAAKuE,EAAE,GAAGK,EAAV,CAAP;MACA5E,CAAC,CAAC,CAAD,CAAD,GAAO,KAAKyE,EAAE,GAAGE,EAAV,CAAP;MACA3E,CAAC,CAAC,CAAD,CAAD,GAAO,KAAKuE,EAAE,GAAGK,EAAV,CAAP;MACA5E,CAAC,CAAC,CAAD,CAAD,GAAO,IAAI,KAAKsE,EAAE,GAAGF,EAAV,CAAX;MACApE,CAAC,CAAC,CAAD,CAAD,GAAO,KAAKwE,EAAE,GAAGE,EAAV,CAAP;MACA1E,CAAC,CAAC,CAAD,CAAD,GAAO,KAAKyE,EAAE,GAAGE,EAAV,CAAP;MACA3E,CAAC,CAAC,CAAD,CAAD,GAAO,KAAKwE,EAAE,GAAGE,EAAV,CAAP;MACA1E,CAAC,CAAC,CAAD,CAAD,GAAO,IAAI,KAAKoE,EAAE,GAAGC,EAAV,CAAX;MACA,OAAOrE,CAAP;IACD,CApOyB;IAqO1B6B,mBAAmB,EAAE,6BAAU7B,CAAV,EAAa;MAChC,IAAMQ,CAAC,GAAGR,CAAC,CAAC,CAAD,CAAD,GAAOA,CAAC,CAAC,CAAD,CAAR,GAAcA,CAAC,CAAC,CAAD,CAAzB;MACA,IAAI6E,CAAJ,EAAOxI,CAAP,EAAUC,CAAV,EAAaC,CAAb,EAAgBmG,CAAhB;;MAEA,IAAIlC,CAAC,GAAG,CAAR,EAAW;QACTqE,CAAC,GAAGC,IAAI,CAACC,IAAL,CAAUvE,CAAC,GAAG,GAAd,IAAqB,CAAzB;QACAkC,CAAC,GAAG,OAAOmC,CAAX;QACAxI,CAAC,GAAG,CAAC2D,CAAC,CAAC,CAAD,CAAD,GAAOA,CAAC,CAAC,CAAD,CAAT,IAAgB6E,CAApB;QACAvI,CAAC,GAAG,CAAC0D,CAAC,CAAC,CAAD,CAAD,GAAOA,CAAC,CAAC,CAAD,CAAT,IAAgB6E,CAApB;QACAtI,CAAC,GAAG,CAACyD,CAAC,CAAC,CAAD,CAAD,GAAOA,CAAC,CAAC,CAAD,CAAT,IAAgB6E,CAApB;MACD,CAND,MAMO,IAAI7E,CAAC,CAAC,CAAD,CAAD,GAAOA,CAAC,CAAC,CAAD,CAAR,IAAeA,CAAC,CAAC,CAAD,CAAD,GAAOA,CAAC,CAAC,CAAD,CAA3B,EAAgC;QACrC6E,CAAC,GAAGC,IAAI,CAACC,IAAL,CAAU,MAAM/E,CAAC,CAAC,CAAD,CAAP,GAAaA,CAAC,CAAC,CAAD,CAAd,GAAoBA,CAAC,CAAC,CAAD,CAA/B,IAAsC,CAA1C;QACA0C,CAAC,GAAG,CAAC1C,CAAC,CAAC,CAAD,CAAD,GAAOA,CAAC,CAAC,CAAD,CAAT,IAAgB6E,CAApB;QACAxI,CAAC,GAAG,OAAOwI,CAAX;QACAvI,CAAC,GAAG,CAAC0D,CAAC,CAAC,CAAD,CAAD,GAAOA,CAAC,CAAC,CAAD,CAAT,IAAgB6E,CAApB;QACAtI,CAAC,GAAG,CAACyD,CAAC,CAAC,CAAD,CAAD,GAAOA,CAAC,CAAC,CAAD,CAAT,IAAgB6E,CAApB;MACD,CANM,MAMA,IAAI7E,CAAC,CAAC,CAAD,CAAD,GAAOA,CAAC,CAAC,CAAD,CAAZ,EAAiB;QACtB6E,CAAC,GAAGC,IAAI,CAACC,IAAL,CAAU,MAAM/E,CAAC,CAAC,CAAD,CAAP,GAAaA,CAAC,CAAC,CAAD,CAAd,GAAoBA,CAAC,CAAC,CAAD,CAA/B,IAAsC,CAA1C;QACA0C,CAAC,GAAG,CAAC1C,CAAC,CAAC,CAAD,CAAD,GAAOA,CAAC,CAAC,CAAD,CAAT,IAAgB6E,CAApB;QACAxI,CAAC,GAAG,CAAC2D,CAAC,CAAC,CAAD,CAAD,GAAOA,CAAC,CAAC,CAAD,CAAT,IAAgB6E,CAApB;QACAvI,CAAC,GAAG,OAAOuI,CAAX;QACAtI,CAAC,GAAG,CAACyD,CAAC,CAAC,CAAD,CAAD,GAAOA,CAAC,CAAC,CAAD,CAAT,IAAgB6E,CAApB;MACD,CANM,MAMA;QACLA,CAAC,GAAGC,IAAI,CAACC,IAAL,CAAU,MAAM/E,CAAC,CAAC,CAAD,CAAP,GAAaA,CAAC,CAAC,CAAD,CAAd,GAAoBA,CAAC,CAAC,CAAD,CAA/B,IAAsC,CAA1C;QACA0C,CAAC,GAAG,CAAC1C,CAAC,CAAC,CAAD,CAAD,GAAOA,CAAC,CAAC,CAAD,CAAT,IAAgB6E,CAApB;QACAxI,CAAC,GAAG,CAAC2D,CAAC,CAAC,CAAD,CAAD,GAAOA,CAAC,CAAC,CAAD,CAAT,IAAgB6E,CAApB;QACAvI,CAAC,GAAG,CAAC0D,CAAC,CAAC,CAAD,CAAD,GAAOA,CAAC,CAAC,CAAD,CAAT,IAAgB6E,CAApB;QACAtI,CAAC,GAAG,OAAOsI,CAAX;MACD;;MAED,IAAM5E,CAAC,GAAG,KAAKQ,eAAL,EAAV;MACAR,CAAC,CAACqC,IAAF,CAAOjG,CAAP;MACA4D,CAAC,CAACsC,IAAF,CAAOjG,CAAP;MACA2D,CAAC,CAACuC,IAAF,CAAOjG,CAAP;MACA0D,CAAC,CAACwC,IAAF,CAAOC,CAAP;MACA,OAAOzC,CAAP;IACD;EAzQyB,CAA5B;EA2QA;AACF;AACA;AACA;AACA;AACA;;EAEE,SAAStB,SAAT,CAAmBnE,IAAnB,EAAyBa,KAAzB,EAAgCV,MAAhC,EAAwCG,OAAxC,EAAiD;IAC/C,KAAKN,IAAL,GAAYA,IAAZ;IACA,KAAKa,KAAL,GAAaA,KAAb;IACA,KAAKV,MAAL,GAAcA,MAAd;IACA,KAAKG,OAAL,GAAeA,OAAf;IACA,KAAKkK,IAAL,GAAY,IAAZ;IACA,KAAKC,IAAL,GAAY,IAAZ;IACA,KAAKC,cAAL,GAAsB,IAAtB;IACA,KAAKC,qBAAL,GAA6B,IAA7B;;IAEA,KAAK3J,KAAL;EACD;;EAEDmD,SAAS,CAAClD,SAAV,GAAsB;IACpBC,WAAW,EAAEnB,UAAU,CAACoE,SADJ;;IAGpB;AACJ;AACA;AACA;AACA;IACI3B,KAAK,EAAE,iBAAY;MACjB,KAAKoI,qBAAL;;MAEA,OAAO,IAAP;IACD,CAZmB;;IAcpB;AACJ;AACA;AACA;AACA;IACIjG,cAAc,EAAE,0BAAY;MAC1B,IAAI,KAAKxE,MAAL,CAAY0K,SAAZ,KAA0B,CAAC,CAA3B,IAAgC,KAAK1K,MAAL,CAAY2K,IAAZ,KAAqB,CAAzD,EAA4D;QAC1D,KAAKF,qBAAL;MACD;;MAED,OAAO,IAAP;IACD,CAzBmB;;IA2BpB;AACJ;AACA;AACA;AACA;IACIhG,UAAU,EAAE,sBAAY;MACtB,IAAI,KAAKzE,MAAL,CAAY2K,IAAZ,KAAqB,CAArB,IAA0B,KAAK3K,MAAL,CAAY0K,SAAZ,KAA0B,CAAC,CAAzD,EAA4D;QAC1D,OAAO,IAAP;MACD;;MAED,KAAKE,mBAAL;;MAEA,IAAI,KAAK5K,MAAL,CAAY2K,IAAZ,KAAqB,CAAzB,EAA4B;QAC1B,KAAKE,mBAAL;MACD;;MAED,KAAKP,IAAL,CAAUvI,iBAAV,CAA4B,IAA5B;;MAEA,IAAI,KAAK/B,MAAL,CAAY2K,IAAZ,KAAqB,CAAzB,EAA4B;QAC1B,KAAKG,oBAAL;MACD;;MAED,OAAO,IAAP;IACD,CAlDmB;IAmDpB;IACAjK,KAAK,EAAE,iBAAY;MACjB,SAASkK,aAAT,CAAuBC,CAAvB,EAA0B;QACxB,QAAQA,CAAC,CAACC,SAAV;UACE,KAAK,CAAL;YACE,OAAO,IAAIhL,IAAI,CAACiL,aAAT,CAAuBF,CAAC,CAACG,KAAzB,CAAP;;UAEF,KAAK,CAAL;YACE,OAAO,IAAIlL,IAAI,CAACmL,UAAT,CAAoB,IAAInL,IAAI,CAAC2C,SAAT,CAAmBoI,CAAC,CAACG,KAArB,EAA4BH,CAAC,CAACK,MAA9B,EAAsCL,CAAC,CAACM,KAAxC,CAApB,CAAP;;UAEF,KAAK,CAAL;YACE,OAAO,IAAIrL,IAAI,CAACsL,cAAT,CAAwBP,CAAC,CAACG,KAA1B,EAAiCH,CAAC,CAACK,MAAnC,CAAP;;UAEF;YACE,mCAA4BL,CAAC,CAACC,SAA9B;QAXJ;MAaD;;MAED,IAAM9K,OAAO,GAAG,KAAKA,OAArB;MACA,IAAMH,MAAM,GAAG,KAAKA,MAApB;MACA,IAAMwL,KAAK,GAAG,KAAK3L,IAAL,CAAU4L,QAAV,CAAmBD,KAAjC;MACA,IAAMlB,IAAI,GAAGtK,MAAM,CAAC0K,SAAP,KAAqB,CAAC,CAAtB,GAA0B,IAAIpL,IAAJ,EAA1B,GAAuCkM,KAAK,CAACxL,MAAM,CAAC0K,SAAR,CAAzD;MACA,IAAMgB,KAAK,GAAGX,aAAa,CAAC/K,MAAD,CAA3B;MACA,IAAM2L,MAAM,GAAG3L,MAAM,CAAC2K,IAAP,KAAgB,CAAhB,GAAoB,CAApB,GAAwB3K,MAAM,CAAC2L,MAA9C;MACA,IAAMC,YAAY,GAAGzL,OAAO,CAAC8F,YAAR,EAArB;MACA2F,YAAY,CAAClF,QAAb,CAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B;;MAEA,IAAIiF,MAAM,KAAK,CAAf,EAAkB;QAChBD,KAAK,CAACG,qBAAN,CAA4BF,MAA5B,EAAoCC,YAApC;MACD;;MAED,IAAMrB,cAAc,GAAGpK,OAAO,CAACuF,cAAR,EAAvB;MACAvF,OAAO,CAACgG,WAAR,CAAoBoE,cAApB;MACApK,OAAO,CAACgH,mBAAR,CAA4BoD,cAA5B,EAA4CvK,MAAM,CAACmB,QAAnD;MACAhB,OAAO,CAACmH,kBAAR,CAA2BiD,cAA3B,EAA2CvK,MAAM,CAAC8L,QAAlD;MACA,IAAMC,MAAM,GAAG5L,OAAO,CAACiB,iBAAR,EAAf;MACA,IAAM4K,QAAQ,GAAG7L,OAAO,CAACuF,cAAR,EAAjB;MACAvF,OAAO,CAACgG,WAAR,CAAoB6F,QAApB;MACA7L,OAAO,CAACkH,yBAAR,CAAkC2E,QAAlC,EAA4C1B,IAAI,CAAC2B,gBAAL,CAAsBF,MAAtB,CAA5C;MACA,IAAMG,IAAI,GAAG/L,OAAO,CAAC6H,kBAAR,CAA2BgE,QAA3B,EAAqCzB,cAArC,CAAb;MACA,IAAM4B,KAAK,GAAG,IAAIlM,IAAI,CAACmM,oBAAT,CAA8BF,IAA9B,CAAd;MACA,IAAMG,IAAI,GAAG,IAAIpM,IAAI,CAACqM,2BAAT,CAAqCX,MAArC,EAA6CQ,KAA7C,EAAoDT,KAApD,EAA2DE,YAA3D,CAAb;MACAS,IAAI,CAACE,cAAL,CAAoBvM,MAAM,CAACwM,QAA3B;MACAH,IAAI,CAACI,iBAAL,CAAuBzM,MAAM,CAAC0M,WAA9B;MACA,IAAMrC,IAAI,GAAG,IAAIpK,IAAI,CAAC0M,WAAT,CAAqBN,IAArB,CAAb;;MAEA,IAAIrM,MAAM,CAAC2K,IAAP,KAAgB,CAApB,EAAuB;QACrBN,IAAI,CAACuC,iBAAL,CAAuBvC,IAAI,CAACwC,iBAAL,KAA2B,CAAlD;QACA;AACR;AACA;AACA;AACA;;QAEQxC,IAAI,CAACyC,kBAAL,CAAwB,CAAxB;MACD;;MAEDzC,IAAI,CAAC0C,UAAL,CAAgB/M,MAAM,CAACgN,eAAvB,EAAwChN,MAAM,CAACiN,eAA/C;MACA5C,IAAI,CAAC6C,qBAAL,CAA2B,CAA3B,EAA8B,CAA9B;MACA,KAAKxM,KAAL,CAAWyM,YAAX,CAAwB9C,IAAxB,EAA8B,KAAKrK,MAAM,CAACoN,UAA1C,EAAsDpN,MAAM,CAACqN,WAA7D;MACA,KAAKhD,IAAL,GAAYA,IAAZ;MACA,KAAKC,IAAL,GAAYA,IAAZ;MACA,KAAKC,cAAL,GAAsBA,cAAtB;MACA,KAAKC,qBAAL,GAA6BrK,OAAO,CAACwI,gBAAR,CAAyB4B,cAAzB,CAA7B;MACApK,OAAO,CAAC+F,WAAR,CAAoB0F,YAApB;MACAzL,OAAO,CAACyF,aAAR,CAAsBsG,IAAtB;MACA/L,OAAO,CAACyF,aAAR,CAAsBoG,QAAtB;MACA7L,OAAO,CAACgC,gBAAR,CAAyB4J,MAAzB;IACD,CAvHmB;IAwHpBuB,iBAAiB,EAAE,6BAAY;MAC7B,IAAMnN,OAAO,GAAG,KAAKA,OAArB;MACA,IAAM6K,CAAC,GAAG7K,OAAO,CAACiB,iBAAR,EAAV;MACA,IAAMkE,CAAC,GAAGnF,OAAO,CAACmB,oBAAR,EAAV;MACA,IAAM4I,CAAC,GAAG/J,OAAO,CAACiB,iBAAR,EAAV;MACA,KAAKkJ,IAAL,CAAU9I,WAAV,CAAsBC,SAAtB,CAAgCuJ,CAAhC,EAAmC1F,CAAnC,EAAsC4E,CAAtC;MACA,IAAMqD,EAAE,GAAGpN,OAAO,CAACuF,cAAR,EAAX;MACAvF,OAAO,CAACkH,yBAAR,CAAkCkG,EAAlC,EAAsCvC,CAAtC;MACA7K,OAAO,CAACsH,2BAAR,CAAoC8F,EAApC,EAAwCjI,CAAxC;MACA,IAAM4G,IAAI,GAAG/L,OAAO,CAAC6H,kBAAR,CAA2BuF,EAA3B,EAA+B,KAAKhD,cAApC,CAAb;MACApK,OAAO,CAACyF,aAAR,CAAsB2H,EAAtB;MACApN,OAAO,CAACgC,gBAAR,CAAyB+H,CAAzB;MACA/J,OAAO,CAACiC,mBAAR,CAA4BkD,CAA5B;MACAnF,OAAO,CAACgC,gBAAR,CAAyB6I,CAAzB;MACA,OAAOkB,IAAP;IACD,CAvImB;IAwIpBsB,yBAAyB,EAAE,qCAAY;MACrC,IAAMrN,OAAO,GAAG,KAAKA,OAArB;MACA,IAAMoN,EAAE,GAAG,KAAKlD,IAAL,CAAUoD,wBAAV,EAAX;MACA,OAAOtN,OAAO,CAAC6H,kBAAR,CAA2BuF,EAA3B,EAA+B,KAAK/C,qBAApC,CAAP;IACD,CA5ImB;IA6IpBC,qBAAqB,EAAE,iCAAY;MACjC,IAAMtK,OAAO,GAAG,KAAKA,OAArB;;MAEA,IAAM+L,IAAI,GAAG,KAAKoB,iBAAL,EAAb,CAHiC,CAGM;MACvC;;;MAGA,KAAKjD,IAAL,CAAUqD,wBAAV,CAAmCxB,IAAnC;MACA,KAAK7B,IAAL,CAAUsD,cAAV,GAA2BC,iBAA3B,CAA6C1B,IAA7C;MACA/L,OAAO,CAACyF,aAAR,CAAsBsG,IAAtB;IACD,CAvJmB;IAwJpBpB,oBAAoB,EAAE,gCAAY;MAChC,IAAM3K,OAAO,GAAG,KAAKA,OAArB;;MAEA,IAAM+L,IAAI,GAAG,KAAKoB,iBAAL,EAAb;;MAEA,IAAMC,EAAE,GAAGpN,OAAO,CAACuF,cAAR,EAAX;MACA,KAAK2E,IAAL,CAAUsD,cAAV,GAA2BE,iBAA3B,CAA6CN,EAA7C;MACApN,OAAO,CAACwG,UAAR,CAAmB4G,EAAnB,EAAuBrB,IAAvB,EAPgC,CAOF;MAC9B;;MAEA,KAAK7B,IAAL,CAAUqD,wBAAV,CAAmCH,EAAnC;MACA,KAAKlD,IAAL,CAAUsD,cAAV,GAA2BC,iBAA3B,CAA6CL,EAA7C;MACApN,OAAO,CAACyF,aAAR,CAAsB2H,EAAtB;MACApN,OAAO,CAACyF,aAAR,CAAsBsG,IAAtB;IACD,CAtKmB;IAuKpBtB,mBAAmB,EAAE,+BAAY;MAC/B,IAAMzK,OAAO,GAAG,KAAKA,OAArB;;MAEA,IAAMoN,EAAE,GAAG,KAAKC,yBAAL,EAAX;;MAEA,IAAMlI,CAAC,GAAGnF,OAAO,CAACiG,QAAR,CAAiBmH,EAAjB,CAAV;MACA,IAAMhG,GAAG,GAAGpH,OAAO,CAACmB,oBAAR,EAAZ;MACA,IAAMwM,IAAI,GAAG3N,OAAO,CAACmB,oBAAR,EAAb;MACA,IAAMyM,IAAI,GAAG5N,OAAO,CAACmB,oBAAR,EAAb;MACAiG,GAAG,CAACzF,GAAJ,CAAQwD,CAAC,CAAC5D,CAAF,EAAR,EAAe4D,CAAC,CAAC3D,CAAF,EAAf,EAAsB2D,CAAC,CAAC1D,CAAF,EAAtB,EAA6B0D,CAAC,CAACyC,CAAF,EAA7B;MACA+F,IAAI,CAACE,qBAAL,CAA2B,KAAK1D,IAAL,CAAU9I,WAArC;MACAsM,IAAI,CAACG,SAAL;MACAH,IAAI,CAACI,QAAL,CAAc3G,GAAd,EAZ+B,CAYX;;MAEpBwG,IAAI,CAACC,qBAAL,CAA2B,KAAK1D,IAAL,CAAU6D,MAArC,EAd+B,CAce;MAC9C;MACA;;MAEA,KAAK7D,IAAL,CAAUjJ,UAAV,CAAqBZ,IAArB,CAA0BqN,IAAI,CAACI,QAAL,CAAcH,IAAd,EAAoBK,SAApB,EAA1B;MACAjO,OAAO,CAACiC,mBAAR,CAA4BmF,GAA5B;MACApH,OAAO,CAACiC,mBAAR,CAA4B0L,IAA5B;MACA3N,OAAO,CAACiC,mBAAR,CAA4B2L,IAA5B;MACA5N,OAAO,CAAC6F,cAAR,CAAuBV,CAAvB;MACAnF,OAAO,CAACyF,aAAR,CAAsB2H,EAAtB;IACD,CA/LmB;IAgMpB1C,mBAAmB,EAAE,+BAAY;MAC/B,IAAM1K,OAAO,GAAG,KAAKA,OAArB;;MAEA,IAAMoN,EAAE,GAAG,KAAKC,yBAAL,EAAX;;MAEA,IAAMa,GAAG,GAAGlO,OAAO,CAACiB,iBAAR,EAAZ;MACA,IAAM0F,CAAC,GAAG3G,OAAO,CAACqG,SAAR,CAAkB+G,EAAlB,CAAV;MACAc,GAAG,CAACvM,GAAJ,CAAQgF,CAAC,CAACpF,CAAF,EAAR,EAAeoF,CAAC,CAACnF,CAAF,EAAf,EAAsBmF,CAAC,CAAClF,CAAF,EAAtB;;MAEA,IAAI,KAAK0I,IAAL,CAAUzI,MAAd,EAAsB;QACpB,KAAKyI,IAAL,CAAUzI,MAAV,CAAiByM,YAAjB,CAA8BD,GAA9B;MACD;;MAED,KAAK/D,IAAL,CAAUnJ,QAAV,CAAmBV,IAAnB,CAAwB4N,GAAxB;MACAlO,OAAO,CAACgC,gBAAR,CAAyBkM,GAAzB;MACAlO,OAAO,CAACyF,aAAR,CAAsB2H,EAAtB;IACD;EAhNmB,CAAtB;EAkNA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE,SAASlJ,UAAT,CAAoBxE,IAApB,EAA0Ba,KAA1B,EAAiCuD,KAAjC,EAAwCE,KAAxC,EAA+CnE,MAA/C,EAAuDG,OAAvD,EAAgE;IAC9D,KAAKN,IAAL,GAAYA,IAAZ;IACA,KAAKa,KAAL,GAAaA,KAAb;IACA,KAAKuD,KAAL,GAAaA,KAAb;IACA,KAAKE,KAAL,GAAaA,KAAb;IACA,KAAKnE,MAAL,GAAcA,MAAd;IACA,KAAKG,OAAL,GAAeA,OAAf;IACA,KAAKoO,UAAL,GAAkB,IAAlB;;IAEA,KAAK1N,KAAL;EACD;;EAEDwD,UAAU,CAACvD,SAAX,GAAuB;IACrBC,WAAW,EAAEsD,UADQ;IAErB;IACAxD,KAAK,EAAE,iBAAY;MACjB,IAAMV,OAAO,GAAG,KAAKA,OAArB;MACA,IAAMH,MAAM,GAAG,KAAKA,MAApB;MACA,IAAMiE,KAAK,GAAG,KAAKA,KAAnB;MACA,IAAME,KAAK,GAAG,KAAKA,KAAnB;MACA,IAAM+H,IAAI,GAAG/L,OAAO,CAACuF,cAAR,EAAb;MACAvF,OAAO,CAACgG,WAAR,CAAoB+F,IAApB;MACA/L,OAAO,CAACgH,mBAAR,CAA4B+E,IAA5B,EAAkClM,MAAM,CAACmB,QAAzC;MACAhB,OAAO,CAACmH,kBAAR,CAA2B4E,IAA3B,EAAiClM,MAAM,CAAC8L,QAAxC;MACA,IAAM0C,KAAK,GAAGrO,OAAO,CAACuF,cAAR,EAAd;MACA,IAAM+I,KAAK,GAAGtO,OAAO,CAACuF,cAAR,EAAd;MACAzB,KAAK,CAACoG,IAAN,CAAWsD,cAAX,GAA4BE,iBAA5B,CAA8CW,KAA9C;MACArK,KAAK,CAACkG,IAAN,CAAWsD,cAAX,GAA4BE,iBAA5B,CAA8CY,KAA9C;MACA,IAAMC,YAAY,GAAGvO,OAAO,CAACwI,gBAAR,CAAyB6F,KAAzB,CAArB;MACA,IAAMG,YAAY,GAAGxO,OAAO,CAACwI,gBAAR,CAAyB8F,KAAzB,CAArB;MACA,IAAMG,MAAM,GAAGzO,OAAO,CAAC6H,kBAAR,CAA2B0G,YAA3B,EAAyCxC,IAAzC,CAAf;MACA,IAAM2C,MAAM,GAAG1O,OAAO,CAAC6H,kBAAR,CAA2B2G,YAA3B,EAAyCzC,IAAzC,CAAf;MACA,IAAMqC,UAAU,GAAG,IAAItO,IAAI,CAAC6O,6BAAT,CAAuC7K,KAAK,CAACoG,IAA7C,EAAmDlG,KAAK,CAACkG,IAAzD,EAA+DuE,MAA/D,EAAuEC,MAAvE,EAA+E,IAA/E,CAAnB;MACA,IAAME,GAAG,GAAG5O,OAAO,CAAC8F,YAAR,EAAZ;MACA,IAAM+I,GAAG,GAAG7O,OAAO,CAAC8F,YAAR,EAAZ;MACA,IAAMgJ,GAAG,GAAG9O,OAAO,CAAC8F,YAAR,EAAZ;MACA,IAAMiJ,GAAG,GAAG/O,OAAO,CAAC8F,YAAR,EAAZ;MACA8I,GAAG,CAACrI,QAAJ,CAAa1G,MAAM,CAACmP,sBAAP,CAA8B,CAA9B,CAAb,EAA+CnP,MAAM,CAACmP,sBAAP,CAA8B,CAA9B,CAA/C,EAAiFnP,MAAM,CAACmP,sBAAP,CAA8B,CAA9B,CAAjF;MACAH,GAAG,CAACtI,QAAJ,CAAa1G,MAAM,CAACoP,sBAAP,CAA8B,CAA9B,CAAb,EAA+CpP,MAAM,CAACoP,sBAAP,CAA8B,CAA9B,CAA/C,EAAiFpP,MAAM,CAACoP,sBAAP,CAA8B,CAA9B,CAAjF;MACAH,GAAG,CAACvI,QAAJ,CAAa1G,MAAM,CAACqP,mBAAP,CAA2B,CAA3B,CAAb,EAA4CrP,MAAM,CAACqP,mBAAP,CAA2B,CAA3B,CAA5C,EAA2ErP,MAAM,CAACqP,mBAAP,CAA2B,CAA3B,CAA3E;MACAH,GAAG,CAACxI,QAAJ,CAAa1G,MAAM,CAACsP,mBAAP,CAA2B,CAA3B,CAAb,EAA4CtP,MAAM,CAACsP,mBAAP,CAA2B,CAA3B,CAA5C,EAA2EtP,MAAM,CAACsP,mBAAP,CAA2B,CAA3B,CAA3E;MACAf,UAAU,CAACgB,mBAAX,CAA+BR,GAA/B;MACAR,UAAU,CAACiB,mBAAX,CAA+BR,GAA/B;MACAT,UAAU,CAACkB,oBAAX,CAAgCR,GAAhC;MACAV,UAAU,CAACmB,oBAAX,CAAgCR,GAAhC;;MAEA,KAAK,IAAI5M,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;QAC1B,IAAItC,MAAM,CAAC2P,cAAP,CAAsBrN,CAAtB,MAA6B,CAAjC,EAAoC;UAClCiM,UAAU,CAACqB,YAAX,CAAwBtN,CAAxB,EAA2B,IAA3B;UACAiM,UAAU,CAACsB,YAAX,CAAwBvN,CAAxB,EAA2BtC,MAAM,CAAC2P,cAAP,CAAsBrN,CAAtB,CAA3B;QACD;MACF;;MAED,KAAK,IAAIA,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAG,CAApB,EAAuBA,EAAC,EAAxB,EAA4B;QAC1B,IAAItC,MAAM,CAAC8P,cAAP,CAAsBxN,EAAtB,MAA6B,CAAjC,EAAoC;UAClCiM,UAAU,CAACqB,YAAX,CAAwBtN,EAAC,GAAG,CAA5B,EAA+B,IAA/B;UACAiM,UAAU,CAACsB,YAAX,CAAwBvN,EAAC,GAAG,CAA5B,EAA+BtC,MAAM,CAAC8P,cAAP,CAAsBxN,EAAtB,CAA/B;QACD;MACF;MACD;AACN;AACA;AACA;AACA;AACA;;;MAGM,IAAIiM,UAAU,CAACwB,QAAX,KAAwBzP,SAA5B,EAAuC;QACrC,KAAK,IAAIgC,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAG,CAApB,EAAuBA,GAAC,EAAxB,EAA4B;UAC1B;UACAiM,UAAU,CAACwB,QAAX,CAAoB,CAApB,EAAuB,KAAvB,EAA8BzN,GAA9B;QACD;MACF;;MAED,KAAK5B,KAAL,CAAWsP,aAAX,CAAyBzB,UAAzB,EAAqC,IAArC;MACA,KAAKA,UAAL,GAAkBA,UAAlB;MACApO,OAAO,CAACyF,aAAR,CAAsBsG,IAAtB;MACA/L,OAAO,CAACyF,aAAR,CAAsB4I,KAAtB;MACArO,OAAO,CAACyF,aAAR,CAAsB6I,KAAtB;MACAtO,OAAO,CAACyF,aAAR,CAAsB8I,YAAtB;MACAvO,OAAO,CAACyF,aAAR,CAAsB+I,YAAtB;MACAxO,OAAO,CAACyF,aAAR,CAAsBgJ,MAAtB;MACAzO,OAAO,CAACyF,aAAR,CAAsBiJ,MAAtB;MACA1O,OAAO,CAAC+F,WAAR,CAAoB6I,GAApB;MACA5O,OAAO,CAAC+F,WAAR,CAAoB8I,GAApB;MACA7O,OAAO,CAAC+F,WAAR,CAAoB+I,GAApB;MACA9O,OAAO,CAAC+F,WAAR,CAAoBgJ,GAApB;IACD;EA3EoB,CAAvB;EA6EA;AACF;AACA;AACA;AACA;AACA;;EAEE,SAASpM,gBAAT,CAA0BjD,IAA1B,EAAgCoQ,OAAhC,EAAyC;IACvCjR,QAAQ,CAACkR,IAAT,CAAc,IAAd;IACA,KAAKC,IAAL,GAAYtQ,IAAZ;IACA,KAAKoQ,OAAL,GAAeA,OAAf;IACA,KAAK9B,MAAL,CAAY1N,IAAZ,CAAiBZ,IAAI,CAAC2B,WAAtB;IACA,KAAK4O,gBAAL,GAAwB,KAAxB;IACA,KAAKC,SAAL,GAAiB,EAAjB;IACA,KAAKA,SAAL,CAAetM,IAAf,CAAoB,IAAIxE,iBAAJ,CAAsB;MACxC+Q,KAAK,EAAE,IAAI9Q,KAAJ,CAAU,QAAV,CADiC;MAExC+Q,SAAS,EAAE,IAF6B;MAGxCC,SAAS,EAAE,KAH6B;MAIxCC,UAAU,EAAE,KAJ4B;MAKxCC,OAAO,EAAE,IAL+B;MAMxCC,WAAW,EAAE;IAN2B,CAAtB,CAApB;IAQA,KAAKN,SAAL,CAAetM,IAAf,CAAoB,IAAIxE,iBAAJ,CAAsB;MACxC+Q,KAAK,EAAE,IAAI9Q,KAAJ,CAAU,QAAV,CADiC;MAExC+Q,SAAS,EAAE,IAF6B;MAGxCC,SAAS,EAAE,KAH6B;MAIxCC,UAAU,EAAE,KAJ4B;MAKxCC,OAAO,EAAE,IAL+B;MAMxCC,WAAW,EAAE;IAN2B,CAAtB,CAApB;IAQA,KAAKN,SAAL,CAAetM,IAAf,CAAoB,IAAIxE,iBAAJ,CAAsB;MACxC+Q,KAAK,EAAE,IAAI9Q,KAAJ,CAAU,QAAV,CADiC;MAExC+Q,SAAS,EAAE,IAF6B;MAGxCC,SAAS,EAAE,KAH6B;MAIxCC,UAAU,EAAE,KAJ4B;MAKxCC,OAAO,EAAE,IAL+B;MAMxCC,WAAW,EAAE;IAN2B,CAAtB,CAApB;;IASA,KAAK9P,KAAL;EACD;;EAEDiC,gBAAgB,CAAChC,SAAjB,GAA6B8P,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACE,MAAP,CAAc9R,QAAQ,CAAC8B,SAAvB,CAAd,EAAiD;IAC5EC,WAAW,EAAE+B,gBAD+D;;IAG5E;AACJ;AACA;IACIf,iBAAiB,EAAG,YAAM;MACxB,IAAMZ,QAAQ,GAAG,IAAIlC,OAAJ,EAAjB;MACA,IAAMoC,UAAU,GAAG,IAAInC,UAAJ,EAAnB;MACA,IAAMqC,KAAK,GAAG,IAAItC,OAAJ,EAAd;MACA,IAAM8R,cAAc,GAAG,IAAI5R,OAAJ,EAAvB;MACA,OAAO,SAAS4C,iBAAT,CAA2BiP,KAA3B,EAAkC;QACvC,IAAMnR,IAAI,GAAG,KAAKsQ,IAAlB;;QAEA,IAAI,KAAKc,OAAT,EAAkB;UAChB,IAAMtQ,MAAM,GAAG,KAAKsP,OAAL,CAAatP,MAA5B;UACAoQ,cAAc,CAACtQ,IAAf,CAAoBZ,IAAI,CAAC2B,WAAzB,EAAsCC,SAAtC,CAAgDN,QAAhD,EAA0DE,UAA1D,EAAsEE,KAAtE,EAA6E2P,OAA7E,CAAqF/P,QAArF,EAA+FE,UAA/F,EAA2GE,KAAK,CAACO,GAAN,CAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,CAA3G,EAA+HqP,MAA/H;;UAEA,KAAK,IAAI7O,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAG5B,MAAM,CAAC6B,MAA5B,EAAoCF,CAAC,GAAGC,EAAxC,EAA4CD,CAAC,EAA7C,EAAiD;YAC/C,IAAM+H,IAAI,GAAG1J,MAAM,CAAC2B,CAAD,CAAN,CAAU+H,IAAvB;YACA,IAAM+G,KAAK,GAAG,KAAKC,QAAL,CAAc/O,CAAd,CAAd;YACA,IAAMiL,EAAE,GAAGlD,IAAI,CAACoD,wBAAL,EAAX;YACA,IAAM6D,MAAM,GAAG/D,EAAE,CAAC/G,SAAH,EAAf;YACA,IAAMsF,QAAQ,GAAGyB,EAAE,CAAClH,WAAH,EAAjB;YACA+K,KAAK,CAACjQ,QAAN,CAAeW,GAAf,CAAmBwP,MAAM,CAAC5P,CAAP,EAAnB,EAA+B4P,MAAM,CAAC3P,CAAP,EAA/B,EAA2C2P,MAAM,CAAC1P,CAAP,EAA3C,EAAuD2P,YAAvD,CAAoER,cAApE;YACAK,KAAK,CAAC/P,UAAN,CAAiB2M,qBAAjB,CAAuC+C,cAAvC,EAAuD7C,QAAvD,CAAgE7M,UAAU,CAACS,GAAX,CAAegK,QAAQ,CAACpK,CAAT,EAAf,EAA6BoK,QAAQ,CAACnK,CAAT,EAA7B,EAA2CmK,QAAQ,CAAClK,CAAT,EAA3C,EAAyDkK,QAAQ,CAAC/D,CAAT,EAAzD,CAAhE;UACD;QACF;;QAED,KAAKoG,MAAL,CAAY1N,IAAZ,CAAiBZ,IAAI,CAAC2B,WAAtB,EAAmCC,SAAnC,CAA6CN,QAA7C,EAAuDE,UAAvD,EAAmEE,KAAnE,EAA0E2P,OAA1E,CAAkF/P,QAAlF,EAA4FE,UAA5F,EAAwGE,KAAK,CAACO,GAAN,CAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,CAAxG;QACA9C,QAAQ,CAAC8B,SAAT,CAAmBiB,iBAAnB,CAAqCmO,IAArC,CAA0C,IAA1C,EAAgDc,KAAhD;MACD,CApBD;IAqBD,CA1BkB,EANyD;IAiC5E;IACAnQ,KAAK,EAAE,iBAAY;MACjB,IAAMF,MAAM,GAAG,KAAKsP,OAAL,CAAatP,MAA5B;;MAEA,SAAS6Q,cAAT,CAAwBC,KAAxB,EAA+B;QAC7B,QAAQA,KAAK,CAACxG,SAAd;UACE,KAAK,CAAL;YACE,OAAO,IAAIvL,cAAJ,CAAmB+R,KAAK,CAACtG,KAAzB,EAAgC,EAAhC,EAAoC,CAApC,CAAP;;UAEF,KAAK,CAAL;YACE,OAAO,IAAI1L,WAAJ,CAAgBgS,KAAK,CAACtG,KAAN,GAAc,CAA9B,EAAiCsG,KAAK,CAACpG,MAAN,GAAe,CAAhD,EAAmDoG,KAAK,CAACnG,KAAN,GAAc,CAAjE,EAAoE,CAApE,EAAuE,CAAvE,EAA0E,CAA1E,CAAP;;UAEF,KAAK,CAAL;YACE,OAAO,IAAIoG,qBAAJ,CAA0BD,KAAK,CAACtG,KAAhC,EAAuCsG,KAAK,CAACpG,MAA7C,EAAqD,EAArD,EAAyD,CAAzD,CAAP;;UAEF;YACE,OAAO,IAAP;QAXJ;MAaD,CAjBgB,CAiBf;;;MAGF,SAASqG,qBAAT,CAA+BC,MAA/B,EAAuCC,cAAvC,EAAuDC,cAAvD,EAAuEC,cAAvE,EAAuF;QACrF,IAAMC,QAAQ,GAAG,IAAIpS,gBAAJ,CAAqBgS,MAArB,EAA6BA,MAA7B,EAAqCC,cAArC,EAAqDC,cAArD,EAAqEC,cAArE,EAAqF,IAArF,CAAjB;QACA,IAAME,WAAW,GAAG,IAAI5S,IAAJ,CAAS,IAAIM,cAAJ,CAAmBiS,MAAnB,EAA2BE,cAA3B,EAA2CC,cAA3C,EAA2D,CAA3D,EAA8D3H,IAAI,CAAC8H,EAAL,GAAU,CAAxE,EAA2E,CAA3E,EAA8E9H,IAAI,CAAC8H,EAAL,GAAU,CAAxF,CAAT,CAApB;QACA,IAAMC,WAAW,GAAG,IAAI9S,IAAJ,CAAS,IAAIM,cAAJ,CAAmBiS,MAAnB,EAA2BE,cAA3B,EAA2CC,cAA3C,EAA2D,CAA3D,EAA8D3H,IAAI,CAAC8H,EAAL,GAAU,CAAxE,EAA2E9H,IAAI,CAAC8H,EAAL,GAAU,CAArF,EAAwF9H,IAAI,CAAC8H,EAAL,GAAU,CAAlG,CAAT,CAApB;QACAD,WAAW,CAAC7Q,QAAZ,CAAqBW,GAArB,CAAyB,CAAzB,EAA4B8P,cAAc,GAAG,CAA7C,EAAgD,CAAhD;QACAM,WAAW,CAAC/Q,QAAZ,CAAqBW,GAArB,CAAyB,CAAzB,EAA4B,CAAC8P,cAAD,GAAkB,CAA9C,EAAiD,CAAjD;QACAI,WAAW,CAACG,YAAZ;QACAD,WAAW,CAACC,YAAZ;QACAJ,QAAQ,CAACK,KAAT,CAAeJ,WAAW,CAACD,QAA3B,EAAqCC,WAAW,CAAC7D,MAAjD;QACA4D,QAAQ,CAACK,KAAT,CAAeF,WAAW,CAACH,QAA3B,EAAqCG,WAAW,CAAC/D,MAAjD;QACA,OAAO4D,QAAP;MACD;;MAED,KAAK,IAAIzP,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAG5B,MAAM,CAAC6B,MAA5B,EAAoCF,CAAC,GAAGC,EAAxC,EAA4CD,CAAC,EAA7C,EAAiD;QAC/C,IAAMmP,KAAK,GAAG9Q,MAAM,CAAC2B,CAAD,CAAN,CAAUtC,MAAxB;QACA,KAAKqS,GAAL,CAAS,IAAIjT,IAAJ,CAASoS,cAAc,CAACC,KAAD,CAAvB,EAAgC,KAAKpB,SAAL,CAAeoB,KAAK,CAAC9G,IAArB,CAAhC,CAAT;MACD;IACF;EAvE2E,CAAjD,CAA7B;EAyEA,OAAO/K,UAAP;AACD,CA97BkB,EAAnB;;AAg8BA,SAASA,UAAT"},"metadata":{},"sourceType":"module"}