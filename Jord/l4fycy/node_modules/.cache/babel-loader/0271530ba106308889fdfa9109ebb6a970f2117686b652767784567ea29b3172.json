{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as THREE from 'three';\nimport * as React from 'react';\nimport { extend, useFrame } from '@react-three/fiber';\nimport mergeRefs from 'react-merge-refs';\nimport Composer from 'react-composer';\nimport { setUpdateRange } from '../helpers/deprecated.js';\nfunction isFunctionChild(value) {\n  return typeof value === 'function';\n}\nconst _instanceLocalMatrix = /* @__PURE__ */new THREE.Matrix4();\nconst _instanceWorldMatrix = /* @__PURE__ */new THREE.Matrix4();\nconst _instanceIntersects = [];\nconst _mesh = /* @__PURE__ */new THREE.Mesh();\nclass PositionMesh extends THREE.Group {\n  constructor() {\n    super();\n    this.color = new THREE.Color('white');\n    this.instance = {\n      current: undefined\n    };\n    this.instanceKey = {\n      current: undefined\n    };\n  }\n\n  // This will allow the virtual instance have bounds\n  get geometry() {\n    var _this$instance$curren;\n    return (_this$instance$curren = this.instance.current) == null ? void 0 : _this$instance$curren.geometry;\n  }\n\n  // And this will allow the virtual instance to receive events\n  raycast(raycaster, intersects) {\n    const parent = this.instance.current;\n    if (!parent) return;\n    if (!parent.geometry || !parent.material) return;\n    _mesh.geometry = parent.geometry;\n    const matrixWorld = parent.matrixWorld;\n    const instanceId = parent.userData.instances.indexOf(this.instanceKey);\n    // If the instance wasn't found or exceeds the parents draw range, bail out\n    if (instanceId === -1 || instanceId > parent.count) return;\n    // calculate the world matrix for each instance\n    parent.getMatrixAt(instanceId, _instanceLocalMatrix);\n    _instanceWorldMatrix.multiplyMatrices(matrixWorld, _instanceLocalMatrix);\n    // the mesh represents this single instance\n    _mesh.matrixWorld = _instanceWorldMatrix;\n    // raycast side according to instance material\n    if (parent.material instanceof THREE.Material) _mesh.material.side = parent.material.side;else _mesh.material.side = parent.material[0].side;\n    _mesh.raycast(raycaster, _instanceIntersects);\n    // process the result of raycast\n    for (let i = 0, l = _instanceIntersects.length; i < l; i++) {\n      const intersect = _instanceIntersects[i];\n      intersect.instanceId = instanceId;\n      intersect.object = this;\n      intersects.push(intersect);\n    }\n    _instanceIntersects.length = 0;\n  }\n}\nconst globalContext = /* @__PURE__ */React.createContext(null);\nconst parentMatrix = /* @__PURE__ */new THREE.Matrix4();\nconst instanceMatrix = /* @__PURE__ */new THREE.Matrix4();\nconst tempMatrix = /* @__PURE__ */new THREE.Matrix4();\nconst translation = /* @__PURE__ */new THREE.Vector3();\nconst rotation = /* @__PURE__ */new THREE.Quaternion();\nconst scale = /* @__PURE__ */new THREE.Vector3();\nconst Instance = /* @__PURE__ */React.forwardRef((_ref, ref) => {\n  let {\n    context,\n    children,\n    ...props\n  } = _ref;\n  React.useMemo(() => extend({\n    PositionMesh\n  }), []);\n  const group = React.useRef();\n  const {\n    subscribe,\n    getParent\n  } = React.useContext(context || globalContext);\n  React.useLayoutEffect(() => subscribe(group), []);\n  return /*#__PURE__*/React.createElement(\"positionMesh\", _extends({\n    instance: getParent(),\n    instanceKey: group,\n    ref: mergeRefs([ref, group])\n  }, props), children);\n});\nconst Instances = /* @__PURE__ */React.forwardRef((_ref2, ref) => {\n  let {\n    children,\n    range,\n    limit = 1000,\n    frames = Infinity,\n    ...props\n  } = _ref2;\n  const [{\n    context,\n    instance\n  }] = React.useState(() => {\n    const context = /*#__PURE__*/React.createContext(null);\n    return {\n      context,\n      instance: /*#__PURE__*/React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(Instance, _extends({\n        context: context\n      }, props, {\n        ref: ref\n      })))\n    };\n  });\n  const parentRef = React.useRef(null);\n  const [instances, setInstances] = React.useState([]);\n  const [[matrices, colors]] = React.useState(() => {\n    const mArray = new Float32Array(limit * 16);\n    for (let i = 0; i < limit; i++) tempMatrix.identity().toArray(mArray, i * 16);\n    return [mArray, new Float32Array([...new Array(limit * 3)].map(() => 1))];\n  });\n  React.useEffect(() => {\n    // We might be a frame too late? 🤷‍♂️\n    parentRef.current.instanceMatrix.needsUpdate = true;\n  });\n  let iterations = 0;\n  let count = 0;\n  useFrame(() => {\n    if (frames === Infinity || iterations < frames) {\n      parentRef.current.updateMatrix();\n      parentRef.current.updateMatrixWorld();\n      parentMatrix.copy(parentRef.current.matrixWorld).invert();\n      count = Math.min(limit, range !== undefined ? range : limit, instances.length);\n      parentRef.current.count = count;\n      setUpdateRange(parentRef.current.instanceMatrix, {\n        offset: 0,\n        count: count * 16\n      });\n      setUpdateRange(parentRef.current.instanceColor, {\n        offset: 0,\n        count: count * 3\n      });\n      for (let i = 0; i < instances.length; i++) {\n        const instance = instances[i].current;\n        // Multiply the inverse of the InstancedMesh world matrix or else\n        // Instances will be double-transformed if <Instances> isn't at identity\n        instance.matrixWorld.decompose(translation, rotation, scale);\n        instanceMatrix.compose(translation, rotation, scale).premultiply(parentMatrix);\n        instanceMatrix.toArray(matrices, i * 16);\n        parentRef.current.instanceMatrix.needsUpdate = true;\n        instance.color.toArray(colors, i * 3);\n        parentRef.current.instanceColor.needsUpdate = true;\n      }\n      iterations++;\n    }\n  });\n  const api = React.useMemo(() => ({\n    getParent: () => parentRef,\n    subscribe: ref => {\n      setInstances(instances => [...instances, ref]);\n      return () => setInstances(instances => instances.filter(item => item.current !== ref.current));\n    }\n  }), []);\n  return /*#__PURE__*/React.createElement(\"instancedMesh\", _extends({\n    userData: {\n      instances\n    },\n    matrixAutoUpdate: false,\n    ref: mergeRefs([ref, parentRef]),\n    args: [null, null, 0],\n    raycast: () => null\n  }, props), /*#__PURE__*/React.createElement(\"instancedBufferAttribute\", {\n    attach: \"instanceMatrix\",\n    count: matrices.length / 16,\n    array: matrices,\n    itemSize: 16,\n    usage: THREE.DynamicDrawUsage\n  }), /*#__PURE__*/React.createElement(\"instancedBufferAttribute\", {\n    attach: \"instanceColor\",\n    count: colors.length / 3,\n    array: colors,\n    itemSize: 3,\n    usage: THREE.DynamicDrawUsage\n  }), isFunctionChild(children) ? /*#__PURE__*/React.createElement(context.Provider, {\n    value: api\n  }, children(instance)) : /*#__PURE__*/React.createElement(globalContext.Provider, {\n    value: api\n  }, children));\n});\nconst Merged = /* @__PURE__ */React.forwardRef(function Merged(_ref3, ref) {\n  let {\n    meshes,\n    children,\n    ...props\n  } = _ref3;\n  const isArray = Array.isArray(meshes);\n  // Filter out meshes from collections, which may contain non-meshes\n  if (!isArray) for (const key of Object.keys(meshes)) if (!meshes[key].isMesh) delete meshes[key];\n  return /*#__PURE__*/React.createElement(\"group\", {\n    ref: ref\n  }, /*#__PURE__*/React.createElement(Composer, {\n    components: (isArray ? meshes : Object.values(meshes)).map(_ref4 => {\n      let {\n        geometry,\n        material\n      } = _ref4;\n      return /*#__PURE__*/React.createElement(Instances, _extends({\n        key: geometry.uuid,\n        geometry: geometry,\n        material: material\n      }, props));\n    })\n  }, args => isArray ? children(...args) : children(Object.keys(meshes).filter(key => meshes[key].isMesh).reduce((acc, key, i) => ({\n    ...acc,\n    [key]: args[i]\n  }), {}))));\n});\nexport { Instance, Instances, Merged };","map":{"version":3,"names":["_extends","THREE","React","extend","useFrame","mergeRefs","Composer","setUpdateRange","isFunctionChild","value","_instanceLocalMatrix","Matrix4","_instanceWorldMatrix","_instanceIntersects","_mesh","Mesh","PositionMesh","Group","constructor","color","Color","instance","current","undefined","instanceKey","geometry","_this$instance$curren","raycast","raycaster","intersects","parent","material","matrixWorld","instanceId","userData","instances","indexOf","count","getMatrixAt","multiplyMatrices","Material","side","i","l","length","intersect","object","push","globalContext","createContext","parentMatrix","instanceMatrix","tempMatrix","translation","Vector3","rotation","Quaternion","scale","Instance","forwardRef","_ref","ref","context","children","props","useMemo","group","useRef","subscribe","getParent","useContext","useLayoutEffect","createElement","Instances","_ref2","range","limit","frames","Infinity","useState","parentRef","setInstances","matrices","colors","mArray","Float32Array","identity","toArray","Array","map","useEffect","needsUpdate","iterations","updateMatrix","updateMatrixWorld","copy","invert","Math","min","offset","instanceColor","decompose","compose","premultiply","api","filter","item","matrixAutoUpdate","args","attach","array","itemSize","usage","DynamicDrawUsage","Provider","Merged","_ref3","meshes","isArray","key","Object","keys","isMesh","components","values","_ref4","uuid","reduce","acc"],"sources":["D:/Repos/NIKE-DJANGO/Jord/l4fycy/node_modules/@react-three/drei/core/Instances.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\r\nimport * as THREE from 'three';\r\nimport * as React from 'react';\r\nimport { extend, useFrame } from '@react-three/fiber';\r\nimport mergeRefs from 'react-merge-refs';\r\nimport Composer from 'react-composer';\r\nimport { setUpdateRange } from '../helpers/deprecated.js';\r\n\r\nfunction isFunctionChild(value) {\r\n  return typeof value === 'function';\r\n}\r\nconst _instanceLocalMatrix = /* @__PURE__ */new THREE.Matrix4();\r\nconst _instanceWorldMatrix = /* @__PURE__ */new THREE.Matrix4();\r\nconst _instanceIntersects = [];\r\nconst _mesh = /* @__PURE__ */new THREE.Mesh();\r\nclass PositionMesh extends THREE.Group {\r\n  constructor() {\r\n    super();\r\n    this.color = new THREE.Color('white');\r\n    this.instance = {\r\n      current: undefined\r\n    };\r\n    this.instanceKey = {\r\n      current: undefined\r\n    };\r\n  }\r\n\r\n  // This will allow the virtual instance have bounds\r\n  get geometry() {\r\n    var _this$instance$curren;\r\n    return (_this$instance$curren = this.instance.current) == null ? void 0 : _this$instance$curren.geometry;\r\n  }\r\n\r\n  // And this will allow the virtual instance to receive events\r\n  raycast(raycaster, intersects) {\r\n    const parent = this.instance.current;\r\n    if (!parent) return;\r\n    if (!parent.geometry || !parent.material) return;\r\n    _mesh.geometry = parent.geometry;\r\n    const matrixWorld = parent.matrixWorld;\r\n    const instanceId = parent.userData.instances.indexOf(this.instanceKey);\r\n    // If the instance wasn't found or exceeds the parents draw range, bail out\r\n    if (instanceId === -1 || instanceId > parent.count) return;\r\n    // calculate the world matrix for each instance\r\n    parent.getMatrixAt(instanceId, _instanceLocalMatrix);\r\n    _instanceWorldMatrix.multiplyMatrices(matrixWorld, _instanceLocalMatrix);\r\n    // the mesh represents this single instance\r\n    _mesh.matrixWorld = _instanceWorldMatrix;\r\n    // raycast side according to instance material\r\n    if (parent.material instanceof THREE.Material) _mesh.material.side = parent.material.side;else _mesh.material.side = parent.material[0].side;\r\n    _mesh.raycast(raycaster, _instanceIntersects);\r\n    // process the result of raycast\r\n    for (let i = 0, l = _instanceIntersects.length; i < l; i++) {\r\n      const intersect = _instanceIntersects[i];\r\n      intersect.instanceId = instanceId;\r\n      intersect.object = this;\r\n      intersects.push(intersect);\r\n    }\r\n    _instanceIntersects.length = 0;\r\n  }\r\n}\r\nconst globalContext = /* @__PURE__ */React.createContext(null);\r\nconst parentMatrix = /* @__PURE__ */new THREE.Matrix4();\r\nconst instanceMatrix = /* @__PURE__ */new THREE.Matrix4();\r\nconst tempMatrix = /* @__PURE__ */new THREE.Matrix4();\r\nconst translation = /* @__PURE__ */new THREE.Vector3();\r\nconst rotation = /* @__PURE__ */new THREE.Quaternion();\r\nconst scale = /* @__PURE__ */new THREE.Vector3();\r\nconst Instance = /* @__PURE__ */React.forwardRef(({\r\n  context,\r\n  children,\r\n  ...props\r\n}, ref) => {\r\n  React.useMemo(() => extend({\r\n    PositionMesh\r\n  }), []);\r\n  const group = React.useRef();\r\n  const {\r\n    subscribe,\r\n    getParent\r\n  } = React.useContext(context || globalContext);\r\n  React.useLayoutEffect(() => subscribe(group), []);\r\n  return /*#__PURE__*/React.createElement(\"positionMesh\", _extends({\r\n    instance: getParent(),\r\n    instanceKey: group,\r\n    ref: mergeRefs([ref, group])\r\n  }, props), children);\r\n});\r\nconst Instances = /* @__PURE__ */React.forwardRef(({\r\n  children,\r\n  range,\r\n  limit = 1000,\r\n  frames = Infinity,\r\n  ...props\r\n}, ref) => {\r\n  const [{\r\n    context,\r\n    instance\r\n  }] = React.useState(() => {\r\n    const context = /*#__PURE__*/React.createContext(null);\r\n    return {\r\n      context,\r\n      instance: /*#__PURE__*/React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(Instance, _extends({\r\n        context: context\r\n      }, props, {\r\n        ref: ref\r\n      })))\r\n    };\r\n  });\r\n  const parentRef = React.useRef(null);\r\n  const [instances, setInstances] = React.useState([]);\r\n  const [[matrices, colors]] = React.useState(() => {\r\n    const mArray = new Float32Array(limit * 16);\r\n    for (let i = 0; i < limit; i++) tempMatrix.identity().toArray(mArray, i * 16);\r\n    return [mArray, new Float32Array([...new Array(limit * 3)].map(() => 1))];\r\n  });\r\n  React.useEffect(() => {\r\n    // We might be a frame too late? 🤷‍♂️\r\n    parentRef.current.instanceMatrix.needsUpdate = true;\r\n  });\r\n  let iterations = 0;\r\n  let count = 0;\r\n  useFrame(() => {\r\n    if (frames === Infinity || iterations < frames) {\r\n      parentRef.current.updateMatrix();\r\n      parentRef.current.updateMatrixWorld();\r\n      parentMatrix.copy(parentRef.current.matrixWorld).invert();\r\n      count = Math.min(limit, range !== undefined ? range : limit, instances.length);\r\n      parentRef.current.count = count;\r\n      setUpdateRange(parentRef.current.instanceMatrix, {\r\n        offset: 0,\r\n        count: count * 16\r\n      });\r\n      setUpdateRange(parentRef.current.instanceColor, {\r\n        offset: 0,\r\n        count: count * 3\r\n      });\r\n      for (let i = 0; i < instances.length; i++) {\r\n        const instance = instances[i].current;\r\n        // Multiply the inverse of the InstancedMesh world matrix or else\r\n        // Instances will be double-transformed if <Instances> isn't at identity\r\n        instance.matrixWorld.decompose(translation, rotation, scale);\r\n        instanceMatrix.compose(translation, rotation, scale).premultiply(parentMatrix);\r\n        instanceMatrix.toArray(matrices, i * 16);\r\n        parentRef.current.instanceMatrix.needsUpdate = true;\r\n        instance.color.toArray(colors, i * 3);\r\n        parentRef.current.instanceColor.needsUpdate = true;\r\n      }\r\n      iterations++;\r\n    }\r\n  });\r\n  const api = React.useMemo(() => ({\r\n    getParent: () => parentRef,\r\n    subscribe: ref => {\r\n      setInstances(instances => [...instances, ref]);\r\n      return () => setInstances(instances => instances.filter(item => item.current !== ref.current));\r\n    }\r\n  }), []);\r\n  return /*#__PURE__*/React.createElement(\"instancedMesh\", _extends({\r\n    userData: {\r\n      instances\r\n    },\r\n    matrixAutoUpdate: false,\r\n    ref: mergeRefs([ref, parentRef]),\r\n    args: [null, null, 0],\r\n    raycast: () => null\r\n  }, props), /*#__PURE__*/React.createElement(\"instancedBufferAttribute\", {\r\n    attach: \"instanceMatrix\",\r\n    count: matrices.length / 16,\r\n    array: matrices,\r\n    itemSize: 16,\r\n    usage: THREE.DynamicDrawUsage\r\n  }), /*#__PURE__*/React.createElement(\"instancedBufferAttribute\", {\r\n    attach: \"instanceColor\",\r\n    count: colors.length / 3,\r\n    array: colors,\r\n    itemSize: 3,\r\n    usage: THREE.DynamicDrawUsage\r\n  }), isFunctionChild(children) ? /*#__PURE__*/React.createElement(context.Provider, {\r\n    value: api\r\n  }, children(instance)) : /*#__PURE__*/React.createElement(globalContext.Provider, {\r\n    value: api\r\n  }, children));\r\n});\r\nconst Merged = /* @__PURE__ */React.forwardRef(function Merged({\r\n  meshes,\r\n  children,\r\n  ...props\r\n}, ref) {\r\n  const isArray = Array.isArray(meshes);\r\n  // Filter out meshes from collections, which may contain non-meshes\r\n  if (!isArray) for (const key of Object.keys(meshes)) if (!meshes[key].isMesh) delete meshes[key];\r\n  return /*#__PURE__*/React.createElement(\"group\", {\r\n    ref: ref\r\n  }, /*#__PURE__*/React.createElement(Composer, {\r\n    components: (isArray ? meshes : Object.values(meshes)).map(({\r\n      geometry,\r\n      material\r\n    }) => /*#__PURE__*/React.createElement(Instances, _extends({\r\n      key: geometry.uuid,\r\n      geometry: geometry,\r\n      material: material\r\n    }, props)))\r\n  }, args => isArray ? children(...args) : children(Object.keys(meshes).filter(key => meshes[key].isMesh).reduce((acc, key, i) => ({\r\n    ...acc,\r\n    [key]: args[i]\r\n  }), {}))));\r\n});\r\n\r\nexport { Instance, Instances, Merged };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}