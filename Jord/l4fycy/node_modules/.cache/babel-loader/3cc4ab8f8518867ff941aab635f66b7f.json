{"ast":null,"code":"import _classCallCheck from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Vector3, Color, Vector2, Mesh, Line, Points, Matrix3, BufferAttribute } from 'three';\n\nvar OBJExporter = /*#__PURE__*/function () {\n  function OBJExporter() {\n    _classCallCheck(this, OBJExporter);\n\n    _defineProperty(this, \"output\", void 0);\n\n    _defineProperty(this, \"indexVertex\", void 0);\n\n    _defineProperty(this, \"indexVertexUvs\", void 0);\n\n    _defineProperty(this, \"indexNormals\", void 0);\n\n    _defineProperty(this, \"vertex\", void 0);\n\n    _defineProperty(this, \"color\", void 0);\n\n    _defineProperty(this, \"normal\", void 0);\n\n    _defineProperty(this, \"uv\", void 0);\n\n    _defineProperty(this, \"face\", void 0);\n\n    this.output = '';\n    this.indexVertex = 0;\n    this.indexVertexUvs = 0;\n    this.indexNormals = 0;\n    this.vertex = new Vector3();\n    this.color = new Color();\n    this.normal = new Vector3();\n    this.uv = new Vector2();\n    this.face = [];\n  }\n\n  _createClass(OBJExporter, [{\n    key: \"parse\",\n    value: function parse(object) {\n      var _this = this;\n\n      object.traverse(function (child) {\n        if (child instanceof Mesh && child.isMesh) {\n          _this.parseMesh(child);\n        }\n\n        if (child instanceof Line && child.isLine) {\n          _this.parseLine(child);\n        }\n\n        if (child instanceof Points && child.isPoints) {\n          _this.parsePoints(child);\n        }\n      });\n      return this.output;\n    }\n  }, {\n    key: \"parseMesh\",\n    value: function parseMesh(mesh) {\n      var nbVertex = 0;\n      var nbNormals = 0;\n      var nbVertexUvs = 0;\n      var geometry = mesh.geometry;\n      var normalMatrixWorld = new Matrix3();\n\n      if (!geometry.isBufferGeometry) {\n        throw new Error('THREE.OBJExporter: Geometry is not of type THREE.BufferGeometry.');\n      } // shortcuts\n\n\n      var vertices = geometry.getAttribute('position');\n      var normals = geometry.getAttribute('normal');\n      var uvs = geometry.getAttribute('uv');\n      var indices = geometry.getIndex(); // name of the mesh object\n\n      this.output += \"o \".concat(mesh.name, \"\\n\"); // name of the mesh material\n\n      if (mesh.material && !Array.isArray(mesh.material) && mesh.material.name) {\n        this.output += \"usemtl \".concat(mesh.material.name, \"\\n\");\n      } // vertices\n\n\n      if (vertices !== undefined) {\n        for (var i = 0, l = vertices.count; i < l; i++, nbVertex++) {\n          this.vertex.x = vertices.getX(i);\n          this.vertex.y = vertices.getY(i);\n          this.vertex.z = vertices.getZ(i); // transform the vertex to world space\n\n          this.vertex.applyMatrix4(mesh.matrixWorld); // transform the vertex to export format\n\n          this.output += \"v \".concat(this.vertex.x, \" \").concat(this.vertex.y, \" \").concat(this.vertex.z, \"\\n\");\n        }\n      } // uvs\n\n\n      if (uvs !== undefined) {\n        for (var _i = 0, _l = uvs.count; _i < _l; _i++, nbVertexUvs++) {\n          this.uv.x = uvs.getX(_i);\n          this.uv.y = uvs.getY(_i); // transform the uv to export format\n\n          this.output += \"vt \".concat(this.uv.x, \" \").concat(this.uv.y, \"\\n\");\n        }\n      } // normals\n\n\n      if (normals !== undefined) {\n        normalMatrixWorld.getNormalMatrix(mesh.matrixWorld);\n\n        for (var _i2 = 0, _l2 = normals.count; _i2 < _l2; _i2++, nbNormals++) {\n          this.normal.x = normals.getX(_i2);\n          this.normal.y = normals.getY(_i2);\n          this.normal.z = normals.getZ(_i2); // transform the normal to world space\n\n          this.normal.applyMatrix3(normalMatrixWorld).normalize(); // transform the normal to export format\n\n          this.output += \"vn \".concat(this.normal.x, \" \").concat(this.normal.y, \" \").concat(this.normal.z, \"\\n\");\n        }\n      } // faces\n\n\n      if (indices !== null) {\n        for (var _i3 = 0, _l3 = indices.count; _i3 < _l3; _i3 += 3) {\n          for (var m = 0; m < 3; m++) {\n            var j = indices.getX(_i3 + m) + 1;\n            this.face[m] = this.indexVertex + j + (normals || uvs ? \"/\".concat(uvs ? this.indexVertexUvs + j : '').concat(normals ? \"/\".concat(this.indexNormals + j) : '') : '');\n          } // transform the face to export format\n\n\n          this.output += \"f \".concat(this.face.join(' '), \"\\n\");\n        }\n      } else {\n        for (var _i4 = 0, _l4 = vertices.count; _i4 < _l4; _i4 += 3) {\n          for (var _m = 0; _m < 3; _m++) {\n            var _j = _i4 + _m + 1;\n\n            this.face[_m] = this.indexVertex + _j + (normals || uvs ? \"/\".concat(uvs ? this.indexVertexUvs + _j : '').concat(normals ? \"/\".concat(this.indexNormals + _j) : '') : '');\n          } // transform the face to export format\n\n\n          this.output += \"f \".concat(this.face.join(' '), \"\\n\");\n        }\n      } // update index\n\n\n      this.indexVertex += nbVertex;\n      this.indexVertexUvs += nbVertexUvs;\n      this.indexNormals += nbNormals;\n    }\n  }, {\n    key: \"parseLine\",\n    value: function parseLine(line) {\n      var nbVertex = 0;\n      var geometry = line.geometry;\n      var type = line.type;\n\n      if (geometry.isBufferGeometry) {\n        throw new Error('THREE.OBJExporter: Geometry is not of type THREE.BufferGeometry.');\n      } // shortcuts\n\n\n      var vertices = geometry.getAttribute('position'); // name of the line object\n\n      this.output += \"o \".concat(line.name, \"\\n\");\n\n      if (vertices !== undefined) {\n        for (var i = 0, l = vertices.count; i < l; i++, nbVertex++) {\n          this.vertex.x = vertices.getX(i);\n          this.vertex.y = vertices.getY(i);\n          this.vertex.z = vertices.getZ(i); // transform the vertex to world space\n\n          this.vertex.applyMatrix4(line.matrixWorld); // transform the vertex to export format\n\n          this.output += \"v \".concat(this.vertex.x, \" \").concat(this.vertex.y, \" \").concat(this.vertex.z, \"\\n\");\n        }\n      }\n\n      if (type === 'Line') {\n        this.output += 'l ';\n\n        for (var j = 1, _l5 = vertices.count; j <= _l5; j++) {\n          this.output += \"\".concat(this.indexVertex + j, \" \");\n        }\n\n        this.output += '\\n';\n      }\n\n      if (type === 'LineSegments') {\n        for (var _j2 = 1, k = _j2 + 1, _l6 = vertices.count; _j2 < _l6; _j2 += 2, k = _j2 + 1) {\n          this.output += \"l \".concat(this.indexVertex + _j2, \" \").concat(this.indexVertex + k, \"\\n\");\n        }\n      } // update index\n\n\n      this.indexVertex += nbVertex;\n    }\n  }, {\n    key: \"parsePoints\",\n    value: function parsePoints(points) {\n      var nbVertex = 0;\n      var geometry = points.geometry;\n\n      if (!geometry.isBufferGeometry) {\n        throw new Error('THREE.OBJExporter: Geometry is not of type THREE.BufferGeometry.');\n      }\n\n      var vertices = geometry.getAttribute('position');\n      var colors = geometry.getAttribute('color');\n      this.output += \"o \".concat(points.name, \"\\n\");\n\n      if (vertices !== undefined) {\n        for (var i = 0, l = vertices.count; i < l; i++, nbVertex++) {\n          this.vertex.fromBufferAttribute(vertices, i);\n          this.vertex.applyMatrix4(points.matrixWorld);\n          this.output += \"v \".concat(this.vertex.x, \" \").concat(this.vertex.y, \" \").concat(this.vertex.z);\n\n          if (colors !== undefined && colors instanceof BufferAttribute) {\n            this.color.fromBufferAttribute(colors, i);\n            this.output += \" \".concat(this.color.r, \" \").concat(this.color.g, \" \").concat(this.color.b);\n          }\n\n          this.output += '\\n';\n        }\n      }\n\n      this.output += 'p ';\n\n      for (var j = 1, _l7 = vertices.count; j <= _l7; j++) {\n        this.output += \"\".concat(this.indexVertex + j, \" \");\n      }\n\n      this.output += '\\n'; // update index\n\n      this.indexVertex += nbVertex;\n    }\n  }]);\n\n  return OBJExporter;\n}();\n\nexport { OBJExporter };","map":{"version":3,"names":["_defineProperty","Vector3","Color","Vector2","Mesh","Line","Points","Matrix3","BufferAttribute","OBJExporter","output","indexVertex","indexVertexUvs","indexNormals","vertex","color","normal","uv","face","object","traverse","child","isMesh","parseMesh","isLine","parseLine","isPoints","parsePoints","mesh","nbVertex","nbNormals","nbVertexUvs","geometry","normalMatrixWorld","isBufferGeometry","Error","vertices","getAttribute","normals","uvs","indices","getIndex","name","material","Array","isArray","undefined","i","l","count","x","getX","y","getY","z","getZ","applyMatrix4","matrixWorld","getNormalMatrix","applyMatrix3","normalize","m","j","join","line","type","k","points","colors","fromBufferAttribute","r","g","b"],"sources":["D:/Jord/l4fycy/node_modules/three-stdlib/exporters/OBJExporter.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Vector3, Color, Vector2, Mesh, Line, Points, Matrix3, BufferAttribute } from 'three';\n\nclass OBJExporter {\n  constructor() {\n    _defineProperty(this, \"output\", void 0);\n\n    _defineProperty(this, \"indexVertex\", void 0);\n\n    _defineProperty(this, \"indexVertexUvs\", void 0);\n\n    _defineProperty(this, \"indexNormals\", void 0);\n\n    _defineProperty(this, \"vertex\", void 0);\n\n    _defineProperty(this, \"color\", void 0);\n\n    _defineProperty(this, \"normal\", void 0);\n\n    _defineProperty(this, \"uv\", void 0);\n\n    _defineProperty(this, \"face\", void 0);\n\n    this.output = '';\n    this.indexVertex = 0;\n    this.indexVertexUvs = 0;\n    this.indexNormals = 0;\n    this.vertex = new Vector3();\n    this.color = new Color();\n    this.normal = new Vector3();\n    this.uv = new Vector2();\n    this.face = [];\n  }\n\n  parse(object) {\n    object.traverse(child => {\n      if (child instanceof Mesh && child.isMesh) {\n        this.parseMesh(child);\n      }\n\n      if (child instanceof Line && child.isLine) {\n        this.parseLine(child);\n      }\n\n      if (child instanceof Points && child.isPoints) {\n        this.parsePoints(child);\n      }\n    });\n    return this.output;\n  }\n\n  parseMesh(mesh) {\n    let nbVertex = 0;\n    let nbNormals = 0;\n    let nbVertexUvs = 0;\n    const geometry = mesh.geometry;\n    const normalMatrixWorld = new Matrix3();\n\n    if (!geometry.isBufferGeometry) {\n      throw new Error('THREE.OBJExporter: Geometry is not of type THREE.BufferGeometry.');\n    } // shortcuts\n\n\n    const vertices = geometry.getAttribute('position');\n    const normals = geometry.getAttribute('normal');\n    const uvs = geometry.getAttribute('uv');\n    const indices = geometry.getIndex(); // name of the mesh object\n\n    this.output += `o ${mesh.name}\\n`; // name of the mesh material\n\n    if (mesh.material && !Array.isArray(mesh.material) && mesh.material.name) {\n      this.output += `usemtl ${mesh.material.name}\\n`;\n    } // vertices\n\n\n    if (vertices !== undefined) {\n      for (let i = 0, l = vertices.count; i < l; i++, nbVertex++) {\n        this.vertex.x = vertices.getX(i);\n        this.vertex.y = vertices.getY(i);\n        this.vertex.z = vertices.getZ(i); // transform the vertex to world space\n\n        this.vertex.applyMatrix4(mesh.matrixWorld); // transform the vertex to export format\n\n        this.output += `v ${this.vertex.x} ${this.vertex.y} ${this.vertex.z}\\n`;\n      }\n    } // uvs\n\n\n    if (uvs !== undefined) {\n      for (let i = 0, l = uvs.count; i < l; i++, nbVertexUvs++) {\n        this.uv.x = uvs.getX(i);\n        this.uv.y = uvs.getY(i); // transform the uv to export format\n\n        this.output += `vt ${this.uv.x} ${this.uv.y}\\n`;\n      }\n    } // normals\n\n\n    if (normals !== undefined) {\n      normalMatrixWorld.getNormalMatrix(mesh.matrixWorld);\n\n      for (let i = 0, l = normals.count; i < l; i++, nbNormals++) {\n        this.normal.x = normals.getX(i);\n        this.normal.y = normals.getY(i);\n        this.normal.z = normals.getZ(i); // transform the normal to world space\n\n        this.normal.applyMatrix3(normalMatrixWorld).normalize(); // transform the normal to export format\n\n        this.output += `vn ${this.normal.x} ${this.normal.y} ${this.normal.z}\\n`;\n      }\n    } // faces\n\n\n    if (indices !== null) {\n      for (let i = 0, l = indices.count; i < l; i += 3) {\n        for (let m = 0; m < 3; m++) {\n          const j = indices.getX(i + m) + 1;\n          this.face[m] = this.indexVertex + j + (normals || uvs ? `/${uvs ? this.indexVertexUvs + j : ''}${normals ? `/${this.indexNormals + j}` : ''}` : '');\n        } // transform the face to export format\n\n\n        this.output += `f ${this.face.join(' ')}\\n`;\n      }\n    } else {\n      for (let i = 0, l = vertices.count; i < l; i += 3) {\n        for (let m = 0; m < 3; m++) {\n          const j = i + m + 1;\n          this.face[m] = this.indexVertex + j + (normals || uvs ? `/${uvs ? this.indexVertexUvs + j : ''}${normals ? `/${this.indexNormals + j}` : ''}` : '');\n        } // transform the face to export format\n\n\n        this.output += `f ${this.face.join(' ')}\\n`;\n      }\n    } // update index\n\n\n    this.indexVertex += nbVertex;\n    this.indexVertexUvs += nbVertexUvs;\n    this.indexNormals += nbNormals;\n  }\n\n  parseLine(line) {\n    let nbVertex = 0;\n    const geometry = line.geometry;\n    const type = line.type;\n\n    if (geometry.isBufferGeometry) {\n      throw new Error('THREE.OBJExporter: Geometry is not of type THREE.BufferGeometry.');\n    } // shortcuts\n\n\n    const vertices = geometry.getAttribute('position'); // name of the line object\n\n    this.output += `o ${line.name}\\n`;\n\n    if (vertices !== undefined) {\n      for (let i = 0, l = vertices.count; i < l; i++, nbVertex++) {\n        this.vertex.x = vertices.getX(i);\n        this.vertex.y = vertices.getY(i);\n        this.vertex.z = vertices.getZ(i); // transform the vertex to world space\n\n        this.vertex.applyMatrix4(line.matrixWorld); // transform the vertex to export format\n\n        this.output += `v ${this.vertex.x} ${this.vertex.y} ${this.vertex.z}\\n`;\n      }\n    }\n\n    if (type === 'Line') {\n      this.output += 'l ';\n\n      for (let j = 1, l = vertices.count; j <= l; j++) {\n        this.output += `${this.indexVertex + j} `;\n      }\n\n      this.output += '\\n';\n    }\n\n    if (type === 'LineSegments') {\n      for (let j = 1, k = j + 1, l = vertices.count; j < l; j += 2, k = j + 1) {\n        this.output += `l ${this.indexVertex + j} ${this.indexVertex + k}\\n`;\n      }\n    } // update index\n\n\n    this.indexVertex += nbVertex;\n  }\n\n  parsePoints(points) {\n    let nbVertex = 0;\n    const geometry = points.geometry;\n\n    if (!geometry.isBufferGeometry) {\n      throw new Error('THREE.OBJExporter: Geometry is not of type THREE.BufferGeometry.');\n    }\n\n    const vertices = geometry.getAttribute('position');\n    const colors = geometry.getAttribute('color');\n    this.output += `o ${points.name}\\n`;\n\n    if (vertices !== undefined) {\n      for (let i = 0, l = vertices.count; i < l; i++, nbVertex++) {\n        this.vertex.fromBufferAttribute(vertices, i);\n        this.vertex.applyMatrix4(points.matrixWorld);\n        this.output += `v ${this.vertex.x} ${this.vertex.y} ${this.vertex.z}`;\n\n        if (colors !== undefined && colors instanceof BufferAttribute) {\n          this.color.fromBufferAttribute(colors, i);\n          this.output += ` ${this.color.r} ${this.color.g} ${this.color.b}`;\n        }\n\n        this.output += '\\n';\n      }\n    }\n\n    this.output += 'p ';\n\n    for (let j = 1, l = vertices.count; j <= l; j++) {\n      this.output += `${this.indexVertex + j} `;\n    }\n\n    this.output += '\\n'; // update index\n\n    this.indexVertex += nbVertex;\n  }\n\n}\n\nexport { OBJExporter };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}