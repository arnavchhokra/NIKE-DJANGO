{"ast":null,"code":"import { ShaderChunk, UniformsUtils, ShaderLib, Color } from 'three';\n/**\r\n * ------------------------------------------------------------------------------------------\r\n * Subsurface Scattering shader\r\n * Based on GDC 2011 – Approximating Translucency for a Fast, Cheap and Convincing Subsurface Scattering Look\r\n * https://colinbarrebrisebois.com/2011/03/07/gdc-2011-approximating-translucency-for-a-fast-cheap-and-convincing-subsurface-scattering-look/\r\n *------------------------------------------------------------------------------------------\r\n */\n\nfunction replaceAll(string, find, replace) {\n  return string.split(find).join(replace);\n}\n\nvar meshphong_frag_head = ShaderChunk['meshphong_frag'].slice(0, ShaderChunk['meshphong_frag'].indexOf('void main() {'));\nvar meshphong_frag_body = ShaderChunk['meshphong_frag'].slice(ShaderChunk['meshphong_frag'].indexOf('void main() {'));\nvar SubsurfaceScatteringShader = {\n  uniforms: UniformsUtils.merge([ShaderLib['phong'].uniforms, {\n    thicknessMap: {\n      value: null\n    },\n    thicknessColor: {\n      value: new Color(0xffffff)\n    },\n    thicknessDistortion: {\n      value: 0.1\n    },\n    thicknessAmbient: {\n      value: 0.0\n    },\n    thicknessAttenuation: {\n      value: 0.1\n    },\n    thicknessPower: {\n      value: 2.0\n    },\n    thicknessScale: {\n      value: 10.0\n    }\n  }]),\n  vertexShader: ['#define USE_UV', ShaderChunk['meshphong_vert']].join('\\n'),\n  fragmentShader: ['#define USE_UV', '#define SUBSURFACE', meshphong_frag_head, 'uniform sampler2D thicknessMap;', 'uniform float thicknessPower;', 'uniform float thicknessScale;', 'uniform float thicknessDistortion;', 'uniform float thicknessAmbient;', 'uniform float thicknessAttenuation;', 'uniform vec3 thicknessColor;', 'void RE_Direct_Scattering(const in IncidentLight directLight, const in vec2 uv, const in GeometricContext geometry, inout ReflectedLight reflectedLight) {', '\tvec3 thickness = thicknessColor * texture2D(thicknessMap, uv).r;', '\tvec3 scatteringHalf = normalize(directLight.direction + (geometry.normal * thicknessDistortion));', '\tfloat scatteringDot = pow(saturate(dot(geometry.viewDir, -scatteringHalf)), thicknessPower) * thicknessScale;', '\tvec3 scatteringIllu = (scatteringDot + thicknessAmbient) * thickness;', '\treflectedLight.directDiffuse += scatteringIllu * thicknessAttenuation * directLight.color;', '}', meshphong_frag_body.replace('#include <lights_fragment_begin>', replaceAll(ShaderChunk['lights_fragment_begin'], 'RE_Direct( directLight, geometry, material, reflectedLight );', ['RE_Direct( directLight, geometry, material, reflectedLight );', '#if defined( SUBSURFACE ) && defined( USE_UV )', ' RE_Direct_Scattering(directLight, vUv, geometry, reflectedLight);', '#endif'].join('\\n')))].join('\\n')\n};\nexport { SubsurfaceScatteringShader };","map":{"version":3,"names":["ShaderChunk","UniformsUtils","ShaderLib","Color","replaceAll","string","find","replace","split","join","meshphong_frag_head","slice","indexOf","meshphong_frag_body","SubsurfaceScatteringShader","uniforms","merge","thicknessMap","value","thicknessColor","thicknessDistortion","thicknessAmbient","thicknessAttenuation","thicknessPower","thicknessScale","vertexShader","fragmentShader"],"sources":["D:/Github/NIKE-DJANGO/Jord/l4fycy/node_modules/three-stdlib/shaders/SubsurfaceScatteringShader.js"],"sourcesContent":["import { ShaderChunk, UniformsUtils, ShaderLib, Color } from 'three';\r\n\r\n/**\r\n * ------------------------------------------------------------------------------------------\r\n * Subsurface Scattering shader\r\n * Based on GDC 2011 – Approximating Translucency for a Fast, Cheap and Convincing Subsurface Scattering Look\r\n * https://colinbarrebrisebois.com/2011/03/07/gdc-2011-approximating-translucency-for-a-fast-cheap-and-convincing-subsurface-scattering-look/\r\n *------------------------------------------------------------------------------------------\r\n */\r\n\r\nfunction replaceAll(string, find, replace) {\r\n  return string.split(find).join(replace);\r\n}\r\n\r\nconst meshphong_frag_head = ShaderChunk['meshphong_frag'].slice(0, ShaderChunk['meshphong_frag'].indexOf('void main() {'));\r\nconst meshphong_frag_body = ShaderChunk['meshphong_frag'].slice(ShaderChunk['meshphong_frag'].indexOf('void main() {'));\r\nconst SubsurfaceScatteringShader = {\r\n  uniforms: UniformsUtils.merge([ShaderLib['phong'].uniforms, {\r\n    thicknessMap: {\r\n      value: null\r\n    },\r\n    thicknessColor: {\r\n      value: new Color(0xffffff)\r\n    },\r\n    thicknessDistortion: {\r\n      value: 0.1\r\n    },\r\n    thicknessAmbient: {\r\n      value: 0.0\r\n    },\r\n    thicknessAttenuation: {\r\n      value: 0.1\r\n    },\r\n    thicknessPower: {\r\n      value: 2.0\r\n    },\r\n    thicknessScale: {\r\n      value: 10.0\r\n    }\r\n  }]),\r\n  vertexShader: ['#define USE_UV', ShaderChunk['meshphong_vert']].join('\\n'),\r\n  fragmentShader: ['#define USE_UV', '#define SUBSURFACE', meshphong_frag_head, 'uniform sampler2D thicknessMap;', 'uniform float thicknessPower;', 'uniform float thicknessScale;', 'uniform float thicknessDistortion;', 'uniform float thicknessAmbient;', 'uniform float thicknessAttenuation;', 'uniform vec3 thicknessColor;', 'void RE_Direct_Scattering(const in IncidentLight directLight, const in vec2 uv, const in GeometricContext geometry, inout ReflectedLight reflectedLight) {', '\tvec3 thickness = thicknessColor * texture2D(thicknessMap, uv).r;', '\tvec3 scatteringHalf = normalize(directLight.direction + (geometry.normal * thicknessDistortion));', '\tfloat scatteringDot = pow(saturate(dot(geometry.viewDir, -scatteringHalf)), thicknessPower) * thicknessScale;', '\tvec3 scatteringIllu = (scatteringDot + thicknessAmbient) * thickness;', '\treflectedLight.directDiffuse += scatteringIllu * thicknessAttenuation * directLight.color;', '}', meshphong_frag_body.replace('#include <lights_fragment_begin>', replaceAll(ShaderChunk['lights_fragment_begin'], 'RE_Direct( directLight, geometry, material, reflectedLight );', ['RE_Direct( directLight, geometry, material, reflectedLight );', '#if defined( SUBSURFACE ) && defined( USE_UV )', ' RE_Direct_Scattering(directLight, vUv, geometry, reflectedLight);', '#endif'].join('\\n')))].join('\\n')\r\n};\r\n\r\nexport { SubsurfaceScatteringShader };\r\n"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,aAAtB,EAAqCC,SAArC,EAAgDC,KAAhD,QAA6D,OAA7D;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,UAAT,CAAoBC,MAApB,EAA4BC,IAA5B,EAAkCC,OAAlC,EAA2C;EACzC,OAAOF,MAAM,CAACG,KAAP,CAAaF,IAAb,EAAmBG,IAAnB,CAAwBF,OAAxB,CAAP;AACD;;AAED,IAAMG,mBAAmB,GAAGV,WAAW,CAAC,gBAAD,CAAX,CAA8BW,KAA9B,CAAoC,CAApC,EAAuCX,WAAW,CAAC,gBAAD,CAAX,CAA8BY,OAA9B,CAAsC,eAAtC,CAAvC,CAA5B;AACA,IAAMC,mBAAmB,GAAGb,WAAW,CAAC,gBAAD,CAAX,CAA8BW,KAA9B,CAAoCX,WAAW,CAAC,gBAAD,CAAX,CAA8BY,OAA9B,CAAsC,eAAtC,CAApC,CAA5B;AACA,IAAME,0BAA0B,GAAG;EACjCC,QAAQ,EAAEd,aAAa,CAACe,KAAd,CAAoB,CAACd,SAAS,CAAC,OAAD,CAAT,CAAmBa,QAApB,EAA8B;IAC1DE,YAAY,EAAE;MACZC,KAAK,EAAE;IADK,CAD4C;IAI1DC,cAAc,EAAE;MACdD,KAAK,EAAE,IAAIf,KAAJ,CAAU,QAAV;IADO,CAJ0C;IAO1DiB,mBAAmB,EAAE;MACnBF,KAAK,EAAE;IADY,CAPqC;IAU1DG,gBAAgB,EAAE;MAChBH,KAAK,EAAE;IADS,CAVwC;IAa1DI,oBAAoB,EAAE;MACpBJ,KAAK,EAAE;IADa,CAboC;IAgB1DK,cAAc,EAAE;MACdL,KAAK,EAAE;IADO,CAhB0C;IAmB1DM,cAAc,EAAE;MACdN,KAAK,EAAE;IADO;EAnB0C,CAA9B,CAApB,CADuB;EAwBjCO,YAAY,EAAE,CAAC,gBAAD,EAAmBzB,WAAW,CAAC,gBAAD,CAA9B,EAAkDS,IAAlD,CAAuD,IAAvD,CAxBmB;EAyBjCiB,cAAc,EAAE,CAAC,gBAAD,EAAmB,oBAAnB,EAAyChB,mBAAzC,EAA8D,iCAA9D,EAAiG,+BAAjG,EAAkI,+BAAlI,EAAmK,oCAAnK,EAAyM,iCAAzM,EAA4O,qCAA5O,EAAmR,8BAAnR,EAAmT,4JAAnT,EAAid,mEAAjd,EAAshB,oGAAthB,EAA4nB,gHAA5nB,EAA8uB,wEAA9uB,EAAwzB,6FAAxzB,EAAu5B,GAAv5B,EAA45BG,mBAAmB,CAACN,OAApB,CAA4B,kCAA5B,EAAgEH,UAAU,CAACJ,WAAW,CAAC,uBAAD,CAAZ,EAAuC,+DAAvC,EAAwG,CAAC,+DAAD,EAAkE,gDAAlE,EAAoH,oEAApH,EAA0L,QAA1L,EAAoMS,IAApM,CAAyM,IAAzM,CAAxG,CAA1E,CAA55B,EAAgyCA,IAAhyC,CAAqyC,IAAryC;AAzBiB,CAAnC;AA4BA,SAASK,0BAAT"},"metadata":{},"sourceType":"module"}