{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ErrorHandler = void 0;\n\nvar exceptions_public_1 = require(\"../../exceptions_public\");\n\nvar has_1 = __importDefault(require(\"lodash/has\"));\n\nvar clone_1 = __importDefault(require(\"lodash/clone\"));\n\nvar lookahead_1 = require(\"../../grammar/lookahead\");\n\nvar parser_1 = require(\"../parser\");\n/**\n * Trait responsible for runtime parsing errors.\n */\n\n\nvar ErrorHandler =\n/** @class */\nfunction () {\n  function ErrorHandler() {}\n\n  ErrorHandler.prototype.initErrorHandler = function (config) {\n    this._errors = [];\n    this.errorMessageProvider = (0, has_1.default)(config, \"errorMessageProvider\") ? config.errorMessageProvider // assumes end user provides the correct config value/type\n    : parser_1.DEFAULT_PARSER_CONFIG.errorMessageProvider;\n  };\n\n  ErrorHandler.prototype.SAVE_ERROR = function (error) {\n    if ((0, exceptions_public_1.isRecognitionException)(error)) {\n      error.context = {\n        ruleStack: this.getHumanReadableRuleStack(),\n        ruleOccurrenceStack: (0, clone_1.default)(this.RULE_OCCURRENCE_STACK)\n      };\n\n      this._errors.push(error);\n\n      return error;\n    } else {\n      throw Error(\"Trying to save an Error which is not a RecognitionException\");\n    }\n  };\n\n  Object.defineProperty(ErrorHandler.prototype, \"errors\", {\n    get: function get() {\n      return (0, clone_1.default)(this._errors);\n    },\n    set: function set(newErrors) {\n      this._errors = newErrors;\n    },\n    enumerable: false,\n    configurable: true\n  }); // TODO: consider caching the error message computed information\n\n  ErrorHandler.prototype.raiseEarlyExitException = function (occurrence, prodType, userDefinedErrMsg) {\n    var ruleName = this.getCurrRuleFullName();\n    var ruleGrammar = this.getGAstProductions()[ruleName];\n    var lookAheadPathsPerAlternative = (0, lookahead_1.getLookaheadPathsForOptionalProd)(occurrence, ruleGrammar, prodType, this.maxLookahead);\n    var insideProdPaths = lookAheadPathsPerAlternative[0];\n    var actualTokens = [];\n\n    for (var i = 1; i <= this.maxLookahead; i++) {\n      actualTokens.push(this.LA(i));\n    }\n\n    var msg = this.errorMessageProvider.buildEarlyExitMessage({\n      expectedIterationPaths: insideProdPaths,\n      actual: actualTokens,\n      previous: this.LA(0),\n      customUserDescription: userDefinedErrMsg,\n      ruleName: ruleName\n    });\n    throw this.SAVE_ERROR(new exceptions_public_1.EarlyExitException(msg, this.LA(1), this.LA(0)));\n  }; // TODO: consider caching the error message computed information\n\n\n  ErrorHandler.prototype.raiseNoAltException = function (occurrence, errMsgTypes) {\n    var ruleName = this.getCurrRuleFullName();\n    var ruleGrammar = this.getGAstProductions()[ruleName]; // TODO: getLookaheadPathsForOr can be slow for large enough maxLookahead and certain grammars, consider caching ?\n\n    var lookAheadPathsPerAlternative = (0, lookahead_1.getLookaheadPathsForOr)(occurrence, ruleGrammar, this.maxLookahead);\n    var actualTokens = [];\n\n    for (var i = 1; i <= this.maxLookahead; i++) {\n      actualTokens.push(this.LA(i));\n    }\n\n    var previousToken = this.LA(0);\n    var errMsg = this.errorMessageProvider.buildNoViableAltMessage({\n      expectedPathsPerAlt: lookAheadPathsPerAlternative,\n      actual: actualTokens,\n      previous: previousToken,\n      customUserDescription: errMsgTypes,\n      ruleName: this.getCurrRuleFullName()\n    });\n    throw this.SAVE_ERROR(new exceptions_public_1.NoViableAltException(errMsg, this.LA(1), previousToken));\n  };\n\n  return ErrorHandler;\n}();\n\nexports.ErrorHandler = ErrorHandler;","map":{"version":3,"mappings":"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","names":["ErrorHandler","config","_errors","errorMessageProvider","parser_1","error","context","ruleStack","getHumanReadableRuleStack","ruleOccurrenceStack","RULE_OCCURRENCE_STACK","push","Error","Object","newErrors","occurrence","prodType","userDefinedErrMsg","ruleName","getCurrRuleFullName","ruleGrammar","getGAstProductions","lookAheadPathsPerAlternative","maxLookahead","insideProdPaths","actualTokens","i","LA","msg","buildEarlyExitMessage","expectedIterationPaths","actual","previous","customUserDescription","SAVE_ERROR","exceptions_public_1","errMsgTypes","previousToken","errMsg","buildNoViableAltMessage","expectedPathsPerAlt","exports"],"sources":["D:\\Jord\\l4fycy\\node_modules\\chevrotain\\src\\parse\\parser\\traits\\error_handler.ts"],"sourcesContent":["import {\n  IParserConfig,\n  IParserErrorMessageProvider,\n  IRecognitionException\n} from \"@chevrotain/types\"\nimport {\n  EarlyExitException,\n  isRecognitionException,\n  NoViableAltException\n} from \"../../exceptions_public\"\nimport has from \"lodash/has\"\nimport clone from \"lodash/clone\"\nimport {\n  getLookaheadPathsForOptionalProd,\n  getLookaheadPathsForOr,\n  PROD_TYPE\n} from \"../../grammar/lookahead\"\nimport { MixedInParser } from \"./parser_traits\"\nimport { DEFAULT_PARSER_CONFIG } from \"../parser\"\n\n/**\n * Trait responsible for runtime parsing errors.\n */\nexport class ErrorHandler {\n  _errors: IRecognitionException[]\n  errorMessageProvider: IParserErrorMessageProvider\n\n  initErrorHandler(config: IParserConfig) {\n    this._errors = []\n    this.errorMessageProvider = has(config, \"errorMessageProvider\")\n      ? (config.errorMessageProvider as IParserErrorMessageProvider) // assumes end user provides the correct config value/type\n      : DEFAULT_PARSER_CONFIG.errorMessageProvider\n  }\n\n  SAVE_ERROR(\n    this: MixedInParser,\n    error: IRecognitionException\n  ): IRecognitionException {\n    if (isRecognitionException(error)) {\n      error.context = {\n        ruleStack: this.getHumanReadableRuleStack(),\n        ruleOccurrenceStack: clone(this.RULE_OCCURRENCE_STACK)\n      }\n      this._errors.push(error)\n      return error\n    } else {\n      throw Error(\"Trying to save an Error which is not a RecognitionException\")\n    }\n  }\n\n  get errors(): IRecognitionException[] {\n    return clone(this._errors)\n  }\n\n  set errors(newErrors: IRecognitionException[]) {\n    this._errors = newErrors\n  }\n\n  // TODO: consider caching the error message computed information\n  raiseEarlyExitException(\n    this: MixedInParser,\n    occurrence: number,\n    prodType: PROD_TYPE,\n    userDefinedErrMsg: string | undefined\n  ): never {\n    const ruleName = this.getCurrRuleFullName()\n    const ruleGrammar = this.getGAstProductions()[ruleName]\n    const lookAheadPathsPerAlternative = getLookaheadPathsForOptionalProd(\n      occurrence,\n      ruleGrammar,\n      prodType,\n      this.maxLookahead\n    )\n    const insideProdPaths = lookAheadPathsPerAlternative[0]\n    const actualTokens = []\n    for (let i = 1; i <= this.maxLookahead; i++) {\n      actualTokens.push(this.LA(i))\n    }\n    const msg = this.errorMessageProvider.buildEarlyExitMessage({\n      expectedIterationPaths: insideProdPaths,\n      actual: actualTokens,\n      previous: this.LA(0),\n      customUserDescription: userDefinedErrMsg,\n      ruleName: ruleName\n    })\n\n    throw this.SAVE_ERROR(new EarlyExitException(msg, this.LA(1), this.LA(0)))\n  }\n\n  // TODO: consider caching the error message computed information\n  raiseNoAltException(\n    this: MixedInParser,\n    occurrence: number,\n    errMsgTypes: string | undefined\n  ): never {\n    const ruleName = this.getCurrRuleFullName()\n    const ruleGrammar = this.getGAstProductions()[ruleName]\n    // TODO: getLookaheadPathsForOr can be slow for large enough maxLookahead and certain grammars, consider caching ?\n    const lookAheadPathsPerAlternative = getLookaheadPathsForOr(\n      occurrence,\n      ruleGrammar,\n      this.maxLookahead\n    )\n\n    const actualTokens = []\n    for (let i = 1; i <= this.maxLookahead; i++) {\n      actualTokens.push(this.LA(i))\n    }\n    const previousToken = this.LA(0)\n\n    const errMsg = this.errorMessageProvider.buildNoViableAltMessage({\n      expectedPathsPerAlt: lookAheadPathsPerAlternative,\n      actual: actualTokens,\n      previous: previousToken,\n      customUserDescription: errMsgTypes,\n      ruleName: this.getCurrRuleFullName()\n    })\n\n    throw this.SAVE_ERROR(\n      new NoViableAltException(errMsg, this.LA(1), previousToken)\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"script"}