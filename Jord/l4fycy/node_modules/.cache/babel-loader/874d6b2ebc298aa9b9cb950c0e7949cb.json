{"ast":null,"code":"import { BufferAttribute, DynamicDrawUsage, BufferGeometry, MeshStandardMaterial, Mesh, Vector3, Color, Matrix4 } from 'three';\n\nfunction TubePainter() {\n  var BUFFER_SIZE = 1000000 * 3;\n  var positions = new BufferAttribute(new Float32Array(BUFFER_SIZE), 3);\n  positions.usage = DynamicDrawUsage;\n  var normals = new BufferAttribute(new Float32Array(BUFFER_SIZE), 3);\n  normals.usage = DynamicDrawUsage;\n  var colors = new BufferAttribute(new Float32Array(BUFFER_SIZE), 3);\n  colors.usage = DynamicDrawUsage;\n  var geometry = new BufferGeometry();\n  geometry.setAttribute('position', positions);\n  geometry.setAttribute('normal', normals);\n  geometry.setAttribute('color', colors);\n  geometry.drawRange.count = 0;\n  var material = new MeshStandardMaterial({\n    vertexColors: true\n  });\n  var mesh = new Mesh(geometry, material);\n  mesh.frustumCulled = false; //\n\n  function getPoints(size) {\n    var PI2 = Math.PI * 2;\n    var sides = 10;\n    var array = [];\n    var radius = 0.01 * size;\n\n    for (var i = 0; i < sides; i++) {\n      var angle = i / sides * PI2;\n      array.push(new Vector3(Math.sin(angle) * radius, Math.cos(angle) * radius, 0));\n    }\n\n    return array;\n  } //\n\n\n  var vector1 = new Vector3();\n  var vector2 = new Vector3();\n  var vector3 = new Vector3();\n  var vector4 = new Vector3();\n  var color = new Color(0xffffff);\n  var size = 1;\n\n  function stroke(position1, position2, matrix1, matrix2) {\n    if (position1.distanceToSquared(position2) === 0) return;\n    var count = geometry.drawRange.count;\n    var points = getPoints(size);\n\n    for (var i = 0, il = points.length; i < il; i++) {\n      var vertex1 = points[i];\n      var vertex2 = points[(i + 1) % il]; // positions\n\n      vector1.copy(vertex1).applyMatrix4(matrix2).add(position2);\n      vector2.copy(vertex2).applyMatrix4(matrix2).add(position2);\n      vector3.copy(vertex2).applyMatrix4(matrix1).add(position1);\n      vector4.copy(vertex1).applyMatrix4(matrix1).add(position1);\n      vector1.toArray(positions.array, (count + 0) * 3);\n      vector2.toArray(positions.array, (count + 1) * 3);\n      vector4.toArray(positions.array, (count + 2) * 3);\n      vector2.toArray(positions.array, (count + 3) * 3);\n      vector3.toArray(positions.array, (count + 4) * 3);\n      vector4.toArray(positions.array, (count + 5) * 3); // normals\n\n      vector1.copy(vertex1).applyMatrix4(matrix2).normalize();\n      vector2.copy(vertex2).applyMatrix4(matrix2).normalize();\n      vector3.copy(vertex2).applyMatrix4(matrix1).normalize();\n      vector4.copy(vertex1).applyMatrix4(matrix1).normalize();\n      vector1.toArray(normals.array, (count + 0) * 3);\n      vector2.toArray(normals.array, (count + 1) * 3);\n      vector4.toArray(normals.array, (count + 2) * 3);\n      vector2.toArray(normals.array, (count + 3) * 3);\n      vector3.toArray(normals.array, (count + 4) * 3);\n      vector4.toArray(normals.array, (count + 5) * 3); // colors\n\n      color.toArray(colors.array, (count + 0) * 3);\n      color.toArray(colors.array, (count + 1) * 3);\n      color.toArray(colors.array, (count + 2) * 3);\n      color.toArray(colors.array, (count + 3) * 3);\n      color.toArray(colors.array, (count + 4) * 3);\n      color.toArray(colors.array, (count + 5) * 3);\n      count += 6;\n    }\n\n    geometry.drawRange.count = count;\n  } //\n\n\n  var up = new Vector3(0, 1, 0);\n  var point1 = new Vector3();\n  var point2 = new Vector3();\n  var matrix1 = new Matrix4();\n  var matrix2 = new Matrix4();\n\n  function moveTo(position) {\n    point1.copy(position);\n    matrix1.lookAt(point2, point1, up);\n    point2.copy(position);\n    matrix2.copy(matrix1);\n  }\n\n  function lineTo(position) {\n    point1.copy(position);\n    matrix1.lookAt(point2, point1, up);\n    stroke(point1, point2, matrix1, matrix2);\n    point2.copy(point1);\n    matrix2.copy(matrix1);\n  }\n\n  function setSize(value) {\n    size = value;\n  } //\n\n\n  var count = 0;\n\n  function update() {\n    var start = count;\n    var end = geometry.drawRange.count;\n    if (start === end) return;\n    positions.updateRange.offset = start * 3;\n    positions.updateRange.count = (end - start) * 3;\n    positions.needsUpdate = true;\n    normals.updateRange.offset = start * 3;\n    normals.updateRange.count = (end - start) * 3;\n    normals.needsUpdate = true;\n    colors.updateRange.offset = start * 3;\n    colors.updateRange.count = (end - start) * 3;\n    colors.needsUpdate = true;\n    count = geometry.drawRange.count;\n  }\n\n  return {\n    mesh: mesh,\n    moveTo: moveTo,\n    lineTo: lineTo,\n    setSize: setSize,\n    update: update\n  };\n}\n\nexport { TubePainter };","map":{"version":3,"names":["BufferAttribute","DynamicDrawUsage","BufferGeometry","MeshStandardMaterial","Mesh","Vector3","Color","Matrix4","TubePainter","BUFFER_SIZE","positions","Float32Array","usage","normals","colors","geometry","setAttribute","drawRange","count","material","vertexColors","mesh","frustumCulled","getPoints","size","PI2","Math","PI","sides","array","radius","i","angle","push","sin","cos","vector1","vector2","vector3","vector4","color","stroke","position1","position2","matrix1","matrix2","distanceToSquared","points","il","length","vertex1","vertex2","copy","applyMatrix4","add","toArray","normalize","up","point1","point2","moveTo","position","lookAt","lineTo","setSize","value","update","start","end","updateRange","offset","needsUpdate"],"sources":["C:/Users/Arnav/Downloads/l4fycy/node_modules/three-stdlib/misc/TubePainter.js"],"sourcesContent":["import { BufferAttribute, DynamicDrawUsage, BufferGeometry, MeshStandardMaterial, Mesh, Vector3, Color, Matrix4 } from 'three';\n\nfunction TubePainter() {\n  const BUFFER_SIZE = 1000000 * 3;\n  const positions = new BufferAttribute(new Float32Array(BUFFER_SIZE), 3);\n  positions.usage = DynamicDrawUsage;\n  const normals = new BufferAttribute(new Float32Array(BUFFER_SIZE), 3);\n  normals.usage = DynamicDrawUsage;\n  const colors = new BufferAttribute(new Float32Array(BUFFER_SIZE), 3);\n  colors.usage = DynamicDrawUsage;\n  const geometry = new BufferGeometry();\n  geometry.setAttribute('position', positions);\n  geometry.setAttribute('normal', normals);\n  geometry.setAttribute('color', colors);\n  geometry.drawRange.count = 0;\n  const material = new MeshStandardMaterial({\n    vertexColors: true\n  });\n  const mesh = new Mesh(geometry, material);\n  mesh.frustumCulled = false; //\n\n  function getPoints(size) {\n    const PI2 = Math.PI * 2;\n    const sides = 10;\n    const array = [];\n    const radius = 0.01 * size;\n\n    for (let i = 0; i < sides; i++) {\n      const angle = i / sides * PI2;\n      array.push(new Vector3(Math.sin(angle) * radius, Math.cos(angle) * radius, 0));\n    }\n\n    return array;\n  } //\n\n\n  const vector1 = new Vector3();\n  const vector2 = new Vector3();\n  const vector3 = new Vector3();\n  const vector4 = new Vector3();\n  const color = new Color(0xffffff);\n  let size = 1;\n\n  function stroke(position1, position2, matrix1, matrix2) {\n    if (position1.distanceToSquared(position2) === 0) return;\n    let count = geometry.drawRange.count;\n    const points = getPoints(size);\n\n    for (let i = 0, il = points.length; i < il; i++) {\n      const vertex1 = points[i];\n      const vertex2 = points[(i + 1) % il]; // positions\n\n      vector1.copy(vertex1).applyMatrix4(matrix2).add(position2);\n      vector2.copy(vertex2).applyMatrix4(matrix2).add(position2);\n      vector3.copy(vertex2).applyMatrix4(matrix1).add(position1);\n      vector4.copy(vertex1).applyMatrix4(matrix1).add(position1);\n      vector1.toArray(positions.array, (count + 0) * 3);\n      vector2.toArray(positions.array, (count + 1) * 3);\n      vector4.toArray(positions.array, (count + 2) * 3);\n      vector2.toArray(positions.array, (count + 3) * 3);\n      vector3.toArray(positions.array, (count + 4) * 3);\n      vector4.toArray(positions.array, (count + 5) * 3); // normals\n\n      vector1.copy(vertex1).applyMatrix4(matrix2).normalize();\n      vector2.copy(vertex2).applyMatrix4(matrix2).normalize();\n      vector3.copy(vertex2).applyMatrix4(matrix1).normalize();\n      vector4.copy(vertex1).applyMatrix4(matrix1).normalize();\n      vector1.toArray(normals.array, (count + 0) * 3);\n      vector2.toArray(normals.array, (count + 1) * 3);\n      vector4.toArray(normals.array, (count + 2) * 3);\n      vector2.toArray(normals.array, (count + 3) * 3);\n      vector3.toArray(normals.array, (count + 4) * 3);\n      vector4.toArray(normals.array, (count + 5) * 3); // colors\n\n      color.toArray(colors.array, (count + 0) * 3);\n      color.toArray(colors.array, (count + 1) * 3);\n      color.toArray(colors.array, (count + 2) * 3);\n      color.toArray(colors.array, (count + 3) * 3);\n      color.toArray(colors.array, (count + 4) * 3);\n      color.toArray(colors.array, (count + 5) * 3);\n      count += 6;\n    }\n\n    geometry.drawRange.count = count;\n  } //\n\n\n  const up = new Vector3(0, 1, 0);\n  const point1 = new Vector3();\n  const point2 = new Vector3();\n  const matrix1 = new Matrix4();\n  const matrix2 = new Matrix4();\n\n  function moveTo(position) {\n    point1.copy(position);\n    matrix1.lookAt(point2, point1, up);\n    point2.copy(position);\n    matrix2.copy(matrix1);\n  }\n\n  function lineTo(position) {\n    point1.copy(position);\n    matrix1.lookAt(point2, point1, up);\n    stroke(point1, point2, matrix1, matrix2);\n    point2.copy(point1);\n    matrix2.copy(matrix1);\n  }\n\n  function setSize(value) {\n    size = value;\n  } //\n\n\n  let count = 0;\n\n  function update() {\n    const start = count;\n    const end = geometry.drawRange.count;\n    if (start === end) return;\n    positions.updateRange.offset = start * 3;\n    positions.updateRange.count = (end - start) * 3;\n    positions.needsUpdate = true;\n    normals.updateRange.offset = start * 3;\n    normals.updateRange.count = (end - start) * 3;\n    normals.needsUpdate = true;\n    colors.updateRange.offset = start * 3;\n    colors.updateRange.count = (end - start) * 3;\n    colors.needsUpdate = true;\n    count = geometry.drawRange.count;\n  }\n\n  return {\n    mesh: mesh,\n    moveTo: moveTo,\n    lineTo: lineTo,\n    setSize: setSize,\n    update: update\n  };\n}\n\nexport { TubePainter };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}