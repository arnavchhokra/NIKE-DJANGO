{"ast":null,"code":"import _classCallCheck from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Vector3 } from 'three';\nexport var SeparatingAxisBounds = /*#__PURE__*/function () {\n  function SeparatingAxisBounds() {\n    _classCallCheck(this, SeparatingAxisBounds);\n\n    this.min = Infinity;\n    this.max = -Infinity;\n  }\n\n  _createClass(SeparatingAxisBounds, [{\n    key: \"setFromPointsField\",\n    value: function setFromPointsField(points, field) {\n      var min = Infinity;\n      var max = -Infinity;\n\n      for (var i = 0, l = points.length; i < l; i++) {\n        var p = points[i];\n        var val = p[field];\n        min = val < min ? val : min;\n        max = val > max ? val : max;\n      }\n\n      this.min = min;\n      this.max = max;\n    }\n  }, {\n    key: \"setFromPoints\",\n    value: function setFromPoints(axis, points) {\n      var min = Infinity;\n      var max = -Infinity;\n\n      for (var i = 0, l = points.length; i < l; i++) {\n        var p = points[i];\n        var val = axis.dot(p);\n        min = val < min ? val : min;\n        max = val > max ? val : max;\n      }\n\n      this.min = min;\n      this.max = max;\n    }\n  }, {\n    key: \"isSeparated\",\n    value: function isSeparated(other) {\n      return this.min > other.max || other.min > this.max;\n    }\n  }]);\n\n  return SeparatingAxisBounds;\n}();\n\nSeparatingAxisBounds.prototype.setFromBox = function () {\n  var p = new Vector3();\n  return function setFromBox(axis, box) {\n    var boxMin = box.min;\n    var boxMax = box.max;\n    var min = Infinity;\n    var max = -Infinity;\n\n    for (var x = 0; x <= 1; x++) {\n      for (var y = 0; y <= 1; y++) {\n        for (var z = 0; z <= 1; z++) {\n          p.x = boxMin.x * x + boxMax.x * (1 - x);\n          p.y = boxMin.y * y + boxMax.y * (1 - y);\n          p.z = boxMin.z * z + boxMax.z * (1 - z);\n          var val = axis.dot(p);\n          min = Math.min(val, min);\n          max = Math.max(val, max);\n        }\n      }\n    }\n\n    this.min = min;\n    this.max = max;\n  };\n}();\n\nexport var areIntersecting = function () {\n  var cacheSatBounds = new SeparatingAxisBounds();\n  return function areIntersecting(shape1, shape2) {\n    var points1 = shape1.points;\n    var satAxes1 = shape1.satAxes;\n    var satBounds1 = shape1.satBounds;\n    var points2 = shape2.points;\n    var satAxes2 = shape2.satAxes;\n    var satBounds2 = shape2.satBounds; // check axes of the first shape\n\n    for (var i = 0; i < 3; i++) {\n      var sb = satBounds1[i];\n      var sa = satAxes1[i];\n      cacheSatBounds.setFromPoints(sa, points2);\n      if (sb.isSeparated(cacheSatBounds)) return false;\n    } // check axes of the second shape\n\n\n    for (var _i = 0; _i < 3; _i++) {\n      var _sb = satBounds2[_i];\n      var _sa = satAxes2[_i];\n      cacheSatBounds.setFromPoints(_sa, points1);\n      if (_sb.isSeparated(cacheSatBounds)) return false;\n    }\n  };\n}();","map":{"version":3,"names":["Vector3","SeparatingAxisBounds","min","Infinity","max","points","field","i","l","length","p","val","axis","dot","other","prototype","setFromBox","box","boxMin","boxMax","x","y","z","Math","areIntersecting","cacheSatBounds","shape1","shape2","points1","satAxes1","satAxes","satBounds1","satBounds","points2","satAxes2","satBounds2","sb","sa","setFromPoints","isSeparated"],"sources":["D:/Jord/l4fycy/node_modules/three-mesh-bvh/src/math/SeparatingAxisBounds.js"],"sourcesContent":["import { Vector3 } from 'three';\r\n\r\nexport class SeparatingAxisBounds {\r\n\r\n\tconstructor() {\r\n\r\n\t\tthis.min = Infinity;\r\n\t\tthis.max = - Infinity;\r\n\r\n\t}\r\n\r\n\tsetFromPointsField( points, field ) {\r\n\r\n\t\tlet min = Infinity;\r\n\t\tlet max = - Infinity;\r\n\t\tfor ( let i = 0, l = points.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst p = points[ i ];\r\n\t\t\tconst val = p[ field ];\r\n\t\t\tmin = val < min ? val : min;\r\n\t\t\tmax = val > max ? val : max;\r\n\r\n\t\t}\r\n\r\n\t\tthis.min = min;\r\n\t\tthis.max = max;\r\n\r\n\t}\r\n\r\n\tsetFromPoints( axis, points ) {\r\n\r\n\t\tlet min = Infinity;\r\n\t\tlet max = - Infinity;\r\n\t\tfor ( let i = 0, l = points.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst p = points[ i ];\r\n\t\t\tconst val = axis.dot( p );\r\n\t\t\tmin = val < min ? val : min;\r\n\t\t\tmax = val > max ? val : max;\r\n\r\n\t\t}\r\n\r\n\t\tthis.min = min;\r\n\t\tthis.max = max;\r\n\r\n\t}\r\n\r\n\tisSeparated( other ) {\r\n\r\n\t\treturn this.min > other.max || other.min > this.max;\r\n\r\n\t}\r\n\r\n}\r\n\r\nSeparatingAxisBounds.prototype.setFromBox = ( function () {\r\n\r\n\tconst p = new Vector3();\r\n\treturn function setFromBox( axis, box ) {\r\n\r\n\t\tconst boxMin = box.min;\r\n\t\tconst boxMax = box.max;\r\n\t\tlet min = Infinity;\r\n\t\tlet max = - Infinity;\r\n\t\tfor ( let x = 0; x <= 1; x ++ ) {\r\n\r\n\t\t\tfor ( let y = 0; y <= 1; y ++ ) {\r\n\r\n\t\t\t\tfor ( let z = 0; z <= 1; z ++ ) {\r\n\r\n\t\t\t\t\tp.x = boxMin.x * x + boxMax.x * ( 1 - x );\r\n\t\t\t\t\tp.y = boxMin.y * y + boxMax.y * ( 1 - y );\r\n\t\t\t\t\tp.z = boxMin.z * z + boxMax.z * ( 1 - z );\r\n\r\n\t\t\t\t\tconst val = axis.dot( p );\r\n\t\t\t\t\tmin = Math.min( val, min );\r\n\t\t\t\t\tmax = Math.max( val, max );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.min = min;\r\n\t\tthis.max = max;\r\n\r\n\t};\r\n\r\n} )();\r\n\r\nexport const areIntersecting = ( function () {\r\n\r\n\tconst cacheSatBounds = new SeparatingAxisBounds();\r\n\treturn function areIntersecting( shape1, shape2 ) {\r\n\r\n\t\tconst points1 = shape1.points;\r\n\t\tconst satAxes1 = shape1.satAxes;\r\n\t\tconst satBounds1 = shape1.satBounds;\r\n\r\n\t\tconst points2 = shape2.points;\r\n\t\tconst satAxes2 = shape2.satAxes;\r\n\t\tconst satBounds2 = shape2.satBounds;\r\n\r\n\t\t// check axes of the first shape\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tconst sb = satBounds1[ i ];\r\n\t\t\tconst sa = satAxes1[ i ];\r\n\t\t\tcacheSatBounds.setFromPoints( sa, points2 );\r\n\t\t\tif ( sb.isSeparated( cacheSatBounds ) ) return false;\r\n\r\n\t\t}\r\n\r\n\t\t// check axes of the second shape\r\n\t\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\tconst sb = satBounds2[ i ];\r\n\t\t\tconst sa = satAxes2[ i ];\r\n\t\t\tcacheSatBounds.setFromPoints( sa, points1 );\r\n\t\t\tif ( sb.isSeparated( cacheSatBounds ) ) return false;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n} )();\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}