{"ast":null,"code":"import _slicedToArray from \"D:/Github/NIKE-DJANGO/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as React from 'react';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { SimplexNoise } from 'three-stdlib';\nvar CameraShake = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var _ref$intensity = _ref.intensity,\n      intensity = _ref$intensity === void 0 ? 1 : _ref$intensity,\n      decay = _ref.decay,\n      _ref$decayRate = _ref.decayRate,\n      decayRate = _ref$decayRate === void 0 ? 0.65 : _ref$decayRate,\n      _ref$maxYaw = _ref.maxYaw,\n      maxYaw = _ref$maxYaw === void 0 ? 0.1 : _ref$maxYaw,\n      _ref$maxPitch = _ref.maxPitch,\n      maxPitch = _ref$maxPitch === void 0 ? 0.1 : _ref$maxPitch,\n      _ref$maxRoll = _ref.maxRoll,\n      maxRoll = _ref$maxRoll === void 0 ? 0.1 : _ref$maxRoll,\n      _ref$yawFrequency = _ref.yawFrequency,\n      yawFrequency = _ref$yawFrequency === void 0 ? 0.1 : _ref$yawFrequency,\n      _ref$pitchFrequency = _ref.pitchFrequency,\n      pitchFrequency = _ref$pitchFrequency === void 0 ? 0.1 : _ref$pitchFrequency,\n      _ref$rollFrequency = _ref.rollFrequency,\n      rollFrequency = _ref$rollFrequency === void 0 ? 0.1 : _ref$rollFrequency;\n  var camera = useThree(function (state) {\n    return state.camera;\n  });\n  var defaultControls = useThree(function (state) {\n    return state.controls;\n  });\n  var intensityRef = React.useRef(intensity);\n  var initialRotation = React.useRef(camera.rotation.clone());\n\n  var _React$useState = React.useState(function () {\n    return new SimplexNoise();\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 1),\n      yawNoise = _React$useState2[0];\n\n  var _React$useState3 = React.useState(function () {\n    return new SimplexNoise();\n  }),\n      _React$useState4 = _slicedToArray(_React$useState3, 1),\n      pitchNoise = _React$useState4[0];\n\n  var _React$useState5 = React.useState(function () {\n    return new SimplexNoise();\n  }),\n      _React$useState6 = _slicedToArray(_React$useState5, 1),\n      rollNoise = _React$useState6[0];\n\n  var constrainIntensity = function constrainIntensity() {\n    if (intensityRef.current < 0 || intensityRef.current > 1) {\n      intensityRef.current = intensityRef.current < 0 ? 0 : 1;\n    }\n  };\n\n  React.useImperativeHandle(ref, function () {\n    return {\n      getIntensity: function getIntensity() {\n        return intensityRef.current;\n      },\n      setIntensity: function setIntensity(val) {\n        intensityRef.current = val;\n        constrainIntensity();\n      }\n    };\n  }, []);\n  React.useEffect(function () {\n    if (defaultControls) {\n      var callback = function callback() {\n        return void (initialRotation.current = camera.rotation.clone());\n      };\n\n      defaultControls.addEventListener('change', callback);\n      callback();\n      return function () {\n        return void defaultControls.removeEventListener('change', callback);\n      };\n    }\n  }, [camera, defaultControls]);\n  useFrame(function (state, delta) {\n    var shake = Math.pow(intensityRef.current, 2);\n    var yaw = maxYaw * shake * yawNoise.noise(state.clock.elapsedTime * yawFrequency, 1);\n    var pitch = maxPitch * shake * pitchNoise.noise(state.clock.elapsedTime * pitchFrequency, 1);\n    var roll = maxRoll * shake * rollNoise.noise(state.clock.elapsedTime * rollFrequency, 1);\n    camera.rotation.set(initialRotation.current.x + pitch, initialRotation.current.y + yaw, initialRotation.current.z + roll);\n\n    if (decay && intensityRef.current > 0) {\n      intensityRef.current -= decayRate * delta;\n      constrainIntensity();\n    }\n  });\n  return null;\n});\nexport { CameraShake };","map":{"version":3,"names":["React","useThree","useFrame","SimplexNoise","CameraShake","forwardRef","ref","intensity","decay","decayRate","maxYaw","maxPitch","maxRoll","yawFrequency","pitchFrequency","rollFrequency","camera","state","defaultControls","controls","intensityRef","useRef","initialRotation","rotation","clone","useState","yawNoise","pitchNoise","rollNoise","constrainIntensity","current","useImperativeHandle","getIntensity","setIntensity","val","useEffect","callback","addEventListener","removeEventListener","delta","shake","Math","pow","yaw","noise","clock","elapsedTime","pitch","roll","set","x","y","z"],"sources":["D:/Github/NIKE-DJANGO/Jord/l4fycy/node_modules/@react-three/drei/core/CameraShake.js"],"sourcesContent":["import * as React from 'react';\r\nimport { useThree, useFrame } from '@react-three/fiber';\r\nimport { SimplexNoise } from 'three-stdlib';\r\n\r\nconst CameraShake = /*#__PURE__*/React.forwardRef(({\r\n  intensity = 1,\r\n  decay,\r\n  decayRate = 0.65,\r\n  maxYaw = 0.1,\r\n  maxPitch = 0.1,\r\n  maxRoll = 0.1,\r\n  yawFrequency = 0.1,\r\n  pitchFrequency = 0.1,\r\n  rollFrequency = 0.1\r\n}, ref) => {\r\n  const camera = useThree(state => state.camera);\r\n  const defaultControls = useThree(state => state.controls);\r\n  const intensityRef = React.useRef(intensity);\r\n  const initialRotation = React.useRef(camera.rotation.clone());\r\n  const [yawNoise] = React.useState(() => new SimplexNoise());\r\n  const [pitchNoise] = React.useState(() => new SimplexNoise());\r\n  const [rollNoise] = React.useState(() => new SimplexNoise());\r\n\r\n  const constrainIntensity = () => {\r\n    if (intensityRef.current < 0 || intensityRef.current > 1) {\r\n      intensityRef.current = intensityRef.current < 0 ? 0 : 1;\r\n    }\r\n  };\r\n\r\n  React.useImperativeHandle(ref, () => ({\r\n    getIntensity: () => intensityRef.current,\r\n    setIntensity: val => {\r\n      intensityRef.current = val;\r\n      constrainIntensity();\r\n    }\r\n  }), []);\r\n  React.useEffect(() => {\r\n    if (defaultControls) {\r\n      const callback = () => void (initialRotation.current = camera.rotation.clone());\r\n\r\n      defaultControls.addEventListener('change', callback);\r\n      callback();\r\n      return () => void defaultControls.removeEventListener('change', callback);\r\n    }\r\n  }, [camera, defaultControls]);\r\n  useFrame((state, delta) => {\r\n    const shake = Math.pow(intensityRef.current, 2);\r\n    const yaw = maxYaw * shake * yawNoise.noise(state.clock.elapsedTime * yawFrequency, 1);\r\n    const pitch = maxPitch * shake * pitchNoise.noise(state.clock.elapsedTime * pitchFrequency, 1);\r\n    const roll = maxRoll * shake * rollNoise.noise(state.clock.elapsedTime * rollFrequency, 1);\r\n    camera.rotation.set(initialRotation.current.x + pitch, initialRotation.current.y + yaw, initialRotation.current.z + roll);\r\n\r\n    if (decay && intensityRef.current > 0) {\r\n      intensityRef.current -= decayRate * delta;\r\n      constrainIntensity();\r\n    }\r\n  });\r\n  return null;\r\n});\r\n\r\nexport { CameraShake };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}