{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as THREE from 'three';\nimport * as React from 'react';\nimport { useThree, createPortal, useFrame } from '@react-three/fiber';\nimport { useFBO } from './useFBO.js';\nconst RenderTexture = /* @__PURE__ */React.forwardRef((_ref, forwardRef) => {\n  let {\n    children,\n    compute,\n    width,\n    height,\n    samples = 8,\n    renderPriority = 0,\n    eventPriority = 0,\n    frames = Infinity,\n    stencilBuffer = false,\n    depthBuffer = true,\n    generateMipmaps = false,\n    ...props\n  } = _ref;\n  const {\n    size,\n    viewport\n  } = useThree();\n  const fbo = useFBO((width || size.width) * viewport.dpr, (height || size.height) * viewport.dpr, {\n    samples,\n    stencilBuffer,\n    depthBuffer,\n    generateMipmaps\n  });\n  const [vScene] = React.useState(() => new THREE.Scene());\n  const uvCompute = React.useCallback((event, state, previous) => {\n    var _fbo$texture, _previous$previousRoo;\n    // Since this is only a texture it does not have an easy way to obtain the parent, which we\n    // need to transform event coordinates to local coordinates. We use r3f internals to find the\n    // next Object3D.\n    let parent = (_fbo$texture = fbo.texture) == null ? void 0 : _fbo$texture.__r3f.parent;\n    while (parent && !(parent instanceof THREE.Object3D)) {\n      parent = parent.__r3f.parent;\n    }\n    if (!parent) return false;\n    // First we call the previous state-onion-layers compute, this is what makes it possible to nest portals\n    if (!previous.raycaster.camera) previous.events.compute(event, previous, (_previous$previousRoo = previous.previousRoot) == null ? void 0 : _previous$previousRoo.getState());\n    // We run a quick check against the parent, if it isn't hit there's no need to raycast at all\n    const [intersection] = previous.raycaster.intersectObject(parent);\n    if (!intersection) return false;\n    // We take that hits uv coords, set up this layers raycaster, et voilà, we have raycasting on arbitrary surfaces\n    const uv = intersection.uv;\n    if (!uv) return false;\n    state.raycaster.setFromCamera(state.pointer.set(uv.x * 2 - 1, uv.y * 2 - 1), state.camera);\n  }, []);\n  React.useImperativeHandle(forwardRef, () => fbo.texture, [fbo]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, createPortal( /*#__PURE__*/React.createElement(Container, {\n    renderPriority: renderPriority,\n    frames: frames,\n    fbo: fbo\n  }, children, /*#__PURE__*/React.createElement(\"group\", {\n    onPointerOver: () => null\n  })), vScene, {\n    events: {\n      compute: compute || uvCompute,\n      priority: eventPriority\n    }\n  }), /*#__PURE__*/React.createElement(\"primitive\", _extends({\n    object: fbo.texture\n  }, props)));\n});\n\n// The container component has to be separate, it can not be inlined because \"useFrame(state\" when run inside createPortal will return\n// the portals own state which includes user-land overrides (custom cameras etc), but if it is executed in <RenderTexture>'s render function\n// it would return the default state.\nfunction Container(_ref2) {\n  let {\n    frames,\n    renderPriority,\n    children,\n    fbo\n  } = _ref2;\n  let count = 0;\n  let oldAutoClear;\n  useFrame(state => {\n    if (frames === Infinity || count < frames) {\n      oldAutoClear = state.gl.autoClear;\n      state.gl.autoClear = true;\n      state.gl.setRenderTarget(fbo);\n      state.gl.render(state.scene, state.camera);\n      state.gl.setRenderTarget(null);\n      state.gl.autoClear = oldAutoClear;\n      count++;\n    }\n  }, renderPriority);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, children);\n}\nexport { RenderTexture };","map":{"version":3,"names":["_extends","THREE","React","useThree","createPortal","useFrame","useFBO","RenderTexture","forwardRef","_ref","children","compute","width","height","samples","renderPriority","eventPriority","frames","Infinity","stencilBuffer","depthBuffer","generateMipmaps","props","size","viewport","fbo","dpr","vScene","useState","Scene","uvCompute","useCallback","event","state","previous","_fbo$texture","_previous$previousRoo","parent","texture","__r3f","Object3D","raycaster","camera","events","previousRoot","getState","intersection","intersectObject","uv","setFromCamera","pointer","set","x","y","useImperativeHandle","createElement","Fragment","Container","onPointerOver","priority","object","_ref2","count","oldAutoClear","gl","autoClear","setRenderTarget","render","scene"],"sources":["D:/Repos/NIKE-DJANGO/Jord/l4fycy/node_modules/@react-three/drei/core/RenderTexture.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\r\nimport * as THREE from 'three';\r\nimport * as React from 'react';\r\nimport { useThree, createPortal, useFrame } from '@react-three/fiber';\r\nimport { useFBO } from './useFBO.js';\r\n\r\nconst RenderTexture = /* @__PURE__ */React.forwardRef(({\r\n  children,\r\n  compute,\r\n  width,\r\n  height,\r\n  samples = 8,\r\n  renderPriority = 0,\r\n  eventPriority = 0,\r\n  frames = Infinity,\r\n  stencilBuffer = false,\r\n  depthBuffer = true,\r\n  generateMipmaps = false,\r\n  ...props\r\n}, forwardRef) => {\r\n  const {\r\n    size,\r\n    viewport\r\n  } = useThree();\r\n  const fbo = useFBO((width || size.width) * viewport.dpr, (height || size.height) * viewport.dpr, {\r\n    samples,\r\n    stencilBuffer,\r\n    depthBuffer,\r\n    generateMipmaps\r\n  });\r\n  const [vScene] = React.useState(() => new THREE.Scene());\r\n  const uvCompute = React.useCallback((event, state, previous) => {\r\n    var _fbo$texture, _previous$previousRoo;\r\n    // Since this is only a texture it does not have an easy way to obtain the parent, which we\r\n    // need to transform event coordinates to local coordinates. We use r3f internals to find the\r\n    // next Object3D.\r\n    let parent = (_fbo$texture = fbo.texture) == null ? void 0 : _fbo$texture.__r3f.parent;\r\n    while (parent && !(parent instanceof THREE.Object3D)) {\r\n      parent = parent.__r3f.parent;\r\n    }\r\n    if (!parent) return false;\r\n    // First we call the previous state-onion-layers compute, this is what makes it possible to nest portals\r\n    if (!previous.raycaster.camera) previous.events.compute(event, previous, (_previous$previousRoo = previous.previousRoot) == null ? void 0 : _previous$previousRoo.getState());\r\n    // We run a quick check against the parent, if it isn't hit there's no need to raycast at all\r\n    const [intersection] = previous.raycaster.intersectObject(parent);\r\n    if (!intersection) return false;\r\n    // We take that hits uv coords, set up this layers raycaster, et voilà, we have raycasting on arbitrary surfaces\r\n    const uv = intersection.uv;\r\n    if (!uv) return false;\r\n    state.raycaster.setFromCamera(state.pointer.set(uv.x * 2 - 1, uv.y * 2 - 1), state.camera);\r\n  }, []);\r\n  React.useImperativeHandle(forwardRef, () => fbo.texture, [fbo]);\r\n  return /*#__PURE__*/React.createElement(React.Fragment, null, createPortal( /*#__PURE__*/React.createElement(Container, {\r\n    renderPriority: renderPriority,\r\n    frames: frames,\r\n    fbo: fbo\r\n  }, children, /*#__PURE__*/React.createElement(\"group\", {\r\n    onPointerOver: () => null\r\n  })), vScene, {\r\n    events: {\r\n      compute: compute || uvCompute,\r\n      priority: eventPriority\r\n    }\r\n  }), /*#__PURE__*/React.createElement(\"primitive\", _extends({\r\n    object: fbo.texture\r\n  }, props)));\r\n});\r\n\r\n// The container component has to be separate, it can not be inlined because \"useFrame(state\" when run inside createPortal will return\r\n// the portals own state which includes user-land overrides (custom cameras etc), but if it is executed in <RenderTexture>'s render function\r\n// it would return the default state.\r\nfunction Container({\r\n  frames,\r\n  renderPriority,\r\n  children,\r\n  fbo\r\n}) {\r\n  let count = 0;\r\n  let oldAutoClear;\r\n  useFrame(state => {\r\n    if (frames === Infinity || count < frames) {\r\n      oldAutoClear = state.gl.autoClear;\r\n      state.gl.autoClear = true;\r\n      state.gl.setRenderTarget(fbo);\r\n      state.gl.render(state.scene, state.camera);\r\n      state.gl.setRenderTarget(null);\r\n      state.gl.autoClear = oldAutoClear;\r\n      count++;\r\n    }\r\n  }, renderPriority);\r\n  return /*#__PURE__*/React.createElement(React.Fragment, null, children);\r\n}\r\n\r\nexport { RenderTexture };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}