{"ast":null,"code":"import _classCallCheck from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport Node from '../core/Node.js';\n\nvar ConvertNode = /*#__PURE__*/function (_Node) {\n  _inherits(ConvertNode, _Node);\n\n  var _super = _createSuper(ConvertNode);\n\n  function ConvertNode(node, convertTo) {\n    var _this;\n\n    _classCallCheck(this, ConvertNode);\n\n    _this = _super.call(this);\n    _this.node = node;\n    _this.convertTo = convertTo;\n    return _this;\n  }\n\n  _createClass(ConvertNode, [{\n    key: \"getNodeType\",\n    value: function getNodeType() {\n      return this.convertTo;\n    }\n  }, {\n    key: \"generate\",\n    value: function generate(builder) {\n      var convertTo = this.convertTo;\n      var node = this.node;\n\n      if (builder.isReference(convertTo) === false) {\n        var convertToSnippet = builder.getType(convertTo);\n        var nodeSnippet = node.build(builder, convertTo);\n        return \"\".concat(builder.getVectorType(convertToSnippet), \"( \").concat(nodeSnippet, \" )\");\n      } else {\n        return node.build(builder, convertTo);\n      }\n    }\n  }]);\n\n  return ConvertNode;\n}(Node);\n\nexport default ConvertNode;","map":{"version":3,"names":["Node","ConvertNode","node","convertTo","builder","isReference","convertToSnippet","getType","nodeSnippet","build","getVectorType"],"sources":["C:/Users/Arnav/Downloads/l4fycy/node_modules/three-stdlib/nodes/utils/ConvertNode.js"],"sourcesContent":["import Node from '../core/Node.js';\n\nclass ConvertNode extends Node {\n  constructor(node, convertTo) {\n    super();\n    this.node = node;\n    this.convertTo = convertTo;\n  }\n\n  getNodeType() {\n    return this.convertTo;\n  }\n\n  generate(builder) {\n    const convertTo = this.convertTo;\n    const node = this.node;\n\n    if (builder.isReference(convertTo) === false) {\n      const convertToSnippet = builder.getType(convertTo);\n      const nodeSnippet = node.build(builder, convertTo);\n      return `${builder.getVectorType(convertToSnippet)}( ${nodeSnippet} )`;\n    } else {\n      return node.build(builder, convertTo);\n    }\n  }\n\n}\n\nexport default ConvertNode;\n"],"mappings":";;;;AAAA,OAAOA,IAAP,MAAiB,iBAAjB;;IAEMC,W;;;;;EACJ,qBAAYC,IAAZ,EAAkBC,SAAlB,EAA6B;IAAA;;IAAA;;IAC3B;IACA,MAAKD,IAAL,GAAYA,IAAZ;IACA,MAAKC,SAAL,GAAiBA,SAAjB;IAH2B;EAI5B;;;;WAED,uBAAc;MACZ,OAAO,KAAKA,SAAZ;IACD;;;WAED,kBAASC,OAAT,EAAkB;MAChB,IAAMD,SAAS,GAAG,KAAKA,SAAvB;MACA,IAAMD,IAAI,GAAG,KAAKA,IAAlB;;MAEA,IAAIE,OAAO,CAACC,WAAR,CAAoBF,SAApB,MAAmC,KAAvC,EAA8C;QAC5C,IAAMG,gBAAgB,GAAGF,OAAO,CAACG,OAAR,CAAgBJ,SAAhB,CAAzB;QACA,IAAMK,WAAW,GAAGN,IAAI,CAACO,KAAL,CAAWL,OAAX,EAAoBD,SAApB,CAApB;QACA,iBAAUC,OAAO,CAACM,aAAR,CAAsBJ,gBAAtB,CAAV,eAAsDE,WAAtD;MACD,CAJD,MAIO;QACL,OAAON,IAAI,CAACO,KAAL,CAAWL,OAAX,EAAoBD,SAApB,CAAP;MACD;IACF;;;;EAtBuBH,I;;AA0B1B,eAAeC,WAAf"},"metadata":{},"sourceType":"module"}