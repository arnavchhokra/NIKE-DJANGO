{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as THREE from 'three';\nimport * as React from 'react';\nimport { shaderMaterial } from './shaderMaterial.js';\nimport { useThree, extend, applyProps } from '@react-three/fiber';\nimport { toCreasedNormals } from 'three-stdlib';\nimport { version } from '../helpers/constants.js';\nconst OutlinesMaterial = /* @__PURE__ */shaderMaterial({\n  screenspace: false,\n  color: /* @__PURE__ */new THREE.Color('black'),\n  opacity: 1,\n  thickness: 0.05,\n  size: /* @__PURE__ */new THREE.Vector2()\n}, \"#include <common>\\n   #include <morphtarget_pars_vertex>\\n   #include <skinning_pars_vertex>\\n   uniform float thickness;\\n   uniform float screenspace;\\n   uniform vec2 size;\\n   void main() {\\n     #if defined (USE_SKINNING)\\n\\t     #include <beginnormal_vertex>\\n       #include <morphnormal_vertex>\\n       #include <skinbase_vertex>\\n       #include <skinnormal_vertex>\\n       #include <defaultnormal_vertex>\\n     #endif\\n     #include <begin_vertex>\\n\\t   #include <morphtarget_vertex>\\n\\t   #include <skinning_vertex>\\n     #include <project_vertex>\\n     vec4 tNormal = vec4(normal, 0.0);\\n     vec4 tPosition = vec4(transformed, 1.0);\\n     #ifdef USE_INSTANCING\\n       tNormal = instanceMatrix * tNormal;\\n       tPosition = instanceMatrix * tPosition;\\n     #endif\\n     if (screenspace == 0.0) {\\n       vec3 newPosition = tPosition.xyz + tNormal.xyz * thickness;\\n       gl_Position = projectionMatrix * modelViewMatrix * vec4(newPosition, 1.0); \\n     } else {\\n       vec4 clipPosition = projectionMatrix * modelViewMatrix * tPosition;\\n       vec4 clipNormal = projectionMatrix * modelViewMatrix * tNormal;\\n       vec2 offset = normalize(clipNormal.xy) * thickness / size * clipPosition.w * 2.0;\\n       clipPosition.xy += offset;\\n       gl_Position = clipPosition;\\n     }\\n   }\", \"uniform vec3 color;\\n   uniform float opacity;\\n   void main(){\\n     gl_FragColor = vec4(color, opacity);\\n     #include <tonemapping_fragment>\\n     #include <\".concat(version >= 154 ? 'colorspace_fragment' : 'encodings_fragment', \">\\n   }\"));\nfunction Outlines(_ref) {\n  let {\n    color = 'black',\n    opacity = 1,\n    transparent = false,\n    screenspace = false,\n    toneMapped = true,\n    polygonOffset = false,\n    polygonOffsetFactor = 0,\n    renderOrder = 0,\n    thickness = 0.05,\n    angle = Math.PI,\n    ...props\n  } = _ref;\n  const ref = React.useRef();\n  const [material] = React.useState(() => new OutlinesMaterial({\n    side: THREE.BackSide\n  }));\n  const {\n    gl\n  } = useThree();\n  const contextSize = gl.getDrawingBufferSize(new THREE.Vector2());\n  React.useMemo(() => extend({\n    OutlinesMaterial\n  }), []);\n  const oldAngle = React.useRef(0);\n  const oldGeometry = React.useRef();\n  React.useLayoutEffect(() => {\n    const group = ref.current;\n    if (!group) return;\n    const parent = group.parent;\n    if (parent && parent.geometry) {\n      if (oldAngle.current !== angle || oldGeometry.current !== parent.geometry) {\n        oldAngle.current = angle;\n        oldGeometry.current = parent.geometry;\n\n        // Remove old mesh\n        let mesh = group.children[0];\n        if (mesh) {\n          if (angle) mesh.geometry.dispose();\n          group.remove(mesh);\n        }\n        if (parent.skeleton) {\n          mesh = new THREE.SkinnedMesh();\n          mesh.material = material;\n          mesh.bind(parent.skeleton, parent.bindMatrix);\n          group.add(mesh);\n        } else if (parent.isInstancedMesh) {\n          mesh = new THREE.InstancedMesh(parent.geometry, material, parent.count);\n          mesh.instanceMatrix = parent.instanceMatrix;\n          group.add(mesh);\n        } else {\n          mesh = new THREE.Mesh();\n          mesh.material = material;\n          group.add(mesh);\n        }\n        mesh.geometry = angle ? toCreasedNormals(parent.geometry, angle) : parent.geometry;\n      }\n    }\n  });\n  React.useLayoutEffect(() => {\n    const group = ref.current;\n    if (!group) return;\n    const mesh = group.children[0];\n    if (mesh) {\n      mesh.renderOrder = renderOrder;\n      applyProps(mesh.material, {\n        transparent,\n        thickness,\n        color,\n        opacity,\n        size: contextSize,\n        screenspace,\n        toneMapped,\n        polygonOffset,\n        polygonOffsetFactor\n      });\n    }\n  });\n  React.useEffect(() => {\n    return () => {\n      // Dispose everything on unmount\n      const group = ref.current;\n      if (!group) return;\n      const mesh = group.children[0];\n      if (mesh) {\n        if (angle) mesh.geometry.dispose();\n        group.remove(mesh);\n      }\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(\"group\", _extends({\n    ref: ref\n  }, props));\n}\nexport { Outlines };","map":{"version":3,"names":["_extends","THREE","React","shaderMaterial","useThree","extend","applyProps","toCreasedNormals","version","OutlinesMaterial","screenspace","color","Color","opacity","thickness","size","Vector2","concat","Outlines","_ref","transparent","toneMapped","polygonOffset","polygonOffsetFactor","renderOrder","angle","Math","PI","props","ref","useRef","material","useState","side","BackSide","gl","contextSize","getDrawingBufferSize","useMemo","oldAngle","oldGeometry","useLayoutEffect","group","current","parent","geometry","mesh","children","dispose","remove","skeleton","SkinnedMesh","bind","bindMatrix","add","isInstancedMesh","InstancedMesh","count","instanceMatrix","Mesh","useEffect","createElement"],"sources":["D:/Repos/NIKE-DJANGO/Jord/l4fycy/node_modules/@react-three/drei/core/Outlines.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\r\nimport * as THREE from 'three';\r\nimport * as React from 'react';\r\nimport { shaderMaterial } from './shaderMaterial.js';\r\nimport { useThree, extend, applyProps } from '@react-three/fiber';\r\nimport { toCreasedNormals } from 'three-stdlib';\r\nimport { version } from '../helpers/constants.js';\r\n\r\nconst OutlinesMaterial = /* @__PURE__ */shaderMaterial({\r\n  screenspace: false,\r\n  color: /* @__PURE__ */new THREE.Color('black'),\r\n  opacity: 1,\r\n  thickness: 0.05,\r\n  size: /* @__PURE__ */new THREE.Vector2()\r\n}, `#include <common>\r\n   #include <morphtarget_pars_vertex>\r\n   #include <skinning_pars_vertex>\r\n   uniform float thickness;\r\n   uniform float screenspace;\r\n   uniform vec2 size;\r\n   void main() {\r\n     #if defined (USE_SKINNING)\r\n\t     #include <beginnormal_vertex>\r\n       #include <morphnormal_vertex>\r\n       #include <skinbase_vertex>\r\n       #include <skinnormal_vertex>\r\n       #include <defaultnormal_vertex>\r\n     #endif\r\n     #include <begin_vertex>\r\n\t   #include <morphtarget_vertex>\r\n\t   #include <skinning_vertex>\r\n     #include <project_vertex>\r\n     vec4 tNormal = vec4(normal, 0.0);\r\n     vec4 tPosition = vec4(transformed, 1.0);\r\n     #ifdef USE_INSTANCING\r\n       tNormal = instanceMatrix * tNormal;\r\n       tPosition = instanceMatrix * tPosition;\r\n     #endif\r\n     if (screenspace == 0.0) {\r\n       vec3 newPosition = tPosition.xyz + tNormal.xyz * thickness;\r\n       gl_Position = projectionMatrix * modelViewMatrix * vec4(newPosition, 1.0); \r\n     } else {\r\n       vec4 clipPosition = projectionMatrix * modelViewMatrix * tPosition;\r\n       vec4 clipNormal = projectionMatrix * modelViewMatrix * tNormal;\r\n       vec2 offset = normalize(clipNormal.xy) * thickness / size * clipPosition.w * 2.0;\r\n       clipPosition.xy += offset;\r\n       gl_Position = clipPosition;\r\n     }\r\n   }`, `uniform vec3 color;\r\n   uniform float opacity;\r\n   void main(){\r\n     gl_FragColor = vec4(color, opacity);\r\n     #include <tonemapping_fragment>\r\n     #include <${version >= 154 ? 'colorspace_fragment' : 'encodings_fragment'}>\r\n   }`);\r\nfunction Outlines({\r\n  color = 'black',\r\n  opacity = 1,\r\n  transparent = false,\r\n  screenspace = false,\r\n  toneMapped = true,\r\n  polygonOffset = false,\r\n  polygonOffsetFactor = 0,\r\n  renderOrder = 0,\r\n  thickness = 0.05,\r\n  angle = Math.PI,\r\n  ...props\r\n}) {\r\n  const ref = React.useRef();\r\n  const [material] = React.useState(() => new OutlinesMaterial({\r\n    side: THREE.BackSide\r\n  }));\r\n  const {\r\n    gl\r\n  } = useThree();\r\n  const contextSize = gl.getDrawingBufferSize(new THREE.Vector2());\r\n  React.useMemo(() => extend({\r\n    OutlinesMaterial\r\n  }), []);\r\n  const oldAngle = React.useRef(0);\r\n  const oldGeometry = React.useRef();\r\n  React.useLayoutEffect(() => {\r\n    const group = ref.current;\r\n    if (!group) return;\r\n    const parent = group.parent;\r\n    if (parent && parent.geometry) {\r\n      if (oldAngle.current !== angle || oldGeometry.current !== parent.geometry) {\r\n        oldAngle.current = angle;\r\n        oldGeometry.current = parent.geometry;\r\n\r\n        // Remove old mesh\r\n        let mesh = group.children[0];\r\n        if (mesh) {\r\n          if (angle) mesh.geometry.dispose();\r\n          group.remove(mesh);\r\n        }\r\n        if (parent.skeleton) {\r\n          mesh = new THREE.SkinnedMesh();\r\n          mesh.material = material;\r\n          mesh.bind(parent.skeleton, parent.bindMatrix);\r\n          group.add(mesh);\r\n        } else if (parent.isInstancedMesh) {\r\n          mesh = new THREE.InstancedMesh(parent.geometry, material, parent.count);\r\n          mesh.instanceMatrix = parent.instanceMatrix;\r\n          group.add(mesh);\r\n        } else {\r\n          mesh = new THREE.Mesh();\r\n          mesh.material = material;\r\n          group.add(mesh);\r\n        }\r\n        mesh.geometry = angle ? toCreasedNormals(parent.geometry, angle) : parent.geometry;\r\n      }\r\n    }\r\n  });\r\n  React.useLayoutEffect(() => {\r\n    const group = ref.current;\r\n    if (!group) return;\r\n    const mesh = group.children[0];\r\n    if (mesh) {\r\n      mesh.renderOrder = renderOrder;\r\n      applyProps(mesh.material, {\r\n        transparent,\r\n        thickness,\r\n        color,\r\n        opacity,\r\n        size: contextSize,\r\n        screenspace,\r\n        toneMapped,\r\n        polygonOffset,\r\n        polygonOffsetFactor\r\n      });\r\n    }\r\n  });\r\n  React.useEffect(() => {\r\n    return () => {\r\n      // Dispose everything on unmount\r\n      const group = ref.current;\r\n      if (!group) return;\r\n      const mesh = group.children[0];\r\n      if (mesh) {\r\n        if (angle) mesh.geometry.dispose();\r\n        group.remove(mesh);\r\n      }\r\n    };\r\n  }, []);\r\n  return /*#__PURE__*/React.createElement(\"group\", _extends({\r\n    ref: ref\r\n  }, props));\r\n}\r\n\r\nexport { Outlines };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}