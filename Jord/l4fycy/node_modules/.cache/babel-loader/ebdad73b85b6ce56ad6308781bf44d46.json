{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RecognizerEngine = void 0;\n\nvar isEmpty_1 = __importDefault(require(\"lodash/isEmpty\"));\n\nvar isArray_1 = __importDefault(require(\"lodash/isArray\"));\n\nvar flatten_1 = __importDefault(require(\"lodash/flatten\"));\n\nvar every_1 = __importDefault(require(\"lodash/every\"));\n\nvar uniq_1 = __importDefault(require(\"lodash/uniq\"));\n\nvar isObject_1 = __importDefault(require(\"lodash/isObject\"));\n\nvar has_1 = __importDefault(require(\"lodash/has\"));\n\nvar values_1 = __importDefault(require(\"lodash/values\"));\n\nvar reduce_1 = __importDefault(require(\"lodash/reduce\"));\n\nvar clone_1 = __importDefault(require(\"lodash/clone\"));\n\nvar keys_1 = require(\"../../grammar/keys\");\n\nvar exceptions_public_1 = require(\"../../exceptions_public\");\n\nvar lookahead_1 = require(\"../../grammar/lookahead\");\n\nvar interpreter_1 = require(\"../../grammar/interpreter\");\n\nvar parser_1 = require(\"../parser\");\n\nvar recoverable_1 = require(\"./recoverable\");\n\nvar tokens_public_1 = require(\"../../../scan/tokens_public\");\n\nvar tokens_1 = require(\"../../../scan/tokens\");\n/**\r\n * This trait is responsible for the runtime parsing engine\r\n * Used by the official API (recognizer_api.ts)\r\n */\n\n\nvar RecognizerEngine =\n/** @class */\nfunction () {\n  function RecognizerEngine() {}\n\n  RecognizerEngine.prototype.initRecognizerEngine = function (tokenVocabulary, config) {\n    this.className = this.constructor.name; // TODO: would using an ES6 Map or plain object be faster (CST building scenario)\n\n    this.shortRuleNameToFull = {};\n    this.fullRuleNameToShort = {};\n    this.ruleShortNameIdx = 256;\n    this.tokenMatcher = tokens_1.tokenStructuredMatcherNoCategories;\n    this.subruleIdx = 0;\n    this.definedRulesNames = [];\n    this.tokensMap = {};\n    this.isBackTrackingStack = [];\n    this.RULE_STACK = [];\n    this.RULE_OCCURRENCE_STACK = [];\n    this.gastProductionsCache = {};\n\n    if ((0, has_1.default)(config, \"serializedGrammar\")) {\n      throw Error(\"The Parser's configuration can no longer contain a <serializedGrammar> property.\\n\" + \"\\tSee: https://chevrotain.io/docs/changes/BREAKING_CHANGES.html#_6-0-0\\n\" + \"\\tFor Further details.\");\n    }\n\n    if ((0, isArray_1.default)(tokenVocabulary)) {\n      // This only checks for Token vocabularies provided as arrays.\n      // That is good enough because the main objective is to detect users of pre-V4.0 APIs\n      // rather than all edge cases of empty Token vocabularies.\n      if ((0, isEmpty_1.default)(tokenVocabulary)) {\n        throw Error(\"A Token Vocabulary cannot be empty.\\n\" + \"\\tNote that the first argument for the parser constructor\\n\" + \"\\tis no longer a Token vector (since v4.0).\");\n      }\n\n      if (typeof tokenVocabulary[0].startOffset === \"number\") {\n        throw Error(\"The Parser constructor no longer accepts a token vector as the first argument.\\n\" + \"\\tSee: https://chevrotain.io/docs/changes/BREAKING_CHANGES.html#_4-0-0\\n\" + \"\\tFor Further details.\");\n      }\n    }\n\n    if ((0, isArray_1.default)(tokenVocabulary)) {\n      this.tokensMap = (0, reduce_1.default)(tokenVocabulary, function (acc, tokType) {\n        acc[tokType.name] = tokType;\n        return acc;\n      }, {});\n    } else if ((0, has_1.default)(tokenVocabulary, \"modes\") && (0, every_1.default)((0, flatten_1.default)((0, values_1.default)(tokenVocabulary.modes)), tokens_1.isTokenType)) {\n      var allTokenTypes_1 = (0, flatten_1.default)((0, values_1.default)(tokenVocabulary.modes));\n      var uniqueTokens = (0, uniq_1.default)(allTokenTypes_1);\n      this.tokensMap = (0, reduce_1.default)(uniqueTokens, function (acc, tokType) {\n        acc[tokType.name] = tokType;\n        return acc;\n      }, {});\n    } else if ((0, isObject_1.default)(tokenVocabulary)) {\n      this.tokensMap = (0, clone_1.default)(tokenVocabulary);\n    } else {\n      throw new Error(\"<tokensDictionary> argument must be An Array of Token constructors,\" + \" A dictionary of Token constructors or an IMultiModeLexerDefinition\");\n    } // always add EOF to the tokenNames -> constructors map. it is useful to assure all the input has been\n    // parsed with a clear error message (\"expecting EOF but found ...\")\n\n\n    this.tokensMap[\"EOF\"] = tokens_public_1.EOF;\n    var allTokenTypes = (0, has_1.default)(tokenVocabulary, \"modes\") ? (0, flatten_1.default)((0, values_1.default)(tokenVocabulary.modes)) : (0, values_1.default)(tokenVocabulary);\n    var noTokenCategoriesUsed = (0, every_1.default)(allTokenTypes, function (tokenConstructor) {\n      return (0, isEmpty_1.default)(tokenConstructor.categoryMatches);\n    });\n    this.tokenMatcher = noTokenCategoriesUsed ? tokens_1.tokenStructuredMatcherNoCategories : tokens_1.tokenStructuredMatcher; // Because ES2015+ syntax should be supported for creating Token classes\n    // We cannot assume that the Token classes were created using the \"extendToken\" utilities\n    // Therefore we must augment the Token classes both on Lexer initialization and on Parser initialization\n\n    (0, tokens_1.augmentTokenTypes)((0, values_1.default)(this.tokensMap));\n  };\n\n  RecognizerEngine.prototype.defineRule = function (ruleName, impl, config) {\n    if (this.selfAnalysisDone) {\n      throw Error(\"Grammar rule <\".concat(ruleName, \"> may not be defined after the 'performSelfAnalysis' method has been called'\\n\") + \"Make sure that all grammar rule definitions are done before 'performSelfAnalysis' is called.\");\n    }\n\n    var resyncEnabled = (0, has_1.default)(config, \"resyncEnabled\") ? config.resyncEnabled // assumes end user provides the correct config value/type\n    : parser_1.DEFAULT_RULE_CONFIG.resyncEnabled;\n    var recoveryValueFunc = (0, has_1.default)(config, \"recoveryValueFunc\") ? config.recoveryValueFunc // assumes end user provides the correct config value/type\n    : parser_1.DEFAULT_RULE_CONFIG.recoveryValueFunc; // performance optimization: Use small integers as keys for the longer human readable \"full\" rule names.\n    // this greatly improves Map access time (as much as 8% for some performance benchmarks).\n\n    var shortName = this.ruleShortNameIdx << keys_1.BITS_FOR_METHOD_TYPE + keys_1.BITS_FOR_OCCURRENCE_IDX;\n    this.ruleShortNameIdx++;\n    this.shortRuleNameToFull[shortName] = ruleName;\n    this.fullRuleNameToShort[ruleName] = shortName;\n    var invokeRuleWithTry; // Micro optimization, only check the condition **once** on rule definition\n    // instead of **every single** rule invocation.\n\n    if (this.outputCst === true) {\n      invokeRuleWithTry = function invokeRuleWithTry() {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        try {\n          this.ruleInvocationStateUpdate(shortName, ruleName, this.subruleIdx);\n          impl.apply(this, args);\n          var cst = this.CST_STACK[this.CST_STACK.length - 1];\n          this.cstPostRule(cst);\n          return cst;\n        } catch (e) {\n          return this.invokeRuleCatch(e, resyncEnabled, recoveryValueFunc);\n        } finally {\n          this.ruleFinallyStateUpdate();\n        }\n      };\n    } else {\n      invokeRuleWithTry = function invokeRuleWithTryCst() {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        try {\n          this.ruleInvocationStateUpdate(shortName, ruleName, this.subruleIdx);\n          return impl.apply(this, args);\n        } catch (e) {\n          return this.invokeRuleCatch(e, resyncEnabled, recoveryValueFunc);\n        } finally {\n          this.ruleFinallyStateUpdate();\n        }\n      };\n    }\n\n    var wrappedGrammarRule = Object.assign(invokeRuleWithTry, {\n      ruleName: ruleName,\n      originalGrammarAction: impl\n    });\n    return wrappedGrammarRule;\n  };\n\n  RecognizerEngine.prototype.invokeRuleCatch = function (e, resyncEnabledConfig, recoveryValueFunc) {\n    var isFirstInvokedRule = this.RULE_STACK.length === 1; // note the reSync is always enabled for the first rule invocation, because we must always be able to\n    // reSync with EOF and just output some INVALID ParseTree\n    // during backtracking reSync recovery is disabled, otherwise we can't be certain the backtracking\n    // path is really the most valid one\n\n    var reSyncEnabled = resyncEnabledConfig && !this.isBackTracking() && this.recoveryEnabled;\n\n    if ((0, exceptions_public_1.isRecognitionException)(e)) {\n      var recogError = e;\n\n      if (reSyncEnabled) {\n        var reSyncTokType = this.findReSyncTokenType();\n\n        if (this.isInCurrentRuleReSyncSet(reSyncTokType)) {\n          recogError.resyncedTokens = this.reSyncTo(reSyncTokType);\n\n          if (this.outputCst) {\n            var partialCstResult = this.CST_STACK[this.CST_STACK.length - 1];\n            partialCstResult.recoveredNode = true;\n            return partialCstResult;\n          } else {\n            return recoveryValueFunc();\n          }\n        } else {\n          if (this.outputCst) {\n            var partialCstResult = this.CST_STACK[this.CST_STACK.length - 1];\n            partialCstResult.recoveredNode = true;\n            recogError.partialCstResult = partialCstResult;\n          } // to be handled Further up the call stack\n\n\n          throw recogError;\n        }\n      } else if (isFirstInvokedRule) {\n        // otherwise a Redundant input error will be created as well and we cannot guarantee that this is indeed the case\n        this.moveToTerminatedState(); // the parser should never throw one of its own errors outside its flow.\n        // even if error recovery is disabled\n\n        return recoveryValueFunc();\n      } else {\n        // to be recovered Further up the call stack\n        throw recogError;\n      }\n    } else {\n      // some other Error type which we don't know how to handle (for example a built in JavaScript Error)\n      throw e;\n    }\n  }; // Implementation of parsing DSL\n\n\n  RecognizerEngine.prototype.optionInternal = function (actionORMethodDef, occurrence) {\n    var key = this.getKeyForAutomaticLookahead(keys_1.OPTION_IDX, occurrence);\n    return this.optionInternalLogic(actionORMethodDef, occurrence, key);\n  };\n\n  RecognizerEngine.prototype.optionInternalLogic = function (actionORMethodDef, occurrence, key) {\n    var _this = this;\n\n    var lookAheadFunc = this.getLaFuncFromCache(key);\n    var action;\n\n    if (typeof actionORMethodDef !== \"function\") {\n      action = actionORMethodDef.DEF;\n      var predicate_1 = actionORMethodDef.GATE; // predicate present\n\n      if (predicate_1 !== undefined) {\n        var orgLookaheadFunction_1 = lookAheadFunc;\n\n        lookAheadFunc = function lookAheadFunc() {\n          return predicate_1.call(_this) && orgLookaheadFunction_1.call(_this);\n        };\n      }\n    } else {\n      action = actionORMethodDef;\n    }\n\n    if (lookAheadFunc.call(this) === true) {\n      return action.call(this);\n    }\n\n    return undefined;\n  };\n\n  RecognizerEngine.prototype.atLeastOneInternal = function (prodOccurrence, actionORMethodDef) {\n    var laKey = this.getKeyForAutomaticLookahead(keys_1.AT_LEAST_ONE_IDX, prodOccurrence);\n    return this.atLeastOneInternalLogic(prodOccurrence, actionORMethodDef, laKey);\n  };\n\n  RecognizerEngine.prototype.atLeastOneInternalLogic = function (prodOccurrence, actionORMethodDef, key) {\n    var _this = this;\n\n    var lookAheadFunc = this.getLaFuncFromCache(key);\n    var action;\n\n    if (typeof actionORMethodDef !== \"function\") {\n      action = actionORMethodDef.DEF;\n      var predicate_2 = actionORMethodDef.GATE; // predicate present\n\n      if (predicate_2 !== undefined) {\n        var orgLookaheadFunction_2 = lookAheadFunc;\n\n        lookAheadFunc = function lookAheadFunc() {\n          return predicate_2.call(_this) && orgLookaheadFunction_2.call(_this);\n        };\n      }\n    } else {\n      action = actionORMethodDef;\n    }\n\n    if (lookAheadFunc.call(this) === true) {\n      var notStuck = this.doSingleRepetition(action);\n\n      while (lookAheadFunc.call(this) === true && notStuck === true) {\n        notStuck = this.doSingleRepetition(action);\n      }\n    } else {\n      throw this.raiseEarlyExitException(prodOccurrence, lookahead_1.PROD_TYPE.REPETITION_MANDATORY, actionORMethodDef.ERR_MSG);\n    } // note that while it may seem that this can cause an error because by using a recursive call to\n    // AT_LEAST_ONE we change the grammar to AT_LEAST_TWO, AT_LEAST_THREE ... , the possible recursive call\n    // from the tryInRepetitionRecovery(...) will only happen IFF there really are TWO/THREE/.... items.\n    // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n\n\n    this.attemptInRepetitionRecovery(this.atLeastOneInternal, [prodOccurrence, actionORMethodDef], lookAheadFunc, keys_1.AT_LEAST_ONE_IDX, prodOccurrence, interpreter_1.NextTerminalAfterAtLeastOneWalker);\n  };\n\n  RecognizerEngine.prototype.atLeastOneSepFirstInternal = function (prodOccurrence, options) {\n    var laKey = this.getKeyForAutomaticLookahead(keys_1.AT_LEAST_ONE_SEP_IDX, prodOccurrence);\n    this.atLeastOneSepFirstInternalLogic(prodOccurrence, options, laKey);\n  };\n\n  RecognizerEngine.prototype.atLeastOneSepFirstInternalLogic = function (prodOccurrence, options, key) {\n    var _this = this;\n\n    var action = options.DEF;\n    var separator = options.SEP;\n    var firstIterationLookaheadFunc = this.getLaFuncFromCache(key); // 1st iteration\n\n    if (firstIterationLookaheadFunc.call(this) === true) {\n      ;\n      action.call(this); //  TODO: Optimization can move this function construction into \"attemptInRepetitionRecovery\"\n      //  because it is only needed in error recovery scenarios.\n\n      var separatorLookAheadFunc = function separatorLookAheadFunc() {\n        return _this.tokenMatcher(_this.LA(1), separator);\n      }; // 2nd..nth iterations\n\n\n      while (this.tokenMatcher(this.LA(1), separator) === true) {\n        // note that this CONSUME will never enter recovery because\n        // the separatorLookAheadFunc checks that the separator really does exist.\n        this.CONSUME(separator);\n        action.call(this);\n      } // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n\n\n      this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [prodOccurrence, separator, separatorLookAheadFunc, action, interpreter_1.NextTerminalAfterAtLeastOneSepWalker], separatorLookAheadFunc, keys_1.AT_LEAST_ONE_SEP_IDX, prodOccurrence, interpreter_1.NextTerminalAfterAtLeastOneSepWalker);\n    } else {\n      throw this.raiseEarlyExitException(prodOccurrence, lookahead_1.PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR, options.ERR_MSG);\n    }\n  };\n\n  RecognizerEngine.prototype.manyInternal = function (prodOccurrence, actionORMethodDef) {\n    var laKey = this.getKeyForAutomaticLookahead(keys_1.MANY_IDX, prodOccurrence);\n    return this.manyInternalLogic(prodOccurrence, actionORMethodDef, laKey);\n  };\n\n  RecognizerEngine.prototype.manyInternalLogic = function (prodOccurrence, actionORMethodDef, key) {\n    var _this = this;\n\n    var lookaheadFunction = this.getLaFuncFromCache(key);\n    var action;\n\n    if (typeof actionORMethodDef !== \"function\") {\n      action = actionORMethodDef.DEF;\n      var predicate_3 = actionORMethodDef.GATE; // predicate present\n\n      if (predicate_3 !== undefined) {\n        var orgLookaheadFunction_3 = lookaheadFunction;\n\n        lookaheadFunction = function lookaheadFunction() {\n          return predicate_3.call(_this) && orgLookaheadFunction_3.call(_this);\n        };\n      }\n    } else {\n      action = actionORMethodDef;\n    }\n\n    var notStuck = true;\n\n    while (lookaheadFunction.call(this) === true && notStuck === true) {\n      notStuck = this.doSingleRepetition(action);\n    } // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n\n\n    this.attemptInRepetitionRecovery(this.manyInternal, [prodOccurrence, actionORMethodDef], lookaheadFunction, keys_1.MANY_IDX, prodOccurrence, interpreter_1.NextTerminalAfterManyWalker, // The notStuck parameter is only relevant when \"attemptInRepetitionRecovery\"\n    // is invoked from manyInternal, in the MANY_SEP case and AT_LEAST_ONE[_SEP]\n    // An infinite loop cannot occur as:\n    // - Either the lookahead is guaranteed to consume something (Single Token Separator)\n    // - AT_LEAST_ONE by definition is guaranteed to consume something (or error out).\n    notStuck);\n  };\n\n  RecognizerEngine.prototype.manySepFirstInternal = function (prodOccurrence, options) {\n    var laKey = this.getKeyForAutomaticLookahead(keys_1.MANY_SEP_IDX, prodOccurrence);\n    this.manySepFirstInternalLogic(prodOccurrence, options, laKey);\n  };\n\n  RecognizerEngine.prototype.manySepFirstInternalLogic = function (prodOccurrence, options, key) {\n    var _this = this;\n\n    var action = options.DEF;\n    var separator = options.SEP;\n    var firstIterationLaFunc = this.getLaFuncFromCache(key); // 1st iteration\n\n    if (firstIterationLaFunc.call(this) === true) {\n      action.call(this);\n\n      var separatorLookAheadFunc = function separatorLookAheadFunc() {\n        return _this.tokenMatcher(_this.LA(1), separator);\n      }; // 2nd..nth iterations\n\n\n      while (this.tokenMatcher(this.LA(1), separator) === true) {\n        // note that this CONSUME will never enter recovery because\n        // the separatorLookAheadFunc checks that the separator really does exist.\n        this.CONSUME(separator); // No need for checking infinite loop here due to consuming the separator.\n\n        action.call(this);\n      } // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n\n\n      this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [prodOccurrence, separator, separatorLookAheadFunc, action, interpreter_1.NextTerminalAfterManySepWalker], separatorLookAheadFunc, keys_1.MANY_SEP_IDX, prodOccurrence, interpreter_1.NextTerminalAfterManySepWalker);\n    }\n  };\n\n  RecognizerEngine.prototype.repetitionSepSecondInternal = function (prodOccurrence, separator, separatorLookAheadFunc, action, nextTerminalAfterWalker) {\n    while (separatorLookAheadFunc()) {\n      // note that this CONSUME will never enter recovery because\n      // the separatorLookAheadFunc checks that the separator really does exist.\n      this.CONSUME(separator);\n      action.call(this);\n    } // we can only arrive to this function after an error\n    // has occurred (hence the name 'second') so the following\n    // IF will always be entered, its possible to remove it...\n    // however it is kept to avoid confusion and be consistent.\n    // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n\n    /* istanbul ignore else */\n\n\n    this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [prodOccurrence, separator, separatorLookAheadFunc, action, nextTerminalAfterWalker], separatorLookAheadFunc, keys_1.AT_LEAST_ONE_SEP_IDX, prodOccurrence, nextTerminalAfterWalker);\n  };\n\n  RecognizerEngine.prototype.doSingleRepetition = function (action) {\n    var beforeIteration = this.getLexerPosition();\n    action.call(this);\n    var afterIteration = this.getLexerPosition(); // This boolean will indicate if this repetition progressed\n    // or if we are \"stuck\" (potential infinite loop in the repetition).\n\n    return afterIteration > beforeIteration;\n  };\n\n  RecognizerEngine.prototype.orInternal = function (altsOrOpts, occurrence) {\n    var laKey = this.getKeyForAutomaticLookahead(keys_1.OR_IDX, occurrence);\n    var alts = (0, isArray_1.default)(altsOrOpts) ? altsOrOpts : altsOrOpts.DEF;\n    var laFunc = this.getLaFuncFromCache(laKey);\n    var altIdxToTake = laFunc.call(this, alts);\n\n    if (altIdxToTake !== undefined) {\n      var chosenAlternative = alts[altIdxToTake];\n      return chosenAlternative.ALT.call(this);\n    }\n\n    this.raiseNoAltException(occurrence, altsOrOpts.ERR_MSG);\n  };\n\n  RecognizerEngine.prototype.ruleFinallyStateUpdate = function () {\n    this.RULE_STACK.pop();\n    this.RULE_OCCURRENCE_STACK.pop(); // NOOP when cst is disabled\n\n    this.cstFinallyStateUpdate();\n\n    if (this.RULE_STACK.length === 0 && this.isAtEndOfInput() === false) {\n      var firstRedundantTok = this.LA(1);\n      var errMsg = this.errorMessageProvider.buildNotAllInputParsedMessage({\n        firstRedundant: firstRedundantTok,\n        ruleName: this.getCurrRuleFullName()\n      });\n      this.SAVE_ERROR(new exceptions_public_1.NotAllInputParsedException(errMsg, firstRedundantTok));\n    }\n  };\n\n  RecognizerEngine.prototype.subruleInternal = function (ruleToCall, idx, options) {\n    var ruleResult;\n\n    try {\n      var args = options !== undefined ? options.ARGS : undefined;\n      this.subruleIdx = idx;\n      ruleResult = ruleToCall.apply(this, args);\n      this.cstPostNonTerminal(ruleResult, options !== undefined && options.LABEL !== undefined ? options.LABEL : ruleToCall.ruleName);\n      return ruleResult;\n    } catch (e) {\n      throw this.subruleInternalError(e, options, ruleToCall.ruleName);\n    }\n  };\n\n  RecognizerEngine.prototype.subruleInternalError = function (e, options, ruleName) {\n    if ((0, exceptions_public_1.isRecognitionException)(e) && e.partialCstResult !== undefined) {\n      this.cstPostNonTerminal(e.partialCstResult, options !== undefined && options.LABEL !== undefined ? options.LABEL : ruleName);\n      delete e.partialCstResult;\n    }\n\n    throw e;\n  };\n\n  RecognizerEngine.prototype.consumeInternal = function (tokType, idx, options) {\n    var consumedToken;\n\n    try {\n      var nextToken = this.LA(1);\n\n      if (this.tokenMatcher(nextToken, tokType) === true) {\n        this.consumeToken();\n        consumedToken = nextToken;\n      } else {\n        this.consumeInternalError(tokType, nextToken, options);\n      }\n    } catch (eFromConsumption) {\n      consumedToken = this.consumeInternalRecovery(tokType, idx, eFromConsumption);\n    }\n\n    this.cstPostTerminal(options !== undefined && options.LABEL !== undefined ? options.LABEL : tokType.name, consumedToken);\n    return consumedToken;\n  };\n\n  RecognizerEngine.prototype.consumeInternalError = function (tokType, nextToken, options) {\n    var msg;\n    var previousToken = this.LA(0);\n\n    if (options !== undefined && options.ERR_MSG) {\n      msg = options.ERR_MSG;\n    } else {\n      msg = this.errorMessageProvider.buildMismatchTokenMessage({\n        expected: tokType,\n        actual: nextToken,\n        previous: previousToken,\n        ruleName: this.getCurrRuleFullName()\n      });\n    }\n\n    throw this.SAVE_ERROR(new exceptions_public_1.MismatchedTokenException(msg, nextToken, previousToken));\n  };\n\n  RecognizerEngine.prototype.consumeInternalRecovery = function (tokType, idx, eFromConsumption) {\n    // no recovery allowed during backtracking, otherwise backtracking may recover invalid syntax and accept it\n    // but the original syntax could have been parsed successfully without any backtracking + recovery\n    if (this.recoveryEnabled && // TODO: more robust checking of the exception type. Perhaps Typescript extending expressions?\n    eFromConsumption.name === \"MismatchedTokenException\" && !this.isBackTracking()) {\n      var follows = this.getFollowsForInRuleRecovery(tokType, idx);\n\n      try {\n        return this.tryInRuleRecovery(tokType, follows);\n      } catch (eFromInRuleRecovery) {\n        if (eFromInRuleRecovery.name === recoverable_1.IN_RULE_RECOVERY_EXCEPTION) {\n          // failed in RuleRecovery.\n          // throw the original error in order to trigger reSync error recovery\n          throw eFromConsumption;\n        } else {\n          throw eFromInRuleRecovery;\n        }\n      }\n    } else {\n      throw eFromConsumption;\n    }\n  };\n\n  RecognizerEngine.prototype.saveRecogState = function () {\n    // errors is a getter which will clone the errors array\n    var savedErrors = this.errors;\n    var savedRuleStack = (0, clone_1.default)(this.RULE_STACK);\n    return {\n      errors: savedErrors,\n      lexerState: this.exportLexerState(),\n      RULE_STACK: savedRuleStack,\n      CST_STACK: this.CST_STACK\n    };\n  };\n\n  RecognizerEngine.prototype.reloadRecogState = function (newState) {\n    this.errors = newState.errors;\n    this.importLexerState(newState.lexerState);\n    this.RULE_STACK = newState.RULE_STACK;\n  };\n\n  RecognizerEngine.prototype.ruleInvocationStateUpdate = function (shortName, fullName, idxInCallingRule) {\n    this.RULE_OCCURRENCE_STACK.push(idxInCallingRule);\n    this.RULE_STACK.push(shortName); // NOOP when cst is disabled\n\n    this.cstInvocationStateUpdate(fullName);\n  };\n\n  RecognizerEngine.prototype.isBackTracking = function () {\n    return this.isBackTrackingStack.length !== 0;\n  };\n\n  RecognizerEngine.prototype.getCurrRuleFullName = function () {\n    var shortName = this.getLastExplicitRuleShortName();\n    return this.shortRuleNameToFull[shortName];\n  };\n\n  RecognizerEngine.prototype.shortRuleNameToFullName = function (shortName) {\n    return this.shortRuleNameToFull[shortName];\n  };\n\n  RecognizerEngine.prototype.isAtEndOfInput = function () {\n    return this.tokenMatcher(this.LA(1), tokens_public_1.EOF);\n  };\n\n  RecognizerEngine.prototype.reset = function () {\n    this.resetLexerState();\n    this.subruleIdx = 0;\n    this.isBackTrackingStack = [];\n    this.errors = [];\n    this.RULE_STACK = []; // TODO: extract a specific reset for TreeBuilder trait\n\n    this.CST_STACK = [];\n    this.RULE_OCCURRENCE_STACK = [];\n  };\n\n  return RecognizerEngine;\n}();\n\nexports.RecognizerEngine = RecognizerEngine;","map":{"version":3,"mappings":"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","names":["RecognizerEngine","tokenVocabulary","config","className","constructor","name","shortRuleNameToFull","fullRuleNameToShort","ruleShortNameIdx","tokenMatcher","tokens_1","subruleIdx","definedRulesNames","tokensMap","isBackTrackingStack","RULE_STACK","RULE_OCCURRENCE_STACK","gastProductionsCache","Error","startOffset","acc","tokType","modes","allTokenTypes_1","uniqueTokens","tokens_public_1","allTokenTypes","noTokenCategoriesUsed","tokenConstructor","categoryMatches","ruleName","impl","selfAnalysisDone","resyncEnabled","parser_1","recoveryValueFunc","shortName","keys_1","invokeRuleWithTry","outputCst","args","ruleInvocationStateUpdate","apply","cst","CST_STACK","length","cstPostRule","e","invokeRuleCatch","ruleFinallyStateUpdate","invokeRuleWithTryCst","wrappedGrammarRule","Object","assign","originalGrammarAction","resyncEnabledConfig","isFirstInvokedRule","reSyncEnabled","isBackTracking","recoveryEnabled","recogError","reSyncTokType","findReSyncTokenType","isInCurrentRuleReSyncSet","resyncedTokens","reSyncTo","partialCstResult","recoveredNode","moveToTerminatedState","actionORMethodDef","occurrence","key","getKeyForAutomaticLookahead","optionInternalLogic","lookAheadFunc","getLaFuncFromCache","action","DEF","predicate_1","GATE","undefined","orgLookaheadFunction_1","call","_this","prodOccurrence","laKey","atLeastOneInternalLogic","predicate_2","orgLookaheadFunction_2","notStuck","doSingleRepetition","raiseEarlyExitException","lookahead_1","REPETITION_MANDATORY","ERR_MSG","attemptInRepetitionRecovery","atLeastOneInternal","interpreter_1","options","atLeastOneSepFirstInternalLogic","separator","SEP","firstIterationLookaheadFunc","separatorLookAheadFunc","LA","CONSUME","repetitionSepSecondInternal","REPETITION_MANDATORY_WITH_SEPARATOR","manyInternalLogic","lookaheadFunction","predicate_3","orgLookaheadFunction_3","manyInternal","manySepFirstInternalLogic","firstIterationLaFunc","nextTerminalAfterWalker","beforeIteration","getLexerPosition","afterIteration","altsOrOpts","alts","laFunc","altIdxToTake","chosenAlternative","ALT","raiseNoAltException","pop","cstFinallyStateUpdate","isAtEndOfInput","firstRedundantTok","errMsg","errorMessageProvider","buildNotAllInputParsedMessage","firstRedundant","getCurrRuleFullName","SAVE_ERROR","exceptions_public_1","ruleToCall","idx","ruleResult","ARGS","cstPostNonTerminal","LABEL","subruleInternalError","consumedToken","nextToken","consumeToken","consumeInternalError","eFromConsumption","consumeInternalRecovery","cstPostTerminal","msg","previousToken","buildMismatchTokenMessage","expected","actual","previous","follows","getFollowsForInRuleRecovery","tryInRuleRecovery","eFromInRuleRecovery","recoverable_1","savedErrors","errors","savedRuleStack","lexerState","exportLexerState","newState","importLexerState","fullName","idxInCallingRule","push","cstInvocationStateUpdate","getLastExplicitRuleShortName","resetLexerState","exports"],"sources":["D:\\Github\\NIKE-DJANGO\\Jord\\l4fycy\\node_modules\\chevrotain\\src\\parse\\parser\\traits\\recognizer_engine.ts"],"sourcesContent":["import {\r\n  AtLeastOneSepMethodOpts,\r\n  ConsumeMethodOpts,\r\n  DSLMethodOpts,\r\n  DSLMethodOptsWithErr,\r\n  GrammarAction,\r\n  IOrAlt,\r\n  IParserConfig,\r\n  IRuleConfig,\r\n  IToken,\r\n  ManySepMethodOpts,\r\n  OrMethodOpts,\r\n  ParserMethod,\r\n  SubruleMethodOpts,\r\n  TokenType,\r\n  TokenTypeDictionary,\r\n  TokenVocabulary\r\n} from \"@chevrotain/types\"\r\nimport isEmpty from \"lodash/isEmpty\"\r\nimport isArray from \"lodash/isArray\"\r\nimport flatten from \"lodash/flatten\"\r\nimport every from \"lodash/every\"\r\nimport uniq from \"lodash/uniq\"\r\nimport isObject from \"lodash/isObject\"\r\nimport has from \"lodash/has\"\r\nimport values from \"lodash/values\"\r\nimport reduce from \"lodash/reduce\"\r\nimport clone from \"lodash/clone\"\r\nimport {\r\n  AT_LEAST_ONE_IDX,\r\n  AT_LEAST_ONE_SEP_IDX,\r\n  BITS_FOR_METHOD_TYPE,\r\n  BITS_FOR_OCCURRENCE_IDX,\r\n  MANY_IDX,\r\n  MANY_SEP_IDX,\r\n  OPTION_IDX,\r\n  OR_IDX\r\n} from \"../../grammar/keys\"\r\nimport {\r\n  isRecognitionException,\r\n  MismatchedTokenException,\r\n  NotAllInputParsedException\r\n} from \"../../exceptions_public\"\r\nimport { PROD_TYPE } from \"../../grammar/lookahead\"\r\nimport {\r\n  AbstractNextTerminalAfterProductionWalker,\r\n  NextTerminalAfterAtLeastOneSepWalker,\r\n  NextTerminalAfterAtLeastOneWalker,\r\n  NextTerminalAfterManySepWalker,\r\n  NextTerminalAfterManyWalker\r\n} from \"../../grammar/interpreter\"\r\nimport { DEFAULT_RULE_CONFIG, IParserState, TokenMatcher } from \"../parser\"\r\nimport { IN_RULE_RECOVERY_EXCEPTION } from \"./recoverable\"\r\nimport { EOF } from \"../../../scan/tokens_public\"\r\nimport { MixedInParser } from \"./parser_traits\"\r\nimport {\r\n  augmentTokenTypes,\r\n  isTokenType,\r\n  tokenStructuredMatcher,\r\n  tokenStructuredMatcherNoCategories\r\n} from \"../../../scan/tokens\"\r\nimport { Rule } from \"@chevrotain/gast\"\r\nimport { ParserMethodInternal } from \"../types\"\r\n\r\n/**\r\n * This trait is responsible for the runtime parsing engine\r\n * Used by the official API (recognizer_api.ts)\r\n */\r\nexport class RecognizerEngine {\r\n  isBackTrackingStack: boolean[]\r\n  className: string\r\n  RULE_STACK: number[]\r\n  RULE_OCCURRENCE_STACK: number[]\r\n  definedRulesNames: string[]\r\n  tokensMap: { [fqn: string]: TokenType }\r\n  gastProductionsCache: Record<string, Rule>\r\n  shortRuleNameToFull: Record<string, string>\r\n  fullRuleNameToShort: Record<string, number>\r\n  // The shortName Index must be coded \"after\" the first 8bits to enable building unique lookahead keys\r\n  ruleShortNameIdx: number\r\n  tokenMatcher: TokenMatcher\r\n  subruleIdx: number\r\n\r\n  initRecognizerEngine(\r\n    tokenVocabulary: TokenVocabulary,\r\n    config: IParserConfig\r\n  ) {\r\n    this.className = this.constructor.name\r\n    // TODO: would using an ES6 Map or plain object be faster (CST building scenario)\r\n    this.shortRuleNameToFull = {}\r\n    this.fullRuleNameToShort = {}\r\n    this.ruleShortNameIdx = 256\r\n    this.tokenMatcher = tokenStructuredMatcherNoCategories\r\n    this.subruleIdx = 0\r\n\r\n    this.definedRulesNames = []\r\n    this.tokensMap = {}\r\n    this.isBackTrackingStack = []\r\n    this.RULE_STACK = []\r\n    this.RULE_OCCURRENCE_STACK = []\r\n    this.gastProductionsCache = {}\r\n\r\n    if (has(config, \"serializedGrammar\")) {\r\n      throw Error(\r\n        \"The Parser's configuration can no longer contain a <serializedGrammar> property.\\n\" +\r\n          \"\\tSee: https://chevrotain.io/docs/changes/BREAKING_CHANGES.html#_6-0-0\\n\" +\r\n          \"\\tFor Further details.\"\r\n      )\r\n    }\r\n\r\n    if (isArray(tokenVocabulary)) {\r\n      // This only checks for Token vocabularies provided as arrays.\r\n      // That is good enough because the main objective is to detect users of pre-V4.0 APIs\r\n      // rather than all edge cases of empty Token vocabularies.\r\n      if (isEmpty(tokenVocabulary as any[])) {\r\n        throw Error(\r\n          \"A Token Vocabulary cannot be empty.\\n\" +\r\n            \"\\tNote that the first argument for the parser constructor\\n\" +\r\n            \"\\tis no longer a Token vector (since v4.0).\"\r\n        )\r\n      }\r\n\r\n      if (typeof (tokenVocabulary as any[])[0].startOffset === \"number\") {\r\n        throw Error(\r\n          \"The Parser constructor no longer accepts a token vector as the first argument.\\n\" +\r\n            \"\\tSee: https://chevrotain.io/docs/changes/BREAKING_CHANGES.html#_4-0-0\\n\" +\r\n            \"\\tFor Further details.\"\r\n        )\r\n      }\r\n    }\r\n\r\n    if (isArray(tokenVocabulary)) {\r\n      this.tokensMap = reduce(\r\n        tokenVocabulary,\r\n        (acc, tokType: TokenType) => {\r\n          acc[tokType.name] = tokType\r\n          return acc\r\n        },\r\n        {} as { [tokenName: string]: TokenType }\r\n      )\r\n    } else if (\r\n      has(tokenVocabulary, \"modes\") &&\r\n      every(flatten(values((<any>tokenVocabulary).modes)), isTokenType)\r\n    ) {\r\n      const allTokenTypes = flatten(values((<any>tokenVocabulary).modes))\r\n      const uniqueTokens = uniq(allTokenTypes)\r\n      this.tokensMap = <any>reduce(\r\n        uniqueTokens,\r\n        (acc, tokType: TokenType) => {\r\n          acc[tokType.name] = tokType\r\n          return acc\r\n        },\r\n        {} as { [tokenName: string]: TokenType }\r\n      )\r\n    } else if (isObject(tokenVocabulary)) {\r\n      this.tokensMap = clone(tokenVocabulary as TokenTypeDictionary)\r\n    } else {\r\n      throw new Error(\r\n        \"<tokensDictionary> argument must be An Array of Token constructors,\" +\r\n          \" A dictionary of Token constructors or an IMultiModeLexerDefinition\"\r\n      )\r\n    }\r\n\r\n    // always add EOF to the tokenNames -> constructors map. it is useful to assure all the input has been\r\n    // parsed with a clear error message (\"expecting EOF but found ...\")\r\n    this.tokensMap[\"EOF\"] = EOF\r\n\r\n    const allTokenTypes = has(tokenVocabulary, \"modes\")\r\n      ? flatten(values((<any>tokenVocabulary).modes))\r\n      : values(tokenVocabulary)\r\n    const noTokenCategoriesUsed = every(allTokenTypes, (tokenConstructor) =>\r\n      isEmpty(tokenConstructor.categoryMatches)\r\n    )\r\n\r\n    this.tokenMatcher = noTokenCategoriesUsed\r\n      ? tokenStructuredMatcherNoCategories\r\n      : tokenStructuredMatcher\r\n\r\n    // Because ES2015+ syntax should be supported for creating Token classes\r\n    // We cannot assume that the Token classes were created using the \"extendToken\" utilities\r\n    // Therefore we must augment the Token classes both on Lexer initialization and on Parser initialization\r\n    augmentTokenTypes(values(this.tokensMap))\r\n  }\r\n\r\n  defineRule<ARGS extends unknown[], R>(\r\n    this: MixedInParser,\r\n    ruleName: string,\r\n    impl: (...args: ARGS) => R,\r\n    config: IRuleConfig<R>\r\n  ): ParserMethodInternal<ARGS, R> {\r\n    if (this.selfAnalysisDone) {\r\n      throw Error(\r\n        `Grammar rule <${ruleName}> may not be defined after the 'performSelfAnalysis' method has been called'\\n` +\r\n          `Make sure that all grammar rule definitions are done before 'performSelfAnalysis' is called.`\r\n      )\r\n    }\r\n    const resyncEnabled: boolean = has(config, \"resyncEnabled\")\r\n      ? (config.resyncEnabled as boolean) // assumes end user provides the correct config value/type\r\n      : DEFAULT_RULE_CONFIG.resyncEnabled\r\n    const recoveryValueFunc = has(config, \"recoveryValueFunc\")\r\n      ? (config.recoveryValueFunc as () => R) // assumes end user provides the correct config value/type\r\n      : DEFAULT_RULE_CONFIG.recoveryValueFunc\r\n\r\n    // performance optimization: Use small integers as keys for the longer human readable \"full\" rule names.\r\n    // this greatly improves Map access time (as much as 8% for some performance benchmarks).\r\n    const shortName =\r\n      this.ruleShortNameIdx << (BITS_FOR_METHOD_TYPE + BITS_FOR_OCCURRENCE_IDX)\r\n\r\n    this.ruleShortNameIdx++\r\n    this.shortRuleNameToFull[shortName] = ruleName\r\n    this.fullRuleNameToShort[ruleName] = shortName\r\n\r\n    let invokeRuleWithTry: ParserMethod<ARGS, R>\r\n\r\n    // Micro optimization, only check the condition **once** on rule definition\r\n    // instead of **every single** rule invocation.\r\n    if (this.outputCst === true) {\r\n      invokeRuleWithTry = function invokeRuleWithTry(\r\n        this: MixedInParser,\r\n        ...args: ARGS\r\n      ): R {\r\n        try {\r\n          this.ruleInvocationStateUpdate(shortName, ruleName, this.subruleIdx)\r\n          impl.apply(this, args)\r\n          const cst = this.CST_STACK[this.CST_STACK.length - 1]\r\n          this.cstPostRule(cst)\r\n          return cst as unknown as R\r\n        } catch (e) {\r\n          return this.invokeRuleCatch(e, resyncEnabled, recoveryValueFunc) as R\r\n        } finally {\r\n          this.ruleFinallyStateUpdate()\r\n        }\r\n      }\r\n    } else {\r\n      invokeRuleWithTry = function invokeRuleWithTryCst(\r\n        this: MixedInParser,\r\n        ...args: ARGS\r\n      ): R {\r\n        try {\r\n          this.ruleInvocationStateUpdate(shortName, ruleName, this.subruleIdx)\r\n          return impl.apply(this, args)\r\n        } catch (e) {\r\n          return this.invokeRuleCatch(e, resyncEnabled, recoveryValueFunc) as R\r\n        } finally {\r\n          this.ruleFinallyStateUpdate()\r\n        }\r\n      }\r\n    }\r\n\r\n    const wrappedGrammarRule: ParserMethodInternal<ARGS, R> = Object.assign(\r\n      invokeRuleWithTry as any,\r\n      { ruleName, originalGrammarAction: impl }\r\n    )\r\n\r\n    return wrappedGrammarRule\r\n  }\r\n\r\n  invokeRuleCatch(\r\n    this: MixedInParser,\r\n    e: Error,\r\n    resyncEnabledConfig: boolean,\r\n    recoveryValueFunc: Function\r\n  ): unknown {\r\n    const isFirstInvokedRule = this.RULE_STACK.length === 1\r\n    // note the reSync is always enabled for the first rule invocation, because we must always be able to\r\n    // reSync with EOF and just output some INVALID ParseTree\r\n    // during backtracking reSync recovery is disabled, otherwise we can't be certain the backtracking\r\n    // path is really the most valid one\r\n    const reSyncEnabled =\r\n      resyncEnabledConfig && !this.isBackTracking() && this.recoveryEnabled\r\n\r\n    if (isRecognitionException(e)) {\r\n      const recogError: any = e\r\n      if (reSyncEnabled) {\r\n        const reSyncTokType = this.findReSyncTokenType()\r\n        if (this.isInCurrentRuleReSyncSet(reSyncTokType)) {\r\n          recogError.resyncedTokens = this.reSyncTo(reSyncTokType)\r\n          if (this.outputCst) {\r\n            const partialCstResult: any =\r\n              this.CST_STACK[this.CST_STACK.length - 1]\r\n            partialCstResult.recoveredNode = true\r\n            return partialCstResult\r\n          } else {\r\n            return recoveryValueFunc()\r\n          }\r\n        } else {\r\n          if (this.outputCst) {\r\n            const partialCstResult: any =\r\n              this.CST_STACK[this.CST_STACK.length - 1]\r\n            partialCstResult.recoveredNode = true\r\n            recogError.partialCstResult = partialCstResult\r\n          }\r\n          // to be handled Further up the call stack\r\n          throw recogError\r\n        }\r\n      } else if (isFirstInvokedRule) {\r\n        // otherwise a Redundant input error will be created as well and we cannot guarantee that this is indeed the case\r\n        this.moveToTerminatedState()\r\n        // the parser should never throw one of its own errors outside its flow.\r\n        // even if error recovery is disabled\r\n        return recoveryValueFunc()\r\n      } else {\r\n        // to be recovered Further up the call stack\r\n        throw recogError\r\n      }\r\n    } else {\r\n      // some other Error type which we don't know how to handle (for example a built in JavaScript Error)\r\n      throw e\r\n    }\r\n  }\r\n\r\n  // Implementation of parsing DSL\r\n  optionInternal<OUT>(\r\n    this: MixedInParser,\r\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\r\n    occurrence: number\r\n  ): OUT | undefined {\r\n    const key = this.getKeyForAutomaticLookahead(OPTION_IDX, occurrence)\r\n    return this.optionInternalLogic(actionORMethodDef, occurrence, key)\r\n  }\r\n\r\n  optionInternalLogic<OUT>(\r\n    this: MixedInParser,\r\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\r\n    occurrence: number,\r\n    key: number\r\n  ): OUT | undefined {\r\n    let lookAheadFunc = this.getLaFuncFromCache(key)\r\n    let action: GrammarAction<OUT>\r\n    if (typeof actionORMethodDef !== \"function\") {\r\n      action = actionORMethodDef.DEF\r\n      const predicate = actionORMethodDef.GATE\r\n      // predicate present\r\n      if (predicate !== undefined) {\r\n        const orgLookaheadFunction = lookAheadFunc\r\n        lookAheadFunc = () => {\r\n          return predicate.call(this) && orgLookaheadFunction.call(this)\r\n        }\r\n      }\r\n    } else {\r\n      action = actionORMethodDef\r\n    }\r\n\r\n    if (lookAheadFunc.call(this) === true) {\r\n      return action.call(this)\r\n    }\r\n    return undefined\r\n  }\r\n\r\n  atLeastOneInternal<OUT>(\r\n    this: MixedInParser,\r\n    prodOccurrence: number,\r\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>\r\n  ): void {\r\n    const laKey = this.getKeyForAutomaticLookahead(\r\n      AT_LEAST_ONE_IDX,\r\n      prodOccurrence\r\n    )\r\n    return this.atLeastOneInternalLogic(\r\n      prodOccurrence,\r\n      actionORMethodDef,\r\n      laKey\r\n    )\r\n  }\r\n\r\n  atLeastOneInternalLogic<OUT>(\r\n    this: MixedInParser,\r\n    prodOccurrence: number,\r\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\r\n    key: number\r\n  ): void {\r\n    let lookAheadFunc = this.getLaFuncFromCache(key)\r\n    let action\r\n    if (typeof actionORMethodDef !== \"function\") {\r\n      action = actionORMethodDef.DEF\r\n      const predicate = actionORMethodDef.GATE\r\n      // predicate present\r\n      if (predicate !== undefined) {\r\n        const orgLookaheadFunction = lookAheadFunc\r\n        lookAheadFunc = () => {\r\n          return predicate.call(this) && orgLookaheadFunction.call(this)\r\n        }\r\n      }\r\n    } else {\r\n      action = actionORMethodDef\r\n    }\r\n\r\n    if ((<Function>lookAheadFunc).call(this) === true) {\r\n      let notStuck = this.doSingleRepetition(action)\r\n      while (\r\n        (<Function>lookAheadFunc).call(this) === true &&\r\n        notStuck === true\r\n      ) {\r\n        notStuck = this.doSingleRepetition(action)\r\n      }\r\n    } else {\r\n      throw this.raiseEarlyExitException(\r\n        prodOccurrence,\r\n        PROD_TYPE.REPETITION_MANDATORY,\r\n        (<DSLMethodOptsWithErr<OUT>>actionORMethodDef).ERR_MSG\r\n      )\r\n    }\r\n\r\n    // note that while it may seem that this can cause an error because by using a recursive call to\r\n    // AT_LEAST_ONE we change the grammar to AT_LEAST_TWO, AT_LEAST_THREE ... , the possible recursive call\r\n    // from the tryInRepetitionRecovery(...) will only happen IFF there really are TWO/THREE/.... items.\r\n\r\n    // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\r\n    this.attemptInRepetitionRecovery(\r\n      this.atLeastOneInternal,\r\n      [prodOccurrence, actionORMethodDef],\r\n      <any>lookAheadFunc,\r\n      AT_LEAST_ONE_IDX,\r\n      prodOccurrence,\r\n      NextTerminalAfterAtLeastOneWalker\r\n    )\r\n  }\r\n\r\n  atLeastOneSepFirstInternal<OUT>(\r\n    this: MixedInParser,\r\n    prodOccurrence: number,\r\n    options: AtLeastOneSepMethodOpts<OUT>\r\n  ): void {\r\n    const laKey = this.getKeyForAutomaticLookahead(\r\n      AT_LEAST_ONE_SEP_IDX,\r\n      prodOccurrence\r\n    )\r\n    this.atLeastOneSepFirstInternalLogic(prodOccurrence, options, laKey)\r\n  }\r\n\r\n  atLeastOneSepFirstInternalLogic<OUT>(\r\n    this: MixedInParser,\r\n    prodOccurrence: number,\r\n    options: AtLeastOneSepMethodOpts<OUT>,\r\n    key: number\r\n  ): void {\r\n    const action = options.DEF\r\n    const separator = options.SEP\r\n\r\n    const firstIterationLookaheadFunc = this.getLaFuncFromCache(key)\r\n\r\n    // 1st iteration\r\n    if (firstIterationLookaheadFunc.call(this) === true) {\r\n      ;(<GrammarAction<OUT>>action).call(this)\r\n\r\n      //  TODO: Optimization can move this function construction into \"attemptInRepetitionRecovery\"\r\n      //  because it is only needed in error recovery scenarios.\r\n      const separatorLookAheadFunc = () => {\r\n        return this.tokenMatcher(this.LA(1), separator)\r\n      }\r\n\r\n      // 2nd..nth iterations\r\n      while (this.tokenMatcher(this.LA(1), separator) === true) {\r\n        // note that this CONSUME will never enter recovery because\r\n        // the separatorLookAheadFunc checks that the separator really does exist.\r\n        this.CONSUME(separator)\r\n        // No need for checking infinite loop here due to consuming the separator.\r\n        ;(<GrammarAction<OUT>>action).call(this)\r\n      }\r\n\r\n      // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\r\n      this.attemptInRepetitionRecovery(\r\n        this.repetitionSepSecondInternal,\r\n        [\r\n          prodOccurrence,\r\n          separator,\r\n          separatorLookAheadFunc,\r\n          action,\r\n          NextTerminalAfterAtLeastOneSepWalker\r\n        ],\r\n        separatorLookAheadFunc,\r\n        AT_LEAST_ONE_SEP_IDX,\r\n        prodOccurrence,\r\n        NextTerminalAfterAtLeastOneSepWalker\r\n      )\r\n    } else {\r\n      throw this.raiseEarlyExitException(\r\n        prodOccurrence,\r\n        PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR,\r\n        options.ERR_MSG\r\n      )\r\n    }\r\n  }\r\n\r\n  manyInternal<OUT>(\r\n    this: MixedInParser,\r\n    prodOccurrence: number,\r\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>\r\n  ): void {\r\n    const laKey = this.getKeyForAutomaticLookahead(MANY_IDX, prodOccurrence)\r\n    return this.manyInternalLogic(prodOccurrence, actionORMethodDef, laKey)\r\n  }\r\n\r\n  manyInternalLogic<OUT>(\r\n    this: MixedInParser,\r\n    prodOccurrence: number,\r\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\r\n    key: number\r\n  ) {\r\n    let lookaheadFunction = this.getLaFuncFromCache(key)\r\n    let action\r\n    if (typeof actionORMethodDef !== \"function\") {\r\n      action = actionORMethodDef.DEF\r\n      const predicate = actionORMethodDef.GATE\r\n      // predicate present\r\n      if (predicate !== undefined) {\r\n        const orgLookaheadFunction = lookaheadFunction\r\n        lookaheadFunction = () => {\r\n          return predicate.call(this) && orgLookaheadFunction.call(this)\r\n        }\r\n      }\r\n    } else {\r\n      action = actionORMethodDef\r\n    }\r\n\r\n    let notStuck = true\r\n    while (lookaheadFunction.call(this) === true && notStuck === true) {\r\n      notStuck = this.doSingleRepetition(action)\r\n    }\r\n\r\n    // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\r\n    this.attemptInRepetitionRecovery(\r\n      this.manyInternal,\r\n      [prodOccurrence, actionORMethodDef],\r\n      <any>lookaheadFunction,\r\n      MANY_IDX,\r\n      prodOccurrence,\r\n      NextTerminalAfterManyWalker,\r\n      // The notStuck parameter is only relevant when \"attemptInRepetitionRecovery\"\r\n      // is invoked from manyInternal, in the MANY_SEP case and AT_LEAST_ONE[_SEP]\r\n      // An infinite loop cannot occur as:\r\n      // - Either the lookahead is guaranteed to consume something (Single Token Separator)\r\n      // - AT_LEAST_ONE by definition is guaranteed to consume something (or error out).\r\n      notStuck\r\n    )\r\n  }\r\n\r\n  manySepFirstInternal<OUT>(\r\n    this: MixedInParser,\r\n    prodOccurrence: number,\r\n    options: ManySepMethodOpts<OUT>\r\n  ): void {\r\n    const laKey = this.getKeyForAutomaticLookahead(MANY_SEP_IDX, prodOccurrence)\r\n    this.manySepFirstInternalLogic(prodOccurrence, options, laKey)\r\n  }\r\n\r\n  manySepFirstInternalLogic<OUT>(\r\n    this: MixedInParser,\r\n    prodOccurrence: number,\r\n    options: ManySepMethodOpts<OUT>,\r\n    key: number\r\n  ): void {\r\n    const action = options.DEF\r\n    const separator = options.SEP\r\n    const firstIterationLaFunc = this.getLaFuncFromCache(key)\r\n\r\n    // 1st iteration\r\n    if (firstIterationLaFunc.call(this) === true) {\r\n      action.call(this)\r\n\r\n      const separatorLookAheadFunc = () => {\r\n        return this.tokenMatcher(this.LA(1), separator)\r\n      }\r\n      // 2nd..nth iterations\r\n      while (this.tokenMatcher(this.LA(1), separator) === true) {\r\n        // note that this CONSUME will never enter recovery because\r\n        // the separatorLookAheadFunc checks that the separator really does exist.\r\n        this.CONSUME(separator)\r\n        // No need for checking infinite loop here due to consuming the separator.\r\n        action.call(this)\r\n      }\r\n\r\n      // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\r\n      this.attemptInRepetitionRecovery(\r\n        this.repetitionSepSecondInternal,\r\n        [\r\n          prodOccurrence,\r\n          separator,\r\n          separatorLookAheadFunc,\r\n          action,\r\n          NextTerminalAfterManySepWalker\r\n        ],\r\n        separatorLookAheadFunc,\r\n        MANY_SEP_IDX,\r\n        prodOccurrence,\r\n        NextTerminalAfterManySepWalker\r\n      )\r\n    }\r\n  }\r\n\r\n  repetitionSepSecondInternal<OUT>(\r\n    this: MixedInParser,\r\n    prodOccurrence: number,\r\n    separator: TokenType,\r\n    separatorLookAheadFunc: () => boolean,\r\n    action: GrammarAction<OUT>,\r\n    nextTerminalAfterWalker: typeof AbstractNextTerminalAfterProductionWalker\r\n  ): void {\r\n    while (separatorLookAheadFunc()) {\r\n      // note that this CONSUME will never enter recovery because\r\n      // the separatorLookAheadFunc checks that the separator really does exist.\r\n      this.CONSUME(separator)\r\n      action.call(this)\r\n    }\r\n\r\n    // we can only arrive to this function after an error\r\n    // has occurred (hence the name 'second') so the following\r\n    // IF will always be entered, its possible to remove it...\r\n    // however it is kept to avoid confusion and be consistent.\r\n    // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\r\n    /* istanbul ignore else */\r\n    this.attemptInRepetitionRecovery(\r\n      this.repetitionSepSecondInternal,\r\n      [\r\n        prodOccurrence,\r\n        separator,\r\n        separatorLookAheadFunc,\r\n        action,\r\n        nextTerminalAfterWalker\r\n      ],\r\n      separatorLookAheadFunc,\r\n      AT_LEAST_ONE_SEP_IDX,\r\n      prodOccurrence,\r\n      nextTerminalAfterWalker\r\n    )\r\n  }\r\n\r\n  doSingleRepetition(this: MixedInParser, action: Function): any {\r\n    const beforeIteration = this.getLexerPosition()\r\n    action.call(this)\r\n    const afterIteration = this.getLexerPosition()\r\n\r\n    // This boolean will indicate if this repetition progressed\r\n    // or if we are \"stuck\" (potential infinite loop in the repetition).\r\n    return afterIteration > beforeIteration\r\n  }\r\n\r\n  orInternal<T>(\r\n    this: MixedInParser,\r\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\r\n    occurrence: number\r\n  ): T {\r\n    const laKey = this.getKeyForAutomaticLookahead(OR_IDX, occurrence)\r\n    const alts = isArray(altsOrOpts) ? altsOrOpts : altsOrOpts.DEF\r\n\r\n    const laFunc = this.getLaFuncFromCache(laKey)\r\n    const altIdxToTake = laFunc.call(this, alts)\r\n    if (altIdxToTake !== undefined) {\r\n      const chosenAlternative: any = alts[altIdxToTake]\r\n      return chosenAlternative.ALT.call(this)\r\n    }\r\n    this.raiseNoAltException(\r\n      occurrence,\r\n      (altsOrOpts as OrMethodOpts<unknown>).ERR_MSG\r\n    )\r\n  }\r\n\r\n  ruleFinallyStateUpdate(this: MixedInParser): void {\r\n    this.RULE_STACK.pop()\r\n    this.RULE_OCCURRENCE_STACK.pop()\r\n\r\n    // NOOP when cst is disabled\r\n    this.cstFinallyStateUpdate()\r\n\r\n    if (this.RULE_STACK.length === 0 && this.isAtEndOfInput() === false) {\r\n      const firstRedundantTok = this.LA(1)\r\n      const errMsg = this.errorMessageProvider.buildNotAllInputParsedMessage({\r\n        firstRedundant: firstRedundantTok,\r\n        ruleName: this.getCurrRuleFullName()\r\n      })\r\n      this.SAVE_ERROR(new NotAllInputParsedException(errMsg, firstRedundantTok))\r\n    }\r\n  }\r\n\r\n  subruleInternal<ARGS extends unknown[], R>(\r\n    this: MixedInParser,\r\n    ruleToCall: ParserMethodInternal<ARGS, R>,\r\n    idx: number,\r\n    options?: SubruleMethodOpts<ARGS>\r\n  ): R {\r\n    let ruleResult\r\n    try {\r\n      const args = options !== undefined ? options.ARGS : undefined\r\n      this.subruleIdx = idx\r\n      ruleResult = ruleToCall.apply(this, args)\r\n      this.cstPostNonTerminal(\r\n        ruleResult,\r\n        options !== undefined && options.LABEL !== undefined\r\n          ? options.LABEL\r\n          : ruleToCall.ruleName\r\n      )\r\n      return ruleResult\r\n    } catch (e) {\r\n      throw this.subruleInternalError(e, options, ruleToCall.ruleName)\r\n    }\r\n  }\r\n\r\n  subruleInternalError(\r\n    this: MixedInParser,\r\n    e: any,\r\n    options: SubruleMethodOpts<unknown[]> | undefined,\r\n    ruleName: string\r\n  ): void {\r\n    if (isRecognitionException(e) && e.partialCstResult !== undefined) {\r\n      this.cstPostNonTerminal(\r\n        e.partialCstResult,\r\n        options !== undefined && options.LABEL !== undefined\r\n          ? options.LABEL\r\n          : ruleName\r\n      )\r\n\r\n      delete e.partialCstResult\r\n    }\r\n    throw e\r\n  }\r\n\r\n  consumeInternal(\r\n    this: MixedInParser,\r\n    tokType: TokenType,\r\n    idx: number,\r\n    options: ConsumeMethodOpts | undefined\r\n  ): IToken {\r\n    let consumedToken!: IToken\r\n    try {\r\n      const nextToken = this.LA(1)\r\n      if (this.tokenMatcher(nextToken, tokType) === true) {\r\n        this.consumeToken()\r\n        consumedToken = nextToken\r\n      } else {\r\n        this.consumeInternalError(tokType, nextToken, options)\r\n      }\r\n    } catch (eFromConsumption) {\r\n      consumedToken = this.consumeInternalRecovery(\r\n        tokType,\r\n        idx,\r\n        eFromConsumption\r\n      )\r\n    }\r\n\r\n    this.cstPostTerminal(\r\n      options !== undefined && options.LABEL !== undefined\r\n        ? options.LABEL\r\n        : tokType.name,\r\n      consumedToken\r\n    )\r\n    return consumedToken\r\n  }\r\n\r\n  consumeInternalError(\r\n    this: MixedInParser,\r\n    tokType: TokenType,\r\n    nextToken: IToken,\r\n    options: ConsumeMethodOpts | undefined\r\n  ): void {\r\n    let msg\r\n    const previousToken = this.LA(0)\r\n    if (options !== undefined && options.ERR_MSG) {\r\n      msg = options.ERR_MSG\r\n    } else {\r\n      msg = this.errorMessageProvider.buildMismatchTokenMessage({\r\n        expected: tokType,\r\n        actual: nextToken,\r\n        previous: previousToken,\r\n        ruleName: this.getCurrRuleFullName()\r\n      })\r\n    }\r\n    throw this.SAVE_ERROR(\r\n      new MismatchedTokenException(msg, nextToken, previousToken)\r\n    )\r\n  }\r\n\r\n  consumeInternalRecovery(\r\n    this: MixedInParser,\r\n    tokType: TokenType,\r\n    idx: number,\r\n    eFromConsumption: Error\r\n  ): IToken {\r\n    // no recovery allowed during backtracking, otherwise backtracking may recover invalid syntax and accept it\r\n    // but the original syntax could have been parsed successfully without any backtracking + recovery\r\n    if (\r\n      this.recoveryEnabled &&\r\n      // TODO: more robust checking of the exception type. Perhaps Typescript extending expressions?\r\n      eFromConsumption.name === \"MismatchedTokenException\" &&\r\n      !this.isBackTracking()\r\n    ) {\r\n      const follows = this.getFollowsForInRuleRecovery(<any>tokType, idx)\r\n      try {\r\n        return this.tryInRuleRecovery(<any>tokType, follows)\r\n      } catch (eFromInRuleRecovery) {\r\n        if (eFromInRuleRecovery.name === IN_RULE_RECOVERY_EXCEPTION) {\r\n          // failed in RuleRecovery.\r\n          // throw the original error in order to trigger reSync error recovery\r\n          throw eFromConsumption\r\n        } else {\r\n          throw eFromInRuleRecovery\r\n        }\r\n      }\r\n    } else {\r\n      throw eFromConsumption\r\n    }\r\n  }\r\n\r\n  saveRecogState(this: MixedInParser): IParserState {\r\n    // errors is a getter which will clone the errors array\r\n    const savedErrors = this.errors\r\n    const savedRuleStack = clone(this.RULE_STACK)\r\n    return {\r\n      errors: savedErrors,\r\n      lexerState: this.exportLexerState(),\r\n      RULE_STACK: savedRuleStack,\r\n      CST_STACK: this.CST_STACK\r\n    }\r\n  }\r\n\r\n  reloadRecogState(this: MixedInParser, newState: IParserState) {\r\n    this.errors = newState.errors\r\n    this.importLexerState(newState.lexerState)\r\n    this.RULE_STACK = newState.RULE_STACK\r\n  }\r\n\r\n  ruleInvocationStateUpdate(\r\n    this: MixedInParser,\r\n    shortName: number,\r\n    fullName: string,\r\n    idxInCallingRule: number\r\n  ): void {\r\n    this.RULE_OCCURRENCE_STACK.push(idxInCallingRule)\r\n    this.RULE_STACK.push(shortName)\r\n    // NOOP when cst is disabled\r\n    this.cstInvocationStateUpdate(fullName)\r\n  }\r\n\r\n  isBackTracking(this: MixedInParser): boolean {\r\n    return this.isBackTrackingStack.length !== 0\r\n  }\r\n\r\n  getCurrRuleFullName(this: MixedInParser): string {\r\n    const shortName = this.getLastExplicitRuleShortName()\r\n    return this.shortRuleNameToFull[shortName]\r\n  }\r\n\r\n  shortRuleNameToFullName(this: MixedInParser, shortName: number) {\r\n    return this.shortRuleNameToFull[shortName]\r\n  }\r\n\r\n  public isAtEndOfInput(this: MixedInParser): boolean {\r\n    return this.tokenMatcher(this.LA(1), EOF)\r\n  }\r\n\r\n  public reset(this: MixedInParser): void {\r\n    this.resetLexerState()\r\n    this.subruleIdx = 0\r\n    this.isBackTrackingStack = []\r\n    this.errors = []\r\n    this.RULE_STACK = []\r\n    // TODO: extract a specific reset for TreeBuilder trait\r\n    this.CST_STACK = []\r\n    this.RULE_OCCURRENCE_STACK = []\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}