{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.clearRegExpParserCache = exports.getRegExpAst = void 0;\n\nvar regexp_to_ast_1 = require(\"regexp-to-ast\");\n\nvar regExpAstCache = {};\nvar regExpParser = new regexp_to_ast_1.RegExpParser();\n\nfunction getRegExpAst(regExp) {\n  var regExpStr = regExp.toString();\n\n  if (regExpAstCache.hasOwnProperty(regExpStr)) {\n    return regExpAstCache[regExpStr];\n  } else {\n    var regExpAst = regExpParser.pattern(regExpStr);\n    regExpAstCache[regExpStr] = regExpAst;\n    return regExpAst;\n  }\n}\n\nexports.getRegExpAst = getRegExpAst;\n\nfunction clearRegExpParserCache() {\n  regExpAstCache = {};\n}\n\nexports.clearRegExpParserCache = clearRegExpParserCache;","map":{"version":3,"mappings":";;;;;;;AAAA;;AASA,IAAIA,cAAc,GAAuC,EAAzD;AACA,IAAMC,YAAY,GAAG,IAAIC,4BAAJ,EAArB;;AAUA,SAAgBC,YAAhB,CAA6BC,MAA7B,EAA2C;EACzC,IAAMC,SAAS,GAAGD,MAAM,CAACE,QAAP,EAAlB;;EACA,IAAIN,cAAc,CAACO,cAAf,CAA8BF,SAA9B,CAAJ,EAA8C;IAC5C,OAAOL,cAAc,CAACK,SAAD,CAArB;EACD,CAFD,MAEO;IACL,IAAMG,SAAS,GAAGP,YAAY,CAACQ,OAAb,CAAqBJ,SAArB,CAAlB;IACAL,cAAc,CAACK,SAAD,CAAd,GAA4BG,SAA5B;IACA,OAAOA,SAAP;EACD;AACF;;AATDE;;AAWA,SAAgBC,sBAAhB,GAAsC;EACpCX,cAAc,GAAG,EAAjB;AACD;;AAFDU","names":["regExpAstCache","regExpParser","regexp_to_ast_1","getRegExpAst","regExp","regExpStr","toString","hasOwnProperty","regExpAst","pattern","exports","clearRegExpParserCache"],"sources":["D:\\Github\\NIKE-DJANGO\\Jord\\l4fycy\\node_modules\\chevrotain\\src\\scan\\reg_exp_parser.ts"],"sourcesContent":["import {\r\n  Alternative,\r\n  Assertion,\r\n  Atom,\r\n  Disjunction,\r\n  RegExpParser,\r\n  RegExpPattern\r\n} from \"regexp-to-ast\"\r\n\r\nlet regExpAstCache: { [regex: string]: RegExpPattern } = {}\r\nconst regExpParser = new RegExpParser()\r\n\r\n// this should be moved to regexp-to-ast\r\nexport type ASTNode =\r\n  | RegExpPattern\r\n  | Disjunction\r\n  | Alternative\r\n  | Assertion\r\n  | Atom\r\n\r\nexport function getRegExpAst(regExp: RegExp): RegExpPattern {\r\n  const regExpStr = regExp.toString()\r\n  if (regExpAstCache.hasOwnProperty(regExpStr)) {\r\n    return regExpAstCache[regExpStr]\r\n  } else {\r\n    const regExpAst = regExpParser.pattern(regExpStr)\r\n    regExpAstCache[regExpStr] = regExpAst\r\n    return regExpAst\r\n  }\r\n}\r\n\r\nexport function clearRegExpParserCache() {\r\n  regExpAstCache = {}\r\n}\r\n"]},"metadata":{},"sourceType":"script"}