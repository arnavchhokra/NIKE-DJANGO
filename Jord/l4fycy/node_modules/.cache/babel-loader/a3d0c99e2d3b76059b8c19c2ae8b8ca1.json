{"ast":null,"code":"import _createForOfIteratorHelper from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _createClass from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Vector3, BufferAttribute, BufferGeometry } from 'three';\nimport * as BufferGeometryUtils from '../utils/BufferGeometryUtils.js';\nimport { mergeVertices } from '../utils/BufferGeometryUtils.js';\n\nvar EdgeSplitModifier = /*#__PURE__*/_createClass(function EdgeSplitModifier() {\n  var _this = this;\n\n  _classCallCheck(this, EdgeSplitModifier);\n\n  _defineProperty(this, \"A\", new Vector3());\n\n  _defineProperty(this, \"B\", new Vector3());\n\n  _defineProperty(this, \"C\", new Vector3());\n\n  _defineProperty(this, \"positions\", []);\n\n  _defineProperty(this, \"normals\", new Float32Array());\n\n  _defineProperty(this, \"indexes\", []);\n\n  _defineProperty(this, \"pointToIndexMap\", []);\n\n  _defineProperty(this, \"splitIndexes\", []);\n\n  _defineProperty(this, \"oldNormals\", []);\n\n  _defineProperty(this, \"computeNormals\", function () {\n    _this.normals = new Float32Array(_this.indexes.length * 3);\n\n    for (var i = 0; i < _this.indexes.length; i += 3) {\n      var index = _this.indexes[i];\n\n      _this.A.set(_this.positions[3 * index], _this.positions[3 * index + 1], _this.positions[3 * index + 2]);\n\n      index = _this.indexes[i + 1];\n\n      _this.B.set(_this.positions[3 * index], _this.positions[3 * index + 1], _this.positions[3 * index + 2]);\n\n      index = _this.indexes[i + 2];\n\n      _this.C.set(_this.positions[3 * index], _this.positions[3 * index + 1], _this.positions[3 * index + 2]);\n\n      _this.C.sub(_this.B);\n\n      _this.A.sub(_this.B);\n\n      var normal = _this.C.cross(_this.A).normalize();\n\n      for (var j = 0; j < 3; j++) {\n        _this.normals[3 * (i + j)] = normal.x;\n        _this.normals[3 * (i + j) + 1] = normal.y;\n        _this.normals[3 * (i + j) + 2] = normal.z;\n      }\n    }\n  });\n\n  _defineProperty(this, \"mapPositionsToIndexes\", function () {\n    _this.pointToIndexMap = Array(_this.positions.length / 3);\n\n    for (var i = 0; i < _this.indexes.length; i++) {\n      var index = _this.indexes[i];\n\n      if (_this.pointToIndexMap[index] == null) {\n        _this.pointToIndexMap[index] = [];\n      }\n\n      _this.pointToIndexMap[index].push(i);\n    }\n  });\n\n  _defineProperty(this, \"edgeSplitToGroups\", function (indexes, cutOff, firstIndex) {\n    _this.A.set(_this.normals[3 * firstIndex], _this.normals[3 * firstIndex + 1], _this.normals[3 * firstIndex + 2]).normalize();\n\n    var result = {\n      splitGroup: [],\n      currentGroup: [firstIndex]\n    };\n\n    var _iterator = _createForOfIteratorHelper(indexes),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var j = _step.value;\n\n        if (j !== firstIndex) {\n          _this.B.set(_this.normals[3 * j], _this.normals[3 * j + 1], _this.normals[3 * j + 2]).normalize();\n\n          if (_this.B.dot(_this.A) < cutOff) {\n            result.splitGroup.push(j);\n          } else {\n            result.currentGroup.push(j);\n          }\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return result;\n  });\n\n  _defineProperty(this, \"edgeSplit\", function (indexes, cutOff) {\n    var original = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    if (indexes.length === 0) return;\n    var groupResults = [];\n\n    var _iterator2 = _createForOfIteratorHelper(indexes),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var index = _step2.value;\n        groupResults.push(_this.edgeSplitToGroups(indexes, cutOff, index));\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    var result = groupResults[0];\n\n    for (var _i = 0, _groupResults = groupResults; _i < _groupResults.length; _i++) {\n      var groupResult = _groupResults[_i];\n\n      if (groupResult.currentGroup.length > result.currentGroup.length) {\n        result = groupResult;\n      }\n    }\n\n    if (original != null) {\n      _this.splitIndexes.push({\n        original: original,\n        indexes: result.currentGroup\n      });\n    }\n\n    if (result.splitGroup.length) {\n      _this.edgeSplit(result.splitGroup, cutOff, original || result.currentGroup[0]);\n    }\n  });\n\n  _defineProperty(this, \"modify\", function (geometry, cutOffAngle) {\n    var tryKeepNormals = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    var hadNormals = false;\n\n    if (geometry.attributes.normal) {\n      hadNormals = true;\n      geometry = geometry.clone();\n\n      if (tryKeepNormals === true && geometry.index !== null) {\n        _this.oldNormals = geometry.attributes.normal.array;\n      }\n\n      geometry.deleteAttribute('normal');\n    }\n\n    if (geometry.index == null) {\n      if (BufferGeometryUtils === undefined) {\n        throw 'THREE.EdgeSplitModifier relies on BufferGeometryUtils';\n      }\n\n      geometry = mergeVertices(geometry);\n    }\n\n    _this.indexes = geometry.index.array;\n    _this.positions = geometry.getAttribute('position').array;\n\n    _this.computeNormals();\n\n    _this.mapPositionsToIndexes();\n\n    _this.splitIndexes = [];\n\n    var _iterator3 = _createForOfIteratorHelper(_this.pointToIndexMap),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var vertexIndexes = _step3.value;\n\n        _this.edgeSplit(vertexIndexes, Math.cos(cutOffAngle) - 0.001);\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n\n    var newAttributes = {};\n\n    for (var _i2 = 0, _Object$keys = Object.keys(geometry.attributes); _i2 < _Object$keys.length; _i2++) {\n      var name = _Object$keys[_i2];\n      var oldAttribute = geometry.attributes[name]; // @ts-ignore\n\n      var newArray = new oldAttribute.array.constructor((_this.indexes.length + _this.splitIndexes.length) * oldAttribute.itemSize);\n      newArray.set(oldAttribute.array);\n      newAttributes[name] = new BufferAttribute(newArray, oldAttribute.itemSize, oldAttribute.normalized);\n    }\n\n    var newIndexes = new Uint32Array(_this.indexes.length);\n    newIndexes.set(_this.indexes);\n\n    for (var i = 0; i < _this.splitIndexes.length; i++) {\n      var split = _this.splitIndexes[i];\n      var index = _this.indexes[split.original];\n\n      for (var _i3 = 0, _Object$values = Object.values(newAttributes); _i3 < _Object$values.length; _i3++) {\n        var attribute = _Object$values[_i3];\n\n        for (var j = 0; j < attribute.itemSize; j++) {\n          // @ts-expect-error ArrayLike can't be mutated, but this works – https://github.com/three-types/three-ts-types/issues/35\n          attribute.array[(_this.indexes.length + i) * attribute.itemSize + j] = attribute.array[index * attribute.itemSize + j];\n        }\n      }\n\n      var _iterator4 = _createForOfIteratorHelper(split.indexes),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _j = _step4.value;\n          newIndexes[_j] = _this.indexes.length + i;\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n\n    geometry = new BufferGeometry();\n    geometry.setIndex(new BufferAttribute(newIndexes, 1));\n\n    for (var _i4 = 0, _Object$keys2 = Object.keys(newAttributes); _i4 < _Object$keys2.length; _i4++) {\n      var _name = _Object$keys2[_i4];\n      geometry.setAttribute(_name, newAttributes[_name]);\n    }\n\n    if (hadNormals) {\n      geometry.computeVertexNormals();\n\n      if (_this.oldNormals !== null) {\n        var changedNormals = new Array(_this.oldNormals.length / 3).fill(false);\n\n        var _iterator5 = _createForOfIteratorHelper(_this.splitIndexes),\n            _step5;\n\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var splitData = _step5.value;\n            changedNormals[splitData.original] = true;\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n\n        for (var _i5 = 0; _i5 < changedNormals.length; _i5++) {\n          if (changedNormals[_i5] === false) {\n            for (var _j2 = 0; _j2 < 3; _j2++) {\n              // @ts-expect-error ArrayLike can't be mutated, but this works – https://github.com/three-types/three-ts-types/issues/35\n              geometry.attributes.normal.array[3 * _i5 + _j2] = _this.oldNormals[3 * _i5 + _j2];\n            }\n          }\n        }\n      }\n    }\n\n    return geometry;\n  });\n});\n\nexport { EdgeSplitModifier };","map":{"version":3,"names":["_defineProperty","Vector3","BufferAttribute","BufferGeometry","BufferGeometryUtils","mergeVertices","EdgeSplitModifier","Float32Array","normals","indexes","length","i","index","A","set","positions","B","C","sub","normal","cross","normalize","j","x","y","z","pointToIndexMap","Array","push","cutOff","firstIndex","result","splitGroup","currentGroup","dot","original","groupResults","edgeSplitToGroups","groupResult","splitIndexes","edgeSplit","geometry","cutOffAngle","tryKeepNormals","hadNormals","attributes","clone","oldNormals","array","deleteAttribute","undefined","getAttribute","computeNormals","mapPositionsToIndexes","vertexIndexes","Math","cos","newAttributes","Object","keys","name","oldAttribute","newArray","constructor","itemSize","normalized","newIndexes","Uint32Array","split","values","attribute","setIndex","setAttribute","computeVertexNormals","changedNormals","fill","splitData"],"sources":["D:/Jord/l4fycy/node_modules/three-stdlib/modifiers/EdgeSplitModifier.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Vector3, BufferAttribute, BufferGeometry } from 'three';\nimport * as BufferGeometryUtils from '../utils/BufferGeometryUtils.js';\nimport { mergeVertices } from '../utils/BufferGeometryUtils.js';\n\nclass EdgeSplitModifier {\n  constructor() {\n    _defineProperty(this, \"A\", new Vector3());\n\n    _defineProperty(this, \"B\", new Vector3());\n\n    _defineProperty(this, \"C\", new Vector3());\n\n    _defineProperty(this, \"positions\", []);\n\n    _defineProperty(this, \"normals\", new Float32Array());\n\n    _defineProperty(this, \"indexes\", []);\n\n    _defineProperty(this, \"pointToIndexMap\", []);\n\n    _defineProperty(this, \"splitIndexes\", []);\n\n    _defineProperty(this, \"oldNormals\", []);\n\n    _defineProperty(this, \"computeNormals\", () => {\n      this.normals = new Float32Array(this.indexes.length * 3);\n\n      for (let i = 0; i < this.indexes.length; i += 3) {\n        let index = this.indexes[i];\n        this.A.set(this.positions[3 * index], this.positions[3 * index + 1], this.positions[3 * index + 2]);\n        index = this.indexes[i + 1];\n        this.B.set(this.positions[3 * index], this.positions[3 * index + 1], this.positions[3 * index + 2]);\n        index = this.indexes[i + 2];\n        this.C.set(this.positions[3 * index], this.positions[3 * index + 1], this.positions[3 * index + 2]);\n        this.C.sub(this.B);\n        this.A.sub(this.B);\n        const normal = this.C.cross(this.A).normalize();\n\n        for (let j = 0; j < 3; j++) {\n          this.normals[3 * (i + j)] = normal.x;\n          this.normals[3 * (i + j) + 1] = normal.y;\n          this.normals[3 * (i + j) + 2] = normal.z;\n        }\n      }\n    });\n\n    _defineProperty(this, \"mapPositionsToIndexes\", () => {\n      this.pointToIndexMap = Array(this.positions.length / 3);\n\n      for (let i = 0; i < this.indexes.length; i++) {\n        const index = this.indexes[i];\n\n        if (this.pointToIndexMap[index] == null) {\n          this.pointToIndexMap[index] = [];\n        }\n\n        this.pointToIndexMap[index].push(i);\n      }\n    });\n\n    _defineProperty(this, \"edgeSplitToGroups\", (indexes, cutOff, firstIndex) => {\n      this.A.set(this.normals[3 * firstIndex], this.normals[3 * firstIndex + 1], this.normals[3 * firstIndex + 2]).normalize();\n      const result = {\n        splitGroup: [],\n        currentGroup: [firstIndex]\n      };\n\n      for (let j of indexes) {\n        if (j !== firstIndex) {\n          this.B.set(this.normals[3 * j], this.normals[3 * j + 1], this.normals[3 * j + 2]).normalize();\n\n          if (this.B.dot(this.A) < cutOff) {\n            result.splitGroup.push(j);\n          } else {\n            result.currentGroup.push(j);\n          }\n        }\n      }\n\n      return result;\n    });\n\n    _defineProperty(this, \"edgeSplit\", (indexes, cutOff, original = null) => {\n      if (indexes.length === 0) return;\n      const groupResults = [];\n\n      for (let index of indexes) {\n        groupResults.push(this.edgeSplitToGroups(indexes, cutOff, index));\n      }\n\n      let result = groupResults[0];\n\n      for (let groupResult of groupResults) {\n        if (groupResult.currentGroup.length > result.currentGroup.length) {\n          result = groupResult;\n        }\n      }\n\n      if (original != null) {\n        this.splitIndexes.push({\n          original,\n          indexes: result.currentGroup\n        });\n      }\n\n      if (result.splitGroup.length) {\n        this.edgeSplit(result.splitGroup, cutOff, original || result.currentGroup[0]);\n      }\n    });\n\n    _defineProperty(this, \"modify\", (geometry, cutOffAngle, tryKeepNormals = true) => {\n      let hadNormals = false;\n\n      if (geometry.attributes.normal) {\n        hadNormals = true;\n        geometry = geometry.clone();\n\n        if (tryKeepNormals === true && geometry.index !== null) {\n          this.oldNormals = geometry.attributes.normal.array;\n        }\n\n        geometry.deleteAttribute('normal');\n      }\n\n      if (geometry.index == null) {\n        if (BufferGeometryUtils === undefined) {\n          throw 'THREE.EdgeSplitModifier relies on BufferGeometryUtils';\n        }\n\n        geometry = mergeVertices(geometry);\n      }\n\n      this.indexes = geometry.index.array;\n      this.positions = geometry.getAttribute('position').array;\n      this.computeNormals();\n      this.mapPositionsToIndexes();\n      this.splitIndexes = [];\n\n      for (let vertexIndexes of this.pointToIndexMap) {\n        this.edgeSplit(vertexIndexes, Math.cos(cutOffAngle) - 0.001);\n      }\n\n      const newAttributes = {};\n\n      for (let name of Object.keys(geometry.attributes)) {\n        const oldAttribute = geometry.attributes[name]; // @ts-ignore\n\n        const newArray = new oldAttribute.array.constructor((this.indexes.length + this.splitIndexes.length) * oldAttribute.itemSize);\n        newArray.set(oldAttribute.array);\n        newAttributes[name] = new BufferAttribute(newArray, oldAttribute.itemSize, oldAttribute.normalized);\n      }\n\n      const newIndexes = new Uint32Array(this.indexes.length);\n      newIndexes.set(this.indexes);\n\n      for (let i = 0; i < this.splitIndexes.length; i++) {\n        const split = this.splitIndexes[i];\n        const index = this.indexes[split.original];\n\n        for (let attribute of Object.values(newAttributes)) {\n          for (let j = 0; j < attribute.itemSize; j++) {\n            // @ts-expect-error ArrayLike can't be mutated, but this works – https://github.com/three-types/three-ts-types/issues/35\n            attribute.array[(this.indexes.length + i) * attribute.itemSize + j] = attribute.array[index * attribute.itemSize + j];\n          }\n        }\n\n        for (let j of split.indexes) {\n          newIndexes[j] = this.indexes.length + i;\n        }\n      }\n\n      geometry = new BufferGeometry();\n      geometry.setIndex(new BufferAttribute(newIndexes, 1));\n\n      for (let name of Object.keys(newAttributes)) {\n        geometry.setAttribute(name, newAttributes[name]);\n      }\n\n      if (hadNormals) {\n        geometry.computeVertexNormals();\n\n        if (this.oldNormals !== null) {\n          const changedNormals = new Array(this.oldNormals.length / 3).fill(false);\n\n          for (let splitData of this.splitIndexes) changedNormals[splitData.original] = true;\n\n          for (let i = 0; i < changedNormals.length; i++) {\n            if (changedNormals[i] === false) {\n              for (let j = 0; j < 3; j++) {\n                // @ts-expect-error ArrayLike can't be mutated, but this works – https://github.com/three-types/three-ts-types/issues/35\n                geometry.attributes.normal.array[3 * i + j] = this.oldNormals[3 * i + j];\n              }\n            }\n          }\n        }\n      }\n\n      return geometry;\n    });\n  }\n\n}\n\nexport { EdgeSplitModifier };\n"],"mappings":";;;AAAA,OAAOA,eAAP,MAA4B,2CAA5B;AACA,SAASC,OAAT,EAAkBC,eAAlB,EAAmCC,cAAnC,QAAyD,OAAzD;AACA,OAAO,KAAKC,mBAAZ,MAAqC,iCAArC;AACA,SAASC,aAAT,QAA8B,iCAA9B;;IAEMC,iB,6BACJ,6BAAc;EAAA;;EAAA;;EACZN,eAAe,CAAC,IAAD,EAAO,GAAP,EAAY,IAAIC,OAAJ,EAAZ,CAAf;;EAEAD,eAAe,CAAC,IAAD,EAAO,GAAP,EAAY,IAAIC,OAAJ,EAAZ,CAAf;;EAEAD,eAAe,CAAC,IAAD,EAAO,GAAP,EAAY,IAAIC,OAAJ,EAAZ,CAAf;;EAEAD,eAAe,CAAC,IAAD,EAAO,WAAP,EAAoB,EAApB,CAAf;;EAEAA,eAAe,CAAC,IAAD,EAAO,SAAP,EAAkB,IAAIO,YAAJ,EAAlB,CAAf;;EAEAP,eAAe,CAAC,IAAD,EAAO,SAAP,EAAkB,EAAlB,CAAf;;EAEAA,eAAe,CAAC,IAAD,EAAO,iBAAP,EAA0B,EAA1B,CAAf;;EAEAA,eAAe,CAAC,IAAD,EAAO,cAAP,EAAuB,EAAvB,CAAf;;EAEAA,eAAe,CAAC,IAAD,EAAO,YAAP,EAAqB,EAArB,CAAf;;EAEAA,eAAe,CAAC,IAAD,EAAO,gBAAP,EAAyB,YAAM;IAC5C,KAAI,CAACQ,OAAL,GAAe,IAAID,YAAJ,CAAiB,KAAI,CAACE,OAAL,CAAaC,MAAb,GAAsB,CAAvC,CAAf;;IAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAI,CAACF,OAAL,CAAaC,MAAjC,EAAyCC,CAAC,IAAI,CAA9C,EAAiD;MAC/C,IAAIC,KAAK,GAAG,KAAI,CAACH,OAAL,CAAaE,CAAb,CAAZ;;MACA,KAAI,CAACE,CAAL,CAAOC,GAAP,CAAW,KAAI,CAACC,SAAL,CAAe,IAAIH,KAAnB,CAAX,EAAsC,KAAI,CAACG,SAAL,CAAe,IAAIH,KAAJ,GAAY,CAA3B,CAAtC,EAAqE,KAAI,CAACG,SAAL,CAAe,IAAIH,KAAJ,GAAY,CAA3B,CAArE;;MACAA,KAAK,GAAG,KAAI,CAACH,OAAL,CAAaE,CAAC,GAAG,CAAjB,CAAR;;MACA,KAAI,CAACK,CAAL,CAAOF,GAAP,CAAW,KAAI,CAACC,SAAL,CAAe,IAAIH,KAAnB,CAAX,EAAsC,KAAI,CAACG,SAAL,CAAe,IAAIH,KAAJ,GAAY,CAA3B,CAAtC,EAAqE,KAAI,CAACG,SAAL,CAAe,IAAIH,KAAJ,GAAY,CAA3B,CAArE;;MACAA,KAAK,GAAG,KAAI,CAACH,OAAL,CAAaE,CAAC,GAAG,CAAjB,CAAR;;MACA,KAAI,CAACM,CAAL,CAAOH,GAAP,CAAW,KAAI,CAACC,SAAL,CAAe,IAAIH,KAAnB,CAAX,EAAsC,KAAI,CAACG,SAAL,CAAe,IAAIH,KAAJ,GAAY,CAA3B,CAAtC,EAAqE,KAAI,CAACG,SAAL,CAAe,IAAIH,KAAJ,GAAY,CAA3B,CAArE;;MACA,KAAI,CAACK,CAAL,CAAOC,GAAP,CAAW,KAAI,CAACF,CAAhB;;MACA,KAAI,CAACH,CAAL,CAAOK,GAAP,CAAW,KAAI,CAACF,CAAhB;;MACA,IAAMG,MAAM,GAAG,KAAI,CAACF,CAAL,CAAOG,KAAP,CAAa,KAAI,CAACP,CAAlB,EAAqBQ,SAArB,EAAf;;MAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;QAC1B,KAAI,CAACd,OAAL,CAAa,KAAKG,CAAC,GAAGW,CAAT,CAAb,IAA4BH,MAAM,CAACI,CAAnC;QACA,KAAI,CAACf,OAAL,CAAa,KAAKG,CAAC,GAAGW,CAAT,IAAc,CAA3B,IAAgCH,MAAM,CAACK,CAAvC;QACA,KAAI,CAAChB,OAAL,CAAa,KAAKG,CAAC,GAAGW,CAAT,IAAc,CAA3B,IAAgCH,MAAM,CAACM,CAAvC;MACD;IACF;EACF,CApBc,CAAf;;EAsBAzB,eAAe,CAAC,IAAD,EAAO,uBAAP,EAAgC,YAAM;IACnD,KAAI,CAAC0B,eAAL,GAAuBC,KAAK,CAAC,KAAI,CAACZ,SAAL,CAAeL,MAAf,GAAwB,CAAzB,CAA5B;;IAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAI,CAACF,OAAL,CAAaC,MAAjC,EAAyCC,CAAC,EAA1C,EAA8C;MAC5C,IAAMC,KAAK,GAAG,KAAI,CAACH,OAAL,CAAaE,CAAb,CAAd;;MAEA,IAAI,KAAI,CAACe,eAAL,CAAqBd,KAArB,KAA+B,IAAnC,EAAyC;QACvC,KAAI,CAACc,eAAL,CAAqBd,KAArB,IAA8B,EAA9B;MACD;;MAED,KAAI,CAACc,eAAL,CAAqBd,KAArB,EAA4BgB,IAA5B,CAAiCjB,CAAjC;IACD;EACF,CAZc,CAAf;;EAcAX,eAAe,CAAC,IAAD,EAAO,mBAAP,EAA4B,UAACS,OAAD,EAAUoB,MAAV,EAAkBC,UAAlB,EAAiC;IAC1E,KAAI,CAACjB,CAAL,CAAOC,GAAP,CAAW,KAAI,CAACN,OAAL,CAAa,IAAIsB,UAAjB,CAAX,EAAyC,KAAI,CAACtB,OAAL,CAAa,IAAIsB,UAAJ,GAAiB,CAA9B,CAAzC,EAA2E,KAAI,CAACtB,OAAL,CAAa,IAAIsB,UAAJ,GAAiB,CAA9B,CAA3E,EAA6GT,SAA7G;;IACA,IAAMU,MAAM,GAAG;MACbC,UAAU,EAAE,EADC;MAEbC,YAAY,EAAE,CAACH,UAAD;IAFD,CAAf;;IAF0E,2CAO5DrB,OAP4D;IAAA;;IAAA;MAO1E,oDAAuB;QAAA,IAAda,CAAc;;QACrB,IAAIA,CAAC,KAAKQ,UAAV,EAAsB;UACpB,KAAI,CAACd,CAAL,CAAOF,GAAP,CAAW,KAAI,CAACN,OAAL,CAAa,IAAIc,CAAjB,CAAX,EAAgC,KAAI,CAACd,OAAL,CAAa,IAAIc,CAAJ,GAAQ,CAArB,CAAhC,EAAyD,KAAI,CAACd,OAAL,CAAa,IAAIc,CAAJ,GAAQ,CAArB,CAAzD,EAAkFD,SAAlF;;UAEA,IAAI,KAAI,CAACL,CAAL,CAAOkB,GAAP,CAAW,KAAI,CAACrB,CAAhB,IAAqBgB,MAAzB,EAAiC;YAC/BE,MAAM,CAACC,UAAP,CAAkBJ,IAAlB,CAAuBN,CAAvB;UACD,CAFD,MAEO;YACLS,MAAM,CAACE,YAAP,CAAoBL,IAApB,CAAyBN,CAAzB;UACD;QACF;MACF;IAjByE;MAAA;IAAA;MAAA;IAAA;;IAmB1E,OAAOS,MAAP;EACD,CApBc,CAAf;;EAsBA/B,eAAe,CAAC,IAAD,EAAO,WAAP,EAAoB,UAACS,OAAD,EAAUoB,MAAV,EAAsC;IAAA,IAApBM,QAAoB,uEAAT,IAAS;IACvE,IAAI1B,OAAO,CAACC,MAAR,KAAmB,CAAvB,EAA0B;IAC1B,IAAM0B,YAAY,GAAG,EAArB;;IAFuE,4CAIrD3B,OAJqD;IAAA;;IAAA;MAIvE,uDAA2B;QAAA,IAAlBG,KAAkB;QACzBwB,YAAY,CAACR,IAAb,CAAkB,KAAI,CAACS,iBAAL,CAAuB5B,OAAvB,EAAgCoB,MAAhC,EAAwCjB,KAAxC,CAAlB;MACD;IANsE;MAAA;IAAA;MAAA;IAAA;;IAQvE,IAAImB,MAAM,GAAGK,YAAY,CAAC,CAAD,CAAzB;;IAEA,iCAAwBA,YAAxB,mCAAsC;MAAjC,IAAIE,WAAW,oBAAf;;MACH,IAAIA,WAAW,CAACL,YAAZ,CAAyBvB,MAAzB,GAAkCqB,MAAM,CAACE,YAAP,CAAoBvB,MAA1D,EAAkE;QAChEqB,MAAM,GAAGO,WAAT;MACD;IACF;;IAED,IAAIH,QAAQ,IAAI,IAAhB,EAAsB;MACpB,KAAI,CAACI,YAAL,CAAkBX,IAAlB,CAAuB;QACrBO,QAAQ,EAARA,QADqB;QAErB1B,OAAO,EAAEsB,MAAM,CAACE;MAFK,CAAvB;IAID;;IAED,IAAIF,MAAM,CAACC,UAAP,CAAkBtB,MAAtB,EAA8B;MAC5B,KAAI,CAAC8B,SAAL,CAAeT,MAAM,CAACC,UAAtB,EAAkCH,MAAlC,EAA0CM,QAAQ,IAAIJ,MAAM,CAACE,YAAP,CAAoB,CAApB,CAAtD;IACD;EACF,CA1Bc,CAAf;;EA4BAjC,eAAe,CAAC,IAAD,EAAO,QAAP,EAAiB,UAACyC,QAAD,EAAWC,WAAX,EAAkD;IAAA,IAA1BC,cAA0B,uEAAT,IAAS;IAChF,IAAIC,UAAU,GAAG,KAAjB;;IAEA,IAAIH,QAAQ,CAACI,UAAT,CAAoB1B,MAAxB,EAAgC;MAC9ByB,UAAU,GAAG,IAAb;MACAH,QAAQ,GAAGA,QAAQ,CAACK,KAAT,EAAX;;MAEA,IAAIH,cAAc,KAAK,IAAnB,IAA2BF,QAAQ,CAAC7B,KAAT,KAAmB,IAAlD,EAAwD;QACtD,KAAI,CAACmC,UAAL,GAAkBN,QAAQ,CAACI,UAAT,CAAoB1B,MAApB,CAA2B6B,KAA7C;MACD;;MAEDP,QAAQ,CAACQ,eAAT,CAAyB,QAAzB;IACD;;IAED,IAAIR,QAAQ,CAAC7B,KAAT,IAAkB,IAAtB,EAA4B;MAC1B,IAAIR,mBAAmB,KAAK8C,SAA5B,EAAuC;QACrC,MAAM,uDAAN;MACD;;MAEDT,QAAQ,GAAGpC,aAAa,CAACoC,QAAD,CAAxB;IACD;;IAED,KAAI,CAAChC,OAAL,GAAegC,QAAQ,CAAC7B,KAAT,CAAeoC,KAA9B;IACA,KAAI,CAACjC,SAAL,GAAiB0B,QAAQ,CAACU,YAAT,CAAsB,UAAtB,EAAkCH,KAAnD;;IACA,KAAI,CAACI,cAAL;;IACA,KAAI,CAACC,qBAAL;;IACA,KAAI,CAACd,YAAL,GAAoB,EAApB;;IA1BgF,4CA4BtD,KAAI,CAACb,eA5BiD;IAAA;;IAAA;MA4BhF,uDAAgD;QAAA,IAAvC4B,aAAuC;;QAC9C,KAAI,CAACd,SAAL,CAAec,aAAf,EAA8BC,IAAI,CAACC,GAAL,CAASd,WAAT,IAAwB,KAAtD;MACD;IA9B+E;MAAA;IAAA;MAAA;IAAA;;IAgChF,IAAMe,aAAa,GAAG,EAAtB;;IAEA,iCAAiBC,MAAM,CAACC,IAAP,CAAYlB,QAAQ,CAACI,UAArB,CAAjB,oCAAmD;MAA9C,IAAIe,IAAI,oBAAR;MACH,IAAMC,YAAY,GAAGpB,QAAQ,CAACI,UAAT,CAAoBe,IAApB,CAArB,CADiD,CACD;;MAEhD,IAAME,QAAQ,GAAG,IAAID,YAAY,CAACb,KAAb,CAAmBe,WAAvB,CAAmC,CAAC,KAAI,CAACtD,OAAL,CAAaC,MAAb,GAAsB,KAAI,CAAC6B,YAAL,CAAkB7B,MAAzC,IAAmDmD,YAAY,CAACG,QAAnG,CAAjB;MACAF,QAAQ,CAAChD,GAAT,CAAa+C,YAAY,CAACb,KAA1B;MACAS,aAAa,CAACG,IAAD,CAAb,GAAsB,IAAI1D,eAAJ,CAAoB4D,QAApB,EAA8BD,YAAY,CAACG,QAA3C,EAAqDH,YAAY,CAACI,UAAlE,CAAtB;IACD;;IAED,IAAMC,UAAU,GAAG,IAAIC,WAAJ,CAAgB,KAAI,CAAC1D,OAAL,CAAaC,MAA7B,CAAnB;IACAwD,UAAU,CAACpD,GAAX,CAAe,KAAI,CAACL,OAApB;;IAEA,KAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAI,CAAC4B,YAAL,CAAkB7B,MAAtC,EAA8CC,CAAC,EAA/C,EAAmD;MACjD,IAAMyD,KAAK,GAAG,KAAI,CAAC7B,YAAL,CAAkB5B,CAAlB,CAAd;MACA,IAAMC,KAAK,GAAG,KAAI,CAACH,OAAL,CAAa2D,KAAK,CAACjC,QAAnB,CAAd;;MAEA,mCAAsBuB,MAAM,CAACW,MAAP,CAAcZ,aAAd,CAAtB,sCAAoD;QAA/C,IAAIa,SAAS,sBAAb;;QACH,KAAK,IAAIhD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgD,SAAS,CAACN,QAA9B,EAAwC1C,CAAC,EAAzC,EAA6C;UAC3C;UACAgD,SAAS,CAACtB,KAAV,CAAgB,CAAC,KAAI,CAACvC,OAAL,CAAaC,MAAb,GAAsBC,CAAvB,IAA4B2D,SAAS,CAACN,QAAtC,GAAiD1C,CAAjE,IAAsEgD,SAAS,CAACtB,KAAV,CAAgBpC,KAAK,GAAG0D,SAAS,CAACN,QAAlB,GAA6B1C,CAA7C,CAAtE;QACD;MACF;;MATgD,4CAWnC8C,KAAK,CAAC3D,OAX6B;MAAA;;MAAA;QAWjD,uDAA6B;UAAA,IAApBa,EAAoB;UAC3B4C,UAAU,CAAC5C,EAAD,CAAV,GAAgB,KAAI,CAACb,OAAL,CAAaC,MAAb,GAAsBC,CAAtC;QACD;MAbgD;QAAA;MAAA;QAAA;MAAA;IAclD;;IAED8B,QAAQ,GAAG,IAAItC,cAAJ,EAAX;IACAsC,QAAQ,CAAC8B,QAAT,CAAkB,IAAIrE,eAAJ,CAAoBgE,UAApB,EAAgC,CAAhC,CAAlB;;IAEA,kCAAiBR,MAAM,CAACC,IAAP,CAAYF,aAAZ,CAAjB,qCAA6C;MAAxC,IAAIG,KAAI,qBAAR;MACHnB,QAAQ,CAAC+B,YAAT,CAAsBZ,KAAtB,EAA4BH,aAAa,CAACG,KAAD,CAAzC;IACD;;IAED,IAAIhB,UAAJ,EAAgB;MACdH,QAAQ,CAACgC,oBAAT;;MAEA,IAAI,KAAI,CAAC1B,UAAL,KAAoB,IAAxB,EAA8B;QAC5B,IAAM2B,cAAc,GAAG,IAAI/C,KAAJ,CAAU,KAAI,CAACoB,UAAL,CAAgBrC,MAAhB,GAAyB,CAAnC,EAAsCiE,IAAtC,CAA2C,KAA3C,CAAvB;;QAD4B,4CAGN,KAAI,CAACpC,YAHC;QAAA;;QAAA;UAG5B,uDAAyC;YAAA,IAAhCqC,SAAgC;YAAAF,cAAc,CAACE,SAAS,CAACzC,QAAX,CAAd,GAAqC,IAArC;UAA0C;QAHvD;UAAA;QAAA;UAAA;QAAA;;QAK5B,KAAK,IAAIxB,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAG+D,cAAc,CAAChE,MAAnC,EAA2CC,GAAC,EAA5C,EAAgD;UAC9C,IAAI+D,cAAc,CAAC/D,GAAD,CAAd,KAAsB,KAA1B,EAAiC;YAC/B,KAAK,IAAIW,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAG,CAApB,EAAuBA,GAAC,EAAxB,EAA4B;cAC1B;cACAmB,QAAQ,CAACI,UAAT,CAAoB1B,MAApB,CAA2B6B,KAA3B,CAAiC,IAAIrC,GAAJ,GAAQW,GAAzC,IAA8C,KAAI,CAACyB,UAAL,CAAgB,IAAIpC,GAAJ,GAAQW,GAAxB,CAA9C;YACD;UACF;QACF;MACF;IACF;;IAED,OAAOmB,QAAP;EACD,CAxFc,CAAf;AAyFD,C;;AAIH,SAASnC,iBAAT"},"metadata":{},"sourceType":"module"}