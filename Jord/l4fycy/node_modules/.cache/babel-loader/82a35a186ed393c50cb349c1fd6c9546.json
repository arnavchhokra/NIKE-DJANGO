{"ast":null,"code":"import _classCallCheck from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { WebGLRenderTarget, LinearFilter, Vector2, Scene, Camera, BufferGeometry, BufferAttribute, Mesh } from 'three';\nimport { ConvolutionMaterial } from './ConvolutionMaterial.js';\n\nvar BlurPass = /*#__PURE__*/function () {\n  function BlurPass(_ref) {\n    var gl = _ref.gl,\n        resolution = _ref.resolution,\n        _ref$width = _ref.width,\n        width = _ref$width === void 0 ? 500 : _ref$width,\n        _ref$height = _ref.height,\n        height = _ref$height === void 0 ? 500 : _ref$height,\n        _ref$minDepthThreshol = _ref.minDepthThreshold,\n        minDepthThreshold = _ref$minDepthThreshol === void 0 ? 0 : _ref$minDepthThreshol,\n        _ref$maxDepthThreshol = _ref.maxDepthThreshold,\n        maxDepthThreshold = _ref$maxDepthThreshol === void 0 ? 1 : _ref$maxDepthThreshol,\n        _ref$depthScale = _ref.depthScale,\n        depthScale = _ref$depthScale === void 0 ? 0 : _ref$depthScale,\n        _ref$depthToBlurRatio = _ref.depthToBlurRatioBias,\n        depthToBlurRatioBias = _ref$depthToBlurRatio === void 0 ? 0.25 : _ref$depthToBlurRatio;\n\n    _classCallCheck(this, BlurPass);\n\n    this.renderToScreen = false;\n    this.renderTargetA = new WebGLRenderTarget(resolution, resolution, {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      stencilBuffer: false,\n      depthBuffer: false,\n      encoding: gl.outputEncoding\n    });\n    this.renderTargetB = this.renderTargetA.clone();\n    this.convolutionMaterial = new ConvolutionMaterial();\n    this.convolutionMaterial.setTexelSize(1.0 / width, 1.0 / height);\n    this.convolutionMaterial.setResolution(new Vector2(width, height));\n    this.scene = new Scene();\n    this.camera = new Camera();\n    this.convolutionMaterial.uniforms.minDepthThreshold.value = minDepthThreshold;\n    this.convolutionMaterial.uniforms.maxDepthThreshold.value = maxDepthThreshold;\n    this.convolutionMaterial.uniforms.depthScale.value = depthScale;\n    this.convolutionMaterial.uniforms.depthToBlurRatioBias.value = depthToBlurRatioBias;\n    this.convolutionMaterial.defines.USE_DEPTH = depthScale > 0;\n    var vertices = new Float32Array([-1, -1, 0, 3, -1, 0, -1, 3, 0]);\n    var uvs = new Float32Array([0, 0, 2, 0, 0, 2]);\n    var geometry = new BufferGeometry();\n    geometry.setAttribute('position', new BufferAttribute(vertices, 3));\n    geometry.setAttribute('uv', new BufferAttribute(uvs, 2));\n    this.screen = new Mesh(geometry, this.convolutionMaterial);\n    this.screen.frustumCulled = false;\n    this.scene.add(this.screen);\n  }\n\n  _createClass(BlurPass, [{\n    key: \"render\",\n    value: function render(renderer, inputBuffer, outputBuffer) {\n      var scene = this.scene;\n      var camera = this.camera;\n      var renderTargetA = this.renderTargetA;\n      var renderTargetB = this.renderTargetB;\n      var material = this.convolutionMaterial;\n      var uniforms = material.uniforms;\n      uniforms.depthBuffer.value = inputBuffer.depthTexture;\n      var kernel = material.kernel;\n      var lastRT = inputBuffer;\n      var destRT;\n      var i, l; // Apply the multi-pass blur.\n\n      for (i = 0, l = kernel.length - 1; i < l; ++i) {\n        // Alternate between targets.\n        destRT = (i & 1) === 0 ? renderTargetA : renderTargetB;\n        uniforms.kernel.value = kernel[i];\n        uniforms.inputBuffer.value = lastRT.texture;\n        renderer.setRenderTarget(destRT);\n        renderer.render(scene, camera);\n        lastRT = destRT;\n      }\n\n      uniforms.kernel.value = kernel[i];\n      uniforms.inputBuffer.value = lastRT.texture;\n      renderer.setRenderTarget(this.renderToScreen ? null : outputBuffer);\n      renderer.render(scene, camera);\n    }\n  }]);\n\n  return BlurPass;\n}();\n\nexport { BlurPass };","map":{"version":3,"names":["WebGLRenderTarget","LinearFilter","Vector2","Scene","Camera","BufferGeometry","BufferAttribute","Mesh","ConvolutionMaterial","BlurPass","gl","resolution","width","height","minDepthThreshold","maxDepthThreshold","depthScale","depthToBlurRatioBias","renderToScreen","renderTargetA","minFilter","magFilter","stencilBuffer","depthBuffer","encoding","outputEncoding","renderTargetB","clone","convolutionMaterial","setTexelSize","setResolution","scene","camera","uniforms","value","defines","USE_DEPTH","vertices","Float32Array","uvs","geometry","setAttribute","screen","frustumCulled","add","renderer","inputBuffer","outputBuffer","material","depthTexture","kernel","lastRT","destRT","i","l","length","texture","setRenderTarget","render"],"sources":["D:/Jord/l4fycy/node_modules/@react-three/drei/materials/BlurPass.js"],"sourcesContent":["import { WebGLRenderTarget, LinearFilter, Vector2, Scene, Camera, BufferGeometry, BufferAttribute, Mesh } from 'three';\nimport { ConvolutionMaterial } from './ConvolutionMaterial.js';\n\nclass BlurPass {\n  constructor({\n    gl,\n    resolution,\n    width = 500,\n    height = 500,\n    minDepthThreshold = 0,\n    maxDepthThreshold = 1,\n    depthScale = 0,\n    depthToBlurRatioBias = 0.25\n  }) {\n    this.renderToScreen = false;\n    this.renderTargetA = new WebGLRenderTarget(resolution, resolution, {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      stencilBuffer: false,\n      depthBuffer: false,\n      encoding: gl.outputEncoding\n    });\n    this.renderTargetB = this.renderTargetA.clone();\n    this.convolutionMaterial = new ConvolutionMaterial();\n    this.convolutionMaterial.setTexelSize(1.0 / width, 1.0 / height);\n    this.convolutionMaterial.setResolution(new Vector2(width, height));\n    this.scene = new Scene();\n    this.camera = new Camera();\n    this.convolutionMaterial.uniforms.minDepthThreshold.value = minDepthThreshold;\n    this.convolutionMaterial.uniforms.maxDepthThreshold.value = maxDepthThreshold;\n    this.convolutionMaterial.uniforms.depthScale.value = depthScale;\n    this.convolutionMaterial.uniforms.depthToBlurRatioBias.value = depthToBlurRatioBias;\n    this.convolutionMaterial.defines.USE_DEPTH = depthScale > 0;\n    const vertices = new Float32Array([-1, -1, 0, 3, -1, 0, -1, 3, 0]);\n    const uvs = new Float32Array([0, 0, 2, 0, 0, 2]);\n    const geometry = new BufferGeometry();\n    geometry.setAttribute('position', new BufferAttribute(vertices, 3));\n    geometry.setAttribute('uv', new BufferAttribute(uvs, 2));\n    this.screen = new Mesh(geometry, this.convolutionMaterial);\n    this.screen.frustumCulled = false;\n    this.scene.add(this.screen);\n  }\n\n  render(renderer, inputBuffer, outputBuffer) {\n    const scene = this.scene;\n    const camera = this.camera;\n    const renderTargetA = this.renderTargetA;\n    const renderTargetB = this.renderTargetB;\n    let material = this.convolutionMaterial;\n    let uniforms = material.uniforms;\n    uniforms.depthBuffer.value = inputBuffer.depthTexture;\n    const kernel = material.kernel;\n    let lastRT = inputBuffer;\n    let destRT;\n    let i, l; // Apply the multi-pass blur.\n\n    for (i = 0, l = kernel.length - 1; i < l; ++i) {\n      // Alternate between targets.\n      destRT = (i & 1) === 0 ? renderTargetA : renderTargetB;\n      uniforms.kernel.value = kernel[i];\n      uniforms.inputBuffer.value = lastRT.texture;\n      renderer.setRenderTarget(destRT);\n      renderer.render(scene, camera);\n      lastRT = destRT;\n    }\n\n    uniforms.kernel.value = kernel[i];\n    uniforms.inputBuffer.value = lastRT.texture;\n    renderer.setRenderTarget(this.renderToScreen ? null : outputBuffer);\n    renderer.render(scene, camera);\n  }\n\n}\n\nexport { BlurPass };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}