{"ast":null,"code":"import { animateStyle } from './index.mjs';\nimport { isWaapiSupportedEasing } from './easing.mjs';\nimport { getFinalKeyframe } from './utils/get-final-keyframe.mjs';\nimport { animateValue } from '../js/index.mjs';\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../../utils/time-conversion.mjs';\nimport { memo } from '../../../utils/memo.mjs';\nimport { noop } from '../../../utils/noop.mjs';\nimport { frame, cancelFrame } from '../../../frameloop/frame.mjs';\nconst supportsWaapi = memo(() => Object.hasOwnProperty.call(Element.prototype, \"animate\"));\n/**\r\n * A list of values that can be hardware-accelerated.\r\n */\nconst acceleratedValues = new Set([\"opacity\", \"clipPath\", \"filter\", \"transform\", \"backgroundColor\"]);\n/**\r\n * 10ms is chosen here as it strikes a balance between smooth\r\n * results (more than one keyframe per frame at 60fps) and\r\n * keyframe quantity.\r\n */\nconst sampleDelta = 10; //ms\n/**\r\n * Implement a practical max duration for keyframe generation\r\n * to prevent infinite loops\r\n */\nconst maxDuration = 20000;\nconst requiresPregeneratedKeyframes = (valueName, options) => options.type === \"spring\" || valueName === \"backgroundColor\" || !isWaapiSupportedEasing(options.ease);\nfunction createAcceleratedAnimation(value, valueName, _ref) {\n  let {\n    onUpdate,\n    onComplete,\n    ...options\n  } = _ref;\n  const canAccelerateAnimation = supportsWaapi() && acceleratedValues.has(valueName) && !options.repeatDelay && options.repeatType !== \"mirror\" && options.damping !== 0 && options.type !== \"inertia\";\n  if (!canAccelerateAnimation) return false;\n  /**\r\n   * TODO: Unify with js/index\r\n   */\n  let hasStopped = false;\n  let resolveFinishedPromise;\n  let currentFinishedPromise;\n  /**\r\n   * Cancelling an animation will write to the DOM. For safety we want to defer\r\n   * this until the next `update` frame lifecycle. This flag tracks whether we\r\n   * have a pending cancel, if so we shouldn't allow animations to finish.\r\n   */\n  let pendingCancel = false;\n  /**\r\n   * Resolve the current Promise every time we enter the\r\n   * finished state. This is WAAPI-compatible behaviour.\r\n   */\n  const updateFinishedPromise = () => {\n    currentFinishedPromise = new Promise(resolve => {\n      resolveFinishedPromise = resolve;\n    });\n  };\n  // Create the first finished promise\n  updateFinishedPromise();\n  let {\n    keyframes,\n    duration = 300,\n    ease,\n    times\n  } = options;\n  /**\r\n   * If this animation needs pre-generated keyframes then generate.\r\n   */\n  if (requiresPregeneratedKeyframes(valueName, options)) {\n    const sampleAnimation = animateValue({\n      ...options,\n      repeat: 0,\n      delay: 0\n    });\n    let state = {\n      done: false,\n      value: keyframes[0]\n    };\n    const pregeneratedKeyframes = [];\n    /**\r\n     * Bail after 20 seconds of pre-generated keyframes as it's likely\r\n     * we're heading for an infinite loop.\r\n     */\n    let t = 0;\n    while (!state.done && t < maxDuration) {\n      state = sampleAnimation.sample(t);\n      pregeneratedKeyframes.push(state.value);\n      t += sampleDelta;\n    }\n    times = undefined;\n    keyframes = pregeneratedKeyframes;\n    duration = t - sampleDelta;\n    ease = \"linear\";\n  }\n  const animation = animateStyle(value.owner.current, valueName, keyframes, {\n    ...options,\n    duration,\n    /**\r\n     * This function is currently not called if ease is provided\r\n     * as a function so the cast is safe.\r\n     *\r\n     * However it would be possible for a future refinement to port\r\n     * in easing pregeneration from Motion One for browsers that\r\n     * support the upcoming `linear()` easing function.\r\n     */\n    ease: ease,\n    times\n  });\n  const cancelAnimation = () => {\n    pendingCancel = false;\n    animation.cancel();\n  };\n  const safeCancel = () => {\n    pendingCancel = true;\n    frame.update(cancelAnimation);\n    resolveFinishedPromise();\n    updateFinishedPromise();\n  };\n  /**\r\n   * Prefer the `onfinish` prop as it's more widely supported than\r\n   * the `finished` promise.\r\n   *\r\n   * Here, we synchronously set the provided MotionValue to the end\r\n   * keyframe. If we didn't, when the WAAPI animation is finished it would\r\n   * be removed from the element which would then revert to its old styles.\r\n   */\n  animation.onfinish = () => {\n    if (pendingCancel) return;\n    value.set(getFinalKeyframe(keyframes, options));\n    onComplete && onComplete();\n    safeCancel();\n  };\n  /**\r\n   * Animation interrupt callback.\r\n   */\n  const controls = {\n    then(resolve, reject) {\n      return currentFinishedPromise.then(resolve, reject);\n    },\n    attachTimeline(timeline) {\n      animation.timeline = timeline;\n      animation.onfinish = null;\n      return noop;\n    },\n    get time() {\n      return millisecondsToSeconds(animation.currentTime || 0);\n    },\n    set time(newTime) {\n      animation.currentTime = secondsToMilliseconds(newTime);\n    },\n    get speed() {\n      return animation.playbackRate;\n    },\n    set speed(newSpeed) {\n      animation.playbackRate = newSpeed;\n    },\n    get duration() {\n      return millisecondsToSeconds(duration);\n    },\n    play: () => {\n      if (hasStopped) return;\n      animation.play();\n      /**\r\n       * Cancel any pending cancel tasks\r\n       */\n      cancelFrame(cancelAnimation);\n    },\n    pause: () => animation.pause(),\n    stop: () => {\n      hasStopped = true;\n      if (animation.playState === \"idle\") return;\n      /**\r\n       * WAAPI doesn't natively have any interruption capabilities.\r\n       *\r\n       * Rather than read commited styles back out of the DOM, we can\r\n       * create a renderless JS animation and sample it twice to calculate\r\n       * its current value, \"previous\" value, and therefore allow\r\n       * Motion to calculate velocity for any subsequent animation.\r\n       */\n      const {\n        currentTime\n      } = animation;\n      if (currentTime) {\n        const sampleAnimation = animateValue({\n          ...options,\n          autoplay: false\n        });\n        value.setWithVelocity(sampleAnimation.sample(currentTime - sampleDelta).value, sampleAnimation.sample(currentTime).value, sampleDelta);\n      }\n      safeCancel();\n    },\n    complete: () => {\n      if (pendingCancel) return;\n      animation.finish();\n    },\n    cancel: safeCancel\n  };\n  return controls;\n}\nexport { createAcceleratedAnimation };","map":{"version":3,"names":["animateStyle","isWaapiSupportedEasing","getFinalKeyframe","animateValue","millisecondsToSeconds","secondsToMilliseconds","memo","noop","frame","cancelFrame","supportsWaapi","Object","hasOwnProperty","call","Element","prototype","acceleratedValues","Set","sampleDelta","maxDuration","requiresPregeneratedKeyframes","valueName","options","type","ease","createAcceleratedAnimation","value","_ref","onUpdate","onComplete","canAccelerateAnimation","has","repeatDelay","repeatType","damping","hasStopped","resolveFinishedPromise","currentFinishedPromise","pendingCancel","updateFinishedPromise","Promise","resolve","keyframes","duration","times","sampleAnimation","repeat","delay","state","done","pregeneratedKeyframes","t","sample","push","undefined","animation","owner","current","cancelAnimation","cancel","safeCancel","update","onfinish","set","controls","then","reject","attachTimeline","timeline","time","currentTime","newTime","speed","playbackRate","newSpeed","play","pause","stop","playState","autoplay","setWithVelocity","complete","finish"],"sources":["D:/Repos/NIKE-DJANGO/Jord/l4fycy/node_modules/framer-motion/dist/es/animation/animators/waapi/create-accelerated-animation.mjs"],"sourcesContent":["import { animateStyle } from './index.mjs';\r\nimport { isWaapiSupportedEasing } from './easing.mjs';\r\nimport { getFinalKeyframe } from './utils/get-final-keyframe.mjs';\r\nimport { animateValue } from '../js/index.mjs';\r\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../../utils/time-conversion.mjs';\r\nimport { memo } from '../../../utils/memo.mjs';\r\nimport { noop } from '../../../utils/noop.mjs';\r\nimport { frame, cancelFrame } from '../../../frameloop/frame.mjs';\r\n\r\nconst supportsWaapi = memo(() => Object.hasOwnProperty.call(Element.prototype, \"animate\"));\r\n/**\r\n * A list of values that can be hardware-accelerated.\r\n */\r\nconst acceleratedValues = new Set([\r\n    \"opacity\",\r\n    \"clipPath\",\r\n    \"filter\",\r\n    \"transform\",\r\n    \"backgroundColor\",\r\n]);\r\n/**\r\n * 10ms is chosen here as it strikes a balance between smooth\r\n * results (more than one keyframe per frame at 60fps) and\r\n * keyframe quantity.\r\n */\r\nconst sampleDelta = 10; //ms\r\n/**\r\n * Implement a practical max duration for keyframe generation\r\n * to prevent infinite loops\r\n */\r\nconst maxDuration = 20000;\r\nconst requiresPregeneratedKeyframes = (valueName, options) => options.type === \"spring\" ||\r\n    valueName === \"backgroundColor\" ||\r\n    !isWaapiSupportedEasing(options.ease);\r\nfunction createAcceleratedAnimation(value, valueName, { onUpdate, onComplete, ...options }) {\r\n    const canAccelerateAnimation = supportsWaapi() &&\r\n        acceleratedValues.has(valueName) &&\r\n        !options.repeatDelay &&\r\n        options.repeatType !== \"mirror\" &&\r\n        options.damping !== 0 &&\r\n        options.type !== \"inertia\";\r\n    if (!canAccelerateAnimation)\r\n        return false;\r\n    /**\r\n     * TODO: Unify with js/index\r\n     */\r\n    let hasStopped = false;\r\n    let resolveFinishedPromise;\r\n    let currentFinishedPromise;\r\n    /**\r\n     * Cancelling an animation will write to the DOM. For safety we want to defer\r\n     * this until the next `update` frame lifecycle. This flag tracks whether we\r\n     * have a pending cancel, if so we shouldn't allow animations to finish.\r\n     */\r\n    let pendingCancel = false;\r\n    /**\r\n     * Resolve the current Promise every time we enter the\r\n     * finished state. This is WAAPI-compatible behaviour.\r\n     */\r\n    const updateFinishedPromise = () => {\r\n        currentFinishedPromise = new Promise((resolve) => {\r\n            resolveFinishedPromise = resolve;\r\n        });\r\n    };\r\n    // Create the first finished promise\r\n    updateFinishedPromise();\r\n    let { keyframes, duration = 300, ease, times } = options;\r\n    /**\r\n     * If this animation needs pre-generated keyframes then generate.\r\n     */\r\n    if (requiresPregeneratedKeyframes(valueName, options)) {\r\n        const sampleAnimation = animateValue({\r\n            ...options,\r\n            repeat: 0,\r\n            delay: 0,\r\n        });\r\n        let state = { done: false, value: keyframes[0] };\r\n        const pregeneratedKeyframes = [];\r\n        /**\r\n         * Bail after 20 seconds of pre-generated keyframes as it's likely\r\n         * we're heading for an infinite loop.\r\n         */\r\n        let t = 0;\r\n        while (!state.done && t < maxDuration) {\r\n            state = sampleAnimation.sample(t);\r\n            pregeneratedKeyframes.push(state.value);\r\n            t += sampleDelta;\r\n        }\r\n        times = undefined;\r\n        keyframes = pregeneratedKeyframes;\r\n        duration = t - sampleDelta;\r\n        ease = \"linear\";\r\n    }\r\n    const animation = animateStyle(value.owner.current, valueName, keyframes, {\r\n        ...options,\r\n        duration,\r\n        /**\r\n         * This function is currently not called if ease is provided\r\n         * as a function so the cast is safe.\r\n         *\r\n         * However it would be possible for a future refinement to port\r\n         * in easing pregeneration from Motion One for browsers that\r\n         * support the upcoming `linear()` easing function.\r\n         */\r\n        ease: ease,\r\n        times,\r\n    });\r\n    const cancelAnimation = () => {\r\n        pendingCancel = false;\r\n        animation.cancel();\r\n    };\r\n    const safeCancel = () => {\r\n        pendingCancel = true;\r\n        frame.update(cancelAnimation);\r\n        resolveFinishedPromise();\r\n        updateFinishedPromise();\r\n    };\r\n    /**\r\n     * Prefer the `onfinish` prop as it's more widely supported than\r\n     * the `finished` promise.\r\n     *\r\n     * Here, we synchronously set the provided MotionValue to the end\r\n     * keyframe. If we didn't, when the WAAPI animation is finished it would\r\n     * be removed from the element which would then revert to its old styles.\r\n     */\r\n    animation.onfinish = () => {\r\n        if (pendingCancel)\r\n            return;\r\n        value.set(getFinalKeyframe(keyframes, options));\r\n        onComplete && onComplete();\r\n        safeCancel();\r\n    };\r\n    /**\r\n     * Animation interrupt callback.\r\n     */\r\n    const controls = {\r\n        then(resolve, reject) {\r\n            return currentFinishedPromise.then(resolve, reject);\r\n        },\r\n        attachTimeline(timeline) {\r\n            animation.timeline = timeline;\r\n            animation.onfinish = null;\r\n            return noop;\r\n        },\r\n        get time() {\r\n            return millisecondsToSeconds(animation.currentTime || 0);\r\n        },\r\n        set time(newTime) {\r\n            animation.currentTime = secondsToMilliseconds(newTime);\r\n        },\r\n        get speed() {\r\n            return animation.playbackRate;\r\n        },\r\n        set speed(newSpeed) {\r\n            animation.playbackRate = newSpeed;\r\n        },\r\n        get duration() {\r\n            return millisecondsToSeconds(duration);\r\n        },\r\n        play: () => {\r\n            if (hasStopped)\r\n                return;\r\n            animation.play();\r\n            /**\r\n             * Cancel any pending cancel tasks\r\n             */\r\n            cancelFrame(cancelAnimation);\r\n        },\r\n        pause: () => animation.pause(),\r\n        stop: () => {\r\n            hasStopped = true;\r\n            if (animation.playState === \"idle\")\r\n                return;\r\n            /**\r\n             * WAAPI doesn't natively have any interruption capabilities.\r\n             *\r\n             * Rather than read commited styles back out of the DOM, we can\r\n             * create a renderless JS animation and sample it twice to calculate\r\n             * its current value, \"previous\" value, and therefore allow\r\n             * Motion to calculate velocity for any subsequent animation.\r\n             */\r\n            const { currentTime } = animation;\r\n            if (currentTime) {\r\n                const sampleAnimation = animateValue({\r\n                    ...options,\r\n                    autoplay: false,\r\n                });\r\n                value.setWithVelocity(sampleAnimation.sample(currentTime - sampleDelta).value, sampleAnimation.sample(currentTime).value, sampleDelta);\r\n            }\r\n            safeCancel();\r\n        },\r\n        complete: () => {\r\n            if (pendingCancel)\r\n                return;\r\n            animation.finish();\r\n        },\r\n        cancel: safeCancel,\r\n    };\r\n    return controls;\r\n}\r\n\r\nexport { createAcceleratedAnimation };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}