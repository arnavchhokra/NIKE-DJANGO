{"ast":null,"code":"/**\r\n * Mirror Shader\r\n * Copies half the input to the other half\r\n *\r\n * side: side of input to mirror (0 = left, 1 = right, 2 = top, 3 = bottom)\r\n */\nvar MirrorShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    side: {\n      value: 1\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform sampler2D tDiffuse;', 'uniform int side;', 'varying vec2 vUv;', 'void main() {', '\tvec2 p = vUv;', '\tif (side == 0){', '\t\tif (p.x > 0.5) p.x = 1.0 - p.x;', '\t}else if (side == 1){', '\t\tif (p.x < 0.5) p.x = 1.0 - p.x;', '\t}else if (side == 2){', '\t\tif (p.y < 0.5) p.y = 1.0 - p.y;', '\t}else if (side == 3){', '\t\tif (p.y > 0.5) p.y = 1.0 - p.y;', '\t} ', '\tvec4 color = texture2D(tDiffuse, p);', '\tgl_FragColor = color;', '}'].join('\\n')\n};\nexport { MirrorShader };","map":{"version":3,"names":["MirrorShader","uniforms","tDiffuse","value","side","vertexShader","join","fragmentShader"],"sources":["D:/Github/NIKE-DJANGO/Jord/l4fycy/node_modules/three-stdlib/shaders/MirrorShader.js"],"sourcesContent":["/**\r\n * Mirror Shader\r\n * Copies half the input to the other half\r\n *\r\n * side: side of input to mirror (0 = left, 1 = right, 2 = top, 3 = bottom)\r\n */\r\nconst MirrorShader = {\r\n  uniforms: {\r\n    tDiffuse: {\r\n      value: null\r\n    },\r\n    side: {\r\n      value: 1\r\n    }\r\n  },\r\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\r\n  fragmentShader: ['uniform sampler2D tDiffuse;', 'uniform int side;', 'varying vec2 vUv;', 'void main() {', '\tvec2 p = vUv;', '\tif (side == 0){', '\t\tif (p.x > 0.5) p.x = 1.0 - p.x;', '\t}else if (side == 1){', '\t\tif (p.x < 0.5) p.x = 1.0 - p.x;', '\t}else if (side == 2){', '\t\tif (p.y < 0.5) p.y = 1.0 - p.y;', '\t}else if (side == 3){', '\t\tif (p.y > 0.5) p.y = 1.0 - p.y;', '\t} ', '\tvec4 color = texture2D(tDiffuse, p);', '\tgl_FragColor = color;', '}'].join('\\n')\r\n};\r\n\r\nexport { MirrorShader };\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMA,YAAY,GAAG;EACnBC,QAAQ,EAAE;IACRC,QAAQ,EAAE;MACRC,KAAK,EAAE;IADC,CADF;IAIRC,IAAI,EAAE;MACJD,KAAK,EAAE;IADH;EAJE,CADS;EASnBE,YAAY,EAAE,CAAC,mBAAD,EAAsB,eAAtB,EAAuC,YAAvC,EAAqD,4EAArD,EAAmI,GAAnI,EAAwIC,IAAxI,CAA6I,IAA7I,CATK;EAUnBC,cAAc,EAAE,CAAC,6BAAD,EAAgC,mBAAhC,EAAqD,mBAArD,EAA0E,eAA1E,EAA2F,gBAA3F,EAA6G,kBAA7G,EAAiI,mCAAjI,EAAsK,wBAAtK,EAAgM,mCAAhM,EAAqO,wBAArO,EAA+P,mCAA/P,EAAoS,wBAApS,EAA8T,mCAA9T,EAAmW,KAAnW,EAA0W,uCAA1W,EAAmZ,wBAAnZ,EAA6a,GAA7a,EAAkbD,IAAlb,CAAub,IAAvb;AAVG,CAArB;AAaA,SAASN,YAAT"},"metadata":{},"sourceType":"module"}