{"ast":null,"code":"import _get from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _classCallCheck from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { LineBasicMaterial, BufferAttribute, Box3, Group, MeshBasicMaterial, Object3D, BufferGeometry } from 'three';\nimport { arrayToBox } from '../utils/ArrayBoxUtilities.js';\nvar boundingBox = /* @__PURE__ */new Box3();\n\nvar MeshBVHRootVisualizer = /*#__PURE__*/function (_Object3D) {\n  _inherits(MeshBVHRootVisualizer, _Object3D);\n\n  var _super = _createSuper(MeshBVHRootVisualizer);\n\n  function MeshBVHRootVisualizer(mesh, material) {\n    var _this;\n\n    var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;\n    var group = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n    _classCallCheck(this, MeshBVHRootVisualizer);\n\n    _this = _super.call(this);\n    _this.material = material;\n    _this.geometry = new BufferGeometry();\n    _this.name = 'MeshBVHRootVisualizer';\n    _this.depth = depth;\n    _this.displayParents = false;\n    _this.mesh = mesh;\n    _this.displayEdges = true;\n    _this._group = group;\n    return _this;\n  }\n\n  _createClass(MeshBVHRootVisualizer, [{\n    key: \"isMesh\",\n    get: function get() {\n      return !this.displayEdges;\n    }\n  }, {\n    key: \"isLineSegments\",\n    get: function get() {\n      return this.displayEdges;\n    }\n  }, {\n    key: \"isLine\",\n    get: function get() {\n      return this.displayEdges;\n    }\n  }, {\n    key: \"raycast\",\n    value: function raycast() {}\n  }, {\n    key: \"update\",\n    value: function update() {\n      var geometry = this.geometry;\n      var boundsTree = this.mesh.geometry.boundsTree;\n      var group = this._group;\n      geometry.dispose();\n      this.visible = false;\n\n      if (boundsTree) {\n        // count the number of bounds required\n        var targetDepth = this.depth - 1;\n        var displayParents = this.displayParents;\n        var boundsCount = 0;\n        boundsTree.traverse(function (depth, isLeaf) {\n          if (depth === targetDepth || isLeaf) {\n            boundsCount++;\n            return true;\n          } else if (displayParents) {\n            boundsCount++;\n          }\n        }, group); // fill in the position buffer with the bounds corners\n\n        var posIndex = 0;\n        var positionArray = new Float32Array(8 * 3 * boundsCount);\n        boundsTree.traverse(function (depth, isLeaf, boundingData) {\n          var terminate = depth === targetDepth || isLeaf;\n\n          if (terminate || displayParents) {\n            arrayToBox(0, boundingData, boundingBox);\n            var min = boundingBox.min,\n                max = boundingBox.max;\n\n            for (var x = -1; x <= 1; x += 2) {\n              var xVal = x < 0 ? min.x : max.x;\n\n              for (var y = -1; y <= 1; y += 2) {\n                var yVal = y < 0 ? min.y : max.y;\n\n                for (var z = -1; z <= 1; z += 2) {\n                  var zVal = z < 0 ? min.z : max.z;\n                  positionArray[posIndex + 0] = xVal;\n                  positionArray[posIndex + 1] = yVal;\n                  positionArray[posIndex + 2] = zVal;\n                  posIndex += 3;\n                }\n              }\n            }\n\n            return terminate;\n          }\n        }, group);\n        var indexArray;\n        var indices;\n\n        if (this.displayEdges) {\n          // fill in the index buffer to point to the corner points\n          indices = new Uint8Array([// x axis\n          0, 4, 1, 5, 2, 6, 3, 7, // y axis\n          0, 2, 1, 3, 4, 6, 5, 7, // z axis\n          0, 1, 2, 3, 4, 5, 6, 7]);\n        } else {\n          indices = new Uint8Array([// X-, X+\n          0, 1, 2, 2, 1, 3, 4, 6, 5, 6, 7, 5, // Y-, Y+\n          1, 4, 5, 0, 4, 1, 2, 3, 6, 3, 7, 6, // Z-, Z+\n          0, 2, 4, 2, 6, 4, 1, 5, 3, 3, 5, 7]);\n        }\n\n        if (positionArray.length > 65535) {\n          indexArray = new Uint32Array(indices.length * boundsCount);\n        } else {\n          indexArray = new Uint16Array(indices.length * boundsCount);\n        }\n\n        var indexLength = indices.length;\n\n        for (var i = 0; i < boundsCount; i++) {\n          var posOffset = i * 8;\n          var indexOffset = i * indexLength;\n\n          for (var j = 0; j < indexLength; j++) {\n            indexArray[indexOffset + j] = posOffset + indices[j];\n          }\n        } // update the geometry\n\n\n        geometry.setIndex(new BufferAttribute(indexArray, 1, false));\n        geometry.setAttribute('position', new BufferAttribute(positionArray, 3, false));\n        this.visible = true;\n      }\n    }\n  }]);\n\n  return MeshBVHRootVisualizer;\n}(Object3D);\n\nvar MeshBVHVisualizer = /*#__PURE__*/function (_Group) {\n  _inherits(MeshBVHVisualizer, _Group);\n\n  var _super2 = _createSuper(MeshBVHVisualizer);\n\n  function MeshBVHVisualizer(mesh) {\n    var _this2;\n\n    var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n\n    _classCallCheck(this, MeshBVHVisualizer);\n\n    _this2 = _super2.call(this);\n    _this2.name = 'MeshBVHVisualizer';\n    _this2.depth = depth;\n    _this2.mesh = mesh;\n    _this2.displayParents = false;\n    _this2.displayEdges = true;\n    _this2._roots = [];\n    var edgeMaterial = new LineBasicMaterial({\n      color: 0x00FF88,\n      transparent: true,\n      opacity: 0.3,\n      depthWrite: false\n    });\n    var meshMaterial = new MeshBasicMaterial({\n      color: 0x00FF88,\n      transparent: true,\n      opacity: 0.3,\n      depthWrite: false\n    });\n    meshMaterial.color = edgeMaterial.color;\n    _this2.edgeMaterial = edgeMaterial;\n    _this2.meshMaterial = meshMaterial;\n\n    _this2.update();\n\n    return _this2;\n  }\n\n  _createClass(MeshBVHVisualizer, [{\n    key: \"color\",\n    get: function get() {\n      return this.edgeMaterial.color;\n    }\n  }, {\n    key: \"opacity\",\n    get: function get() {\n      return this.edgeMaterial.opacity;\n    },\n    set: function set(v) {\n      this.edgeMaterial.opacity = v;\n      this.meshMaterial.opacity = v;\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var bvh = this.mesh.geometry.boundsTree;\n      var totalRoots = bvh ? bvh._roots.length : 0;\n\n      while (this._roots.length > totalRoots) {\n        var root = this._roots.pop();\n\n        root.geometry.dispose();\n        this.remove(root);\n      }\n\n      for (var i = 0; i < totalRoots; i++) {\n        if (i >= this._roots.length) {\n          var _root2 = new MeshBVHRootVisualizer(this.mesh, this.edgeMaterial, this.depth, i);\n\n          this.add(_root2);\n\n          this._roots.push(_root2);\n        }\n\n        var _root = this._roots[i];\n        _root.depth = this.depth;\n        _root.mesh = this.mesh;\n        _root.displayParents = this.displayParents;\n        _root.displayEdges = this.displayEdges;\n        _root.material = this.displayEdges ? this.edgeMaterial : this.meshMaterial;\n\n        _root.update();\n      }\n    }\n  }, {\n    key: \"updateMatrixWorld\",\n    value: function updateMatrixWorld() {\n      var _get2;\n\n      this.position.copy(this.mesh.position);\n      this.rotation.copy(this.mesh.rotation);\n      this.scale.copy(this.mesh.scale);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      (_get2 = _get(_getPrototypeOf(MeshBVHVisualizer.prototype), \"updateMatrixWorld\", this)).call.apply(_get2, [this].concat(args));\n    }\n  }, {\n    key: \"copy\",\n    value: function copy(source) {\n      this.depth = source.depth;\n      this.mesh = source.mesh;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new MeshBVHVisualizer(this.mesh, this.depth);\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.edgeMaterial.dispose();\n      this.meshMaterial.dispose();\n      var children = this.children;\n\n      for (var i = 0, l = children.length; i < l; i++) {\n        children[i].geometry.dispose();\n      }\n    }\n  }]);\n\n  return MeshBVHVisualizer;\n}(Group);\n\nexport { MeshBVHVisualizer };","map":{"version":3,"names":["LineBasicMaterial","BufferAttribute","Box3","Group","MeshBasicMaterial","Object3D","BufferGeometry","arrayToBox","boundingBox","MeshBVHRootVisualizer","mesh","material","depth","group","geometry","name","displayParents","displayEdges","_group","boundsTree","dispose","visible","targetDepth","boundsCount","traverse","isLeaf","posIndex","positionArray","Float32Array","boundingData","terminate","min","max","x","xVal","y","yVal","z","zVal","indexArray","indices","Uint8Array","length","Uint32Array","Uint16Array","indexLength","i","posOffset","indexOffset","j","setIndex","setAttribute","MeshBVHVisualizer","_roots","edgeMaterial","color","transparent","opacity","depthWrite","meshMaterial","update","v","bvh","totalRoots","root","pop","remove","add","push","position","copy","rotation","scale","args","source","children","l"],"sources":["C:/Users/Arnav/Downloads/l4fycy/node_modules/three-mesh-bvh/src/objects/MeshBVHVisualizer.js"],"sourcesContent":["import { LineBasicMaterial, BufferAttribute, Box3, Group, MeshBasicMaterial, Object3D, BufferGeometry } from 'three';\r\nimport { arrayToBox } from '../utils/ArrayBoxUtilities.js';\r\n\r\nconst boundingBox = /* @__PURE__ */ new Box3();\r\nclass MeshBVHRootVisualizer extends Object3D {\r\n\r\n\tget isMesh() {\r\n\r\n\t\treturn ! this.displayEdges;\r\n\r\n\t}\r\n\r\n\tget isLineSegments() {\r\n\r\n\t\treturn this.displayEdges;\r\n\r\n\t}\r\n\r\n\tget isLine() {\r\n\r\n\t\treturn this.displayEdges;\r\n\r\n\t}\r\n\r\n\tconstructor( mesh, material, depth = 10, group = 0 ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.material = material;\r\n\t\tthis.geometry = new BufferGeometry();\r\n\t\tthis.name = 'MeshBVHRootVisualizer';\r\n\t\tthis.depth = depth;\r\n\t\tthis.displayParents = false;\r\n\t\tthis.mesh = mesh;\r\n\t\tthis.displayEdges = true;\r\n\t\tthis._group = group;\r\n\r\n\t}\r\n\r\n\traycast() {}\r\n\r\n\tupdate() {\r\n\r\n\t\tconst geometry = this.geometry;\r\n\t\tconst boundsTree = this.mesh.geometry.boundsTree;\r\n\t\tconst group = this._group;\r\n\t\tgeometry.dispose();\r\n\t\tthis.visible = false;\r\n\t\tif ( boundsTree ) {\r\n\r\n\t\t\t// count the number of bounds required\r\n\t\t\tconst targetDepth = this.depth - 1;\r\n\t\t\tconst displayParents = this.displayParents;\r\n\t\t\tlet boundsCount = 0;\r\n\t\t\tboundsTree.traverse( ( depth, isLeaf ) => {\r\n\r\n\t\t\t\tif ( depth === targetDepth || isLeaf ) {\r\n\r\n\t\t\t\t\tboundsCount ++;\r\n\t\t\t\t\treturn true;\r\n\r\n\t\t\t\t} else if ( displayParents ) {\r\n\r\n\t\t\t\t\tboundsCount ++;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}, group );\r\n\r\n\t\t\t// fill in the position buffer with the bounds corners\r\n\t\t\tlet posIndex = 0;\r\n\t\t\tconst positionArray = new Float32Array( 8 * 3 * boundsCount );\r\n\t\t\tboundsTree.traverse( ( depth, isLeaf, boundingData ) => {\r\n\r\n\t\t\t\tconst terminate = depth === targetDepth || isLeaf;\r\n\t\t\t\tif ( terminate || displayParents ) {\r\n\r\n\t\t\t\t\tarrayToBox( 0, boundingData, boundingBox );\r\n\r\n\t\t\t\t\tconst { min, max } = boundingBox;\r\n\t\t\t\t\tfor ( let x = - 1; x <= 1; x += 2 ) {\r\n\r\n\t\t\t\t\t\tconst xVal = x < 0 ? min.x : max.x;\r\n\t\t\t\t\t\tfor ( let y = - 1; y <= 1; y += 2 ) {\r\n\r\n\t\t\t\t\t\t\tconst yVal = y < 0 ? min.y : max.y;\r\n\t\t\t\t\t\t\tfor ( let z = - 1; z <= 1; z += 2 ) {\r\n\r\n\t\t\t\t\t\t\t\tconst zVal = z < 0 ? min.z : max.z;\r\n\t\t\t\t\t\t\t\tpositionArray[ posIndex + 0 ] = xVal;\r\n\t\t\t\t\t\t\t\tpositionArray[ posIndex + 1 ] = yVal;\r\n\t\t\t\t\t\t\t\tpositionArray[ posIndex + 2 ] = zVal;\r\n\r\n\t\t\t\t\t\t\t\tposIndex += 3;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn terminate;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}, group );\r\n\r\n\t\t\tlet indexArray;\r\n\t\t\tlet indices;\r\n\t\t\tif ( this.displayEdges ) {\r\n\r\n\t\t\t\t// fill in the index buffer to point to the corner points\r\n\t\t\t\tindices = new Uint8Array( [\r\n\t\t\t\t\t// x axis\r\n\t\t\t\t\t0, 4,\r\n\t\t\t\t\t1, 5,\r\n\t\t\t\t\t2, 6,\r\n\t\t\t\t\t3, 7,\r\n\r\n\t\t\t\t\t// y axis\r\n\t\t\t\t\t0, 2,\r\n\t\t\t\t\t1, 3,\r\n\t\t\t\t\t4, 6,\r\n\t\t\t\t\t5, 7,\r\n\r\n\t\t\t\t\t// z axis\r\n\t\t\t\t\t0, 1,\r\n\t\t\t\t\t2, 3,\r\n\t\t\t\t\t4, 5,\r\n\t\t\t\t\t6, 7,\r\n\t\t\t\t] );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tindices = new Uint8Array( [\r\n\r\n\t\t\t\t\t// X-, X+\r\n\t\t\t\t\t0, 1, 2,\r\n\t\t\t\t\t2, 1, 3,\r\n\r\n\t\t\t\t\t4, 6, 5,\r\n\t\t\t\t\t6, 7, 5,\r\n\r\n\t\t\t\t\t// Y-, Y+\r\n\t\t\t\t\t1, 4, 5,\r\n\t\t\t\t\t0, 4, 1,\r\n\r\n\t\t\t\t\t2, 3, 6,\r\n\t\t\t\t\t3, 7, 6,\r\n\r\n\t\t\t\t\t// Z-, Z+\r\n\t\t\t\t\t0, 2, 4,\r\n\t\t\t\t\t2, 6, 4,\r\n\r\n\t\t\t\t\t1, 5, 3,\r\n\t\t\t\t\t3, 5, 7,\r\n\r\n\t\t\t\t] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( positionArray.length > 65535 ) {\r\n\r\n\t\t\t\tindexArray = new Uint32Array( indices.length * boundsCount );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tindexArray = new Uint16Array( indices.length * boundsCount );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst indexLength = indices.length;\r\n\t\t\tfor ( let i = 0; i < boundsCount; i ++ ) {\r\n\r\n\t\t\t\tconst posOffset = i * 8;\r\n\t\t\t\tconst indexOffset = i * indexLength;\r\n\t\t\t\tfor ( let j = 0; j < indexLength; j ++ ) {\r\n\r\n\t\t\t\t\tindexArray[ indexOffset + j ] = posOffset + indices[ j ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// update the geometry\r\n\t\t\tgeometry.setIndex(\r\n\t\t\t\tnew BufferAttribute( indexArray, 1, false ),\r\n\t\t\t);\r\n\t\t\tgeometry.setAttribute(\r\n\t\t\t\t'position',\r\n\t\t\t\tnew BufferAttribute( positionArray, 3, false ),\r\n\t\t\t);\r\n\t\t\tthis.visible = true;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass MeshBVHVisualizer extends Group {\r\n\r\n\tget color() {\r\n\r\n\t\treturn this.edgeMaterial.color;\r\n\r\n\t}\r\n\r\n\tget opacity() {\r\n\r\n\t\treturn this.edgeMaterial.opacity;\r\n\r\n\t}\r\n\r\n\tset opacity( v ) {\r\n\r\n\t\tthis.edgeMaterial.opacity = v;\r\n\t\tthis.meshMaterial.opacity = v;\r\n\r\n\t}\r\n\r\n\tconstructor( mesh, depth = 10 ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.name = 'MeshBVHVisualizer';\r\n\t\tthis.depth = depth;\r\n\t\tthis.mesh = mesh;\r\n\t\tthis.displayParents = false;\r\n\t\tthis.displayEdges = true;\r\n\t\tthis._roots = [];\r\n\r\n\t\tconst edgeMaterial = new LineBasicMaterial( {\r\n\t\t\tcolor: 0x00FF88,\r\n\t\t\ttransparent: true,\r\n\t\t\topacity: 0.3,\r\n\t\t\tdepthWrite: false,\r\n\t\t} );\r\n\r\n\t\tconst meshMaterial = new MeshBasicMaterial( {\r\n\t\t\tcolor: 0x00FF88,\r\n\t\t\ttransparent: true,\r\n\t\t\topacity: 0.3,\r\n\t\t\tdepthWrite: false,\r\n\t\t} );\r\n\r\n\t\tmeshMaterial.color = edgeMaterial.color;\r\n\r\n\t\tthis.edgeMaterial = edgeMaterial;\r\n\t\tthis.meshMaterial = meshMaterial;\r\n\r\n\t\tthis.update();\r\n\r\n\t}\r\n\r\n\tupdate() {\r\n\r\n\t\tconst bvh = this.mesh.geometry.boundsTree;\r\n\t\tconst totalRoots = bvh ? bvh._roots.length : 0;\r\n\t\twhile ( this._roots.length > totalRoots ) {\r\n\r\n\t\t\tconst root = this._roots.pop();\r\n\t\t\troot.geometry.dispose();\r\n\t\t\tthis.remove( root );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( let i = 0; i < totalRoots; i ++ ) {\r\n\r\n\t\t\tif ( i >= this._roots.length ) {\r\n\r\n\t\t\t\tconst root = new MeshBVHRootVisualizer( this.mesh, this.edgeMaterial, this.depth, i );\r\n\t\t\t\tthis.add( root );\r\n\t\t\t\tthis._roots.push( root );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst root = this._roots[ i ];\r\n\t\t\troot.depth = this.depth;\r\n\t\t\troot.mesh = this.mesh;\r\n\t\t\troot.displayParents = this.displayParents;\r\n\t\t\troot.displayEdges = this.displayEdges;\r\n\t\t\troot.material = this.displayEdges ? this.edgeMaterial : this.meshMaterial;\r\n\t\t\troot.update();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tupdateMatrixWorld( ...args ) {\r\n\r\n\t\tthis.position.copy( this.mesh.position );\r\n\t\tthis.rotation.copy( this.mesh.rotation );\r\n\t\tthis.scale.copy( this.mesh.scale );\r\n\r\n\t\tsuper.updateMatrixWorld( ...args );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tthis.depth = source.depth;\r\n\t\tthis.mesh = source.mesh;\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new MeshBVHVisualizer( this.mesh, this.depth );\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tthis.edgeMaterial.dispose();\r\n\t\tthis.meshMaterial.dispose();\r\n\r\n\t\tconst children = this.children;\r\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\tchildren[ i ].geometry.dispose();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { MeshBVHVisualizer };\r\n"],"mappings":";;;;;;AAAA,SAASA,iBAAT,EAA4BC,eAA5B,EAA6CC,IAA7C,EAAmDC,KAAnD,EAA0DC,iBAA1D,EAA6EC,QAA7E,EAAuFC,cAAvF,QAA6G,OAA7G;AACA,SAASC,UAAT,QAA2B,+BAA3B;AAEA,IAAMC,WAAW,GAAG,eAAgB,IAAIN,IAAJ,EAApC;;IACMO,qB;;;;;EAoBL,+BAAaC,IAAb,EAAmBC,QAAnB,EAAqD;IAAA;;IAAA,IAAxBC,KAAwB,uEAAhB,EAAgB;IAAA,IAAZC,KAAY,uEAAJ,CAAI;;IAAA;;IAEpD;IAEA,MAAKF,QAAL,GAAgBA,QAAhB;IACA,MAAKG,QAAL,GAAgB,IAAIR,cAAJ,EAAhB;IACA,MAAKS,IAAL,GAAY,uBAAZ;IACA,MAAKH,KAAL,GAAaA,KAAb;IACA,MAAKI,cAAL,GAAsB,KAAtB;IACA,MAAKN,IAAL,GAAYA,IAAZ;IACA,MAAKO,YAAL,GAAoB,IAApB;IACA,MAAKC,MAAL,GAAcL,KAAd;IAXoD;EAapD;;;;SA/BD,eAAa;MAEZ,OAAO,CAAE,KAAKI,YAAd;IAEA;;;SAED,eAAqB;MAEpB,OAAO,KAAKA,YAAZ;IAEA;;;SAED,eAAa;MAEZ,OAAO,KAAKA,YAAZ;IAEA;;;WAiBD,mBAAU,CAAE;;;WAEZ,kBAAS;MAER,IAAMH,QAAQ,GAAG,KAAKA,QAAtB;MACA,IAAMK,UAAU,GAAG,KAAKT,IAAL,CAAUI,QAAV,CAAmBK,UAAtC;MACA,IAAMN,KAAK,GAAG,KAAKK,MAAnB;MACAJ,QAAQ,CAACM,OAAT;MACA,KAAKC,OAAL,GAAe,KAAf;;MACA,IAAKF,UAAL,EAAkB;QAEjB;QACA,IAAMG,WAAW,GAAG,KAAKV,KAAL,GAAa,CAAjC;QACA,IAAMI,cAAc,GAAG,KAAKA,cAA5B;QACA,IAAIO,WAAW,GAAG,CAAlB;QACAJ,UAAU,CAACK,QAAX,CAAqB,UAAEZ,KAAF,EAASa,MAAT,EAAqB;UAEzC,IAAKb,KAAK,KAAKU,WAAV,IAAyBG,MAA9B,EAAuC;YAEtCF,WAAW;YACX,OAAO,IAAP;UAEA,CALD,MAKO,IAAKP,cAAL,EAAsB;YAE5BO,WAAW;UAEX;QAED,CAbD,EAaGV,KAbH,EANiB,CAqBjB;;QACA,IAAIa,QAAQ,GAAG,CAAf;QACA,IAAMC,aAAa,GAAG,IAAIC,YAAJ,CAAkB,IAAI,CAAJ,GAAQL,WAA1B,CAAtB;QACAJ,UAAU,CAACK,QAAX,CAAqB,UAAEZ,KAAF,EAASa,MAAT,EAAiBI,YAAjB,EAAmC;UAEvD,IAAMC,SAAS,GAAGlB,KAAK,KAAKU,WAAV,IAAyBG,MAA3C;;UACA,IAAKK,SAAS,IAAId,cAAlB,EAAmC;YAElCT,UAAU,CAAE,CAAF,EAAKsB,YAAL,EAAmBrB,WAAnB,CAAV;YAEA,IAAQuB,GAAR,GAAqBvB,WAArB,CAAQuB,GAAR;YAAA,IAAaC,GAAb,GAAqBxB,WAArB,CAAawB,GAAb;;YACA,KAAM,IAAIC,CAAC,GAAG,CAAE,CAAhB,EAAmBA,CAAC,IAAI,CAAxB,EAA2BA,CAAC,IAAI,CAAhC,EAAoC;cAEnC,IAAMC,IAAI,GAAGD,CAAC,GAAG,CAAJ,GAAQF,GAAG,CAACE,CAAZ,GAAgBD,GAAG,CAACC,CAAjC;;cACA,KAAM,IAAIE,CAAC,GAAG,CAAE,CAAhB,EAAmBA,CAAC,IAAI,CAAxB,EAA2BA,CAAC,IAAI,CAAhC,EAAoC;gBAEnC,IAAMC,IAAI,GAAGD,CAAC,GAAG,CAAJ,GAAQJ,GAAG,CAACI,CAAZ,GAAgBH,GAAG,CAACG,CAAjC;;gBACA,KAAM,IAAIE,CAAC,GAAG,CAAE,CAAhB,EAAmBA,CAAC,IAAI,CAAxB,EAA2BA,CAAC,IAAI,CAAhC,EAAoC;kBAEnC,IAAMC,IAAI,GAAGD,CAAC,GAAG,CAAJ,GAAQN,GAAG,CAACM,CAAZ,GAAgBL,GAAG,CAACK,CAAjC;kBACAV,aAAa,CAAED,QAAQ,GAAG,CAAb,CAAb,GAAgCQ,IAAhC;kBACAP,aAAa,CAAED,QAAQ,GAAG,CAAb,CAAb,GAAgCU,IAAhC;kBACAT,aAAa,CAAED,QAAQ,GAAG,CAAb,CAAb,GAAgCY,IAAhC;kBAEAZ,QAAQ,IAAI,CAAZ;gBAEA;cAED;YAED;;YAED,OAAOI,SAAP;UAEA;QAED,CAjCD,EAiCGjB,KAjCH;QAmCA,IAAI0B,UAAJ;QACA,IAAIC,OAAJ;;QACA,IAAK,KAAKvB,YAAV,EAAyB;UAExB;UACAuB,OAAO,GAAG,IAAIC,UAAJ,CAAgB,CACzB;UACA,CAFyB,EAEtB,CAFsB,EAGzB,CAHyB,EAGtB,CAHsB,EAIzB,CAJyB,EAItB,CAJsB,EAKzB,CALyB,EAKtB,CALsB,EAOzB;UACA,CARyB,EAQtB,CARsB,EASzB,CATyB,EAStB,CATsB,EAUzB,CAVyB,EAUtB,CAVsB,EAWzB,CAXyB,EAWtB,CAXsB,EAazB;UACA,CAdyB,EActB,CAdsB,EAezB,CAfyB,EAetB,CAfsB,EAgBzB,CAhByB,EAgBtB,CAhBsB,EAiBzB,CAjByB,EAiBtB,CAjBsB,CAAhB,CAAV;QAoBA,CAvBD,MAuBO;UAEND,OAAO,GAAG,IAAIC,UAAJ,CAAgB,CAEzB;UACA,CAHyB,EAGtB,CAHsB,EAGnB,CAHmB,EAIzB,CAJyB,EAItB,CAJsB,EAInB,CAJmB,EAMzB,CANyB,EAMtB,CANsB,EAMnB,CANmB,EAOzB,CAPyB,EAOtB,CAPsB,EAOnB,CAPmB,EASzB;UACA,CAVyB,EAUtB,CAVsB,EAUnB,CAVmB,EAWzB,CAXyB,EAWtB,CAXsB,EAWnB,CAXmB,EAazB,CAbyB,EAatB,CAbsB,EAanB,CAbmB,EAczB,CAdyB,EActB,CAdsB,EAcnB,CAdmB,EAgBzB;UACA,CAjByB,EAiBtB,CAjBsB,EAiBnB,CAjBmB,EAkBzB,CAlByB,EAkBtB,CAlBsB,EAkBnB,CAlBmB,EAoBzB,CApByB,EAoBtB,CApBsB,EAoBnB,CApBmB,EAqBzB,CArByB,EAqBtB,CArBsB,EAqBnB,CArBmB,CAAhB,CAAV;QAyBA;;QAED,IAAKd,aAAa,CAACe,MAAd,GAAuB,KAA5B,EAAoC;UAEnCH,UAAU,GAAG,IAAII,WAAJ,CAAiBH,OAAO,CAACE,MAAR,GAAiBnB,WAAlC,CAAb;QAEA,CAJD,MAIO;UAENgB,UAAU,GAAG,IAAIK,WAAJ,CAAiBJ,OAAO,CAACE,MAAR,GAAiBnB,WAAlC,CAAb;QAEA;;QAED,IAAMsB,WAAW,GAAGL,OAAO,CAACE,MAA5B;;QACA,KAAM,IAAII,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAGvB,WAArB,EAAkCuB,CAAC,EAAnC,EAAyC;UAExC,IAAMC,SAAS,GAAGD,CAAC,GAAG,CAAtB;UACA,IAAME,WAAW,GAAGF,CAAC,GAAGD,WAAxB;;UACA,KAAM,IAAII,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAGJ,WAArB,EAAkCI,CAAC,EAAnC,EAAyC;YAExCV,UAAU,CAAES,WAAW,GAAGC,CAAhB,CAAV,GAAgCF,SAAS,GAAGP,OAAO,CAAES,CAAF,CAAnD;UAEA;QAED,CAtIgB,CAwIjB;;;QACAnC,QAAQ,CAACoC,QAAT,CACC,IAAIjD,eAAJ,CAAqBsC,UAArB,EAAiC,CAAjC,EAAoC,KAApC,CADD;QAGAzB,QAAQ,CAACqC,YAAT,CACC,UADD,EAEC,IAAIlD,eAAJ,CAAqB0B,aAArB,EAAoC,CAApC,EAAuC,KAAvC,CAFD;QAIA,KAAKN,OAAL,GAAe,IAAf;MAEA;IAED;;;;EAhMkChB,Q;;IAoM9B+C,iB;;;;;EAqBL,2BAAa1C,IAAb,EAAgC;IAAA;;IAAA,IAAbE,KAAa,uEAAL,EAAK;;IAAA;;IAE/B;IAEA,OAAKG,IAAL,GAAY,mBAAZ;IACA,OAAKH,KAAL,GAAaA,KAAb;IACA,OAAKF,IAAL,GAAYA,IAAZ;IACA,OAAKM,cAAL,GAAsB,KAAtB;IACA,OAAKC,YAAL,GAAoB,IAApB;IACA,OAAKoC,MAAL,GAAc,EAAd;IAEA,IAAMC,YAAY,GAAG,IAAItD,iBAAJ,CAAuB;MAC3CuD,KAAK,EAAE,QADoC;MAE3CC,WAAW,EAAE,IAF8B;MAG3CC,OAAO,EAAE,GAHkC;MAI3CC,UAAU,EAAE;IAJ+B,CAAvB,CAArB;IAOA,IAAMC,YAAY,GAAG,IAAIvD,iBAAJ,CAAuB;MAC3CmD,KAAK,EAAE,QADoC;MAE3CC,WAAW,EAAE,IAF8B;MAG3CC,OAAO,EAAE,GAHkC;MAI3CC,UAAU,EAAE;IAJ+B,CAAvB,CAArB;IAOAC,YAAY,CAACJ,KAAb,GAAqBD,YAAY,CAACC,KAAlC;IAEA,OAAKD,YAAL,GAAoBA,YAApB;IACA,OAAKK,YAAL,GAAoBA,YAApB;;IAEA,OAAKC,MAAL;;IA9B+B;EAgC/B;;;;SAnDD,eAAY;MAEX,OAAO,KAAKN,YAAL,CAAkBC,KAAzB;IAEA;;;SAED,eAAc;MAEb,OAAO,KAAKD,YAAL,CAAkBG,OAAzB;IAEA,C;SAED,aAAaI,CAAb,EAAiB;MAEhB,KAAKP,YAAL,CAAkBG,OAAlB,GAA4BI,CAA5B;MACA,KAAKF,YAAL,CAAkBF,OAAlB,GAA4BI,CAA5B;IAEA;;;WAoCD,kBAAS;MAER,IAAMC,GAAG,GAAG,KAAKpD,IAAL,CAAUI,QAAV,CAAmBK,UAA/B;MACA,IAAM4C,UAAU,GAAGD,GAAG,GAAGA,GAAG,CAACT,MAAJ,CAAWX,MAAd,GAAuB,CAA7C;;MACA,OAAQ,KAAKW,MAAL,CAAYX,MAAZ,GAAqBqB,UAA7B,EAA0C;QAEzC,IAAMC,IAAI,GAAG,KAAKX,MAAL,CAAYY,GAAZ,EAAb;;QACAD,IAAI,CAAClD,QAAL,CAAcM,OAAd;QACA,KAAK8C,MAAL,CAAaF,IAAb;MAEA;;MAED,KAAM,IAAIlB,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAGiB,UAArB,EAAiCjB,CAAC,EAAlC,EAAwC;QAEvC,IAAKA,CAAC,IAAI,KAAKO,MAAL,CAAYX,MAAtB,EAA+B;UAE9B,IAAMsB,MAAI,GAAG,IAAIvD,qBAAJ,CAA2B,KAAKC,IAAhC,EAAsC,KAAK4C,YAA3C,EAAyD,KAAK1C,KAA9D,EAAqEkC,CAArE,CAAb;;UACA,KAAKqB,GAAL,CAAUH,MAAV;;UACA,KAAKX,MAAL,CAAYe,IAAZ,CAAkBJ,MAAlB;QAEA;;QAED,IAAMA,KAAI,GAAG,KAAKX,MAAL,CAAaP,CAAb,CAAb;QACAkB,KAAI,CAACpD,KAAL,GAAa,KAAKA,KAAlB;QACAoD,KAAI,CAACtD,IAAL,GAAY,KAAKA,IAAjB;QACAsD,KAAI,CAAChD,cAAL,GAAsB,KAAKA,cAA3B;QACAgD,KAAI,CAAC/C,YAAL,GAAoB,KAAKA,YAAzB;QACA+C,KAAI,CAACrD,QAAL,GAAgB,KAAKM,YAAL,GAAoB,KAAKqC,YAAzB,GAAwC,KAAKK,YAA7D;;QACAK,KAAI,CAACJ,MAAL;MAEA;IAED;;;WAED,6BAA6B;MAAA;;MAE5B,KAAKS,QAAL,CAAcC,IAAd,CAAoB,KAAK5D,IAAL,CAAU2D,QAA9B;MACA,KAAKE,QAAL,CAAcD,IAAd,CAAoB,KAAK5D,IAAL,CAAU6D,QAA9B;MACA,KAAKC,KAAL,CAAWF,IAAX,CAAiB,KAAK5D,IAAL,CAAU8D,KAA3B;;MAJ4B,kCAAPC,IAAO;QAAPA,IAAO;MAAA;;MAM5B,wHAA4BA,IAA5B;IAEA;;;WAED,cAAMC,MAAN,EAAe;MAEd,KAAK9D,KAAL,GAAa8D,MAAM,CAAC9D,KAApB;MACA,KAAKF,IAAL,GAAYgE,MAAM,CAAChE,IAAnB;IAEA;;;WAED,iBAAQ;MAEP,OAAO,IAAI0C,iBAAJ,CAAuB,KAAK1C,IAA5B,EAAkC,KAAKE,KAAvC,CAAP;IAEA;;;WAED,mBAAU;MAET,KAAK0C,YAAL,CAAkBlC,OAAlB;MACA,KAAKuC,YAAL,CAAkBvC,OAAlB;MAEA,IAAMuD,QAAQ,GAAG,KAAKA,QAAtB;;MACA,KAAM,IAAI7B,CAAC,GAAG,CAAR,EAAW8B,CAAC,GAAGD,QAAQ,CAACjC,MAA9B,EAAsCI,CAAC,GAAG8B,CAA1C,EAA6C9B,CAAC,EAA9C,EAAoD;QAEnD6B,QAAQ,CAAE7B,CAAF,CAAR,CAAchC,QAAd,CAAuBM,OAAvB;MAEA;IAED;;;;EA5H8BjB,K;;AAiIhC,SAASiD,iBAAT"},"metadata":{},"sourceType":"module"}