{"ast":null,"code":"import { Vector3, LineSegments, BufferGeometry, Float32BufferAttribute, LineBasicMaterial } from \"three\";\nconst _v1 = new Vector3();\nconst _v2 = new Vector3();\nclass VertexTangentsHelper extends LineSegments {\n  constructor(object) {\n    let size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 65535;\n    const geometry = new BufferGeometry();\n    const nTangents = object.geometry.attributes.tangent.count;\n    const positions = new Float32BufferAttribute(nTangents * 2 * 3, 3);\n    geometry.setAttribute(\"position\", positions);\n    super(geometry, new LineBasicMaterial({\n      color,\n      toneMapped: false\n    }));\n    this.object = object;\n    this.size = size;\n    this.type = \"VertexTangentsHelper\";\n    this.matrixAutoUpdate = false;\n    this.update();\n  }\n  update() {\n    this.object.updateMatrixWorld(true);\n    const matrixWorld = this.object.matrixWorld;\n    const position = this.geometry.attributes.position;\n    const objGeometry = this.object.geometry;\n    const objPos = objGeometry.attributes.position;\n    const objTan = objGeometry.attributes.tangent;\n    let idx = 0;\n    for (let j = 0, jl = objPos.count; j < jl; j++) {\n      _v1.fromBufferAttribute(objPos, j).applyMatrix4(matrixWorld);\n      _v2.fromBufferAttribute(objTan, j);\n      _v2.transformDirection(matrixWorld).multiplyScalar(this.size).add(_v1);\n      position.setXYZ(idx, _v1.x, _v1.y, _v1.z);\n      idx = idx + 1;\n      position.setXYZ(idx, _v2.x, _v2.y, _v2.z);\n      idx = idx + 1;\n    }\n    position.needsUpdate = true;\n  }\n  dispose() {\n    this.geometry.dispose();\n    this.material.dispose();\n  }\n}\nexport { VertexTangentsHelper };","map":{"version":3,"names":["_v1","Vector3","_v2","VertexTangentsHelper","LineSegments","constructor","object","size","arguments","length","undefined","color","geometry","BufferGeometry","nTangents","attributes","tangent","count","positions","Float32BufferAttribute","setAttribute","LineBasicMaterial","toneMapped","type","matrixAutoUpdate","update","updateMatrixWorld","matrixWorld","position","objGeometry","objPos","objTan","idx","j","jl","fromBufferAttribute","applyMatrix4","transformDirection","multiplyScalar","add","setXYZ","x","y","z","needsUpdate","dispose","material"],"sources":["D:\\Github\\NIKE-DJANGO\\Jord\\l4fycy\\node_modules\\src\\helpers\\VertexTangentsHelper.js"],"sourcesContent":["import { BufferGeometry, Float32BufferAttribute, LineSegments, LineBasicMaterial, Vector3 } from 'three'\n\nconst _v1 = new Vector3()\nconst _v2 = new Vector3()\n\nclass VertexTangentsHelper extends LineSegments {\n  constructor(object, size = 1, color = 0x00ffff) {\n    const geometry = new BufferGeometry()\n\n    const nTangents = object.geometry.attributes.tangent.count\n    const positions = new Float32BufferAttribute(nTangents * 2 * 3, 3)\n\n    geometry.setAttribute('position', positions)\n\n    super(geometry, new LineBasicMaterial({ color, toneMapped: false }))\n\n    this.object = object\n    this.size = size\n    this.type = 'VertexTangentsHelper'\n\n    //\n\n    this.matrixAutoUpdate = false\n\n    this.update()\n  }\n\n  update() {\n    this.object.updateMatrixWorld(true)\n\n    const matrixWorld = this.object.matrixWorld\n\n    const position = this.geometry.attributes.position\n\n    //\n\n    const objGeometry = this.object.geometry\n\n    const objPos = objGeometry.attributes.position\n\n    const objTan = objGeometry.attributes.tangent\n\n    let idx = 0\n\n    // for simplicity, ignore index and drawcalls, and render every tangent\n\n    for (let j = 0, jl = objPos.count; j < jl; j++) {\n      _v1.fromBufferAttribute(objPos, j).applyMatrix4(matrixWorld)\n\n      _v2.fromBufferAttribute(objTan, j)\n\n      _v2.transformDirection(matrixWorld).multiplyScalar(this.size).add(_v1)\n\n      position.setXYZ(idx, _v1.x, _v1.y, _v1.z)\n\n      idx = idx + 1\n\n      position.setXYZ(idx, _v2.x, _v2.y, _v2.z)\n\n      idx = idx + 1\n    }\n\n    position.needsUpdate = true\n  }\n\n  dispose() {\n    this.geometry.dispose()\n    this.material.dispose()\n  }\n}\n\nexport { VertexTangentsHelper }\n"],"mappings":";AAEA,MAAMA,GAAA,GAAM,IAAIC,OAAA,CAAS;AACzB,MAAMC,GAAA,GAAM,IAAID,OAAA,CAAS;AAEzB,MAAME,oBAAA,SAA6BC,YAAA,CAAa;EAC9CC,YAAYC,MAAA,EAAoC;IAAA,IAA5BC,IAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAO;IAAA,IAAGG,KAAA,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAQ;IACpC,MAAMI,QAAA,GAAW,IAAIC,cAAA,CAAgB;IAErC,MAAMC,SAAA,GAAYR,MAAA,CAAOM,QAAA,CAASG,UAAA,CAAWC,OAAA,CAAQC,KAAA;IACrD,MAAMC,SAAA,GAAY,IAAIC,sBAAA,CAAuBL,SAAA,GAAY,IAAI,GAAG,CAAC;IAEjEF,QAAA,CAASQ,YAAA,CAAa,YAAYF,SAAS;IAE3C,MAAMN,QAAA,EAAU,IAAIS,iBAAA,CAAkB;MAAEV,KAAA;MAAOW,UAAA,EAAY;IAAK,CAAE,CAAC;IAEnE,KAAKhB,MAAA,GAASA,MAAA;IACd,KAAKC,IAAA,GAAOA,IAAA;IACZ,KAAKgB,IAAA,GAAO;IAIZ,KAAKC,gBAAA,GAAmB;IAExB,KAAKC,MAAA,CAAQ;EACd;EAEDA,OAAA,EAAS;IACP,KAAKnB,MAAA,CAAOoB,iBAAA,CAAkB,IAAI;IAElC,MAAMC,WAAA,GAAc,KAAKrB,MAAA,CAAOqB,WAAA;IAEhC,MAAMC,QAAA,GAAW,KAAKhB,QAAA,CAASG,UAAA,CAAWa,QAAA;IAI1C,MAAMC,WAAA,GAAc,KAAKvB,MAAA,CAAOM,QAAA;IAEhC,MAAMkB,MAAA,GAASD,WAAA,CAAYd,UAAA,CAAWa,QAAA;IAEtC,MAAMG,MAAA,GAASF,WAAA,CAAYd,UAAA,CAAWC,OAAA;IAEtC,IAAIgB,GAAA,GAAM;IAIV,SAASC,CAAA,GAAI,GAAGC,EAAA,GAAKJ,MAAA,CAAOb,KAAA,EAAOgB,CAAA,GAAIC,EAAA,EAAID,CAAA,IAAK;MAC9CjC,GAAA,CAAImC,mBAAA,CAAoBL,MAAA,EAAQG,CAAC,EAAEG,YAAA,CAAaT,WAAW;MAE3DzB,GAAA,CAAIiC,mBAAA,CAAoBJ,MAAA,EAAQE,CAAC;MAEjC/B,GAAA,CAAImC,kBAAA,CAAmBV,WAAW,EAAEW,cAAA,CAAe,KAAK/B,IAAI,EAAEgC,GAAA,CAAIvC,GAAG;MAErE4B,QAAA,CAASY,MAAA,CAAOR,GAAA,EAAKhC,GAAA,CAAIyC,CAAA,EAAGzC,GAAA,CAAI0C,CAAA,EAAG1C,GAAA,CAAI2C,CAAC;MAExCX,GAAA,GAAMA,GAAA,GAAM;MAEZJ,QAAA,CAASY,MAAA,CAAOR,GAAA,EAAK9B,GAAA,CAAIuC,CAAA,EAAGvC,GAAA,CAAIwC,CAAA,EAAGxC,GAAA,CAAIyC,CAAC;MAExCX,GAAA,GAAMA,GAAA,GAAM;IACb;IAEDJ,QAAA,CAASgB,WAAA,GAAc;EACxB;EAEDC,QAAA,EAAU;IACR,KAAKjC,QAAA,CAASiC,OAAA,CAAS;IACvB,KAAKC,QAAA,CAASD,OAAA,CAAS;EACxB;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}