{"ast":null,"code":"'use client';\n\n// src/textarea.tsx\nimport { useFormControl } from \"@chakra-ui/form-control\";\nimport { chakra, forwardRef, omitThemingProps, useStyleConfig } from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\n\n// ../../utilities/object-utils/src/omit.ts\nfunction omit(object) {\n  let keysToOmit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  const clone = Object.assign({}, object);\n  for (const key of keysToOmit) {\n    if (key in clone) {\n      delete clone[key];\n    }\n  }\n  return clone;\n}\n\n// src/textarea.tsx\nimport { jsx } from \"react/jsx-runtime\";\nvar omitted = [\"h\", \"minH\", \"height\", \"minHeight\"];\nvar Textarea = forwardRef((props, ref) => {\n  const styles = useStyleConfig(\"Textarea\", props);\n  const {\n    className,\n    rows,\n    ...rest\n  } = omitThemingProps(props);\n  const textareaProps = useFormControl(rest);\n  const textareaStyles = rows ? omit(styles, omitted) : styles;\n  return /* @__PURE__ */jsx(chakra.textarea, {\n    ref,\n    rows,\n    ...textareaProps,\n    className: cx(\"chakra-textarea\", className),\n    __css: textareaStyles\n  });\n});\nTextarea.displayName = \"Textarea\";\nexport { Textarea };","map":{"version":3,"names":["useFormControl","chakra","forwardRef","omitThemingProps","useStyleConfig","cx","omit","object","keysToOmit","arguments","length","undefined","clone","Object","assign","key","jsx","omitted","Textarea","props","ref","styles","className","rows","rest","textareaProps","textareaStyles","textarea","__css","displayName"],"sources":["D:\\Repos\\NIKE-DJANGO\\Jord\\l4fycy\\node_modules\\@chakra-ui\\textarea\\src\\textarea.tsx","D:\\Repos\\NIKE-DJANGO\\Jord\\l4fycy\\node_modules\\utilities\\object-utils\\src\\omit.ts"],"sourcesContent":["import { FormControlOptions, useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { omit } from \"@chakra-ui/object-utils\"\n\ninterface TextareaOptions {\n  /**\n   * The border color when the textarea is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the textarea is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n}\n\ntype Omitted = \"disabled\" | \"required\" | \"readOnly\"\n\nconst omitted = [\"h\", \"minH\", \"height\", \"minHeight\"]\n\nexport interface TextareaProps\n  extends Omit<HTMLChakraProps<\"textarea\">, Omitted>,\n    TextareaOptions,\n    FormControlOptions,\n    ThemingProps<\"Textarea\"> {}\n\n/**\n * Textarea is used to enter an amount of text that's longer than a single line\n * @see Docs https://chakra-ui.com/textarea\n */\nexport const Textarea = forwardRef<TextareaProps, \"textarea\">((props, ref) => {\n  const styles = useStyleConfig(\"Textarea\", props)\n  const { className, rows, ...rest } = omitThemingProps(props)\n\n  const textareaProps = useFormControl<HTMLTextAreaElement>(rest)\n\n  //@ts-ignore\n  const textareaStyles = rows ? omit(styles, omitted) : styles\n\n  return (\n    <chakra.textarea\n      ref={ref}\n      rows={rows}\n      {...textareaProps}\n      className={cx(\"chakra-textarea\", className)}\n      __css={textareaStyles}\n    />\n  )\n})\n\nTextarea.displayName = \"Textarea\"\n","export function omit<T extends Record<string, any>, K extends keyof T>(\n  object: T,\n  keysToOmit: K[] = [],\n) {\n  const clone: Record<string, unknown> = Object.assign({}, object)\n  for (const key of keysToOmit) {\n    if (key in clone) {\n      delete clone[key as string]\n    }\n  }\n  return clone as Omit<T, K>\n}\n"],"mappings":";;;AAAA,SAA6BA,cAAA,QAAsB;AACnD,SACEC,MAAA,EACAC,UAAA,EAEAC,gBAAA,EAEAC,cAAA,QACK;AACP,SAASC,EAAA,QAAU;;;ACTZ,SAASC,KACdC,MAAA,EAEA;EAAA,IADAC,UAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAkB,EAAC;EAEnB,MAAMG,KAAA,GAAiCC,MAAA,CAAOC,MAAA,CAAO,CAAC,GAAGP,MAAM;EAC/D,WAAWQ,GAAA,IAAOP,UAAA,EAAY;IAC5B,IAAIO,GAAA,IAAOH,KAAA,EAAO;MAChB,OAAOA,KAAA,CAAMG,GAAa;IAC5B;EACF;EACA,OAAOH,KAAA;AACT;;;ADwCI,SAAAI,GAAA;AAtBJ,IAAMC,OAAA,GAAU,CAAC,KAAK,QAAQ,UAAU,WAAW;AAY5C,IAAMC,QAAA,GAAWhB,UAAA,CAAsC,CAACiB,KAAA,EAAOC,GAAA,KAAQ;EAC5E,MAAMC,MAAA,GAASjB,cAAA,CAAe,YAAYe,KAAK;EAC/C,MAAM;IAAEG,SAAA;IAAWC,IAAA;IAAM,GAAGC;EAAK,IAAIrB,gBAAA,CAAiBgB,KAAK;EAE3D,MAAMM,aAAA,GAAgBzB,cAAA,CAAoCwB,IAAI;EAG9D,MAAME,cAAA,GAAiBH,IAAA,GAAOjB,IAAA,CAAKe,MAAA,EAAQJ,OAAO,IAAII,MAAA;EAEtD,OACE,eAAAL,GAAA,CAACf,MAAA,CAAO0B,QAAA,EAAP;IACCP,GAAA;IACAG,IAAA;IACC,GAAGE,aAAA;IACJH,SAAA,EAAWjB,EAAA,CAAG,mBAAmBiB,SAAS;IAC1CM,KAAA,EAAOF;EAAA,CACT;AAEJ,CAAC;AAEDR,QAAA,CAASW,WAAA,GAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}