{"ast":null,"code":"'use client';\n\nimport { Box } from \"./chunk-PULVB27S.mjs\";\n\n// src/highlight.tsx\nimport { forwardRef, omitThemingProps, useStyleConfig } from \"@chakra-ui/system\";\nimport { Fragment, useMemo } from \"react\";\nimport { Fragment as Fragment2, jsx } from \"react/jsx-runtime\";\nvar escapeRegexp = term => term.replace(/[|\\\\{}()[\\]^$+*?.-]/g, char => \"\\\\\".concat(char));\nfunction buildRegex(query) {\n  const _query = query.filter(text => text.length !== 0).map(text => escapeRegexp(text.trim()));\n  if (!_query.length) {\n    return null;\n  }\n  return new RegExp(\"(\".concat(_query.join(\"|\"), \")\"), \"ig\");\n}\nfunction highlightWords(_ref) {\n  let {\n    text,\n    query\n  } = _ref;\n  const regex = buildRegex(Array.isArray(query) ? query : [query]);\n  if (!regex) {\n    return [{\n      text,\n      match: false\n    }];\n  }\n  const result = text.split(regex).filter(Boolean);\n  return result.map(str => ({\n    text: str,\n    match: regex.test(str)\n  }));\n}\nfunction useHighlight(props) {\n  const {\n    text,\n    query\n  } = props;\n  return useMemo(() => highlightWords({\n    text,\n    query\n  }), [text, query]);\n}\nvar Mark = forwardRef(function Mark2(props, ref) {\n  const styles = useStyleConfig(\"Mark\", props);\n  const ownProps = omitThemingProps(props);\n  return /* @__PURE__ */jsx(Box, {\n    ref,\n    ...ownProps,\n    as: \"mark\",\n    __css: {\n      bg: \"transparent\",\n      whiteSpace: \"nowrap\",\n      ...styles\n    }\n  });\n});\nfunction Highlight(props) {\n  const {\n    children,\n    query,\n    styles\n  } = props;\n  if (typeof children !== \"string\") {\n    throw new Error(\"The children prop of Highlight must be a string\");\n  }\n  const chunks = useHighlight({\n    query,\n    text: children\n  });\n  return /* @__PURE__ */jsx(Fragment2, {\n    children: chunks.map((chunk, index) => {\n      return chunk.match ? /* @__PURE__ */jsx(Mark, {\n        sx: styles,\n        children: chunk.text\n      }, index) : /* @__PURE__ */jsx(Fragment, {\n        children: chunk.text\n      }, index);\n    })\n  });\n}\nexport { useHighlight, Mark, Highlight };","map":{"version":3,"names":["forwardRef","omitThemingProps","useStyleConfig","Fragment","useMemo","Fragment2","jsx","escapeRegexp","term","replace","char","concat","buildRegex","query","_query","filter","text","length","map","trim","RegExp","join","highlightWords","_ref","regex","Array","isArray","match","result","split","Boolean","str","test","useHighlight","props","Mark","Mark2","ref","styles","ownProps","Box","as","__css","bg","whiteSpace","Highlight","children","Error","chunks","chunk","index","sx"],"sources":["D:\\Repos\\NIKE-DJANGO\\Jord\\l4fycy\\node_modules\\@chakra-ui\\layout\\src\\highlight.tsx"],"sourcesContent":["import {\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { Fragment, useMemo } from \"react\"\nimport { Box } from \"./box\"\n\ntype Chunk = {\n  text: string\n  match: boolean\n}\n\ntype HighlightOptions = {\n  text: string\n  query: string | string[]\n}\n\nconst escapeRegexp = (term: string): string =>\n  term.replace(/[|\\\\{}()[\\]^$+*?.-]/g, (char: string) => `\\\\${char}`)\n\nfunction buildRegex(query: string[]) {\n  const _query = query\n    .filter((text) => text.length !== 0)\n    .map((text) => escapeRegexp(text.trim()))\n  if (!_query.length) {\n    return null\n  }\n\n  return new RegExp(`(${_query.join(\"|\")})`, \"ig\")\n}\n\nfunction highlightWords({ text, query }: HighlightOptions): Chunk[] {\n  const regex = buildRegex(Array.isArray(query) ? query : [query])\n  if (!regex) {\n    return [{ text, match: false }]\n  }\n  const result = text.split(regex).filter(Boolean)\n  return result.map((str) => ({ text: str, match: regex.test(str) }))\n}\n\nexport type UseHighlightProps = HighlightOptions\n\nexport function useHighlight(props: UseHighlightProps) {\n  const { text, query } = props\n  return useMemo(() => highlightWords({ text, query }), [text, query])\n}\n\nexport type HighlightProps = {\n  query: string | string[]\n  children: string | ((props: Chunk[]) => React.ReactNode)\n  styles?: SystemStyleObject\n}\n\nexport type MarkProps = ThemingProps<\"Mark\"> & HTMLChakraProps<\"mark\">\n\nexport const Mark = forwardRef<MarkProps, \"mark\">(function Mark(props, ref) {\n  const styles = useStyleConfig(\"Mark\", props)\n  const ownProps = omitThemingProps(props)\n  return (\n    <Box\n      ref={ref}\n      {...ownProps}\n      as=\"mark\"\n      __css={{ bg: \"transparent\", whiteSpace: \"nowrap\", ...styles }}\n    />\n  )\n})\n\n/**\n * `Highlight` allows you to highlight substrings of a text.\n *\n * @see Docs https://chakra-ui.com/docs/components/highlight\n */\nexport function Highlight(props: HighlightProps): JSX.Element {\n  const { children, query, styles } = props\n\n  if (typeof children !== \"string\") {\n    throw new Error(\"The children prop of Highlight must be a string\")\n  }\n\n  const chunks = useHighlight({ query, text: children })\n\n  return (\n    <>\n      {chunks.map((chunk, index) => {\n        return chunk.match ? (\n          <Mark key={index} sx={styles}>\n            {chunk.text}\n          </Mark>\n        ) : (\n          <Fragment key={index}>{chunk.text}</Fragment>\n        )\n      })}\n    </>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}