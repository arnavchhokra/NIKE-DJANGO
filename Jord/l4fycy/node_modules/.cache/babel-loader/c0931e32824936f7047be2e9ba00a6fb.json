{"ast":null,"code":"import _assertThisInitialized from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _classCallCheck from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Loader, LoaderUtils, FileLoader, Vector3, Vector2, TextureLoader, Scene, Object3D, Group, SphereGeometry, MeshBasicMaterial, BackSide, Mesh, PointsMaterial, Points, LineBasicMaterial, LineSegments, FrontSide, DoubleSide, MeshPhongMaterial, Color, DataTexture, BufferGeometry, Float32BufferAttribute, BoxGeometry, ConeGeometry, CylinderGeometry, Quaternion, ShapeUtils, BufferAttribute, RepeatWrapping, ClampToEdgeWrapping } from 'three';\nimport { createToken, Lexer, CstParser } from 'chevrotain';\n\nvar VRMLLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(VRMLLoader, _Loader);\n\n  var _super = _createSuper(VRMLLoader);\n\n  function VRMLLoader(manager) {\n    _classCallCheck(this, VRMLLoader);\n\n    return _super.call(this, manager);\n  }\n\n  _createClass(VRMLLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var path = scope.path === '' ? LoaderUtils.extractUrlBase(url) : scope.path;\n      var loader = new FileLoader(scope.manager);\n      loader.setPath(scope.path);\n      loader.setRequestHeader(scope.requestHeader);\n      loader.setWithCredentials(scope.withCredentials);\n      loader.load(url, function (text) {\n        try {\n          onLoad(scope.parse(text, path));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(data, path) {\n      var nodeMap = {};\n\n      function generateVRMLTree(data) {\n        // create lexer, parser and visitor\n        var tokenData = createTokens();\n        var lexer = new VRMLLexer(tokenData.tokens);\n        var parser = new VRMLParser(tokenData.tokenVocabulary);\n        var visitor = createVisitor(parser.getBaseCstVisitorConstructor()); // lexing\n\n        var lexingResult = lexer.lex(data);\n        parser.input = lexingResult.tokens; // parsing\n\n        var cstOutput = parser.vrml();\n\n        if (parser.errors.length > 0) {\n          console.error(parser.errors);\n          throw Error('THREE.VRMLLoader: Parsing errors detected.');\n        } // actions\n\n\n        var ast = visitor.visit(cstOutput);\n        return ast;\n      }\n\n      function createTokens() {\n        // from http://gun.teipir.gr/VRML-amgem/spec/part1/concepts.html#SyntaxBasics\n        var RouteIdentifier = createToken({\n          name: 'RouteIdentifier',\n          pattern: /[^\\x30-\\x39\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d][^\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d]*[\\.][^\\x30-\\x39\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d][^\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d]*/\n        });\n        var Identifier = createToken({\n          name: 'Identifier',\n          pattern: /[^\\x30-\\x39\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d][^\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d]*/,\n          longer_alt: RouteIdentifier\n        }); // from http://gun.teipir.gr/VRML-amgem/spec/part1/nodesRef.html\n\n        var nodeTypes = ['Anchor', 'Billboard', 'Collision', 'Group', 'Transform', // grouping nodes\n        'Inline', 'LOD', 'Switch', // special groups\n        'AudioClip', 'DirectionalLight', 'PointLight', 'Script', 'Shape', 'Sound', 'SpotLight', 'WorldInfo', // common nodes\n        'CylinderSensor', 'PlaneSensor', 'ProximitySensor', 'SphereSensor', 'TimeSensor', 'TouchSensor', 'VisibilitySensor', // sensors\n        'Box', 'Cone', 'Cylinder', 'ElevationGrid', 'Extrusion', 'IndexedFaceSet', 'IndexedLineSet', 'PointSet', 'Sphere', // geometries\n        'Color', 'Coordinate', 'Normal', 'TextureCoordinate', // geometric properties\n        'Appearance', 'FontStyle', 'ImageTexture', 'Material', 'MovieTexture', 'PixelTexture', 'TextureTransform', // appearance\n        'ColorInterpolator', 'CoordinateInterpolator', 'NormalInterpolator', 'OrientationInterpolator', 'PositionInterpolator', 'ScalarInterpolator', // interpolators\n        'Background', 'Fog', 'NavigationInfo', 'Viewpoint', // bindable nodes\n        'Text' // Text must be placed at the end of the regex so there are no matches for TextureTransform and TextureCoordinate\n        ]; //\n\n        var Version = createToken({\n          name: 'Version',\n          pattern: /#VRML.*/,\n          longer_alt: Identifier\n        });\n        var NodeName = createToken({\n          name: 'NodeName',\n          pattern: new RegExp(nodeTypes.join('|')),\n          longer_alt: Identifier\n        });\n        var DEF = createToken({\n          name: 'DEF',\n          pattern: /DEF/,\n          longer_alt: Identifier\n        });\n        var USE = createToken({\n          name: 'USE',\n          pattern: /USE/,\n          longer_alt: Identifier\n        });\n        var ROUTE = createToken({\n          name: 'ROUTE',\n          pattern: /ROUTE/,\n          longer_alt: Identifier\n        });\n        var TO = createToken({\n          name: 'TO',\n          pattern: /TO/,\n          longer_alt: Identifier\n        }); //\n\n        var StringLiteral = createToken({\n          name: 'StringLiteral',\n          pattern: /\"(?:[^\\\\\"\\n\\r]|\\\\[bfnrtv\"\\\\/]|\\\\u[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])*\"/\n        });\n        var HexLiteral = createToken({\n          name: 'HexLiteral',\n          pattern: /0[xX][0-9a-fA-F]+/\n        });\n        var NumberLiteral = createToken({\n          name: 'NumberLiteral',\n          pattern: /[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?/\n        });\n        var TrueLiteral = createToken({\n          name: 'TrueLiteral',\n          pattern: /TRUE/\n        });\n        var FalseLiteral = createToken({\n          name: 'FalseLiteral',\n          pattern: /FALSE/\n        });\n        var NullLiteral = createToken({\n          name: 'NullLiteral',\n          pattern: /NULL/\n        });\n        var LSquare = createToken({\n          name: 'LSquare',\n          pattern: /\\[/\n        });\n        var RSquare = createToken({\n          name: 'RSquare',\n          pattern: /]/\n        });\n        var LCurly = createToken({\n          name: 'LCurly',\n          pattern: /{/\n        });\n        var RCurly = createToken({\n          name: 'RCurly',\n          pattern: /}/\n        });\n        var Comment = createToken({\n          name: 'Comment',\n          pattern: /#.*/,\n          group: Lexer.SKIPPED // eslint-disable-line no-undef\n\n        }); // commas, blanks, tabs, newlines and carriage returns are whitespace characters wherever they appear outside of string fields\n\n        var WhiteSpace = createToken({\n          name: 'WhiteSpace',\n          pattern: /[ ,\\s]/,\n          group: Lexer.SKIPPED // eslint-disable-line no-undef\n\n        });\n        var tokens = [WhiteSpace, // keywords appear before the Identifier\n        NodeName, DEF, USE, ROUTE, TO, TrueLiteral, FalseLiteral, NullLiteral, // the Identifier must appear after the keywords because all keywords are valid identifiers\n        Version, Identifier, RouteIdentifier, StringLiteral, HexLiteral, NumberLiteral, LSquare, RSquare, LCurly, RCurly, Comment];\n        var tokenVocabulary = {};\n\n        for (var i = 0, l = tokens.length; i < l; i++) {\n          var token = tokens[i];\n          tokenVocabulary[token.name] = token;\n        }\n\n        return {\n          tokens: tokens,\n          tokenVocabulary: tokenVocabulary\n        };\n      }\n\n      function createVisitor(BaseVRMLVisitor) {\n        // the visitor is created dynmaically based on the given base class\n        function VRMLToASTVisitor() {\n          BaseVRMLVisitor.call(this);\n          this.validateVisitor();\n        }\n\n        VRMLToASTVisitor.prototype = Object.assign(Object.create(BaseVRMLVisitor.prototype), {\n          constructor: VRMLToASTVisitor,\n          vrml: function vrml(ctx) {\n            var data = {\n              version: this.visit(ctx.version),\n              nodes: [],\n              routes: []\n            };\n\n            for (var i = 0, l = ctx.node.length; i < l; i++) {\n              var node = ctx.node[i];\n              data.nodes.push(this.visit(node));\n            }\n\n            if (ctx.route) {\n              for (var _i = 0, _l = ctx.route.length; _i < _l; _i++) {\n                var route = ctx.route[_i];\n                data.routes.push(this.visit(route));\n              }\n            }\n\n            return data;\n          },\n          version: function version(ctx) {\n            return ctx.Version[0].image;\n          },\n          node: function node(ctx) {\n            var data = {\n              name: ctx.NodeName[0].image,\n              fields: []\n            };\n\n            if (ctx.field) {\n              for (var i = 0, l = ctx.field.length; i < l; i++) {\n                var field = ctx.field[i];\n                data.fields.push(this.visit(field));\n              }\n            } // DEF\n\n\n            if (ctx.def) {\n              data.DEF = this.visit(ctx.def[0]);\n            }\n\n            return data;\n          },\n          field: function field(ctx) {\n            var data = {\n              name: ctx.Identifier[0].image,\n              type: null,\n              values: null\n            };\n            var result; // SFValue\n\n            if (ctx.singleFieldValue) {\n              result = this.visit(ctx.singleFieldValue[0]);\n            } // MFValue\n\n\n            if (ctx.multiFieldValue) {\n              result = this.visit(ctx.multiFieldValue[0]);\n            }\n\n            data.type = result.type;\n            data.values = result.values;\n            return data;\n          },\n          def: function def(ctx) {\n            return (ctx.Identifier || ctx.NodeName)[0].image;\n          },\n          use: function use(ctx) {\n            return {\n              USE: (ctx.Identifier || ctx.NodeName)[0].image\n            };\n          },\n          singleFieldValue: function singleFieldValue(ctx) {\n            return processField(this, ctx);\n          },\n          multiFieldValue: function multiFieldValue(ctx) {\n            return processField(this, ctx);\n          },\n          route: function route(ctx) {\n            var data = {\n              FROM: ctx.RouteIdentifier[0].image,\n              TO: ctx.RouteIdentifier[1].image\n            };\n            return data;\n          }\n        });\n\n        function processField(scope, ctx) {\n          var field = {\n            type: null,\n            values: []\n          };\n\n          if (ctx.node) {\n            field.type = 'node';\n\n            for (var i = 0, l = ctx.node.length; i < l; i++) {\n              var node = ctx.node[i];\n              field.values.push(scope.visit(node));\n            }\n          }\n\n          if (ctx.use) {\n            field.type = 'use';\n\n            for (var _i2 = 0, _l2 = ctx.use.length; _i2 < _l2; _i2++) {\n              var use = ctx.use[_i2];\n              field.values.push(scope.visit(use));\n            }\n          }\n\n          if (ctx.StringLiteral) {\n            field.type = 'string';\n\n            for (var _i3 = 0, _l3 = ctx.StringLiteral.length; _i3 < _l3; _i3++) {\n              var stringLiteral = ctx.StringLiteral[_i3];\n              field.values.push(stringLiteral.image.replace(/'|\"/g, ''));\n            }\n          }\n\n          if (ctx.NumberLiteral) {\n            field.type = 'number';\n\n            for (var _i4 = 0, _l4 = ctx.NumberLiteral.length; _i4 < _l4; _i4++) {\n              var numberLiteral = ctx.NumberLiteral[_i4];\n              field.values.push(parseFloat(numberLiteral.image));\n            }\n          }\n\n          if (ctx.HexLiteral) {\n            field.type = 'hex';\n\n            for (var _i5 = 0, _l5 = ctx.HexLiteral.length; _i5 < _l5; _i5++) {\n              var hexLiteral = ctx.HexLiteral[_i5];\n              field.values.push(hexLiteral.image);\n            }\n          }\n\n          if (ctx.TrueLiteral) {\n            field.type = 'boolean';\n\n            for (var _i6 = 0, _l6 = ctx.TrueLiteral.length; _i6 < _l6; _i6++) {\n              var trueLiteral = ctx.TrueLiteral[_i6];\n              if (trueLiteral.image === 'TRUE') field.values.push(true);\n            }\n          }\n\n          if (ctx.FalseLiteral) {\n            field.type = 'boolean';\n\n            for (var _i7 = 0, _l7 = ctx.FalseLiteral.length; _i7 < _l7; _i7++) {\n              var falseLiteral = ctx.FalseLiteral[_i7];\n              if (falseLiteral.image === 'FALSE') field.values.push(false);\n            }\n          }\n\n          if (ctx.NullLiteral) {\n            field.type = 'null';\n            ctx.NullLiteral.forEach(function () {\n              field.values.push(null);\n            });\n          }\n\n          return field;\n        }\n\n        return new VRMLToASTVisitor();\n      }\n\n      function parseTree(tree) {\n        // console.log( JSON.stringify( tree, null, 2 ) );\n        var nodes = tree.nodes;\n        var scene = new Scene(); // first iteration: build nodemap based on DEF statements\n\n        for (var i = 0, l = nodes.length; i < l; i++) {\n          var node = nodes[i];\n          buildNodeMap(node);\n        } // second iteration: build nodes\n\n\n        for (var _i8 = 0, _l8 = nodes.length; _i8 < _l8; _i8++) {\n          var _node = nodes[_i8];\n          var object = getNode(_node);\n          if (object instanceof Object3D) scene.add(object);\n          if (_node.name === 'WorldInfo') scene.userData.worldInfo = object;\n        }\n\n        return scene;\n      }\n\n      function buildNodeMap(node) {\n        if (node.DEF) {\n          nodeMap[node.DEF] = node;\n        }\n\n        var fields = node.fields;\n\n        for (var i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n\n          if (field.type === 'node') {\n            var fieldValues = field.values;\n\n            for (var j = 0, jl = fieldValues.length; j < jl; j++) {\n              buildNodeMap(fieldValues[j]);\n            }\n          }\n        }\n      }\n\n      function getNode(node) {\n        // handle case where a node refers to a different one\n        if (node.USE) {\n          return resolveUSE(node.USE);\n        }\n\n        if (node.build !== undefined) return node.build;\n        node.build = buildNode(node);\n        return node.build;\n      } // node builder\n\n\n      function buildNode(node) {\n        var nodeName = node.name;\n        var build;\n\n        switch (nodeName) {\n          case 'Group':\n          case 'Transform':\n          case 'Collision':\n            build = buildGroupingNode(node);\n            break;\n\n          case 'Background':\n            build = buildBackgroundNode(node);\n            break;\n\n          case 'Shape':\n            build = buildShapeNode(node);\n            break;\n\n          case 'Appearance':\n            build = buildAppearanceNode(node);\n            break;\n\n          case 'Material':\n            build = buildMaterialNode(node);\n            break;\n\n          case 'ImageTexture':\n            build = buildImageTextureNode(node);\n            break;\n\n          case 'PixelTexture':\n            build = buildPixelTextureNode(node);\n            break;\n\n          case 'TextureTransform':\n            build = buildTextureTransformNode(node);\n            break;\n\n          case 'IndexedFaceSet':\n            build = buildIndexedFaceSetNode(node);\n            break;\n\n          case 'IndexedLineSet':\n            build = buildIndexedLineSetNode(node);\n            break;\n\n          case 'PointSet':\n            build = buildPointSetNode(node);\n            break;\n\n          case 'Box':\n            build = buildBoxNode(node);\n            break;\n\n          case 'Cone':\n            build = buildConeNode(node);\n            break;\n\n          case 'Cylinder':\n            build = buildCylinderNode(node);\n            break;\n\n          case 'Sphere':\n            build = buildSphereNode(node);\n            break;\n\n          case 'ElevationGrid':\n            build = buildElevationGridNode(node);\n            break;\n\n          case 'Extrusion':\n            build = buildExtrusionNode(node);\n            break;\n\n          case 'Color':\n          case 'Coordinate':\n          case 'Normal':\n          case 'TextureCoordinate':\n            build = buildGeometricNode(node);\n            break;\n\n          case 'WorldInfo':\n            build = buildWorldInfoNode(node);\n            break;\n\n          case 'Anchor':\n          case 'Billboard':\n          case 'Inline':\n          case 'LOD':\n          case 'Switch':\n          case 'AudioClip':\n          case 'DirectionalLight':\n          case 'PointLight':\n          case 'Script':\n          case 'Sound':\n          case 'SpotLight':\n          case 'CylinderSensor':\n          case 'PlaneSensor':\n          case 'ProximitySensor':\n          case 'SphereSensor':\n          case 'TimeSensor':\n          case 'TouchSensor':\n          case 'VisibilitySensor':\n          case 'Text':\n          case 'FontStyle':\n          case 'MovieTexture':\n          case 'ColorInterpolator':\n          case 'CoordinateInterpolator':\n          case 'NormalInterpolator':\n          case 'OrientationInterpolator':\n          case 'PositionInterpolator':\n          case 'ScalarInterpolator':\n          case 'Fog':\n          case 'NavigationInfo':\n          case 'Viewpoint':\n            // node not supported yet\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown node:', nodeName);\n            break;\n        }\n\n        if (build !== undefined && node.DEF !== undefined && build.hasOwnProperty('name') === true) {\n          build.name = node.DEF;\n        }\n\n        return build;\n      }\n\n      function buildGroupingNode(node) {\n        var object = new Group(); //\n\n        var fields = node.fields;\n\n        for (var i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n\n          switch (fieldName) {\n            case 'bboxCenter':\n              // field not supported\n              break;\n\n            case 'bboxSize':\n              // field not supported\n              break;\n\n            case 'center':\n              // field not supported\n              break;\n\n            case 'children':\n              parseFieldChildren(fieldValues, object);\n              break;\n\n            case 'collide':\n              // field not supported\n              break;\n\n            case 'rotation':\n              var axis = new Vector3(fieldValues[0], fieldValues[1], fieldValues[2]);\n              var angle = fieldValues[3];\n              object.quaternion.setFromAxisAngle(axis, angle);\n              break;\n\n            case 'scale':\n              object.scale.set(fieldValues[0], fieldValues[1], fieldValues[2]);\n              break;\n\n            case 'scaleOrientation':\n              // field not supported\n              break;\n\n            case 'translation':\n              object.position.set(fieldValues[0], fieldValues[1], fieldValues[2]);\n              break;\n\n            case 'proxy':\n              // field not supported\n              break;\n\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        }\n\n        return object;\n      }\n\n      function buildBackgroundNode(node) {\n        var group = new Group();\n        var groundAngle, groundColor;\n        var skyAngle, skyColor;\n        var fields = node.fields;\n\n        for (var i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n\n          switch (fieldName) {\n            case 'groundAngle':\n              groundAngle = fieldValues;\n              break;\n\n            case 'groundColor':\n              groundColor = fieldValues;\n              break;\n\n            case 'backUrl':\n              // field not supported\n              break;\n\n            case 'bottomUrl':\n              // field not supported\n              break;\n\n            case 'frontUrl':\n              // field not supported\n              break;\n\n            case 'leftUrl':\n              // field not supported\n              break;\n\n            case 'rightUrl':\n              // field not supported\n              break;\n\n            case 'topUrl':\n              // field not supported\n              break;\n\n            case 'skyAngle':\n              skyAngle = fieldValues;\n              break;\n\n            case 'skyColor':\n              skyColor = fieldValues;\n              break;\n\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        }\n\n        var radius = 10000; // sky\n\n        if (skyColor) {\n          var skyGeometry = new SphereGeometry(radius, 32, 16);\n          var skyMaterial = new MeshBasicMaterial({\n            fog: false,\n            side: BackSide,\n            depthWrite: false,\n            depthTest: false\n          });\n\n          if (skyColor.length > 3) {\n            paintFaces(skyGeometry, radius, skyAngle, toColorArray(skyColor), true);\n            skyMaterial.vertexColors = true;\n          } else {\n            skyMaterial.color.setRGB(skyColor[0], skyColor[1], skyColor[2]);\n          }\n\n          var sky = new Mesh(skyGeometry, skyMaterial);\n          group.add(sky);\n        } // ground\n\n\n        if (groundColor) {\n          if (groundColor.length > 0) {\n            var groundGeometry = new SphereGeometry(radius, 32, 16, 0, 2 * Math.PI, 0.5 * Math.PI, 1.5 * Math.PI);\n            var groundMaterial = new MeshBasicMaterial({\n              fog: false,\n              side: BackSide,\n              vertexColors: true,\n              depthWrite: false,\n              depthTest: false\n            });\n            paintFaces(groundGeometry, radius, groundAngle, toColorArray(groundColor), false);\n            var ground = new Mesh(groundGeometry, groundMaterial);\n            group.add(ground);\n          }\n        } // render background group first\n\n\n        group.renderOrder = -Infinity;\n        return group;\n      }\n\n      function buildShapeNode(node) {\n        var fields = node.fields; // if the appearance field is NULL or unspecified, lighting is off and the unlit object color is (0, 0, 0)\n\n        var material = new MeshBasicMaterial({\n          color: 0x000000\n        });\n        var geometry;\n\n        for (var i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n\n          switch (fieldName) {\n            case 'appearance':\n              if (fieldValues[0] !== null) {\n                material = getNode(fieldValues[0]);\n              }\n\n              break;\n\n            case 'geometry':\n              if (fieldValues[0] !== null) {\n                geometry = getNode(fieldValues[0]);\n              }\n\n              break;\n\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        } // build 3D object\n\n\n        var object;\n\n        if (geometry && geometry.attributes.position) {\n          var type = geometry._type;\n\n          if (type === 'points') {\n            // points\n            var pointsMaterial = new PointsMaterial({\n              color: 0xffffff\n            });\n\n            if (geometry.attributes.color !== undefined) {\n              pointsMaterial.vertexColors = true;\n            } else {\n              // if the color field is NULL and there is a material defined for the appearance affecting this PointSet, then use the emissiveColor of the material to draw the points\n              if (material.isMeshPhongMaterial) {\n                pointsMaterial.color.copy(material.emissive);\n              }\n            }\n\n            object = new Points(geometry, pointsMaterial);\n          } else if (type === 'line') {\n            // lines\n            var lineMaterial = new LineBasicMaterial({\n              color: 0xffffff\n            });\n\n            if (geometry.attributes.color !== undefined) {\n              lineMaterial.vertexColors = true;\n            } else {\n              // if the color field is NULL and there is a material defined for the appearance affecting this IndexedLineSet, then use the emissiveColor of the material to draw the lines\n              if (material.isMeshPhongMaterial) {\n                lineMaterial.color.copy(material.emissive);\n              }\n            }\n\n            object = new LineSegments(geometry, lineMaterial);\n          } else {\n            // consider meshes\n            // check \"solid\" hint (it's placed in the geometry but affects the material)\n            if (geometry._solid !== undefined) {\n              material.side = geometry._solid ? FrontSide : DoubleSide;\n            } // check for vertex colors\n\n\n            if (geometry.attributes.color !== undefined) {\n              material.vertexColors = true;\n            }\n\n            object = new Mesh(geometry, material);\n          }\n        } else {\n          object = new Object3D(); // if the geometry field is NULL or no vertices are defined the object is not drawn\n\n          object.visible = false;\n        }\n\n        return object;\n      }\n\n      function buildAppearanceNode(node) {\n        var material = new MeshPhongMaterial();\n        var transformData;\n        var fields = node.fields;\n\n        for (var i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n\n          switch (fieldName) {\n            case 'material':\n              if (fieldValues[0] !== null) {\n                var materialData = getNode(fieldValues[0]);\n                if (materialData.diffuseColor) material.color.copy(materialData.diffuseColor);\n                if (materialData.emissiveColor) material.emissive.copy(materialData.emissiveColor);\n                if (materialData.shininess) material.shininess = materialData.shininess;\n                if (materialData.specularColor) material.specular.copy(materialData.specularColor);\n                if (materialData.transparency) material.opacity = 1 - materialData.transparency;\n                if (materialData.transparency > 0) material.transparent = true;\n              } else {\n                // if the material field is NULL or unspecified, lighting is off and the unlit object color is (0, 0, 0)\n                material = new MeshBasicMaterial({\n                  color: 0x000000\n                });\n              }\n\n              break;\n\n            case 'texture':\n              var textureNode = fieldValues[0];\n\n              if (textureNode !== null) {\n                if (textureNode.name === 'ImageTexture' || textureNode.name === 'PixelTexture') {\n                  material.map = getNode(textureNode);\n                }\n              }\n\n              break;\n\n            case 'textureTransform':\n              if (fieldValues[0] !== null) {\n                transformData = getNode(fieldValues[0]);\n              }\n\n              break;\n\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        } // only apply texture transform data if a texture was defined\n\n\n        if (material.map) {\n          // respect VRML lighting model\n          if (material.map.__type) {\n            switch (material.map.__type) {\n              case TEXTURE_TYPE.INTENSITY_ALPHA:\n                material.opacity = 1; // ignore transparency\n\n                break;\n\n              case TEXTURE_TYPE.RGB:\n                material.color.set(0xffffff); // ignore material color\n\n                break;\n\n              case TEXTURE_TYPE.RGBA:\n                material.color.set(0xffffff); // ignore material color\n\n                material.opacity = 1; // ignore transparency\n\n                break;\n            }\n\n            delete material.map.__type;\n          } // apply texture transform\n\n\n          if (transformData) {\n            material.map.center.copy(transformData.center);\n            material.map.rotation = transformData.rotation;\n            material.map.repeat.copy(transformData.scale);\n            material.map.offset.copy(transformData.translation);\n          }\n        }\n\n        return material;\n      }\n\n      function buildMaterialNode(node) {\n        var materialData = {};\n        var fields = node.fields;\n\n        for (var i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n\n          switch (fieldName) {\n            case 'ambientIntensity':\n              // field not supported\n              break;\n\n            case 'diffuseColor':\n              materialData.diffuseColor = new Color(fieldValues[0], fieldValues[1], fieldValues[2]);\n              break;\n\n            case 'emissiveColor':\n              materialData.emissiveColor = new Color(fieldValues[0], fieldValues[1], fieldValues[2]);\n              break;\n\n            case 'shininess':\n              materialData.shininess = fieldValues[0];\n              break;\n\n            case 'specularColor':\n              materialData.emissiveColor = new Color(fieldValues[0], fieldValues[1], fieldValues[2]);\n              break;\n\n            case 'transparency':\n              materialData.transparency = fieldValues[0];\n              break;\n\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        }\n\n        return materialData;\n      }\n\n      function parseHexColor(hex, textureType, color) {\n        var value;\n\n        switch (textureType) {\n          case TEXTURE_TYPE.INTENSITY:\n            // Intensity texture: A one-component image specifies one-byte hexadecimal or integer values representing the intensity of the image\n            value = parseInt(hex);\n            color.r = value;\n            color.g = value;\n            color.b = value;\n            color.a = 1;\n            break;\n\n          case TEXTURE_TYPE.INTENSITY_ALPHA:\n            // Intensity+Alpha texture: A two-component image specifies the intensity in the first (high) byte and the alpha opacity in the second (low) byte.\n            value = parseInt('0x' + hex.substring(2, 4));\n            color.r = value;\n            color.g = value;\n            color.b = value;\n            color.a = parseInt('0x' + hex.substring(4, 6));\n            break;\n\n          case TEXTURE_TYPE.RGB:\n            // RGB texture: Pixels in a three-component image specify the red component in the first (high) byte, followed by the green and blue components\n            color.r = parseInt('0x' + hex.substring(2, 4));\n            color.g = parseInt('0x' + hex.substring(4, 6));\n            color.b = parseInt('0x' + hex.substring(6, 8));\n            color.a = 1;\n            break;\n\n          case TEXTURE_TYPE.RGBA:\n            // RGBA texture: Four-component images specify the alpha opacity byte after red/green/blue\n            color.r = parseInt('0x' + hex.substring(2, 4));\n            color.g = parseInt('0x' + hex.substring(4, 6));\n            color.b = parseInt('0x' + hex.substring(6, 8));\n            color.a = parseInt('0x' + hex.substring(8, 10));\n            break;\n        }\n      }\n\n      function getTextureType(num_components) {\n        var type;\n\n        switch (num_components) {\n          case 1:\n            type = TEXTURE_TYPE.INTENSITY;\n            break;\n\n          case 2:\n            type = TEXTURE_TYPE.INTENSITY_ALPHA;\n            break;\n\n          case 3:\n            type = TEXTURE_TYPE.RGB;\n            break;\n\n          case 4:\n            type = TEXTURE_TYPE.RGBA;\n            break;\n        }\n\n        return type;\n      }\n\n      function buildPixelTextureNode(node) {\n        var texture;\n        var wrapS = RepeatWrapping;\n        var wrapT = RepeatWrapping;\n        var fields = node.fields;\n\n        for (var i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n\n          switch (fieldName) {\n            case 'image':\n              var width = fieldValues[0];\n              var height = fieldValues[1];\n              var num_components = fieldValues[2];\n              var textureType = getTextureType(num_components);\n\n              var _data = new Uint8Array(4 * width * height);\n\n              var color = {\n                r: 0,\n                g: 0,\n                b: 0,\n                a: 0\n              };\n\n              for (var j = 3, k = 0, jl = fieldValues.length; j < jl; j++, k++) {\n                parseHexColor(fieldValues[j], textureType, color);\n                var stride = k * 4;\n                _data[stride + 0] = color.r;\n                _data[stride + 1] = color.g;\n                _data[stride + 2] = color.b;\n                _data[stride + 3] = color.a;\n              }\n\n              texture = new DataTexture(_data, width, height);\n              texture.needsUpdate = true;\n              texture.__type = textureType; // needed for material modifications\n\n              break;\n\n            case 'repeatS':\n              if (fieldValues[0] === false) wrapS = ClampToEdgeWrapping;\n              break;\n\n            case 'repeatT':\n              if (fieldValues[0] === false) wrapT = ClampToEdgeWrapping;\n              break;\n\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        }\n\n        if (texture) {\n          texture.wrapS = wrapS;\n          texture.wrapT = wrapT;\n        }\n\n        return texture;\n      }\n\n      function buildImageTextureNode(node) {\n        var texture;\n        var wrapS = RepeatWrapping;\n        var wrapT = RepeatWrapping;\n        var fields = node.fields;\n\n        for (var i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n\n          switch (fieldName) {\n            case 'url':\n              var url = fieldValues[0];\n              if (url) texture = textureLoader.load(url);\n              break;\n\n            case 'repeatS':\n              if (fieldValues[0] === false) wrapS = ClampToEdgeWrapping;\n              break;\n\n            case 'repeatT':\n              if (fieldValues[0] === false) wrapT = ClampToEdgeWrapping;\n              break;\n\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        }\n\n        if (texture) {\n          texture.wrapS = wrapS;\n          texture.wrapT = wrapT;\n        }\n\n        return texture;\n      }\n\n      function buildTextureTransformNode(node) {\n        var transformData = {\n          center: new Vector2(),\n          rotation: new Vector2(),\n          scale: new Vector2(),\n          translation: new Vector2()\n        };\n        var fields = node.fields;\n\n        for (var i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n\n          switch (fieldName) {\n            case 'center':\n              transformData.center.set(fieldValues[0], fieldValues[1]);\n              break;\n\n            case 'rotation':\n              transformData.rotation = fieldValues[0];\n              break;\n\n            case 'scale':\n              transformData.scale.set(fieldValues[0], fieldValues[1]);\n              break;\n\n            case 'translation':\n              transformData.translation.set(fieldValues[0], fieldValues[1]);\n              break;\n\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        }\n\n        return transformData;\n      }\n\n      function buildGeometricNode(node) {\n        return node.fields[0].values;\n      }\n\n      function buildWorldInfoNode(node) {\n        var worldInfo = {};\n        var fields = node.fields;\n\n        for (var i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n\n          switch (fieldName) {\n            case 'title':\n              worldInfo.title = fieldValues[0];\n              break;\n\n            case 'info':\n              worldInfo.info = fieldValues;\n              break;\n\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        }\n\n        return worldInfo;\n      }\n\n      function buildIndexedFaceSetNode(node) {\n        var color, coord, normal, texCoord;\n        var ccw = true,\n            solid = true,\n            creaseAngle = 0;\n        var colorIndex, coordIndex, normalIndex, texCoordIndex;\n        var colorPerVertex = true,\n            normalPerVertex = true;\n        var fields = node.fields;\n\n        for (var i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n\n          switch (fieldName) {\n            case 'color':\n              var colorNode = fieldValues[0];\n\n              if (colorNode !== null) {\n                color = getNode(colorNode);\n              }\n\n              break;\n\n            case 'coord':\n              var coordNode = fieldValues[0];\n\n              if (coordNode !== null) {\n                coord = getNode(coordNode);\n              }\n\n              break;\n\n            case 'normal':\n              var normalNode = fieldValues[0];\n\n              if (normalNode !== null) {\n                normal = getNode(normalNode);\n              }\n\n              break;\n\n            case 'texCoord':\n              var texCoordNode = fieldValues[0];\n\n              if (texCoordNode !== null) {\n                texCoord = getNode(texCoordNode);\n              }\n\n              break;\n\n            case 'ccw':\n              ccw = fieldValues[0];\n              break;\n\n            case 'colorIndex':\n              colorIndex = fieldValues;\n              break;\n\n            case 'colorPerVertex':\n              colorPerVertex = fieldValues[0];\n              break;\n\n            case 'convex':\n              // field not supported\n              break;\n\n            case 'coordIndex':\n              coordIndex = fieldValues;\n              break;\n\n            case 'creaseAngle':\n              creaseAngle = fieldValues[0];\n              break;\n\n            case 'normalIndex':\n              normalIndex = fieldValues;\n              break;\n\n            case 'normalPerVertex':\n              normalPerVertex = fieldValues[0];\n              break;\n\n            case 'solid':\n              solid = fieldValues[0];\n              break;\n\n            case 'texCoordIndex':\n              texCoordIndex = fieldValues;\n              break;\n\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        }\n\n        if (coordIndex === undefined) {\n          console.warn('THREE.VRMLLoader: Missing coordIndex.');\n          return new BufferGeometry(); // handle VRML files with incomplete geometry definition\n        }\n\n        var triangulatedCoordIndex = triangulateFaceIndex(coordIndex, ccw);\n        var colorAttribute;\n        var normalAttribute;\n        var uvAttribute;\n\n        if (color) {\n          if (colorPerVertex === true) {\n            if (colorIndex && colorIndex.length > 0) {\n              // if the colorIndex field is not empty, then it is used to choose colors for each vertex of the IndexedFaceSet.\n              var triangulatedColorIndex = triangulateFaceIndex(colorIndex, ccw);\n              colorAttribute = computeAttributeFromIndexedData(triangulatedCoordIndex, triangulatedColorIndex, color, 3);\n            } else {\n              // if the colorIndex field is empty, then the coordIndex field is used to choose colors from the Color node\n              colorAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new Float32BufferAttribute(color, 3));\n            }\n          } else {\n            if (colorIndex && colorIndex.length > 0) {\n              // if the colorIndex field is not empty, then they are used to choose one color for each face of the IndexedFaceSet\n              var flattenFaceColors = flattenData(color, colorIndex);\n              var triangulatedFaceColors = triangulateFaceData(flattenFaceColors, coordIndex);\n              colorAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, triangulatedFaceColors);\n            } else {\n              // if the colorIndex field is empty, then the color are applied to each face of the IndexedFaceSet in order\n              var _triangulatedFaceColors = triangulateFaceData(color, coordIndex);\n\n              colorAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, _triangulatedFaceColors);\n            }\n          }\n        }\n\n        if (normal) {\n          if (normalPerVertex === true) {\n            // consider vertex normals\n            if (normalIndex && normalIndex.length > 0) {\n              // if the normalIndex field is not empty, then it is used to choose normals for each vertex of the IndexedFaceSet.\n              var triangulatedNormalIndex = triangulateFaceIndex(normalIndex, ccw);\n              normalAttribute = computeAttributeFromIndexedData(triangulatedCoordIndex, triangulatedNormalIndex, normal, 3);\n            } else {\n              // if the normalIndex field is empty, then the coordIndex field is used to choose normals from the Normal node\n              normalAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new Float32BufferAttribute(normal, 3));\n            }\n          } else {\n            // consider face normals\n            if (normalIndex && normalIndex.length > 0) {\n              // if the normalIndex field is not empty, then they are used to choose one normal for each face of the IndexedFaceSet\n              var flattenFaceNormals = flattenData(normal, normalIndex);\n              var triangulatedFaceNormals = triangulateFaceData(flattenFaceNormals, coordIndex);\n              normalAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, triangulatedFaceNormals);\n            } else {\n              // if the normalIndex field is empty, then the normals are applied to each face of the IndexedFaceSet in order\n              var _triangulatedFaceNormals = triangulateFaceData(normal, coordIndex);\n\n              normalAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, _triangulatedFaceNormals);\n            }\n          }\n        } else {\n          // if the normal field is NULL, then the loader should automatically generate normals, using creaseAngle to determine if and how normals are smoothed across shared vertices\n          normalAttribute = computeNormalAttribute(triangulatedCoordIndex, coord, creaseAngle);\n        }\n\n        if (texCoord) {\n          // texture coordinates are always defined on vertex level\n          if (texCoordIndex && texCoordIndex.length > 0) {\n            // if the texCoordIndex field is not empty, then it is used to choose texture coordinates for each vertex of the IndexedFaceSet.\n            var triangulatedTexCoordIndex = triangulateFaceIndex(texCoordIndex, ccw);\n            uvAttribute = computeAttributeFromIndexedData(triangulatedCoordIndex, triangulatedTexCoordIndex, texCoord, 2);\n          } else {\n            // if the texCoordIndex field is empty, then the coordIndex array is used to choose texture coordinates from the TextureCoordinate node\n            uvAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new Float32BufferAttribute(texCoord, 2));\n          }\n        }\n\n        var geometry = new BufferGeometry();\n        var positionAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new Float32BufferAttribute(coord, 3));\n        geometry.setAttribute('position', positionAttribute);\n        geometry.setAttribute('normal', normalAttribute); // optional attributes\n\n        if (colorAttribute) geometry.setAttribute('color', colorAttribute);\n        if (uvAttribute) geometry.setAttribute('uv', uvAttribute); // \"solid\" influences the material so let's store it for later use\n\n        geometry._solid = solid;\n        geometry._type = 'mesh';\n        return geometry;\n      }\n\n      function buildIndexedLineSetNode(node) {\n        var color, coord;\n        var colorIndex, coordIndex;\n        var colorPerVertex = true;\n        var fields = node.fields;\n\n        for (var i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n\n          switch (fieldName) {\n            case 'color':\n              var colorNode = fieldValues[0];\n\n              if (colorNode !== null) {\n                color = getNode(colorNode);\n              }\n\n              break;\n\n            case 'coord':\n              var coordNode = fieldValues[0];\n\n              if (coordNode !== null) {\n                coord = getNode(coordNode);\n              }\n\n              break;\n\n            case 'colorIndex':\n              colorIndex = fieldValues;\n              break;\n\n            case 'colorPerVertex':\n              colorPerVertex = fieldValues[0];\n              break;\n\n            case 'coordIndex':\n              coordIndex = fieldValues;\n              break;\n\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        } // build lines\n\n\n        var colorAttribute;\n        var expandedLineIndex = expandLineIndex(coordIndex); // create an index for three.js's linesegment primitive\n\n        if (color) {\n          if (colorPerVertex === true) {\n            if (colorIndex.length > 0) {\n              // if the colorIndex field is not empty, then one color is used for each polyline of the IndexedLineSet.\n              var expandedColorIndex = expandLineIndex(colorIndex); // compute colors for each line segment (rendering primitve)\n\n              colorAttribute = computeAttributeFromIndexedData(expandedLineIndex, expandedColorIndex, color, 3); // compute data on vertex level\n            } else {\n              // if the colorIndex field is empty, then the colors are applied to each polyline of the IndexedLineSet in order.\n              colorAttribute = toNonIndexedAttribute(expandedLineIndex, new Float32BufferAttribute(color, 3));\n            }\n          } else {\n            if (colorIndex.length > 0) {\n              // if the colorIndex field is not empty, then colors are applied to each vertex of the IndexedLineSet\n              var flattenLineColors = flattenData(color, colorIndex); // compute colors for each VRML primitve\n\n              var expandedLineColors = expandLineData(flattenLineColors, coordIndex); // compute colors for each line segment (rendering primitve)\n\n              colorAttribute = computeAttributeFromLineData(expandedLineIndex, expandedLineColors); // compute data on vertex level\n            } else {\n              // if the colorIndex field is empty, then the coordIndex field is used to choose colors from the Color node\n              var _expandedLineColors = expandLineData(color, coordIndex); // compute colors for each line segment (rendering primitve)\n\n\n              colorAttribute = computeAttributeFromLineData(expandedLineIndex, _expandedLineColors); // compute data on vertex level\n            }\n          }\n        } //\n\n\n        var geometry = new BufferGeometry();\n        var positionAttribute = toNonIndexedAttribute(expandedLineIndex, new Float32BufferAttribute(coord, 3));\n        geometry.setAttribute('position', positionAttribute);\n        if (colorAttribute) geometry.setAttribute('color', colorAttribute);\n        geometry._type = 'line';\n        return geometry;\n      }\n\n      function buildPointSetNode(node) {\n        var color, coord;\n        var fields = node.fields;\n\n        for (var i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n\n          switch (fieldName) {\n            case 'color':\n              var colorNode = fieldValues[0];\n\n              if (colorNode !== null) {\n                color = getNode(colorNode);\n              }\n\n              break;\n\n            case 'coord':\n              var coordNode = fieldValues[0];\n\n              if (coordNode !== null) {\n                coord = getNode(coordNode);\n              }\n\n              break;\n\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        }\n\n        var geometry = new BufferGeometry();\n        geometry.setAttribute('position', new Float32BufferAttribute(coord, 3));\n        if (color) geometry.setAttribute('color', new Float32BufferAttribute(color, 3));\n        geometry._type = 'points';\n        return geometry;\n      }\n\n      function buildBoxNode(node) {\n        var size = new Vector3(2, 2, 2);\n        var fields = node.fields;\n\n        for (var i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n\n          switch (fieldName) {\n            case 'size':\n              size.x = fieldValues[0];\n              size.y = fieldValues[1];\n              size.z = fieldValues[2];\n              break;\n\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        }\n\n        var geometry = new BoxGeometry(size.x, size.y, size.z);\n        return geometry;\n      }\n\n      function buildConeNode(node) {\n        var radius = 1,\n            height = 2,\n            openEnded = false;\n        var fields = node.fields;\n\n        for (var i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n\n          switch (fieldName) {\n            case 'bottom':\n              openEnded = !fieldValues[0];\n              break;\n\n            case 'bottomRadius':\n              radius = fieldValues[0];\n              break;\n\n            case 'height':\n              height = fieldValues[0];\n              break;\n\n            case 'side':\n              // field not supported\n              break;\n\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        }\n\n        var geometry = new ConeGeometry(radius, height, 16, 1, openEnded);\n        return geometry;\n      }\n\n      function buildCylinderNode(node) {\n        var radius = 1,\n            height = 2;\n        var fields = node.fields;\n\n        for (var i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n\n          switch (fieldName) {\n            case 'bottom':\n              // field not supported\n              break;\n\n            case 'radius':\n              radius = fieldValues[0];\n              break;\n\n            case 'height':\n              height = fieldValues[0];\n              break;\n\n            case 'side':\n              // field not supported\n              break;\n\n            case 'top':\n              // field not supported\n              break;\n\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        }\n\n        var geometry = new CylinderGeometry(radius, radius, height, 16, 1);\n        return geometry;\n      }\n\n      function buildSphereNode(node) {\n        var radius = 1;\n        var fields = node.fields;\n\n        for (var i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n\n          switch (fieldName) {\n            case 'radius':\n              radius = fieldValues[0];\n              break;\n\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        }\n\n        var geometry = new SphereGeometry(radius, 16, 16);\n        return geometry;\n      }\n\n      function buildElevationGridNode(node) {\n        var color;\n        var normal;\n        var texCoord;\n        var height;\n        var colorPerVertex = true;\n        var normalPerVertex = true;\n        var solid = true;\n        var ccw = true;\n        var creaseAngle = 0;\n        var xDimension = 2;\n        var zDimension = 2;\n        var xSpacing = 1;\n        var zSpacing = 1;\n        var fields = node.fields;\n\n        for (var i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n\n          switch (fieldName) {\n            case 'color':\n              var colorNode = fieldValues[0];\n\n              if (colorNode !== null) {\n                color = getNode(colorNode);\n              }\n\n              break;\n\n            case 'normal':\n              var normalNode = fieldValues[0];\n\n              if (normalNode !== null) {\n                normal = getNode(normalNode);\n              }\n\n              break;\n\n            case 'texCoord':\n              var texCoordNode = fieldValues[0];\n\n              if (texCoordNode !== null) {\n                texCoord = getNode(texCoordNode);\n              }\n\n              break;\n\n            case 'height':\n              height = fieldValues;\n              break;\n\n            case 'ccw':\n              ccw = fieldValues[0];\n              break;\n\n            case 'colorPerVertex':\n              colorPerVertex = fieldValues[0];\n              break;\n\n            case 'creaseAngle':\n              creaseAngle = fieldValues[0];\n              break;\n\n            case 'normalPerVertex':\n              normalPerVertex = fieldValues[0];\n              break;\n\n            case 'solid':\n              solid = fieldValues[0];\n              break;\n\n            case 'xDimension':\n              xDimension = fieldValues[0];\n              break;\n\n            case 'xSpacing':\n              xSpacing = fieldValues[0];\n              break;\n\n            case 'zDimension':\n              zDimension = fieldValues[0];\n              break;\n\n            case 'zSpacing':\n              zSpacing = fieldValues[0];\n              break;\n\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        } // vertex data\n\n\n        var vertices = [];\n        var normals = [];\n        var colors = [];\n        var uvs = [];\n\n        for (var _i9 = 0; _i9 < zDimension; _i9++) {\n          for (var j = 0; j < xDimension; j++) {\n            // compute a row major index\n            var index = _i9 * xDimension + j; // vertices\n\n            var x = xSpacing * _i9;\n            var y = height[index];\n            var z = zSpacing * j;\n            vertices.push(x, y, z); // colors\n\n            if (color && colorPerVertex === true) {\n              var r = color[index * 3 + 0];\n              var g = color[index * 3 + 1];\n              var b = color[index * 3 + 2];\n              colors.push(r, g, b);\n            } // normals\n\n\n            if (normal && normalPerVertex === true) {\n              var xn = normal[index * 3 + 0];\n              var yn = normal[index * 3 + 1];\n              var zn = normal[index * 3 + 2];\n              normals.push(xn, yn, zn);\n            } // uvs\n\n\n            if (texCoord) {\n              var s = texCoord[index * 2 + 0];\n              var t = texCoord[index * 2 + 1];\n              uvs.push(s, t);\n            } else {\n              uvs.push(_i9 / (xDimension - 1), j / (zDimension - 1));\n            }\n          }\n        } // indices\n\n\n        var indices = [];\n\n        for (var _i10 = 0; _i10 < xDimension - 1; _i10++) {\n          for (var _j = 0; _j < zDimension - 1; _j++) {\n            // from https://tecfa.unige.ch/guides/vrml/vrml97/spec/part1/nodesRef.html#ElevationGrid\n            var a = _i10 + _j * xDimension;\n\n            var _b = _i10 + (_j + 1) * xDimension;\n\n            var c = _i10 + 1 + (_j + 1) * xDimension;\n            var d = _i10 + 1 + _j * xDimension; // faces\n\n            if (ccw === true) {\n              indices.push(a, c, _b);\n              indices.push(c, a, d);\n            } else {\n              indices.push(a, _b, c);\n              indices.push(c, d, a);\n            }\n          }\n        } //\n\n\n        var positionAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(vertices, 3));\n        var uvAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(uvs, 2));\n        var colorAttribute;\n        var normalAttribute; // color attribute\n\n        if (color) {\n          if (colorPerVertex === false) {\n            for (var _i11 = 0; _i11 < xDimension - 1; _i11++) {\n              for (var _j2 = 0; _j2 < zDimension - 1; _j2++) {\n                var _index = _i11 + _j2 * (xDimension - 1);\n\n                var _r = color[_index * 3 + 0];\n                var _g = color[_index * 3 + 1];\n                var _b2 = color[_index * 3 + 2]; // one color per quad\n\n                colors.push(_r, _g, _b2);\n                colors.push(_r, _g, _b2);\n                colors.push(_r, _g, _b2);\n                colors.push(_r, _g, _b2);\n                colors.push(_r, _g, _b2);\n                colors.push(_r, _g, _b2);\n              }\n            }\n\n            colorAttribute = new Float32BufferAttribute(colors, 3);\n          } else {\n            colorAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(colors, 3));\n          }\n        } // normal attribute\n\n\n        if (normal) {\n          if (normalPerVertex === false) {\n            for (var _i12 = 0; _i12 < xDimension - 1; _i12++) {\n              for (var _j3 = 0; _j3 < zDimension - 1; _j3++) {\n                var _index2 = _i12 + _j3 * (xDimension - 1);\n\n                var _xn = normal[_index2 * 3 + 0];\n                var _yn = normal[_index2 * 3 + 1];\n                var _zn = normal[_index2 * 3 + 2]; // one normal per quad\n\n                normals.push(_xn, _yn, _zn);\n                normals.push(_xn, _yn, _zn);\n                normals.push(_xn, _yn, _zn);\n                normals.push(_xn, _yn, _zn);\n                normals.push(_xn, _yn, _zn);\n                normals.push(_xn, _yn, _zn);\n              }\n            }\n\n            normalAttribute = new Float32BufferAttribute(normals, 3);\n          } else {\n            normalAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(normals, 3));\n          }\n        } else {\n          normalAttribute = computeNormalAttribute(indices, vertices, creaseAngle);\n        } // build geometry\n\n\n        var geometry = new BufferGeometry();\n        geometry.setAttribute('position', positionAttribute);\n        geometry.setAttribute('normal', normalAttribute);\n        geometry.setAttribute('uv', uvAttribute);\n        if (colorAttribute) geometry.setAttribute('color', colorAttribute); // \"solid\" influences the material so let's store it for later use\n\n        geometry._solid = solid;\n        geometry._type = 'mesh';\n        return geometry;\n      }\n\n      function buildExtrusionNode(node) {\n        var crossSection = [1, 1, 1, -1, -1, -1, -1, 1, 1, 1];\n        var spine = [0, 0, 0, 0, 1, 0];\n        var scale;\n        var orientation;\n        var beginCap = true;\n        var ccw = true;\n        var creaseAngle = 0;\n        var endCap = true;\n        var solid = true;\n        var fields = node.fields;\n\n        for (var i = 0, l = fields.length; i < l; i++) {\n          var field = fields[i];\n          var fieldName = field.name;\n          var fieldValues = field.values;\n\n          switch (fieldName) {\n            case 'beginCap':\n              beginCap = fieldValues[0];\n              break;\n\n            case 'ccw':\n              ccw = fieldValues[0];\n              break;\n\n            case 'convex':\n              // field not supported\n              break;\n\n            case 'creaseAngle':\n              creaseAngle = fieldValues[0];\n              break;\n\n            case 'crossSection':\n              crossSection = fieldValues;\n              break;\n\n            case 'endCap':\n              endCap = fieldValues[0];\n              break;\n\n            case 'orientation':\n              orientation = fieldValues;\n              break;\n\n            case 'scale':\n              scale = fieldValues;\n              break;\n\n            case 'solid':\n              solid = fieldValues[0];\n              break;\n\n            case 'spine':\n              spine = fieldValues; // only extrusion along the Y-axis are supported so far\n\n              break;\n\n            default:\n              console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n              break;\n          }\n        }\n\n        var crossSectionClosed = crossSection[0] === crossSection[crossSection.length - 2] && crossSection[1] === crossSection[crossSection.length - 1]; // vertices\n\n        var vertices = [];\n        var spineVector = new Vector3();\n        var scaling = new Vector3();\n        var axis = new Vector3();\n        var vertex = new Vector3();\n        var quaternion = new Quaternion();\n\n        for (var _i13 = 0, j = 0, o = 0, il = spine.length; _i13 < il; _i13 += 3, j += 2, o += 4) {\n          spineVector.fromArray(spine, _i13);\n          scaling.x = scale ? scale[j + 0] : 1;\n          scaling.y = 1;\n          scaling.z = scale ? scale[j + 1] : 1;\n          axis.x = orientation ? orientation[o + 0] : 0;\n          axis.y = orientation ? orientation[o + 1] : 0;\n          axis.z = orientation ? orientation[o + 2] : 1;\n          var angle = orientation ? orientation[o + 3] : 0;\n\n          for (var k = 0, kl = crossSection.length; k < kl; k += 2) {\n            vertex.x = crossSection[k + 0];\n            vertex.y = 0;\n            vertex.z = crossSection[k + 1]; // scale\n\n            vertex.multiply(scaling); // rotate\n\n            quaternion.setFromAxisAngle(axis, angle);\n            vertex.applyQuaternion(quaternion); // translate\n\n            vertex.add(spineVector);\n            vertices.push(vertex.x, vertex.y, vertex.z);\n          }\n        } // indices\n\n\n        var indices = [];\n        var spineCount = spine.length / 3;\n        var crossSectionCount = crossSection.length / 2;\n\n        for (var _i14 = 0; _i14 < spineCount - 1; _i14++) {\n          for (var _j4 = 0; _j4 < crossSectionCount - 1; _j4++) {\n            var a = _j4 + _i14 * crossSectionCount;\n            var b = _j4 + 1 + _i14 * crossSectionCount;\n            var c = _j4 + (_i14 + 1) * crossSectionCount;\n            var d = _j4 + 1 + (_i14 + 1) * crossSectionCount;\n\n            if (_j4 === crossSectionCount - 2 && crossSectionClosed === true) {\n              b = _i14 * crossSectionCount;\n              d = (_i14 + 1) * crossSectionCount;\n            }\n\n            if (ccw === true) {\n              indices.push(a, b, c);\n              indices.push(c, b, d);\n            } else {\n              indices.push(a, c, b);\n              indices.push(c, d, b);\n            }\n          }\n        } // triangulate cap\n\n\n        if (beginCap === true || endCap === true) {\n          var contour = [];\n\n          for (var _i15 = 0, _l9 = crossSection.length; _i15 < _l9; _i15 += 2) {\n            contour.push(new Vector2(crossSection[_i15], crossSection[_i15 + 1]));\n          }\n\n          var faces = ShapeUtils.triangulateShape(contour, []);\n          var capIndices = [];\n\n          for (var _i16 = 0, _l10 = faces.length; _i16 < _l10; _i16++) {\n            var face = faces[_i16];\n            capIndices.push(face[0], face[1], face[2]);\n          } // begin cap\n\n\n          if (beginCap === true) {\n            for (var _i17 = 0, _l11 = capIndices.length; _i17 < _l11; _i17 += 3) {\n              if (ccw === true) {\n                indices.push(capIndices[_i17 + 0], capIndices[_i17 + 1], capIndices[_i17 + 2]);\n              } else {\n                indices.push(capIndices[_i17 + 0], capIndices[_i17 + 2], capIndices[_i17 + 1]);\n              }\n            }\n          } // end cap\n\n\n          if (endCap === true) {\n            var indexOffset = crossSectionCount * (spineCount - 1); // references to the first vertex of the last cross section\n\n            for (var _i18 = 0, _l12 = capIndices.length; _i18 < _l12; _i18 += 3) {\n              if (ccw === true) {\n                indices.push(indexOffset + capIndices[_i18 + 0], indexOffset + capIndices[_i18 + 2], indexOffset + capIndices[_i18 + 1]);\n              } else {\n                indices.push(indexOffset + capIndices[_i18 + 0], indexOffset + capIndices[_i18 + 1], indexOffset + capIndices[_i18 + 2]);\n              }\n            }\n          }\n        }\n\n        var positionAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(vertices, 3));\n        var normalAttribute = computeNormalAttribute(indices, vertices, creaseAngle);\n        var geometry = new BufferGeometry();\n        geometry.setAttribute('position', positionAttribute);\n        geometry.setAttribute('normal', normalAttribute); // no uvs yet\n        // \"solid\" influences the material so let's store it for later use\n\n        geometry._solid = solid;\n        geometry._type = 'mesh';\n        return geometry;\n      } // helper functions\n\n\n      function resolveUSE(identifier) {\n        var node = nodeMap[identifier];\n        var build = getNode(node); // because the same 3D objects can have different transformations, it's necessary to clone them.\n        // materials can be influenced by the geometry (e.g. vertex normals). cloning is necessary to avoid\n        // any side effects\n\n        return build.isObject3D || build.isMaterial ? build.clone() : build;\n      }\n\n      function parseFieldChildren(children, owner) {\n        for (var i = 0, l = children.length; i < l; i++) {\n          var object = getNode(children[i]);\n          if (object instanceof Object3D) owner.add(object);\n        }\n      }\n\n      function triangulateFaceIndex(index, ccw) {\n        var indices = []; // since face defintions can have more than three vertices, it's necessary to\n        // perform a simple triangulation\n\n        var start = 0;\n\n        for (var i = 0, l = index.length; i < l; i++) {\n          var i1 = index[start];\n          var i2 = index[i + (ccw ? 1 : 2)];\n          var i3 = index[i + (ccw ? 2 : 1)];\n          indices.push(i1, i2, i3); // an index of -1 indicates that the current face has ended and the next one begins\n\n          if (index[i + 3] === -1 || i + 3 >= l) {\n            i += 3;\n            start = i + 1;\n          }\n        }\n\n        return indices;\n      }\n\n      function triangulateFaceData(data, index) {\n        var triangulatedData = [];\n        var start = 0;\n\n        for (var i = 0, l = index.length; i < l; i++) {\n          var stride = start * 3;\n          var x = data[stride];\n          var y = data[stride + 1];\n          var z = data[stride + 2];\n          triangulatedData.push(x, y, z); // an index of -1 indicates that the current face has ended and the next one begins\n\n          if (index[i + 3] === -1 || i + 3 >= l) {\n            i += 3;\n            start++;\n          }\n        }\n\n        return triangulatedData;\n      }\n\n      function flattenData(data, index) {\n        var flattenData = [];\n\n        for (var i = 0, l = index.length; i < l; i++) {\n          var i1 = index[i];\n          var stride = i1 * 3;\n          var x = data[stride];\n          var y = data[stride + 1];\n          var z = data[stride + 2];\n          flattenData.push(x, y, z);\n        }\n\n        return flattenData;\n      }\n\n      function expandLineIndex(index) {\n        var indices = [];\n\n        for (var i = 0, l = index.length; i < l; i++) {\n          var i1 = index[i];\n          var i2 = index[i + 1];\n          indices.push(i1, i2); // an index of -1 indicates that the current line has ended and the next one begins\n\n          if (index[i + 2] === -1 || i + 2 >= l) {\n            i += 2;\n          }\n        }\n\n        return indices;\n      }\n\n      function expandLineData(data, index) {\n        var triangulatedData = [];\n        var start = 0;\n\n        for (var i = 0, l = index.length; i < l; i++) {\n          var stride = start * 3;\n          var x = data[stride];\n          var y = data[stride + 1];\n          var z = data[stride + 2];\n          triangulatedData.push(x, y, z); // an index of -1 indicates that the current line has ended and the next one begins\n\n          if (index[i + 2] === -1 || i + 2 >= l) {\n            i += 2;\n            start++;\n          }\n        }\n\n        return triangulatedData;\n      }\n\n      var vA = new Vector3();\n      var vB = new Vector3();\n      var vC = new Vector3();\n      var uvA = new Vector2();\n      var uvB = new Vector2();\n      var uvC = new Vector2();\n\n      function computeAttributeFromIndexedData(coordIndex, index, data, itemSize) {\n        var array = []; // we use the coordIndex.length as delimiter since normalIndex must contain at least as many indices\n\n        for (var i = 0, l = coordIndex.length; i < l; i += 3) {\n          var a = index[i];\n          var b = index[i + 1];\n          var c = index[i + 2];\n\n          if (itemSize === 2) {\n            uvA.fromArray(data, a * itemSize);\n            uvB.fromArray(data, b * itemSize);\n            uvC.fromArray(data, c * itemSize);\n            array.push(uvA.x, uvA.y);\n            array.push(uvB.x, uvB.y);\n            array.push(uvC.x, uvC.y);\n          } else {\n            vA.fromArray(data, a * itemSize);\n            vB.fromArray(data, b * itemSize);\n            vC.fromArray(data, c * itemSize);\n            array.push(vA.x, vA.y, vA.z);\n            array.push(vB.x, vB.y, vB.z);\n            array.push(vC.x, vC.y, vC.z);\n          }\n        }\n\n        return new Float32BufferAttribute(array, itemSize);\n      }\n\n      function computeAttributeFromFaceData(index, faceData) {\n        var array = [];\n\n        for (var i = 0, j = 0, l = index.length; i < l; i += 3, j++) {\n          vA.fromArray(faceData, j * 3);\n          array.push(vA.x, vA.y, vA.z);\n          array.push(vA.x, vA.y, vA.z);\n          array.push(vA.x, vA.y, vA.z);\n        }\n\n        return new Float32BufferAttribute(array, 3);\n      }\n\n      function computeAttributeFromLineData(index, lineData) {\n        var array = [];\n\n        for (var i = 0, j = 0, l = index.length; i < l; i += 2, j++) {\n          vA.fromArray(lineData, j * 3);\n          array.push(vA.x, vA.y, vA.z);\n          array.push(vA.x, vA.y, vA.z);\n        }\n\n        return new Float32BufferAttribute(array, 3);\n      }\n\n      function toNonIndexedAttribute(indices, attribute) {\n        var array = attribute.array;\n        var itemSize = attribute.itemSize;\n        var array2 = new array.constructor(indices.length * itemSize);\n        var index = 0,\n            index2 = 0;\n\n        for (var i = 0, l = indices.length; i < l; i++) {\n          index = indices[i] * itemSize;\n\n          for (var j = 0; j < itemSize; j++) {\n            array2[index2++] = array[index++];\n          }\n        }\n\n        return new Float32BufferAttribute(array2, itemSize);\n      }\n\n      var ab = new Vector3();\n      var cb = new Vector3();\n\n      function computeNormalAttribute(index, coord, creaseAngle) {\n        var faces = [];\n        var vertexNormals = {}; // prepare face and raw vertex normals\n\n        for (var i = 0, l = index.length; i < l; i += 3) {\n          var a = index[i];\n          var b = index[i + 1];\n          var c = index[i + 2];\n          var face = new Face(a, b, c);\n          vA.fromArray(coord, a * 3);\n          vB.fromArray(coord, b * 3);\n          vC.fromArray(coord, c * 3);\n          cb.subVectors(vC, vB);\n          ab.subVectors(vA, vB);\n          cb.cross(ab);\n          cb.normalize();\n          face.normal.copy(cb);\n          if (vertexNormals[a] === undefined) vertexNormals[a] = [];\n          if (vertexNormals[b] === undefined) vertexNormals[b] = [];\n          if (vertexNormals[c] === undefined) vertexNormals[c] = [];\n          vertexNormals[a].push(face.normal);\n          vertexNormals[b].push(face.normal);\n          vertexNormals[c].push(face.normal);\n          faces.push(face);\n        } // compute vertex normals and build final geometry\n\n\n        var normals = [];\n\n        for (var _i19 = 0, _l13 = faces.length; _i19 < _l13; _i19++) {\n          var _face = faces[_i19];\n          var nA = weightedNormal(vertexNormals[_face.a], _face.normal, creaseAngle);\n          var nB = weightedNormal(vertexNormals[_face.b], _face.normal, creaseAngle);\n          var nC = weightedNormal(vertexNormals[_face.c], _face.normal, creaseAngle);\n          vA.fromArray(coord, _face.a * 3);\n          vB.fromArray(coord, _face.b * 3);\n          vC.fromArray(coord, _face.c * 3);\n          normals.push(nA.x, nA.y, nA.z);\n          normals.push(nB.x, nB.y, nB.z);\n          normals.push(nC.x, nC.y, nC.z);\n        }\n\n        return new Float32BufferAttribute(normals, 3);\n      }\n\n      function weightedNormal(normals, vector, creaseAngle) {\n        var normal = new Vector3();\n\n        if (creaseAngle === 0) {\n          normal.copy(vector);\n        } else {\n          for (var i = 0, l = normals.length; i < l; i++) {\n            if (normals[i].angleTo(vector) < creaseAngle) {\n              normal.add(normals[i]);\n            }\n          }\n        }\n\n        return normal.normalize();\n      }\n\n      function toColorArray(colors) {\n        var array = [];\n\n        for (var i = 0, l = colors.length; i < l; i += 3) {\n          array.push(new Color(colors[i], colors[i + 1], colors[i + 2]));\n        }\n\n        return array;\n      }\n      /**\n       * Vertically paints the faces interpolating between the\n       * specified colors at the specified angels. This is used for the Background\n       * node, but could be applied to other nodes with multiple faces as well.\n       *\n       * When used with the Background node, default is directionIsDown is true if\n       * interpolating the skyColor down from the Zenith. When interpolationg up from\n       * the Nadir i.e. interpolating the groundColor, the directionIsDown is false.\n       *\n       * The first angle is never specified, it is the Zenith (0 rad). Angles are specified\n       * in radians. The geometry is thought a sphere, but could be anything. The color interpolation\n       * is linear along the Y axis in any case.\n       *\n       * You must specify one more color than you have angles at the beginning of the colors array.\n       * This is the color of the Zenith (the top of the shape).\n       *\n       * @param {BufferGeometry} geometry\n       * @param {number} radius\n       * @param {array} angles\n       * @param {array} colors\n       * @param {boolean} topDown - Whether to work top down or bottom up.\n       */\n\n\n      function paintFaces(geometry, radius, angles, colors, topDown) {\n        // compute threshold values\n        var thresholds = [];\n        var startAngle = topDown === true ? 0 : Math.PI;\n\n        for (var i = 0, l = colors.length; i < l; i++) {\n          var angle = i === 0 ? 0 : angles[i - 1];\n          angle = topDown === true ? angle : startAngle - angle;\n          var point = new Vector3();\n          point.setFromSphericalCoords(radius, angle, 0);\n          thresholds.push(point);\n        } // generate vertex colors\n\n\n        var indices = geometry.index;\n        var positionAttribute = geometry.attributes.position;\n        var colorAttribute = new BufferAttribute(new Float32Array(geometry.attributes.position.count * 3), 3);\n        var position = new Vector3();\n        var color = new Color();\n\n        for (var _i20 = 0; _i20 < indices.count; _i20++) {\n          var index = indices.getX(_i20);\n          position.fromBufferAttribute(positionAttribute, index);\n          var thresholdIndexA = void 0,\n              thresholdIndexB = void 0;\n          var t = 1;\n\n          for (var j = 1; j < thresholds.length; j++) {\n            thresholdIndexA = j - 1;\n            thresholdIndexB = j;\n            var thresholdA = thresholds[thresholdIndexA];\n            var thresholdB = thresholds[thresholdIndexB];\n\n            if (topDown === true) {\n              // interpolation for sky color\n              if (position.y <= thresholdA.y && position.y > thresholdB.y) {\n                t = Math.abs(thresholdA.y - position.y) / Math.abs(thresholdA.y - thresholdB.y);\n                break;\n              }\n            } else {\n              // interpolation for ground color\n              if (position.y >= thresholdA.y && position.y < thresholdB.y) {\n                t = Math.abs(thresholdA.y - position.y) / Math.abs(thresholdA.y - thresholdB.y);\n                break;\n              }\n            }\n          }\n\n          var colorA = colors[thresholdIndexA];\n          var colorB = colors[thresholdIndexB];\n          color.copy(colorA).lerp(colorB, t);\n          colorAttribute.setXYZ(index, color.r, color.g, color.b);\n        }\n\n        geometry.setAttribute('color', colorAttribute);\n      } //\n\n\n      var textureLoader = new TextureLoader(this.manager);\n      textureLoader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin); // check version (only 2.0 is supported)\n\n      if (data.indexOf('#VRML V2.0') === -1) {\n        throw Error('THREE.VRMLLexer: Version of VRML asset not supported.');\n      } // create JSON representing the tree structure of the VRML asset\n\n\n      var tree = generateVRMLTree(data); // parse the tree structure to a three.js scene\n\n      var scene = parseTree(tree);\n      return scene;\n    }\n  }]);\n\n  return VRMLLoader;\n}(Loader);\n\nvar VRMLLexer = /*#__PURE__*/function () {\n  function VRMLLexer(tokens) {\n    _classCallCheck(this, VRMLLexer);\n\n    this.lexer = new Lexer(tokens); // eslint-disable-line no-undef\n  }\n\n  _createClass(VRMLLexer, [{\n    key: \"lex\",\n    value: function lex(inputText) {\n      var lexingResult = this.lexer.tokenize(inputText);\n\n      if (lexingResult.errors.length > 0) {\n        console.error(lexingResult.errors);\n        throw Error('THREE.VRMLLexer: Lexing errors detected.');\n      }\n\n      return lexingResult;\n    }\n  }]);\n\n  return VRMLLexer;\n}();\n\nvar VRMLParser = /*#__PURE__*/function (_CstParser) {\n  _inherits(VRMLParser, _CstParser);\n\n  var _super2 = _createSuper(VRMLParser);\n\n  function VRMLParser(tokenVocabulary) {\n    var _this;\n\n    _classCallCheck(this, VRMLParser);\n\n    _this = _super2.call(this, tokenVocabulary);\n\n    var $ = _assertThisInitialized(_this);\n\n    var Version = tokenVocabulary['Version'];\n    var LCurly = tokenVocabulary['LCurly'];\n    var RCurly = tokenVocabulary['RCurly'];\n    var LSquare = tokenVocabulary['LSquare'];\n    var RSquare = tokenVocabulary['RSquare'];\n    var Identifier = tokenVocabulary['Identifier'];\n    var RouteIdentifier = tokenVocabulary['RouteIdentifier'];\n    var StringLiteral = tokenVocabulary['StringLiteral'];\n    var HexLiteral = tokenVocabulary['HexLiteral'];\n    var NumberLiteral = tokenVocabulary['NumberLiteral'];\n    var TrueLiteral = tokenVocabulary['TrueLiteral'];\n    var FalseLiteral = tokenVocabulary['FalseLiteral'];\n    var NullLiteral = tokenVocabulary['NullLiteral'];\n    var DEF = tokenVocabulary['DEF'];\n    var USE = tokenVocabulary['USE'];\n    var ROUTE = tokenVocabulary['ROUTE'];\n    var TO = tokenVocabulary['TO'];\n    var NodeName = tokenVocabulary['NodeName'];\n    $.RULE('vrml', function () {\n      $.SUBRULE($.version);\n      $.AT_LEAST_ONE(function () {\n        $.SUBRULE($.node);\n      });\n      $.MANY(function () {\n        $.SUBRULE($.route);\n      });\n    });\n    $.RULE('version', function () {\n      $.CONSUME(Version);\n    });\n    $.RULE('node', function () {\n      $.OPTION(function () {\n        $.SUBRULE($.def);\n      });\n      $.CONSUME(NodeName);\n      $.CONSUME(LCurly);\n      $.MANY(function () {\n        $.SUBRULE($.field);\n      });\n      $.CONSUME(RCurly);\n    });\n    $.RULE('field', function () {\n      $.CONSUME(Identifier);\n      $.OR2([{\n        ALT: function ALT() {\n          $.SUBRULE($.singleFieldValue);\n        }\n      }, {\n        ALT: function ALT() {\n          $.SUBRULE($.multiFieldValue);\n        }\n      }]);\n    });\n    $.RULE('def', function () {\n      $.CONSUME(DEF);\n      $.OR([{\n        ALT: function ALT() {\n          $.CONSUME(Identifier);\n        }\n      }, {\n        ALT: function ALT() {\n          $.CONSUME(NodeName);\n        }\n      }]);\n    });\n    $.RULE('use', function () {\n      $.CONSUME(USE);\n      $.OR([{\n        ALT: function ALT() {\n          $.CONSUME(Identifier);\n        }\n      }, {\n        ALT: function ALT() {\n          $.CONSUME(NodeName);\n        }\n      }]);\n    });\n    $.RULE('singleFieldValue', function () {\n      $.AT_LEAST_ONE(function () {\n        $.OR([{\n          ALT: function ALT() {\n            $.SUBRULE($.node);\n          }\n        }, {\n          ALT: function ALT() {\n            $.SUBRULE($.use);\n          }\n        }, {\n          ALT: function ALT() {\n            $.CONSUME(StringLiteral);\n          }\n        }, {\n          ALT: function ALT() {\n            $.CONSUME(HexLiteral);\n          }\n        }, {\n          ALT: function ALT() {\n            $.CONSUME(NumberLiteral);\n          }\n        }, {\n          ALT: function ALT() {\n            $.CONSUME(TrueLiteral);\n          }\n        }, {\n          ALT: function ALT() {\n            $.CONSUME(FalseLiteral);\n          }\n        }, {\n          ALT: function ALT() {\n            $.CONSUME(NullLiteral);\n          }\n        }]);\n      });\n    });\n    $.RULE('multiFieldValue', function () {\n      $.CONSUME(LSquare);\n      $.MANY(function () {\n        $.OR([{\n          ALT: function ALT() {\n            $.SUBRULE($.node);\n          }\n        }, {\n          ALT: function ALT() {\n            $.SUBRULE($.use);\n          }\n        }, {\n          ALT: function ALT() {\n            $.CONSUME(StringLiteral);\n          }\n        }, {\n          ALT: function ALT() {\n            $.CONSUME(HexLiteral);\n          }\n        }, {\n          ALT: function ALT() {\n            $.CONSUME(NumberLiteral);\n          }\n        }, {\n          ALT: function ALT() {\n            $.CONSUME(NullLiteral);\n          }\n        }]);\n      });\n      $.CONSUME(RSquare);\n    });\n    $.RULE('route', function () {\n      $.CONSUME(ROUTE);\n      $.CONSUME(RouteIdentifier);\n      $.CONSUME(TO);\n      $.CONSUME2(RouteIdentifier);\n    });\n\n    _this.performSelfAnalysis();\n\n    return _this;\n  }\n\n  return _createClass(VRMLParser);\n}(CstParser);\n\nvar Face = /*#__PURE__*/_createClass(function Face(a, b, c) {\n  _classCallCheck(this, Face);\n\n  this.a = a;\n  this.b = b;\n  this.c = c;\n  this.normal = new Vector3();\n});\n\nvar TEXTURE_TYPE = {\n  INTENSITY: 1,\n  INTENSITY_ALPHA: 2,\n  RGB: 3,\n  RGBA: 4\n};\nexport { VRMLLoader };","map":{"version":3,"names":["Loader","LoaderUtils","FileLoader","Vector3","Vector2","TextureLoader","Scene","Object3D","Group","SphereGeometry","MeshBasicMaterial","BackSide","Mesh","PointsMaterial","Points","LineBasicMaterial","LineSegments","FrontSide","DoubleSide","MeshPhongMaterial","Color","DataTexture","BufferGeometry","Float32BufferAttribute","BoxGeometry","ConeGeometry","CylinderGeometry","Quaternion","ShapeUtils","BufferAttribute","RepeatWrapping","ClampToEdgeWrapping","createToken","Lexer","CstParser","VRMLLoader","manager","url","onLoad","onProgress","onError","scope","path","extractUrlBase","loader","setPath","setRequestHeader","requestHeader","setWithCredentials","withCredentials","load","text","parse","e","console","error","itemError","data","nodeMap","generateVRMLTree","tokenData","createTokens","lexer","VRMLLexer","tokens","parser","VRMLParser","tokenVocabulary","visitor","createVisitor","getBaseCstVisitorConstructor","lexingResult","lex","input","cstOutput","vrml","errors","length","Error","ast","visit","RouteIdentifier","name","pattern","Identifier","longer_alt","nodeTypes","Version","NodeName","RegExp","join","DEF","USE","ROUTE","TO","StringLiteral","HexLiteral","NumberLiteral","TrueLiteral","FalseLiteral","NullLiteral","LSquare","RSquare","LCurly","RCurly","Comment","group","SKIPPED","WhiteSpace","i","l","token","BaseVRMLVisitor","VRMLToASTVisitor","call","validateVisitor","prototype","Object","assign","create","constructor","ctx","version","nodes","routes","node","push","route","image","fields","field","def","type","values","result","singleFieldValue","multiFieldValue","use","processField","FROM","stringLiteral","replace","numberLiteral","parseFloat","hexLiteral","trueLiteral","falseLiteral","forEach","parseTree","tree","scene","buildNodeMap","object","getNode","add","userData","worldInfo","fieldValues","j","jl","resolveUSE","build","undefined","buildNode","nodeName","buildGroupingNode","buildBackgroundNode","buildShapeNode","buildAppearanceNode","buildMaterialNode","buildImageTextureNode","buildPixelTextureNode","buildTextureTransformNode","buildIndexedFaceSetNode","buildIndexedLineSetNode","buildPointSetNode","buildBoxNode","buildConeNode","buildCylinderNode","buildSphereNode","buildElevationGridNode","buildExtrusionNode","buildGeometricNode","buildWorldInfoNode","warn","hasOwnProperty","fieldName","parseFieldChildren","axis","angle","quaternion","setFromAxisAngle","scale","set","position","groundAngle","groundColor","skyAngle","skyColor","radius","skyGeometry","skyMaterial","fog","side","depthWrite","depthTest","paintFaces","toColorArray","vertexColors","color","setRGB","sky","groundGeometry","Math","PI","groundMaterial","ground","renderOrder","Infinity","material","geometry","attributes","_type","pointsMaterial","isMeshPhongMaterial","copy","emissive","lineMaterial","_solid","visible","transformData","materialData","diffuseColor","emissiveColor","shininess","specularColor","specular","transparency","opacity","transparent","textureNode","map","__type","TEXTURE_TYPE","INTENSITY_ALPHA","RGB","RGBA","center","rotation","repeat","offset","translation","parseHexColor","hex","textureType","value","INTENSITY","parseInt","r","g","b","a","substring","getTextureType","num_components","texture","wrapS","wrapT","width","height","Uint8Array","k","stride","needsUpdate","textureLoader","title","info","coord","normal","texCoord","ccw","solid","creaseAngle","colorIndex","coordIndex","normalIndex","texCoordIndex","colorPerVertex","normalPerVertex","colorNode","coordNode","normalNode","texCoordNode","triangulatedCoordIndex","triangulateFaceIndex","colorAttribute","normalAttribute","uvAttribute","triangulatedColorIndex","computeAttributeFromIndexedData","toNonIndexedAttribute","flattenFaceColors","flattenData","triangulatedFaceColors","triangulateFaceData","computeAttributeFromFaceData","triangulatedNormalIndex","flattenFaceNormals","triangulatedFaceNormals","computeNormalAttribute","triangulatedTexCoordIndex","positionAttribute","setAttribute","expandedLineIndex","expandLineIndex","expandedColorIndex","flattenLineColors","expandedLineColors","expandLineData","computeAttributeFromLineData","size","x","y","z","openEnded","xDimension","zDimension","xSpacing","zSpacing","vertices","normals","colors","uvs","index","xn","yn","zn","s","t","indices","c","d","crossSection","spine","orientation","beginCap","endCap","crossSectionClosed","spineVector","scaling","vertex","o","il","fromArray","kl","multiply","applyQuaternion","spineCount","crossSectionCount","contour","faces","triangulateShape","capIndices","face","indexOffset","identifier","isObject3D","isMaterial","clone","children","owner","start","i1","i2","i3","triangulatedData","vA","vB","vC","uvA","uvB","uvC","itemSize","array","faceData","lineData","attribute","array2","index2","ab","cb","vertexNormals","Face","subVectors","cross","normalize","nA","weightedNormal","nB","nC","vector","angleTo","angles","topDown","thresholds","startAngle","point","setFromSphericalCoords","Float32Array","count","getX","fromBufferAttribute","thresholdIndexA","thresholdIndexB","thresholdA","thresholdB","abs","colorA","colorB","lerp","setXYZ","resourcePath","setCrossOrigin","crossOrigin","indexOf","inputText","tokenize","$","RULE","SUBRULE","AT_LEAST_ONE","MANY","CONSUME","OPTION","OR2","ALT","OR","CONSUME2","performSelfAnalysis"],"sources":["D:/Jord/l4fycy/node_modules/three-stdlib/loaders/VRMLLoader.js"],"sourcesContent":["import { Loader, LoaderUtils, FileLoader, Vector3, Vector2, TextureLoader, Scene, Object3D, Group, SphereGeometry, MeshBasicMaterial, BackSide, Mesh, PointsMaterial, Points, LineBasicMaterial, LineSegments, FrontSide, DoubleSide, MeshPhongMaterial, Color, DataTexture, BufferGeometry, Float32BufferAttribute, BoxGeometry, ConeGeometry, CylinderGeometry, Quaternion, ShapeUtils, BufferAttribute, RepeatWrapping, ClampToEdgeWrapping } from 'three';\nimport { createToken, Lexer, CstParser } from 'chevrotain';\n\nclass VRMLLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const path = scope.path === '' ? LoaderUtils.extractUrlBase(url) : scope.path;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text, path));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(data, path) {\n    const nodeMap = {};\n\n    function generateVRMLTree(data) {\n      // create lexer, parser and visitor\n      const tokenData = createTokens();\n      const lexer = new VRMLLexer(tokenData.tokens);\n      const parser = new VRMLParser(tokenData.tokenVocabulary);\n      const visitor = createVisitor(parser.getBaseCstVisitorConstructor()); // lexing\n\n      const lexingResult = lexer.lex(data);\n      parser.input = lexingResult.tokens; // parsing\n\n      const cstOutput = parser.vrml();\n\n      if (parser.errors.length > 0) {\n        console.error(parser.errors);\n        throw Error('THREE.VRMLLoader: Parsing errors detected.');\n      } // actions\n\n\n      const ast = visitor.visit(cstOutput);\n      return ast;\n    }\n\n    function createTokens() {\n      // from http://gun.teipir.gr/VRML-amgem/spec/part1/concepts.html#SyntaxBasics\n      const RouteIdentifier = createToken({\n        name: 'RouteIdentifier',\n        pattern: /[^\\x30-\\x39\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d][^\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d]*[\\.][^\\x30-\\x39\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d][^\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d]*/\n      });\n      const Identifier = createToken({\n        name: 'Identifier',\n        pattern: /[^\\x30-\\x39\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d][^\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d]*/,\n        longer_alt: RouteIdentifier\n      }); // from http://gun.teipir.gr/VRML-amgem/spec/part1/nodesRef.html\n\n      const nodeTypes = ['Anchor', 'Billboard', 'Collision', 'Group', 'Transform', // grouping nodes\n      'Inline', 'LOD', 'Switch', // special groups\n      'AudioClip', 'DirectionalLight', 'PointLight', 'Script', 'Shape', 'Sound', 'SpotLight', 'WorldInfo', // common nodes\n      'CylinderSensor', 'PlaneSensor', 'ProximitySensor', 'SphereSensor', 'TimeSensor', 'TouchSensor', 'VisibilitySensor', // sensors\n      'Box', 'Cone', 'Cylinder', 'ElevationGrid', 'Extrusion', 'IndexedFaceSet', 'IndexedLineSet', 'PointSet', 'Sphere', // geometries\n      'Color', 'Coordinate', 'Normal', 'TextureCoordinate', // geometric properties\n      'Appearance', 'FontStyle', 'ImageTexture', 'Material', 'MovieTexture', 'PixelTexture', 'TextureTransform', // appearance\n      'ColorInterpolator', 'CoordinateInterpolator', 'NormalInterpolator', 'OrientationInterpolator', 'PositionInterpolator', 'ScalarInterpolator', // interpolators\n      'Background', 'Fog', 'NavigationInfo', 'Viewpoint', // bindable nodes\n      'Text' // Text must be placed at the end of the regex so there are no matches for TextureTransform and TextureCoordinate\n      ]; //\n\n      const Version = createToken({\n        name: 'Version',\n        pattern: /#VRML.*/,\n        longer_alt: Identifier\n      });\n      const NodeName = createToken({\n        name: 'NodeName',\n        pattern: new RegExp(nodeTypes.join('|')),\n        longer_alt: Identifier\n      });\n      const DEF = createToken({\n        name: 'DEF',\n        pattern: /DEF/,\n        longer_alt: Identifier\n      });\n      const USE = createToken({\n        name: 'USE',\n        pattern: /USE/,\n        longer_alt: Identifier\n      });\n      const ROUTE = createToken({\n        name: 'ROUTE',\n        pattern: /ROUTE/,\n        longer_alt: Identifier\n      });\n      const TO = createToken({\n        name: 'TO',\n        pattern: /TO/,\n        longer_alt: Identifier\n      }); //\n\n      const StringLiteral = createToken({\n        name: 'StringLiteral',\n        pattern: /\"(?:[^\\\\\"\\n\\r]|\\\\[bfnrtv\"\\\\/]|\\\\u[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])*\"/\n      });\n      const HexLiteral = createToken({\n        name: 'HexLiteral',\n        pattern: /0[xX][0-9a-fA-F]+/\n      });\n      const NumberLiteral = createToken({\n        name: 'NumberLiteral',\n        pattern: /[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?/\n      });\n      const TrueLiteral = createToken({\n        name: 'TrueLiteral',\n        pattern: /TRUE/\n      });\n      const FalseLiteral = createToken({\n        name: 'FalseLiteral',\n        pattern: /FALSE/\n      });\n      const NullLiteral = createToken({\n        name: 'NullLiteral',\n        pattern: /NULL/\n      });\n      const LSquare = createToken({\n        name: 'LSquare',\n        pattern: /\\[/\n      });\n      const RSquare = createToken({\n        name: 'RSquare',\n        pattern: /]/\n      });\n      const LCurly = createToken({\n        name: 'LCurly',\n        pattern: /{/\n      });\n      const RCurly = createToken({\n        name: 'RCurly',\n        pattern: /}/\n      });\n      const Comment = createToken({\n        name: 'Comment',\n        pattern: /#.*/,\n        group: Lexer.SKIPPED // eslint-disable-line no-undef\n\n      }); // commas, blanks, tabs, newlines and carriage returns are whitespace characters wherever they appear outside of string fields\n\n      const WhiteSpace = createToken({\n        name: 'WhiteSpace',\n        pattern: /[ ,\\s]/,\n        group: Lexer.SKIPPED // eslint-disable-line no-undef\n\n      });\n      const tokens = [WhiteSpace, // keywords appear before the Identifier\n      NodeName, DEF, USE, ROUTE, TO, TrueLiteral, FalseLiteral, NullLiteral, // the Identifier must appear after the keywords because all keywords are valid identifiers\n      Version, Identifier, RouteIdentifier, StringLiteral, HexLiteral, NumberLiteral, LSquare, RSquare, LCurly, RCurly, Comment];\n      const tokenVocabulary = {};\n\n      for (let i = 0, l = tokens.length; i < l; i++) {\n        const token = tokens[i];\n        tokenVocabulary[token.name] = token;\n      }\n\n      return {\n        tokens: tokens,\n        tokenVocabulary: tokenVocabulary\n      };\n    }\n\n    function createVisitor(BaseVRMLVisitor) {\n      // the visitor is created dynmaically based on the given base class\n      function VRMLToASTVisitor() {\n        BaseVRMLVisitor.call(this);\n        this.validateVisitor();\n      }\n\n      VRMLToASTVisitor.prototype = Object.assign(Object.create(BaseVRMLVisitor.prototype), {\n        constructor: VRMLToASTVisitor,\n        vrml: function (ctx) {\n          const data = {\n            version: this.visit(ctx.version),\n            nodes: [],\n            routes: []\n          };\n\n          for (let i = 0, l = ctx.node.length; i < l; i++) {\n            const node = ctx.node[i];\n            data.nodes.push(this.visit(node));\n          }\n\n          if (ctx.route) {\n            for (let i = 0, l = ctx.route.length; i < l; i++) {\n              const route = ctx.route[i];\n              data.routes.push(this.visit(route));\n            }\n          }\n\n          return data;\n        },\n        version: function (ctx) {\n          return ctx.Version[0].image;\n        },\n        node: function (ctx) {\n          const data = {\n            name: ctx.NodeName[0].image,\n            fields: []\n          };\n\n          if (ctx.field) {\n            for (let i = 0, l = ctx.field.length; i < l; i++) {\n              const field = ctx.field[i];\n              data.fields.push(this.visit(field));\n            }\n          } // DEF\n\n\n          if (ctx.def) {\n            data.DEF = this.visit(ctx.def[0]);\n          }\n\n          return data;\n        },\n        field: function (ctx) {\n          const data = {\n            name: ctx.Identifier[0].image,\n            type: null,\n            values: null\n          };\n          let result; // SFValue\n\n          if (ctx.singleFieldValue) {\n            result = this.visit(ctx.singleFieldValue[0]);\n          } // MFValue\n\n\n          if (ctx.multiFieldValue) {\n            result = this.visit(ctx.multiFieldValue[0]);\n          }\n\n          data.type = result.type;\n          data.values = result.values;\n          return data;\n        },\n        def: function (ctx) {\n          return (ctx.Identifier || ctx.NodeName)[0].image;\n        },\n        use: function (ctx) {\n          return {\n            USE: (ctx.Identifier || ctx.NodeName)[0].image\n          };\n        },\n        singleFieldValue: function (ctx) {\n          return processField(this, ctx);\n        },\n        multiFieldValue: function (ctx) {\n          return processField(this, ctx);\n        },\n        route: function (ctx) {\n          const data = {\n            FROM: ctx.RouteIdentifier[0].image,\n            TO: ctx.RouteIdentifier[1].image\n          };\n          return data;\n        }\n      });\n\n      function processField(scope, ctx) {\n        const field = {\n          type: null,\n          values: []\n        };\n\n        if (ctx.node) {\n          field.type = 'node';\n\n          for (let i = 0, l = ctx.node.length; i < l; i++) {\n            const node = ctx.node[i];\n            field.values.push(scope.visit(node));\n          }\n        }\n\n        if (ctx.use) {\n          field.type = 'use';\n\n          for (let i = 0, l = ctx.use.length; i < l; i++) {\n            const use = ctx.use[i];\n            field.values.push(scope.visit(use));\n          }\n        }\n\n        if (ctx.StringLiteral) {\n          field.type = 'string';\n\n          for (let i = 0, l = ctx.StringLiteral.length; i < l; i++) {\n            const stringLiteral = ctx.StringLiteral[i];\n            field.values.push(stringLiteral.image.replace(/'|\"/g, ''));\n          }\n        }\n\n        if (ctx.NumberLiteral) {\n          field.type = 'number';\n\n          for (let i = 0, l = ctx.NumberLiteral.length; i < l; i++) {\n            const numberLiteral = ctx.NumberLiteral[i];\n            field.values.push(parseFloat(numberLiteral.image));\n          }\n        }\n\n        if (ctx.HexLiteral) {\n          field.type = 'hex';\n\n          for (let i = 0, l = ctx.HexLiteral.length; i < l; i++) {\n            const hexLiteral = ctx.HexLiteral[i];\n            field.values.push(hexLiteral.image);\n          }\n        }\n\n        if (ctx.TrueLiteral) {\n          field.type = 'boolean';\n\n          for (let i = 0, l = ctx.TrueLiteral.length; i < l; i++) {\n            const trueLiteral = ctx.TrueLiteral[i];\n            if (trueLiteral.image === 'TRUE') field.values.push(true);\n          }\n        }\n\n        if (ctx.FalseLiteral) {\n          field.type = 'boolean';\n\n          for (let i = 0, l = ctx.FalseLiteral.length; i < l; i++) {\n            const falseLiteral = ctx.FalseLiteral[i];\n            if (falseLiteral.image === 'FALSE') field.values.push(false);\n          }\n        }\n\n        if (ctx.NullLiteral) {\n          field.type = 'null';\n          ctx.NullLiteral.forEach(function () {\n            field.values.push(null);\n          });\n        }\n\n        return field;\n      }\n\n      return new VRMLToASTVisitor();\n    }\n\n    function parseTree(tree) {\n      // console.log( JSON.stringify( tree, null, 2 ) );\n      const nodes = tree.nodes;\n      const scene = new Scene(); // first iteration: build nodemap based on DEF statements\n\n      for (let i = 0, l = nodes.length; i < l; i++) {\n        const node = nodes[i];\n        buildNodeMap(node);\n      } // second iteration: build nodes\n\n\n      for (let i = 0, l = nodes.length; i < l; i++) {\n        const node = nodes[i];\n        const object = getNode(node);\n        if (object instanceof Object3D) scene.add(object);\n        if (node.name === 'WorldInfo') scene.userData.worldInfo = object;\n      }\n\n      return scene;\n    }\n\n    function buildNodeMap(node) {\n      if (node.DEF) {\n        nodeMap[node.DEF] = node;\n      }\n\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n\n        if (field.type === 'node') {\n          const fieldValues = field.values;\n\n          for (let j = 0, jl = fieldValues.length; j < jl; j++) {\n            buildNodeMap(fieldValues[j]);\n          }\n        }\n      }\n    }\n\n    function getNode(node) {\n      // handle case where a node refers to a different one\n      if (node.USE) {\n        return resolveUSE(node.USE);\n      }\n\n      if (node.build !== undefined) return node.build;\n      node.build = buildNode(node);\n      return node.build;\n    } // node builder\n\n\n    function buildNode(node) {\n      const nodeName = node.name;\n      let build;\n\n      switch (nodeName) {\n        case 'Group':\n        case 'Transform':\n        case 'Collision':\n          build = buildGroupingNode(node);\n          break;\n\n        case 'Background':\n          build = buildBackgroundNode(node);\n          break;\n\n        case 'Shape':\n          build = buildShapeNode(node);\n          break;\n\n        case 'Appearance':\n          build = buildAppearanceNode(node);\n          break;\n\n        case 'Material':\n          build = buildMaterialNode(node);\n          break;\n\n        case 'ImageTexture':\n          build = buildImageTextureNode(node);\n          break;\n\n        case 'PixelTexture':\n          build = buildPixelTextureNode(node);\n          break;\n\n        case 'TextureTransform':\n          build = buildTextureTransformNode(node);\n          break;\n\n        case 'IndexedFaceSet':\n          build = buildIndexedFaceSetNode(node);\n          break;\n\n        case 'IndexedLineSet':\n          build = buildIndexedLineSetNode(node);\n          break;\n\n        case 'PointSet':\n          build = buildPointSetNode(node);\n          break;\n\n        case 'Box':\n          build = buildBoxNode(node);\n          break;\n\n        case 'Cone':\n          build = buildConeNode(node);\n          break;\n\n        case 'Cylinder':\n          build = buildCylinderNode(node);\n          break;\n\n        case 'Sphere':\n          build = buildSphereNode(node);\n          break;\n\n        case 'ElevationGrid':\n          build = buildElevationGridNode(node);\n          break;\n\n        case 'Extrusion':\n          build = buildExtrusionNode(node);\n          break;\n\n        case 'Color':\n        case 'Coordinate':\n        case 'Normal':\n        case 'TextureCoordinate':\n          build = buildGeometricNode(node);\n          break;\n\n        case 'WorldInfo':\n          build = buildWorldInfoNode(node);\n          break;\n\n        case 'Anchor':\n        case 'Billboard':\n        case 'Inline':\n        case 'LOD':\n        case 'Switch':\n        case 'AudioClip':\n        case 'DirectionalLight':\n        case 'PointLight':\n        case 'Script':\n        case 'Sound':\n        case 'SpotLight':\n        case 'CylinderSensor':\n        case 'PlaneSensor':\n        case 'ProximitySensor':\n        case 'SphereSensor':\n        case 'TimeSensor':\n        case 'TouchSensor':\n        case 'VisibilitySensor':\n        case 'Text':\n        case 'FontStyle':\n        case 'MovieTexture':\n        case 'ColorInterpolator':\n        case 'CoordinateInterpolator':\n        case 'NormalInterpolator':\n        case 'OrientationInterpolator':\n        case 'PositionInterpolator':\n        case 'ScalarInterpolator':\n        case 'Fog':\n        case 'NavigationInfo':\n        case 'Viewpoint':\n          // node not supported yet\n          break;\n\n        default:\n          console.warn('THREE.VRMLLoader: Unknown node:', nodeName);\n          break;\n      }\n\n      if (build !== undefined && node.DEF !== undefined && build.hasOwnProperty('name') === true) {\n        build.name = node.DEF;\n      }\n\n      return build;\n    }\n\n    function buildGroupingNode(node) {\n      const object = new Group(); //\n\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'bboxCenter':\n            // field not supported\n            break;\n\n          case 'bboxSize':\n            // field not supported\n            break;\n\n          case 'center':\n            // field not supported\n            break;\n\n          case 'children':\n            parseFieldChildren(fieldValues, object);\n            break;\n\n          case 'collide':\n            // field not supported\n            break;\n\n          case 'rotation':\n            const axis = new Vector3(fieldValues[0], fieldValues[1], fieldValues[2]);\n            const angle = fieldValues[3];\n            object.quaternion.setFromAxisAngle(axis, angle);\n            break;\n\n          case 'scale':\n            object.scale.set(fieldValues[0], fieldValues[1], fieldValues[2]);\n            break;\n\n          case 'scaleOrientation':\n            // field not supported\n            break;\n\n          case 'translation':\n            object.position.set(fieldValues[0], fieldValues[1], fieldValues[2]);\n            break;\n\n          case 'proxy':\n            // field not supported\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      return object;\n    }\n\n    function buildBackgroundNode(node) {\n      const group = new Group();\n      let groundAngle, groundColor;\n      let skyAngle, skyColor;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'groundAngle':\n            groundAngle = fieldValues;\n            break;\n\n          case 'groundColor':\n            groundColor = fieldValues;\n            break;\n\n          case 'backUrl':\n            // field not supported\n            break;\n\n          case 'bottomUrl':\n            // field not supported\n            break;\n\n          case 'frontUrl':\n            // field not supported\n            break;\n\n          case 'leftUrl':\n            // field not supported\n            break;\n\n          case 'rightUrl':\n            // field not supported\n            break;\n\n          case 'topUrl':\n            // field not supported\n            break;\n\n          case 'skyAngle':\n            skyAngle = fieldValues;\n            break;\n\n          case 'skyColor':\n            skyColor = fieldValues;\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      const radius = 10000; // sky\n\n      if (skyColor) {\n        const skyGeometry = new SphereGeometry(radius, 32, 16);\n        const skyMaterial = new MeshBasicMaterial({\n          fog: false,\n          side: BackSide,\n          depthWrite: false,\n          depthTest: false\n        });\n\n        if (skyColor.length > 3) {\n          paintFaces(skyGeometry, radius, skyAngle, toColorArray(skyColor), true);\n          skyMaterial.vertexColors = true;\n        } else {\n          skyMaterial.color.setRGB(skyColor[0], skyColor[1], skyColor[2]);\n        }\n\n        const sky = new Mesh(skyGeometry, skyMaterial);\n        group.add(sky);\n      } // ground\n\n\n      if (groundColor) {\n        if (groundColor.length > 0) {\n          const groundGeometry = new SphereGeometry(radius, 32, 16, 0, 2 * Math.PI, 0.5 * Math.PI, 1.5 * Math.PI);\n          const groundMaterial = new MeshBasicMaterial({\n            fog: false,\n            side: BackSide,\n            vertexColors: true,\n            depthWrite: false,\n            depthTest: false\n          });\n          paintFaces(groundGeometry, radius, groundAngle, toColorArray(groundColor), false);\n          const ground = new Mesh(groundGeometry, groundMaterial);\n          group.add(ground);\n        }\n      } // render background group first\n\n\n      group.renderOrder = -Infinity;\n      return group;\n    }\n\n    function buildShapeNode(node) {\n      const fields = node.fields; // if the appearance field is NULL or unspecified, lighting is off and the unlit object color is (0, 0, 0)\n\n      let material = new MeshBasicMaterial({\n        color: 0x000000\n      });\n      let geometry;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'appearance':\n            if (fieldValues[0] !== null) {\n              material = getNode(fieldValues[0]);\n            }\n\n            break;\n\n          case 'geometry':\n            if (fieldValues[0] !== null) {\n              geometry = getNode(fieldValues[0]);\n            }\n\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      } // build 3D object\n\n\n      let object;\n\n      if (geometry && geometry.attributes.position) {\n        const type = geometry._type;\n\n        if (type === 'points') {\n          // points\n          const pointsMaterial = new PointsMaterial({\n            color: 0xffffff\n          });\n\n          if (geometry.attributes.color !== undefined) {\n            pointsMaterial.vertexColors = true;\n          } else {\n            // if the color field is NULL and there is a material defined for the appearance affecting this PointSet, then use the emissiveColor of the material to draw the points\n            if (material.isMeshPhongMaterial) {\n              pointsMaterial.color.copy(material.emissive);\n            }\n          }\n\n          object = new Points(geometry, pointsMaterial);\n        } else if (type === 'line') {\n          // lines\n          const lineMaterial = new LineBasicMaterial({\n            color: 0xffffff\n          });\n\n          if (geometry.attributes.color !== undefined) {\n            lineMaterial.vertexColors = true;\n          } else {\n            // if the color field is NULL and there is a material defined for the appearance affecting this IndexedLineSet, then use the emissiveColor of the material to draw the lines\n            if (material.isMeshPhongMaterial) {\n              lineMaterial.color.copy(material.emissive);\n            }\n          }\n\n          object = new LineSegments(geometry, lineMaterial);\n        } else {\n          // consider meshes\n          // check \"solid\" hint (it's placed in the geometry but affects the material)\n          if (geometry._solid !== undefined) {\n            material.side = geometry._solid ? FrontSide : DoubleSide;\n          } // check for vertex colors\n\n\n          if (geometry.attributes.color !== undefined) {\n            material.vertexColors = true;\n          }\n\n          object = new Mesh(geometry, material);\n        }\n      } else {\n        object = new Object3D(); // if the geometry field is NULL or no vertices are defined the object is not drawn\n\n        object.visible = false;\n      }\n\n      return object;\n    }\n\n    function buildAppearanceNode(node) {\n      let material = new MeshPhongMaterial();\n      let transformData;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'material':\n            if (fieldValues[0] !== null) {\n              const materialData = getNode(fieldValues[0]);\n              if (materialData.diffuseColor) material.color.copy(materialData.diffuseColor);\n              if (materialData.emissiveColor) material.emissive.copy(materialData.emissiveColor);\n              if (materialData.shininess) material.shininess = materialData.shininess;\n              if (materialData.specularColor) material.specular.copy(materialData.specularColor);\n              if (materialData.transparency) material.opacity = 1 - materialData.transparency;\n              if (materialData.transparency > 0) material.transparent = true;\n            } else {\n              // if the material field is NULL or unspecified, lighting is off and the unlit object color is (0, 0, 0)\n              material = new MeshBasicMaterial({\n                color: 0x000000\n              });\n            }\n\n            break;\n\n          case 'texture':\n            const textureNode = fieldValues[0];\n\n            if (textureNode !== null) {\n              if (textureNode.name === 'ImageTexture' || textureNode.name === 'PixelTexture') {\n                material.map = getNode(textureNode);\n              }\n            }\n\n            break;\n\n          case 'textureTransform':\n            if (fieldValues[0] !== null) {\n              transformData = getNode(fieldValues[0]);\n            }\n\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      } // only apply texture transform data if a texture was defined\n\n\n      if (material.map) {\n        // respect VRML lighting model\n        if (material.map.__type) {\n          switch (material.map.__type) {\n            case TEXTURE_TYPE.INTENSITY_ALPHA:\n              material.opacity = 1; // ignore transparency\n\n              break;\n\n            case TEXTURE_TYPE.RGB:\n              material.color.set(0xffffff); // ignore material color\n\n              break;\n\n            case TEXTURE_TYPE.RGBA:\n              material.color.set(0xffffff); // ignore material color\n\n              material.opacity = 1; // ignore transparency\n\n              break;\n          }\n\n          delete material.map.__type;\n        } // apply texture transform\n\n\n        if (transformData) {\n          material.map.center.copy(transformData.center);\n          material.map.rotation = transformData.rotation;\n          material.map.repeat.copy(transformData.scale);\n          material.map.offset.copy(transformData.translation);\n        }\n      }\n\n      return material;\n    }\n\n    function buildMaterialNode(node) {\n      const materialData = {};\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'ambientIntensity':\n            // field not supported\n            break;\n\n          case 'diffuseColor':\n            materialData.diffuseColor = new Color(fieldValues[0], fieldValues[1], fieldValues[2]);\n            break;\n\n          case 'emissiveColor':\n            materialData.emissiveColor = new Color(fieldValues[0], fieldValues[1], fieldValues[2]);\n            break;\n\n          case 'shininess':\n            materialData.shininess = fieldValues[0];\n            break;\n\n          case 'specularColor':\n            materialData.emissiveColor = new Color(fieldValues[0], fieldValues[1], fieldValues[2]);\n            break;\n\n          case 'transparency':\n            materialData.transparency = fieldValues[0];\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      return materialData;\n    }\n\n    function parseHexColor(hex, textureType, color) {\n      let value;\n\n      switch (textureType) {\n        case TEXTURE_TYPE.INTENSITY:\n          // Intensity texture: A one-component image specifies one-byte hexadecimal or integer values representing the intensity of the image\n          value = parseInt(hex);\n          color.r = value;\n          color.g = value;\n          color.b = value;\n          color.a = 1;\n          break;\n\n        case TEXTURE_TYPE.INTENSITY_ALPHA:\n          // Intensity+Alpha texture: A two-component image specifies the intensity in the first (high) byte and the alpha opacity in the second (low) byte.\n          value = parseInt('0x' + hex.substring(2, 4));\n          color.r = value;\n          color.g = value;\n          color.b = value;\n          color.a = parseInt('0x' + hex.substring(4, 6));\n          break;\n\n        case TEXTURE_TYPE.RGB:\n          // RGB texture: Pixels in a three-component image specify the red component in the first (high) byte, followed by the green and blue components\n          color.r = parseInt('0x' + hex.substring(2, 4));\n          color.g = parseInt('0x' + hex.substring(4, 6));\n          color.b = parseInt('0x' + hex.substring(6, 8));\n          color.a = 1;\n          break;\n\n        case TEXTURE_TYPE.RGBA:\n          // RGBA texture: Four-component images specify the alpha opacity byte after red/green/blue\n          color.r = parseInt('0x' + hex.substring(2, 4));\n          color.g = parseInt('0x' + hex.substring(4, 6));\n          color.b = parseInt('0x' + hex.substring(6, 8));\n          color.a = parseInt('0x' + hex.substring(8, 10));\n          break;\n      }\n    }\n\n    function getTextureType(num_components) {\n      let type;\n\n      switch (num_components) {\n        case 1:\n          type = TEXTURE_TYPE.INTENSITY;\n          break;\n\n        case 2:\n          type = TEXTURE_TYPE.INTENSITY_ALPHA;\n          break;\n\n        case 3:\n          type = TEXTURE_TYPE.RGB;\n          break;\n\n        case 4:\n          type = TEXTURE_TYPE.RGBA;\n          break;\n      }\n\n      return type;\n    }\n\n    function buildPixelTextureNode(node) {\n      let texture;\n      let wrapS = RepeatWrapping;\n      let wrapT = RepeatWrapping;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'image':\n            const width = fieldValues[0];\n            const height = fieldValues[1];\n            const num_components = fieldValues[2];\n            const textureType = getTextureType(num_components);\n            const data = new Uint8Array(4 * width * height);\n            const color = {\n              r: 0,\n              g: 0,\n              b: 0,\n              a: 0\n            };\n\n            for (let j = 3, k = 0, jl = fieldValues.length; j < jl; j++, k++) {\n              parseHexColor(fieldValues[j], textureType, color);\n              const stride = k * 4;\n              data[stride + 0] = color.r;\n              data[stride + 1] = color.g;\n              data[stride + 2] = color.b;\n              data[stride + 3] = color.a;\n            }\n\n            texture = new DataTexture(data, width, height);\n            texture.needsUpdate = true;\n            texture.__type = textureType; // needed for material modifications\n\n            break;\n\n          case 'repeatS':\n            if (fieldValues[0] === false) wrapS = ClampToEdgeWrapping;\n            break;\n\n          case 'repeatT':\n            if (fieldValues[0] === false) wrapT = ClampToEdgeWrapping;\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      if (texture) {\n        texture.wrapS = wrapS;\n        texture.wrapT = wrapT;\n      }\n\n      return texture;\n    }\n\n    function buildImageTextureNode(node) {\n      let texture;\n      let wrapS = RepeatWrapping;\n      let wrapT = RepeatWrapping;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'url':\n            const url = fieldValues[0];\n            if (url) texture = textureLoader.load(url);\n            break;\n\n          case 'repeatS':\n            if (fieldValues[0] === false) wrapS = ClampToEdgeWrapping;\n            break;\n\n          case 'repeatT':\n            if (fieldValues[0] === false) wrapT = ClampToEdgeWrapping;\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      if (texture) {\n        texture.wrapS = wrapS;\n        texture.wrapT = wrapT;\n      }\n\n      return texture;\n    }\n\n    function buildTextureTransformNode(node) {\n      const transformData = {\n        center: new Vector2(),\n        rotation: new Vector2(),\n        scale: new Vector2(),\n        translation: new Vector2()\n      };\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'center':\n            transformData.center.set(fieldValues[0], fieldValues[1]);\n            break;\n\n          case 'rotation':\n            transformData.rotation = fieldValues[0];\n            break;\n\n          case 'scale':\n            transformData.scale.set(fieldValues[0], fieldValues[1]);\n            break;\n\n          case 'translation':\n            transformData.translation.set(fieldValues[0], fieldValues[1]);\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      return transformData;\n    }\n\n    function buildGeometricNode(node) {\n      return node.fields[0].values;\n    }\n\n    function buildWorldInfoNode(node) {\n      const worldInfo = {};\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'title':\n            worldInfo.title = fieldValues[0];\n            break;\n\n          case 'info':\n            worldInfo.info = fieldValues;\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      return worldInfo;\n    }\n\n    function buildIndexedFaceSetNode(node) {\n      let color, coord, normal, texCoord;\n      let ccw = true,\n          solid = true,\n          creaseAngle = 0;\n      let colorIndex, coordIndex, normalIndex, texCoordIndex;\n      let colorPerVertex = true,\n          normalPerVertex = true;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'color':\n            const colorNode = fieldValues[0];\n\n            if (colorNode !== null) {\n              color = getNode(colorNode);\n            }\n\n            break;\n\n          case 'coord':\n            const coordNode = fieldValues[0];\n\n            if (coordNode !== null) {\n              coord = getNode(coordNode);\n            }\n\n            break;\n\n          case 'normal':\n            const normalNode = fieldValues[0];\n\n            if (normalNode !== null) {\n              normal = getNode(normalNode);\n            }\n\n            break;\n\n          case 'texCoord':\n            const texCoordNode = fieldValues[0];\n\n            if (texCoordNode !== null) {\n              texCoord = getNode(texCoordNode);\n            }\n\n            break;\n\n          case 'ccw':\n            ccw = fieldValues[0];\n            break;\n\n          case 'colorIndex':\n            colorIndex = fieldValues;\n            break;\n\n          case 'colorPerVertex':\n            colorPerVertex = fieldValues[0];\n            break;\n\n          case 'convex':\n            // field not supported\n            break;\n\n          case 'coordIndex':\n            coordIndex = fieldValues;\n            break;\n\n          case 'creaseAngle':\n            creaseAngle = fieldValues[0];\n            break;\n\n          case 'normalIndex':\n            normalIndex = fieldValues;\n            break;\n\n          case 'normalPerVertex':\n            normalPerVertex = fieldValues[0];\n            break;\n\n          case 'solid':\n            solid = fieldValues[0];\n            break;\n\n          case 'texCoordIndex':\n            texCoordIndex = fieldValues;\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      if (coordIndex === undefined) {\n        console.warn('THREE.VRMLLoader: Missing coordIndex.');\n        return new BufferGeometry(); // handle VRML files with incomplete geometry definition\n      }\n\n      const triangulatedCoordIndex = triangulateFaceIndex(coordIndex, ccw);\n      let colorAttribute;\n      let normalAttribute;\n      let uvAttribute;\n\n      if (color) {\n        if (colorPerVertex === true) {\n          if (colorIndex && colorIndex.length > 0) {\n            // if the colorIndex field is not empty, then it is used to choose colors for each vertex of the IndexedFaceSet.\n            const triangulatedColorIndex = triangulateFaceIndex(colorIndex, ccw);\n            colorAttribute = computeAttributeFromIndexedData(triangulatedCoordIndex, triangulatedColorIndex, color, 3);\n          } else {\n            // if the colorIndex field is empty, then the coordIndex field is used to choose colors from the Color node\n            colorAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new Float32BufferAttribute(color, 3));\n          }\n        } else {\n          if (colorIndex && colorIndex.length > 0) {\n            // if the colorIndex field is not empty, then they are used to choose one color for each face of the IndexedFaceSet\n            const flattenFaceColors = flattenData(color, colorIndex);\n            const triangulatedFaceColors = triangulateFaceData(flattenFaceColors, coordIndex);\n            colorAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, triangulatedFaceColors);\n          } else {\n            // if the colorIndex field is empty, then the color are applied to each face of the IndexedFaceSet in order\n            const triangulatedFaceColors = triangulateFaceData(color, coordIndex);\n            colorAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, triangulatedFaceColors);\n          }\n        }\n      }\n\n      if (normal) {\n        if (normalPerVertex === true) {\n          // consider vertex normals\n          if (normalIndex && normalIndex.length > 0) {\n            // if the normalIndex field is not empty, then it is used to choose normals for each vertex of the IndexedFaceSet.\n            const triangulatedNormalIndex = triangulateFaceIndex(normalIndex, ccw);\n            normalAttribute = computeAttributeFromIndexedData(triangulatedCoordIndex, triangulatedNormalIndex, normal, 3);\n          } else {\n            // if the normalIndex field is empty, then the coordIndex field is used to choose normals from the Normal node\n            normalAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new Float32BufferAttribute(normal, 3));\n          }\n        } else {\n          // consider face normals\n          if (normalIndex && normalIndex.length > 0) {\n            // if the normalIndex field is not empty, then they are used to choose one normal for each face of the IndexedFaceSet\n            const flattenFaceNormals = flattenData(normal, normalIndex);\n            const triangulatedFaceNormals = triangulateFaceData(flattenFaceNormals, coordIndex);\n            normalAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, triangulatedFaceNormals);\n          } else {\n            // if the normalIndex field is empty, then the normals are applied to each face of the IndexedFaceSet in order\n            const triangulatedFaceNormals = triangulateFaceData(normal, coordIndex);\n            normalAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, triangulatedFaceNormals);\n          }\n        }\n      } else {\n        // if the normal field is NULL, then the loader should automatically generate normals, using creaseAngle to determine if and how normals are smoothed across shared vertices\n        normalAttribute = computeNormalAttribute(triangulatedCoordIndex, coord, creaseAngle);\n      }\n\n      if (texCoord) {\n        // texture coordinates are always defined on vertex level\n        if (texCoordIndex && texCoordIndex.length > 0) {\n          // if the texCoordIndex field is not empty, then it is used to choose texture coordinates for each vertex of the IndexedFaceSet.\n          const triangulatedTexCoordIndex = triangulateFaceIndex(texCoordIndex, ccw);\n          uvAttribute = computeAttributeFromIndexedData(triangulatedCoordIndex, triangulatedTexCoordIndex, texCoord, 2);\n        } else {\n          // if the texCoordIndex field is empty, then the coordIndex array is used to choose texture coordinates from the TextureCoordinate node\n          uvAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new Float32BufferAttribute(texCoord, 2));\n        }\n      }\n\n      const geometry = new BufferGeometry();\n      const positionAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new Float32BufferAttribute(coord, 3));\n      geometry.setAttribute('position', positionAttribute);\n      geometry.setAttribute('normal', normalAttribute); // optional attributes\n\n      if (colorAttribute) geometry.setAttribute('color', colorAttribute);\n      if (uvAttribute) geometry.setAttribute('uv', uvAttribute); // \"solid\" influences the material so let's store it for later use\n\n      geometry._solid = solid;\n      geometry._type = 'mesh';\n      return geometry;\n    }\n\n    function buildIndexedLineSetNode(node) {\n      let color, coord;\n      let colorIndex, coordIndex;\n      let colorPerVertex = true;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'color':\n            const colorNode = fieldValues[0];\n\n            if (colorNode !== null) {\n              color = getNode(colorNode);\n            }\n\n            break;\n\n          case 'coord':\n            const coordNode = fieldValues[0];\n\n            if (coordNode !== null) {\n              coord = getNode(coordNode);\n            }\n\n            break;\n\n          case 'colorIndex':\n            colorIndex = fieldValues;\n            break;\n\n          case 'colorPerVertex':\n            colorPerVertex = fieldValues[0];\n            break;\n\n          case 'coordIndex':\n            coordIndex = fieldValues;\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      } // build lines\n\n\n      let colorAttribute;\n      const expandedLineIndex = expandLineIndex(coordIndex); // create an index for three.js's linesegment primitive\n\n      if (color) {\n        if (colorPerVertex === true) {\n          if (colorIndex.length > 0) {\n            // if the colorIndex field is not empty, then one color is used for each polyline of the IndexedLineSet.\n            const expandedColorIndex = expandLineIndex(colorIndex); // compute colors for each line segment (rendering primitve)\n\n            colorAttribute = computeAttributeFromIndexedData(expandedLineIndex, expandedColorIndex, color, 3); // compute data on vertex level\n          } else {\n            // if the colorIndex field is empty, then the colors are applied to each polyline of the IndexedLineSet in order.\n            colorAttribute = toNonIndexedAttribute(expandedLineIndex, new Float32BufferAttribute(color, 3));\n          }\n        } else {\n          if (colorIndex.length > 0) {\n            // if the colorIndex field is not empty, then colors are applied to each vertex of the IndexedLineSet\n            const flattenLineColors = flattenData(color, colorIndex); // compute colors for each VRML primitve\n\n            const expandedLineColors = expandLineData(flattenLineColors, coordIndex); // compute colors for each line segment (rendering primitve)\n\n            colorAttribute = computeAttributeFromLineData(expandedLineIndex, expandedLineColors); // compute data on vertex level\n          } else {\n            // if the colorIndex field is empty, then the coordIndex field is used to choose colors from the Color node\n            const expandedLineColors = expandLineData(color, coordIndex); // compute colors for each line segment (rendering primitve)\n\n            colorAttribute = computeAttributeFromLineData(expandedLineIndex, expandedLineColors); // compute data on vertex level\n          }\n        }\n      } //\n\n\n      const geometry = new BufferGeometry();\n      const positionAttribute = toNonIndexedAttribute(expandedLineIndex, new Float32BufferAttribute(coord, 3));\n      geometry.setAttribute('position', positionAttribute);\n      if (colorAttribute) geometry.setAttribute('color', colorAttribute);\n      geometry._type = 'line';\n      return geometry;\n    }\n\n    function buildPointSetNode(node) {\n      let color, coord;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'color':\n            const colorNode = fieldValues[0];\n\n            if (colorNode !== null) {\n              color = getNode(colorNode);\n            }\n\n            break;\n\n          case 'coord':\n            const coordNode = fieldValues[0];\n\n            if (coordNode !== null) {\n              coord = getNode(coordNode);\n            }\n\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      const geometry = new BufferGeometry();\n      geometry.setAttribute('position', new Float32BufferAttribute(coord, 3));\n      if (color) geometry.setAttribute('color', new Float32BufferAttribute(color, 3));\n      geometry._type = 'points';\n      return geometry;\n    }\n\n    function buildBoxNode(node) {\n      const size = new Vector3(2, 2, 2);\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'size':\n            size.x = fieldValues[0];\n            size.y = fieldValues[1];\n            size.z = fieldValues[2];\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      const geometry = new BoxGeometry(size.x, size.y, size.z);\n      return geometry;\n    }\n\n    function buildConeNode(node) {\n      let radius = 1,\n          height = 2,\n          openEnded = false;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'bottom':\n            openEnded = !fieldValues[0];\n            break;\n\n          case 'bottomRadius':\n            radius = fieldValues[0];\n            break;\n\n          case 'height':\n            height = fieldValues[0];\n            break;\n\n          case 'side':\n            // field not supported\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      const geometry = new ConeGeometry(radius, height, 16, 1, openEnded);\n      return geometry;\n    }\n\n    function buildCylinderNode(node) {\n      let radius = 1,\n          height = 2;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'bottom':\n            // field not supported\n            break;\n\n          case 'radius':\n            radius = fieldValues[0];\n            break;\n\n          case 'height':\n            height = fieldValues[0];\n            break;\n\n          case 'side':\n            // field not supported\n            break;\n\n          case 'top':\n            // field not supported\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      const geometry = new CylinderGeometry(radius, radius, height, 16, 1);\n      return geometry;\n    }\n\n    function buildSphereNode(node) {\n      let radius = 1;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'radius':\n            radius = fieldValues[0];\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      const geometry = new SphereGeometry(radius, 16, 16);\n      return geometry;\n    }\n\n    function buildElevationGridNode(node) {\n      let color;\n      let normal;\n      let texCoord;\n      let height;\n      let colorPerVertex = true;\n      let normalPerVertex = true;\n      let solid = true;\n      let ccw = true;\n      let creaseAngle = 0;\n      let xDimension = 2;\n      let zDimension = 2;\n      let xSpacing = 1;\n      let zSpacing = 1;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'color':\n            const colorNode = fieldValues[0];\n\n            if (colorNode !== null) {\n              color = getNode(colorNode);\n            }\n\n            break;\n\n          case 'normal':\n            const normalNode = fieldValues[0];\n\n            if (normalNode !== null) {\n              normal = getNode(normalNode);\n            }\n\n            break;\n\n          case 'texCoord':\n            const texCoordNode = fieldValues[0];\n\n            if (texCoordNode !== null) {\n              texCoord = getNode(texCoordNode);\n            }\n\n            break;\n\n          case 'height':\n            height = fieldValues;\n            break;\n\n          case 'ccw':\n            ccw = fieldValues[0];\n            break;\n\n          case 'colorPerVertex':\n            colorPerVertex = fieldValues[0];\n            break;\n\n          case 'creaseAngle':\n            creaseAngle = fieldValues[0];\n            break;\n\n          case 'normalPerVertex':\n            normalPerVertex = fieldValues[0];\n            break;\n\n          case 'solid':\n            solid = fieldValues[0];\n            break;\n\n          case 'xDimension':\n            xDimension = fieldValues[0];\n            break;\n\n          case 'xSpacing':\n            xSpacing = fieldValues[0];\n            break;\n\n          case 'zDimension':\n            zDimension = fieldValues[0];\n            break;\n\n          case 'zSpacing':\n            zSpacing = fieldValues[0];\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      } // vertex data\n\n\n      const vertices = [];\n      const normals = [];\n      const colors = [];\n      const uvs = [];\n\n      for (let i = 0; i < zDimension; i++) {\n        for (let j = 0; j < xDimension; j++) {\n          // compute a row major index\n          const index = i * xDimension + j; // vertices\n\n          const x = xSpacing * i;\n          const y = height[index];\n          const z = zSpacing * j;\n          vertices.push(x, y, z); // colors\n\n          if (color && colorPerVertex === true) {\n            const r = color[index * 3 + 0];\n            const g = color[index * 3 + 1];\n            const b = color[index * 3 + 2];\n            colors.push(r, g, b);\n          } // normals\n\n\n          if (normal && normalPerVertex === true) {\n            const xn = normal[index * 3 + 0];\n            const yn = normal[index * 3 + 1];\n            const zn = normal[index * 3 + 2];\n            normals.push(xn, yn, zn);\n          } // uvs\n\n\n          if (texCoord) {\n            const s = texCoord[index * 2 + 0];\n            const t = texCoord[index * 2 + 1];\n            uvs.push(s, t);\n          } else {\n            uvs.push(i / (xDimension - 1), j / (zDimension - 1));\n          }\n        }\n      } // indices\n\n\n      const indices = [];\n\n      for (let i = 0; i < xDimension - 1; i++) {\n        for (let j = 0; j < zDimension - 1; j++) {\n          // from https://tecfa.unige.ch/guides/vrml/vrml97/spec/part1/nodesRef.html#ElevationGrid\n          const a = i + j * xDimension;\n          const b = i + (j + 1) * xDimension;\n          const c = i + 1 + (j + 1) * xDimension;\n          const d = i + 1 + j * xDimension; // faces\n\n          if (ccw === true) {\n            indices.push(a, c, b);\n            indices.push(c, a, d);\n          } else {\n            indices.push(a, b, c);\n            indices.push(c, d, a);\n          }\n        }\n      } //\n\n\n      const positionAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(vertices, 3));\n      const uvAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(uvs, 2));\n      let colorAttribute;\n      let normalAttribute; // color attribute\n\n      if (color) {\n        if (colorPerVertex === false) {\n          for (let i = 0; i < xDimension - 1; i++) {\n            for (let j = 0; j < zDimension - 1; j++) {\n              const index = i + j * (xDimension - 1);\n              const r = color[index * 3 + 0];\n              const g = color[index * 3 + 1];\n              const b = color[index * 3 + 2]; // one color per quad\n\n              colors.push(r, g, b);\n              colors.push(r, g, b);\n              colors.push(r, g, b);\n              colors.push(r, g, b);\n              colors.push(r, g, b);\n              colors.push(r, g, b);\n            }\n          }\n\n          colorAttribute = new Float32BufferAttribute(colors, 3);\n        } else {\n          colorAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(colors, 3));\n        }\n      } // normal attribute\n\n\n      if (normal) {\n        if (normalPerVertex === false) {\n          for (let i = 0; i < xDimension - 1; i++) {\n            for (let j = 0; j < zDimension - 1; j++) {\n              const index = i + j * (xDimension - 1);\n              const xn = normal[index * 3 + 0];\n              const yn = normal[index * 3 + 1];\n              const zn = normal[index * 3 + 2]; // one normal per quad\n\n              normals.push(xn, yn, zn);\n              normals.push(xn, yn, zn);\n              normals.push(xn, yn, zn);\n              normals.push(xn, yn, zn);\n              normals.push(xn, yn, zn);\n              normals.push(xn, yn, zn);\n            }\n          }\n\n          normalAttribute = new Float32BufferAttribute(normals, 3);\n        } else {\n          normalAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(normals, 3));\n        }\n      } else {\n        normalAttribute = computeNormalAttribute(indices, vertices, creaseAngle);\n      } // build geometry\n\n\n      const geometry = new BufferGeometry();\n      geometry.setAttribute('position', positionAttribute);\n      geometry.setAttribute('normal', normalAttribute);\n      geometry.setAttribute('uv', uvAttribute);\n      if (colorAttribute) geometry.setAttribute('color', colorAttribute); // \"solid\" influences the material so let's store it for later use\n\n      geometry._solid = solid;\n      geometry._type = 'mesh';\n      return geometry;\n    }\n\n    function buildExtrusionNode(node) {\n      let crossSection = [1, 1, 1, -1, -1, -1, -1, 1, 1, 1];\n      let spine = [0, 0, 0, 0, 1, 0];\n      let scale;\n      let orientation;\n      let beginCap = true;\n      let ccw = true;\n      let creaseAngle = 0;\n      let endCap = true;\n      let solid = true;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'beginCap':\n            beginCap = fieldValues[0];\n            break;\n\n          case 'ccw':\n            ccw = fieldValues[0];\n            break;\n\n          case 'convex':\n            // field not supported\n            break;\n\n          case 'creaseAngle':\n            creaseAngle = fieldValues[0];\n            break;\n\n          case 'crossSection':\n            crossSection = fieldValues;\n            break;\n\n          case 'endCap':\n            endCap = fieldValues[0];\n            break;\n\n          case 'orientation':\n            orientation = fieldValues;\n            break;\n\n          case 'scale':\n            scale = fieldValues;\n            break;\n\n          case 'solid':\n            solid = fieldValues[0];\n            break;\n\n          case 'spine':\n            spine = fieldValues; // only extrusion along the Y-axis are supported so far\n\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      const crossSectionClosed = crossSection[0] === crossSection[crossSection.length - 2] && crossSection[1] === crossSection[crossSection.length - 1]; // vertices\n\n      const vertices = [];\n      const spineVector = new Vector3();\n      const scaling = new Vector3();\n      const axis = new Vector3();\n      const vertex = new Vector3();\n      const quaternion = new Quaternion();\n\n      for (let i = 0, j = 0, o = 0, il = spine.length; i < il; i += 3, j += 2, o += 4) {\n        spineVector.fromArray(spine, i);\n        scaling.x = scale ? scale[j + 0] : 1;\n        scaling.y = 1;\n        scaling.z = scale ? scale[j + 1] : 1;\n        axis.x = orientation ? orientation[o + 0] : 0;\n        axis.y = orientation ? orientation[o + 1] : 0;\n        axis.z = orientation ? orientation[o + 2] : 1;\n        const angle = orientation ? orientation[o + 3] : 0;\n\n        for (let k = 0, kl = crossSection.length; k < kl; k += 2) {\n          vertex.x = crossSection[k + 0];\n          vertex.y = 0;\n          vertex.z = crossSection[k + 1]; // scale\n\n          vertex.multiply(scaling); // rotate\n\n          quaternion.setFromAxisAngle(axis, angle);\n          vertex.applyQuaternion(quaternion); // translate\n\n          vertex.add(spineVector);\n          vertices.push(vertex.x, vertex.y, vertex.z);\n        }\n      } // indices\n\n\n      const indices = [];\n      const spineCount = spine.length / 3;\n      const crossSectionCount = crossSection.length / 2;\n\n      for (let i = 0; i < spineCount - 1; i++) {\n        for (let j = 0; j < crossSectionCount - 1; j++) {\n          const a = j + i * crossSectionCount;\n          let b = j + 1 + i * crossSectionCount;\n          const c = j + (i + 1) * crossSectionCount;\n          let d = j + 1 + (i + 1) * crossSectionCount;\n\n          if (j === crossSectionCount - 2 && crossSectionClosed === true) {\n            b = i * crossSectionCount;\n            d = (i + 1) * crossSectionCount;\n          }\n\n          if (ccw === true) {\n            indices.push(a, b, c);\n            indices.push(c, b, d);\n          } else {\n            indices.push(a, c, b);\n            indices.push(c, d, b);\n          }\n        }\n      } // triangulate cap\n\n\n      if (beginCap === true || endCap === true) {\n        const contour = [];\n\n        for (let i = 0, l = crossSection.length; i < l; i += 2) {\n          contour.push(new Vector2(crossSection[i], crossSection[i + 1]));\n        }\n\n        const faces = ShapeUtils.triangulateShape(contour, []);\n        const capIndices = [];\n\n        for (let i = 0, l = faces.length; i < l; i++) {\n          const face = faces[i];\n          capIndices.push(face[0], face[1], face[2]);\n        } // begin cap\n\n\n        if (beginCap === true) {\n          for (let i = 0, l = capIndices.length; i < l; i += 3) {\n            if (ccw === true) {\n              indices.push(capIndices[i + 0], capIndices[i + 1], capIndices[i + 2]);\n            } else {\n              indices.push(capIndices[i + 0], capIndices[i + 2], capIndices[i + 1]);\n            }\n          }\n        } // end cap\n\n\n        if (endCap === true) {\n          const indexOffset = crossSectionCount * (spineCount - 1); // references to the first vertex of the last cross section\n\n          for (let i = 0, l = capIndices.length; i < l; i += 3) {\n            if (ccw === true) {\n              indices.push(indexOffset + capIndices[i + 0], indexOffset + capIndices[i + 2], indexOffset + capIndices[i + 1]);\n            } else {\n              indices.push(indexOffset + capIndices[i + 0], indexOffset + capIndices[i + 1], indexOffset + capIndices[i + 2]);\n            }\n          }\n        }\n      }\n\n      const positionAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(vertices, 3));\n      const normalAttribute = computeNormalAttribute(indices, vertices, creaseAngle);\n      const geometry = new BufferGeometry();\n      geometry.setAttribute('position', positionAttribute);\n      geometry.setAttribute('normal', normalAttribute); // no uvs yet\n      // \"solid\" influences the material so let's store it for later use\n\n      geometry._solid = solid;\n      geometry._type = 'mesh';\n      return geometry;\n    } // helper functions\n\n\n    function resolveUSE(identifier) {\n      const node = nodeMap[identifier];\n      const build = getNode(node); // because the same 3D objects can have different transformations, it's necessary to clone them.\n      // materials can be influenced by the geometry (e.g. vertex normals). cloning is necessary to avoid\n      // any side effects\n\n      return build.isObject3D || build.isMaterial ? build.clone() : build;\n    }\n\n    function parseFieldChildren(children, owner) {\n      for (let i = 0, l = children.length; i < l; i++) {\n        const object = getNode(children[i]);\n        if (object instanceof Object3D) owner.add(object);\n      }\n    }\n\n    function triangulateFaceIndex(index, ccw) {\n      const indices = []; // since face defintions can have more than three vertices, it's necessary to\n      // perform a simple triangulation\n\n      let start = 0;\n\n      for (let i = 0, l = index.length; i < l; i++) {\n        const i1 = index[start];\n        const i2 = index[i + (ccw ? 1 : 2)];\n        const i3 = index[i + (ccw ? 2 : 1)];\n        indices.push(i1, i2, i3); // an index of -1 indicates that the current face has ended and the next one begins\n\n        if (index[i + 3] === -1 || i + 3 >= l) {\n          i += 3;\n          start = i + 1;\n        }\n      }\n\n      return indices;\n    }\n\n    function triangulateFaceData(data, index) {\n      const triangulatedData = [];\n      let start = 0;\n\n      for (let i = 0, l = index.length; i < l; i++) {\n        const stride = start * 3;\n        const x = data[stride];\n        const y = data[stride + 1];\n        const z = data[stride + 2];\n        triangulatedData.push(x, y, z); // an index of -1 indicates that the current face has ended and the next one begins\n\n        if (index[i + 3] === -1 || i + 3 >= l) {\n          i += 3;\n          start++;\n        }\n      }\n\n      return triangulatedData;\n    }\n\n    function flattenData(data, index) {\n      const flattenData = [];\n\n      for (let i = 0, l = index.length; i < l; i++) {\n        const i1 = index[i];\n        const stride = i1 * 3;\n        const x = data[stride];\n        const y = data[stride + 1];\n        const z = data[stride + 2];\n        flattenData.push(x, y, z);\n      }\n\n      return flattenData;\n    }\n\n    function expandLineIndex(index) {\n      const indices = [];\n\n      for (let i = 0, l = index.length; i < l; i++) {\n        const i1 = index[i];\n        const i2 = index[i + 1];\n        indices.push(i1, i2); // an index of -1 indicates that the current line has ended and the next one begins\n\n        if (index[i + 2] === -1 || i + 2 >= l) {\n          i += 2;\n        }\n      }\n\n      return indices;\n    }\n\n    function expandLineData(data, index) {\n      const triangulatedData = [];\n      let start = 0;\n\n      for (let i = 0, l = index.length; i < l; i++) {\n        const stride = start * 3;\n        const x = data[stride];\n        const y = data[stride + 1];\n        const z = data[stride + 2];\n        triangulatedData.push(x, y, z); // an index of -1 indicates that the current line has ended and the next one begins\n\n        if (index[i + 2] === -1 || i + 2 >= l) {\n          i += 2;\n          start++;\n        }\n      }\n\n      return triangulatedData;\n    }\n\n    const vA = new Vector3();\n    const vB = new Vector3();\n    const vC = new Vector3();\n    const uvA = new Vector2();\n    const uvB = new Vector2();\n    const uvC = new Vector2();\n\n    function computeAttributeFromIndexedData(coordIndex, index, data, itemSize) {\n      const array = []; // we use the coordIndex.length as delimiter since normalIndex must contain at least as many indices\n\n      for (let i = 0, l = coordIndex.length; i < l; i += 3) {\n        const a = index[i];\n        const b = index[i + 1];\n        const c = index[i + 2];\n\n        if (itemSize === 2) {\n          uvA.fromArray(data, a * itemSize);\n          uvB.fromArray(data, b * itemSize);\n          uvC.fromArray(data, c * itemSize);\n          array.push(uvA.x, uvA.y);\n          array.push(uvB.x, uvB.y);\n          array.push(uvC.x, uvC.y);\n        } else {\n          vA.fromArray(data, a * itemSize);\n          vB.fromArray(data, b * itemSize);\n          vC.fromArray(data, c * itemSize);\n          array.push(vA.x, vA.y, vA.z);\n          array.push(vB.x, vB.y, vB.z);\n          array.push(vC.x, vC.y, vC.z);\n        }\n      }\n\n      return new Float32BufferAttribute(array, itemSize);\n    }\n\n    function computeAttributeFromFaceData(index, faceData) {\n      const array = [];\n\n      for (let i = 0, j = 0, l = index.length; i < l; i += 3, j++) {\n        vA.fromArray(faceData, j * 3);\n        array.push(vA.x, vA.y, vA.z);\n        array.push(vA.x, vA.y, vA.z);\n        array.push(vA.x, vA.y, vA.z);\n      }\n\n      return new Float32BufferAttribute(array, 3);\n    }\n\n    function computeAttributeFromLineData(index, lineData) {\n      const array = [];\n\n      for (let i = 0, j = 0, l = index.length; i < l; i += 2, j++) {\n        vA.fromArray(lineData, j * 3);\n        array.push(vA.x, vA.y, vA.z);\n        array.push(vA.x, vA.y, vA.z);\n      }\n\n      return new Float32BufferAttribute(array, 3);\n    }\n\n    function toNonIndexedAttribute(indices, attribute) {\n      const array = attribute.array;\n      const itemSize = attribute.itemSize;\n      const array2 = new array.constructor(indices.length * itemSize);\n      let index = 0,\n          index2 = 0;\n\n      for (let i = 0, l = indices.length; i < l; i++) {\n        index = indices[i] * itemSize;\n\n        for (let j = 0; j < itemSize; j++) {\n          array2[index2++] = array[index++];\n        }\n      }\n\n      return new Float32BufferAttribute(array2, itemSize);\n    }\n\n    const ab = new Vector3();\n    const cb = new Vector3();\n\n    function computeNormalAttribute(index, coord, creaseAngle) {\n      const faces = [];\n      const vertexNormals = {}; // prepare face and raw vertex normals\n\n      for (let i = 0, l = index.length; i < l; i += 3) {\n        const a = index[i];\n        const b = index[i + 1];\n        const c = index[i + 2];\n        const face = new Face(a, b, c);\n        vA.fromArray(coord, a * 3);\n        vB.fromArray(coord, b * 3);\n        vC.fromArray(coord, c * 3);\n        cb.subVectors(vC, vB);\n        ab.subVectors(vA, vB);\n        cb.cross(ab);\n        cb.normalize();\n        face.normal.copy(cb);\n        if (vertexNormals[a] === undefined) vertexNormals[a] = [];\n        if (vertexNormals[b] === undefined) vertexNormals[b] = [];\n        if (vertexNormals[c] === undefined) vertexNormals[c] = [];\n        vertexNormals[a].push(face.normal);\n        vertexNormals[b].push(face.normal);\n        vertexNormals[c].push(face.normal);\n        faces.push(face);\n      } // compute vertex normals and build final geometry\n\n\n      const normals = [];\n\n      for (let i = 0, l = faces.length; i < l; i++) {\n        const face = faces[i];\n        const nA = weightedNormal(vertexNormals[face.a], face.normal, creaseAngle);\n        const nB = weightedNormal(vertexNormals[face.b], face.normal, creaseAngle);\n        const nC = weightedNormal(vertexNormals[face.c], face.normal, creaseAngle);\n        vA.fromArray(coord, face.a * 3);\n        vB.fromArray(coord, face.b * 3);\n        vC.fromArray(coord, face.c * 3);\n        normals.push(nA.x, nA.y, nA.z);\n        normals.push(nB.x, nB.y, nB.z);\n        normals.push(nC.x, nC.y, nC.z);\n      }\n\n      return new Float32BufferAttribute(normals, 3);\n    }\n\n    function weightedNormal(normals, vector, creaseAngle) {\n      const normal = new Vector3();\n\n      if (creaseAngle === 0) {\n        normal.copy(vector);\n      } else {\n        for (let i = 0, l = normals.length; i < l; i++) {\n          if (normals[i].angleTo(vector) < creaseAngle) {\n            normal.add(normals[i]);\n          }\n        }\n      }\n\n      return normal.normalize();\n    }\n\n    function toColorArray(colors) {\n      const array = [];\n\n      for (let i = 0, l = colors.length; i < l; i += 3) {\n        array.push(new Color(colors[i], colors[i + 1], colors[i + 2]));\n      }\n\n      return array;\n    }\n    /**\n     * Vertically paints the faces interpolating between the\n     * specified colors at the specified angels. This is used for the Background\n     * node, but could be applied to other nodes with multiple faces as well.\n     *\n     * When used with the Background node, default is directionIsDown is true if\n     * interpolating the skyColor down from the Zenith. When interpolationg up from\n     * the Nadir i.e. interpolating the groundColor, the directionIsDown is false.\n     *\n     * The first angle is never specified, it is the Zenith (0 rad). Angles are specified\n     * in radians. The geometry is thought a sphere, but could be anything. The color interpolation\n     * is linear along the Y axis in any case.\n     *\n     * You must specify one more color than you have angles at the beginning of the colors array.\n     * This is the color of the Zenith (the top of the shape).\n     *\n     * @param {BufferGeometry} geometry\n     * @param {number} radius\n     * @param {array} angles\n     * @param {array} colors\n     * @param {boolean} topDown - Whether to work top down or bottom up.\n     */\n\n\n    function paintFaces(geometry, radius, angles, colors, topDown) {\n      // compute threshold values\n      const thresholds = [];\n      const startAngle = topDown === true ? 0 : Math.PI;\n\n      for (let i = 0, l = colors.length; i < l; i++) {\n        let angle = i === 0 ? 0 : angles[i - 1];\n        angle = topDown === true ? angle : startAngle - angle;\n        const point = new Vector3();\n        point.setFromSphericalCoords(radius, angle, 0);\n        thresholds.push(point);\n      } // generate vertex colors\n\n\n      const indices = geometry.index;\n      const positionAttribute = geometry.attributes.position;\n      const colorAttribute = new BufferAttribute(new Float32Array(geometry.attributes.position.count * 3), 3);\n      const position = new Vector3();\n      const color = new Color();\n\n      for (let i = 0; i < indices.count; i++) {\n        const index = indices.getX(i);\n        position.fromBufferAttribute(positionAttribute, index);\n        let thresholdIndexA, thresholdIndexB;\n        let t = 1;\n\n        for (let j = 1; j < thresholds.length; j++) {\n          thresholdIndexA = j - 1;\n          thresholdIndexB = j;\n          const thresholdA = thresholds[thresholdIndexA];\n          const thresholdB = thresholds[thresholdIndexB];\n\n          if (topDown === true) {\n            // interpolation for sky color\n            if (position.y <= thresholdA.y && position.y > thresholdB.y) {\n              t = Math.abs(thresholdA.y - position.y) / Math.abs(thresholdA.y - thresholdB.y);\n              break;\n            }\n          } else {\n            // interpolation for ground color\n            if (position.y >= thresholdA.y && position.y < thresholdB.y) {\n              t = Math.abs(thresholdA.y - position.y) / Math.abs(thresholdA.y - thresholdB.y);\n              break;\n            }\n          }\n        }\n\n        const colorA = colors[thresholdIndexA];\n        const colorB = colors[thresholdIndexB];\n        color.copy(colorA).lerp(colorB, t);\n        colorAttribute.setXYZ(index, color.r, color.g, color.b);\n      }\n\n      geometry.setAttribute('color', colorAttribute);\n    } //\n\n\n    const textureLoader = new TextureLoader(this.manager);\n    textureLoader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin); // check version (only 2.0 is supported)\n\n    if (data.indexOf('#VRML V2.0') === -1) {\n      throw Error('THREE.VRMLLexer: Version of VRML asset not supported.');\n    } // create JSON representing the tree structure of the VRML asset\n\n\n    const tree = generateVRMLTree(data); // parse the tree structure to a three.js scene\n\n    const scene = parseTree(tree);\n    return scene;\n  }\n\n}\n\nclass VRMLLexer {\n  constructor(tokens) {\n    this.lexer = new Lexer(tokens); // eslint-disable-line no-undef\n  }\n\n  lex(inputText) {\n    const lexingResult = this.lexer.tokenize(inputText);\n\n    if (lexingResult.errors.length > 0) {\n      console.error(lexingResult.errors);\n      throw Error('THREE.VRMLLexer: Lexing errors detected.');\n    }\n\n    return lexingResult;\n  }\n\n}\n\nclass VRMLParser extends CstParser {\n  constructor(tokenVocabulary) {\n    super(tokenVocabulary);\n    const $ = this;\n    const Version = tokenVocabulary['Version'];\n    const LCurly = tokenVocabulary['LCurly'];\n    const RCurly = tokenVocabulary['RCurly'];\n    const LSquare = tokenVocabulary['LSquare'];\n    const RSquare = tokenVocabulary['RSquare'];\n    const Identifier = tokenVocabulary['Identifier'];\n    const RouteIdentifier = tokenVocabulary['RouteIdentifier'];\n    const StringLiteral = tokenVocabulary['StringLiteral'];\n    const HexLiteral = tokenVocabulary['HexLiteral'];\n    const NumberLiteral = tokenVocabulary['NumberLiteral'];\n    const TrueLiteral = tokenVocabulary['TrueLiteral'];\n    const FalseLiteral = tokenVocabulary['FalseLiteral'];\n    const NullLiteral = tokenVocabulary['NullLiteral'];\n    const DEF = tokenVocabulary['DEF'];\n    const USE = tokenVocabulary['USE'];\n    const ROUTE = tokenVocabulary['ROUTE'];\n    const TO = tokenVocabulary['TO'];\n    const NodeName = tokenVocabulary['NodeName'];\n    $.RULE('vrml', function () {\n      $.SUBRULE($.version);\n      $.AT_LEAST_ONE(function () {\n        $.SUBRULE($.node);\n      });\n      $.MANY(function () {\n        $.SUBRULE($.route);\n      });\n    });\n    $.RULE('version', function () {\n      $.CONSUME(Version);\n    });\n    $.RULE('node', function () {\n      $.OPTION(function () {\n        $.SUBRULE($.def);\n      });\n      $.CONSUME(NodeName);\n      $.CONSUME(LCurly);\n      $.MANY(function () {\n        $.SUBRULE($.field);\n      });\n      $.CONSUME(RCurly);\n    });\n    $.RULE('field', function () {\n      $.CONSUME(Identifier);\n      $.OR2([{\n        ALT: function () {\n          $.SUBRULE($.singleFieldValue);\n        }\n      }, {\n        ALT: function () {\n          $.SUBRULE($.multiFieldValue);\n        }\n      }]);\n    });\n    $.RULE('def', function () {\n      $.CONSUME(DEF);\n      $.OR([{\n        ALT: function () {\n          $.CONSUME(Identifier);\n        }\n      }, {\n        ALT: function () {\n          $.CONSUME(NodeName);\n        }\n      }]);\n    });\n    $.RULE('use', function () {\n      $.CONSUME(USE);\n      $.OR([{\n        ALT: function () {\n          $.CONSUME(Identifier);\n        }\n      }, {\n        ALT: function () {\n          $.CONSUME(NodeName);\n        }\n      }]);\n    });\n    $.RULE('singleFieldValue', function () {\n      $.AT_LEAST_ONE(function () {\n        $.OR([{\n          ALT: function () {\n            $.SUBRULE($.node);\n          }\n        }, {\n          ALT: function () {\n            $.SUBRULE($.use);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(StringLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(HexLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(NumberLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(TrueLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(FalseLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(NullLiteral);\n          }\n        }]);\n      });\n    });\n    $.RULE('multiFieldValue', function () {\n      $.CONSUME(LSquare);\n      $.MANY(function () {\n        $.OR([{\n          ALT: function () {\n            $.SUBRULE($.node);\n          }\n        }, {\n          ALT: function () {\n            $.SUBRULE($.use);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(StringLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(HexLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(NumberLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(NullLiteral);\n          }\n        }]);\n      });\n      $.CONSUME(RSquare);\n    });\n    $.RULE('route', function () {\n      $.CONSUME(ROUTE);\n      $.CONSUME(RouteIdentifier);\n      $.CONSUME(TO);\n      $.CONSUME2(RouteIdentifier);\n    });\n    this.performSelfAnalysis();\n  }\n\n}\n\nclass Face {\n  constructor(a, b, c) {\n    this.a = a;\n    this.b = b;\n    this.c = c;\n    this.normal = new Vector3();\n  }\n\n}\n\nconst TEXTURE_TYPE = {\n  INTENSITY: 1,\n  INTENSITY_ALPHA: 2,\n  RGB: 3,\n  RGBA: 4\n};\n\nexport { VRMLLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}