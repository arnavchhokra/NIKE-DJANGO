{"ast":null,"code":"import { useFrame } from '@react-three/fiber';\nimport * as React from 'react';\nimport * as THREE from 'three';\n\n/**\r\n * Integration and compilation: Faraz Shaikh (https://twitter.com/CantBeFaraz)\r\n *\r\n * Based on:\r\n *  - https://gkjohnson.github.io/threejs-sandbox/screendoor-transparency/ by Garrett Johnson (https://github.com/gkjohnson)\r\n *\r\n * Note:\r\n *  - Must depreciate in favor of https://github.com/mrdoob/three.js/issues/10600 when it's ready.\r\n */\nfunction ShadowAlpha(_ref) {\n  let {\n    opacity,\n    alphaMap\n  } = _ref;\n  const depthMaterialRef = React.useRef(null);\n  const distanceMaterialRef = React.useRef(null);\n  const uShadowOpacity = React.useRef({\n    value: 1\n  });\n  const uAlphaMap = React.useRef({\n    value: null\n  });\n  const uHasAlphaMap = React.useRef({\n    value: false\n  });\n  React.useLayoutEffect(() => {\n    depthMaterialRef.current.onBeforeCompile = distanceMaterialRef.current.onBeforeCompile = shader => {\n      // Need to get the \"void main\" line dynamically because the lines for\n      // MeshDistanceMaterial and MeshDepthMaterial are different ü§¶‚Äç‚ôÇÔ∏è\n      const mainLineStart = shader.fragmentShader.indexOf('void main');\n      let mainLine = '';\n      let ch;\n      let i = mainLineStart;\n      while (ch !== '\\n' && i < mainLineStart + 100) {\n        ch = shader.fragmentShader.charAt(i);\n        mainLine += ch;\n        i++;\n      }\n      mainLine = mainLine.trim();\n      shader.vertexShader = shader.vertexShader.replace('void main() {', \"\\n        varying vec2 custom_vUv;\\n\\n        void main() {\\n          custom_vUv = uv;\\n          \\n        \");\n      shader.fragmentShader = shader.fragmentShader.replace(mainLine, \"\\n          uniform float uShadowOpacity;\\n          uniform sampler2D uAlphaMap;\\n          uniform bool uHasAlphaMap;\\n\\n          varying vec2 custom_vUv;\\n  \\n          float bayerDither2x2( vec2 v ) {\\n            return mod( 3.0 * v.y + 2.0 * v.x, 4.0 );\\n          }\\n    \\n          float bayerDither4x4( vec2 v ) {\\n            vec2 P1 = mod( v, 2.0 );\\n            vec2 P2 = mod( floor( 0.5  * v ), 2.0 );\\n            return 4.0 * bayerDither2x2( P1 ) + bayerDither2x2( P2 );\\n          }\\n  \\n          void main() {\\n            float alpha = \\n              uHasAlphaMap ? \\n                uShadowOpacity * texture2D(uAlphaMap, custom_vUv).x\\n              : uShadowOpacity;\\n\\n            if( ( bayerDither4x4( floor( mod( gl_FragCoord.xy, 4.0 ) ) ) ) / 16.0 >= alpha ) discard;\\n            \\n          \");\n      shader.uniforms['uShadowOpacity'] = uShadowOpacity.current;\n      shader.uniforms['uAlphaMap'] = uAlphaMap.current;\n      shader.uniforms['uHasAlphaMap'] = uHasAlphaMap.current;\n    };\n  }, []);\n  useFrame(() => {\n    var _r3f;\n    const parent = (_r3f = depthMaterialRef.current.__r3f) == null ? void 0 : _r3f.parent;\n    if (parent) {\n      const parentMainMaterial = parent.material;\n      if (parentMainMaterial) {\n        uShadowOpacity.current.value = opacity !== null && opacity !== void 0 ? opacity : parentMainMaterial.opacity;\n        if (alphaMap === false) {\n          uAlphaMap.current.value = null;\n          uHasAlphaMap.current.value = false;\n        } else {\n          uAlphaMap.current.value = alphaMap || parentMainMaterial.alphaMap;\n          uHasAlphaMap.current.value = !!uAlphaMap.current.value;\n        }\n      }\n    }\n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"meshDepthMaterial\", {\n    ref: depthMaterialRef,\n    attach: \"customDepthMaterial\",\n    depthPacking: THREE.RGBADepthPacking\n  }), /*#__PURE__*/React.createElement(\"meshDistanceMaterial\", {\n    ref: distanceMaterialRef,\n    attach: \"customDistanceMaterial\"\n  }));\n}\nexport { ShadowAlpha };","map":{"version":3,"names":["useFrame","React","THREE","ShadowAlpha","_ref","opacity","alphaMap","depthMaterialRef","useRef","distanceMaterialRef","uShadowOpacity","value","uAlphaMap","uHasAlphaMap","useLayoutEffect","current","onBeforeCompile","shader","mainLineStart","fragmentShader","indexOf","mainLine","ch","i","charAt","trim","vertexShader","replace","uniforms","_r3f","parent","__r3f","parentMainMaterial","material","createElement","Fragment","ref","attach","depthPacking","RGBADepthPacking"],"sources":["D:/Repos/NIKE-DJANGO/Jord/l4fycy/node_modules/@react-three/drei/core/ShadowAlpha.js"],"sourcesContent":["import { useFrame } from '@react-three/fiber';\r\nimport * as React from 'react';\r\nimport * as THREE from 'three';\r\n\r\n/**\r\n * Integration and compilation: Faraz Shaikh (https://twitter.com/CantBeFaraz)\r\n *\r\n * Based on:\r\n *  - https://gkjohnson.github.io/threejs-sandbox/screendoor-transparency/ by Garrett Johnson (https://github.com/gkjohnson)\r\n *\r\n * Note:\r\n *  - Must depreciate in favor of https://github.com/mrdoob/three.js/issues/10600 when it's ready.\r\n */\r\nfunction ShadowAlpha({\r\n  opacity,\r\n  alphaMap\r\n}) {\r\n  const depthMaterialRef = React.useRef(null);\r\n  const distanceMaterialRef = React.useRef(null);\r\n  const uShadowOpacity = React.useRef({\r\n    value: 1\r\n  });\r\n  const uAlphaMap = React.useRef({\r\n    value: null\r\n  });\r\n  const uHasAlphaMap = React.useRef({\r\n    value: false\r\n  });\r\n  React.useLayoutEffect(() => {\r\n    depthMaterialRef.current.onBeforeCompile = distanceMaterialRef.current.onBeforeCompile = shader => {\r\n      // Need to get the \"void main\" line dynamically because the lines for\r\n      // MeshDistanceMaterial and MeshDepthMaterial are different ü§¶‚Äç‚ôÇÔ∏è\r\n      const mainLineStart = shader.fragmentShader.indexOf('void main');\r\n      let mainLine = '';\r\n      let ch;\r\n      let i = mainLineStart;\r\n      while (ch !== '\\n' && i < mainLineStart + 100) {\r\n        ch = shader.fragmentShader.charAt(i);\r\n        mainLine += ch;\r\n        i++;\r\n      }\r\n      mainLine = mainLine.trim();\r\n      shader.vertexShader = shader.vertexShader.replace('void main() {', `\r\n        varying vec2 custom_vUv;\r\n\r\n        void main() {\r\n          custom_vUv = uv;\r\n          \r\n        `);\r\n      shader.fragmentShader = shader.fragmentShader.replace(mainLine, `\r\n          uniform float uShadowOpacity;\r\n          uniform sampler2D uAlphaMap;\r\n          uniform bool uHasAlphaMap;\r\n\r\n          varying vec2 custom_vUv;\r\n  \r\n          float bayerDither2x2( vec2 v ) {\r\n            return mod( 3.0 * v.y + 2.0 * v.x, 4.0 );\r\n          }\r\n    \r\n          float bayerDither4x4( vec2 v ) {\r\n            vec2 P1 = mod( v, 2.0 );\r\n            vec2 P2 = mod( floor( 0.5  * v ), 2.0 );\r\n            return 4.0 * bayerDither2x2( P1 ) + bayerDither2x2( P2 );\r\n          }\r\n  \r\n          void main() {\r\n            float alpha = \r\n              uHasAlphaMap ? \r\n                uShadowOpacity * texture2D(uAlphaMap, custom_vUv).x\r\n              : uShadowOpacity;\r\n\r\n            if( ( bayerDither4x4( floor( mod( gl_FragCoord.xy, 4.0 ) ) ) ) / 16.0 >= alpha ) discard;\r\n            \r\n          `);\r\n      shader.uniforms['uShadowOpacity'] = uShadowOpacity.current;\r\n      shader.uniforms['uAlphaMap'] = uAlphaMap.current;\r\n      shader.uniforms['uHasAlphaMap'] = uHasAlphaMap.current;\r\n    };\r\n  }, []);\r\n  useFrame(() => {\r\n    var _r3f;\r\n    const parent = (_r3f = depthMaterialRef.current.__r3f) == null ? void 0 : _r3f.parent;\r\n    if (parent) {\r\n      const parentMainMaterial = parent.material;\r\n      if (parentMainMaterial) {\r\n        uShadowOpacity.current.value = opacity !== null && opacity !== void 0 ? opacity : parentMainMaterial.opacity;\r\n        if (alphaMap === false) {\r\n          uAlphaMap.current.value = null;\r\n          uHasAlphaMap.current.value = false;\r\n        } else {\r\n          uAlphaMap.current.value = alphaMap || parentMainMaterial.alphaMap;\r\n          uHasAlphaMap.current.value = !!uAlphaMap.current.value;\r\n        }\r\n      }\r\n    }\r\n  });\r\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"meshDepthMaterial\", {\r\n    ref: depthMaterialRef,\r\n    attach: \"customDepthMaterial\",\r\n    depthPacking: THREE.RGBADepthPacking\r\n  }), /*#__PURE__*/React.createElement(\"meshDistanceMaterial\", {\r\n    ref: distanceMaterialRef,\r\n    attach: \"customDistanceMaterial\"\r\n  }));\r\n}\r\n\r\nexport { ShadowAlpha };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}