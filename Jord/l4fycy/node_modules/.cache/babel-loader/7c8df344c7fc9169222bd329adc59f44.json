{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateRedundantMethods = exports.validateMissingCstMethods = exports.validateVisitor = exports.CstVisitorDefinitionError = exports.createBaseVisitorConstructorWithDefaults = exports.createBaseSemanticVisitorConstructor = exports.defaultVisit = void 0;\n\nvar isEmpty_1 = __importDefault(require(\"lodash/isEmpty\"));\n\nvar compact_1 = __importDefault(require(\"lodash/compact\"));\n\nvar isArray_1 = __importDefault(require(\"lodash/isArray\"));\n\nvar map_1 = __importDefault(require(\"lodash/map\"));\n\nvar forEach_1 = __importDefault(require(\"lodash/forEach\"));\n\nvar filter_1 = __importDefault(require(\"lodash/filter\"));\n\nvar keys_1 = __importDefault(require(\"lodash/keys\"));\n\nvar isFunction_1 = __importDefault(require(\"lodash/isFunction\"));\n\nvar isUndefined_1 = __importDefault(require(\"lodash/isUndefined\"));\n\nvar includes_1 = __importDefault(require(\"lodash/includes\"));\n\nvar lang_extensions_1 = require(\"../../lang/lang_extensions\");\n\nfunction defaultVisit(ctx, param) {\n  var childrenNames = (0, keys_1.default)(ctx);\n  var childrenNamesLength = childrenNames.length;\n\n  for (var i = 0; i < childrenNamesLength; i++) {\n    var currChildName = childrenNames[i];\n    var currChildArray = ctx[currChildName];\n    var currChildArrayLength = currChildArray.length;\n\n    for (var j = 0; j < currChildArrayLength; j++) {\n      var currChild = currChildArray[j]; // distinction between Tokens Children and CstNode children\n\n      if (currChild.tokenTypeIdx === undefined) {\n        this[currChild.name](currChild.children, param);\n      }\n    }\n  } // defaultVisit does not support generic out param\n\n}\n\nexports.defaultVisit = defaultVisit;\n\nfunction createBaseSemanticVisitorConstructor(grammarName, ruleNames) {\n  var derivedConstructor = function derivedConstructor() {}; // can be overwritten according to:\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n  // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n\n\n  (0, lang_extensions_1.defineNameProp)(derivedConstructor, grammarName + \"BaseSemantics\");\n  var semanticProto = {\n    visit: function visit(cstNode, param) {\n      // enables writing more concise visitor methods when CstNode has only a single child\n      if ((0, isArray_1.default)(cstNode)) {\n        // A CST Node's children dictionary can never have empty arrays as values\n        // If a key is defined there will be at least one element in the corresponding value array.\n        cstNode = cstNode[0];\n      } // enables passing optional CstNodes concisely.\n\n\n      if ((0, isUndefined_1.default)(cstNode)) {\n        return undefined;\n      }\n\n      return this[cstNode.name](cstNode.children, param);\n    },\n    validateVisitor: function validateVisitor() {\n      var semanticDefinitionErrors = _validateVisitor(this, ruleNames);\n\n      if (!(0, isEmpty_1.default)(semanticDefinitionErrors)) {\n        var errorMessages = (0, map_1.default)(semanticDefinitionErrors, function (currDefError) {\n          return currDefError.msg;\n        });\n        throw Error(\"Errors Detected in CST Visitor <\".concat(this.constructor.name, \">:\\n\\t\") + \"\".concat(errorMessages.join(\"\\n\\n\").replace(/\\n/g, \"\\n\\t\")));\n      }\n    }\n  };\n  derivedConstructor.prototype = semanticProto;\n  derivedConstructor.prototype.constructor = derivedConstructor;\n  derivedConstructor._RULE_NAMES = ruleNames;\n  return derivedConstructor;\n}\n\nexports.createBaseSemanticVisitorConstructor = createBaseSemanticVisitorConstructor;\n\nfunction createBaseVisitorConstructorWithDefaults(grammarName, ruleNames, baseConstructor) {\n  var derivedConstructor = function derivedConstructor() {}; // can be overwritten according to:\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n  // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n\n\n  (0, lang_extensions_1.defineNameProp)(derivedConstructor, grammarName + \"BaseSemanticsWithDefaults\");\n  var withDefaultsProto = Object.create(baseConstructor.prototype);\n  (0, forEach_1.default)(ruleNames, function (ruleName) {\n    withDefaultsProto[ruleName] = defaultVisit;\n  });\n  derivedConstructor.prototype = withDefaultsProto;\n  derivedConstructor.prototype.constructor = derivedConstructor;\n  return derivedConstructor;\n}\n\nexports.createBaseVisitorConstructorWithDefaults = createBaseVisitorConstructorWithDefaults;\nvar CstVisitorDefinitionError;\n\n(function (CstVisitorDefinitionError) {\n  CstVisitorDefinitionError[CstVisitorDefinitionError[\"REDUNDANT_METHOD\"] = 0] = \"REDUNDANT_METHOD\";\n  CstVisitorDefinitionError[CstVisitorDefinitionError[\"MISSING_METHOD\"] = 1] = \"MISSING_METHOD\";\n})(CstVisitorDefinitionError = exports.CstVisitorDefinitionError || (exports.CstVisitorDefinitionError = {}));\n\nfunction _validateVisitor(visitorInstance, ruleNames) {\n  var missingErrors = validateMissingCstMethods(visitorInstance, ruleNames);\n  var redundantErrors = validateRedundantMethods(visitorInstance, ruleNames);\n  return missingErrors.concat(redundantErrors);\n}\n\nexports.validateVisitor = _validateVisitor;\n\nfunction validateMissingCstMethods(visitorInstance, ruleNames) {\n  var missingRuleNames = (0, filter_1.default)(ruleNames, function (currRuleName) {\n    return (0, isFunction_1.default)(visitorInstance[currRuleName]) === false;\n  });\n  var errors = (0, map_1.default)(missingRuleNames, function (currRuleName) {\n    return {\n      msg: \"Missing visitor method: <\".concat(currRuleName, \"> on \").concat(visitorInstance.constructor.name, \" CST Visitor.\"),\n      type: CstVisitorDefinitionError.MISSING_METHOD,\n      methodName: currRuleName\n    };\n  });\n  return (0, compact_1.default)(errors);\n}\n\nexports.validateMissingCstMethods = validateMissingCstMethods;\nvar VALID_PROP_NAMES = [\"constructor\", \"visit\", \"validateVisitor\"];\n\nfunction validateRedundantMethods(visitorInstance, ruleNames) {\n  var errors = [];\n\n  for (var prop in visitorInstance) {\n    if ((0, isFunction_1.default)(visitorInstance[prop]) && !(0, includes_1.default)(VALID_PROP_NAMES, prop) && !(0, includes_1.default)(ruleNames, prop)) {\n      errors.push({\n        msg: \"Redundant visitor method: <\".concat(prop, \"> on \").concat(visitorInstance.constructor.name, \" CST Visitor\\n\") + \"There is no Grammar Rule corresponding to this method's name.\\n\",\n        type: CstVisitorDefinitionError.REDUNDANT_METHOD,\n        methodName: prop\n      });\n    }\n  }\n\n  return errors;\n}\n\nexports.validateRedundantMethods = validateRedundantMethods;","map":{"version":3,"mappings":"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","names":["defaultVisit","ctx","param","childrenNames","childrenNamesLength","length","i","currChildName","currChildArray","currChildArrayLength","j","currChild","tokenTypeIdx","undefined","name","children","exports","createBaseSemanticVisitorConstructor","grammarName","ruleNames","derivedConstructor","semanticProto","visit","cstNode","validateVisitor","semanticDefinitionErrors","errorMessages","currDefError","msg","Error","constructor","join","replace","prototype","_RULE_NAMES","createBaseVisitorConstructorWithDefaults","baseConstructor","withDefaultsProto","Object","create","ruleName","CstVisitorDefinitionError","visitorInstance","missingErrors","validateMissingCstMethods","redundantErrors","validateRedundantMethods","concat","missingRuleNames","currRuleName","errors","type","MISSING_METHOD","methodName","VALID_PROP_NAMES","prop","push","REDUNDANT_METHOD"],"sources":["D:\\Github\\NIKE-DJANGO\\Jord\\l4fycy\\node_modules\\chevrotain\\src\\parse\\cst\\cst_visitor.ts"],"sourcesContent":["import isEmpty from \"lodash/isEmpty\"\r\nimport compact from \"lodash/compact\"\r\nimport isArray from \"lodash/isArray\"\r\nimport map from \"lodash/map\"\r\nimport forEach from \"lodash/forEach\"\r\nimport filter from \"lodash/filter\"\r\nimport keys from \"lodash/keys\"\r\nimport isFunction from \"lodash/isFunction\"\r\nimport isUndefined from \"lodash/isUndefined\"\r\nimport includes from \"lodash/includes\"\r\nimport { defineNameProp } from \"../../lang/lang_extensions\"\r\nimport { CstNode, ICstVisitor } from \"@chevrotain/types\"\r\n\r\nexport function defaultVisit<IN>(ctx: any, param: IN): void {\r\n  const childrenNames = keys(ctx)\r\n  const childrenNamesLength = childrenNames.length\r\n  for (let i = 0; i < childrenNamesLength; i++) {\r\n    const currChildName = childrenNames[i]\r\n    const currChildArray = ctx[currChildName]\r\n    const currChildArrayLength = currChildArray.length\r\n    for (let j = 0; j < currChildArrayLength; j++) {\r\n      const currChild: any = currChildArray[j]\r\n      // distinction between Tokens Children and CstNode children\r\n      if (currChild.tokenTypeIdx === undefined) {\r\n        this[currChild.name](currChild.children, param)\r\n      }\r\n    }\r\n  }\r\n  // defaultVisit does not support generic out param\r\n}\r\n\r\nexport function createBaseSemanticVisitorConstructor(\r\n  grammarName: string,\r\n  ruleNames: string[]\r\n): {\r\n  new (...args: any[]): ICstVisitor<any, any>\r\n} {\r\n  const derivedConstructor: any = function () {}\r\n\r\n  // can be overwritten according to:\r\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\r\n  // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\r\n  defineNameProp(derivedConstructor, grammarName + \"BaseSemantics\")\r\n\r\n  const semanticProto = {\r\n    visit: function (cstNode: CstNode | CstNode[], param: any) {\r\n      // enables writing more concise visitor methods when CstNode has only a single child\r\n      if (isArray(cstNode)) {\r\n        // A CST Node's children dictionary can never have empty arrays as values\r\n        // If a key is defined there will be at least one element in the corresponding value array.\r\n        cstNode = cstNode[0]\r\n      }\r\n\r\n      // enables passing optional CstNodes concisely.\r\n      if (isUndefined(cstNode)) {\r\n        return undefined\r\n      }\r\n\r\n      return this[cstNode.name](cstNode.children, param)\r\n    },\r\n\r\n    validateVisitor: function () {\r\n      const semanticDefinitionErrors = validateVisitor(this, ruleNames)\r\n      if (!isEmpty(semanticDefinitionErrors)) {\r\n        const errorMessages = map(\r\n          semanticDefinitionErrors,\r\n          (currDefError) => currDefError.msg\r\n        )\r\n        throw Error(\r\n          `Errors Detected in CST Visitor <${this.constructor.name}>:\\n\\t` +\r\n            `${errorMessages.join(\"\\n\\n\").replace(/\\n/g, \"\\n\\t\")}`\r\n        )\r\n      }\r\n    }\r\n  }\r\n\r\n  derivedConstructor.prototype = semanticProto\r\n  derivedConstructor.prototype.constructor = derivedConstructor\r\n\r\n  derivedConstructor._RULE_NAMES = ruleNames\r\n\r\n  return derivedConstructor\r\n}\r\n\r\nexport function createBaseVisitorConstructorWithDefaults(\r\n  grammarName: string,\r\n  ruleNames: string[],\r\n  baseConstructor: Function\r\n): {\r\n  new (...args: any[]): ICstVisitor<any, any>\r\n} {\r\n  const derivedConstructor: any = function () {}\r\n\r\n  // can be overwritten according to:\r\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\r\n  // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\r\n  defineNameProp(derivedConstructor, grammarName + \"BaseSemanticsWithDefaults\")\r\n\r\n  const withDefaultsProto = Object.create(baseConstructor.prototype)\r\n  forEach(ruleNames, (ruleName) => {\r\n    withDefaultsProto[ruleName] = defaultVisit\r\n  })\r\n\r\n  derivedConstructor.prototype = withDefaultsProto\r\n  derivedConstructor.prototype.constructor = derivedConstructor\r\n\r\n  return derivedConstructor\r\n}\r\n\r\nexport enum CstVisitorDefinitionError {\r\n  REDUNDANT_METHOD,\r\n  MISSING_METHOD\r\n}\r\n\r\nexport interface IVisitorDefinitionError {\r\n  msg: string\r\n  type: CstVisitorDefinitionError\r\n  methodName: string\r\n}\r\n\r\nexport function validateVisitor(\r\n  visitorInstance: ICstVisitor<unknown, unknown>,\r\n  ruleNames: string[]\r\n): IVisitorDefinitionError[] {\r\n  const missingErrors = validateMissingCstMethods(visitorInstance, ruleNames)\r\n  const redundantErrors = validateRedundantMethods(visitorInstance, ruleNames)\r\n\r\n  return missingErrors.concat(redundantErrors)\r\n}\r\n\r\nexport function validateMissingCstMethods(\r\n  visitorInstance: ICstVisitor<unknown, unknown>,\r\n  ruleNames: string[]\r\n): IVisitorDefinitionError[] {\r\n  const missingRuleNames = filter(ruleNames, (currRuleName) => {\r\n    return isFunction((visitorInstance as any)[currRuleName]) === false\r\n  })\r\n\r\n  const errors: IVisitorDefinitionError[] = map(\r\n    missingRuleNames,\r\n    (currRuleName) => {\r\n      return {\r\n        msg: `Missing visitor method: <${currRuleName}> on ${<any>(\r\n          visitorInstance.constructor.name\r\n        )} CST Visitor.`,\r\n        type: CstVisitorDefinitionError.MISSING_METHOD,\r\n        methodName: currRuleName\r\n      }\r\n    }\r\n  )\r\n\r\n  return compact<IVisitorDefinitionError>(errors)\r\n}\r\n\r\nconst VALID_PROP_NAMES = [\"constructor\", \"visit\", \"validateVisitor\"]\r\nexport function validateRedundantMethods(\r\n  visitorInstance: ICstVisitor<unknown, unknown>,\r\n  ruleNames: string[]\r\n): IVisitorDefinitionError[] {\r\n  const errors = []\r\n\r\n  for (const prop in visitorInstance) {\r\n    if (\r\n      isFunction((visitorInstance as any)[prop]) &&\r\n      !includes(VALID_PROP_NAMES, prop) &&\r\n      !includes(ruleNames, prop)\r\n    ) {\r\n      errors.push({\r\n        msg:\r\n          `Redundant visitor method: <${prop}> on ${<any>(\r\n            visitorInstance.constructor.name\r\n          )} CST Visitor\\n` +\r\n          `There is no Grammar Rule corresponding to this method's name.\\n`,\r\n        type: CstVisitorDefinitionError.REDUNDANT_METHOD,\r\n        methodName: prop\r\n      })\r\n    }\r\n  }\r\n  return errors\r\n}\r\n"]},"metadata":{},"sourceType":"script"}