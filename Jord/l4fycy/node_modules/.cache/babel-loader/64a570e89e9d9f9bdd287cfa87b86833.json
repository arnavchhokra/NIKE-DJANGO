{"ast":null,"code":"import { Vector3, Color, Vector2, Vector4, Box3, Matrix4, Frustum, Matrix3, DoubleSide } from 'three';\n\nvar RenderableObject = function RenderableObject() {\n  this.id = 0;\n  this.object = null;\n  this.z = 0;\n  this.renderOrder = 0;\n}; //\n\n\nvar RenderableFace = function RenderableFace() {\n  this.id = 0;\n  this.v1 = new RenderableVertex();\n  this.v2 = new RenderableVertex();\n  this.v3 = new RenderableVertex();\n  this.normalModel = new Vector3();\n  this.vertexNormalsModel = [new Vector3(), new Vector3(), new Vector3()];\n  this.vertexNormalsLength = 0;\n  this.color = new Color();\n  this.material = null;\n  this.uvs = [new Vector2(), new Vector2(), new Vector2()];\n  this.z = 0;\n  this.renderOrder = 0;\n}; //\n\n\nvar RenderableVertex = function RenderableVertex() {\n  this.position = new Vector3();\n  this.positionWorld = new Vector3();\n  this.positionScreen = new Vector4();\n  this.visible = true;\n};\n\nRenderableVertex.prototype.copy = function (vertex) {\n  this.positionWorld.copy(vertex.positionWorld);\n  this.positionScreen.copy(vertex.positionScreen);\n}; //\n\n\nvar RenderableLine = function RenderableLine() {\n  this.id = 0;\n  this.v1 = new RenderableVertex();\n  this.v2 = new RenderableVertex();\n  this.vertexColors = [new Color(), new Color()];\n  this.material = null;\n  this.z = 0;\n  this.renderOrder = 0;\n}; //\n\n\nvar RenderableSprite = function RenderableSprite() {\n  this.id = 0;\n  this.object = null;\n  this.x = 0;\n  this.y = 0;\n  this.z = 0;\n  this.rotation = 0;\n  this.scale = new Vector2();\n  this.material = null;\n  this.renderOrder = 0;\n}; //\n\n\nvar Projector = function Projector() {\n  var _object,\n      _objectCount,\n      _objectPool = [],\n      _objectPoolLength = 0,\n      _vertex,\n      _vertexCount,\n      _vertexPool = [],\n      _vertexPoolLength = 0,\n      _face,\n      _faceCount,\n      _facePool = [],\n      _facePoolLength = 0,\n      _line,\n      _lineCount,\n      _linePool = [],\n      _linePoolLength = 0,\n      _sprite,\n      _spriteCount,\n      _spritePool = [],\n      _spritePoolLength = 0,\n      _renderData = {\n    objects: [],\n    lights: [],\n    elements: []\n  },\n      _vector3 = new Vector3(),\n      _vector4 = new Vector4(),\n      _clipBox = new Box3(new Vector3(-1, -1, -1), new Vector3(1, 1, 1)),\n      _boundingBox = new Box3(),\n      _points3 = new Array(3),\n      _viewMatrix = new Matrix4(),\n      _viewProjectionMatrix = new Matrix4(),\n      _modelMatrix,\n      _modelViewProjectionMatrix = new Matrix4(),\n      _frustum = new Frustum(); //\n\n\n  this.projectVector = function (vector, camera) {\n    console.warn('THREE.Projector: .projectVector() is now vector.project().');\n    vector.project(camera);\n  };\n\n  this.unprojectVector = function (vector, camera) {\n    console.warn('THREE.Projector: .unprojectVector() is now vector.unproject().');\n    vector.unproject(camera);\n  };\n\n  this.pickingRay = function () {\n    console.error('THREE.Projector: .pickingRay() is now raycaster.setFromCamera().');\n  }; //\n\n\n  var RenderList = function RenderList() {\n    var normals = [];\n    var colors = [];\n    var uvs = [];\n    var object = null;\n    var normalMatrix = new Matrix3();\n\n    function setObject(value) {\n      object = value;\n      normalMatrix.getNormalMatrix(object.matrixWorld);\n      normals.length = 0;\n      colors.length = 0;\n      uvs.length = 0;\n    }\n\n    function projectVertex(vertex) {\n      var position = vertex.position;\n      var positionWorld = vertex.positionWorld;\n      var positionScreen = vertex.positionScreen;\n      positionWorld.copy(position).applyMatrix4(_modelMatrix);\n      positionScreen.copy(positionWorld).applyMatrix4(_viewProjectionMatrix);\n      var invW = 1 / positionScreen.w;\n      positionScreen.x *= invW;\n      positionScreen.y *= invW;\n      positionScreen.z *= invW;\n      vertex.visible = positionScreen.x >= -1 && positionScreen.x <= 1 && positionScreen.y >= -1 && positionScreen.y <= 1 && positionScreen.z >= -1 && positionScreen.z <= 1;\n    }\n\n    function pushVertex(x, y, z) {\n      _vertex = getNextVertexInPool();\n\n      _vertex.position.set(x, y, z);\n\n      projectVertex(_vertex);\n    }\n\n    function pushNormal(x, y, z) {\n      normals.push(x, y, z);\n    }\n\n    function pushColor(r, g, b) {\n      colors.push(r, g, b);\n    }\n\n    function pushUv(x, y) {\n      uvs.push(x, y);\n    }\n\n    function checkTriangleVisibility(v1, v2, v3) {\n      if (v1.visible === true || v2.visible === true || v3.visible === true) return true;\n      _points3[0] = v1.positionScreen;\n      _points3[1] = v2.positionScreen;\n      _points3[2] = v3.positionScreen;\n      return _clipBox.intersectsBox(_boundingBox.setFromPoints(_points3));\n    }\n\n    function checkBackfaceCulling(v1, v2, v3) {\n      return (v3.positionScreen.x - v1.positionScreen.x) * (v2.positionScreen.y - v1.positionScreen.y) - (v3.positionScreen.y - v1.positionScreen.y) * (v2.positionScreen.x - v1.positionScreen.x) < 0;\n    }\n\n    function pushLine(a, b) {\n      var v1 = _vertexPool[a];\n      var v2 = _vertexPool[b]; // Clip\n\n      v1.positionScreen.copy(v1.position).applyMatrix4(_modelViewProjectionMatrix);\n      v2.positionScreen.copy(v2.position).applyMatrix4(_modelViewProjectionMatrix);\n\n      if (clipLine(v1.positionScreen, v2.positionScreen) === true) {\n        // Perform the perspective divide\n        v1.positionScreen.multiplyScalar(1 / v1.positionScreen.w);\n        v2.positionScreen.multiplyScalar(1 / v2.positionScreen.w);\n        _line = getNextLineInPool();\n        _line.id = object.id;\n\n        _line.v1.copy(v1);\n\n        _line.v2.copy(v2);\n\n        _line.z = Math.max(v1.positionScreen.z, v2.positionScreen.z);\n        _line.renderOrder = object.renderOrder;\n        _line.material = object.material;\n\n        if (object.material.vertexColors) {\n          _line.vertexColors[0].fromArray(colors, a * 3);\n\n          _line.vertexColors[1].fromArray(colors, b * 3);\n        }\n\n        _renderData.elements.push(_line);\n      }\n    }\n\n    function pushTriangle(a, b, c, material) {\n      var v1 = _vertexPool[a];\n      var v2 = _vertexPool[b];\n      var v3 = _vertexPool[c];\n      if (checkTriangleVisibility(v1, v2, v3) === false) return;\n\n      if (material.side === DoubleSide || checkBackfaceCulling(v1, v2, v3) === true) {\n        _face = getNextFaceInPool();\n        _face.id = object.id;\n\n        _face.v1.copy(v1);\n\n        _face.v2.copy(v2);\n\n        _face.v3.copy(v3);\n\n        _face.z = (v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z) / 3;\n        _face.renderOrder = object.renderOrder; // face normal\n\n        _vector3.subVectors(v3.position, v2.position);\n\n        _vector4.subVectors(v1.position, v2.position);\n\n        _vector3.cross(_vector4);\n\n        _face.normalModel.copy(_vector3);\n\n        _face.normalModel.applyMatrix3(normalMatrix).normalize();\n\n        for (var i = 0; i < 3; i++) {\n          var normal = _face.vertexNormalsModel[i];\n          normal.fromArray(normals, arguments[i] * 3);\n          normal.applyMatrix3(normalMatrix).normalize();\n          var uv = _face.uvs[i];\n          uv.fromArray(uvs, arguments[i] * 2);\n        }\n\n        _face.vertexNormalsLength = 3;\n        _face.material = material;\n\n        if (material.vertexColors) {\n          _face.color.fromArray(colors, a * 3);\n        }\n\n        _renderData.elements.push(_face);\n      }\n    }\n\n    return {\n      setObject: setObject,\n      projectVertex: projectVertex,\n      checkTriangleVisibility: checkTriangleVisibility,\n      checkBackfaceCulling: checkBackfaceCulling,\n      pushVertex: pushVertex,\n      pushNormal: pushNormal,\n      pushColor: pushColor,\n      pushUv: pushUv,\n      pushLine: pushLine,\n      pushTriangle: pushTriangle\n    };\n  };\n\n  var renderList = new RenderList();\n\n  function projectObject(object) {\n    if (object.visible === false) return;\n\n    if (object.isLight) {\n      _renderData.lights.push(object);\n    } else if (object.isMesh || object.isLine || object.isPoints) {\n      if (object.material.visible === false) return;\n      if (object.frustumCulled === true && _frustum.intersectsObject(object) === false) return;\n      addObject(object);\n    } else if (object.isSprite) {\n      if (object.material.visible === false) return;\n      if (object.frustumCulled === true && _frustum.intersectsSprite(object) === false) return;\n      addObject(object);\n    }\n\n    var children = object.children;\n\n    for (var i = 0, l = children.length; i < l; i++) {\n      projectObject(children[i]);\n    }\n  }\n\n  function addObject(object) {\n    _object = getNextObjectInPool();\n    _object.id = object.id;\n    _object.object = object;\n\n    _vector3.setFromMatrixPosition(object.matrixWorld);\n\n    _vector3.applyMatrix4(_viewProjectionMatrix);\n\n    _object.z = _vector3.z;\n    _object.renderOrder = object.renderOrder;\n\n    _renderData.objects.push(_object);\n  }\n\n  this.projectScene = function (scene, camera, sortObjects, sortElements) {\n    _faceCount = 0;\n    _lineCount = 0;\n    _spriteCount = 0;\n    _renderData.elements.length = 0;\n    if (scene.autoUpdate === true) scene.updateMatrixWorld();\n    if (camera.parent === null) camera.updateMatrixWorld();\n\n    _viewMatrix.copy(camera.matrixWorldInverse);\n\n    _viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, _viewMatrix);\n\n    _frustum.setFromProjectionMatrix(_viewProjectionMatrix); //\n\n\n    _objectCount = 0;\n    _renderData.objects.length = 0;\n    _renderData.lights.length = 0;\n    projectObject(scene);\n\n    if (sortObjects === true) {\n      _renderData.objects.sort(painterSort);\n    } //\n\n\n    var objects = _renderData.objects;\n\n    for (var o = 0, ol = objects.length; o < ol; o++) {\n      var object = objects[o].object;\n      var geometry = object.geometry;\n      renderList.setObject(object);\n      _modelMatrix = object.matrixWorld;\n      _vertexCount = 0;\n\n      if (object.isMesh) {\n        if (geometry.isBufferGeometry) {\n          var material = object.material;\n          var isMultiMaterial = Array.isArray(material);\n          var attributes = geometry.attributes;\n          var groups = geometry.groups;\n          if (attributes.position === undefined) continue;\n          var positions = attributes.position.array;\n\n          for (var i = 0, l = positions.length; i < l; i += 3) {\n            var x = positions[i];\n            var y = positions[i + 1];\n            var z = positions[i + 2];\n\n            if (material.morphTargets === true) {\n              var morphTargets = geometry.morphAttributes.position;\n              var morphTargetsRelative = geometry.morphTargetsRelative;\n              var morphInfluences = object.morphTargetInfluences;\n\n              for (var t = 0, tl = morphTargets.length; t < tl; t++) {\n                var influence = morphInfluences[t];\n                if (influence === 0) continue;\n                var target = morphTargets[t];\n\n                if (morphTargetsRelative) {\n                  x += target.getX(i / 3) * influence;\n                  y += target.getY(i / 3) * influence;\n                  z += target.getZ(i / 3) * influence;\n                } else {\n                  x += (target.getX(i / 3) - positions[i]) * influence;\n                  y += (target.getY(i / 3) - positions[i + 1]) * influence;\n                  z += (target.getZ(i / 3) - positions[i + 2]) * influence;\n                }\n              }\n            }\n\n            renderList.pushVertex(x, y, z);\n          }\n\n          if (attributes.normal !== undefined) {\n            var normals = attributes.normal.array;\n\n            for (var _i = 0, _l = normals.length; _i < _l; _i += 3) {\n              renderList.pushNormal(normals[_i], normals[_i + 1], normals[_i + 2]);\n            }\n          }\n\n          if (attributes.color !== undefined) {\n            var colors = attributes.color.array;\n\n            for (var _i2 = 0, _l2 = colors.length; _i2 < _l2; _i2 += 3) {\n              renderList.pushColor(colors[_i2], colors[_i2 + 1], colors[_i2 + 2]);\n            }\n          }\n\n          if (attributes.uv !== undefined) {\n            var uvs = attributes.uv.array;\n\n            for (var _i3 = 0, _l3 = uvs.length; _i3 < _l3; _i3 += 2) {\n              renderList.pushUv(uvs[_i3], uvs[_i3 + 1]);\n            }\n          }\n\n          if (geometry.index !== null) {\n            var indices = geometry.index.array;\n\n            if (groups.length > 0) {\n              for (var g = 0; g < groups.length; g++) {\n                var group = groups[g];\n                material = isMultiMaterial === true ? object.material[group.materialIndex] : object.material;\n                if (material === undefined) continue;\n\n                for (var _i4 = group.start, _l4 = group.start + group.count; _i4 < _l4; _i4 += 3) {\n                  renderList.pushTriangle(indices[_i4], indices[_i4 + 1], indices[_i4 + 2], material);\n                }\n              }\n            } else {\n              for (var _i5 = 0, _l5 = indices.length; _i5 < _l5; _i5 += 3) {\n                renderList.pushTriangle(indices[_i5], indices[_i5 + 1], indices[_i5 + 2], material);\n              }\n            }\n          } else {\n            if (groups.length > 0) {\n              for (var _g = 0; _g < groups.length; _g++) {\n                var group = groups[_g];\n                material = isMultiMaterial === true ? object.material[group.materialIndex] : object.material;\n                if (material === undefined) continue;\n\n                for (var _i6 = group.start, _l6 = group.start + group.count; _i6 < _l6; _i6 += 3) {\n                  renderList.pushTriangle(_i6, _i6 + 1, _i6 + 2, material);\n                }\n              }\n            } else {\n              for (var _i7 = 0, _l7 = positions.length / 3; _i7 < _l7; _i7 += 3) {\n                renderList.pushTriangle(_i7, _i7 + 1, _i7 + 2, material);\n              }\n            }\n          }\n        } else if (geometry.isGeometry) {\n          console.error('THREE.Projector no longer supports Geometry. Use THREE.BufferGeometry instead.');\n          return;\n        }\n      } else if (object.isLine) {\n        _modelViewProjectionMatrix.multiplyMatrices(_viewProjectionMatrix, _modelMatrix);\n\n        if (geometry.isBufferGeometry) {\n          var attributes = geometry.attributes;\n\n          if (attributes.position !== undefined) {\n            var positions = attributes.position.array;\n\n            for (var _i8 = 0, _l8 = positions.length; _i8 < _l8; _i8 += 3) {\n              renderList.pushVertex(positions[_i8], positions[_i8 + 1], positions[_i8 + 2]);\n            }\n\n            if (attributes.color !== undefined) {\n              var colors = attributes.color.array;\n\n              for (var _i9 = 0, _l9 = colors.length; _i9 < _l9; _i9 += 3) {\n                renderList.pushColor(colors[_i9], colors[_i9 + 1], colors[_i9 + 2]);\n              }\n            }\n\n            if (geometry.index !== null) {\n              var indices = geometry.index.array;\n\n              for (var _i10 = 0, _l10 = indices.length; _i10 < _l10; _i10 += 2) {\n                renderList.pushLine(indices[_i10], indices[_i10 + 1]);\n              }\n            } else {\n              var step = object.isLineSegments ? 2 : 1;\n\n              for (var _i11 = 0, _l11 = positions.length / 3 - 1; _i11 < _l11; _i11 += step) {\n                renderList.pushLine(_i11, _i11 + 1);\n              }\n            }\n          }\n        } else if (geometry.isGeometry) {\n          console.error('THREE.Projector no longer supports Geometry. Use THREE.BufferGeometry instead.');\n          return;\n        }\n      } else if (object.isPoints) {\n        _modelViewProjectionMatrix.multiplyMatrices(_viewProjectionMatrix, _modelMatrix);\n\n        if (geometry.isGeometry) {\n          console.error('THREE.Projector no longer supports Geometry. Use THREE.BufferGeometry instead.');\n          return;\n        } else if (geometry.isBufferGeometry) {\n          var attributes = geometry.attributes;\n\n          if (attributes.position !== undefined) {\n            var positions = attributes.position.array;\n\n            for (var _i12 = 0, _l12 = positions.length; _i12 < _l12; _i12 += 3) {\n              _vector4.set(positions[_i12], positions[_i12 + 1], positions[_i12 + 2], 1);\n\n              _vector4.applyMatrix4(_modelViewProjectionMatrix);\n\n              pushPoint(_vector4, object, camera);\n            }\n          }\n        }\n      } else if (object.isSprite) {\n        object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);\n\n        _vector4.set(_modelMatrix.elements[12], _modelMatrix.elements[13], _modelMatrix.elements[14], 1);\n\n        _vector4.applyMatrix4(_viewProjectionMatrix);\n\n        pushPoint(_vector4, object, camera);\n      }\n    }\n\n    if (sortElements === true) {\n      _renderData.elements.sort(painterSort);\n    }\n\n    return _renderData;\n  };\n\n  function pushPoint(_vector4, object, camera) {\n    var invW = 1 / _vector4.w;\n    _vector4.z *= invW;\n\n    if (_vector4.z >= -1 && _vector4.z <= 1) {\n      _sprite = getNextSpriteInPool();\n      _sprite.id = object.id;\n      _sprite.x = _vector4.x * invW;\n      _sprite.y = _vector4.y * invW;\n      _sprite.z = _vector4.z;\n      _sprite.renderOrder = object.renderOrder;\n      _sprite.object = object;\n      _sprite.rotation = object.rotation;\n      _sprite.scale.x = object.scale.x * Math.abs(_sprite.x - (_vector4.x + camera.projectionMatrix.elements[0]) / (_vector4.w + camera.projectionMatrix.elements[12]));\n      _sprite.scale.y = object.scale.y * Math.abs(_sprite.y - (_vector4.y + camera.projectionMatrix.elements[5]) / (_vector4.w + camera.projectionMatrix.elements[13]));\n      _sprite.material = object.material;\n\n      _renderData.elements.push(_sprite);\n    }\n  } // Pools\n\n\n  function getNextObjectInPool() {\n    if (_objectCount === _objectPoolLength) {\n      var object = new RenderableObject();\n\n      _objectPool.push(object);\n\n      _objectPoolLength++;\n      _objectCount++;\n      return object;\n    }\n\n    return _objectPool[_objectCount++];\n  }\n\n  function getNextVertexInPool() {\n    if (_vertexCount === _vertexPoolLength) {\n      var vertex = new RenderableVertex();\n\n      _vertexPool.push(vertex);\n\n      _vertexPoolLength++;\n      _vertexCount++;\n      return vertex;\n    }\n\n    return _vertexPool[_vertexCount++];\n  }\n\n  function getNextFaceInPool() {\n    if (_faceCount === _facePoolLength) {\n      var face = new RenderableFace();\n\n      _facePool.push(face);\n\n      _facePoolLength++;\n      _faceCount++;\n      return face;\n    }\n\n    return _facePool[_faceCount++];\n  }\n\n  function getNextLineInPool() {\n    if (_lineCount === _linePoolLength) {\n      var line = new RenderableLine();\n\n      _linePool.push(line);\n\n      _linePoolLength++;\n      _lineCount++;\n      return line;\n    }\n\n    return _linePool[_lineCount++];\n  }\n\n  function getNextSpriteInPool() {\n    if (_spriteCount === _spritePoolLength) {\n      var sprite = new RenderableSprite();\n\n      _spritePool.push(sprite);\n\n      _spritePoolLength++;\n      _spriteCount++;\n      return sprite;\n    }\n\n    return _spritePool[_spriteCount++];\n  } //\n\n\n  function painterSort(a, b) {\n    if (a.renderOrder !== b.renderOrder) {\n      return a.renderOrder - b.renderOrder;\n    } else if (a.z !== b.z) {\n      return b.z - a.z;\n    } else if (a.id !== b.id) {\n      return a.id - b.id;\n    } else {\n      return 0;\n    }\n  }\n\n  function clipLine(s1, s2) {\n    var alpha1 = 0,\n        alpha2 = 1,\n        // Calculate the boundary coordinate of each vertex for the near and far clip planes,\n    // Z = -1 and Z = +1, respectively.\n    bc1near = s1.z + s1.w,\n        bc2near = s2.z + s2.w,\n        bc1far = -s1.z + s1.w,\n        bc2far = -s2.z + s2.w;\n\n    if (bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0) {\n      // Both vertices lie entirely within all clip planes.\n      return true;\n    } else if (bc1near < 0 && bc2near < 0 || bc1far < 0 && bc2far < 0) {\n      // Both vertices lie entirely outside one of the clip planes.\n      return false;\n    } else {\n      // The line segment spans at least one clip plane.\n      if (bc1near < 0) {\n        // v1 lies outside the near plane, v2 inside\n        alpha1 = Math.max(alpha1, bc1near / (bc1near - bc2near));\n      } else if (bc2near < 0) {\n        // v2 lies outside the near plane, v1 inside\n        alpha2 = Math.min(alpha2, bc1near / (bc1near - bc2near));\n      }\n\n      if (bc1far < 0) {\n        // v1 lies outside the far plane, v2 inside\n        alpha1 = Math.max(alpha1, bc1far / (bc1far - bc2far));\n      } else if (bc2far < 0) {\n        // v2 lies outside the far plane, v2 inside\n        alpha2 = Math.min(alpha2, bc1far / (bc1far - bc2far));\n      }\n\n      if (alpha2 < alpha1) {\n        // The line segment spans two boundaries, but is outside both of them.\n        // (This can't happen when we're only clipping against just near/far but good\n        //  to leave the check here for future usage if other clip planes are added.)\n        return false;\n      } else {\n        // Update the s1 and s2 vertices to match the clipped line segment.\n        s1.lerp(s2, alpha1);\n        s2.lerp(s1, 1 - alpha2);\n        return true;\n      }\n    }\n  }\n};\n\nexport { Projector, RenderableFace, RenderableLine, RenderableObject, RenderableSprite, RenderableVertex };","map":{"version":3,"names":["Vector3","Color","Vector2","Vector4","Box3","Matrix4","Frustum","Matrix3","DoubleSide","RenderableObject","id","object","z","renderOrder","RenderableFace","v1","RenderableVertex","v2","v3","normalModel","vertexNormalsModel","vertexNormalsLength","color","material","uvs","position","positionWorld","positionScreen","visible","prototype","copy","vertex","RenderableLine","vertexColors","RenderableSprite","x","y","rotation","scale","Projector","_object","_objectCount","_objectPool","_objectPoolLength","_vertex","_vertexCount","_vertexPool","_vertexPoolLength","_face","_faceCount","_facePool","_facePoolLength","_line","_lineCount","_linePool","_linePoolLength","_sprite","_spriteCount","_spritePool","_spritePoolLength","_renderData","objects","lights","elements","_vector3","_vector4","_clipBox","_boundingBox","_points3","Array","_viewMatrix","_viewProjectionMatrix","_modelMatrix","_modelViewProjectionMatrix","_frustum","projectVector","vector","camera","console","warn","project","unprojectVector","unproject","pickingRay","error","RenderList","normals","colors","normalMatrix","setObject","value","getNormalMatrix","matrixWorld","length","projectVertex","applyMatrix4","invW","w","pushVertex","getNextVertexInPool","set","pushNormal","push","pushColor","r","g","b","pushUv","checkTriangleVisibility","intersectsBox","setFromPoints","checkBackfaceCulling","pushLine","a","clipLine","multiplyScalar","getNextLineInPool","Math","max","fromArray","pushTriangle","c","side","getNextFaceInPool","subVectors","cross","applyMatrix3","normalize","i","normal","arguments","uv","renderList","projectObject","isLight","isMesh","isLine","isPoints","frustumCulled","intersectsObject","addObject","isSprite","intersectsSprite","children","l","getNextObjectInPool","setFromMatrixPosition","projectScene","scene","sortObjects","sortElements","autoUpdate","updateMatrixWorld","parent","matrixWorldInverse","multiplyMatrices","projectionMatrix","setFromProjectionMatrix","sort","painterSort","o","ol","geometry","isBufferGeometry","isMultiMaterial","isArray","attributes","groups","undefined","positions","array","morphTargets","morphAttributes","morphTargetsRelative","morphInfluences","morphTargetInfluences","t","tl","influence","target","getX","getY","getZ","index","indices","group","materialIndex","start","count","isGeometry","step","isLineSegments","pushPoint","modelViewMatrix","getNextSpriteInPool","abs","face","line","sprite","s1","s2","alpha1","alpha2","bc1near","bc2near","bc1far","bc2far","min","lerp"],"sources":["D:/Jord/l4fycy/node_modules/three-stdlib/renderers/Projector.js"],"sourcesContent":["import { Vector3, Color, Vector2, Vector4, Box3, Matrix4, Frustum, Matrix3, DoubleSide } from 'three';\n\nvar RenderableObject = function () {\n  this.id = 0;\n  this.object = null;\n  this.z = 0;\n  this.renderOrder = 0;\n}; //\n\n\nvar RenderableFace = function () {\n  this.id = 0;\n  this.v1 = new RenderableVertex();\n  this.v2 = new RenderableVertex();\n  this.v3 = new RenderableVertex();\n  this.normalModel = new Vector3();\n  this.vertexNormalsModel = [new Vector3(), new Vector3(), new Vector3()];\n  this.vertexNormalsLength = 0;\n  this.color = new Color();\n  this.material = null;\n  this.uvs = [new Vector2(), new Vector2(), new Vector2()];\n  this.z = 0;\n  this.renderOrder = 0;\n}; //\n\n\nvar RenderableVertex = function () {\n  this.position = new Vector3();\n  this.positionWorld = new Vector3();\n  this.positionScreen = new Vector4();\n  this.visible = true;\n};\n\nRenderableVertex.prototype.copy = function (vertex) {\n  this.positionWorld.copy(vertex.positionWorld);\n  this.positionScreen.copy(vertex.positionScreen);\n}; //\n\n\nvar RenderableLine = function () {\n  this.id = 0;\n  this.v1 = new RenderableVertex();\n  this.v2 = new RenderableVertex();\n  this.vertexColors = [new Color(), new Color()];\n  this.material = null;\n  this.z = 0;\n  this.renderOrder = 0;\n}; //\n\n\nvar RenderableSprite = function () {\n  this.id = 0;\n  this.object = null;\n  this.x = 0;\n  this.y = 0;\n  this.z = 0;\n  this.rotation = 0;\n  this.scale = new Vector2();\n  this.material = null;\n  this.renderOrder = 0;\n}; //\n\n\nvar Projector = function () {\n  var _object,\n      _objectCount,\n      _objectPool = [],\n      _objectPoolLength = 0,\n      _vertex,\n      _vertexCount,\n      _vertexPool = [],\n      _vertexPoolLength = 0,\n      _face,\n      _faceCount,\n      _facePool = [],\n      _facePoolLength = 0,\n      _line,\n      _lineCount,\n      _linePool = [],\n      _linePoolLength = 0,\n      _sprite,\n      _spriteCount,\n      _spritePool = [],\n      _spritePoolLength = 0,\n      _renderData = {\n    objects: [],\n    lights: [],\n    elements: []\n  },\n      _vector3 = new Vector3(),\n      _vector4 = new Vector4(),\n      _clipBox = new Box3(new Vector3(-1, -1, -1), new Vector3(1, 1, 1)),\n      _boundingBox = new Box3(),\n      _points3 = new Array(3),\n      _viewMatrix = new Matrix4(),\n      _viewProjectionMatrix = new Matrix4(),\n      _modelMatrix,\n      _modelViewProjectionMatrix = new Matrix4(),\n      _frustum = new Frustum(); //\n\n\n  this.projectVector = function (vector, camera) {\n    console.warn('THREE.Projector: .projectVector() is now vector.project().');\n    vector.project(camera);\n  };\n\n  this.unprojectVector = function (vector, camera) {\n    console.warn('THREE.Projector: .unprojectVector() is now vector.unproject().');\n    vector.unproject(camera);\n  };\n\n  this.pickingRay = function () {\n    console.error('THREE.Projector: .pickingRay() is now raycaster.setFromCamera().');\n  }; //\n\n\n  var RenderList = function () {\n    var normals = [];\n    var colors = [];\n    var uvs = [];\n    var object = null;\n    var normalMatrix = new Matrix3();\n\n    function setObject(value) {\n      object = value;\n      normalMatrix.getNormalMatrix(object.matrixWorld);\n      normals.length = 0;\n      colors.length = 0;\n      uvs.length = 0;\n    }\n\n    function projectVertex(vertex) {\n      var position = vertex.position;\n      var positionWorld = vertex.positionWorld;\n      var positionScreen = vertex.positionScreen;\n      positionWorld.copy(position).applyMatrix4(_modelMatrix);\n      positionScreen.copy(positionWorld).applyMatrix4(_viewProjectionMatrix);\n      var invW = 1 / positionScreen.w;\n      positionScreen.x *= invW;\n      positionScreen.y *= invW;\n      positionScreen.z *= invW;\n      vertex.visible = positionScreen.x >= -1 && positionScreen.x <= 1 && positionScreen.y >= -1 && positionScreen.y <= 1 && positionScreen.z >= -1 && positionScreen.z <= 1;\n    }\n\n    function pushVertex(x, y, z) {\n      _vertex = getNextVertexInPool();\n\n      _vertex.position.set(x, y, z);\n\n      projectVertex(_vertex);\n    }\n\n    function pushNormal(x, y, z) {\n      normals.push(x, y, z);\n    }\n\n    function pushColor(r, g, b) {\n      colors.push(r, g, b);\n    }\n\n    function pushUv(x, y) {\n      uvs.push(x, y);\n    }\n\n    function checkTriangleVisibility(v1, v2, v3) {\n      if (v1.visible === true || v2.visible === true || v3.visible === true) return true;\n      _points3[0] = v1.positionScreen;\n      _points3[1] = v2.positionScreen;\n      _points3[2] = v3.positionScreen;\n      return _clipBox.intersectsBox(_boundingBox.setFromPoints(_points3));\n    }\n\n    function checkBackfaceCulling(v1, v2, v3) {\n      return (v3.positionScreen.x - v1.positionScreen.x) * (v2.positionScreen.y - v1.positionScreen.y) - (v3.positionScreen.y - v1.positionScreen.y) * (v2.positionScreen.x - v1.positionScreen.x) < 0;\n    }\n\n    function pushLine(a, b) {\n      var v1 = _vertexPool[a];\n      var v2 = _vertexPool[b]; // Clip\n\n      v1.positionScreen.copy(v1.position).applyMatrix4(_modelViewProjectionMatrix);\n      v2.positionScreen.copy(v2.position).applyMatrix4(_modelViewProjectionMatrix);\n\n      if (clipLine(v1.positionScreen, v2.positionScreen) === true) {\n        // Perform the perspective divide\n        v1.positionScreen.multiplyScalar(1 / v1.positionScreen.w);\n        v2.positionScreen.multiplyScalar(1 / v2.positionScreen.w);\n        _line = getNextLineInPool();\n        _line.id = object.id;\n\n        _line.v1.copy(v1);\n\n        _line.v2.copy(v2);\n\n        _line.z = Math.max(v1.positionScreen.z, v2.positionScreen.z);\n        _line.renderOrder = object.renderOrder;\n        _line.material = object.material;\n\n        if (object.material.vertexColors) {\n          _line.vertexColors[0].fromArray(colors, a * 3);\n\n          _line.vertexColors[1].fromArray(colors, b * 3);\n        }\n\n        _renderData.elements.push(_line);\n      }\n    }\n\n    function pushTriangle(a, b, c, material) {\n      var v1 = _vertexPool[a];\n      var v2 = _vertexPool[b];\n      var v3 = _vertexPool[c];\n      if (checkTriangleVisibility(v1, v2, v3) === false) return;\n\n      if (material.side === DoubleSide || checkBackfaceCulling(v1, v2, v3) === true) {\n        _face = getNextFaceInPool();\n        _face.id = object.id;\n\n        _face.v1.copy(v1);\n\n        _face.v2.copy(v2);\n\n        _face.v3.copy(v3);\n\n        _face.z = (v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z) / 3;\n        _face.renderOrder = object.renderOrder; // face normal\n\n        _vector3.subVectors(v3.position, v2.position);\n\n        _vector4.subVectors(v1.position, v2.position);\n\n        _vector3.cross(_vector4);\n\n        _face.normalModel.copy(_vector3);\n\n        _face.normalModel.applyMatrix3(normalMatrix).normalize();\n\n        for (let i = 0; i < 3; i++) {\n          var normal = _face.vertexNormalsModel[i];\n          normal.fromArray(normals, arguments[i] * 3);\n          normal.applyMatrix3(normalMatrix).normalize();\n          var uv = _face.uvs[i];\n          uv.fromArray(uvs, arguments[i] * 2);\n        }\n\n        _face.vertexNormalsLength = 3;\n        _face.material = material;\n\n        if (material.vertexColors) {\n          _face.color.fromArray(colors, a * 3);\n        }\n\n        _renderData.elements.push(_face);\n      }\n    }\n\n    return {\n      setObject: setObject,\n      projectVertex: projectVertex,\n      checkTriangleVisibility: checkTriangleVisibility,\n      checkBackfaceCulling: checkBackfaceCulling,\n      pushVertex: pushVertex,\n      pushNormal: pushNormal,\n      pushColor: pushColor,\n      pushUv: pushUv,\n      pushLine: pushLine,\n      pushTriangle: pushTriangle\n    };\n  };\n\n  var renderList = new RenderList();\n\n  function projectObject(object) {\n    if (object.visible === false) return;\n\n    if (object.isLight) {\n      _renderData.lights.push(object);\n    } else if (object.isMesh || object.isLine || object.isPoints) {\n      if (object.material.visible === false) return;\n      if (object.frustumCulled === true && _frustum.intersectsObject(object) === false) return;\n      addObject(object);\n    } else if (object.isSprite) {\n      if (object.material.visible === false) return;\n      if (object.frustumCulled === true && _frustum.intersectsSprite(object) === false) return;\n      addObject(object);\n    }\n\n    var children = object.children;\n\n    for (let i = 0, l = children.length; i < l; i++) {\n      projectObject(children[i]);\n    }\n  }\n\n  function addObject(object) {\n    _object = getNextObjectInPool();\n    _object.id = object.id;\n    _object.object = object;\n\n    _vector3.setFromMatrixPosition(object.matrixWorld);\n\n    _vector3.applyMatrix4(_viewProjectionMatrix);\n\n    _object.z = _vector3.z;\n    _object.renderOrder = object.renderOrder;\n\n    _renderData.objects.push(_object);\n  }\n\n  this.projectScene = function (scene, camera, sortObjects, sortElements) {\n    _faceCount = 0;\n    _lineCount = 0;\n    _spriteCount = 0;\n    _renderData.elements.length = 0;\n    if (scene.autoUpdate === true) scene.updateMatrixWorld();\n    if (camera.parent === null) camera.updateMatrixWorld();\n\n    _viewMatrix.copy(camera.matrixWorldInverse);\n\n    _viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, _viewMatrix);\n\n    _frustum.setFromProjectionMatrix(_viewProjectionMatrix); //\n\n\n    _objectCount = 0;\n    _renderData.objects.length = 0;\n    _renderData.lights.length = 0;\n    projectObject(scene);\n\n    if (sortObjects === true) {\n      _renderData.objects.sort(painterSort);\n    } //\n\n\n    var objects = _renderData.objects;\n\n    for (let o = 0, ol = objects.length; o < ol; o++) {\n      var object = objects[o].object;\n      var geometry = object.geometry;\n      renderList.setObject(object);\n      _modelMatrix = object.matrixWorld;\n      _vertexCount = 0;\n\n      if (object.isMesh) {\n        if (geometry.isBufferGeometry) {\n          var material = object.material;\n          var isMultiMaterial = Array.isArray(material);\n          var attributes = geometry.attributes;\n          var groups = geometry.groups;\n          if (attributes.position === undefined) continue;\n          var positions = attributes.position.array;\n\n          for (let i = 0, l = positions.length; i < l; i += 3) {\n            var x = positions[i];\n            var y = positions[i + 1];\n            var z = positions[i + 2];\n\n            if (material.morphTargets === true) {\n              var morphTargets = geometry.morphAttributes.position;\n              var morphTargetsRelative = geometry.morphTargetsRelative;\n              var morphInfluences = object.morphTargetInfluences;\n\n              for (let t = 0, tl = morphTargets.length; t < tl; t++) {\n                var influence = morphInfluences[t];\n                if (influence === 0) continue;\n                var target = morphTargets[t];\n\n                if (morphTargetsRelative) {\n                  x += target.getX(i / 3) * influence;\n                  y += target.getY(i / 3) * influence;\n                  z += target.getZ(i / 3) * influence;\n                } else {\n                  x += (target.getX(i / 3) - positions[i]) * influence;\n                  y += (target.getY(i / 3) - positions[i + 1]) * influence;\n                  z += (target.getZ(i / 3) - positions[i + 2]) * influence;\n                }\n              }\n            }\n\n            renderList.pushVertex(x, y, z);\n          }\n\n          if (attributes.normal !== undefined) {\n            var normals = attributes.normal.array;\n\n            for (let i = 0, l = normals.length; i < l; i += 3) {\n              renderList.pushNormal(normals[i], normals[i + 1], normals[i + 2]);\n            }\n          }\n\n          if (attributes.color !== undefined) {\n            var colors = attributes.color.array;\n\n            for (let i = 0, l = colors.length; i < l; i += 3) {\n              renderList.pushColor(colors[i], colors[i + 1], colors[i + 2]);\n            }\n          }\n\n          if (attributes.uv !== undefined) {\n            var uvs = attributes.uv.array;\n\n            for (let i = 0, l = uvs.length; i < l; i += 2) {\n              renderList.pushUv(uvs[i], uvs[i + 1]);\n            }\n          }\n\n          if (geometry.index !== null) {\n            var indices = geometry.index.array;\n\n            if (groups.length > 0) {\n              for (let g = 0; g < groups.length; g++) {\n                var group = groups[g];\n                material = isMultiMaterial === true ? object.material[group.materialIndex] : object.material;\n                if (material === undefined) continue;\n\n                for (let i = group.start, l = group.start + group.count; i < l; i += 3) {\n                  renderList.pushTriangle(indices[i], indices[i + 1], indices[i + 2], material);\n                }\n              }\n            } else {\n              for (let i = 0, l = indices.length; i < l; i += 3) {\n                renderList.pushTriangle(indices[i], indices[i + 1], indices[i + 2], material);\n              }\n            }\n          } else {\n            if (groups.length > 0) {\n              for (let g = 0; g < groups.length; g++) {\n                var group = groups[g];\n                material = isMultiMaterial === true ? object.material[group.materialIndex] : object.material;\n                if (material === undefined) continue;\n\n                for (let i = group.start, l = group.start + group.count; i < l; i += 3) {\n                  renderList.pushTriangle(i, i + 1, i + 2, material);\n                }\n              }\n            } else {\n              for (let i = 0, l = positions.length / 3; i < l; i += 3) {\n                renderList.pushTriangle(i, i + 1, i + 2, material);\n              }\n            }\n          }\n        } else if (geometry.isGeometry) {\n          console.error('THREE.Projector no longer supports Geometry. Use THREE.BufferGeometry instead.');\n          return;\n        }\n      } else if (object.isLine) {\n        _modelViewProjectionMatrix.multiplyMatrices(_viewProjectionMatrix, _modelMatrix);\n\n        if (geometry.isBufferGeometry) {\n          var attributes = geometry.attributes;\n\n          if (attributes.position !== undefined) {\n            var positions = attributes.position.array;\n\n            for (let i = 0, l = positions.length; i < l; i += 3) {\n              renderList.pushVertex(positions[i], positions[i + 1], positions[i + 2]);\n            }\n\n            if (attributes.color !== undefined) {\n              var colors = attributes.color.array;\n\n              for (let i = 0, l = colors.length; i < l; i += 3) {\n                renderList.pushColor(colors[i], colors[i + 1], colors[i + 2]);\n              }\n            }\n\n            if (geometry.index !== null) {\n              var indices = geometry.index.array;\n\n              for (let i = 0, l = indices.length; i < l; i += 2) {\n                renderList.pushLine(indices[i], indices[i + 1]);\n              }\n            } else {\n              var step = object.isLineSegments ? 2 : 1;\n\n              for (let i = 0, l = positions.length / 3 - 1; i < l; i += step) {\n                renderList.pushLine(i, i + 1);\n              }\n            }\n          }\n        } else if (geometry.isGeometry) {\n          console.error('THREE.Projector no longer supports Geometry. Use THREE.BufferGeometry instead.');\n          return;\n        }\n      } else if (object.isPoints) {\n        _modelViewProjectionMatrix.multiplyMatrices(_viewProjectionMatrix, _modelMatrix);\n\n        if (geometry.isGeometry) {\n          console.error('THREE.Projector no longer supports Geometry. Use THREE.BufferGeometry instead.');\n          return;\n        } else if (geometry.isBufferGeometry) {\n          var attributes = geometry.attributes;\n\n          if (attributes.position !== undefined) {\n            var positions = attributes.position.array;\n\n            for (let i = 0, l = positions.length; i < l; i += 3) {\n              _vector4.set(positions[i], positions[i + 1], positions[i + 2], 1);\n\n              _vector4.applyMatrix4(_modelViewProjectionMatrix);\n\n              pushPoint(_vector4, object, camera);\n            }\n          }\n        }\n      } else if (object.isSprite) {\n        object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);\n\n        _vector4.set(_modelMatrix.elements[12], _modelMatrix.elements[13], _modelMatrix.elements[14], 1);\n\n        _vector4.applyMatrix4(_viewProjectionMatrix);\n\n        pushPoint(_vector4, object, camera);\n      }\n    }\n\n    if (sortElements === true) {\n      _renderData.elements.sort(painterSort);\n    }\n\n    return _renderData;\n  };\n\n  function pushPoint(_vector4, object, camera) {\n    var invW = 1 / _vector4.w;\n    _vector4.z *= invW;\n\n    if (_vector4.z >= -1 && _vector4.z <= 1) {\n      _sprite = getNextSpriteInPool();\n      _sprite.id = object.id;\n      _sprite.x = _vector4.x * invW;\n      _sprite.y = _vector4.y * invW;\n      _sprite.z = _vector4.z;\n      _sprite.renderOrder = object.renderOrder;\n      _sprite.object = object;\n      _sprite.rotation = object.rotation;\n      _sprite.scale.x = object.scale.x * Math.abs(_sprite.x - (_vector4.x + camera.projectionMatrix.elements[0]) / (_vector4.w + camera.projectionMatrix.elements[12]));\n      _sprite.scale.y = object.scale.y * Math.abs(_sprite.y - (_vector4.y + camera.projectionMatrix.elements[5]) / (_vector4.w + camera.projectionMatrix.elements[13]));\n      _sprite.material = object.material;\n\n      _renderData.elements.push(_sprite);\n    }\n  } // Pools\n\n\n  function getNextObjectInPool() {\n    if (_objectCount === _objectPoolLength) {\n      var object = new RenderableObject();\n\n      _objectPool.push(object);\n\n      _objectPoolLength++;\n      _objectCount++;\n      return object;\n    }\n\n    return _objectPool[_objectCount++];\n  }\n\n  function getNextVertexInPool() {\n    if (_vertexCount === _vertexPoolLength) {\n      var vertex = new RenderableVertex();\n\n      _vertexPool.push(vertex);\n\n      _vertexPoolLength++;\n      _vertexCount++;\n      return vertex;\n    }\n\n    return _vertexPool[_vertexCount++];\n  }\n\n  function getNextFaceInPool() {\n    if (_faceCount === _facePoolLength) {\n      var face = new RenderableFace();\n\n      _facePool.push(face);\n\n      _facePoolLength++;\n      _faceCount++;\n      return face;\n    }\n\n    return _facePool[_faceCount++];\n  }\n\n  function getNextLineInPool() {\n    if (_lineCount === _linePoolLength) {\n      var line = new RenderableLine();\n\n      _linePool.push(line);\n\n      _linePoolLength++;\n      _lineCount++;\n      return line;\n    }\n\n    return _linePool[_lineCount++];\n  }\n\n  function getNextSpriteInPool() {\n    if (_spriteCount === _spritePoolLength) {\n      var sprite = new RenderableSprite();\n\n      _spritePool.push(sprite);\n\n      _spritePoolLength++;\n      _spriteCount++;\n      return sprite;\n    }\n\n    return _spritePool[_spriteCount++];\n  } //\n\n\n  function painterSort(a, b) {\n    if (a.renderOrder !== b.renderOrder) {\n      return a.renderOrder - b.renderOrder;\n    } else if (a.z !== b.z) {\n      return b.z - a.z;\n    } else if (a.id !== b.id) {\n      return a.id - b.id;\n    } else {\n      return 0;\n    }\n  }\n\n  function clipLine(s1, s2) {\n    var alpha1 = 0,\n        alpha2 = 1,\n        // Calculate the boundary coordinate of each vertex for the near and far clip planes,\n    // Z = -1 and Z = +1, respectively.\n    bc1near = s1.z + s1.w,\n        bc2near = s2.z + s2.w,\n        bc1far = -s1.z + s1.w,\n        bc2far = -s2.z + s2.w;\n\n    if (bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0) {\n      // Both vertices lie entirely within all clip planes.\n      return true;\n    } else if (bc1near < 0 && bc2near < 0 || bc1far < 0 && bc2far < 0) {\n      // Both vertices lie entirely outside one of the clip planes.\n      return false;\n    } else {\n      // The line segment spans at least one clip plane.\n      if (bc1near < 0) {\n        // v1 lies outside the near plane, v2 inside\n        alpha1 = Math.max(alpha1, bc1near / (bc1near - bc2near));\n      } else if (bc2near < 0) {\n        // v2 lies outside the near plane, v1 inside\n        alpha2 = Math.min(alpha2, bc1near / (bc1near - bc2near));\n      }\n\n      if (bc1far < 0) {\n        // v1 lies outside the far plane, v2 inside\n        alpha1 = Math.max(alpha1, bc1far / (bc1far - bc2far));\n      } else if (bc2far < 0) {\n        // v2 lies outside the far plane, v2 inside\n        alpha2 = Math.min(alpha2, bc1far / (bc1far - bc2far));\n      }\n\n      if (alpha2 < alpha1) {\n        // The line segment spans two boundaries, but is outside both of them.\n        // (This can't happen when we're only clipping against just near/far but good\n        //  to leave the check here for future usage if other clip planes are added.)\n        return false;\n      } else {\n        // Update the s1 and s2 vertices to match the clipped line segment.\n        s1.lerp(s2, alpha1);\n        s2.lerp(s1, 1 - alpha2);\n        return true;\n      }\n    }\n  }\n};\n\nexport { Projector, RenderableFace, RenderableLine, RenderableObject, RenderableSprite, RenderableVertex };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}