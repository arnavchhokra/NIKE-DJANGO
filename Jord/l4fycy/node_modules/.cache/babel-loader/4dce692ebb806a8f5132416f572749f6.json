{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { strToU8, zipSync } from 'fflate';\nimport { Mesh, MeshPhysicalMaterial } from 'three';\n\nvar USDZExporter = /*#__PURE__*/function () {\n  function USDZExporter() {\n    _classCallCheck(this, USDZExporter);\n\n    _defineProperty(this, \"PRECISION\", 7);\n\n    _defineProperty(this, \"materials\", void 0);\n\n    _defineProperty(this, \"textures\", void 0);\n\n    _defineProperty(this, \"files\", void 0);\n\n    this.materials = {};\n    this.textures = {};\n    this.files = {};\n  }\n\n  _createClass(USDZExporter, [{\n    key: \"parse\",\n    value: function () {\n      var _parse = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(scene) {\n        var _this = this;\n\n        var modelFileName, output, _loop, id, offset, filename, file, headerSize, offsetMod64, padLength, padding;\n\n        return _regeneratorRuntime().wrap(function _callee$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                modelFileName = 'model.usda'; // model file should be first in USDZ archive so we init it here\n\n                this.files[modelFileName] = null;\n                output = this.buildHeader();\n                scene.traverseVisible(function (object) {\n                  if (object instanceof Mesh && object.isMesh && object.material.isMeshStandardMaterial) {\n                    var geometry = object.geometry;\n                    var material = object.material;\n                    var geometryFileName = 'geometries/Geometry_' + geometry.id + '.usd';\n\n                    if (!(geometryFileName in _this.files)) {\n                      var meshObject = _this.buildMeshObject(geometry);\n\n                      _this.files[geometryFileName] = _this.buildUSDFileAsString(meshObject);\n                    }\n\n                    if (!(material.uuid in _this.materials)) {\n                      _this.materials[material.uuid] = material;\n                    }\n\n                    output += _this.buildXform(object, geometry, material);\n                  }\n                });\n                output += this.buildMaterials(this.materials);\n                this.files[modelFileName] = strToU8(output);\n                output = null;\n                _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop(id) {\n                  var texture, color, isRGBA, canvas, blob;\n                  return _regeneratorRuntime().wrap(function _loop$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          texture = _this.textures[id];\n                          color = id.split('_')[1];\n                          isRGBA = texture.format === 1023;\n                          canvas = _this.imageToCanvas(texture.image, color);\n                          _context.next = 6;\n                          return new Promise(function (resolve) {\n                            return canvas === null || canvas === void 0 ? void 0 : canvas.toBlob(resolve, isRGBA ? 'image/png' : 'image/jpeg', 1);\n                          });\n\n                        case 6:\n                          blob = _context.sent;\n\n                          if (!blob) {\n                            _context.next = 13;\n                            break;\n                          }\n\n                          _context.t0 = Uint8Array;\n                          _context.next = 11;\n                          return blob.arrayBuffer();\n\n                        case 11:\n                          _context.t1 = _context.sent;\n                          _this.files[\"textures/Texture_\".concat(id, \".\").concat(isRGBA ? 'png' : 'jpg')] = new _context.t0(_context.t1);\n\n                        case 13:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _loop);\n                });\n                _context2.t0 = _regeneratorRuntime().keys(this.textures);\n\n              case 9:\n                if ((_context2.t1 = _context2.t0()).done) {\n                  _context2.next = 14;\n                  break;\n                }\n\n                id = _context2.t1.value;\n                return _context2.delegateYield(_loop(id), \"t2\", 12);\n\n              case 12:\n                _context2.next = 9;\n                break;\n\n              case 14:\n                // 64 byte alignment\n                // https://github.com/101arrowz/fflate/issues/39#issuecomment-777263109\n                offset = 0;\n\n                for (filename in this.files) {\n                  file = this.files[filename];\n                  headerSize = 34 + filename.length;\n                  offset += headerSize;\n                  offsetMod64 = offset & 63;\n\n                  if (offsetMod64 !== 4 && file !== null && file instanceof Uint8Array) {\n                    padLength = 64 - offsetMod64;\n                    padding = new Uint8Array(padLength);\n                    this.files[filename] = [file, {\n                      extra: {\n                        12345: padding\n                      }\n                    }];\n                  }\n\n                  if (file && typeof file.length === 'number') {\n                    offset = file.length;\n                  }\n                }\n\n                return _context2.abrupt(\"return\", zipSync(this.files, {\n                  level: 0\n                }));\n\n              case 17:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function parse(_x) {\n        return _parse.apply(this, arguments);\n      }\n\n      return parse;\n    }()\n  }, {\n    key: \"imageToCanvas\",\n    value: function imageToCanvas(image, color) {\n      if (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof OffscreenCanvas !== 'undefined' && image instanceof OffscreenCanvas || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n        var scale = 1024 / Math.max(image.width, image.height);\n        var canvas = document.createElement('canvas');\n        canvas.width = image.width * Math.min(1, scale);\n        canvas.height = image.height * Math.min(1, scale);\n        var context = canvas.getContext('2d');\n        context === null || context === void 0 ? void 0 : context.drawImage(image, 0, 0, canvas.width, canvas.height);\n\n        if (color !== undefined) {\n          var hex = parseInt(color, 16);\n          var r = (hex >> 16 & 255) / 255;\n          var g = (hex >> 8 & 255) / 255;\n          var b = (hex & 255) / 255;\n          var imagedata = context === null || context === void 0 ? void 0 : context.getImageData(0, 0, canvas.width, canvas.height);\n\n          if (imagedata) {\n            var data = imagedata === null || imagedata === void 0 ? void 0 : imagedata.data;\n\n            for (var i = 0; i < data.length; i += 4) {\n              data[i + 0] = data[i + 0] * r;\n              data[i + 1] = data[i + 1] * g;\n              data[i + 2] = data[i + 2] * b;\n            }\n\n            context === null || context === void 0 ? void 0 : context.putImageData(imagedata, 0, 0);\n          }\n        }\n\n        return canvas;\n      }\n    }\n  }, {\n    key: \"buildHeader\",\n    value: function buildHeader() {\n      return \"#usda 1.0\\n(\\n    customLayerData = {\\n        string creator = \\\"Three.js USDZExporter\\\"\\n    }\\n    metersPerUnit = 1\\n    upAxis = \\\"Y\\\"\\n)\\n\";\n    }\n  }, {\n    key: \"buildUSDFileAsString\",\n    value: function buildUSDFileAsString(dataToInsert) {\n      var output = this.buildHeader();\n      output += dataToInsert;\n      return strToU8(output);\n    } // Xform\n\n  }, {\n    key: \"buildXform\",\n    value: function buildXform(object, geometry, material) {\n      var name = 'Object_' + object.id;\n      var transform = this.buildMatrix(object.matrixWorld);\n\n      if (object.matrixWorld.determinant() < 0) {\n        console.warn('THREE.USDZExporter: USDZ does not support negative scales', object);\n      }\n\n      return \"def Xform \\\"\".concat(name, \"\\\" (\\n    prepend references = @./geometries/Geometry_\").concat(geometry.id, \".usd@</Geometry>\\n)\\n{\\n    matrix4d xformOp:transform = \").concat(transform, \"\\n    uniform token[] xformOpOrder = [\\\"xformOp:transform\\\"]\\n    rel material:binding = </Materials/Material_\").concat(material.id, \">\\n}\\n\");\n    }\n  }, {\n    key: \"buildMatrix\",\n    value: function buildMatrix(matrix) {\n      var array = matrix.elements;\n      return \"( \".concat(this.buildMatrixRow(array, 0), \", \").concat(this.buildMatrixRow(array, 4), \", \").concat(this.buildMatrixRow(array, 8), \", \").concat(this.buildMatrixRow(array, 12), \" )\");\n    }\n  }, {\n    key: \"buildMatrixRow\",\n    value: function buildMatrixRow(array, offset) {\n      return \"(\".concat(array[offset + 0], \", \").concat(array[offset + 1], \", \").concat(array[offset + 2], \", \").concat(array[offset + 3], \")\");\n    } // Mesh\n\n  }, {\n    key: \"buildMeshObject\",\n    value: function buildMeshObject(geometry) {\n      var mesh = this.buildMesh(geometry);\n      return \"\\ndef \\\"Geometry\\\"\\n{\\n  \".concat(mesh, \"\\n}\\n\");\n    }\n  }, {\n    key: \"buildMesh\",\n    value: function buildMesh(geometry) {\n      var name = 'Geometry';\n      var attributes = geometry.attributes;\n      var count = attributes.position.count;\n      return \"\\n    def Mesh \\\"\".concat(name, \"\\\"\\n    {\\n        int[] faceVertexCounts = [\").concat(this.buildMeshVertexCount(geometry), \"]\\n        int[] faceVertexIndices = [\").concat(this.buildMeshVertexIndices(geometry), \"]\\n        normal3f[] normals = [\").concat(this.buildVector3Array(attributes.normal, count), \"] (\\n            interpolation = \\\"vertex\\\"\\n        )\\n        point3f[] points = [\").concat(this.buildVector3Array(attributes.position, count), \"]\\n        float2[] primvars:st = [\").concat(this.buildVector2Array(attributes.uv, count), \"] (\\n            interpolation = \\\"vertex\\\"\\n        )\\n        uniform token subdivisionScheme = \\\"none\\\"\\n    }\\n\");\n    }\n  }, {\n    key: \"buildMeshVertexCount\",\n    value: function buildMeshVertexCount(geometry) {\n      var count = geometry.index !== null ? geometry.index.array.length : geometry.attributes.position.count;\n      return Array(count / 3).fill(3).join(', ');\n    }\n  }, {\n    key: \"buildMeshVertexIndices\",\n    value: function buildMeshVertexIndices(geometry) {\n      if (geometry.index !== null) {\n        // @ts-expect-error\n        return geometry.index.array.join(', ');\n      }\n\n      var array = [];\n      var length = geometry.attributes.position.count;\n\n      for (var i = 0; i < length; i++) {\n        array.push(i);\n      }\n\n      return array.join(', ');\n    }\n  }, {\n    key: \"buildVector3Array\",\n    value: function buildVector3Array(attribute, count) {\n      if (attribute === undefined) {\n        console.warn('USDZExporter: Normals missing.');\n        return Array(count).fill('(0, 0, 0)').join(', ');\n      }\n\n      var array = [];\n      var data = attribute.array;\n\n      for (var i = 0; i < data.length; i += 3) {\n        array.push(\"(\".concat(data[i + 0].toPrecision(this.PRECISION), \", \").concat(data[i + 1].toPrecision(this.PRECISION), \", \").concat(data[i + 2].toPrecision(this.PRECISION), \")\"));\n      }\n\n      return array.join(', ');\n    }\n  }, {\n    key: \"buildVector2Array\",\n    value: function buildVector2Array(attribute, count) {\n      if (attribute === undefined) {\n        console.warn('USDZExporter: UVs missing.');\n        return Array(count).fill('(0, 0)').join(', ');\n      }\n\n      var array = [];\n      var data = attribute.array;\n\n      for (var i = 0; i < data.length; i += 2) {\n        // @ts-expect-error\n        array.push(\"(\".concat(data[i + 0].toPrecision(this.PRECISION), \", \").concat(1 - data[i + 1].toPrecision(this.PRECISION), \")\"));\n      }\n\n      return array.join(', ');\n    } // Materials\n\n  }, {\n    key: \"buildMaterials\",\n    value: function buildMaterials(materials) {\n      var array = [];\n\n      for (var uuid in materials) {\n        var material = materials[uuid];\n        array.push(this.buildMaterial(material));\n      }\n\n      return \"def \\\"Materials\\\"\\n{\\n\".concat(array.join(''), \"\\n}\\n\");\n    }\n  }, {\n    key: \"buildMaterial\",\n    value: function buildMaterial(material) {\n      // https://graphics.pixar.com/usd/docs/UsdPreviewSurface-Proposal.html\n      var pad = '            ';\n      var inputs = [];\n      var samplers = [];\n\n      if (material.map !== null) {\n        inputs.push(\"\".concat(pad, \"color3f inputs:diffuseColor.connect = </Materials/Material_\").concat(material.id, \"/Texture_\").concat(material.map.id, \"_diffuse.outputs:rgb>\"));\n        samplers.push(this.buildTexture(material, material.map, 'diffuse', material.color));\n      } else {\n        inputs.push(\"\".concat(pad, \"color3f inputs:diffuseColor = \").concat(this.buildColor(material.color)));\n      }\n\n      if (material.emissiveMap !== null) {\n        inputs.push(\"\".concat(pad, \"color3f inputs:emissiveColor.connect = </Materials/Material_\").concat(material.id, \"/Texture_\").concat(material.emissiveMap.id, \"_emissive.outputs:rgb>\"));\n        samplers.push(this.buildTexture(material, material.emissiveMap, 'emissive'));\n      } else if (material.emissive.getHex() > 0) {\n        inputs.push(\"\".concat(pad, \"color3f inputs:emissiveColor = \").concat(this.buildColor(material.emissive)));\n      }\n\n      if (material.normalMap !== null) {\n        inputs.push(\"\".concat(pad, \"normal3f inputs:normal.connect = </Materials/Material_\").concat(material.id, \"/Texture_\").concat(material.normalMap.id, \"_normal.outputs:rgb>\"));\n        samplers.push(this.buildTexture(material, material.normalMap, 'normal'));\n      }\n\n      if (material.aoMap !== null) {\n        inputs.push(\"\".concat(pad, \"float inputs:occlusion.connect = </Materials/Material_\").concat(material.id, \"/Texture_\").concat(material.aoMap.id, \"_occlusion.outputs:r>\"));\n        samplers.push(this.buildTexture(material, material.aoMap, 'occlusion'));\n      }\n\n      if (material.roughnessMap !== null && material.roughness === 1) {\n        inputs.push(\"\".concat(pad, \"float inputs:roughness.connect = </Materials/Material_\").concat(material.id, \"/Texture_\").concat(material.roughnessMap.id, \"_roughness.outputs:g>\"));\n        samplers.push(this.buildTexture(material, material.roughnessMap, 'roughness'));\n      } else {\n        inputs.push(\"\".concat(pad, \"float inputs:roughness = \").concat(material.roughness));\n      }\n\n      if (material.metalnessMap !== null && material.metalness === 1) {\n        inputs.push(\"\".concat(pad, \"float inputs:metallic.connect = </Materials/Material_\").concat(material.id, \"/Texture_\").concat(material.metalnessMap.id, \"_metallic.outputs:b>\"));\n        samplers.push(this.buildTexture(material, material.metalnessMap, 'metallic'));\n      } else {\n        inputs.push(\"\".concat(pad, \"float inputs:metallic = \").concat(material.metalness));\n      }\n\n      inputs.push(\"\".concat(pad, \"float inputs:opacity = \").concat(material.opacity));\n\n      if (material instanceof MeshPhysicalMaterial) {\n        inputs.push(\"\".concat(pad, \"float inputs:clearcoat = \").concat(material.clearcoat));\n        inputs.push(\"\".concat(pad, \"float inputs:clearcoatRoughness = \").concat(material.clearcoatRoughness));\n        inputs.push(\"\".concat(pad, \"float inputs:ior = \").concat(material.ior));\n      }\n\n      return \"\\n    def Material \\\"Material_\".concat(material.id, \"\\\"\\n    {\\n        def Shader \\\"PreviewSurface\\\"\\n        {\\n            uniform token info:id = \\\"UsdPreviewSurface\\\"\\n\").concat(inputs.join('\\n'), \"\\n            int inputs:useSpecularWorkflow = 0\\n            token outputs:surface\\n        }\\n        token outputs:surface.connect = </Materials/Material_\").concat(material.id, \"/PreviewSurface.outputs:surface>\\n        token inputs:frame:stPrimvarName = \\\"st\\\"\\n        def Shader \\\"uvReader_st\\\"\\n        {\\n            uniform token info:id = \\\"UsdPrimvarReader_float2\\\"\\n            token inputs:varname.connect = </Materials/Material_\").concat(material.id, \".inputs:frame:stPrimvarName>\\n            float2 inputs:fallback = (0.0, 0.0)\\n            float2 outputs:result\\n        }\\n\").concat(samplers.join('\\n'), \"\\n    }\\n\");\n    }\n  }, {\n    key: \"buildTexture\",\n    value: function buildTexture(material, texture, mapType, color) {\n      var id = texture.id + (color ? '_' + color.getHexString() : '');\n      var isRGBA = texture.format === 1023;\n      this.textures[id] = texture;\n      return \"\\n      def Shader \\\"Transform2d_\".concat(mapType, \"\\\" (\\n          sdrMetadata = {\\n              string role = \\\"math\\\"\\n          }\\n      )\\n      {\\n          uniform token info:id = \\\"UsdTransform2d\\\"\\n          float2 inputs:in.connect = </Materials/Material_\").concat(material.id, \"/uvReader_st.outputs:result>\\n          float2 inputs:scale = \").concat(this.buildVector2(texture.repeat), \"\\n          float2 inputs:translation = \").concat(this.buildVector2(texture.offset), \"\\n          float2 outputs:result\\n      }\\n      def Shader \\\"Texture_\").concat(texture.id, \"_\").concat(mapType, \"\\\"\\n      {\\n          uniform token info:id = \\\"UsdUVTexture\\\"\\n          asset inputs:file = @textures/Texture_\").concat(id, \".\").concat(isRGBA ? 'png' : 'jpg', \"@\\n          float2 inputs:st.connect = </Materials/Material_\").concat(material.id, \"/Transform2d_\").concat(mapType, \".outputs:result>\\n          token inputs:wrapS = \\\"repeat\\\"\\n          token inputs:wrapT = \\\"repeat\\\"\\n          float outputs:r\\n          float outputs:g\\n          float outputs:b\\n          float3 outputs:rgb\\n      }\");\n    }\n  }, {\n    key: \"buildColor\",\n    value: function buildColor(color) {\n      return \"(\".concat(color.r, \", \").concat(color.g, \", \").concat(color.b, \")\");\n    }\n  }, {\n    key: \"buildVector2\",\n    value: function buildVector2(vector) {\n      return \"(\".concat(vector.x, \", \").concat(vector.y, \")\");\n    }\n  }]);\n\n  return USDZExporter;\n}();\n\nexport { USDZExporter };","map":{"version":3,"names":["_defineProperty","strToU8","zipSync","Mesh","MeshPhysicalMaterial","USDZExporter","materials","textures","files","scene","modelFileName","output","buildHeader","traverseVisible","object","isMesh","material","isMeshStandardMaterial","geometry","geometryFileName","id","meshObject","buildMeshObject","buildUSDFileAsString","uuid","buildXform","buildMaterials","texture","color","split","isRGBA","format","canvas","imageToCanvas","image","Promise","resolve","toBlob","blob","Uint8Array","arrayBuffer","offset","filename","file","headerSize","length","offsetMod64","padLength","padding","extra","level","HTMLImageElement","HTMLCanvasElement","OffscreenCanvas","ImageBitmap","scale","Math","max","width","height","document","createElement","min","context","getContext","drawImage","undefined","hex","parseInt","r","g","b","imagedata","getImageData","data","i","putImageData","dataToInsert","name","transform","buildMatrix","matrixWorld","determinant","console","warn","matrix","array","elements","buildMatrixRow","mesh","buildMesh","attributes","count","position","buildMeshVertexCount","buildMeshVertexIndices","buildVector3Array","normal","buildVector2Array","uv","index","Array","fill","join","push","attribute","toPrecision","PRECISION","buildMaterial","pad","inputs","samplers","map","buildTexture","buildColor","emissiveMap","emissive","getHex","normalMap","aoMap","roughnessMap","roughness","metalnessMap","metalness","opacity","clearcoat","clearcoatRoughness","ior","mapType","getHexString","buildVector2","repeat","vector","x","y"],"sources":["C:/Users/Arnav/Downloads/l4fycy/node_modules/three-stdlib/exporters/USDZExporter.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { strToU8, zipSync } from 'fflate';\nimport { Mesh, MeshPhysicalMaterial } from 'three';\n\nclass USDZExporter {\n  constructor() {\n    _defineProperty(this, \"PRECISION\", 7);\n\n    _defineProperty(this, \"materials\", void 0);\n\n    _defineProperty(this, \"textures\", void 0);\n\n    _defineProperty(this, \"files\", void 0);\n\n    this.materials = {};\n    this.textures = {};\n    this.files = {};\n  }\n\n  async parse(scene) {\n    const modelFileName = 'model.usda'; // model file should be first in USDZ archive so we init it here\n\n    this.files[modelFileName] = null;\n    let output = this.buildHeader();\n    scene.traverseVisible(object => {\n      if (object instanceof Mesh && object.isMesh && object.material.isMeshStandardMaterial) {\n        const geometry = object.geometry;\n        const material = object.material;\n        const geometryFileName = 'geometries/Geometry_' + geometry.id + '.usd';\n\n        if (!(geometryFileName in this.files)) {\n          const meshObject = this.buildMeshObject(geometry);\n          this.files[geometryFileName] = this.buildUSDFileAsString(meshObject);\n        }\n\n        if (!(material.uuid in this.materials)) {\n          this.materials[material.uuid] = material;\n        }\n\n        output += this.buildXform(object, geometry, material);\n      }\n    });\n    output += this.buildMaterials(this.materials);\n    this.files[modelFileName] = strToU8(output);\n    output = null;\n\n    for (const id in this.textures) {\n      const texture = this.textures[id];\n      const color = id.split('_')[1];\n      const isRGBA = texture.format === 1023;\n      const canvas = this.imageToCanvas(texture.image, color);\n      const blob = await new Promise(resolve => canvas === null || canvas === void 0 ? void 0 : canvas.toBlob(resolve, isRGBA ? 'image/png' : 'image/jpeg', 1));\n\n      if (blob) {\n        this.files[`textures/Texture_${id}.${isRGBA ? 'png' : 'jpg'}`] = new Uint8Array(await blob.arrayBuffer());\n      }\n    } // 64 byte alignment\n    // https://github.com/101arrowz/fflate/issues/39#issuecomment-777263109\n\n\n    let offset = 0;\n\n    for (const filename in this.files) {\n      const file = this.files[filename];\n      const headerSize = 34 + filename.length;\n      offset += headerSize;\n      const offsetMod64 = offset & 63;\n\n      if (offsetMod64 !== 4 && file !== null && file instanceof Uint8Array) {\n        const padLength = 64 - offsetMod64;\n        const padding = new Uint8Array(padLength);\n        this.files[filename] = [file, {\n          extra: {\n            12345: padding\n          }\n        }];\n      }\n\n      if (file && typeof file.length === 'number') {\n        offset = file.length;\n      }\n    }\n\n    return zipSync(this.files, {\n      level: 0\n    });\n  }\n\n  imageToCanvas(image, color) {\n    if (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof OffscreenCanvas !== 'undefined' && image instanceof OffscreenCanvas || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n      const scale = 1024 / Math.max(image.width, image.height);\n      const canvas = document.createElement('canvas');\n      canvas.width = image.width * Math.min(1, scale);\n      canvas.height = image.height * Math.min(1, scale);\n      const context = canvas.getContext('2d');\n      context === null || context === void 0 ? void 0 : context.drawImage(image, 0, 0, canvas.width, canvas.height);\n\n      if (color !== undefined) {\n        const hex = parseInt(color, 16);\n        const r = (hex >> 16 & 255) / 255;\n        const g = (hex >> 8 & 255) / 255;\n        const b = (hex & 255) / 255;\n        const imagedata = context === null || context === void 0 ? void 0 : context.getImageData(0, 0, canvas.width, canvas.height);\n\n        if (imagedata) {\n          const data = imagedata === null || imagedata === void 0 ? void 0 : imagedata.data;\n\n          for (let i = 0; i < data.length; i += 4) {\n            data[i + 0] = data[i + 0] * r;\n            data[i + 1] = data[i + 1] * g;\n            data[i + 2] = data[i + 2] * b;\n          }\n\n          context === null || context === void 0 ? void 0 : context.putImageData(imagedata, 0, 0);\n        }\n      }\n\n      return canvas;\n    }\n  }\n\n  buildHeader() {\n    return `#usda 1.0\n(\n    customLayerData = {\n        string creator = \"Three.js USDZExporter\"\n    }\n    metersPerUnit = 1\n    upAxis = \"Y\"\n)\n`;\n  }\n\n  buildUSDFileAsString(dataToInsert) {\n    let output = this.buildHeader();\n    output += dataToInsert;\n    return strToU8(output);\n  } // Xform\n\n\n  buildXform(object, geometry, material) {\n    const name = 'Object_' + object.id;\n    const transform = this.buildMatrix(object.matrixWorld);\n\n    if (object.matrixWorld.determinant() < 0) {\n      console.warn('THREE.USDZExporter: USDZ does not support negative scales', object);\n    }\n\n    return `def Xform \"${name}\" (\n    prepend references = @./geometries/Geometry_${geometry.id}.usd@</Geometry>\n)\n{\n    matrix4d xformOp:transform = ${transform}\n    uniform token[] xformOpOrder = [\"xformOp:transform\"]\n    rel material:binding = </Materials/Material_${material.id}>\n}\n`;\n  }\n\n  buildMatrix(matrix) {\n    const array = matrix.elements;\n    return `( ${this.buildMatrixRow(array, 0)}, ${this.buildMatrixRow(array, 4)}, ${this.buildMatrixRow(array, 8)}, ${this.buildMatrixRow(array, 12)} )`;\n  }\n\n  buildMatrixRow(array, offset) {\n    return `(${array[offset + 0]}, ${array[offset + 1]}, ${array[offset + 2]}, ${array[offset + 3]})`;\n  } // Mesh\n\n\n  buildMeshObject(geometry) {\n    const mesh = this.buildMesh(geometry);\n    return `\ndef \"Geometry\"\n{\n  ${mesh}\n}\n`;\n  }\n\n  buildMesh(geometry) {\n    const name = 'Geometry';\n    const attributes = geometry.attributes;\n    const count = attributes.position.count;\n    return `\n    def Mesh \"${name}\"\n    {\n        int[] faceVertexCounts = [${this.buildMeshVertexCount(geometry)}]\n        int[] faceVertexIndices = [${this.buildMeshVertexIndices(geometry)}]\n        normal3f[] normals = [${this.buildVector3Array(attributes.normal, count)}] (\n            interpolation = \"vertex\"\n        )\n        point3f[] points = [${this.buildVector3Array(attributes.position, count)}]\n        float2[] primvars:st = [${this.buildVector2Array(attributes.uv, count)}] (\n            interpolation = \"vertex\"\n        )\n        uniform token subdivisionScheme = \"none\"\n    }\n`;\n  }\n\n  buildMeshVertexCount(geometry) {\n    const count = geometry.index !== null ? geometry.index.array.length : geometry.attributes.position.count;\n    return Array(count / 3).fill(3).join(', ');\n  }\n\n  buildMeshVertexIndices(geometry) {\n    if (geometry.index !== null) {\n      // @ts-expect-error\n      return geometry.index.array.join(', ');\n    }\n\n    const array = [];\n    const length = geometry.attributes.position.count;\n\n    for (let i = 0; i < length; i++) {\n      array.push(i);\n    }\n\n    return array.join(', ');\n  }\n\n  buildVector3Array(attribute, count) {\n    if (attribute === undefined) {\n      console.warn('USDZExporter: Normals missing.');\n      return Array(count).fill('(0, 0, 0)').join(', ');\n    }\n\n    const array = [];\n    const data = attribute.array;\n\n    for (let i = 0; i < data.length; i += 3) {\n      array.push(`(${data[i + 0].toPrecision(this.PRECISION)}, ${data[i + 1].toPrecision(this.PRECISION)}, ${data[i + 2].toPrecision(this.PRECISION)})`);\n    }\n\n    return array.join(', ');\n  }\n\n  buildVector2Array(attribute, count) {\n    if (attribute === undefined) {\n      console.warn('USDZExporter: UVs missing.');\n      return Array(count).fill('(0, 0)').join(', ');\n    }\n\n    const array = [];\n    const data = attribute.array;\n\n    for (let i = 0; i < data.length; i += 2) {\n      // @ts-expect-error\n      array.push(`(${data[i + 0].toPrecision(this.PRECISION)}, ${1 - data[i + 1].toPrecision(this.PRECISION)})`);\n    }\n\n    return array.join(', ');\n  } // Materials\n\n\n  buildMaterials(materials) {\n    const array = [];\n\n    for (const uuid in materials) {\n      const material = materials[uuid];\n      array.push(this.buildMaterial(material));\n    }\n\n    return `def \"Materials\"\n{\n${array.join('')}\n}\n`;\n  }\n\n  buildMaterial(material) {\n    // https://graphics.pixar.com/usd/docs/UsdPreviewSurface-Proposal.html\n    const pad = '            ';\n    const inputs = [];\n    const samplers = [];\n\n    if (material.map !== null) {\n      inputs.push(`${pad}color3f inputs:diffuseColor.connect = </Materials/Material_${material.id}/Texture_${material.map.id}_diffuse.outputs:rgb>`);\n      samplers.push(this.buildTexture(material, material.map, 'diffuse', material.color));\n    } else {\n      inputs.push(`${pad}color3f inputs:diffuseColor = ${this.buildColor(material.color)}`);\n    }\n\n    if (material.emissiveMap !== null) {\n      inputs.push(`${pad}color3f inputs:emissiveColor.connect = </Materials/Material_${material.id}/Texture_${material.emissiveMap.id}_emissive.outputs:rgb>`);\n      samplers.push(this.buildTexture(material, material.emissiveMap, 'emissive'));\n    } else if (material.emissive.getHex() > 0) {\n      inputs.push(`${pad}color3f inputs:emissiveColor = ${this.buildColor(material.emissive)}`);\n    }\n\n    if (material.normalMap !== null) {\n      inputs.push(`${pad}normal3f inputs:normal.connect = </Materials/Material_${material.id}/Texture_${material.normalMap.id}_normal.outputs:rgb>`);\n      samplers.push(this.buildTexture(material, material.normalMap, 'normal'));\n    }\n\n    if (material.aoMap !== null) {\n      inputs.push(`${pad}float inputs:occlusion.connect = </Materials/Material_${material.id}/Texture_${material.aoMap.id}_occlusion.outputs:r>`);\n      samplers.push(this.buildTexture(material, material.aoMap, 'occlusion'));\n    }\n\n    if (material.roughnessMap !== null && material.roughness === 1) {\n      inputs.push(`${pad}float inputs:roughness.connect = </Materials/Material_${material.id}/Texture_${material.roughnessMap.id}_roughness.outputs:g>`);\n      samplers.push(this.buildTexture(material, material.roughnessMap, 'roughness'));\n    } else {\n      inputs.push(`${pad}float inputs:roughness = ${material.roughness}`);\n    }\n\n    if (material.metalnessMap !== null && material.metalness === 1) {\n      inputs.push(`${pad}float inputs:metallic.connect = </Materials/Material_${material.id}/Texture_${material.metalnessMap.id}_metallic.outputs:b>`);\n      samplers.push(this.buildTexture(material, material.metalnessMap, 'metallic'));\n    } else {\n      inputs.push(`${pad}float inputs:metallic = ${material.metalness}`);\n    }\n\n    inputs.push(`${pad}float inputs:opacity = ${material.opacity}`);\n\n    if (material instanceof MeshPhysicalMaterial) {\n      inputs.push(`${pad}float inputs:clearcoat = ${material.clearcoat}`);\n      inputs.push(`${pad}float inputs:clearcoatRoughness = ${material.clearcoatRoughness}`);\n      inputs.push(`${pad}float inputs:ior = ${material.ior}`);\n    }\n\n    return `\n    def Material \"Material_${material.id}\"\n    {\n        def Shader \"PreviewSurface\"\n        {\n            uniform token info:id = \"UsdPreviewSurface\"\n${inputs.join('\\n')}\n            int inputs:useSpecularWorkflow = 0\n            token outputs:surface\n        }\n        token outputs:surface.connect = </Materials/Material_${material.id}/PreviewSurface.outputs:surface>\n        token inputs:frame:stPrimvarName = \"st\"\n        def Shader \"uvReader_st\"\n        {\n            uniform token info:id = \"UsdPrimvarReader_float2\"\n            token inputs:varname.connect = </Materials/Material_${material.id}.inputs:frame:stPrimvarName>\n            float2 inputs:fallback = (0.0, 0.0)\n            float2 outputs:result\n        }\n${samplers.join('\\n')}\n    }\n`;\n  }\n\n  buildTexture(material, texture, mapType, color) {\n    const id = texture.id + (color ? '_' + color.getHexString() : '');\n    const isRGBA = texture.format === 1023;\n    this.textures[id] = texture;\n    return `\n      def Shader \"Transform2d_${mapType}\" (\n          sdrMetadata = {\n              string role = \"math\"\n          }\n      )\n      {\n          uniform token info:id = \"UsdTransform2d\"\n          float2 inputs:in.connect = </Materials/Material_${material.id}/uvReader_st.outputs:result>\n          float2 inputs:scale = ${this.buildVector2(texture.repeat)}\n          float2 inputs:translation = ${this.buildVector2(texture.offset)}\n          float2 outputs:result\n      }\n      def Shader \"Texture_${texture.id}_${mapType}\"\n      {\n          uniform token info:id = \"UsdUVTexture\"\n          asset inputs:file = @textures/Texture_${id}.${isRGBA ? 'png' : 'jpg'}@\n          float2 inputs:st.connect = </Materials/Material_${material.id}/Transform2d_${mapType}.outputs:result>\n          token inputs:wrapS = \"repeat\"\n          token inputs:wrapT = \"repeat\"\n          float outputs:r\n          float outputs:g\n          float outputs:b\n          float3 outputs:rgb\n      }`;\n  }\n\n  buildColor(color) {\n    return `(${color.r}, ${color.g}, ${color.b})`;\n  }\n\n  buildVector2(vector) {\n    return `(${vector.x}, ${vector.y})`;\n  }\n\n}\n\nexport { USDZExporter };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}