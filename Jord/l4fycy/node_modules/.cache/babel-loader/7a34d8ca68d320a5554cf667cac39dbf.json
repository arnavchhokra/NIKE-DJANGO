{"ast":null,"code":"import _createForOfIteratorHelper from \"D:/Github/NIKE-DJANGO/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"D:/Github/NIKE-DJANGO/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Github/NIKE-DJANGO/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"D:/Github/NIKE-DJANGO/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"D:/Github/NIKE-DJANGO/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"D:/Github/NIKE-DJANGO/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Matrix4, EventDispatcher, EllipseCurve, BufferGeometry, MathUtils, Vector3, GridHelper, LineBasicMaterial, Line, Raycaster, Vector2, Quaternion, Group, Box3, Sphere } from 'three'; //trackball state\n\nvar STATE = {\n  IDLE: Symbol(),\n  ROTATE: Symbol(),\n  PAN: Symbol(),\n  SCALE: Symbol(),\n  FOV: Symbol(),\n  FOCUS: Symbol(),\n  ZROTATE: Symbol(),\n  TOUCH_MULTI: Symbol(),\n  ANIMATION_FOCUS: Symbol(),\n  ANIMATION_ROTATE: Symbol()\n};\nvar INPUT = {\n  NONE: Symbol(),\n  ONE_FINGER: Symbol(),\n  ONE_FINGER_SWITCHED: Symbol(),\n  TWO_FINGER: Symbol(),\n  MULT_FINGER: Symbol(),\n  CURSOR: Symbol()\n}; //cursor center coordinates\n\nvar _center = {\n  x: 0,\n  y: 0\n}; //transformation matrices for gizmos and camera\n\nvar _transformation = {\n  camera: new Matrix4(),\n  gizmos: new Matrix4()\n}; //events\n\nvar _changeEvent = {\n  type: 'change'\n};\nvar _startEvent = {\n  type: 'start'\n};\nvar _endEvent = {\n  type: 'end'\n};\n/**\r\n *\r\n * @param {CamOrthographicCamera | PerspectiveCameraera} camera Virtual camera used in the scene\r\n * @param {HTMLElement=null} domElement Renderer's dom element\r\n * @param {Scene=null} scene The scene to be rendered\r\n */\n\nvar ArcballControls = /*#__PURE__*/function (_EventDispatcher) {\n  _inherits(ArcballControls, _EventDispatcher);\n\n  var _super = _createSuper(ArcballControls);\n\n  function ArcballControls(_camera) {\n    var _this;\n\n    var _domElement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    var scene = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n    _classCallCheck(this, ArcballControls);\n\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"camera\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"domElement\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"scene\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"mouseActions\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_mouseOp\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_v2_1\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_v3_1\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_v3_2\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_m4_1\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_m4_2\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_quat\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_translationMatrix\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_rotationMatrix\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_scaleMatrix\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_rotationAxis\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_cameraMatrixState\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_cameraProjectionState\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_fovState\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_upState\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_zoomState\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_nearPos\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_farPos\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_gizmoMatrixState\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_up0\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_zoom0\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_fov0\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_initialNear\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_nearPos0\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_initialFar\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_farPos0\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_cameraMatrixState0\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_gizmoMatrixState0\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_button\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_touchStart\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_touchCurrent\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_input\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_switchSensibility\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_startFingerDistance\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_currentFingerDistance\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_startFingerRotation\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_currentFingerRotation\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_devPxRatio\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_downValid\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_nclicks\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_downEvents\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_clickStart\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_maxDownTime\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_maxInterval\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_posThreshold\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_movementThreshold\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_currentCursorPosition\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_startCursorPosition\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_grid\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_gridPosition\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_gizmos\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_curvePts\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_timeStart\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_animationId\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"focusAnimationTime\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_timePrev\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_timeCurrent\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_anglePrev\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_angleCurrent\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_cursorPosPrev\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_cursorPosCurr\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_wPrev\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_wCurr\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"adjustNearFar\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"scaleFactor\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"dampingFactor\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"wMax\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"enableAnimations\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"enableGrid\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"cursorZoom\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"minFov\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"maxFov\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"enabled\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"enablePan\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"enableRotate\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"enableZoom\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"minDistance\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"maxDistance\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"minZoom\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"maxZoom\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"target\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_currentTarget\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_tbRadius\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_state\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"onWindowResize\", function () {\n      var scale = (_this._gizmos.scale.x + _this._gizmos.scale.y + _this._gizmos.scale.z) / 3;\n\n      if (_this.camera) {\n        var tbRadius = _this.calculateTbRadius(_this.camera);\n\n        if (tbRadius !== undefined) {\n          _this._tbRadius = tbRadius;\n        }\n      }\n\n      var newRadius = _this._tbRadius / scale; // @ts-expect-error\n\n      var curve = new EllipseCurve(0, 0, newRadius, newRadius);\n      var points = curve.getPoints(_this._curvePts);\n      var curveGeometry = new BufferGeometry().setFromPoints(points);\n\n      for (var gizmo in _this._gizmos.children) {\n        var child = _this._gizmos.children[gizmo];\n        child.geometry = curveGeometry;\n      }\n\n      _this.dispatchEvent(_changeEvent);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onContextMenu\", function (event) {\n      if (!_this.enabled) {\n        return;\n      }\n\n      for (var i = 0; i < _this.mouseActions.length; i++) {\n        if (_this.mouseActions[i].mouse == 2) {\n          //prevent only if button 2 is actually used\n          event.preventDefault();\n          break;\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onPointerCancel\", function () {\n      _this._touchStart.splice(0, _this._touchStart.length);\n\n      _this._touchCurrent.splice(0, _this._touchCurrent.length);\n\n      _this._input = INPUT.NONE;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onPointerDown\", function (event) {\n      if (event.button == 0 && event.isPrimary) {\n        _this._downValid = true;\n\n        _this._downEvents.push(event);\n      } else {\n        _this._downValid = false;\n      }\n\n      if (event.pointerType == 'touch' && _this._input != INPUT.CURSOR) {\n        _this._touchStart.push(event);\n\n        _this._touchCurrent.push(event);\n\n        switch (_this._input) {\n          case INPUT.NONE:\n            //singleStart\n            _this._input = INPUT.ONE_FINGER;\n\n            _this.onSinglePanStart(event, 'ROTATE');\n\n            window.addEventListener('pointermove', _this.onPointerMove);\n            window.addEventListener('pointerup', _this.onPointerUp);\n            break;\n\n          case INPUT.ONE_FINGER:\n          case INPUT.ONE_FINGER_SWITCHED:\n            //doubleStart\n            _this._input = INPUT.TWO_FINGER;\n\n            _this.onRotateStart();\n\n            _this.onPinchStart();\n\n            _this.onDoublePanStart();\n\n            break;\n\n          case INPUT.TWO_FINGER:\n            //multipleStart\n            _this._input = INPUT.MULT_FINGER;\n\n            _this.onTriplePanStart();\n\n            break;\n        }\n      } else if (event.pointerType != 'touch' && _this._input == INPUT.NONE) {\n        var modifier = null;\n\n        if (event.ctrlKey || event.metaKey) {\n          modifier = 'CTRL';\n        } else if (event.shiftKey) {\n          modifier = 'SHIFT';\n        }\n\n        _this._mouseOp = _this.getOpFromAction(event.button, modifier);\n\n        if (_this._mouseOp) {\n          window.addEventListener('pointermove', _this.onPointerMove);\n          window.addEventListener('pointerup', _this.onPointerUp); //singleStart\n\n          _this._input = INPUT.CURSOR;\n          _this._button = event.button;\n\n          _this.onSinglePanStart(event, _this._mouseOp);\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onPointerMove\", function (event) {\n      if (event.pointerType == 'touch' && _this._input != INPUT.CURSOR) {\n        switch (_this._input) {\n          case INPUT.ONE_FINGER:\n            //singleMove\n            _this.updateTouchEvent(event);\n\n            _this.onSinglePanMove(event, STATE.ROTATE);\n\n            break;\n\n          case INPUT.ONE_FINGER_SWITCHED:\n            var movement = _this.calculatePointersDistance(_this._touchCurrent[0], event) * _this._devPxRatio;\n\n            if (movement >= _this._switchSensibility) {\n              //singleMove\n              _this._input = INPUT.ONE_FINGER;\n\n              _this.updateTouchEvent(event);\n\n              _this.onSinglePanStart(event, 'ROTATE');\n\n              break;\n            }\n\n            break;\n\n          case INPUT.TWO_FINGER:\n            //rotate/pan/pinchMove\n            _this.updateTouchEvent(event);\n\n            _this.onRotateMove();\n\n            _this.onPinchMove();\n\n            _this.onDoublePanMove();\n\n            break;\n\n          case INPUT.MULT_FINGER:\n            //multMove\n            _this.updateTouchEvent(event);\n\n            _this.onTriplePanMove();\n\n            break;\n        }\n      } else if (event.pointerType != 'touch' && _this._input == INPUT.CURSOR) {\n        var modifier = null;\n\n        if (event.ctrlKey || event.metaKey) {\n          modifier = 'CTRL';\n        } else if (event.shiftKey) {\n          modifier = 'SHIFT';\n        }\n\n        var mouseOpState = _this.getOpStateFromAction(_this._button, modifier);\n\n        if (mouseOpState) {\n          _this.onSinglePanMove(event, mouseOpState);\n        }\n      } //checkDistance\n\n\n      if (_this._downValid) {\n        var _movement = _this.calculatePointersDistance(_this._downEvents[_this._downEvents.length - 1], event) * _this._devPxRatio;\n\n        if (_movement > _this._movementThreshold) {\n          _this._downValid = false;\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onPointerUp\", function (event) {\n      if (event.pointerType == 'touch' && _this._input != INPUT.CURSOR) {\n        var nTouch = _this._touchCurrent.length;\n\n        for (var i = 0; i < nTouch; i++) {\n          if (_this._touchCurrent[i].pointerId == event.pointerId) {\n            _this._touchCurrent.splice(i, 1);\n\n            _this._touchStart.splice(i, 1);\n\n            break;\n          }\n        }\n\n        switch (_this._input) {\n          case INPUT.ONE_FINGER:\n          case INPUT.ONE_FINGER_SWITCHED:\n            //singleEnd\n            window.removeEventListener('pointermove', _this.onPointerMove);\n            window.removeEventListener('pointerup', _this.onPointerUp);\n            _this._input = INPUT.NONE;\n\n            _this.onSinglePanEnd();\n\n            break;\n\n          case INPUT.TWO_FINGER:\n            //doubleEnd\n            _this.onDoublePanEnd();\n\n            _this.onPinchEnd();\n\n            _this.onRotateEnd(); //switching to singleStart\n\n\n            _this._input = INPUT.ONE_FINGER_SWITCHED;\n            break;\n\n          case INPUT.MULT_FINGER:\n            if (_this._touchCurrent.length == 0) {\n              window.removeEventListener('pointermove', _this.onPointerMove);\n              window.removeEventListener('pointerup', _this.onPointerUp); //multCancel\n\n              _this._input = INPUT.NONE;\n\n              _this.onTriplePanEnd();\n            }\n\n            break;\n        }\n      } else if (event.pointerType != 'touch' && _this._input == INPUT.CURSOR) {\n        window.removeEventListener('pointermove', _this.onPointerMove);\n        window.removeEventListener('pointerup', _this.onPointerUp);\n        _this._input = INPUT.NONE;\n\n        _this.onSinglePanEnd();\n\n        _this._button = -1;\n      }\n\n      if (event.isPrimary) {\n        if (_this._downValid) {\n          var downTime = event.timeStamp - _this._downEvents[_this._downEvents.length - 1].timeStamp;\n\n          if (downTime <= _this._maxDownTime) {\n            if (_this._nclicks == 0) {\n              //first valid click detected\n              _this._nclicks = 1;\n              _this._clickStart = performance.now();\n            } else {\n              var clickInterval = event.timeStamp - _this._clickStart;\n\n              var movement = _this.calculatePointersDistance(_this._downEvents[1], _this._downEvents[0]) * _this._devPxRatio;\n\n              if (clickInterval <= _this._maxInterval && movement <= _this._posThreshold) {\n                //second valid click detected\n                //fire double tap and reset values\n                _this._nclicks = 0;\n\n                _this._downEvents.splice(0, _this._downEvents.length);\n\n                _this.onDoubleTap(event);\n              } else {\n                //new 'first click'\n                _this._nclicks = 1;\n\n                _this._downEvents.shift();\n\n                _this._clickStart = performance.now();\n              }\n            }\n          } else {\n            _this._downValid = false;\n            _this._nclicks = 0;\n\n            _this._downEvents.splice(0, _this._downEvents.length);\n          }\n        } else {\n          _this._nclicks = 0;\n\n          _this._downEvents.splice(0, _this._downEvents.length);\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onWheel\", function (event) {\n      var _this$camera3;\n\n      if (_this.enabled && _this.enableZoom && _this.domElement) {\n        var modifier = null;\n\n        if (event.ctrlKey || event.metaKey) {\n          modifier = 'CTRL';\n        } else if (event.shiftKey) {\n          modifier = 'SHIFT';\n        }\n\n        var mouseOp = _this.getOpFromAction('WHEEL', modifier);\n\n        if (mouseOp) {\n          event.preventDefault();\n\n          _this.dispatchEvent(_startEvent);\n\n          var notchDeltaY = 125; //distance of one notch of mouse wheel\n\n          var sgn = event.deltaY / notchDeltaY;\n          var size = 1;\n\n          if (sgn > 0) {\n            size = 1 / _this.scaleFactor;\n          } else if (sgn < 0) {\n            size = _this.scaleFactor;\n          }\n\n          switch (mouseOp) {\n            case 'ZOOM':\n              _this.updateTbState(STATE.SCALE, true);\n\n              if (sgn > 0) {\n                size = 1 / Math.pow(_this.scaleFactor, sgn);\n              } else if (sgn < 0) {\n                size = Math.pow(_this.scaleFactor, -sgn);\n              }\n\n              if (_this.cursorZoom && _this.enablePan) {\n                var _this$camera, _this$camera2;\n\n                var scalePoint;\n\n                if (((_this$camera = _this.camera) === null || _this$camera === void 0 ? void 0 : _this$camera.type) === 'OrthographicCamera') {\n                  var _this$unprojectOnTbPl;\n\n                  scalePoint = (_this$unprojectOnTbPl = _this.unprojectOnTbPlane(_this.camera, event.clientX, event.clientY, _this.domElement)) === null || _this$unprojectOnTbPl === void 0 ? void 0 : _this$unprojectOnTbPl.applyQuaternion(_this.camera.quaternion).multiplyScalar(1 / _this.camera.zoom).add(_this._gizmos.position);\n                }\n\n                if (((_this$camera2 = _this.camera) === null || _this$camera2 === void 0 ? void 0 : _this$camera2.type) === 'PerspectiveCamera') {\n                  var _this$unprojectOnTbPl2;\n\n                  scalePoint = (_this$unprojectOnTbPl2 = _this.unprojectOnTbPlane(_this.camera, event.clientX, event.clientY, _this.domElement)) === null || _this$unprojectOnTbPl2 === void 0 ? void 0 : _this$unprojectOnTbPl2.applyQuaternion(_this.camera.quaternion).add(_this._gizmos.position);\n                }\n\n                if (scalePoint !== undefined) _this.applyTransformMatrix(_this.applyScale(size, scalePoint));\n              } else {\n                _this.applyTransformMatrix(_this.applyScale(size, _this._gizmos.position));\n              }\n\n              if (_this._grid) {\n                _this.disposeGrid();\n\n                _this.drawGrid();\n              }\n\n              _this.updateTbState(STATE.IDLE, false);\n\n              _this.dispatchEvent(_changeEvent);\n\n              _this.dispatchEvent(_endEvent);\n\n              break;\n\n            case 'FOV':\n              if (((_this$camera3 = _this.camera) === null || _this$camera3 === void 0 ? void 0 : _this$camera3.type) === 'PerspectiveCamera') {\n                _this.updateTbState(STATE.FOV, true); //Vertigo effect\n                //\t  fov / 2\n                //\t\t|\\\n                //\t\t| \\\n                //\t\t|  \\\n                //\tx\t|\t\\\n                //\t\t| \t \\\n                //\t\t| \t  \\\n                //\t\t| _ _ _\\\n                //\t\t\ty\n                //check for iOs shift shortcut\n\n\n                if (event.deltaX != 0) {\n                  sgn = event.deltaX / notchDeltaY;\n                  size = 1;\n\n                  if (sgn > 0) {\n                    size = 1 / Math.pow(_this.scaleFactor, sgn);\n                  } else if (sgn < 0) {\n                    size = Math.pow(_this.scaleFactor, -sgn);\n                  }\n                }\n\n                _this._v3_1.setFromMatrixPosition(_this._cameraMatrixState);\n\n                var x = _this._v3_1.distanceTo(_this._gizmos.position);\n\n                var xNew = x / size; //distance between camera and gizmos if scale(size, scalepoint) would be performed\n                //check min and max distance\n\n                xNew = MathUtils.clamp(xNew, _this.minDistance, _this.maxDistance);\n                var y = x * Math.tan(MathUtils.DEG2RAD * _this.camera.fov * 0.5); //calculate new fov\n\n                var newFov = MathUtils.RAD2DEG * (Math.atan(y / xNew) * 2); //check min and max fov\n\n                if (newFov > _this.maxFov) {\n                  newFov = _this.maxFov;\n                } else if (newFov < _this.minFov) {\n                  newFov = _this.minFov;\n                }\n\n                var newDistance = y / Math.tan(MathUtils.DEG2RAD * (newFov / 2));\n                size = x / newDistance;\n\n                _this.setFov(newFov);\n\n                _this.applyTransformMatrix(_this.applyScale(size, _this._gizmos.position, false));\n              }\n\n              if (_this._grid) {\n                _this.disposeGrid();\n\n                _this.drawGrid();\n              }\n\n              _this.updateTbState(STATE.IDLE, false);\n\n              _this.dispatchEvent(_changeEvent);\n\n              _this.dispatchEvent(_endEvent);\n\n              break;\n          }\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSinglePanStart\", function (event, operation) {\n      var _this$camera4;\n\n      if (_this.enabled && _this.domElement) {\n        _this.dispatchEvent(_startEvent);\n\n        _this.setCenter(event.clientX, event.clientY);\n\n        switch (operation) {\n          case 'PAN':\n            if (!_this.enablePan) return;\n\n            if (_this._animationId != -1) {\n              cancelAnimationFrame(_this._animationId);\n              _this._animationId = -1;\n              _this._timeStart = -1;\n\n              _this.activateGizmos(false);\n\n              _this.dispatchEvent(_changeEvent);\n            }\n\n            if (_this.camera) {\n              _this.updateTbState(STATE.PAN, true);\n\n              var rayDir = _this.unprojectOnTbPlane(_this.camera, _center.x, _center.y, _this.domElement);\n\n              if (rayDir !== undefined) {\n                _this._startCursorPosition.copy(rayDir);\n              }\n\n              if (_this.enableGrid) {\n                _this.drawGrid();\n\n                _this.dispatchEvent(_changeEvent);\n              }\n            }\n\n            break;\n\n          case 'ROTATE':\n            if (!_this.enableRotate) return;\n\n            if (_this._animationId != -1) {\n              cancelAnimationFrame(_this._animationId);\n              _this._animationId = -1;\n              _this._timeStart = -1;\n            }\n\n            if (_this.camera) {\n              _this.updateTbState(STATE.ROTATE, true);\n\n              var _rayDir = _this.unprojectOnTbSurface(_this.camera, _center.x, _center.y, _this.domElement, _this._tbRadius);\n\n              if (_rayDir !== undefined) {\n                _this._startCursorPosition.copy(_rayDir);\n              }\n\n              _this.activateGizmos(true);\n\n              if (_this.enableAnimations) {\n                _this._timePrev = _this._timeCurrent = performance.now();\n                _this._angleCurrent = _this._anglePrev = 0;\n\n                _this._cursorPosPrev.copy(_this._startCursorPosition);\n\n                _this._cursorPosCurr.copy(_this._cursorPosPrev);\n\n                _this._wCurr = 0;\n                _this._wPrev = _this._wCurr;\n              }\n            }\n\n            _this.dispatchEvent(_changeEvent);\n\n            break;\n\n          case 'FOV':\n            if (!_this.enableZoom) return;\n\n            if (((_this$camera4 = _this.camera) === null || _this$camera4 === void 0 ? void 0 : _this$camera4.type) === 'PerspectiveCamera') {\n              if (_this._animationId != -1) {\n                cancelAnimationFrame(_this._animationId);\n                _this._animationId = -1;\n                _this._timeStart = -1;\n\n                _this.activateGizmos(false);\n\n                _this.dispatchEvent(_changeEvent);\n              }\n\n              _this.updateTbState(STATE.FOV, true);\n\n              _this._startCursorPosition.setY(_this.getCursorNDC(_center.x, _center.y, _this.domElement).y * 0.5);\n\n              _this._currentCursorPosition.copy(_this._startCursorPosition);\n            }\n\n            break;\n\n          case 'ZOOM':\n            if (!_this.enableZoom) return;\n\n            if (_this._animationId != -1) {\n              cancelAnimationFrame(_this._animationId);\n              _this._animationId = -1;\n              _this._timeStart = -1;\n\n              _this.activateGizmos(false);\n\n              _this.dispatchEvent(_changeEvent);\n            }\n\n            _this.updateTbState(STATE.SCALE, true);\n\n            _this._startCursorPosition.setY(_this.getCursorNDC(_center.x, _center.y, _this.domElement).y * 0.5);\n\n            _this._currentCursorPosition.copy(_this._startCursorPosition);\n\n            break;\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSinglePanMove\", function (event, opState) {\n      var _this$camera5;\n\n      if (_this.enabled && _this.domElement) {\n        var restart = opState != _this._state;\n\n        _this.setCenter(event.clientX, event.clientY);\n\n        switch (opState) {\n          case STATE.PAN:\n            if (_this.enablePan && _this.camera) {\n              if (restart) {\n                //switch to pan operation\n                _this.dispatchEvent(_endEvent);\n\n                _this.dispatchEvent(_startEvent);\n\n                _this.updateTbState(opState, true);\n\n                var rayDir = _this.unprojectOnTbPlane(_this.camera, _center.x, _center.y, _this.domElement);\n\n                if (rayDir !== undefined) {\n                  _this._startCursorPosition.copy(rayDir);\n                }\n\n                if (_this.enableGrid) {\n                  _this.drawGrid();\n                }\n\n                _this.activateGizmos(false);\n              } else {\n                //continue with pan operation\n                var _rayDir2 = _this.unprojectOnTbPlane(_this.camera, _center.x, _center.y, _this.domElement);\n\n                if (_rayDir2 !== undefined) {\n                  _this._currentCursorPosition.copy(_rayDir2);\n                }\n\n                _this.applyTransformMatrix(_this.pan(_this._startCursorPosition, _this._currentCursorPosition));\n              }\n            }\n\n            break;\n\n          case STATE.ROTATE:\n            if (_this.enableRotate && _this.camera) {\n              if (restart) {\n                //switch to rotate operation\n                _this.dispatchEvent(_endEvent);\n\n                _this.dispatchEvent(_startEvent);\n\n                _this.updateTbState(opState, true);\n\n                var _rayDir3 = _this.unprojectOnTbSurface(_this.camera, _center.x, _center.y, _this.domElement, _this._tbRadius);\n\n                if (_rayDir3 !== undefined) {\n                  _this._startCursorPosition.copy(_rayDir3);\n                }\n\n                if (_this.enableGrid) {\n                  _this.disposeGrid();\n                }\n\n                _this.activateGizmos(true);\n              } else {\n                //continue with rotate operation\n                var _rayDir4 = _this.unprojectOnTbSurface(_this.camera, _center.x, _center.y, _this.domElement, _this._tbRadius);\n\n                if (_rayDir4 !== undefined) {\n                  _this._currentCursorPosition.copy(_rayDir4);\n                }\n\n                var distance = _this._startCursorPosition.distanceTo(_this._currentCursorPosition);\n\n                var angle = _this._startCursorPosition.angleTo(_this._currentCursorPosition);\n\n                var amount = Math.max(distance / _this._tbRadius, angle); //effective rotation angle\n\n                _this.applyTransformMatrix(_this.rotate(_this.calculateRotationAxis(_this._startCursorPosition, _this._currentCursorPosition), amount));\n\n                if (_this.enableAnimations) {\n                  _this._timePrev = _this._timeCurrent;\n                  _this._timeCurrent = performance.now();\n                  _this._anglePrev = _this._angleCurrent;\n                  _this._angleCurrent = amount;\n\n                  _this._cursorPosPrev.copy(_this._cursorPosCurr);\n\n                  _this._cursorPosCurr.copy(_this._currentCursorPosition);\n\n                  _this._wPrev = _this._wCurr;\n                  _this._wCurr = _this.calculateAngularSpeed(_this._anglePrev, _this._angleCurrent, _this._timePrev, _this._timeCurrent);\n                }\n              }\n            }\n\n            break;\n\n          case STATE.SCALE:\n            if (_this.enableZoom) {\n              if (restart) {\n                //switch to zoom operation\n                _this.dispatchEvent(_endEvent);\n\n                _this.dispatchEvent(_startEvent);\n\n                _this.updateTbState(opState, true);\n\n                _this._startCursorPosition.setY(_this.getCursorNDC(_center.x, _center.y, _this.domElement).y * 0.5);\n\n                _this._currentCursorPosition.copy(_this._startCursorPosition);\n\n                if (_this.enableGrid) {\n                  _this.disposeGrid();\n                }\n\n                _this.activateGizmos(false);\n              } else {\n                //continue with zoom operation\n                var screenNotches = 8; //how many wheel notches corresponds to a full screen pan\n\n                _this._currentCursorPosition.setY(_this.getCursorNDC(_center.x, _center.y, _this.domElement).y * 0.5);\n\n                var movement = _this._currentCursorPosition.y - _this._startCursorPosition.y;\n                var size = 1;\n\n                if (movement < 0) {\n                  size = 1 / Math.pow(_this.scaleFactor, -movement * screenNotches);\n                } else if (movement > 0) {\n                  size = Math.pow(_this.scaleFactor, movement * screenNotches);\n                }\n\n                _this.applyTransformMatrix(_this.applyScale(size, _this._gizmos.position));\n              }\n            }\n\n            break;\n\n          case STATE.FOV:\n            if (_this.enableZoom && ((_this$camera5 = _this.camera) === null || _this$camera5 === void 0 ? void 0 : _this$camera5.type) === 'PerspectiveCamera') {\n              if (restart) {\n                //switch to fov operation\n                _this.dispatchEvent(_endEvent);\n\n                _this.dispatchEvent(_startEvent);\n\n                _this.updateTbState(opState, true);\n\n                _this._startCursorPosition.setY(_this.getCursorNDC(_center.x, _center.y, _this.domElement).y * 0.5);\n\n                _this._currentCursorPosition.copy(_this._startCursorPosition);\n\n                if (_this.enableGrid) {\n                  _this.disposeGrid();\n                }\n\n                _this.activateGizmos(false);\n              } else {\n                //continue with fov operation\n                var _screenNotches = 8; //how many wheel notches corresponds to a full screen pan\n\n                _this._currentCursorPosition.setY(_this.getCursorNDC(_center.x, _center.y, _this.domElement).y * 0.5);\n\n                var _movement2 = _this._currentCursorPosition.y - _this._startCursorPosition.y;\n\n                var _size = 1;\n\n                if (_movement2 < 0) {\n                  _size = 1 / Math.pow(_this.scaleFactor, -_movement2 * _screenNotches);\n                } else if (_movement2 > 0) {\n                  _size = Math.pow(_this.scaleFactor, _movement2 * _screenNotches);\n                }\n\n                _this._v3_1.setFromMatrixPosition(_this._cameraMatrixState);\n\n                var x = _this._v3_1.distanceTo(_this._gizmos.position);\n\n                var xNew = x / _size; //distance between camera and gizmos if scale(size, scalepoint) would be performed\n                //check min and max distance\n\n                xNew = MathUtils.clamp(xNew, _this.minDistance, _this.maxDistance);\n                var y = x * Math.tan(MathUtils.DEG2RAD * _this._fovState * 0.5); //calculate new fov\n\n                var newFov = MathUtils.RAD2DEG * (Math.atan(y / xNew) * 2); //check min and max fov\n\n                newFov = MathUtils.clamp(newFov, _this.minFov, _this.maxFov);\n                var newDistance = y / Math.tan(MathUtils.DEG2RAD * (newFov / 2));\n                _size = x / newDistance;\n\n                _this._v3_2.setFromMatrixPosition(_this._gizmoMatrixState);\n\n                _this.setFov(newFov);\n\n                _this.applyTransformMatrix(_this.applyScale(_size, _this._v3_2, false)); //adjusting distance\n\n\n                var direction = _this._gizmos.position.clone().sub(_this.camera.position).normalize().multiplyScalar(newDistance / x);\n\n                _this._m4_1.makeTranslation(direction.x, direction.y, direction.z);\n              }\n            }\n\n            break;\n        }\n\n        _this.dispatchEvent(_changeEvent);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSinglePanEnd\", function () {\n      if (_this._state == STATE.ROTATE) {\n        if (!_this.enableRotate) {\n          return;\n        }\n\n        if (_this.enableAnimations) {\n          //perform rotation animation\n          var deltaTime = performance.now() - _this._timeCurrent;\n\n          if (deltaTime < 120) {\n            var w = Math.abs((_this._wPrev + _this._wCurr) / 2);\n\n            var self = _assertThisInitialized(_this);\n\n            _this._animationId = window.requestAnimationFrame(function (t) {\n              self.updateTbState(STATE.ANIMATION_ROTATE, true);\n              var rotationAxis = self.calculateRotationAxis(self._cursorPosPrev, self._cursorPosCurr);\n              self.onRotationAnim(t, rotationAxis, Math.min(w, self.wMax));\n            });\n          } else {\n            //cursor has been standing still for over 120 ms since last movement\n            _this.updateTbState(STATE.IDLE, false);\n\n            _this.activateGizmos(false);\n\n            _this.dispatchEvent(_changeEvent);\n          }\n        } else {\n          _this.updateTbState(STATE.IDLE, false);\n\n          _this.activateGizmos(false);\n\n          _this.dispatchEvent(_changeEvent);\n        }\n      } else if (_this._state == STATE.PAN || _this._state == STATE.IDLE) {\n        _this.updateTbState(STATE.IDLE, false);\n\n        if (_this.enableGrid) {\n          _this.disposeGrid();\n        }\n\n        _this.activateGizmos(false);\n\n        _this.dispatchEvent(_changeEvent);\n      }\n\n      _this.dispatchEvent(_endEvent);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDoubleTap\", function (event) {\n      if (_this.enabled && _this.enablePan && _this.scene && _this.camera && _this.domElement) {\n        _this.dispatchEvent(_startEvent);\n\n        _this.setCenter(event.clientX, event.clientY);\n\n        var hitP = _this.unprojectOnObj(_this.getCursorNDC(_center.x, _center.y, _this.domElement), _this.camera);\n\n        if (hitP && _this.enableAnimations) {\n          var self = _assertThisInitialized(_this);\n\n          if (_this._animationId != -1) {\n            window.cancelAnimationFrame(_this._animationId);\n          }\n\n          _this._timeStart = -1;\n          _this._animationId = window.requestAnimationFrame(function (t) {\n            self.updateTbState(STATE.ANIMATION_FOCUS, true);\n            self.onFocusAnim(t, hitP, self._cameraMatrixState, self._gizmoMatrixState);\n          });\n        } else if (hitP && !_this.enableAnimations) {\n          _this.updateTbState(STATE.FOCUS, true);\n\n          _this.focus(hitP, _this.scaleFactor);\n\n          _this.updateTbState(STATE.IDLE, false);\n\n          _this.dispatchEvent(_changeEvent);\n        }\n      }\n\n      _this.dispatchEvent(_endEvent);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDoublePanStart\", function () {\n      if (_this.enabled && _this.enablePan && _this.camera && _this.domElement) {\n        _this.dispatchEvent(_startEvent);\n\n        _this.updateTbState(STATE.PAN, true);\n\n        _this.setCenter((_this._touchCurrent[0].clientX + _this._touchCurrent[1].clientX) / 2, (_this._touchCurrent[0].clientY + _this._touchCurrent[1].clientY) / 2);\n\n        var rayDir = _this.unprojectOnTbPlane(_this.camera, _center.x, _center.y, _this.domElement, true);\n\n        if (rayDir !== undefined) {\n          _this._startCursorPosition.copy(rayDir);\n        }\n\n        _this._currentCursorPosition.copy(_this._startCursorPosition);\n\n        _this.activateGizmos(false);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDoublePanMove\", function () {\n      if (_this.enabled && _this.enablePan && _this.camera && _this.domElement) {\n        _this.setCenter((_this._touchCurrent[0].clientX + _this._touchCurrent[1].clientX) / 2, (_this._touchCurrent[0].clientY + _this._touchCurrent[1].clientY) / 2);\n\n        if (_this._state != STATE.PAN) {\n          _this.updateTbState(STATE.PAN, true);\n\n          _this._startCursorPosition.copy(_this._currentCursorPosition);\n        }\n\n        var rayDir = _this.unprojectOnTbPlane(_this.camera, _center.x, _center.y, _this.domElement, true);\n\n        if (rayDir !== undefined) _this._currentCursorPosition.copy(rayDir);\n\n        _this.applyTransformMatrix(_this.pan(_this._startCursorPosition, _this._currentCursorPosition, true));\n\n        _this.dispatchEvent(_changeEvent);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDoublePanEnd\", function () {\n      _this.updateTbState(STATE.IDLE, false);\n\n      _this.dispatchEvent(_endEvent);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onRotateStart\", function () {\n      if (_this.enabled && _this.enableRotate) {\n        var _this$camera6;\n\n        _this.dispatchEvent(_startEvent);\n\n        _this.updateTbState(STATE.ZROTATE, true); //this._startFingerRotation = event.rotation;\n\n\n        _this._startFingerRotation = _this.getAngle(_this._touchCurrent[1], _this._touchCurrent[0]) + _this.getAngle(_this._touchStart[1], _this._touchStart[0]);\n        _this._currentFingerRotation = _this._startFingerRotation;\n        (_this$camera6 = _this.camera) === null || _this$camera6 === void 0 ? void 0 : _this$camera6.getWorldDirection(_this._rotationAxis); //rotation axis\n\n        if (!_this.enablePan && !_this.enableZoom) {\n          _this.activateGizmos(true);\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onRotateMove\", function () {\n      if (_this.enabled && _this.enableRotate && _this.camera && _this.domElement) {\n        _this.setCenter((_this._touchCurrent[0].clientX + _this._touchCurrent[1].clientX) / 2, (_this._touchCurrent[0].clientY + _this._touchCurrent[1].clientY) / 2);\n\n        var rotationPoint;\n\n        if (_this._state != STATE.ZROTATE) {\n          _this.updateTbState(STATE.ZROTATE, true);\n\n          _this._startFingerRotation = _this._currentFingerRotation;\n        } //this._currentFingerRotation = event.rotation;\n\n\n        _this._currentFingerRotation = _this.getAngle(_this._touchCurrent[1], _this._touchCurrent[0]) + _this.getAngle(_this._touchStart[1], _this._touchStart[0]);\n\n        if (!_this.enablePan) {\n          rotationPoint = new Vector3().setFromMatrixPosition(_this._gizmoMatrixState);\n        } else if (_this.camera) {\n          var _this$unprojectOnTbPl3;\n\n          _this._v3_2.setFromMatrixPosition(_this._gizmoMatrixState);\n\n          rotationPoint = (_this$unprojectOnTbPl3 = _this.unprojectOnTbPlane(_this.camera, _center.x, _center.y, _this.domElement)) === null || _this$unprojectOnTbPl3 === void 0 ? void 0 : _this$unprojectOnTbPl3.applyQuaternion(_this.camera.quaternion).multiplyScalar(1 / _this.camera.zoom).add(_this._v3_2);\n        }\n\n        var amount = MathUtils.DEG2RAD * (_this._startFingerRotation - _this._currentFingerRotation);\n\n        if (rotationPoint !== undefined) {\n          _this.applyTransformMatrix(_this.zRotate(rotationPoint, amount));\n        }\n\n        _this.dispatchEvent(_changeEvent);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onRotateEnd\", function () {\n      _this.updateTbState(STATE.IDLE, false);\n\n      _this.activateGizmos(false);\n\n      _this.dispatchEvent(_endEvent);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onPinchStart\", function () {\n      if (_this.enabled && _this.enableZoom) {\n        _this.dispatchEvent(_startEvent);\n\n        _this.updateTbState(STATE.SCALE, true);\n\n        _this._startFingerDistance = _this.calculatePointersDistance(_this._touchCurrent[0], _this._touchCurrent[1]);\n        _this._currentFingerDistance = _this._startFingerDistance;\n\n        _this.activateGizmos(false);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onPinchMove\", function () {\n      if (_this.enabled && _this.enableZoom && _this.domElement) {\n        _this.setCenter((_this._touchCurrent[0].clientX + _this._touchCurrent[1].clientX) / 2, (_this._touchCurrent[0].clientY + _this._touchCurrent[1].clientY) / 2);\n\n        var minDistance = 12; //minimum distance between fingers (in css pixels)\n\n        if (_this._state != STATE.SCALE) {\n          _this._startFingerDistance = _this._currentFingerDistance;\n\n          _this.updateTbState(STATE.SCALE, true);\n        }\n\n        _this._currentFingerDistance = Math.max(_this.calculatePointersDistance(_this._touchCurrent[0], _this._touchCurrent[1]), minDistance * _this._devPxRatio);\n        var amount = _this._currentFingerDistance / _this._startFingerDistance;\n        var scalePoint;\n\n        if (!_this.enablePan) {\n          scalePoint = _this._gizmos.position;\n        } else {\n          var _this$camera7, _this$camera8;\n\n          if (((_this$camera7 = _this.camera) === null || _this$camera7 === void 0 ? void 0 : _this$camera7.type) === 'OrthographicCamera') {\n            var _this$unprojectOnTbPl4;\n\n            scalePoint = (_this$unprojectOnTbPl4 = _this.unprojectOnTbPlane(_this.camera, _center.x, _center.y, _this.domElement)) === null || _this$unprojectOnTbPl4 === void 0 ? void 0 : _this$unprojectOnTbPl4.applyQuaternion(_this.camera.quaternion).multiplyScalar(1 / _this.camera.zoom).add(_this._gizmos.position);\n          } else if (((_this$camera8 = _this.camera) === null || _this$camera8 === void 0 ? void 0 : _this$camera8.type) === 'PerspectiveCamera') {\n            var _this$unprojectOnTbPl5;\n\n            scalePoint = (_this$unprojectOnTbPl5 = _this.unprojectOnTbPlane(_this.camera, _center.x, _center.y, _this.domElement)) === null || _this$unprojectOnTbPl5 === void 0 ? void 0 : _this$unprojectOnTbPl5.applyQuaternion(_this.camera.quaternion).add(_this._gizmos.position);\n          }\n        }\n\n        if (scalePoint !== undefined) {\n          _this.applyTransformMatrix(_this.applyScale(amount, scalePoint));\n        }\n\n        _this.dispatchEvent(_changeEvent);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onPinchEnd\", function () {\n      _this.updateTbState(STATE.IDLE, false);\n\n      _this.dispatchEvent(_endEvent);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onTriplePanStart\", function () {\n      if (_this.enabled && _this.enableZoom && _this.domElement) {\n        _this.dispatchEvent(_startEvent);\n\n        _this.updateTbState(STATE.SCALE, true); //const center = event.center;\n\n\n        var clientX = 0;\n        var clientY = 0;\n        var nFingers = _this._touchCurrent.length;\n\n        for (var i = 0; i < nFingers; i++) {\n          clientX += _this._touchCurrent[i].clientX;\n          clientY += _this._touchCurrent[i].clientY;\n        }\n\n        _this.setCenter(clientX / nFingers, clientY / nFingers);\n\n        _this._startCursorPosition.setY(_this.getCursorNDC(_center.x, _center.y, _this.domElement).y * 0.5);\n\n        _this._currentCursorPosition.copy(_this._startCursorPosition);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onTriplePanMove\", function () {\n      if (_this.enabled && _this.enableZoom && _this.camera && _this.domElement) {\n        //\t  fov / 2\n        //\t\t|\\\n        //\t\t| \\\n        //\t\t|  \\\n        //\tx\t|\t\\\n        //\t\t| \t \\\n        //\t\t| \t  \\\n        //\t\t| _ _ _\\\n        //\t\t\ty\n        //const center = event.center;\n        var clientX = 0;\n        var clientY = 0;\n        var nFingers = _this._touchCurrent.length;\n\n        for (var i = 0; i < nFingers; i++) {\n          clientX += _this._touchCurrent[i].clientX;\n          clientY += _this._touchCurrent[i].clientY;\n        }\n\n        _this.setCenter(clientX / nFingers, clientY / nFingers);\n\n        var screenNotches = 8; //how many wheel notches corresponds to a full screen pan\n\n        _this._currentCursorPosition.setY(_this.getCursorNDC(_center.x, _center.y, _this.domElement).y * 0.5);\n\n        var movement = _this._currentCursorPosition.y - _this._startCursorPosition.y;\n        var size = 1;\n\n        if (movement < 0) {\n          size = 1 / Math.pow(_this.scaleFactor, -movement * screenNotches);\n        } else if (movement > 0) {\n          size = Math.pow(_this.scaleFactor, movement * screenNotches);\n        }\n\n        _this._v3_1.setFromMatrixPosition(_this._cameraMatrixState);\n\n        var x = _this._v3_1.distanceTo(_this._gizmos.position);\n\n        var xNew = x / size; //distance between camera and gizmos if scale(size, scalepoint) would be performed\n        //check min and max distance\n\n        xNew = MathUtils.clamp(xNew, _this.minDistance, _this.maxDistance);\n        var y = x * Math.tan(MathUtils.DEG2RAD * _this._fovState * 0.5); //calculate new fov\n\n        var newFov = MathUtils.RAD2DEG * (Math.atan(y / xNew) * 2); //check min and max fov\n\n        newFov = MathUtils.clamp(newFov, _this.minFov, _this.maxFov);\n        var newDistance = y / Math.tan(MathUtils.DEG2RAD * (newFov / 2));\n        size = x / newDistance;\n\n        _this._v3_2.setFromMatrixPosition(_this._gizmoMatrixState);\n\n        _this.setFov(newFov);\n\n        _this.applyTransformMatrix(_this.applyScale(size, _this._v3_2, false)); //adjusting distance\n\n\n        var direction = _this._gizmos.position.clone().sub(_this.camera.position).normalize().multiplyScalar(newDistance / x);\n\n        _this._m4_1.makeTranslation(direction.x, direction.y, direction.z);\n\n        _this.dispatchEvent(_changeEvent);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onTriplePanEnd\", function () {\n      _this.updateTbState(STATE.IDLE, false);\n\n      _this.dispatchEvent(_endEvent); //this.dispatchEvent( _changeEvent );\n\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setCenter\", function (clientX, clientY) {\n      _center.x = clientX;\n      _center.y = clientY;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"initializeMouseActions\", function () {\n      _this.setMouseAction('PAN', 0, 'CTRL');\n\n      _this.setMouseAction('PAN', 2);\n\n      _this.setMouseAction('ROTATE', 0);\n\n      _this.setMouseAction('ZOOM', 'WHEEL');\n\n      _this.setMouseAction('ZOOM', 1);\n\n      _this.setMouseAction('FOV', 'WHEEL', 'SHIFT');\n\n      _this.setMouseAction('FOV', 1, 'SHIFT');\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setMouseAction\", function (operation, mouse) {\n      var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      var operationInput = ['PAN', 'ROTATE', 'ZOOM', 'FOV'];\n      var mouseInput = [0, 1, 2, 'WHEEL'];\n      var keyInput = ['CTRL', 'SHIFT', null];\n      var state;\n\n      if (!operationInput.includes(operation) || !mouseInput.includes(mouse) || !keyInput.includes(key)) {\n        //invalid parameters\n        return false;\n      }\n\n      if (mouse == 'WHEEL') {\n        if (operation != 'ZOOM' && operation != 'FOV') {\n          //cannot associate 2D operation to 1D input\n          return false;\n        }\n      }\n\n      switch (operation) {\n        case 'PAN':\n          state = STATE.PAN;\n          break;\n\n        case 'ROTATE':\n          state = STATE.ROTATE;\n          break;\n\n        case 'ZOOM':\n          state = STATE.SCALE;\n          break;\n\n        case 'FOV':\n          state = STATE.FOV;\n          break;\n      }\n\n      var action = {\n        operation: operation,\n        mouse: mouse,\n        key: key,\n        state: state\n      };\n\n      for (var i = 0; i < _this.mouseActions.length; i++) {\n        if (_this.mouseActions[i].mouse == action.mouse && _this.mouseActions[i].key == action.key) {\n          _this.mouseActions.splice(i, 1, action);\n\n          return true;\n        }\n      }\n\n      _this.mouseActions.push(action);\n\n      return true;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getOpFromAction\", function (mouse, key) {\n      var action;\n\n      for (var i = 0; i < _this.mouseActions.length; i++) {\n        action = _this.mouseActions[i];\n\n        if (action.mouse == mouse && action.key == key) {\n          return action.operation;\n        }\n      }\n\n      if (key) {\n        for (var _i = 0; _i < _this.mouseActions.length; _i++) {\n          action = _this.mouseActions[_i];\n\n          if (action.mouse == mouse && action.key == null) {\n            return action.operation;\n          }\n        }\n      }\n\n      return null;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getOpStateFromAction\", function (mouse, key) {\n      var action;\n\n      for (var i = 0; i < _this.mouseActions.length; i++) {\n        action = _this.mouseActions[i];\n\n        if (action.mouse == mouse && action.key == key) {\n          return action.state;\n        }\n      }\n\n      if (key) {\n        for (var _i2 = 0; _i2 < _this.mouseActions.length; _i2++) {\n          action = _this.mouseActions[_i2];\n\n          if (action.mouse == mouse && action.key == null) {\n            return action.state;\n          }\n        }\n      }\n\n      return null;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getAngle\", function (p1, p2) {\n      return Math.atan2(p2.clientY - p1.clientY, p2.clientX - p1.clientX) * 180 / Math.PI;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"updateTouchEvent\", function (event) {\n      for (var i = 0; i < _this._touchCurrent.length; i++) {\n        if (_this._touchCurrent[i].pointerId == event.pointerId) {\n          _this._touchCurrent.splice(i, 1, event);\n\n          break;\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"calculateAngularSpeed\", function (p0, p1, t0, t1) {\n      var s = p1 - p0;\n      var t = (t1 - t0) / 1000;\n\n      if (t == 0) {\n        return 0;\n      }\n\n      return s / t;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"calculatePointersDistance\", function (p0, p1) {\n      return Math.sqrt(Math.pow(p1.clientX - p0.clientX, 2) + Math.pow(p1.clientY - p0.clientY, 2));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"calculateRotationAxis\", function (vec1, vec2) {\n      _this._rotationMatrix.extractRotation(_this._cameraMatrixState);\n\n      _this._quat.setFromRotationMatrix(_this._rotationMatrix);\n\n      _this._rotationAxis.crossVectors(vec1, vec2).applyQuaternion(_this._quat);\n\n      return _this._rotationAxis.normalize().clone();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"calculateTbRadius\", function (camera) {\n      var factor = 0.67;\n      var distance = camera.position.distanceTo(_this._gizmos.position);\n\n      if (camera.type == 'PerspectiveCamera') {\n        var halfFovV = MathUtils.DEG2RAD * camera.fov * 0.5; //vertical fov/2 in radians\n\n        var halfFovH = Math.atan(camera.aspect * Math.tan(halfFovV)); //horizontal fov/2 in radians\n\n        return Math.tan(Math.min(halfFovV, halfFovH)) * distance * factor;\n      } else if (camera.type == 'OrthographicCamera') {\n        return Math.min(camera.top, camera.right) * factor;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"focus\", function (point, size) {\n      var amount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n\n      if (_this.camera) {\n        var focusPoint = point.clone(); //move center of camera (along with gizmos) towards point of interest\n\n        focusPoint.sub(_this._gizmos.position).multiplyScalar(amount);\n\n        _this._translationMatrix.makeTranslation(focusPoint.x, focusPoint.y, focusPoint.z);\n\n        var gizmoStateTemp = _this._gizmoMatrixState.clone();\n\n        _this._gizmoMatrixState.premultiply(_this._translationMatrix);\n\n        _this._gizmoMatrixState.decompose(_this._gizmos.position, _this._gizmos.quaternion, _this._gizmos.scale);\n\n        var cameraStateTemp = _this._cameraMatrixState.clone();\n\n        _this._cameraMatrixState.premultiply(_this._translationMatrix);\n\n        _this._cameraMatrixState.decompose(_this.camera.position, _this.camera.quaternion, _this.camera.scale); //apply zoom\n\n\n        if (_this.enableZoom) {\n          _this.applyTransformMatrix(_this.applyScale(size, _this._gizmos.position));\n        }\n\n        _this._gizmoMatrixState.copy(gizmoStateTemp);\n\n        _this._cameraMatrixState.copy(cameraStateTemp);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"drawGrid\", function () {\n      if (_this.scene) {\n        var _this$camera9, _this$camera10;\n\n        var color = 0x888888;\n        var multiplier = 3;\n        var size, divisions, maxLength, tick;\n\n        if (((_this$camera9 = _this.camera) === null || _this$camera9 === void 0 ? void 0 : _this$camera9.type) === 'OrthographicCamera') {\n          var width = _this.camera.right - _this.camera.left;\n          var height = _this.camera.bottom - _this.camera.top;\n          maxLength = Math.max(width, height);\n          tick = maxLength / 20;\n          size = maxLength / _this.camera.zoom * multiplier;\n          divisions = size / tick * _this.camera.zoom;\n        } else if (((_this$camera10 = _this.camera) === null || _this$camera10 === void 0 ? void 0 : _this$camera10.type) === 'PerspectiveCamera') {\n          var distance = _this.camera.position.distanceTo(_this._gizmos.position);\n\n          var halfFovV = MathUtils.DEG2RAD * _this.camera.fov * 0.5;\n          var halfFovH = Math.atan(_this.camera.aspect * Math.tan(halfFovV));\n          maxLength = Math.tan(Math.max(halfFovV, halfFovH)) * distance * 2;\n          tick = maxLength / 20;\n          size = maxLength * multiplier;\n          divisions = size / tick;\n        }\n\n        if (_this._grid == null && _this.camera) {\n          _this._grid = new GridHelper(size, divisions, color, color);\n\n          _this._grid.position.copy(_this._gizmos.position);\n\n          _this._gridPosition.copy(_this._grid.position);\n\n          _this._grid.quaternion.copy(_this.camera.quaternion);\n\n          _this._grid.rotateX(Math.PI * 0.5);\n\n          _this.scene.add(_this._grid);\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"connect\", function (domElement) {\n      // https://github.com/mrdoob/three.js/issues/20575\n      if (domElement === document) {\n        console.error('THREE.ArcballControls: \"document\" should not be used as the target \"domElement\". Please use \"renderer.domElement\" instead.');\n      }\n\n      _this.domElement = domElement; // disables touch scroll\n      // touch-action needs to be defined for pointer events to work on mobile\n      // https://stackoverflow.com/a/48254578\n\n      _this.domElement.style.touchAction = 'none';\n\n      _this.domElement.addEventListener('contextmenu', _this.onContextMenu);\n\n      _this.domElement.addEventListener('pointerdown', _this.onPointerDown);\n\n      _this.domElement.addEventListener('pointercancel', _this.onPointerCancel);\n\n      _this.domElement.addEventListener('wheel', _this.onWheel);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"dispose\", function () {\n      var _this$domElement, _this$domElement2, _this$domElement3, _this$domElement4, _this$scene;\n\n      if (_this._animationId != -1) {\n        window.cancelAnimationFrame(_this._animationId);\n      }\n\n      (_this$domElement = _this.domElement) === null || _this$domElement === void 0 ? void 0 : _this$domElement.removeEventListener('pointerdown', _this.onPointerDown);\n      (_this$domElement2 = _this.domElement) === null || _this$domElement2 === void 0 ? void 0 : _this$domElement2.removeEventListener('pointercancel', _this.onPointerCancel);\n      (_this$domElement3 = _this.domElement) === null || _this$domElement3 === void 0 ? void 0 : _this$domElement3.removeEventListener('wheel', _this.onWheel);\n      (_this$domElement4 = _this.domElement) === null || _this$domElement4 === void 0 ? void 0 : _this$domElement4.removeEventListener('contextmenu', _this.onContextMenu);\n      window.removeEventListener('pointermove', _this.onPointerMove);\n      window.removeEventListener('pointerup', _this.onPointerUp);\n      window.removeEventListener('resize', _this.onWindowResize);\n      (_this$scene = _this.scene) === null || _this$scene === void 0 ? void 0 : _this$scene.remove(_this._gizmos);\n\n      _this.disposeGrid();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"disposeGrid\", function () {\n      if (_this._grid && _this.scene) {\n        _this.scene.remove(_this._grid);\n\n        _this._grid = null;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"easeOutCubic\", function (t) {\n      return 1 - Math.pow(1 - t, 3);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"activateGizmos\", function (isActive) {\n      var _iterator = _createForOfIteratorHelper(_this._gizmos.children),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var gizmo = _step.value;\n          gizmo.material.setValues({\n            opacity: isActive ? 1 : 0.6\n          });\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getCursorNDC\", function (cursorX, cursorY, canvas) {\n      var canvasRect = canvas.getBoundingClientRect();\n\n      _this._v2_1.setX((cursorX - canvasRect.left) / canvasRect.width * 2 - 1);\n\n      _this._v2_1.setY((canvasRect.bottom - cursorY) / canvasRect.height * 2 - 1);\n\n      return _this._v2_1.clone();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getCursorPosition\", function (cursorX, cursorY, canvas) {\n      var _this$camera11;\n\n      _this._v2_1.copy(_this.getCursorNDC(cursorX, cursorY, canvas));\n\n      if (((_this$camera11 = _this.camera) === null || _this$camera11 === void 0 ? void 0 : _this$camera11.type) === 'OrthographicCamera') {\n        _this._v2_1.x *= (_this.camera.right - _this.camera.left) * 0.5;\n        _this._v2_1.y *= (_this.camera.top - _this.camera.bottom) * 0.5;\n      }\n\n      return _this._v2_1.clone();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setCamera\", function (camera) {\n      if (camera) {\n        camera.lookAt(_this.target);\n        camera.updateMatrix(); //setting state\n\n        if ((camera === null || camera === void 0 ? void 0 : camera.type) == 'PerspectiveCamera') {\n          _this._fov0 = camera.fov;\n          _this._fovState = camera.fov;\n        }\n\n        _this._cameraMatrixState0.copy(camera.matrix);\n\n        _this._cameraMatrixState.copy(_this._cameraMatrixState0);\n\n        _this._cameraProjectionState.copy(camera.projectionMatrix);\n\n        _this._zoom0 = camera.zoom;\n        _this._zoomState = _this._zoom0;\n        _this._initialNear = camera.near;\n        _this._nearPos0 = camera.position.distanceTo(_this.target) - camera.near;\n        _this._nearPos = _this._initialNear;\n        _this._initialFar = camera.far;\n        _this._farPos0 = camera.position.distanceTo(_this.target) - camera.far;\n        _this._farPos = _this._initialFar;\n\n        _this._up0.copy(camera.up);\n\n        _this._upState.copy(camera.up);\n\n        _this.camera = camera;\n\n        _this.camera.updateProjectionMatrix(); //making gizmos\n\n\n        var tbRadius = _this.calculateTbRadius(camera);\n\n        if (tbRadius !== undefined) {\n          _this._tbRadius = tbRadius;\n        }\n\n        _this.makeGizmos(_this.target, _this._tbRadius);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"makeGizmos\", function (tbCenter, tbRadius) {\n      // @ts-expect-error\n      var curve = new EllipseCurve(0, 0, tbRadius, tbRadius);\n      var points = curve.getPoints(_this._curvePts); //geometry\n\n      var curveGeometry = new BufferGeometry().setFromPoints(points); //material\n\n      var curveMaterialX = new LineBasicMaterial({\n        color: 0xff8080,\n        fog: false,\n        transparent: true,\n        opacity: 0.6\n      });\n      var curveMaterialY = new LineBasicMaterial({\n        color: 0x80ff80,\n        fog: false,\n        transparent: true,\n        opacity: 0.6\n      });\n      var curveMaterialZ = new LineBasicMaterial({\n        color: 0x8080ff,\n        fog: false,\n        transparent: true,\n        opacity: 0.6\n      }); //line\n\n      var gizmoX = new Line(curveGeometry, curveMaterialX);\n      var gizmoY = new Line(curveGeometry, curveMaterialY);\n      var gizmoZ = new Line(curveGeometry, curveMaterialZ);\n      var rotation = Math.PI * 0.5;\n      gizmoX.rotation.x = rotation;\n      gizmoY.rotation.y = rotation; //setting state\n\n      _this._gizmoMatrixState0.identity().setPosition(tbCenter);\n\n      _this._gizmoMatrixState.copy(_this._gizmoMatrixState0);\n\n      if (_this.camera && _this.camera.zoom != 1) {\n        //adapt gizmos size to camera zoom\n        var size = 1 / _this.camera.zoom;\n\n        _this._scaleMatrix.makeScale(size, size, size);\n\n        _this._translationMatrix.makeTranslation(-tbCenter.x, -tbCenter.y, -tbCenter.z);\n\n        _this._gizmoMatrixState.premultiply(_this._translationMatrix).premultiply(_this._scaleMatrix);\n\n        _this._translationMatrix.makeTranslation(tbCenter.x, tbCenter.y, tbCenter.z);\n\n        _this._gizmoMatrixState.premultiply(_this._translationMatrix);\n      }\n\n      _this._gizmoMatrixState.decompose(_this._gizmos.position, _this._gizmos.quaternion, _this._gizmos.scale);\n\n      _this._gizmos.clear();\n\n      _this._gizmos.add(gizmoX);\n\n      _this._gizmos.add(gizmoY);\n\n      _this._gizmos.add(gizmoZ);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onFocusAnim\", function (time, point, cameraMatrix, gizmoMatrix) {\n      if (_this._timeStart == -1) {\n        //animation start\n        _this._timeStart = time;\n      }\n\n      if (_this._state == STATE.ANIMATION_FOCUS) {\n        var deltaTime = time - _this._timeStart;\n        var animTime = deltaTime / _this.focusAnimationTime;\n\n        _this._gizmoMatrixState.copy(gizmoMatrix);\n\n        if (animTime >= 1) {\n          //animation end\n          _this._gizmoMatrixState.decompose(_this._gizmos.position, _this._gizmos.quaternion, _this._gizmos.scale);\n\n          _this.focus(point, _this.scaleFactor);\n\n          _this._timeStart = -1;\n\n          _this.updateTbState(STATE.IDLE, false);\n\n          _this.activateGizmos(false);\n\n          _this.dispatchEvent(_changeEvent);\n        } else {\n          var amount = _this.easeOutCubic(animTime);\n\n          var size = 1 - amount + _this.scaleFactor * amount;\n\n          _this._gizmoMatrixState.decompose(_this._gizmos.position, _this._gizmos.quaternion, _this._gizmos.scale);\n\n          _this.focus(point, size, amount);\n\n          _this.dispatchEvent(_changeEvent);\n\n          var self = _assertThisInitialized(_this);\n\n          _this._animationId = window.requestAnimationFrame(function (t) {\n            self.onFocusAnim(t, point, cameraMatrix, gizmoMatrix.clone());\n          });\n        }\n      } else {\n        //interrupt animation\n        _this._animationId = -1;\n        _this._timeStart = -1;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onRotationAnim\", function (time, rotationAxis, w0) {\n      if (_this._timeStart == -1) {\n        //animation start\n        _this._anglePrev = 0;\n        _this._angleCurrent = 0;\n        _this._timeStart = time;\n      }\n\n      if (_this._state == STATE.ANIMATION_ROTATE) {\n        //w = w0 + alpha * t\n        var deltaTime = (time - _this._timeStart) / 1000;\n        var w = w0 + -_this.dampingFactor * deltaTime;\n\n        if (w > 0) {\n          //tetha = 0.5 * alpha * t^2 + w0 * t + tetha0\n          _this._angleCurrent = 0.5 * -_this.dampingFactor * Math.pow(deltaTime, 2) + w0 * deltaTime + 0;\n\n          _this.applyTransformMatrix(_this.rotate(rotationAxis, _this._angleCurrent));\n\n          _this.dispatchEvent(_changeEvent);\n\n          var self = _assertThisInitialized(_this);\n\n          _this._animationId = window.requestAnimationFrame(function (t) {\n            self.onRotationAnim(t, rotationAxis, w0);\n          });\n        } else {\n          _this._animationId = -1;\n          _this._timeStart = -1;\n\n          _this.updateTbState(STATE.IDLE, false);\n\n          _this.activateGizmos(false);\n\n          _this.dispatchEvent(_changeEvent);\n        }\n      } else {\n        //interrupt animation\n        _this._animationId = -1;\n        _this._timeStart = -1;\n\n        if (_this._state != STATE.ROTATE) {\n          _this.activateGizmos(false);\n\n          _this.dispatchEvent(_changeEvent);\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"pan\", function (p0, p1) {\n      var adjust = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      if (_this.camera) {\n        var movement = p0.clone().sub(p1);\n\n        if (_this.camera.type === 'OrthographicCamera') {\n          //adjust movement amount\n          movement.multiplyScalar(1 / _this.camera.zoom);\n        }\n\n        if (_this.camera.type === 'PerspectiveCamera' && adjust) {\n          //adjust movement amount\n          _this._v3_1.setFromMatrixPosition(_this._cameraMatrixState0); //camera's initial position\n\n\n          _this._v3_2.setFromMatrixPosition(_this._gizmoMatrixState0); //gizmo's initial position\n\n\n          var distanceFactor = _this._v3_1.distanceTo(_this._v3_2) / _this.camera.position.distanceTo(_this._gizmos.position);\n\n          movement.multiplyScalar(1 / distanceFactor);\n        }\n\n        _this._v3_1.set(movement.x, movement.y, 0).applyQuaternion(_this.camera.quaternion);\n\n        _this._m4_1.makeTranslation(_this._v3_1.x, _this._v3_1.y, _this._v3_1.z);\n\n        _this.setTransformationMatrices(_this._m4_1, _this._m4_1);\n      }\n\n      return _transformation;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"reset\", function () {\n      if (_this.camera) {\n        _this.camera.zoom = _this._zoom0;\n\n        if (_this.camera.type === 'PerspectiveCamera') {\n          _this.camera.fov = _this._fov0;\n        }\n\n        _this.camera.near = _this._nearPos;\n        _this.camera.far = _this._farPos;\n\n        _this._cameraMatrixState.copy(_this._cameraMatrixState0);\n\n        _this._cameraMatrixState.decompose(_this.camera.position, _this.camera.quaternion, _this.camera.scale);\n\n        _this.camera.up.copy(_this._up0);\n\n        _this.camera.updateMatrix();\n\n        _this.camera.updateProjectionMatrix();\n\n        _this._gizmoMatrixState.copy(_this._gizmoMatrixState0);\n\n        _this._gizmoMatrixState0.decompose(_this._gizmos.position, _this._gizmos.quaternion, _this._gizmos.scale);\n\n        _this._gizmos.updateMatrix();\n\n        var tbRadius = _this.calculateTbRadius(_this.camera);\n\n        if (tbRadius !== undefined) {\n          _this._tbRadius = tbRadius;\n        }\n\n        _this.makeGizmos(_this._gizmos.position, _this._tbRadius);\n\n        _this.camera.lookAt(_this._gizmos.position);\n\n        _this.updateTbState(STATE.IDLE, false);\n\n        _this.dispatchEvent(_changeEvent);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"rotate\", function (axis, angle) {\n      var point = _this._gizmos.position; //rotation center\n\n      _this._translationMatrix.makeTranslation(-point.x, -point.y, -point.z);\n\n      _this._rotationMatrix.makeRotationAxis(axis, -angle); //rotate camera\n\n\n      _this._m4_1.makeTranslation(point.x, point.y, point.z);\n\n      _this._m4_1.multiply(_this._rotationMatrix);\n\n      _this._m4_1.multiply(_this._translationMatrix);\n\n      _this.setTransformationMatrices(_this._m4_1);\n\n      return _transformation;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"copyState\", function () {\n      if (_this.camera) {\n        var _this$camera12;\n\n        var state = JSON.stringify(((_this$camera12 = _this.camera) === null || _this$camera12 === void 0 ? void 0 : _this$camera12.type) === 'OrthographicCamera' ? {\n          arcballState: {\n            cameraFar: _this.camera.far,\n            cameraMatrix: _this.camera.matrix,\n            cameraNear: _this.camera.near,\n            cameraUp: _this.camera.up,\n            cameraZoom: _this.camera.zoom,\n            gizmoMatrix: _this._gizmos.matrix\n          }\n        } : {\n          arcballState: {\n            cameraFar: _this.camera.far,\n            cameraFov: _this.camera.fov,\n            cameraMatrix: _this.camera.matrix,\n            cameraNear: _this.camera.near,\n            cameraUp: _this.camera.up,\n            cameraZoom: _this.camera.zoom,\n            gizmoMatrix: _this._gizmos.matrix\n          }\n        });\n        navigator.clipboard.writeText(state);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"pasteState\", function () {\n      var self = _assertThisInitialized(_this);\n\n      navigator.clipboard.readText().then(function resolved(value) {\n        self.setStateFromJSON(value);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"saveState\", function () {\n      if (!_this.camera) return;\n\n      _this._cameraMatrixState0.copy(_this.camera.matrix);\n\n      _this._gizmoMatrixState0.copy(_this._gizmos.matrix);\n\n      _this._nearPos = _this.camera.near;\n      _this._farPos = _this.camera.far;\n      _this._zoom0 = _this.camera.zoom;\n\n      _this._up0.copy(_this.camera.up);\n\n      if (_this.camera.type === 'PerspectiveCamera') {\n        _this._fov0 = _this.camera.fov;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"applyScale\", function (size, point) {\n      var scaleGizmos = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      if (!_this.camera) return;\n      var scalePoint = point.clone();\n      var sizeInverse = 1 / size;\n\n      if (_this.camera.type === 'OrthographicCamera') {\n        //camera zoom\n        _this.camera.zoom = _this._zoomState;\n        _this.camera.zoom *= size; //check min and max zoom\n\n        if (_this.camera.zoom > _this.maxZoom) {\n          _this.camera.zoom = _this.maxZoom;\n          sizeInverse = _this._zoomState / _this.maxZoom;\n        } else if (_this.camera.zoom < _this.minZoom) {\n          _this.camera.zoom = _this.minZoom;\n          sizeInverse = _this._zoomState / _this.minZoom;\n        }\n\n        _this.camera.updateProjectionMatrix();\n\n        _this._v3_1.setFromMatrixPosition(_this._gizmoMatrixState); //gizmos position\n        //scale gizmos so they appear in the same spot having the same dimension\n\n\n        _this._scaleMatrix.makeScale(sizeInverse, sizeInverse, sizeInverse);\n\n        _this._translationMatrix.makeTranslation(-_this._v3_1.x, -_this._v3_1.y, -_this._v3_1.z);\n\n        _this._m4_2.makeTranslation(_this._v3_1.x, _this._v3_1.y, _this._v3_1.z).multiply(_this._scaleMatrix);\n\n        _this._m4_2.multiply(_this._translationMatrix); //move camera and gizmos to obtain pinch effect\n\n\n        scalePoint.sub(_this._v3_1);\n        var amount = scalePoint.clone().multiplyScalar(sizeInverse);\n        scalePoint.sub(amount);\n\n        _this._m4_1.makeTranslation(scalePoint.x, scalePoint.y, scalePoint.z);\n\n        _this._m4_2.premultiply(_this._m4_1);\n\n        _this.setTransformationMatrices(_this._m4_1, _this._m4_2);\n\n        return _transformation;\n      }\n\n      if (_this.camera.type === 'PerspectiveCamera') {\n        _this._v3_1.setFromMatrixPosition(_this._cameraMatrixState);\n\n        _this._v3_2.setFromMatrixPosition(_this._gizmoMatrixState); //move camera\n\n\n        var distance = _this._v3_1.distanceTo(scalePoint);\n\n        var _amount = distance - distance * sizeInverse; //check min and max distance\n\n\n        var newDistance = distance - _amount;\n\n        if (newDistance < _this.minDistance) {\n          sizeInverse = _this.minDistance / distance;\n          _amount = distance - distance * sizeInverse;\n        } else if (newDistance > _this.maxDistance) {\n          sizeInverse = _this.maxDistance / distance;\n          _amount = distance - distance * sizeInverse;\n        }\n\n        var direction = scalePoint.clone().sub(_this._v3_1).normalize().multiplyScalar(_amount);\n\n        _this._m4_1.makeTranslation(direction.x, direction.y, direction.z);\n\n        if (scaleGizmos) {\n          //scale gizmos so they appear in the same spot having the same dimension\n          var pos = _this._v3_2;\n          distance = pos.distanceTo(scalePoint);\n          _amount = distance - distance * sizeInverse;\n          direction = scalePoint.clone().sub(_this._v3_2).normalize().multiplyScalar(_amount);\n\n          _this._translationMatrix.makeTranslation(pos.x, pos.y, pos.z);\n\n          _this._scaleMatrix.makeScale(sizeInverse, sizeInverse, sizeInverse);\n\n          _this._m4_2.makeTranslation(direction.x, direction.y, direction.z).multiply(_this._translationMatrix);\n\n          _this._m4_2.multiply(_this._scaleMatrix);\n\n          _this._translationMatrix.makeTranslation(-pos.x, -pos.y, -pos.z);\n\n          _this._m4_2.multiply(_this._translationMatrix);\n\n          _this.setTransformationMatrices(_this._m4_1, _this._m4_2);\n        } else {\n          _this.setTransformationMatrices(_this._m4_1);\n        }\n\n        return _transformation;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setFov\", function (value) {\n      var _this$camera13;\n\n      if (((_this$camera13 = _this.camera) === null || _this$camera13 === void 0 ? void 0 : _this$camera13.type) === 'PerspectiveCamera') {\n        _this.camera.fov = MathUtils.clamp(value, _this.minFov, _this.maxFov);\n\n        _this.camera.updateProjectionMatrix();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setTarget\", function (x, y, z) {\n      if (_this.camera) {\n        _this.target.set(x, y, z);\n\n        _this._gizmos.position.set(x, y, z); //for correct radius calculation\n\n\n        var tbRadius = _this.calculateTbRadius(_this.camera);\n\n        if (tbRadius !== undefined) {\n          _this._tbRadius = tbRadius;\n        }\n\n        _this.makeGizmos(_this.target, _this._tbRadius);\n\n        _this.camera.lookAt(_this.target);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"zRotate\", function (point, angle) {\n      _this._rotationMatrix.makeRotationAxis(_this._rotationAxis, angle);\n\n      _this._translationMatrix.makeTranslation(-point.x, -point.y, -point.z);\n\n      _this._m4_1.makeTranslation(point.x, point.y, point.z);\n\n      _this._m4_1.multiply(_this._rotationMatrix);\n\n      _this._m4_1.multiply(_this._translationMatrix);\n\n      _this._v3_1.setFromMatrixPosition(_this._gizmoMatrixState).sub(point); //vector from rotation center to gizmos position\n\n\n      _this._v3_2.copy(_this._v3_1).applyAxisAngle(_this._rotationAxis, angle); //apply rotation\n\n\n      _this._v3_2.sub(_this._v3_1);\n\n      _this._m4_2.makeTranslation(_this._v3_2.x, _this._v3_2.y, _this._v3_2.z);\n\n      _this.setTransformationMatrices(_this._m4_1, _this._m4_2);\n\n      return _transformation;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"unprojectOnObj\", function (cursor, camera) {\n      if (!_this.scene) return null;\n      var raycaster = new Raycaster();\n      raycaster.near = camera.near;\n      raycaster.far = camera.far;\n      raycaster.setFromCamera(cursor, camera);\n      var intersect = raycaster.intersectObjects(_this.scene.children, true);\n\n      for (var i = 0; i < intersect.length; i++) {\n        if (intersect[i].object.uuid != _this._gizmos.uuid && intersect[i].face) {\n          return intersect[i].point.clone();\n        }\n      }\n\n      return null;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"unprojectOnTbSurface\", function (camera, cursorX, cursorY, canvas, tbRadius) {\n      if (camera.type == 'OrthographicCamera') {\n        _this._v2_1.copy(_this.getCursorPosition(cursorX, cursorY, canvas));\n\n        _this._v3_1.set(_this._v2_1.x, _this._v2_1.y, 0);\n\n        var x2 = Math.pow(_this._v2_1.x, 2);\n        var y2 = Math.pow(_this._v2_1.y, 2);\n        var r2 = Math.pow(_this._tbRadius, 2);\n\n        if (x2 + y2 <= r2 * 0.5) {\n          //intersection with sphere\n          _this._v3_1.setZ(Math.sqrt(r2 - (x2 + y2)));\n        } else {\n          //intersection with hyperboloid\n          _this._v3_1.setZ(r2 * 0.5 / Math.sqrt(x2 + y2));\n        }\n\n        return _this._v3_1;\n      }\n\n      if (camera.type == 'PerspectiveCamera') {\n        //unproject cursor on the near plane\n        _this._v2_1.copy(_this.getCursorNDC(cursorX, cursorY, canvas));\n\n        _this._v3_1.set(_this._v2_1.x, _this._v2_1.y, -1);\n\n        _this._v3_1.applyMatrix4(camera.projectionMatrixInverse);\n\n        var rayDir = _this._v3_1.clone().normalize(); //unprojected ray direction\n\n\n        var cameraGizmoDistance = camera.position.distanceTo(_this._gizmos.position);\n        var radius2 = Math.pow(tbRadius, 2); //\t  camera\n        //\t\t|\\\n        //\t\t| \\\n        //\t\t|  \\\n        //\th\t|\t\\\n        //\t\t| \t \\\n        //\t\t| \t  \\\n        //\t_ _ | _ _ _\\ _ _  near plane\n        //\t\t\tl\n\n        var h = _this._v3_1.z;\n        var l = Math.sqrt(Math.pow(_this._v3_1.x, 2) + Math.pow(_this._v3_1.y, 2));\n\n        if (l == 0) {\n          //ray aligned with camera\n          rayDir.set(_this._v3_1.x, _this._v3_1.y, tbRadius);\n          return rayDir;\n        }\n\n        var m = h / l;\n        var q = cameraGizmoDistance;\n        /*\r\n         * calculate intersection point between unprojected ray and trackball surface\r\n         *|y = m * x + q\r\n         *|x^2 + y^2 = r^2\r\n         *\r\n         * (m^2 + 1) * x^2 + (2 * m * q) * x + q^2 - r^2 = 0\r\n         */\n\n        var a = Math.pow(m, 2) + 1;\n        var b = 2 * m * q;\n        var c = Math.pow(q, 2) - radius2;\n        var delta = Math.pow(b, 2) - 4 * a * c;\n\n        if (delta >= 0) {\n          //intersection with sphere\n          _this._v2_1.setX((-b - Math.sqrt(delta)) / (2 * a));\n\n          _this._v2_1.setY(m * _this._v2_1.x + q);\n\n          var angle = MathUtils.RAD2DEG * _this._v2_1.angle();\n\n          if (angle >= 45) {\n            //if angle between intersection point and X' axis is >= 45°, return that point\n            //otherwise, calculate intersection point with hyperboloid\n            var _rayLength = Math.sqrt(Math.pow(_this._v2_1.x, 2) + Math.pow(cameraGizmoDistance - _this._v2_1.y, 2));\n\n            rayDir.multiplyScalar(_rayLength);\n            rayDir.z += cameraGizmoDistance;\n            return rayDir;\n          }\n        } //intersection with hyperboloid\n\n        /*\r\n         *|y = m * x + q\r\n         *|y = (1 / x) * (r^2 / 2)\r\n         *\r\n         * m * x^2 + q * x - r^2 / 2 = 0\r\n         */\n\n\n        a = m;\n        b = q;\n        c = -radius2 * 0.5;\n        delta = Math.pow(b, 2) - 4 * a * c;\n\n        _this._v2_1.setX((-b - Math.sqrt(delta)) / (2 * a));\n\n        _this._v2_1.setY(m * _this._v2_1.x + q);\n\n        var rayLength = Math.sqrt(Math.pow(_this._v2_1.x, 2) + Math.pow(cameraGizmoDistance - _this._v2_1.y, 2));\n        rayDir.multiplyScalar(rayLength);\n        rayDir.z += cameraGizmoDistance;\n        return rayDir;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"unprojectOnTbPlane\", function (camera, cursorX, cursorY, canvas) {\n      var initialDistance = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n      if (camera.type == 'OrthographicCamera') {\n        _this._v2_1.copy(_this.getCursorPosition(cursorX, cursorY, canvas));\n\n        _this._v3_1.set(_this._v2_1.x, _this._v2_1.y, 0);\n\n        return _this._v3_1.clone();\n      }\n\n      if (camera.type == 'PerspectiveCamera') {\n        _this._v2_1.copy(_this.getCursorNDC(cursorX, cursorY, canvas)); //unproject cursor on the near plane\n\n\n        _this._v3_1.set(_this._v2_1.x, _this._v2_1.y, -1);\n\n        _this._v3_1.applyMatrix4(camera.projectionMatrixInverse);\n\n        var rayDir = _this._v3_1.clone().normalize(); //unprojected ray direction\n        //\t  camera\n        //\t\t|\\\n        //\t\t| \\\n        //\t\t|  \\\n        //\th\t|\t\\\n        //\t\t| \t \\\n        //\t\t| \t  \\\n        //\t_ _ | _ _ _\\ _ _  near plane\n        //\t\t\tl\n\n\n        var h = _this._v3_1.z;\n        var l = Math.sqrt(Math.pow(_this._v3_1.x, 2) + Math.pow(_this._v3_1.y, 2));\n        var cameraGizmoDistance;\n\n        if (initialDistance) {\n          cameraGizmoDistance = _this._v3_1.setFromMatrixPosition(_this._cameraMatrixState0).distanceTo(_this._v3_2.setFromMatrixPosition(_this._gizmoMatrixState0));\n        } else {\n          cameraGizmoDistance = camera.position.distanceTo(_this._gizmos.position);\n        }\n        /*\r\n         * calculate intersection point between unprojected ray and the plane\r\n         *|y = mx + q\r\n         *|y = 0\r\n         *\r\n         * x = -q/m\r\n         */\n\n\n        if (l == 0) {\n          //ray aligned with camera\n          rayDir.set(0, 0, 0);\n          return rayDir;\n        }\n\n        var m = h / l;\n        var q = cameraGizmoDistance;\n        var x = -q / m;\n        var rayLength = Math.sqrt(Math.pow(q, 2) + Math.pow(x, 2));\n        rayDir.multiplyScalar(rayLength);\n        rayDir.z = 0;\n        return rayDir;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"updateMatrixState\", function () {\n      if (!_this.camera) return; //update camera and gizmos state\n\n      _this._cameraMatrixState.copy(_this.camera.matrix);\n\n      _this._gizmoMatrixState.copy(_this._gizmos.matrix);\n\n      if (_this.camera.type === 'OrthographicCamera') {\n        _this._cameraProjectionState.copy(_this.camera.projectionMatrix);\n\n        _this.camera.updateProjectionMatrix();\n\n        _this._zoomState = _this.camera.zoom;\n      }\n\n      if (_this.camera.type === 'PerspectiveCamera') {\n        _this._fovState = _this.camera.fov;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"updateTbState\", function (newState, updateMatrices) {\n      _this._state = newState;\n\n      if (updateMatrices) {\n        _this.updateMatrixState();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"update\", function () {\n      var EPS = 0.000001; // Update target and gizmos state\n\n      if (!_this.target.equals(_this._currentTarget) && _this.camera) {\n        _this._gizmos.position.set(_this.target.x, _this.target.y, _this.target.z); //for correct radius calculation\n\n\n        var tbRadius = _this.calculateTbRadius(_this.camera);\n\n        if (tbRadius !== undefined) {\n          _this._tbRadius = tbRadius;\n        }\n\n        _this.makeGizmos(_this.target, _this._tbRadius);\n\n        _this._currentTarget.copy(_this.target);\n      }\n\n      if (!_this.camera) return; //check min/max parameters\n\n      if (_this.camera.type === 'OrthographicCamera') {\n        //check zoom\n        if (_this.camera.zoom > _this.maxZoom || _this.camera.zoom < _this.minZoom) {\n          var newZoom = MathUtils.clamp(_this.camera.zoom, _this.minZoom, _this.maxZoom);\n\n          _this.applyTransformMatrix(_this.applyScale(newZoom / _this.camera.zoom, _this._gizmos.position, true));\n        }\n      }\n\n      if (_this.camera.type === 'PerspectiveCamera') {\n        //check distance\n        var distance = _this.camera.position.distanceTo(_this._gizmos.position);\n\n        if (distance > _this.maxDistance + EPS || distance < _this.minDistance - EPS) {\n          var newDistance = MathUtils.clamp(distance, _this.minDistance, _this.maxDistance);\n\n          _this.applyTransformMatrix(_this.applyScale(newDistance / distance, _this._gizmos.position));\n\n          _this.updateMatrixState();\n        } //check fov\n\n\n        if (_this.camera.fov < _this.minFov || _this.camera.fov > _this.maxFov) {\n          _this.camera.fov = MathUtils.clamp(_this.camera.fov, _this.minFov, _this.maxFov);\n\n          _this.camera.updateProjectionMatrix();\n        }\n\n        var oldRadius = _this._tbRadius;\n\n        var _tbRadius = _this.calculateTbRadius(_this.camera);\n\n        if (_tbRadius !== undefined) {\n          _this._tbRadius = _tbRadius;\n        }\n\n        if (oldRadius < _this._tbRadius - EPS || oldRadius > _this._tbRadius + EPS) {\n          var scale = (_this._gizmos.scale.x + _this._gizmos.scale.y + _this._gizmos.scale.z) / 3;\n          var newRadius = _this._tbRadius / scale; // @ts-expect-error\n\n          var curve = new EllipseCurve(0, 0, newRadius, newRadius);\n          var points = curve.getPoints(_this._curvePts);\n          var curveGeometry = new BufferGeometry().setFromPoints(points);\n\n          for (var gizmo in _this._gizmos.children) {\n            var child = _this._gizmos.children[gizmo];\n            child.geometry = curveGeometry;\n          }\n        }\n      }\n\n      _this.camera.lookAt(_this._gizmos.position);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setStateFromJSON\", function (json) {\n      var state = JSON.parse(json);\n\n      if (state.arcballState && _this.camera) {\n        _this._cameraMatrixState.fromArray(state.arcballState.cameraMatrix.elements);\n\n        _this._cameraMatrixState.decompose(_this.camera.position, _this.camera.quaternion, _this.camera.scale);\n\n        _this.camera.up.copy(state.arcballState.cameraUp);\n\n        _this.camera.near = state.arcballState.cameraNear;\n        _this.camera.far = state.arcballState.cameraFar;\n        _this.camera.zoom = state.arcballState.cameraZoom;\n\n        if (_this.camera.type === 'PerspectiveCamera') {\n          _this.camera.fov = state.arcballState.cameraFov;\n        }\n\n        _this._gizmoMatrixState.fromArray(state.arcballState.gizmoMatrix.elements);\n\n        _this._gizmoMatrixState.decompose(_this._gizmos.position, _this._gizmos.quaternion, _this._gizmos.scale);\n\n        _this.camera.updateMatrix();\n\n        _this.camera.updateProjectionMatrix();\n\n        _this._gizmos.updateMatrix();\n\n        var tbRadius = _this.calculateTbRadius(_this.camera);\n\n        if (tbRadius !== undefined) {\n          _this._tbRadius = tbRadius;\n        }\n\n        var gizmoTmp = new Matrix4().copy(_this._gizmoMatrixState0);\n\n        _this.makeGizmos(_this._gizmos.position, _this._tbRadius);\n\n        _this._gizmoMatrixState0.copy(gizmoTmp);\n\n        _this.camera.lookAt(_this._gizmos.position);\n\n        _this.updateTbState(STATE.IDLE, false);\n\n        _this.dispatchEvent(_changeEvent);\n      }\n    });\n\n    _this.camera = null;\n    _this.domElement = _domElement;\n    _this.scene = scene;\n    _this.mouseActions = [];\n    _this._mouseOp = null; //global vectors and matrices that are used in some operations to avoid creating new objects every time (e.g. every time cursor moves)\n\n    _this._v2_1 = new Vector2();\n    _this._v3_1 = new Vector3();\n    _this._v3_2 = new Vector3();\n    _this._m4_1 = new Matrix4();\n    _this._m4_2 = new Matrix4();\n    _this._quat = new Quaternion(); //transformation matrices\n\n    _this._translationMatrix = new Matrix4(); //matrix for translation operation\n\n    _this._rotationMatrix = new Matrix4(); //matrix for rotation operation\n\n    _this._scaleMatrix = new Matrix4(); //matrix for scaling operation\n\n    _this._rotationAxis = new Vector3(); //axis for rotate operation\n    //camera state\n\n    _this._cameraMatrixState = new Matrix4();\n    _this._cameraProjectionState = new Matrix4();\n    _this._fovState = 1;\n    _this._upState = new Vector3();\n    _this._zoomState = 1;\n    _this._nearPos = 0;\n    _this._farPos = 0;\n    _this._gizmoMatrixState = new Matrix4(); //initial values\n\n    _this._up0 = new Vector3();\n    _this._zoom0 = 1;\n    _this._fov0 = 0;\n    _this._initialNear = 0;\n    _this._nearPos0 = 0;\n    _this._initialFar = 0;\n    _this._farPos0 = 0;\n    _this._cameraMatrixState0 = new Matrix4();\n    _this._gizmoMatrixState0 = new Matrix4(); //pointers array\n\n    _this._button = -1;\n    _this._touchStart = [];\n    _this._touchCurrent = [];\n    _this._input = INPUT.NONE; //two fingers touch interaction\n\n    _this._switchSensibility = 32; //minimum movement to be performed to fire single pan start after the second finger has been released\n\n    _this._startFingerDistance = 0; //distance between two fingers\n\n    _this._currentFingerDistance = 0;\n    _this._startFingerRotation = 0; //amount of rotation performed with two fingers\n\n    _this._currentFingerRotation = 0; //double tap\n\n    _this._devPxRatio = 0;\n    _this._downValid = true;\n    _this._nclicks = 0;\n    _this._downEvents = [];\n    _this._clickStart = 0; //first click time\n\n    _this._maxDownTime = 250;\n    _this._maxInterval = 300;\n    _this._posThreshold = 24;\n    _this._movementThreshold = 24; //cursor positions\n\n    _this._currentCursorPosition = new Vector3();\n    _this._startCursorPosition = new Vector3(); //grid\n\n    _this._grid = null; //grid to be visualized during pan operation\n\n    _this._gridPosition = new Vector3(); //gizmos\n\n    _this._gizmos = new Group();\n    _this._curvePts = 128; //animations\n\n    _this._timeStart = -1; //initial time\n\n    _this._animationId = -1; //focus animation\n\n    _this.focusAnimationTime = 500; //duration of focus animation in ms\n    //rotate animation\n\n    _this._timePrev = 0; //time at which previous rotate operation has been detected\n\n    _this._timeCurrent = 0; //time at which current rotate operation has been detected\n\n    _this._anglePrev = 0; //angle of previous rotation\n\n    _this._angleCurrent = 0; //angle of current rotation\n\n    _this._cursorPosPrev = new Vector3(); //cursor position when previous rotate operation has been detected\n\n    _this._cursorPosCurr = new Vector3(); //cursor position when current rotate operation has been detected\n\n    _this._wPrev = 0; //angular velocity of the previous rotate operation\n\n    _this._wCurr = 0; //angular velocity of the current rotate operation\n    //parameters\n\n    _this.adjustNearFar = false;\n    _this.scaleFactor = 1.1; //zoom/distance multiplier\n\n    _this.dampingFactor = 25;\n    _this.wMax = 20; //maximum angular velocity allowed\n\n    _this.enableAnimations = true; //if animations should be performed\n\n    _this.enableGrid = false; //if grid should be showed during pan operation\n\n    _this.cursorZoom = false; //if wheel zoom should be cursor centered\n\n    _this.minFov = 5;\n    _this.maxFov = 90;\n    _this.enabled = true;\n    _this.enablePan = true;\n    _this.enableRotate = true;\n    _this.enableZoom = true;\n    _this.minDistance = 0;\n    _this.maxDistance = Infinity;\n    _this.minZoom = 0;\n    _this.maxZoom = Infinity; //trackball parameters\n\n    _this.target = new Vector3(0, 0, 0);\n    _this._currentTarget = new Vector3(0, 0, 0);\n    _this._tbRadius = 1; //FSA\n\n    _this._state = STATE.IDLE;\n\n    _this.setCamera(_camera);\n\n    if (_this.scene) {\n      _this.scene.add(_this._gizmos);\n    }\n\n    _this._devPxRatio = window.devicePixelRatio;\n\n    _this.initializeMouseActions();\n\n    if (_this.domElement) _this.connect(_this.domElement);\n    window.addEventListener('resize', _this.onWindowResize);\n    return _this;\n  } //listeners\n\n  /**\r\n   * Apply a transformation matrix, to the camera and gizmos\r\n   * @param {Object} transformation Object containing matrices to apply to camera and gizmos\r\n   */\n\n\n  _createClass(ArcballControls, [{\n    key: \"applyTransformMatrix\",\n    value: function applyTransformMatrix(transformation) {\n      if (transformation !== null && transformation !== void 0 && transformation.camera && this.camera) {\n        this._m4_1.copy(this._cameraMatrixState).premultiply(transformation.camera);\n\n        this._m4_1.decompose(this.camera.position, this.camera.quaternion, this.camera.scale);\n\n        this.camera.updateMatrix(); //update camera up vector\n\n        if (this._state == STATE.ROTATE || this._state == STATE.ZROTATE || this._state == STATE.ANIMATION_ROTATE) {\n          this.camera.up.copy(this._upState).applyQuaternion(this.camera.quaternion);\n        }\n      }\n\n      if (transformation !== null && transformation !== void 0 && transformation.gizmos) {\n        this._m4_1.copy(this._gizmoMatrixState).premultiply(transformation.gizmos);\n\n        this._m4_1.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\n\n        this._gizmos.updateMatrix();\n      }\n\n      if ((this._state == STATE.SCALE || this._state == STATE.FOCUS || this._state == STATE.ANIMATION_FOCUS) && this.camera) {\n        var tbRadius = this.calculateTbRadius(this.camera);\n\n        if (tbRadius !== undefined) {\n          this._tbRadius = tbRadius;\n        }\n\n        if (this.adjustNearFar) {\n          var cameraDistance = this.camera.position.distanceTo(this._gizmos.position);\n          var bb = new Box3();\n          bb.setFromObject(this._gizmos);\n          var sphere = new Sphere();\n          bb.getBoundingSphere(sphere);\n          var adjustedNearPosition = Math.max(this._nearPos0, sphere.radius + sphere.center.length());\n          var regularNearPosition = cameraDistance - this._initialNear;\n          var minNearPos = Math.min(adjustedNearPosition, regularNearPosition);\n          this.camera.near = cameraDistance - minNearPos;\n          var adjustedFarPosition = Math.min(this._farPos0, -sphere.radius + sphere.center.length());\n          var regularFarPosition = cameraDistance - this._initialFar;\n          var minFarPos = Math.min(adjustedFarPosition, regularFarPosition);\n          this.camera.far = cameraDistance - minFarPos;\n          this.camera.updateProjectionMatrix();\n        } else {\n          var update = false;\n\n          if (this.camera.near != this._initialNear) {\n            this.camera.near = this._initialNear;\n            update = true;\n          }\n\n          if (this.camera.far != this._initialFar) {\n            this.camera.far = this._initialFar;\n            update = true;\n          }\n\n          if (update) {\n            this.camera.updateProjectionMatrix();\n          }\n        }\n      }\n    }\n    /**\r\n     * Calculate the angular speed\r\n     * @param {Number} p0 Position at t0\r\n     * @param {Number} p1 Position at t1\r\n     * @param {Number} t0 Initial time in milliseconds\r\n     * @param {Number} t1 Ending time in milliseconds\r\n     */\n\n    /**\r\n     * Set gizmos visibility\r\n     * @param {Boolean} value Value of gizmos visibility\r\n     */\n\n  }, {\n    key: \"setGizmosVisible\",\n    value: function setGizmosVisible(value) {\n      this._gizmos.visible = value;\n      this.dispatchEvent(_changeEvent);\n    }\n    /**\r\n     * Creates the rotation gizmos matching trackball center and radius\r\n     * @param {Vector3} tbCenter The trackball center\r\n     * @param {number} tbRadius The trackball radius\r\n     */\n\n    /**\r\n     * Set values in transformation object\r\n     * @param {Matrix4} camera Transformation to be applied to the camera\r\n     * @param {Matrix4} gizmos Transformation to be applied to gizmos\r\n     */\n\n  }, {\n    key: \"setTransformationMatrices\",\n    value: function setTransformationMatrices() {\n      var camera = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var gizmos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      if (camera) {\n        if (_transformation.camera) {\n          _transformation.camera.copy(camera);\n        } else {\n          _transformation.camera = camera.clone();\n        }\n      } else {\n        _transformation.camera = null;\n      }\n\n      if (gizmos) {\n        if (_transformation.gizmos) {\n          _transformation.gizmos.copy(gizmos);\n        } else {\n          _transformation.gizmos = gizmos.clone();\n        }\n      } else {\n        _transformation.gizmos = null;\n      }\n    }\n    /**\r\n     * Rotate camera around its direction axis passing by a given point by a given angle\r\n     * @param {Vector3} point The point where the rotation axis is passing trough\r\n     * @param {Number} angle Angle in radians\r\n     * @returns The computed transormation matix\r\n     */\n\n  }]);\n\n  return ArcballControls;\n}(EventDispatcher);\n\nexport { ArcballControls };","map":{"version":3,"names":["_defineProperty","Matrix4","EventDispatcher","EllipseCurve","BufferGeometry","MathUtils","Vector3","GridHelper","LineBasicMaterial","Line","Raycaster","Vector2","Quaternion","Group","Box3","Sphere","STATE","IDLE","Symbol","ROTATE","PAN","SCALE","FOV","FOCUS","ZROTATE","TOUCH_MULTI","ANIMATION_FOCUS","ANIMATION_ROTATE","INPUT","NONE","ONE_FINGER","ONE_FINGER_SWITCHED","TWO_FINGER","MULT_FINGER","CURSOR","_center","x","y","_transformation","camera","gizmos","_changeEvent","type","_startEvent","_endEvent","ArcballControls","_camera","_domElement","scene","scale","_gizmos","z","tbRadius","calculateTbRadius","undefined","_tbRadius","newRadius","curve","points","getPoints","_curvePts","curveGeometry","setFromPoints","gizmo","children","child","geometry","dispatchEvent","event","enabled","i","mouseActions","length","mouse","preventDefault","_touchStart","splice","_touchCurrent","_input","button","isPrimary","_downValid","_downEvents","push","pointerType","onSinglePanStart","window","addEventListener","onPointerMove","onPointerUp","onRotateStart","onPinchStart","onDoublePanStart","onTriplePanStart","modifier","ctrlKey","metaKey","shiftKey","_mouseOp","getOpFromAction","_button","updateTouchEvent","onSinglePanMove","movement","calculatePointersDistance","_devPxRatio","_switchSensibility","onRotateMove","onPinchMove","onDoublePanMove","onTriplePanMove","mouseOpState","getOpStateFromAction","_movementThreshold","nTouch","pointerId","removeEventListener","onSinglePanEnd","onDoublePanEnd","onPinchEnd","onRotateEnd","onTriplePanEnd","downTime","timeStamp","_maxDownTime","_nclicks","_clickStart","performance","now","clickInterval","_maxInterval","_posThreshold","onDoubleTap","shift","_this$camera3","enableZoom","domElement","mouseOp","notchDeltaY","sgn","deltaY","size","scaleFactor","updateTbState","Math","pow","cursorZoom","enablePan","_this$camera","_this$camera2","scalePoint","_this$unprojectOnTbPl","unprojectOnTbPlane","clientX","clientY","applyQuaternion","quaternion","multiplyScalar","zoom","add","position","_this$unprojectOnTbPl2","applyTransformMatrix","applyScale","_grid","disposeGrid","drawGrid","deltaX","_v3_1","setFromMatrixPosition","_cameraMatrixState","distanceTo","xNew","clamp","minDistance","maxDistance","tan","DEG2RAD","fov","newFov","RAD2DEG","atan","maxFov","minFov","newDistance","setFov","operation","_this$camera4","setCenter","_animationId","cancelAnimationFrame","_timeStart","activateGizmos","rayDir","_startCursorPosition","copy","enableGrid","enableRotate","unprojectOnTbSurface","enableAnimations","_timePrev","_timeCurrent","_angleCurrent","_anglePrev","_cursorPosPrev","_cursorPosCurr","_wCurr","_wPrev","setY","getCursorNDC","_currentCursorPosition","opState","_this$camera5","restart","_state","pan","distance","angle","angleTo","amount","max","rotate","calculateRotationAxis","calculateAngularSpeed","screenNotches","_fovState","_v3_2","_gizmoMatrixState","direction","clone","sub","normalize","_m4_1","makeTranslation","deltaTime","w","abs","self","requestAnimationFrame","t","rotationAxis","onRotationAnim","min","wMax","hitP","unprojectOnObj","onFocusAnim","focus","_this$camera6","_startFingerRotation","getAngle","_currentFingerRotation","getWorldDirection","_rotationAxis","rotationPoint","_this$unprojectOnTbPl3","zRotate","_startFingerDistance","_currentFingerDistance","_this$camera7","_this$camera8","_this$unprojectOnTbPl4","_this$unprojectOnTbPl5","nFingers","setMouseAction","key","operationInput","mouseInput","keyInput","state","includes","action","p1","p2","atan2","PI","p0","t0","t1","s","sqrt","vec1","vec2","_rotationMatrix","extractRotation","_quat","setFromRotationMatrix","crossVectors","factor","halfFovV","halfFovH","aspect","top","right","point","focusPoint","_translationMatrix","gizmoStateTemp","premultiply","decompose","cameraStateTemp","_this$camera9","_this$camera10","color","multiplier","divisions","maxLength","tick","width","left","height","bottom","_gridPosition","rotateX","document","console","error","style","touchAction","onContextMenu","onPointerDown","onPointerCancel","onWheel","_this$domElement","_this$domElement2","_this$domElement3","_this$domElement4","_this$scene","onWindowResize","remove","isActive","material","setValues","opacity","cursorX","cursorY","canvas","canvasRect","getBoundingClientRect","_v2_1","setX","_this$camera11","lookAt","target","updateMatrix","_fov0","_cameraMatrixState0","matrix","_cameraProjectionState","projectionMatrix","_zoom0","_zoomState","_initialNear","near","_nearPos0","_nearPos","_initialFar","far","_farPos0","_farPos","_up0","up","_upState","updateProjectionMatrix","makeGizmos","tbCenter","curveMaterialX","fog","transparent","curveMaterialY","curveMaterialZ","gizmoX","gizmoY","gizmoZ","rotation","_gizmoMatrixState0","identity","setPosition","_scaleMatrix","makeScale","clear","time","cameraMatrix","gizmoMatrix","animTime","focusAnimationTime","easeOutCubic","w0","dampingFactor","adjust","distanceFactor","set","setTransformationMatrices","axis","makeRotationAxis","multiply","_this$camera12","JSON","stringify","arcballState","cameraFar","cameraNear","cameraUp","cameraZoom","cameraFov","navigator","clipboard","writeText","readText","then","resolved","value","setStateFromJSON","scaleGizmos","sizeInverse","maxZoom","minZoom","_m4_2","pos","_this$camera13","applyAxisAngle","cursor","raycaster","setFromCamera","intersect","intersectObjects","object","uuid","face","getCursorPosition","x2","y2","r2","setZ","applyMatrix4","projectionMatrixInverse","cameraGizmoDistance","radius2","h","l","m","q","a","b","c","delta","rayLength","initialDistance","newState","updateMatrices","updateMatrixState","EPS","equals","_currentTarget","newZoom","oldRadius","json","parse","fromArray","elements","gizmoTmp","adjustNearFar","Infinity","setCamera","devicePixelRatio","initializeMouseActions","connect","transformation","cameraDistance","bb","setFromObject","sphere","getBoundingSphere","adjustedNearPosition","radius","center","regularNearPosition","minNearPos","adjustedFarPosition","regularFarPosition","minFarPos","update","visible"],"sources":["D:/Github/NIKE-DJANGO/Jord/l4fycy/node_modules/three-stdlib/controls/ArcballControls.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\r\nimport { Matrix4, EventDispatcher, EllipseCurve, BufferGeometry, MathUtils, Vector3, GridHelper, LineBasicMaterial, Line, Raycaster, Vector2, Quaternion, Group, Box3, Sphere } from 'three';\r\n\r\n//trackball state\r\nconst STATE = {\r\n  IDLE: Symbol(),\r\n  ROTATE: Symbol(),\r\n  PAN: Symbol(),\r\n  SCALE: Symbol(),\r\n  FOV: Symbol(),\r\n  FOCUS: Symbol(),\r\n  ZROTATE: Symbol(),\r\n  TOUCH_MULTI: Symbol(),\r\n  ANIMATION_FOCUS: Symbol(),\r\n  ANIMATION_ROTATE: Symbol()\r\n};\r\nconst INPUT = {\r\n  NONE: Symbol(),\r\n  ONE_FINGER: Symbol(),\r\n  ONE_FINGER_SWITCHED: Symbol(),\r\n  TWO_FINGER: Symbol(),\r\n  MULT_FINGER: Symbol(),\r\n  CURSOR: Symbol()\r\n}; //cursor center coordinates\r\n\r\nconst _center = {\r\n  x: 0,\r\n  y: 0\r\n}; //transformation matrices for gizmos and camera\r\n\r\nconst _transformation = {\r\n  camera: new Matrix4(),\r\n  gizmos: new Matrix4()\r\n}; //events\r\n\r\nconst _changeEvent = {\r\n  type: 'change'\r\n};\r\nconst _startEvent = {\r\n  type: 'start'\r\n};\r\nconst _endEvent = {\r\n  type: 'end'\r\n};\r\n/**\r\n *\r\n * @param {CamOrthographicCamera | PerspectiveCameraera} camera Virtual camera used in the scene\r\n * @param {HTMLElement=null} domElement Renderer's dom element\r\n * @param {Scene=null} scene The scene to be rendered\r\n */\r\n\r\nclass ArcballControls extends EventDispatcher {\r\n  constructor(_camera, _domElement = null, scene = null) {\r\n    super();\r\n\r\n    _defineProperty(this, \"camera\", void 0);\r\n\r\n    _defineProperty(this, \"domElement\", void 0);\r\n\r\n    _defineProperty(this, \"scene\", void 0);\r\n\r\n    _defineProperty(this, \"mouseActions\", void 0);\r\n\r\n    _defineProperty(this, \"_mouseOp\", void 0);\r\n\r\n    _defineProperty(this, \"_v2_1\", void 0);\r\n\r\n    _defineProperty(this, \"_v3_1\", void 0);\r\n\r\n    _defineProperty(this, \"_v3_2\", void 0);\r\n\r\n    _defineProperty(this, \"_m4_1\", void 0);\r\n\r\n    _defineProperty(this, \"_m4_2\", void 0);\r\n\r\n    _defineProperty(this, \"_quat\", void 0);\r\n\r\n    _defineProperty(this, \"_translationMatrix\", void 0);\r\n\r\n    _defineProperty(this, \"_rotationMatrix\", void 0);\r\n\r\n    _defineProperty(this, \"_scaleMatrix\", void 0);\r\n\r\n    _defineProperty(this, \"_rotationAxis\", void 0);\r\n\r\n    _defineProperty(this, \"_cameraMatrixState\", void 0);\r\n\r\n    _defineProperty(this, \"_cameraProjectionState\", void 0);\r\n\r\n    _defineProperty(this, \"_fovState\", void 0);\r\n\r\n    _defineProperty(this, \"_upState\", void 0);\r\n\r\n    _defineProperty(this, \"_zoomState\", void 0);\r\n\r\n    _defineProperty(this, \"_nearPos\", void 0);\r\n\r\n    _defineProperty(this, \"_farPos\", void 0);\r\n\r\n    _defineProperty(this, \"_gizmoMatrixState\", void 0);\r\n\r\n    _defineProperty(this, \"_up0\", void 0);\r\n\r\n    _defineProperty(this, \"_zoom0\", void 0);\r\n\r\n    _defineProperty(this, \"_fov0\", void 0);\r\n\r\n    _defineProperty(this, \"_initialNear\", void 0);\r\n\r\n    _defineProperty(this, \"_nearPos0\", void 0);\r\n\r\n    _defineProperty(this, \"_initialFar\", void 0);\r\n\r\n    _defineProperty(this, \"_farPos0\", void 0);\r\n\r\n    _defineProperty(this, \"_cameraMatrixState0\", void 0);\r\n\r\n    _defineProperty(this, \"_gizmoMatrixState0\", void 0);\r\n\r\n    _defineProperty(this, \"_button\", void 0);\r\n\r\n    _defineProperty(this, \"_touchStart\", void 0);\r\n\r\n    _defineProperty(this, \"_touchCurrent\", void 0);\r\n\r\n    _defineProperty(this, \"_input\", void 0);\r\n\r\n    _defineProperty(this, \"_switchSensibility\", void 0);\r\n\r\n    _defineProperty(this, \"_startFingerDistance\", void 0);\r\n\r\n    _defineProperty(this, \"_currentFingerDistance\", void 0);\r\n\r\n    _defineProperty(this, \"_startFingerRotation\", void 0);\r\n\r\n    _defineProperty(this, \"_currentFingerRotation\", void 0);\r\n\r\n    _defineProperty(this, \"_devPxRatio\", void 0);\r\n\r\n    _defineProperty(this, \"_downValid\", void 0);\r\n\r\n    _defineProperty(this, \"_nclicks\", void 0);\r\n\r\n    _defineProperty(this, \"_downEvents\", void 0);\r\n\r\n    _defineProperty(this, \"_clickStart\", void 0);\r\n\r\n    _defineProperty(this, \"_maxDownTime\", void 0);\r\n\r\n    _defineProperty(this, \"_maxInterval\", void 0);\r\n\r\n    _defineProperty(this, \"_posThreshold\", void 0);\r\n\r\n    _defineProperty(this, \"_movementThreshold\", void 0);\r\n\r\n    _defineProperty(this, \"_currentCursorPosition\", void 0);\r\n\r\n    _defineProperty(this, \"_startCursorPosition\", void 0);\r\n\r\n    _defineProperty(this, \"_grid\", void 0);\r\n\r\n    _defineProperty(this, \"_gridPosition\", void 0);\r\n\r\n    _defineProperty(this, \"_gizmos\", void 0);\r\n\r\n    _defineProperty(this, \"_curvePts\", void 0);\r\n\r\n    _defineProperty(this, \"_timeStart\", void 0);\r\n\r\n    _defineProperty(this, \"_animationId\", void 0);\r\n\r\n    _defineProperty(this, \"focusAnimationTime\", void 0);\r\n\r\n    _defineProperty(this, \"_timePrev\", void 0);\r\n\r\n    _defineProperty(this, \"_timeCurrent\", void 0);\r\n\r\n    _defineProperty(this, \"_anglePrev\", void 0);\r\n\r\n    _defineProperty(this, \"_angleCurrent\", void 0);\r\n\r\n    _defineProperty(this, \"_cursorPosPrev\", void 0);\r\n\r\n    _defineProperty(this, \"_cursorPosCurr\", void 0);\r\n\r\n    _defineProperty(this, \"_wPrev\", void 0);\r\n\r\n    _defineProperty(this, \"_wCurr\", void 0);\r\n\r\n    _defineProperty(this, \"adjustNearFar\", void 0);\r\n\r\n    _defineProperty(this, \"scaleFactor\", void 0);\r\n\r\n    _defineProperty(this, \"dampingFactor\", void 0);\r\n\r\n    _defineProperty(this, \"wMax\", void 0);\r\n\r\n    _defineProperty(this, \"enableAnimations\", void 0);\r\n\r\n    _defineProperty(this, \"enableGrid\", void 0);\r\n\r\n    _defineProperty(this, \"cursorZoom\", void 0);\r\n\r\n    _defineProperty(this, \"minFov\", void 0);\r\n\r\n    _defineProperty(this, \"maxFov\", void 0);\r\n\r\n    _defineProperty(this, \"enabled\", void 0);\r\n\r\n    _defineProperty(this, \"enablePan\", void 0);\r\n\r\n    _defineProperty(this, \"enableRotate\", void 0);\r\n\r\n    _defineProperty(this, \"enableZoom\", void 0);\r\n\r\n    _defineProperty(this, \"minDistance\", void 0);\r\n\r\n    _defineProperty(this, \"maxDistance\", void 0);\r\n\r\n    _defineProperty(this, \"minZoom\", void 0);\r\n\r\n    _defineProperty(this, \"maxZoom\", void 0);\r\n\r\n    _defineProperty(this, \"target\", void 0);\r\n\r\n    _defineProperty(this, \"_currentTarget\", void 0);\r\n\r\n    _defineProperty(this, \"_tbRadius\", void 0);\r\n\r\n    _defineProperty(this, \"_state\", void 0);\r\n\r\n    _defineProperty(this, \"onWindowResize\", () => {\r\n      const scale = (this._gizmos.scale.x + this._gizmos.scale.y + this._gizmos.scale.z) / 3;\r\n\r\n      if (this.camera) {\r\n        const tbRadius = this.calculateTbRadius(this.camera);\r\n\r\n        if (tbRadius !== undefined) {\r\n          this._tbRadius = tbRadius;\r\n        }\r\n      }\r\n\r\n      const newRadius = this._tbRadius / scale; // @ts-expect-error\r\n\r\n      const curve = new EllipseCurve(0, 0, newRadius, newRadius);\r\n      const points = curve.getPoints(this._curvePts);\r\n      const curveGeometry = new BufferGeometry().setFromPoints(points);\r\n\r\n      for (const gizmo in this._gizmos.children) {\r\n        const child = this._gizmos.children[gizmo];\r\n        child.geometry = curveGeometry;\r\n      }\r\n\r\n      this.dispatchEvent(_changeEvent);\r\n    });\r\n\r\n    _defineProperty(this, \"onContextMenu\", event => {\r\n      if (!this.enabled) {\r\n        return;\r\n      }\r\n\r\n      for (let i = 0; i < this.mouseActions.length; i++) {\r\n        if (this.mouseActions[i].mouse == 2) {\r\n          //prevent only if button 2 is actually used\r\n          event.preventDefault();\r\n          break;\r\n        }\r\n      }\r\n    });\r\n\r\n    _defineProperty(this, \"onPointerCancel\", () => {\r\n      this._touchStart.splice(0, this._touchStart.length);\r\n\r\n      this._touchCurrent.splice(0, this._touchCurrent.length);\r\n\r\n      this._input = INPUT.NONE;\r\n    });\r\n\r\n    _defineProperty(this, \"onPointerDown\", event => {\r\n      if (event.button == 0 && event.isPrimary) {\r\n        this._downValid = true;\r\n\r\n        this._downEvents.push(event);\r\n      } else {\r\n        this._downValid = false;\r\n      }\r\n\r\n      if (event.pointerType == 'touch' && this._input != INPUT.CURSOR) {\r\n        this._touchStart.push(event);\r\n\r\n        this._touchCurrent.push(event);\r\n\r\n        switch (this._input) {\r\n          case INPUT.NONE:\r\n            //singleStart\r\n            this._input = INPUT.ONE_FINGER;\r\n            this.onSinglePanStart(event, 'ROTATE');\r\n            window.addEventListener('pointermove', this.onPointerMove);\r\n            window.addEventListener('pointerup', this.onPointerUp);\r\n            break;\r\n\r\n          case INPUT.ONE_FINGER:\r\n          case INPUT.ONE_FINGER_SWITCHED:\r\n            //doubleStart\r\n            this._input = INPUT.TWO_FINGER;\r\n            this.onRotateStart();\r\n            this.onPinchStart();\r\n            this.onDoublePanStart();\r\n            break;\r\n\r\n          case INPUT.TWO_FINGER:\r\n            //multipleStart\r\n            this._input = INPUT.MULT_FINGER;\r\n            this.onTriplePanStart();\r\n            break;\r\n        }\r\n      } else if (event.pointerType != 'touch' && this._input == INPUT.NONE) {\r\n        let modifier = null;\r\n\r\n        if (event.ctrlKey || event.metaKey) {\r\n          modifier = 'CTRL';\r\n        } else if (event.shiftKey) {\r\n          modifier = 'SHIFT';\r\n        }\r\n\r\n        this._mouseOp = this.getOpFromAction(event.button, modifier);\r\n\r\n        if (this._mouseOp) {\r\n          window.addEventListener('pointermove', this.onPointerMove);\r\n          window.addEventListener('pointerup', this.onPointerUp); //singleStart\r\n\r\n          this._input = INPUT.CURSOR;\r\n          this._button = event.button;\r\n          this.onSinglePanStart(event, this._mouseOp);\r\n        }\r\n      }\r\n    });\r\n\r\n    _defineProperty(this, \"onPointerMove\", event => {\r\n      if (event.pointerType == 'touch' && this._input != INPUT.CURSOR) {\r\n        switch (this._input) {\r\n          case INPUT.ONE_FINGER:\r\n            //singleMove\r\n            this.updateTouchEvent(event);\r\n            this.onSinglePanMove(event, STATE.ROTATE);\r\n            break;\r\n\r\n          case INPUT.ONE_FINGER_SWITCHED:\r\n            const movement = this.calculatePointersDistance(this._touchCurrent[0], event) * this._devPxRatio;\r\n\r\n            if (movement >= this._switchSensibility) {\r\n              //singleMove\r\n              this._input = INPUT.ONE_FINGER;\r\n              this.updateTouchEvent(event);\r\n              this.onSinglePanStart(event, 'ROTATE');\r\n              break;\r\n            }\r\n\r\n            break;\r\n\r\n          case INPUT.TWO_FINGER:\r\n            //rotate/pan/pinchMove\r\n            this.updateTouchEvent(event);\r\n            this.onRotateMove();\r\n            this.onPinchMove();\r\n            this.onDoublePanMove();\r\n            break;\r\n\r\n          case INPUT.MULT_FINGER:\r\n            //multMove\r\n            this.updateTouchEvent(event);\r\n            this.onTriplePanMove();\r\n            break;\r\n        }\r\n      } else if (event.pointerType != 'touch' && this._input == INPUT.CURSOR) {\r\n        let modifier = null;\r\n\r\n        if (event.ctrlKey || event.metaKey) {\r\n          modifier = 'CTRL';\r\n        } else if (event.shiftKey) {\r\n          modifier = 'SHIFT';\r\n        }\r\n\r\n        const mouseOpState = this.getOpStateFromAction(this._button, modifier);\r\n\r\n        if (mouseOpState) {\r\n          this.onSinglePanMove(event, mouseOpState);\r\n        }\r\n      } //checkDistance\r\n\r\n\r\n      if (this._downValid) {\r\n        const movement = this.calculatePointersDistance(this._downEvents[this._downEvents.length - 1], event) * this._devPxRatio;\r\n\r\n        if (movement > this._movementThreshold) {\r\n          this._downValid = false;\r\n        }\r\n      }\r\n    });\r\n\r\n    _defineProperty(this, \"onPointerUp\", event => {\r\n      if (event.pointerType == 'touch' && this._input != INPUT.CURSOR) {\r\n        const nTouch = this._touchCurrent.length;\r\n\r\n        for (let i = 0; i < nTouch; i++) {\r\n          if (this._touchCurrent[i].pointerId == event.pointerId) {\r\n            this._touchCurrent.splice(i, 1);\r\n\r\n            this._touchStart.splice(i, 1);\r\n\r\n            break;\r\n          }\r\n        }\r\n\r\n        switch (this._input) {\r\n          case INPUT.ONE_FINGER:\r\n          case INPUT.ONE_FINGER_SWITCHED:\r\n            //singleEnd\r\n            window.removeEventListener('pointermove', this.onPointerMove);\r\n            window.removeEventListener('pointerup', this.onPointerUp);\r\n            this._input = INPUT.NONE;\r\n            this.onSinglePanEnd();\r\n            break;\r\n\r\n          case INPUT.TWO_FINGER:\r\n            //doubleEnd\r\n            this.onDoublePanEnd();\r\n            this.onPinchEnd();\r\n            this.onRotateEnd(); //switching to singleStart\r\n\r\n            this._input = INPUT.ONE_FINGER_SWITCHED;\r\n            break;\r\n\r\n          case INPUT.MULT_FINGER:\r\n            if (this._touchCurrent.length == 0) {\r\n              window.removeEventListener('pointermove', this.onPointerMove);\r\n              window.removeEventListener('pointerup', this.onPointerUp); //multCancel\r\n\r\n              this._input = INPUT.NONE;\r\n              this.onTriplePanEnd();\r\n            }\r\n\r\n            break;\r\n        }\r\n      } else if (event.pointerType != 'touch' && this._input == INPUT.CURSOR) {\r\n        window.removeEventListener('pointermove', this.onPointerMove);\r\n        window.removeEventListener('pointerup', this.onPointerUp);\r\n        this._input = INPUT.NONE;\r\n        this.onSinglePanEnd();\r\n        this._button = -1;\r\n      }\r\n\r\n      if (event.isPrimary) {\r\n        if (this._downValid) {\r\n          const downTime = event.timeStamp - this._downEvents[this._downEvents.length - 1].timeStamp;\r\n\r\n          if (downTime <= this._maxDownTime) {\r\n            if (this._nclicks == 0) {\r\n              //first valid click detected\r\n              this._nclicks = 1;\r\n              this._clickStart = performance.now();\r\n            } else {\r\n              const clickInterval = event.timeStamp - this._clickStart;\r\n\r\n              const movement = this.calculatePointersDistance(this._downEvents[1], this._downEvents[0]) * this._devPxRatio;\r\n\r\n              if (clickInterval <= this._maxInterval && movement <= this._posThreshold) {\r\n                //second valid click detected\r\n                //fire double tap and reset values\r\n                this._nclicks = 0;\r\n\r\n                this._downEvents.splice(0, this._downEvents.length);\r\n\r\n                this.onDoubleTap(event);\r\n              } else {\r\n                //new 'first click'\r\n                this._nclicks = 1;\r\n\r\n                this._downEvents.shift();\r\n\r\n                this._clickStart = performance.now();\r\n              }\r\n            }\r\n          } else {\r\n            this._downValid = false;\r\n            this._nclicks = 0;\r\n\r\n            this._downEvents.splice(0, this._downEvents.length);\r\n          }\r\n        } else {\r\n          this._nclicks = 0;\r\n\r\n          this._downEvents.splice(0, this._downEvents.length);\r\n        }\r\n      }\r\n    });\r\n\r\n    _defineProperty(this, \"onWheel\", event => {\r\n      var _this$camera3;\r\n\r\n      if (this.enabled && this.enableZoom && this.domElement) {\r\n        let modifier = null;\r\n\r\n        if (event.ctrlKey || event.metaKey) {\r\n          modifier = 'CTRL';\r\n        } else if (event.shiftKey) {\r\n          modifier = 'SHIFT';\r\n        }\r\n\r\n        const mouseOp = this.getOpFromAction('WHEEL', modifier);\r\n\r\n        if (mouseOp) {\r\n          event.preventDefault();\r\n          this.dispatchEvent(_startEvent);\r\n          const notchDeltaY = 125; //distance of one notch of mouse wheel\r\n\r\n          let sgn = event.deltaY / notchDeltaY;\r\n          let size = 1;\r\n\r\n          if (sgn > 0) {\r\n            size = 1 / this.scaleFactor;\r\n          } else if (sgn < 0) {\r\n            size = this.scaleFactor;\r\n          }\r\n\r\n          switch (mouseOp) {\r\n            case 'ZOOM':\r\n              this.updateTbState(STATE.SCALE, true);\r\n\r\n              if (sgn > 0) {\r\n                size = 1 / Math.pow(this.scaleFactor, sgn);\r\n              } else if (sgn < 0) {\r\n                size = Math.pow(this.scaleFactor, -sgn);\r\n              }\r\n\r\n              if (this.cursorZoom && this.enablePan) {\r\n                var _this$camera, _this$camera2;\r\n\r\n                let scalePoint;\r\n\r\n                if (((_this$camera = this.camera) === null || _this$camera === void 0 ? void 0 : _this$camera.type) === 'OrthographicCamera') {\r\n                  var _this$unprojectOnTbPl;\r\n\r\n                  scalePoint = (_this$unprojectOnTbPl = this.unprojectOnTbPlane(this.camera, event.clientX, event.clientY, this.domElement)) === null || _this$unprojectOnTbPl === void 0 ? void 0 : _this$unprojectOnTbPl.applyQuaternion(this.camera.quaternion).multiplyScalar(1 / this.camera.zoom).add(this._gizmos.position);\r\n                }\r\n\r\n                if (((_this$camera2 = this.camera) === null || _this$camera2 === void 0 ? void 0 : _this$camera2.type) === 'PerspectiveCamera') {\r\n                  var _this$unprojectOnTbPl2;\r\n\r\n                  scalePoint = (_this$unprojectOnTbPl2 = this.unprojectOnTbPlane(this.camera, event.clientX, event.clientY, this.domElement)) === null || _this$unprojectOnTbPl2 === void 0 ? void 0 : _this$unprojectOnTbPl2.applyQuaternion(this.camera.quaternion).add(this._gizmos.position);\r\n                }\r\n\r\n                if (scalePoint !== undefined) this.applyTransformMatrix(this.applyScale(size, scalePoint));\r\n              } else {\r\n                this.applyTransformMatrix(this.applyScale(size, this._gizmos.position));\r\n              }\r\n\r\n              if (this._grid) {\r\n                this.disposeGrid();\r\n                this.drawGrid();\r\n              }\r\n\r\n              this.updateTbState(STATE.IDLE, false);\r\n              this.dispatchEvent(_changeEvent);\r\n              this.dispatchEvent(_endEvent);\r\n              break;\r\n\r\n            case 'FOV':\r\n              if (((_this$camera3 = this.camera) === null || _this$camera3 === void 0 ? void 0 : _this$camera3.type) === 'PerspectiveCamera') {\r\n                this.updateTbState(STATE.FOV, true); //Vertigo effect\r\n                //\t  fov / 2\r\n                //\t\t|\\\r\n                //\t\t| \\\r\n                //\t\t|  \\\r\n                //\tx\t|\t\\\r\n                //\t\t| \t \\\r\n                //\t\t| \t  \\\r\n                //\t\t| _ _ _\\\r\n                //\t\t\ty\r\n                //check for iOs shift shortcut\r\n\r\n                if (event.deltaX != 0) {\r\n                  sgn = event.deltaX / notchDeltaY;\r\n                  size = 1;\r\n\r\n                  if (sgn > 0) {\r\n                    size = 1 / Math.pow(this.scaleFactor, sgn);\r\n                  } else if (sgn < 0) {\r\n                    size = Math.pow(this.scaleFactor, -sgn);\r\n                  }\r\n                }\r\n\r\n                this._v3_1.setFromMatrixPosition(this._cameraMatrixState);\r\n\r\n                const x = this._v3_1.distanceTo(this._gizmos.position);\r\n\r\n                let xNew = x / size; //distance between camera and gizmos if scale(size, scalepoint) would be performed\r\n                //check min and max distance\r\n\r\n                xNew = MathUtils.clamp(xNew, this.minDistance, this.maxDistance);\r\n                const y = x * Math.tan(MathUtils.DEG2RAD * this.camera.fov * 0.5); //calculate new fov\r\n\r\n                let newFov = MathUtils.RAD2DEG * (Math.atan(y / xNew) * 2); //check min and max fov\r\n\r\n                if (newFov > this.maxFov) {\r\n                  newFov = this.maxFov;\r\n                } else if (newFov < this.minFov) {\r\n                  newFov = this.minFov;\r\n                }\r\n\r\n                const newDistance = y / Math.tan(MathUtils.DEG2RAD * (newFov / 2));\r\n                size = x / newDistance;\r\n                this.setFov(newFov);\r\n                this.applyTransformMatrix(this.applyScale(size, this._gizmos.position, false));\r\n              }\r\n\r\n              if (this._grid) {\r\n                this.disposeGrid();\r\n                this.drawGrid();\r\n              }\r\n\r\n              this.updateTbState(STATE.IDLE, false);\r\n              this.dispatchEvent(_changeEvent);\r\n              this.dispatchEvent(_endEvent);\r\n              break;\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    _defineProperty(this, \"onSinglePanStart\", (event, operation) => {\r\n      var _this$camera4;\r\n\r\n      if (this.enabled && this.domElement) {\r\n        this.dispatchEvent(_startEvent);\r\n        this.setCenter(event.clientX, event.clientY);\r\n\r\n        switch (operation) {\r\n          case 'PAN':\r\n            if (!this.enablePan) return;\r\n\r\n            if (this._animationId != -1) {\r\n              cancelAnimationFrame(this._animationId);\r\n              this._animationId = -1;\r\n              this._timeStart = -1;\r\n              this.activateGizmos(false);\r\n              this.dispatchEvent(_changeEvent);\r\n            }\r\n\r\n            if (this.camera) {\r\n              this.updateTbState(STATE.PAN, true);\r\n              const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement);\r\n\r\n              if (rayDir !== undefined) {\r\n                this._startCursorPosition.copy(rayDir);\r\n              }\r\n\r\n              if (this.enableGrid) {\r\n                this.drawGrid();\r\n                this.dispatchEvent(_changeEvent);\r\n              }\r\n            }\r\n\r\n            break;\r\n\r\n          case 'ROTATE':\r\n            if (!this.enableRotate) return;\r\n\r\n            if (this._animationId != -1) {\r\n              cancelAnimationFrame(this._animationId);\r\n              this._animationId = -1;\r\n              this._timeStart = -1;\r\n            }\r\n\r\n            if (this.camera) {\r\n              this.updateTbState(STATE.ROTATE, true);\r\n              const rayDir = this.unprojectOnTbSurface(this.camera, _center.x, _center.y, this.domElement, this._tbRadius);\r\n\r\n              if (rayDir !== undefined) {\r\n                this._startCursorPosition.copy(rayDir);\r\n              }\r\n\r\n              this.activateGizmos(true);\r\n\r\n              if (this.enableAnimations) {\r\n                this._timePrev = this._timeCurrent = performance.now();\r\n                this._angleCurrent = this._anglePrev = 0;\r\n\r\n                this._cursorPosPrev.copy(this._startCursorPosition);\r\n\r\n                this._cursorPosCurr.copy(this._cursorPosPrev);\r\n\r\n                this._wCurr = 0;\r\n                this._wPrev = this._wCurr;\r\n              }\r\n            }\r\n\r\n            this.dispatchEvent(_changeEvent);\r\n            break;\r\n\r\n          case 'FOV':\r\n            if (!this.enableZoom) return;\r\n\r\n            if (((_this$camera4 = this.camera) === null || _this$camera4 === void 0 ? void 0 : _this$camera4.type) === 'PerspectiveCamera') {\r\n              if (this._animationId != -1) {\r\n                cancelAnimationFrame(this._animationId);\r\n                this._animationId = -1;\r\n                this._timeStart = -1;\r\n                this.activateGizmos(false);\r\n                this.dispatchEvent(_changeEvent);\r\n              }\r\n\r\n              this.updateTbState(STATE.FOV, true);\r\n\r\n              this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\r\n\r\n              this._currentCursorPosition.copy(this._startCursorPosition);\r\n            }\r\n\r\n            break;\r\n\r\n          case 'ZOOM':\r\n            if (!this.enableZoom) return;\r\n\r\n            if (this._animationId != -1) {\r\n              cancelAnimationFrame(this._animationId);\r\n              this._animationId = -1;\r\n              this._timeStart = -1;\r\n              this.activateGizmos(false);\r\n              this.dispatchEvent(_changeEvent);\r\n            }\r\n\r\n            this.updateTbState(STATE.SCALE, true);\r\n\r\n            this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\r\n\r\n            this._currentCursorPosition.copy(this._startCursorPosition);\r\n\r\n            break;\r\n        }\r\n      }\r\n    });\r\n\r\n    _defineProperty(this, \"onSinglePanMove\", (event, opState) => {\r\n      var _this$camera5;\r\n\r\n      if (this.enabled && this.domElement) {\r\n        const restart = opState != this._state;\r\n        this.setCenter(event.clientX, event.clientY);\r\n\r\n        switch (opState) {\r\n          case STATE.PAN:\r\n            if (this.enablePan && this.camera) {\r\n              if (restart) {\r\n                //switch to pan operation\r\n                this.dispatchEvent(_endEvent);\r\n                this.dispatchEvent(_startEvent);\r\n                this.updateTbState(opState, true);\r\n                const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement);\r\n\r\n                if (rayDir !== undefined) {\r\n                  this._startCursorPosition.copy(rayDir);\r\n                }\r\n\r\n                if (this.enableGrid) {\r\n                  this.drawGrid();\r\n                }\r\n\r\n                this.activateGizmos(false);\r\n              } else {\r\n                //continue with pan operation\r\n                const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement);\r\n\r\n                if (rayDir !== undefined) {\r\n                  this._currentCursorPosition.copy(rayDir);\r\n                }\r\n\r\n                this.applyTransformMatrix(this.pan(this._startCursorPosition, this._currentCursorPosition));\r\n              }\r\n            }\r\n\r\n            break;\r\n\r\n          case STATE.ROTATE:\r\n            if (this.enableRotate && this.camera) {\r\n              if (restart) {\r\n                //switch to rotate operation\r\n                this.dispatchEvent(_endEvent);\r\n                this.dispatchEvent(_startEvent);\r\n                this.updateTbState(opState, true);\r\n                const rayDir = this.unprojectOnTbSurface(this.camera, _center.x, _center.y, this.domElement, this._tbRadius);\r\n\r\n                if (rayDir !== undefined) {\r\n                  this._startCursorPosition.copy(rayDir);\r\n                }\r\n\r\n                if (this.enableGrid) {\r\n                  this.disposeGrid();\r\n                }\r\n\r\n                this.activateGizmos(true);\r\n              } else {\r\n                //continue with rotate operation\r\n                const rayDir = this.unprojectOnTbSurface(this.camera, _center.x, _center.y, this.domElement, this._tbRadius);\r\n\r\n                if (rayDir !== undefined) {\r\n                  this._currentCursorPosition.copy(rayDir);\r\n                }\r\n\r\n                const distance = this._startCursorPosition.distanceTo(this._currentCursorPosition);\r\n\r\n                const angle = this._startCursorPosition.angleTo(this._currentCursorPosition);\r\n\r\n                const amount = Math.max(distance / this._tbRadius, angle); //effective rotation angle\r\n\r\n                this.applyTransformMatrix(this.rotate(this.calculateRotationAxis(this._startCursorPosition, this._currentCursorPosition), amount));\r\n\r\n                if (this.enableAnimations) {\r\n                  this._timePrev = this._timeCurrent;\r\n                  this._timeCurrent = performance.now();\r\n                  this._anglePrev = this._angleCurrent;\r\n                  this._angleCurrent = amount;\r\n\r\n                  this._cursorPosPrev.copy(this._cursorPosCurr);\r\n\r\n                  this._cursorPosCurr.copy(this._currentCursorPosition);\r\n\r\n                  this._wPrev = this._wCurr;\r\n                  this._wCurr = this.calculateAngularSpeed(this._anglePrev, this._angleCurrent, this._timePrev, this._timeCurrent);\r\n                }\r\n              }\r\n            }\r\n\r\n            break;\r\n\r\n          case STATE.SCALE:\r\n            if (this.enableZoom) {\r\n              if (restart) {\r\n                //switch to zoom operation\r\n                this.dispatchEvent(_endEvent);\r\n                this.dispatchEvent(_startEvent);\r\n                this.updateTbState(opState, true);\r\n\r\n                this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\r\n\r\n                this._currentCursorPosition.copy(this._startCursorPosition);\r\n\r\n                if (this.enableGrid) {\r\n                  this.disposeGrid();\r\n                }\r\n\r\n                this.activateGizmos(false);\r\n              } else {\r\n                //continue with zoom operation\r\n                const screenNotches = 8; //how many wheel notches corresponds to a full screen pan\r\n\r\n                this._currentCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\r\n\r\n                const movement = this._currentCursorPosition.y - this._startCursorPosition.y;\r\n                let size = 1;\r\n\r\n                if (movement < 0) {\r\n                  size = 1 / Math.pow(this.scaleFactor, -movement * screenNotches);\r\n                } else if (movement > 0) {\r\n                  size = Math.pow(this.scaleFactor, movement * screenNotches);\r\n                }\r\n\r\n                this.applyTransformMatrix(this.applyScale(size, this._gizmos.position));\r\n              }\r\n            }\r\n\r\n            break;\r\n\r\n          case STATE.FOV:\r\n            if (this.enableZoom && ((_this$camera5 = this.camera) === null || _this$camera5 === void 0 ? void 0 : _this$camera5.type) === 'PerspectiveCamera') {\r\n              if (restart) {\r\n                //switch to fov operation\r\n                this.dispatchEvent(_endEvent);\r\n                this.dispatchEvent(_startEvent);\r\n                this.updateTbState(opState, true);\r\n\r\n                this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\r\n\r\n                this._currentCursorPosition.copy(this._startCursorPosition);\r\n\r\n                if (this.enableGrid) {\r\n                  this.disposeGrid();\r\n                }\r\n\r\n                this.activateGizmos(false);\r\n              } else {\r\n                //continue with fov operation\r\n                const screenNotches = 8; //how many wheel notches corresponds to a full screen pan\r\n\r\n                this._currentCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\r\n\r\n                const movement = this._currentCursorPosition.y - this._startCursorPosition.y;\r\n                let size = 1;\r\n\r\n                if (movement < 0) {\r\n                  size = 1 / Math.pow(this.scaleFactor, -movement * screenNotches);\r\n                } else if (movement > 0) {\r\n                  size = Math.pow(this.scaleFactor, movement * screenNotches);\r\n                }\r\n\r\n                this._v3_1.setFromMatrixPosition(this._cameraMatrixState);\r\n\r\n                const x = this._v3_1.distanceTo(this._gizmos.position);\r\n\r\n                let xNew = x / size; //distance between camera and gizmos if scale(size, scalepoint) would be performed\r\n                //check min and max distance\r\n\r\n                xNew = MathUtils.clamp(xNew, this.minDistance, this.maxDistance);\r\n                const y = x * Math.tan(MathUtils.DEG2RAD * this._fovState * 0.5); //calculate new fov\r\n\r\n                let newFov = MathUtils.RAD2DEG * (Math.atan(y / xNew) * 2); //check min and max fov\r\n\r\n                newFov = MathUtils.clamp(newFov, this.minFov, this.maxFov);\r\n                const newDistance = y / Math.tan(MathUtils.DEG2RAD * (newFov / 2));\r\n                size = x / newDistance;\r\n\r\n                this._v3_2.setFromMatrixPosition(this._gizmoMatrixState);\r\n\r\n                this.setFov(newFov);\r\n                this.applyTransformMatrix(this.applyScale(size, this._v3_2, false)); //adjusting distance\r\n\r\n                const direction = this._gizmos.position.clone().sub(this.camera.position).normalize().multiplyScalar(newDistance / x);\r\n\r\n                this._m4_1.makeTranslation(direction.x, direction.y, direction.z);\r\n              }\r\n            }\r\n\r\n            break;\r\n        }\r\n\r\n        this.dispatchEvent(_changeEvent);\r\n      }\r\n    });\r\n\r\n    _defineProperty(this, \"onSinglePanEnd\", () => {\r\n      if (this._state == STATE.ROTATE) {\r\n        if (!this.enableRotate) {\r\n          return;\r\n        }\r\n\r\n        if (this.enableAnimations) {\r\n          //perform rotation animation\r\n          const deltaTime = performance.now() - this._timeCurrent;\r\n\r\n          if (deltaTime < 120) {\r\n            const w = Math.abs((this._wPrev + this._wCurr) / 2);\r\n            const self = this;\r\n            this._animationId = window.requestAnimationFrame(function (t) {\r\n              self.updateTbState(STATE.ANIMATION_ROTATE, true);\r\n              const rotationAxis = self.calculateRotationAxis(self._cursorPosPrev, self._cursorPosCurr);\r\n              self.onRotationAnim(t, rotationAxis, Math.min(w, self.wMax));\r\n            });\r\n          } else {\r\n            //cursor has been standing still for over 120 ms since last movement\r\n            this.updateTbState(STATE.IDLE, false);\r\n            this.activateGizmos(false);\r\n            this.dispatchEvent(_changeEvent);\r\n          }\r\n        } else {\r\n          this.updateTbState(STATE.IDLE, false);\r\n          this.activateGizmos(false);\r\n          this.dispatchEvent(_changeEvent);\r\n        }\r\n      } else if (this._state == STATE.PAN || this._state == STATE.IDLE) {\r\n        this.updateTbState(STATE.IDLE, false);\r\n\r\n        if (this.enableGrid) {\r\n          this.disposeGrid();\r\n        }\r\n\r\n        this.activateGizmos(false);\r\n        this.dispatchEvent(_changeEvent);\r\n      }\r\n\r\n      this.dispatchEvent(_endEvent);\r\n    });\r\n\r\n    _defineProperty(this, \"onDoubleTap\", event => {\r\n      if (this.enabled && this.enablePan && this.scene && this.camera && this.domElement) {\r\n        this.dispatchEvent(_startEvent);\r\n        this.setCenter(event.clientX, event.clientY);\r\n        const hitP = this.unprojectOnObj(this.getCursorNDC(_center.x, _center.y, this.domElement), this.camera);\r\n\r\n        if (hitP && this.enableAnimations) {\r\n          const self = this;\r\n\r\n          if (this._animationId != -1) {\r\n            window.cancelAnimationFrame(this._animationId);\r\n          }\r\n\r\n          this._timeStart = -1;\r\n          this._animationId = window.requestAnimationFrame(function (t) {\r\n            self.updateTbState(STATE.ANIMATION_FOCUS, true);\r\n            self.onFocusAnim(t, hitP, self._cameraMatrixState, self._gizmoMatrixState);\r\n          });\r\n        } else if (hitP && !this.enableAnimations) {\r\n          this.updateTbState(STATE.FOCUS, true);\r\n          this.focus(hitP, this.scaleFactor);\r\n          this.updateTbState(STATE.IDLE, false);\r\n          this.dispatchEvent(_changeEvent);\r\n        }\r\n      }\r\n\r\n      this.dispatchEvent(_endEvent);\r\n    });\r\n\r\n    _defineProperty(this, \"onDoublePanStart\", () => {\r\n      if (this.enabled && this.enablePan && this.camera && this.domElement) {\r\n        this.dispatchEvent(_startEvent);\r\n        this.updateTbState(STATE.PAN, true);\r\n        this.setCenter((this._touchCurrent[0].clientX + this._touchCurrent[1].clientX) / 2, (this._touchCurrent[0].clientY + this._touchCurrent[1].clientY) / 2);\r\n        const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement, true);\r\n\r\n        if (rayDir !== undefined) {\r\n          this._startCursorPosition.copy(rayDir);\r\n        }\r\n\r\n        this._currentCursorPosition.copy(this._startCursorPosition);\r\n\r\n        this.activateGizmos(false);\r\n      }\r\n    });\r\n\r\n    _defineProperty(this, \"onDoublePanMove\", () => {\r\n      if (this.enabled && this.enablePan && this.camera && this.domElement) {\r\n        this.setCenter((this._touchCurrent[0].clientX + this._touchCurrent[1].clientX) / 2, (this._touchCurrent[0].clientY + this._touchCurrent[1].clientY) / 2);\r\n\r\n        if (this._state != STATE.PAN) {\r\n          this.updateTbState(STATE.PAN, true);\r\n\r\n          this._startCursorPosition.copy(this._currentCursorPosition);\r\n        }\r\n\r\n        const rayDir = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement, true);\r\n        if (rayDir !== undefined) this._currentCursorPosition.copy(rayDir);\r\n        this.applyTransformMatrix(this.pan(this._startCursorPosition, this._currentCursorPosition, true));\r\n        this.dispatchEvent(_changeEvent);\r\n      }\r\n    });\r\n\r\n    _defineProperty(this, \"onDoublePanEnd\", () => {\r\n      this.updateTbState(STATE.IDLE, false);\r\n      this.dispatchEvent(_endEvent);\r\n    });\r\n\r\n    _defineProperty(this, \"onRotateStart\", () => {\r\n      if (this.enabled && this.enableRotate) {\r\n        var _this$camera6;\r\n\r\n        this.dispatchEvent(_startEvent);\r\n        this.updateTbState(STATE.ZROTATE, true); //this._startFingerRotation = event.rotation;\r\n\r\n        this._startFingerRotation = this.getAngle(this._touchCurrent[1], this._touchCurrent[0]) + this.getAngle(this._touchStart[1], this._touchStart[0]);\r\n        this._currentFingerRotation = this._startFingerRotation;\r\n        (_this$camera6 = this.camera) === null || _this$camera6 === void 0 ? void 0 : _this$camera6.getWorldDirection(this._rotationAxis); //rotation axis\r\n\r\n        if (!this.enablePan && !this.enableZoom) {\r\n          this.activateGizmos(true);\r\n        }\r\n      }\r\n    });\r\n\r\n    _defineProperty(this, \"onRotateMove\", () => {\r\n      if (this.enabled && this.enableRotate && this.camera && this.domElement) {\r\n        this.setCenter((this._touchCurrent[0].clientX + this._touchCurrent[1].clientX) / 2, (this._touchCurrent[0].clientY + this._touchCurrent[1].clientY) / 2);\r\n        let rotationPoint;\r\n\r\n        if (this._state != STATE.ZROTATE) {\r\n          this.updateTbState(STATE.ZROTATE, true);\r\n          this._startFingerRotation = this._currentFingerRotation;\r\n        } //this._currentFingerRotation = event.rotation;\r\n\r\n\r\n        this._currentFingerRotation = this.getAngle(this._touchCurrent[1], this._touchCurrent[0]) + this.getAngle(this._touchStart[1], this._touchStart[0]);\r\n\r\n        if (!this.enablePan) {\r\n          rotationPoint = new Vector3().setFromMatrixPosition(this._gizmoMatrixState);\r\n        } else if (this.camera) {\r\n          var _this$unprojectOnTbPl3;\r\n\r\n          this._v3_2.setFromMatrixPosition(this._gizmoMatrixState);\r\n\r\n          rotationPoint = (_this$unprojectOnTbPl3 = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement)) === null || _this$unprojectOnTbPl3 === void 0 ? void 0 : _this$unprojectOnTbPl3.applyQuaternion(this.camera.quaternion).multiplyScalar(1 / this.camera.zoom).add(this._v3_2);\r\n        }\r\n\r\n        const amount = MathUtils.DEG2RAD * (this._startFingerRotation - this._currentFingerRotation);\r\n\r\n        if (rotationPoint !== undefined) {\r\n          this.applyTransformMatrix(this.zRotate(rotationPoint, amount));\r\n        }\r\n\r\n        this.dispatchEvent(_changeEvent);\r\n      }\r\n    });\r\n\r\n    _defineProperty(this, \"onRotateEnd\", () => {\r\n      this.updateTbState(STATE.IDLE, false);\r\n      this.activateGizmos(false);\r\n      this.dispatchEvent(_endEvent);\r\n    });\r\n\r\n    _defineProperty(this, \"onPinchStart\", () => {\r\n      if (this.enabled && this.enableZoom) {\r\n        this.dispatchEvent(_startEvent);\r\n        this.updateTbState(STATE.SCALE, true);\r\n        this._startFingerDistance = this.calculatePointersDistance(this._touchCurrent[0], this._touchCurrent[1]);\r\n        this._currentFingerDistance = this._startFingerDistance;\r\n        this.activateGizmos(false);\r\n      }\r\n    });\r\n\r\n    _defineProperty(this, \"onPinchMove\", () => {\r\n      if (this.enabled && this.enableZoom && this.domElement) {\r\n        this.setCenter((this._touchCurrent[0].clientX + this._touchCurrent[1].clientX) / 2, (this._touchCurrent[0].clientY + this._touchCurrent[1].clientY) / 2);\r\n        const minDistance = 12; //minimum distance between fingers (in css pixels)\r\n\r\n        if (this._state != STATE.SCALE) {\r\n          this._startFingerDistance = this._currentFingerDistance;\r\n          this.updateTbState(STATE.SCALE, true);\r\n        }\r\n\r\n        this._currentFingerDistance = Math.max(this.calculatePointersDistance(this._touchCurrent[0], this._touchCurrent[1]), minDistance * this._devPxRatio);\r\n        const amount = this._currentFingerDistance / this._startFingerDistance;\r\n        let scalePoint;\r\n\r\n        if (!this.enablePan) {\r\n          scalePoint = this._gizmos.position;\r\n        } else {\r\n          var _this$camera7, _this$camera8;\r\n\r\n          if (((_this$camera7 = this.camera) === null || _this$camera7 === void 0 ? void 0 : _this$camera7.type) === 'OrthographicCamera') {\r\n            var _this$unprojectOnTbPl4;\r\n\r\n            scalePoint = (_this$unprojectOnTbPl4 = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement)) === null || _this$unprojectOnTbPl4 === void 0 ? void 0 : _this$unprojectOnTbPl4.applyQuaternion(this.camera.quaternion).multiplyScalar(1 / this.camera.zoom).add(this._gizmos.position);\r\n          } else if (((_this$camera8 = this.camera) === null || _this$camera8 === void 0 ? void 0 : _this$camera8.type) === 'PerspectiveCamera') {\r\n            var _this$unprojectOnTbPl5;\r\n\r\n            scalePoint = (_this$unprojectOnTbPl5 = this.unprojectOnTbPlane(this.camera, _center.x, _center.y, this.domElement)) === null || _this$unprojectOnTbPl5 === void 0 ? void 0 : _this$unprojectOnTbPl5.applyQuaternion(this.camera.quaternion).add(this._gizmos.position);\r\n          }\r\n        }\r\n\r\n        if (scalePoint !== undefined) {\r\n          this.applyTransformMatrix(this.applyScale(amount, scalePoint));\r\n        }\r\n\r\n        this.dispatchEvent(_changeEvent);\r\n      }\r\n    });\r\n\r\n    _defineProperty(this, \"onPinchEnd\", () => {\r\n      this.updateTbState(STATE.IDLE, false);\r\n      this.dispatchEvent(_endEvent);\r\n    });\r\n\r\n    _defineProperty(this, \"onTriplePanStart\", () => {\r\n      if (this.enabled && this.enableZoom && this.domElement) {\r\n        this.dispatchEvent(_startEvent);\r\n        this.updateTbState(STATE.SCALE, true); //const center = event.center;\r\n\r\n        let clientX = 0;\r\n        let clientY = 0;\r\n        const nFingers = this._touchCurrent.length;\r\n\r\n        for (let i = 0; i < nFingers; i++) {\r\n          clientX += this._touchCurrent[i].clientX;\r\n          clientY += this._touchCurrent[i].clientY;\r\n        }\r\n\r\n        this.setCenter(clientX / nFingers, clientY / nFingers);\r\n\r\n        this._startCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\r\n\r\n        this._currentCursorPosition.copy(this._startCursorPosition);\r\n      }\r\n    });\r\n\r\n    _defineProperty(this, \"onTriplePanMove\", () => {\r\n      if (this.enabled && this.enableZoom && this.camera && this.domElement) {\r\n        //\t  fov / 2\r\n        //\t\t|\\\r\n        //\t\t| \\\r\n        //\t\t|  \\\r\n        //\tx\t|\t\\\r\n        //\t\t| \t \\\r\n        //\t\t| \t  \\\r\n        //\t\t| _ _ _\\\r\n        //\t\t\ty\r\n        //const center = event.center;\r\n        let clientX = 0;\r\n        let clientY = 0;\r\n        const nFingers = this._touchCurrent.length;\r\n\r\n        for (let i = 0; i < nFingers; i++) {\r\n          clientX += this._touchCurrent[i].clientX;\r\n          clientY += this._touchCurrent[i].clientY;\r\n        }\r\n\r\n        this.setCenter(clientX / nFingers, clientY / nFingers);\r\n        const screenNotches = 8; //how many wheel notches corresponds to a full screen pan\r\n\r\n        this._currentCursorPosition.setY(this.getCursorNDC(_center.x, _center.y, this.domElement).y * 0.5);\r\n\r\n        const movement = this._currentCursorPosition.y - this._startCursorPosition.y;\r\n        let size = 1;\r\n\r\n        if (movement < 0) {\r\n          size = 1 / Math.pow(this.scaleFactor, -movement * screenNotches);\r\n        } else if (movement > 0) {\r\n          size = Math.pow(this.scaleFactor, movement * screenNotches);\r\n        }\r\n\r\n        this._v3_1.setFromMatrixPosition(this._cameraMatrixState);\r\n\r\n        const x = this._v3_1.distanceTo(this._gizmos.position);\r\n\r\n        let xNew = x / size; //distance between camera and gizmos if scale(size, scalepoint) would be performed\r\n        //check min and max distance\r\n\r\n        xNew = MathUtils.clamp(xNew, this.minDistance, this.maxDistance);\r\n        const y = x * Math.tan(MathUtils.DEG2RAD * this._fovState * 0.5); //calculate new fov\r\n\r\n        let newFov = MathUtils.RAD2DEG * (Math.atan(y / xNew) * 2); //check min and max fov\r\n\r\n        newFov = MathUtils.clamp(newFov, this.minFov, this.maxFov);\r\n        const newDistance = y / Math.tan(MathUtils.DEG2RAD * (newFov / 2));\r\n        size = x / newDistance;\r\n\r\n        this._v3_2.setFromMatrixPosition(this._gizmoMatrixState);\r\n\r\n        this.setFov(newFov);\r\n        this.applyTransformMatrix(this.applyScale(size, this._v3_2, false)); //adjusting distance\r\n\r\n        const direction = this._gizmos.position.clone().sub(this.camera.position).normalize().multiplyScalar(newDistance / x);\r\n\r\n        this._m4_1.makeTranslation(direction.x, direction.y, direction.z);\r\n\r\n        this.dispatchEvent(_changeEvent);\r\n      }\r\n    });\r\n\r\n    _defineProperty(this, \"onTriplePanEnd\", () => {\r\n      this.updateTbState(STATE.IDLE, false);\r\n      this.dispatchEvent(_endEvent); //this.dispatchEvent( _changeEvent );\r\n    });\r\n\r\n    _defineProperty(this, \"setCenter\", (clientX, clientY) => {\r\n      _center.x = clientX;\r\n      _center.y = clientY;\r\n    });\r\n\r\n    _defineProperty(this, \"initializeMouseActions\", () => {\r\n      this.setMouseAction('PAN', 0, 'CTRL');\r\n      this.setMouseAction('PAN', 2);\r\n      this.setMouseAction('ROTATE', 0);\r\n      this.setMouseAction('ZOOM', 'WHEEL');\r\n      this.setMouseAction('ZOOM', 1);\r\n      this.setMouseAction('FOV', 'WHEEL', 'SHIFT');\r\n      this.setMouseAction('FOV', 1, 'SHIFT');\r\n    });\r\n\r\n    _defineProperty(this, \"setMouseAction\", (operation, mouse, key = null) => {\r\n      const operationInput = ['PAN', 'ROTATE', 'ZOOM', 'FOV'];\r\n      const mouseInput = [0, 1, 2, 'WHEEL'];\r\n      const keyInput = ['CTRL', 'SHIFT', null];\r\n      let state;\r\n\r\n      if (!operationInput.includes(operation) || !mouseInput.includes(mouse) || !keyInput.includes(key)) {\r\n        //invalid parameters\r\n        return false;\r\n      }\r\n\r\n      if (mouse == 'WHEEL') {\r\n        if (operation != 'ZOOM' && operation != 'FOV') {\r\n          //cannot associate 2D operation to 1D input\r\n          return false;\r\n        }\r\n      }\r\n\r\n      switch (operation) {\r\n        case 'PAN':\r\n          state = STATE.PAN;\r\n          break;\r\n\r\n        case 'ROTATE':\r\n          state = STATE.ROTATE;\r\n          break;\r\n\r\n        case 'ZOOM':\r\n          state = STATE.SCALE;\r\n          break;\r\n\r\n        case 'FOV':\r\n          state = STATE.FOV;\r\n          break;\r\n      }\r\n\r\n      const action = {\r\n        operation: operation,\r\n        mouse: mouse,\r\n        key: key,\r\n        state: state\r\n      };\r\n\r\n      for (let i = 0; i < this.mouseActions.length; i++) {\r\n        if (this.mouseActions[i].mouse == action.mouse && this.mouseActions[i].key == action.key) {\r\n          this.mouseActions.splice(i, 1, action);\r\n          return true;\r\n        }\r\n      }\r\n\r\n      this.mouseActions.push(action);\r\n      return true;\r\n    });\r\n\r\n    _defineProperty(this, \"getOpFromAction\", (mouse, key) => {\r\n      let action;\r\n\r\n      for (let i = 0; i < this.mouseActions.length; i++) {\r\n        action = this.mouseActions[i];\r\n\r\n        if (action.mouse == mouse && action.key == key) {\r\n          return action.operation;\r\n        }\r\n      }\r\n\r\n      if (key) {\r\n        for (let i = 0; i < this.mouseActions.length; i++) {\r\n          action = this.mouseActions[i];\r\n\r\n          if (action.mouse == mouse && action.key == null) {\r\n            return action.operation;\r\n          }\r\n        }\r\n      }\r\n\r\n      return null;\r\n    });\r\n\r\n    _defineProperty(this, \"getOpStateFromAction\", (mouse, key) => {\r\n      let action;\r\n\r\n      for (let i = 0; i < this.mouseActions.length; i++) {\r\n        action = this.mouseActions[i];\r\n\r\n        if (action.mouse == mouse && action.key == key) {\r\n          return action.state;\r\n        }\r\n      }\r\n\r\n      if (key) {\r\n        for (let i = 0; i < this.mouseActions.length; i++) {\r\n          action = this.mouseActions[i];\r\n\r\n          if (action.mouse == mouse && action.key == null) {\r\n            return action.state;\r\n          }\r\n        }\r\n      }\r\n\r\n      return null;\r\n    });\r\n\r\n    _defineProperty(this, \"getAngle\", (p1, p2) => {\r\n      return Math.atan2(p2.clientY - p1.clientY, p2.clientX - p1.clientX) * 180 / Math.PI;\r\n    });\r\n\r\n    _defineProperty(this, \"updateTouchEvent\", event => {\r\n      for (let i = 0; i < this._touchCurrent.length; i++) {\r\n        if (this._touchCurrent[i].pointerId == event.pointerId) {\r\n          this._touchCurrent.splice(i, 1, event);\r\n\r\n          break;\r\n        }\r\n      }\r\n    });\r\n\r\n    _defineProperty(this, \"calculateAngularSpeed\", (p0, p1, t0, t1) => {\r\n      const s = p1 - p0;\r\n      const t = (t1 - t0) / 1000;\r\n\r\n      if (t == 0) {\r\n        return 0;\r\n      }\r\n\r\n      return s / t;\r\n    });\r\n\r\n    _defineProperty(this, \"calculatePointersDistance\", (p0, p1) => {\r\n      return Math.sqrt(Math.pow(p1.clientX - p0.clientX, 2) + Math.pow(p1.clientY - p0.clientY, 2));\r\n    });\r\n\r\n    _defineProperty(this, \"calculateRotationAxis\", (vec1, vec2) => {\r\n      this._rotationMatrix.extractRotation(this._cameraMatrixState);\r\n\r\n      this._quat.setFromRotationMatrix(this._rotationMatrix);\r\n\r\n      this._rotationAxis.crossVectors(vec1, vec2).applyQuaternion(this._quat);\r\n\r\n      return this._rotationAxis.normalize().clone();\r\n    });\r\n\r\n    _defineProperty(this, \"calculateTbRadius\", camera => {\r\n      const factor = 0.67;\r\n      const distance = camera.position.distanceTo(this._gizmos.position);\r\n\r\n      if (camera.type == 'PerspectiveCamera') {\r\n        const halfFovV = MathUtils.DEG2RAD * camera.fov * 0.5; //vertical fov/2 in radians\r\n\r\n        const halfFovH = Math.atan(camera.aspect * Math.tan(halfFovV)); //horizontal fov/2 in radians\r\n\r\n        return Math.tan(Math.min(halfFovV, halfFovH)) * distance * factor;\r\n      } else if (camera.type == 'OrthographicCamera') {\r\n        return Math.min(camera.top, camera.right) * factor;\r\n      }\r\n    });\r\n\r\n    _defineProperty(this, \"focus\", (point, size, amount = 1) => {\r\n      if (this.camera) {\r\n        const focusPoint = point.clone(); //move center of camera (along with gizmos) towards point of interest\r\n\r\n        focusPoint.sub(this._gizmos.position).multiplyScalar(amount);\r\n\r\n        this._translationMatrix.makeTranslation(focusPoint.x, focusPoint.y, focusPoint.z);\r\n\r\n        const gizmoStateTemp = this._gizmoMatrixState.clone();\r\n\r\n        this._gizmoMatrixState.premultiply(this._translationMatrix);\r\n\r\n        this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\r\n\r\n        const cameraStateTemp = this._cameraMatrixState.clone();\r\n\r\n        this._cameraMatrixState.premultiply(this._translationMatrix);\r\n\r\n        this._cameraMatrixState.decompose(this.camera.position, this.camera.quaternion, this.camera.scale); //apply zoom\r\n\r\n\r\n        if (this.enableZoom) {\r\n          this.applyTransformMatrix(this.applyScale(size, this._gizmos.position));\r\n        }\r\n\r\n        this._gizmoMatrixState.copy(gizmoStateTemp);\r\n\r\n        this._cameraMatrixState.copy(cameraStateTemp);\r\n      }\r\n    });\r\n\r\n    _defineProperty(this, \"drawGrid\", () => {\r\n      if (this.scene) {\r\n        var _this$camera9, _this$camera10;\r\n\r\n        const color = 0x888888;\r\n        const multiplier = 3;\r\n        let size, divisions, maxLength, tick;\r\n\r\n        if (((_this$camera9 = this.camera) === null || _this$camera9 === void 0 ? void 0 : _this$camera9.type) === 'OrthographicCamera') {\r\n          const width = this.camera.right - this.camera.left;\r\n          const height = this.camera.bottom - this.camera.top;\r\n          maxLength = Math.max(width, height);\r\n          tick = maxLength / 20;\r\n          size = maxLength / this.camera.zoom * multiplier;\r\n          divisions = size / tick * this.camera.zoom;\r\n        } else if (((_this$camera10 = this.camera) === null || _this$camera10 === void 0 ? void 0 : _this$camera10.type) === 'PerspectiveCamera') {\r\n          const distance = this.camera.position.distanceTo(this._gizmos.position);\r\n          const halfFovV = MathUtils.DEG2RAD * this.camera.fov * 0.5;\r\n          const halfFovH = Math.atan(this.camera.aspect * Math.tan(halfFovV));\r\n          maxLength = Math.tan(Math.max(halfFovV, halfFovH)) * distance * 2;\r\n          tick = maxLength / 20;\r\n          size = maxLength * multiplier;\r\n          divisions = size / tick;\r\n        }\r\n\r\n        if (this._grid == null && this.camera) {\r\n          this._grid = new GridHelper(size, divisions, color, color);\r\n\r\n          this._grid.position.copy(this._gizmos.position);\r\n\r\n          this._gridPosition.copy(this._grid.position);\r\n\r\n          this._grid.quaternion.copy(this.camera.quaternion);\r\n\r\n          this._grid.rotateX(Math.PI * 0.5);\r\n\r\n          this.scene.add(this._grid);\r\n        }\r\n      }\r\n    });\r\n\r\n    _defineProperty(this, \"connect\", domElement => {\r\n      // https://github.com/mrdoob/three.js/issues/20575\r\n      if (domElement === document) {\r\n        console.error('THREE.ArcballControls: \"document\" should not be used as the target \"domElement\". Please use \"renderer.domElement\" instead.');\r\n      }\r\n\r\n      this.domElement = domElement; // disables touch scroll\r\n      // touch-action needs to be defined for pointer events to work on mobile\r\n      // https://stackoverflow.com/a/48254578\r\n\r\n      this.domElement.style.touchAction = 'none';\r\n      this.domElement.addEventListener('contextmenu', this.onContextMenu);\r\n      this.domElement.addEventListener('pointerdown', this.onPointerDown);\r\n      this.domElement.addEventListener('pointercancel', this.onPointerCancel);\r\n      this.domElement.addEventListener('wheel', this.onWheel);\r\n    });\r\n\r\n    _defineProperty(this, \"dispose\", () => {\r\n      var _this$domElement, _this$domElement2, _this$domElement3, _this$domElement4, _this$scene;\r\n\r\n      if (this._animationId != -1) {\r\n        window.cancelAnimationFrame(this._animationId);\r\n      }\r\n\r\n      (_this$domElement = this.domElement) === null || _this$domElement === void 0 ? void 0 : _this$domElement.removeEventListener('pointerdown', this.onPointerDown);\r\n      (_this$domElement2 = this.domElement) === null || _this$domElement2 === void 0 ? void 0 : _this$domElement2.removeEventListener('pointercancel', this.onPointerCancel);\r\n      (_this$domElement3 = this.domElement) === null || _this$domElement3 === void 0 ? void 0 : _this$domElement3.removeEventListener('wheel', this.onWheel);\r\n      (_this$domElement4 = this.domElement) === null || _this$domElement4 === void 0 ? void 0 : _this$domElement4.removeEventListener('contextmenu', this.onContextMenu);\r\n      window.removeEventListener('pointermove', this.onPointerMove);\r\n      window.removeEventListener('pointerup', this.onPointerUp);\r\n      window.removeEventListener('resize', this.onWindowResize);\r\n      (_this$scene = this.scene) === null || _this$scene === void 0 ? void 0 : _this$scene.remove(this._gizmos);\r\n      this.disposeGrid();\r\n    });\r\n\r\n    _defineProperty(this, \"disposeGrid\", () => {\r\n      if (this._grid && this.scene) {\r\n        this.scene.remove(this._grid);\r\n        this._grid = null;\r\n      }\r\n    });\r\n\r\n    _defineProperty(this, \"easeOutCubic\", t => {\r\n      return 1 - Math.pow(1 - t, 3);\r\n    });\r\n\r\n    _defineProperty(this, \"activateGizmos\", isActive => {\r\n      for (const gizmo of this._gizmos.children) {\r\n        gizmo.material.setValues({\r\n          opacity: isActive ? 1 : 0.6\r\n        });\r\n      }\r\n    });\r\n\r\n    _defineProperty(this, \"getCursorNDC\", (cursorX, cursorY, canvas) => {\r\n      const canvasRect = canvas.getBoundingClientRect();\r\n\r\n      this._v2_1.setX((cursorX - canvasRect.left) / canvasRect.width * 2 - 1);\r\n\r\n      this._v2_1.setY((canvasRect.bottom - cursorY) / canvasRect.height * 2 - 1);\r\n\r\n      return this._v2_1.clone();\r\n    });\r\n\r\n    _defineProperty(this, \"getCursorPosition\", (cursorX, cursorY, canvas) => {\r\n      var _this$camera11;\r\n\r\n      this._v2_1.copy(this.getCursorNDC(cursorX, cursorY, canvas));\r\n\r\n      if (((_this$camera11 = this.camera) === null || _this$camera11 === void 0 ? void 0 : _this$camera11.type) === 'OrthographicCamera') {\r\n        this._v2_1.x *= (this.camera.right - this.camera.left) * 0.5;\r\n        this._v2_1.y *= (this.camera.top - this.camera.bottom) * 0.5;\r\n      }\r\n\r\n      return this._v2_1.clone();\r\n    });\r\n\r\n    _defineProperty(this, \"setCamera\", camera => {\r\n      if (camera) {\r\n        camera.lookAt(this.target);\r\n        camera.updateMatrix(); //setting state\r\n\r\n        if ((camera === null || camera === void 0 ? void 0 : camera.type) == 'PerspectiveCamera') {\r\n          this._fov0 = camera.fov;\r\n          this._fovState = camera.fov;\r\n        }\r\n\r\n        this._cameraMatrixState0.copy(camera.matrix);\r\n\r\n        this._cameraMatrixState.copy(this._cameraMatrixState0);\r\n\r\n        this._cameraProjectionState.copy(camera.projectionMatrix);\r\n\r\n        this._zoom0 = camera.zoom;\r\n        this._zoomState = this._zoom0;\r\n        this._initialNear = camera.near;\r\n        this._nearPos0 = camera.position.distanceTo(this.target) - camera.near;\r\n        this._nearPos = this._initialNear;\r\n        this._initialFar = camera.far;\r\n        this._farPos0 = camera.position.distanceTo(this.target) - camera.far;\r\n        this._farPos = this._initialFar;\r\n\r\n        this._up0.copy(camera.up);\r\n\r\n        this._upState.copy(camera.up);\r\n\r\n        this.camera = camera;\r\n        this.camera.updateProjectionMatrix(); //making gizmos\r\n\r\n        const tbRadius = this.calculateTbRadius(camera);\r\n\r\n        if (tbRadius !== undefined) {\r\n          this._tbRadius = tbRadius;\r\n        }\r\n\r\n        this.makeGizmos(this.target, this._tbRadius);\r\n      }\r\n    });\r\n\r\n    _defineProperty(this, \"makeGizmos\", (tbCenter, tbRadius) => {\r\n      // @ts-expect-error\r\n      const curve = new EllipseCurve(0, 0, tbRadius, tbRadius);\r\n      const points = curve.getPoints(this._curvePts); //geometry\r\n\r\n      const curveGeometry = new BufferGeometry().setFromPoints(points); //material\r\n\r\n      const curveMaterialX = new LineBasicMaterial({\r\n        color: 0xff8080,\r\n        fog: false,\r\n        transparent: true,\r\n        opacity: 0.6\r\n      });\r\n      const curveMaterialY = new LineBasicMaterial({\r\n        color: 0x80ff80,\r\n        fog: false,\r\n        transparent: true,\r\n        opacity: 0.6\r\n      });\r\n      const curveMaterialZ = new LineBasicMaterial({\r\n        color: 0x8080ff,\r\n        fog: false,\r\n        transparent: true,\r\n        opacity: 0.6\r\n      }); //line\r\n\r\n      const gizmoX = new Line(curveGeometry, curveMaterialX);\r\n      const gizmoY = new Line(curveGeometry, curveMaterialY);\r\n      const gizmoZ = new Line(curveGeometry, curveMaterialZ);\r\n      const rotation = Math.PI * 0.5;\r\n      gizmoX.rotation.x = rotation;\r\n      gizmoY.rotation.y = rotation; //setting state\r\n\r\n      this._gizmoMatrixState0.identity().setPosition(tbCenter);\r\n\r\n      this._gizmoMatrixState.copy(this._gizmoMatrixState0);\r\n\r\n      if (this.camera && this.camera.zoom != 1) {\r\n        //adapt gizmos size to camera zoom\r\n        const size = 1 / this.camera.zoom;\r\n\r\n        this._scaleMatrix.makeScale(size, size, size);\r\n\r\n        this._translationMatrix.makeTranslation(-tbCenter.x, -tbCenter.y, -tbCenter.z);\r\n\r\n        this._gizmoMatrixState.premultiply(this._translationMatrix).premultiply(this._scaleMatrix);\r\n\r\n        this._translationMatrix.makeTranslation(tbCenter.x, tbCenter.y, tbCenter.z);\r\n\r\n        this._gizmoMatrixState.premultiply(this._translationMatrix);\r\n      }\r\n\r\n      this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\r\n\r\n      this._gizmos.clear();\r\n\r\n      this._gizmos.add(gizmoX);\r\n\r\n      this._gizmos.add(gizmoY);\r\n\r\n      this._gizmos.add(gizmoZ);\r\n    });\r\n\r\n    _defineProperty(this, \"onFocusAnim\", (time, point, cameraMatrix, gizmoMatrix) => {\r\n      if (this._timeStart == -1) {\r\n        //animation start\r\n        this._timeStart = time;\r\n      }\r\n\r\n      if (this._state == STATE.ANIMATION_FOCUS) {\r\n        const deltaTime = time - this._timeStart;\r\n        const animTime = deltaTime / this.focusAnimationTime;\r\n\r\n        this._gizmoMatrixState.copy(gizmoMatrix);\r\n\r\n        if (animTime >= 1) {\r\n          //animation end\r\n          this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\r\n\r\n          this.focus(point, this.scaleFactor);\r\n          this._timeStart = -1;\r\n          this.updateTbState(STATE.IDLE, false);\r\n          this.activateGizmos(false);\r\n          this.dispatchEvent(_changeEvent);\r\n        } else {\r\n          const amount = this.easeOutCubic(animTime);\r\n          const size = 1 - amount + this.scaleFactor * amount;\r\n\r\n          this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\r\n\r\n          this.focus(point, size, amount);\r\n          this.dispatchEvent(_changeEvent);\r\n          const self = this;\r\n          this._animationId = window.requestAnimationFrame(function (t) {\r\n            self.onFocusAnim(t, point, cameraMatrix, gizmoMatrix.clone());\r\n          });\r\n        }\r\n      } else {\r\n        //interrupt animation\r\n        this._animationId = -1;\r\n        this._timeStart = -1;\r\n      }\r\n    });\r\n\r\n    _defineProperty(this, \"onRotationAnim\", (time, rotationAxis, w0) => {\r\n      if (this._timeStart == -1) {\r\n        //animation start\r\n        this._anglePrev = 0;\r\n        this._angleCurrent = 0;\r\n        this._timeStart = time;\r\n      }\r\n\r\n      if (this._state == STATE.ANIMATION_ROTATE) {\r\n        //w = w0 + alpha * t\r\n        const deltaTime = (time - this._timeStart) / 1000;\r\n        const w = w0 + -this.dampingFactor * deltaTime;\r\n\r\n        if (w > 0) {\r\n          //tetha = 0.5 * alpha * t^2 + w0 * t + tetha0\r\n          this._angleCurrent = 0.5 * -this.dampingFactor * Math.pow(deltaTime, 2) + w0 * deltaTime + 0;\r\n          this.applyTransformMatrix(this.rotate(rotationAxis, this._angleCurrent));\r\n          this.dispatchEvent(_changeEvent);\r\n          const self = this;\r\n          this._animationId = window.requestAnimationFrame(function (t) {\r\n            self.onRotationAnim(t, rotationAxis, w0);\r\n          });\r\n        } else {\r\n          this._animationId = -1;\r\n          this._timeStart = -1;\r\n          this.updateTbState(STATE.IDLE, false);\r\n          this.activateGizmos(false);\r\n          this.dispatchEvent(_changeEvent);\r\n        }\r\n      } else {\r\n        //interrupt animation\r\n        this._animationId = -1;\r\n        this._timeStart = -1;\r\n\r\n        if (this._state != STATE.ROTATE) {\r\n          this.activateGizmos(false);\r\n          this.dispatchEvent(_changeEvent);\r\n        }\r\n      }\r\n    });\r\n\r\n    _defineProperty(this, \"pan\", (p0, p1, adjust = false) => {\r\n      if (this.camera) {\r\n        const movement = p0.clone().sub(p1);\r\n\r\n        if (this.camera.type === 'OrthographicCamera') {\r\n          //adjust movement amount\r\n          movement.multiplyScalar(1 / this.camera.zoom);\r\n        }\r\n\r\n        if (this.camera.type === 'PerspectiveCamera' && adjust) {\r\n          //adjust movement amount\r\n          this._v3_1.setFromMatrixPosition(this._cameraMatrixState0); //camera's initial position\r\n\r\n\r\n          this._v3_2.setFromMatrixPosition(this._gizmoMatrixState0); //gizmo's initial position\r\n\r\n\r\n          const distanceFactor = this._v3_1.distanceTo(this._v3_2) / this.camera.position.distanceTo(this._gizmos.position);\r\n          movement.multiplyScalar(1 / distanceFactor);\r\n        }\r\n\r\n        this._v3_1.set(movement.x, movement.y, 0).applyQuaternion(this.camera.quaternion);\r\n\r\n        this._m4_1.makeTranslation(this._v3_1.x, this._v3_1.y, this._v3_1.z);\r\n\r\n        this.setTransformationMatrices(this._m4_1, this._m4_1);\r\n      }\r\n\r\n      return _transformation;\r\n    });\r\n\r\n    _defineProperty(this, \"reset\", () => {\r\n      if (this.camera) {\r\n        this.camera.zoom = this._zoom0;\r\n\r\n        if (this.camera.type === 'PerspectiveCamera') {\r\n          this.camera.fov = this._fov0;\r\n        }\r\n\r\n        this.camera.near = this._nearPos;\r\n        this.camera.far = this._farPos;\r\n\r\n        this._cameraMatrixState.copy(this._cameraMatrixState0);\r\n\r\n        this._cameraMatrixState.decompose(this.camera.position, this.camera.quaternion, this.camera.scale);\r\n\r\n        this.camera.up.copy(this._up0);\r\n        this.camera.updateMatrix();\r\n        this.camera.updateProjectionMatrix();\r\n\r\n        this._gizmoMatrixState.copy(this._gizmoMatrixState0);\r\n\r\n        this._gizmoMatrixState0.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\r\n\r\n        this._gizmos.updateMatrix();\r\n\r\n        const tbRadius = this.calculateTbRadius(this.camera);\r\n\r\n        if (tbRadius !== undefined) {\r\n          this._tbRadius = tbRadius;\r\n        }\r\n\r\n        this.makeGizmos(this._gizmos.position, this._tbRadius);\r\n        this.camera.lookAt(this._gizmos.position);\r\n        this.updateTbState(STATE.IDLE, false);\r\n        this.dispatchEvent(_changeEvent);\r\n      }\r\n    });\r\n\r\n    _defineProperty(this, \"rotate\", (axis, angle) => {\r\n      const point = this._gizmos.position; //rotation center\r\n\r\n      this._translationMatrix.makeTranslation(-point.x, -point.y, -point.z);\r\n\r\n      this._rotationMatrix.makeRotationAxis(axis, -angle); //rotate camera\r\n\r\n\r\n      this._m4_1.makeTranslation(point.x, point.y, point.z);\r\n\r\n      this._m4_1.multiply(this._rotationMatrix);\r\n\r\n      this._m4_1.multiply(this._translationMatrix);\r\n\r\n      this.setTransformationMatrices(this._m4_1);\r\n      return _transformation;\r\n    });\r\n\r\n    _defineProperty(this, \"copyState\", () => {\r\n      if (this.camera) {\r\n        var _this$camera12;\r\n\r\n        const state = JSON.stringify(((_this$camera12 = this.camera) === null || _this$camera12 === void 0 ? void 0 : _this$camera12.type) === 'OrthographicCamera' ? {\r\n          arcballState: {\r\n            cameraFar: this.camera.far,\r\n            cameraMatrix: this.camera.matrix,\r\n            cameraNear: this.camera.near,\r\n            cameraUp: this.camera.up,\r\n            cameraZoom: this.camera.zoom,\r\n            gizmoMatrix: this._gizmos.matrix\r\n          }\r\n        } : {\r\n          arcballState: {\r\n            cameraFar: this.camera.far,\r\n            cameraFov: this.camera.fov,\r\n            cameraMatrix: this.camera.matrix,\r\n            cameraNear: this.camera.near,\r\n            cameraUp: this.camera.up,\r\n            cameraZoom: this.camera.zoom,\r\n            gizmoMatrix: this._gizmos.matrix\r\n          }\r\n        });\r\n        navigator.clipboard.writeText(state);\r\n      }\r\n    });\r\n\r\n    _defineProperty(this, \"pasteState\", () => {\r\n      const self = this;\r\n      navigator.clipboard.readText().then(function resolved(value) {\r\n        self.setStateFromJSON(value);\r\n      });\r\n    });\r\n\r\n    _defineProperty(this, \"saveState\", () => {\r\n      if (!this.camera) return;\r\n\r\n      this._cameraMatrixState0.copy(this.camera.matrix);\r\n\r\n      this._gizmoMatrixState0.copy(this._gizmos.matrix);\r\n\r\n      this._nearPos = this.camera.near;\r\n      this._farPos = this.camera.far;\r\n      this._zoom0 = this.camera.zoom;\r\n\r\n      this._up0.copy(this.camera.up);\r\n\r\n      if (this.camera.type === 'PerspectiveCamera') {\r\n        this._fov0 = this.camera.fov;\r\n      }\r\n    });\r\n\r\n    _defineProperty(this, \"applyScale\", (size, point, scaleGizmos = true) => {\r\n      if (!this.camera) return;\r\n      const scalePoint = point.clone();\r\n      let sizeInverse = 1 / size;\r\n\r\n      if (this.camera.type === 'OrthographicCamera') {\r\n        //camera zoom\r\n        this.camera.zoom = this._zoomState;\r\n        this.camera.zoom *= size; //check min and max zoom\r\n\r\n        if (this.camera.zoom > this.maxZoom) {\r\n          this.camera.zoom = this.maxZoom;\r\n          sizeInverse = this._zoomState / this.maxZoom;\r\n        } else if (this.camera.zoom < this.minZoom) {\r\n          this.camera.zoom = this.minZoom;\r\n          sizeInverse = this._zoomState / this.minZoom;\r\n        }\r\n\r\n        this.camera.updateProjectionMatrix();\r\n\r\n        this._v3_1.setFromMatrixPosition(this._gizmoMatrixState); //gizmos position\r\n        //scale gizmos so they appear in the same spot having the same dimension\r\n\r\n\r\n        this._scaleMatrix.makeScale(sizeInverse, sizeInverse, sizeInverse);\r\n\r\n        this._translationMatrix.makeTranslation(-this._v3_1.x, -this._v3_1.y, -this._v3_1.z);\r\n\r\n        this._m4_2.makeTranslation(this._v3_1.x, this._v3_1.y, this._v3_1.z).multiply(this._scaleMatrix);\r\n\r\n        this._m4_2.multiply(this._translationMatrix); //move camera and gizmos to obtain pinch effect\r\n\r\n\r\n        scalePoint.sub(this._v3_1);\r\n        const amount = scalePoint.clone().multiplyScalar(sizeInverse);\r\n        scalePoint.sub(amount);\r\n\r\n        this._m4_1.makeTranslation(scalePoint.x, scalePoint.y, scalePoint.z);\r\n\r\n        this._m4_2.premultiply(this._m4_1);\r\n\r\n        this.setTransformationMatrices(this._m4_1, this._m4_2);\r\n        return _transformation;\r\n      }\r\n\r\n      if (this.camera.type === 'PerspectiveCamera') {\r\n        this._v3_1.setFromMatrixPosition(this._cameraMatrixState);\r\n\r\n        this._v3_2.setFromMatrixPosition(this._gizmoMatrixState); //move camera\r\n\r\n\r\n        let distance = this._v3_1.distanceTo(scalePoint);\r\n\r\n        let amount = distance - distance * sizeInverse; //check min and max distance\r\n\r\n        const newDistance = distance - amount;\r\n\r\n        if (newDistance < this.minDistance) {\r\n          sizeInverse = this.minDistance / distance;\r\n          amount = distance - distance * sizeInverse;\r\n        } else if (newDistance > this.maxDistance) {\r\n          sizeInverse = this.maxDistance / distance;\r\n          amount = distance - distance * sizeInverse;\r\n        }\r\n\r\n        let direction = scalePoint.clone().sub(this._v3_1).normalize().multiplyScalar(amount);\r\n\r\n        this._m4_1.makeTranslation(direction.x, direction.y, direction.z);\r\n\r\n        if (scaleGizmos) {\r\n          //scale gizmos so they appear in the same spot having the same dimension\r\n          const pos = this._v3_2;\r\n          distance = pos.distanceTo(scalePoint);\r\n          amount = distance - distance * sizeInverse;\r\n          direction = scalePoint.clone().sub(this._v3_2).normalize().multiplyScalar(amount);\r\n\r\n          this._translationMatrix.makeTranslation(pos.x, pos.y, pos.z);\r\n\r\n          this._scaleMatrix.makeScale(sizeInverse, sizeInverse, sizeInverse);\r\n\r\n          this._m4_2.makeTranslation(direction.x, direction.y, direction.z).multiply(this._translationMatrix);\r\n\r\n          this._m4_2.multiply(this._scaleMatrix);\r\n\r\n          this._translationMatrix.makeTranslation(-pos.x, -pos.y, -pos.z);\r\n\r\n          this._m4_2.multiply(this._translationMatrix);\r\n\r\n          this.setTransformationMatrices(this._m4_1, this._m4_2);\r\n        } else {\r\n          this.setTransformationMatrices(this._m4_1);\r\n        }\r\n\r\n        return _transformation;\r\n      }\r\n    });\r\n\r\n    _defineProperty(this, \"setFov\", value => {\r\n      var _this$camera13;\r\n\r\n      if (((_this$camera13 = this.camera) === null || _this$camera13 === void 0 ? void 0 : _this$camera13.type) === 'PerspectiveCamera') {\r\n        this.camera.fov = MathUtils.clamp(value, this.minFov, this.maxFov);\r\n        this.camera.updateProjectionMatrix();\r\n      }\r\n    });\r\n\r\n    _defineProperty(this, \"setTarget\", (x, y, z) => {\r\n      if (this.camera) {\r\n        this.target.set(x, y, z);\r\n\r\n        this._gizmos.position.set(x, y, z); //for correct radius calculation\r\n\r\n\r\n        const tbRadius = this.calculateTbRadius(this.camera);\r\n\r\n        if (tbRadius !== undefined) {\r\n          this._tbRadius = tbRadius;\r\n        }\r\n\r\n        this.makeGizmos(this.target, this._tbRadius);\r\n        this.camera.lookAt(this.target);\r\n      }\r\n    });\r\n\r\n    _defineProperty(this, \"zRotate\", (point, angle) => {\r\n      this._rotationMatrix.makeRotationAxis(this._rotationAxis, angle);\r\n\r\n      this._translationMatrix.makeTranslation(-point.x, -point.y, -point.z);\r\n\r\n      this._m4_1.makeTranslation(point.x, point.y, point.z);\r\n\r\n      this._m4_1.multiply(this._rotationMatrix);\r\n\r\n      this._m4_1.multiply(this._translationMatrix);\r\n\r\n      this._v3_1.setFromMatrixPosition(this._gizmoMatrixState).sub(point); //vector from rotation center to gizmos position\r\n\r\n\r\n      this._v3_2.copy(this._v3_1).applyAxisAngle(this._rotationAxis, angle); //apply rotation\r\n\r\n\r\n      this._v3_2.sub(this._v3_1);\r\n\r\n      this._m4_2.makeTranslation(this._v3_2.x, this._v3_2.y, this._v3_2.z);\r\n\r\n      this.setTransformationMatrices(this._m4_1, this._m4_2);\r\n      return _transformation;\r\n    });\r\n\r\n    _defineProperty(this, \"unprojectOnObj\", (cursor, camera) => {\r\n      if (!this.scene) return null;\r\n      const raycaster = new Raycaster();\r\n      raycaster.near = camera.near;\r\n      raycaster.far = camera.far;\r\n      raycaster.setFromCamera(cursor, camera);\r\n      const intersect = raycaster.intersectObjects(this.scene.children, true);\r\n\r\n      for (let i = 0; i < intersect.length; i++) {\r\n        if (intersect[i].object.uuid != this._gizmos.uuid && intersect[i].face) {\r\n          return intersect[i].point.clone();\r\n        }\r\n      }\r\n\r\n      return null;\r\n    });\r\n\r\n    _defineProperty(this, \"unprojectOnTbSurface\", (camera, cursorX, cursorY, canvas, tbRadius) => {\r\n      if (camera.type == 'OrthographicCamera') {\r\n        this._v2_1.copy(this.getCursorPosition(cursorX, cursorY, canvas));\r\n\r\n        this._v3_1.set(this._v2_1.x, this._v2_1.y, 0);\r\n\r\n        const x2 = Math.pow(this._v2_1.x, 2);\r\n        const y2 = Math.pow(this._v2_1.y, 2);\r\n        const r2 = Math.pow(this._tbRadius, 2);\r\n\r\n        if (x2 + y2 <= r2 * 0.5) {\r\n          //intersection with sphere\r\n          this._v3_1.setZ(Math.sqrt(r2 - (x2 + y2)));\r\n        } else {\r\n          //intersection with hyperboloid\r\n          this._v3_1.setZ(r2 * 0.5 / Math.sqrt(x2 + y2));\r\n        }\r\n\r\n        return this._v3_1;\r\n      }\r\n\r\n      if (camera.type == 'PerspectiveCamera') {\r\n        //unproject cursor on the near plane\r\n        this._v2_1.copy(this.getCursorNDC(cursorX, cursorY, canvas));\r\n\r\n        this._v3_1.set(this._v2_1.x, this._v2_1.y, -1);\r\n\r\n        this._v3_1.applyMatrix4(camera.projectionMatrixInverse);\r\n\r\n        const rayDir = this._v3_1.clone().normalize(); //unprojected ray direction\r\n\r\n\r\n        const cameraGizmoDistance = camera.position.distanceTo(this._gizmos.position);\r\n        const radius2 = Math.pow(tbRadius, 2); //\t  camera\r\n        //\t\t|\\\r\n        //\t\t| \\\r\n        //\t\t|  \\\r\n        //\th\t|\t\\\r\n        //\t\t| \t \\\r\n        //\t\t| \t  \\\r\n        //\t_ _ | _ _ _\\ _ _  near plane\r\n        //\t\t\tl\r\n\r\n        const h = this._v3_1.z;\r\n        const l = Math.sqrt(Math.pow(this._v3_1.x, 2) + Math.pow(this._v3_1.y, 2));\r\n\r\n        if (l == 0) {\r\n          //ray aligned with camera\r\n          rayDir.set(this._v3_1.x, this._v3_1.y, tbRadius);\r\n          return rayDir;\r\n        }\r\n\r\n        const m = h / l;\r\n        const q = cameraGizmoDistance;\r\n        /*\r\n         * calculate intersection point between unprojected ray and trackball surface\r\n         *|y = m * x + q\r\n         *|x^2 + y^2 = r^2\r\n         *\r\n         * (m^2 + 1) * x^2 + (2 * m * q) * x + q^2 - r^2 = 0\r\n         */\r\n\r\n        let a = Math.pow(m, 2) + 1;\r\n        let b = 2 * m * q;\r\n        let c = Math.pow(q, 2) - radius2;\r\n        let delta = Math.pow(b, 2) - 4 * a * c;\r\n\r\n        if (delta >= 0) {\r\n          //intersection with sphere\r\n          this._v2_1.setX((-b - Math.sqrt(delta)) / (2 * a));\r\n\r\n          this._v2_1.setY(m * this._v2_1.x + q);\r\n\r\n          const angle = MathUtils.RAD2DEG * this._v2_1.angle();\r\n\r\n          if (angle >= 45) {\r\n            //if angle between intersection point and X' axis is >= 45°, return that point\r\n            //otherwise, calculate intersection point with hyperboloid\r\n            const rayLength = Math.sqrt(Math.pow(this._v2_1.x, 2) + Math.pow(cameraGizmoDistance - this._v2_1.y, 2));\r\n            rayDir.multiplyScalar(rayLength);\r\n            rayDir.z += cameraGizmoDistance;\r\n            return rayDir;\r\n          }\r\n        } //intersection with hyperboloid\r\n\r\n        /*\r\n         *|y = m * x + q\r\n         *|y = (1 / x) * (r^2 / 2)\r\n         *\r\n         * m * x^2 + q * x - r^2 / 2 = 0\r\n         */\r\n\r\n\r\n        a = m;\r\n        b = q;\r\n        c = -radius2 * 0.5;\r\n        delta = Math.pow(b, 2) - 4 * a * c;\r\n\r\n        this._v2_1.setX((-b - Math.sqrt(delta)) / (2 * a));\r\n\r\n        this._v2_1.setY(m * this._v2_1.x + q);\r\n\r\n        const rayLength = Math.sqrt(Math.pow(this._v2_1.x, 2) + Math.pow(cameraGizmoDistance - this._v2_1.y, 2));\r\n        rayDir.multiplyScalar(rayLength);\r\n        rayDir.z += cameraGizmoDistance;\r\n        return rayDir;\r\n      }\r\n    });\r\n\r\n    _defineProperty(this, \"unprojectOnTbPlane\", (camera, cursorX, cursorY, canvas, initialDistance = false) => {\r\n      if (camera.type == 'OrthographicCamera') {\r\n        this._v2_1.copy(this.getCursorPosition(cursorX, cursorY, canvas));\r\n\r\n        this._v3_1.set(this._v2_1.x, this._v2_1.y, 0);\r\n\r\n        return this._v3_1.clone();\r\n      }\r\n\r\n      if (camera.type == 'PerspectiveCamera') {\r\n        this._v2_1.copy(this.getCursorNDC(cursorX, cursorY, canvas)); //unproject cursor on the near plane\r\n\r\n\r\n        this._v3_1.set(this._v2_1.x, this._v2_1.y, -1);\r\n\r\n        this._v3_1.applyMatrix4(camera.projectionMatrixInverse);\r\n\r\n        const rayDir = this._v3_1.clone().normalize(); //unprojected ray direction\r\n        //\t  camera\r\n        //\t\t|\\\r\n        //\t\t| \\\r\n        //\t\t|  \\\r\n        //\th\t|\t\\\r\n        //\t\t| \t \\\r\n        //\t\t| \t  \\\r\n        //\t_ _ | _ _ _\\ _ _  near plane\r\n        //\t\t\tl\r\n\r\n\r\n        const h = this._v3_1.z;\r\n        const l = Math.sqrt(Math.pow(this._v3_1.x, 2) + Math.pow(this._v3_1.y, 2));\r\n        let cameraGizmoDistance;\r\n\r\n        if (initialDistance) {\r\n          cameraGizmoDistance = this._v3_1.setFromMatrixPosition(this._cameraMatrixState0).distanceTo(this._v3_2.setFromMatrixPosition(this._gizmoMatrixState0));\r\n        } else {\r\n          cameraGizmoDistance = camera.position.distanceTo(this._gizmos.position);\r\n        }\r\n        /*\r\n         * calculate intersection point between unprojected ray and the plane\r\n         *|y = mx + q\r\n         *|y = 0\r\n         *\r\n         * x = -q/m\r\n         */\r\n\r\n\r\n        if (l == 0) {\r\n          //ray aligned with camera\r\n          rayDir.set(0, 0, 0);\r\n          return rayDir;\r\n        }\r\n\r\n        const m = h / l;\r\n        const q = cameraGizmoDistance;\r\n        const x = -q / m;\r\n        const rayLength = Math.sqrt(Math.pow(q, 2) + Math.pow(x, 2));\r\n        rayDir.multiplyScalar(rayLength);\r\n        rayDir.z = 0;\r\n        return rayDir;\r\n      }\r\n    });\r\n\r\n    _defineProperty(this, \"updateMatrixState\", () => {\r\n      if (!this.camera) return; //update camera and gizmos state\r\n\r\n      this._cameraMatrixState.copy(this.camera.matrix);\r\n\r\n      this._gizmoMatrixState.copy(this._gizmos.matrix);\r\n\r\n      if (this.camera.type === 'OrthographicCamera') {\r\n        this._cameraProjectionState.copy(this.camera.projectionMatrix);\r\n\r\n        this.camera.updateProjectionMatrix();\r\n        this._zoomState = this.camera.zoom;\r\n      }\r\n\r\n      if (this.camera.type === 'PerspectiveCamera') {\r\n        this._fovState = this.camera.fov;\r\n      }\r\n    });\r\n\r\n    _defineProperty(this, \"updateTbState\", (newState, updateMatrices) => {\r\n      this._state = newState;\r\n\r\n      if (updateMatrices) {\r\n        this.updateMatrixState();\r\n      }\r\n    });\r\n\r\n    _defineProperty(this, \"update\", () => {\r\n      const EPS = 0.000001; // Update target and gizmos state\r\n\r\n      if (!this.target.equals(this._currentTarget) && this.camera) {\r\n        this._gizmos.position.set(this.target.x, this.target.y, this.target.z); //for correct radius calculation\r\n\r\n\r\n        const tbRadius = this.calculateTbRadius(this.camera);\r\n\r\n        if (tbRadius !== undefined) {\r\n          this._tbRadius = tbRadius;\r\n        }\r\n\r\n        this.makeGizmos(this.target, this._tbRadius);\r\n\r\n        this._currentTarget.copy(this.target);\r\n      }\r\n\r\n      if (!this.camera) return; //check min/max parameters\r\n\r\n      if (this.camera.type === 'OrthographicCamera') {\r\n        //check zoom\r\n        if (this.camera.zoom > this.maxZoom || this.camera.zoom < this.minZoom) {\r\n          const newZoom = MathUtils.clamp(this.camera.zoom, this.minZoom, this.maxZoom);\r\n          this.applyTransformMatrix(this.applyScale(newZoom / this.camera.zoom, this._gizmos.position, true));\r\n        }\r\n      }\r\n\r\n      if (this.camera.type === 'PerspectiveCamera') {\r\n        //check distance\r\n        const distance = this.camera.position.distanceTo(this._gizmos.position);\r\n\r\n        if (distance > this.maxDistance + EPS || distance < this.minDistance - EPS) {\r\n          const newDistance = MathUtils.clamp(distance, this.minDistance, this.maxDistance);\r\n          this.applyTransformMatrix(this.applyScale(newDistance / distance, this._gizmos.position));\r\n          this.updateMatrixState();\r\n        } //check fov\r\n\r\n\r\n        if (this.camera.fov < this.minFov || this.camera.fov > this.maxFov) {\r\n          this.camera.fov = MathUtils.clamp(this.camera.fov, this.minFov, this.maxFov);\r\n          this.camera.updateProjectionMatrix();\r\n        }\r\n\r\n        const oldRadius = this._tbRadius;\r\n        const tbRadius = this.calculateTbRadius(this.camera);\r\n\r\n        if (tbRadius !== undefined) {\r\n          this._tbRadius = tbRadius;\r\n        }\r\n\r\n        if (oldRadius < this._tbRadius - EPS || oldRadius > this._tbRadius + EPS) {\r\n          const scale = (this._gizmos.scale.x + this._gizmos.scale.y + this._gizmos.scale.z) / 3;\r\n          const newRadius = this._tbRadius / scale; // @ts-expect-error\r\n\r\n          const curve = new EllipseCurve(0, 0, newRadius, newRadius);\r\n          const points = curve.getPoints(this._curvePts);\r\n          const curveGeometry = new BufferGeometry().setFromPoints(points);\r\n\r\n          for (const gizmo in this._gizmos.children) {\r\n            const child = this._gizmos.children[gizmo];\r\n            child.geometry = curveGeometry;\r\n          }\r\n        }\r\n      }\r\n\r\n      this.camera.lookAt(this._gizmos.position);\r\n    });\r\n\r\n    _defineProperty(this, \"setStateFromJSON\", json => {\r\n      const state = JSON.parse(json);\r\n\r\n      if (state.arcballState && this.camera) {\r\n        this._cameraMatrixState.fromArray(state.arcballState.cameraMatrix.elements);\r\n\r\n        this._cameraMatrixState.decompose(this.camera.position, this.camera.quaternion, this.camera.scale);\r\n\r\n        this.camera.up.copy(state.arcballState.cameraUp);\r\n        this.camera.near = state.arcballState.cameraNear;\r\n        this.camera.far = state.arcballState.cameraFar;\r\n        this.camera.zoom = state.arcballState.cameraZoom;\r\n\r\n        if (this.camera.type === 'PerspectiveCamera') {\r\n          this.camera.fov = state.arcballState.cameraFov;\r\n        }\r\n\r\n        this._gizmoMatrixState.fromArray(state.arcballState.gizmoMatrix.elements);\r\n\r\n        this._gizmoMatrixState.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\r\n\r\n        this.camera.updateMatrix();\r\n        this.camera.updateProjectionMatrix();\r\n\r\n        this._gizmos.updateMatrix();\r\n\r\n        const tbRadius = this.calculateTbRadius(this.camera);\r\n\r\n        if (tbRadius !== undefined) {\r\n          this._tbRadius = tbRadius;\r\n        }\r\n\r\n        const gizmoTmp = new Matrix4().copy(this._gizmoMatrixState0);\r\n        this.makeGizmos(this._gizmos.position, this._tbRadius);\r\n\r\n        this._gizmoMatrixState0.copy(gizmoTmp);\r\n\r\n        this.camera.lookAt(this._gizmos.position);\r\n        this.updateTbState(STATE.IDLE, false);\r\n        this.dispatchEvent(_changeEvent);\r\n      }\r\n    });\r\n\r\n    this.camera = null;\r\n    this.domElement = _domElement;\r\n    this.scene = scene;\r\n    this.mouseActions = [];\r\n    this._mouseOp = null; //global vectors and matrices that are used in some operations to avoid creating new objects every time (e.g. every time cursor moves)\r\n\r\n    this._v2_1 = new Vector2();\r\n    this._v3_1 = new Vector3();\r\n    this._v3_2 = new Vector3();\r\n    this._m4_1 = new Matrix4();\r\n    this._m4_2 = new Matrix4();\r\n    this._quat = new Quaternion(); //transformation matrices\r\n\r\n    this._translationMatrix = new Matrix4(); //matrix for translation operation\r\n\r\n    this._rotationMatrix = new Matrix4(); //matrix for rotation operation\r\n\r\n    this._scaleMatrix = new Matrix4(); //matrix for scaling operation\r\n\r\n    this._rotationAxis = new Vector3(); //axis for rotate operation\r\n    //camera state\r\n\r\n    this._cameraMatrixState = new Matrix4();\r\n    this._cameraProjectionState = new Matrix4();\r\n    this._fovState = 1;\r\n    this._upState = new Vector3();\r\n    this._zoomState = 1;\r\n    this._nearPos = 0;\r\n    this._farPos = 0;\r\n    this._gizmoMatrixState = new Matrix4(); //initial values\r\n\r\n    this._up0 = new Vector3();\r\n    this._zoom0 = 1;\r\n    this._fov0 = 0;\r\n    this._initialNear = 0;\r\n    this._nearPos0 = 0;\r\n    this._initialFar = 0;\r\n    this._farPos0 = 0;\r\n    this._cameraMatrixState0 = new Matrix4();\r\n    this._gizmoMatrixState0 = new Matrix4(); //pointers array\r\n\r\n    this._button = -1;\r\n    this._touchStart = [];\r\n    this._touchCurrent = [];\r\n    this._input = INPUT.NONE; //two fingers touch interaction\r\n\r\n    this._switchSensibility = 32; //minimum movement to be performed to fire single pan start after the second finger has been released\r\n\r\n    this._startFingerDistance = 0; //distance between two fingers\r\n\r\n    this._currentFingerDistance = 0;\r\n    this._startFingerRotation = 0; //amount of rotation performed with two fingers\r\n\r\n    this._currentFingerRotation = 0; //double tap\r\n\r\n    this._devPxRatio = 0;\r\n    this._downValid = true;\r\n    this._nclicks = 0;\r\n    this._downEvents = [];\r\n    this._clickStart = 0; //first click time\r\n\r\n    this._maxDownTime = 250;\r\n    this._maxInterval = 300;\r\n    this._posThreshold = 24;\r\n    this._movementThreshold = 24; //cursor positions\r\n\r\n    this._currentCursorPosition = new Vector3();\r\n    this._startCursorPosition = new Vector3(); //grid\r\n\r\n    this._grid = null; //grid to be visualized during pan operation\r\n\r\n    this._gridPosition = new Vector3(); //gizmos\r\n\r\n    this._gizmos = new Group();\r\n    this._curvePts = 128; //animations\r\n\r\n    this._timeStart = -1; //initial time\r\n\r\n    this._animationId = -1; //focus animation\r\n\r\n    this.focusAnimationTime = 500; //duration of focus animation in ms\r\n    //rotate animation\r\n\r\n    this._timePrev = 0; //time at which previous rotate operation has been detected\r\n\r\n    this._timeCurrent = 0; //time at which current rotate operation has been detected\r\n\r\n    this._anglePrev = 0; //angle of previous rotation\r\n\r\n    this._angleCurrent = 0; //angle of current rotation\r\n\r\n    this._cursorPosPrev = new Vector3(); //cursor position when previous rotate operation has been detected\r\n\r\n    this._cursorPosCurr = new Vector3(); //cursor position when current rotate operation has been detected\r\n\r\n    this._wPrev = 0; //angular velocity of the previous rotate operation\r\n\r\n    this._wCurr = 0; //angular velocity of the current rotate operation\r\n    //parameters\r\n\r\n    this.adjustNearFar = false;\r\n    this.scaleFactor = 1.1; //zoom/distance multiplier\r\n\r\n    this.dampingFactor = 25;\r\n    this.wMax = 20; //maximum angular velocity allowed\r\n\r\n    this.enableAnimations = true; //if animations should be performed\r\n\r\n    this.enableGrid = false; //if grid should be showed during pan operation\r\n\r\n    this.cursorZoom = false; //if wheel zoom should be cursor centered\r\n\r\n    this.minFov = 5;\r\n    this.maxFov = 90;\r\n    this.enabled = true;\r\n    this.enablePan = true;\r\n    this.enableRotate = true;\r\n    this.enableZoom = true;\r\n    this.minDistance = 0;\r\n    this.maxDistance = Infinity;\r\n    this.minZoom = 0;\r\n    this.maxZoom = Infinity; //trackball parameters\r\n\r\n    this.target = new Vector3(0, 0, 0);\r\n    this._currentTarget = new Vector3(0, 0, 0);\r\n    this._tbRadius = 1; //FSA\r\n\r\n    this._state = STATE.IDLE;\r\n    this.setCamera(_camera);\r\n\r\n    if (this.scene) {\r\n      this.scene.add(this._gizmos);\r\n    }\r\n\r\n    this._devPxRatio = window.devicePixelRatio;\r\n    this.initializeMouseActions();\r\n    if (this.domElement) this.connect(this.domElement);\r\n    window.addEventListener('resize', this.onWindowResize);\r\n  } //listeners\r\n\r\n\r\n  /**\r\n   * Apply a transformation matrix, to the camera and gizmos\r\n   * @param {Object} transformation Object containing matrices to apply to camera and gizmos\r\n   */\r\n  applyTransformMatrix(transformation) {\r\n    if (transformation !== null && transformation !== void 0 && transformation.camera && this.camera) {\r\n      this._m4_1.copy(this._cameraMatrixState).premultiply(transformation.camera);\r\n\r\n      this._m4_1.decompose(this.camera.position, this.camera.quaternion, this.camera.scale);\r\n\r\n      this.camera.updateMatrix(); //update camera up vector\r\n\r\n      if (this._state == STATE.ROTATE || this._state == STATE.ZROTATE || this._state == STATE.ANIMATION_ROTATE) {\r\n        this.camera.up.copy(this._upState).applyQuaternion(this.camera.quaternion);\r\n      }\r\n    }\r\n\r\n    if (transformation !== null && transformation !== void 0 && transformation.gizmos) {\r\n      this._m4_1.copy(this._gizmoMatrixState).premultiply(transformation.gizmos);\r\n\r\n      this._m4_1.decompose(this._gizmos.position, this._gizmos.quaternion, this._gizmos.scale);\r\n\r\n      this._gizmos.updateMatrix();\r\n    }\r\n\r\n    if ((this._state == STATE.SCALE || this._state == STATE.FOCUS || this._state == STATE.ANIMATION_FOCUS) && this.camera) {\r\n      const tbRadius = this.calculateTbRadius(this.camera);\r\n\r\n      if (tbRadius !== undefined) {\r\n        this._tbRadius = tbRadius;\r\n      }\r\n\r\n      if (this.adjustNearFar) {\r\n        const cameraDistance = this.camera.position.distanceTo(this._gizmos.position);\r\n        const bb = new Box3();\r\n        bb.setFromObject(this._gizmos);\r\n        const sphere = new Sphere();\r\n        bb.getBoundingSphere(sphere);\r\n        const adjustedNearPosition = Math.max(this._nearPos0, sphere.radius + sphere.center.length());\r\n        const regularNearPosition = cameraDistance - this._initialNear;\r\n        const minNearPos = Math.min(adjustedNearPosition, regularNearPosition);\r\n        this.camera.near = cameraDistance - minNearPos;\r\n        const adjustedFarPosition = Math.min(this._farPos0, -sphere.radius + sphere.center.length());\r\n        const regularFarPosition = cameraDistance - this._initialFar;\r\n        const minFarPos = Math.min(adjustedFarPosition, regularFarPosition);\r\n        this.camera.far = cameraDistance - minFarPos;\r\n        this.camera.updateProjectionMatrix();\r\n      } else {\r\n        let update = false;\r\n\r\n        if (this.camera.near != this._initialNear) {\r\n          this.camera.near = this._initialNear;\r\n          update = true;\r\n        }\r\n\r\n        if (this.camera.far != this._initialFar) {\r\n          this.camera.far = this._initialFar;\r\n          update = true;\r\n        }\r\n\r\n        if (update) {\r\n          this.camera.updateProjectionMatrix();\r\n        }\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * Calculate the angular speed\r\n   * @param {Number} p0 Position at t0\r\n   * @param {Number} p1 Position at t1\r\n   * @param {Number} t0 Initial time in milliseconds\r\n   * @param {Number} t1 Ending time in milliseconds\r\n   */\r\n\r\n\r\n  /**\r\n   * Set gizmos visibility\r\n   * @param {Boolean} value Value of gizmos visibility\r\n   */\r\n  setGizmosVisible(value) {\r\n    this._gizmos.visible = value;\r\n    this.dispatchEvent(_changeEvent);\r\n  }\r\n  /**\r\n   * Creates the rotation gizmos matching trackball center and radius\r\n   * @param {Vector3} tbCenter The trackball center\r\n   * @param {number} tbRadius The trackball radius\r\n   */\r\n\r\n\r\n  /**\r\n   * Set values in transformation object\r\n   * @param {Matrix4} camera Transformation to be applied to the camera\r\n   * @param {Matrix4} gizmos Transformation to be applied to gizmos\r\n   */\r\n  setTransformationMatrices(camera = null, gizmos = null) {\r\n    if (camera) {\r\n      if (_transformation.camera) {\r\n        _transformation.camera.copy(camera);\r\n      } else {\r\n        _transformation.camera = camera.clone();\r\n      }\r\n    } else {\r\n      _transformation.camera = null;\r\n    }\r\n\r\n    if (gizmos) {\r\n      if (_transformation.gizmos) {\r\n        _transformation.gizmos.copy(gizmos);\r\n      } else {\r\n        _transformation.gizmos = gizmos.clone();\r\n      }\r\n    } else {\r\n      _transformation.gizmos = null;\r\n    }\r\n  }\r\n  /**\r\n   * Rotate camera around its direction axis passing by a given point by a given angle\r\n   * @param {Vector3} point The point where the rotation axis is passing trough\r\n   * @param {Number} angle Angle in radians\r\n   * @returns The computed transormation matix\r\n   */\r\n\r\n\r\n}\r\n\r\nexport { ArcballControls };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}