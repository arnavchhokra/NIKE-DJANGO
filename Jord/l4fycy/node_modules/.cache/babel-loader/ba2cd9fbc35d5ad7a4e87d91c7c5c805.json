{"ast":null,"code":"import _slicedToArray from \"D:/Github/NIKE-DJANGO/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { Vector3, Plane, Line3, Sphere, Box3, Triangle } from 'three';\nimport { Capsule } from './Capsule.js';\n\nvar Octree = function () {\n  var _v1 = new Vector3();\n\n  var _v2 = new Vector3();\n\n  var _plane = new Plane();\n\n  var _line1 = new Line3();\n\n  var _line2 = new Line3();\n\n  var _sphere = new Sphere();\n\n  var _capsule = new Capsule();\n\n  function Octree(box) {\n    this.triangles = [];\n    this.box = box;\n    this.subTrees = [];\n  }\n\n  Object.assign(Octree.prototype, {\n    addTriangle: function addTriangle(triangle) {\n      if (!this.bounds) this.bounds = new Box3();\n      this.bounds.min.x = Math.min(this.bounds.min.x, triangle.a.x, triangle.b.x, triangle.c.x);\n      this.bounds.min.y = Math.min(this.bounds.min.y, triangle.a.y, triangle.b.y, triangle.c.y);\n      this.bounds.min.z = Math.min(this.bounds.min.z, triangle.a.z, triangle.b.z, triangle.c.z);\n      this.bounds.max.x = Math.max(this.bounds.max.x, triangle.a.x, triangle.b.x, triangle.c.x);\n      this.bounds.max.y = Math.max(this.bounds.max.y, triangle.a.y, triangle.b.y, triangle.c.y);\n      this.bounds.max.z = Math.max(this.bounds.max.z, triangle.a.z, triangle.b.z, triangle.c.z);\n      this.triangles.push(triangle);\n      return this;\n    },\n    calcBox: function calcBox() {\n      this.box = this.bounds.clone(); // offset small ammount to account for regular grid\n\n      this.box.min.x -= 0.01;\n      this.box.min.y -= 0.01;\n      this.box.min.z -= 0.01;\n      return this;\n    },\n    split: function split(level) {\n      if (!this.box) return;\n\n      var subTrees = [],\n          halfsize = _v2.copy(this.box.max).sub(this.box.min).multiplyScalar(0.5),\n          box,\n          v,\n          triangle;\n\n      for (var x = 0; x < 2; x++) {\n        for (var y = 0; y < 2; y++) {\n          for (var z = 0; z < 2; z++) {\n            box = new Box3();\n            v = _v1.set(x, y, z);\n            box.min.copy(this.box.min).add(v.multiply(halfsize));\n            box.max.copy(box.min).add(halfsize);\n            subTrees.push(new Octree(box));\n          }\n        }\n      }\n\n      while (triangle = this.triangles.pop()) {\n        for (var i = 0; i < subTrees.length; i++) {\n          if (subTrees[i].box.intersectsTriangle(triangle)) {\n            subTrees[i].triangles.push(triangle);\n          }\n        }\n      }\n\n      for (var _i = 0; _i < subTrees.length; _i++) {\n        var len = subTrees[_i].triangles.length;\n\n        if (len > 8 && level < 16) {\n          subTrees[_i].split(level + 1);\n        }\n\n        if (len != 0) {\n          this.subTrees.push(subTrees[_i]);\n        }\n      }\n\n      return this;\n    },\n    build: function build() {\n      this.calcBox();\n      this.split(0);\n      return this;\n    },\n    getRayTriangles: function getRayTriangles(ray, triangles) {\n      for (var i = 0; i < this.subTrees.length; i++) {\n        var subTree = this.subTrees[i];\n        if (!ray.intersectsBox(subTree.box)) continue;\n\n        if (subTree.triangles.length > 0) {\n          for (var j = 0; j < subTree.triangles.length; j++) {\n            if (triangles.indexOf(subTree.triangles[j]) === -1) triangles.push(subTree.triangles[j]);\n          }\n        } else {\n          subTree.getRayTriangles(ray, triangles);\n        }\n      }\n\n      return triangles;\n    },\n    triangleCapsuleIntersect: function triangleCapsuleIntersect(capsule, triangle) {\n      var point1, point2, line1, line2;\n      triangle.getPlane(_plane);\n      var d1 = _plane.distanceToPoint(capsule.start) - capsule.radius;\n      var d2 = _plane.distanceToPoint(capsule.end) - capsule.radius;\n\n      if (d1 > 0 && d2 > 0 || d1 < -capsule.radius && d2 < -capsule.radius) {\n        return false;\n      }\n\n      var delta = Math.abs(d1 / (Math.abs(d1) + Math.abs(d2)));\n\n      var intersectPoint = _v1.copy(capsule.start).lerp(capsule.end, delta);\n\n      if (triangle.containsPoint(intersectPoint)) {\n        return {\n          normal: _plane.normal.clone(),\n          point: intersectPoint.clone(),\n          depth: Math.abs(Math.min(d1, d2))\n        };\n      }\n\n      var r2 = capsule.radius * capsule.radius;\n      line1 = _line1.set(capsule.start, capsule.end);\n      var lines = [[triangle.a, triangle.b], [triangle.b, triangle.c], [triangle.c, triangle.a]];\n\n      for (var i = 0; i < lines.length; i++) {\n        line2 = _line2.set(lines[i][0], lines[i][1]);\n\n        var _capsule$lineLineMini = capsule.lineLineMinimumPoints(line1, line2);\n\n        var _capsule$lineLineMini2 = _slicedToArray(_capsule$lineLineMini, 2);\n\n        point1 = _capsule$lineLineMini2[0];\n        point2 = _capsule$lineLineMini2[1];\n\n        if (point1.distanceToSquared(point2) < r2) {\n          return {\n            normal: point1.clone().sub(point2).normalize(),\n            point: point2.clone(),\n            depth: capsule.radius - point1.distanceTo(point2)\n          };\n        }\n      }\n\n      return false;\n    },\n    triangleSphereIntersect: function triangleSphereIntersect(sphere, triangle) {\n      triangle.getPlane(_plane);\n      if (!sphere.intersectsPlane(_plane)) return false;\n      var depth = Math.abs(_plane.distanceToSphere(sphere));\n      var r2 = sphere.radius * sphere.radius - depth * depth;\n\n      var plainPoint = _plane.projectPoint(sphere.center, _v1);\n\n      if (triangle.containsPoint(sphere.center)) {\n        return {\n          normal: _plane.normal.clone(),\n          point: plainPoint.clone(),\n          depth: Math.abs(_plane.distanceToSphere(sphere))\n        };\n      }\n\n      var lines = [[triangle.a, triangle.b], [triangle.b, triangle.c], [triangle.c, triangle.a]];\n\n      for (var i = 0; i < lines.length; i++) {\n        _line1.set(lines[i][0], lines[i][1]);\n\n        _line1.closestPointToPoint(plainPoint, true, _v2);\n\n        var d = _v2.distanceToSquared(sphere.center);\n\n        if (d < r2) {\n          return {\n            normal: sphere.center.clone().sub(_v2).normalize(),\n            point: _v2.clone(),\n            depth: sphere.radius - Math.sqrt(d)\n          };\n        }\n      }\n\n      return false;\n    },\n    getSphereTriangles: function getSphereTriangles(sphere, triangles) {\n      for (var i = 0; i < this.subTrees.length; i++) {\n        var subTree = this.subTrees[i];\n        if (!sphere.intersectsBox(subTree.box)) continue;\n\n        if (subTree.triangles.length > 0) {\n          for (var j = 0; j < subTree.triangles.length; j++) {\n            if (triangles.indexOf(subTree.triangles[j]) === -1) triangles.push(subTree.triangles[j]);\n          }\n        } else {\n          subTree.getSphereTriangles(sphere, triangles);\n        }\n      }\n    },\n    getCapsuleTriangles: function getCapsuleTriangles(capsule, triangles) {\n      for (var i = 0; i < this.subTrees.length; i++) {\n        var subTree = this.subTrees[i];\n        if (!capsule.intersectsBox(subTree.box)) continue;\n\n        if (subTree.triangles.length > 0) {\n          for (var j = 0; j < subTree.triangles.length; j++) {\n            if (triangles.indexOf(subTree.triangles[j]) === -1) triangles.push(subTree.triangles[j]);\n          }\n        } else {\n          subTree.getCapsuleTriangles(capsule, triangles);\n        }\n      }\n    },\n    sphereIntersect: function sphereIntersect(sphere) {\n      _sphere.copy(sphere);\n\n      var triangles = [],\n          result,\n          hit = false;\n      this.getSphereTriangles(sphere, triangles);\n\n      for (var i = 0; i < triangles.length; i++) {\n        if (result = this.triangleSphereIntersect(_sphere, triangles[i])) {\n          hit = true;\n\n          _sphere.center.add(result.normal.multiplyScalar(result.depth));\n        }\n      }\n\n      if (hit) {\n        var collisionVector = _sphere.center.clone().sub(sphere.center);\n\n        var depth = collisionVector.length();\n        return {\n          normal: collisionVector.normalize(),\n          depth: depth\n        };\n      }\n\n      return false;\n    },\n    capsuleIntersect: function capsuleIntersect(capsule) {\n      _capsule.copy(capsule);\n\n      var triangles = [],\n          result,\n          hit = false;\n      this.getCapsuleTriangles(_capsule, triangles);\n\n      for (var i = 0; i < triangles.length; i++) {\n        if (result = this.triangleCapsuleIntersect(_capsule, triangles[i])) {\n          hit = true;\n\n          _capsule.translate(result.normal.multiplyScalar(result.depth));\n        }\n      }\n\n      if (hit) {\n        var collisionVector = _capsule.getCenter(new Vector3()).sub(capsule.getCenter(_v1));\n\n        var depth = collisionVector.length();\n        return {\n          normal: collisionVector.normalize(),\n          depth: depth\n        };\n      }\n\n      return false;\n    },\n    rayIntersect: function rayIntersect(ray) {\n      if (ray.direction.length() === 0) return;\n      var triangles = [],\n          triangle,\n          position,\n          distance = 1e100,\n          result;\n      this.getRayTriangles(ray, triangles);\n\n      for (var i = 0; i < triangles.length; i++) {\n        result = ray.intersectTriangle(triangles[i].a, triangles[i].b, triangles[i].c, true, _v1);\n\n        if (result) {\n          var newdistance = result.sub(ray.origin).length();\n\n          if (distance > newdistance) {\n            position = result.clone().add(ray.origin);\n            distance = newdistance;\n            triangle = triangles[i];\n          }\n        }\n      }\n\n      return distance < 1e100 ? {\n        distance: distance,\n        triangle: triangle,\n        position: position\n      } : false;\n    },\n    fromGraphNode: function fromGraphNode(group) {\n      var _this = this;\n\n      group.traverse(function (obj) {\n        if (obj.type === 'Mesh') {\n          obj.updateMatrix();\n          obj.updateWorldMatrix();\n          var geometry,\n              isTemp = false;\n\n          if (obj.geometry.index) {\n            isTemp = true;\n            geometry = obj.geometry.clone().toNonIndexed();\n          } else {\n            geometry = obj.geometry;\n          }\n\n          var positions = geometry.attributes.position.array;\n          var transform = obj.matrixWorld;\n\n          for (var i = 0; i < positions.length; i += 9) {\n            var v1 = new Vector3(positions[i], positions[i + 1], positions[i + 2]);\n            var v2 = new Vector3(positions[i + 3], positions[i + 4], positions[i + 5]);\n            var v3 = new Vector3(positions[i + 6], positions[i + 7], positions[i + 8]);\n            v1.applyMatrix4(transform);\n            v2.applyMatrix4(transform);\n            v3.applyMatrix4(transform);\n\n            _this.addTriangle(new Triangle(v1, v2, v3));\n          }\n\n          if (isTemp) {\n            geometry.dispose();\n          }\n        }\n      });\n      this.build();\n      return this;\n    }\n  });\n  return Octree;\n}();\n\nexport { Octree };","map":{"version":3,"names":["Vector3","Plane","Line3","Sphere","Box3","Triangle","Capsule","Octree","_v1","_v2","_plane","_line1","_line2","_sphere","_capsule","box","triangles","subTrees","Object","assign","prototype","addTriangle","triangle","bounds","min","x","Math","a","b","c","y","z","max","push","calcBox","clone","split","level","halfsize","copy","sub","multiplyScalar","v","set","add","multiply","pop","i","length","intersectsTriangle","len","build","getRayTriangles","ray","subTree","intersectsBox","j","indexOf","triangleCapsuleIntersect","capsule","point1","point2","line1","line2","getPlane","d1","distanceToPoint","start","radius","d2","end","delta","abs","intersectPoint","lerp","containsPoint","normal","point","depth","r2","lines","lineLineMinimumPoints","distanceToSquared","normalize","distanceTo","triangleSphereIntersect","sphere","intersectsPlane","distanceToSphere","plainPoint","projectPoint","center","closestPointToPoint","d","sqrt","getSphereTriangles","getCapsuleTriangles","sphereIntersect","result","hit","collisionVector","capsuleIntersect","translate","getCenter","rayIntersect","direction","position","distance","intersectTriangle","newdistance","origin","fromGraphNode","group","traverse","obj","type","updateMatrix","updateWorldMatrix","geometry","isTemp","index","toNonIndexed","positions","attributes","array","transform","matrixWorld","v1","v2","v3","applyMatrix4","dispose"],"sources":["D:/Github/NIKE-DJANGO/Jord/l4fycy/node_modules/three-stdlib/math/Octree.js"],"sourcesContent":["import { Vector3, Plane, Line3, Sphere, Box3, Triangle } from 'three';\r\nimport { Capsule } from './Capsule.js';\r\n\r\nvar Octree = function () {\r\n  var _v1 = new Vector3();\r\n\r\n  var _v2 = new Vector3();\r\n\r\n  var _plane = new Plane();\r\n\r\n  var _line1 = new Line3();\r\n\r\n  var _line2 = new Line3();\r\n\r\n  var _sphere = new Sphere();\r\n\r\n  var _capsule = new Capsule();\r\n\r\n  function Octree(box) {\r\n    this.triangles = [];\r\n    this.box = box;\r\n    this.subTrees = [];\r\n  }\r\n\r\n  Object.assign(Octree.prototype, {\r\n    addTriangle: function (triangle) {\r\n      if (!this.bounds) this.bounds = new Box3();\r\n      this.bounds.min.x = Math.min(this.bounds.min.x, triangle.a.x, triangle.b.x, triangle.c.x);\r\n      this.bounds.min.y = Math.min(this.bounds.min.y, triangle.a.y, triangle.b.y, triangle.c.y);\r\n      this.bounds.min.z = Math.min(this.bounds.min.z, triangle.a.z, triangle.b.z, triangle.c.z);\r\n      this.bounds.max.x = Math.max(this.bounds.max.x, triangle.a.x, triangle.b.x, triangle.c.x);\r\n      this.bounds.max.y = Math.max(this.bounds.max.y, triangle.a.y, triangle.b.y, triangle.c.y);\r\n      this.bounds.max.z = Math.max(this.bounds.max.z, triangle.a.z, triangle.b.z, triangle.c.z);\r\n      this.triangles.push(triangle);\r\n      return this;\r\n    },\r\n    calcBox: function () {\r\n      this.box = this.bounds.clone(); // offset small ammount to account for regular grid\r\n\r\n      this.box.min.x -= 0.01;\r\n      this.box.min.y -= 0.01;\r\n      this.box.min.z -= 0.01;\r\n      return this;\r\n    },\r\n    split: function (level) {\r\n      if (!this.box) return;\r\n\r\n      var subTrees = [],\r\n          halfsize = _v2.copy(this.box.max).sub(this.box.min).multiplyScalar(0.5),\r\n          box,\r\n          v,\r\n          triangle;\r\n\r\n      for (let x = 0; x < 2; x++) {\r\n        for (let y = 0; y < 2; y++) {\r\n          for (let z = 0; z < 2; z++) {\r\n            box = new Box3();\r\n            v = _v1.set(x, y, z);\r\n            box.min.copy(this.box.min).add(v.multiply(halfsize));\r\n            box.max.copy(box.min).add(halfsize);\r\n            subTrees.push(new Octree(box));\r\n          }\r\n        }\r\n      }\r\n\r\n      while (triangle = this.triangles.pop()) {\r\n        for (let i = 0; i < subTrees.length; i++) {\r\n          if (subTrees[i].box.intersectsTriangle(triangle)) {\r\n            subTrees[i].triangles.push(triangle);\r\n          }\r\n        }\r\n      }\r\n\r\n      for (let i = 0; i < subTrees.length; i++) {\r\n        var len = subTrees[i].triangles.length;\r\n\r\n        if (len > 8 && level < 16) {\r\n          subTrees[i].split(level + 1);\r\n        }\r\n\r\n        if (len != 0) {\r\n          this.subTrees.push(subTrees[i]);\r\n        }\r\n      }\r\n\r\n      return this;\r\n    },\r\n    build: function () {\r\n      this.calcBox();\r\n      this.split(0);\r\n      return this;\r\n    },\r\n    getRayTriangles: function (ray, triangles) {\r\n      for (let i = 0; i < this.subTrees.length; i++) {\r\n        var subTree = this.subTrees[i];\r\n        if (!ray.intersectsBox(subTree.box)) continue;\r\n\r\n        if (subTree.triangles.length > 0) {\r\n          for (let j = 0; j < subTree.triangles.length; j++) {\r\n            if (triangles.indexOf(subTree.triangles[j]) === -1) triangles.push(subTree.triangles[j]);\r\n          }\r\n        } else {\r\n          subTree.getRayTriangles(ray, triangles);\r\n        }\r\n      }\r\n\r\n      return triangles;\r\n    },\r\n    triangleCapsuleIntersect: function (capsule, triangle) {\r\n      var point1, point2, line1, line2;\r\n      triangle.getPlane(_plane);\r\n      var d1 = _plane.distanceToPoint(capsule.start) - capsule.radius;\r\n      var d2 = _plane.distanceToPoint(capsule.end) - capsule.radius;\r\n\r\n      if (d1 > 0 && d2 > 0 || d1 < -capsule.radius && d2 < -capsule.radius) {\r\n        return false;\r\n      }\r\n\r\n      var delta = Math.abs(d1 / (Math.abs(d1) + Math.abs(d2)));\r\n\r\n      var intersectPoint = _v1.copy(capsule.start).lerp(capsule.end, delta);\r\n\r\n      if (triangle.containsPoint(intersectPoint)) {\r\n        return {\r\n          normal: _plane.normal.clone(),\r\n          point: intersectPoint.clone(),\r\n          depth: Math.abs(Math.min(d1, d2))\r\n        };\r\n      }\r\n\r\n      var r2 = capsule.radius * capsule.radius;\r\n      line1 = _line1.set(capsule.start, capsule.end);\r\n      var lines = [[triangle.a, triangle.b], [triangle.b, triangle.c], [triangle.c, triangle.a]];\r\n\r\n      for (let i = 0; i < lines.length; i++) {\r\n        line2 = _line2.set(lines[i][0], lines[i][1]);\r\n        [point1, point2] = capsule.lineLineMinimumPoints(line1, line2);\r\n\r\n        if (point1.distanceToSquared(point2) < r2) {\r\n          return {\r\n            normal: point1.clone().sub(point2).normalize(),\r\n            point: point2.clone(),\r\n            depth: capsule.radius - point1.distanceTo(point2)\r\n          };\r\n        }\r\n      }\r\n\r\n      return false;\r\n    },\r\n    triangleSphereIntersect: function (sphere, triangle) {\r\n      triangle.getPlane(_plane);\r\n      if (!sphere.intersectsPlane(_plane)) return false;\r\n      var depth = Math.abs(_plane.distanceToSphere(sphere));\r\n      var r2 = sphere.radius * sphere.radius - depth * depth;\r\n\r\n      var plainPoint = _plane.projectPoint(sphere.center, _v1);\r\n\r\n      if (triangle.containsPoint(sphere.center)) {\r\n        return {\r\n          normal: _plane.normal.clone(),\r\n          point: plainPoint.clone(),\r\n          depth: Math.abs(_plane.distanceToSphere(sphere))\r\n        };\r\n      }\r\n\r\n      var lines = [[triangle.a, triangle.b], [triangle.b, triangle.c], [triangle.c, triangle.a]];\r\n\r\n      for (let i = 0; i < lines.length; i++) {\r\n        _line1.set(lines[i][0], lines[i][1]);\r\n\r\n        _line1.closestPointToPoint(plainPoint, true, _v2);\r\n\r\n        var d = _v2.distanceToSquared(sphere.center);\r\n\r\n        if (d < r2) {\r\n          return {\r\n            normal: sphere.center.clone().sub(_v2).normalize(),\r\n            point: _v2.clone(),\r\n            depth: sphere.radius - Math.sqrt(d)\r\n          };\r\n        }\r\n      }\r\n\r\n      return false;\r\n    },\r\n    getSphereTriangles: function (sphere, triangles) {\r\n      for (let i = 0; i < this.subTrees.length; i++) {\r\n        var subTree = this.subTrees[i];\r\n        if (!sphere.intersectsBox(subTree.box)) continue;\r\n\r\n        if (subTree.triangles.length > 0) {\r\n          for (let j = 0; j < subTree.triangles.length; j++) {\r\n            if (triangles.indexOf(subTree.triangles[j]) === -1) triangles.push(subTree.triangles[j]);\r\n          }\r\n        } else {\r\n          subTree.getSphereTriangles(sphere, triangles);\r\n        }\r\n      }\r\n    },\r\n    getCapsuleTriangles: function (capsule, triangles) {\r\n      for (let i = 0; i < this.subTrees.length; i++) {\r\n        var subTree = this.subTrees[i];\r\n        if (!capsule.intersectsBox(subTree.box)) continue;\r\n\r\n        if (subTree.triangles.length > 0) {\r\n          for (let j = 0; j < subTree.triangles.length; j++) {\r\n            if (triangles.indexOf(subTree.triangles[j]) === -1) triangles.push(subTree.triangles[j]);\r\n          }\r\n        } else {\r\n          subTree.getCapsuleTriangles(capsule, triangles);\r\n        }\r\n      }\r\n    },\r\n\r\n    sphereIntersect(sphere) {\r\n      _sphere.copy(sphere);\r\n\r\n      var triangles = [],\r\n          result,\r\n          hit = false;\r\n      this.getSphereTriangles(sphere, triangles);\r\n\r\n      for (let i = 0; i < triangles.length; i++) {\r\n        if (result = this.triangleSphereIntersect(_sphere, triangles[i])) {\r\n          hit = true;\r\n\r\n          _sphere.center.add(result.normal.multiplyScalar(result.depth));\r\n        }\r\n      }\r\n\r\n      if (hit) {\r\n        var collisionVector = _sphere.center.clone().sub(sphere.center);\r\n\r\n        var depth = collisionVector.length();\r\n        return {\r\n          normal: collisionVector.normalize(),\r\n          depth: depth\r\n        };\r\n      }\r\n\r\n      return false;\r\n    },\r\n\r\n    capsuleIntersect: function (capsule) {\r\n      _capsule.copy(capsule);\r\n\r\n      var triangles = [],\r\n          result,\r\n          hit = false;\r\n      this.getCapsuleTriangles(_capsule, triangles);\r\n\r\n      for (let i = 0; i < triangles.length; i++) {\r\n        if (result = this.triangleCapsuleIntersect(_capsule, triangles[i])) {\r\n          hit = true;\r\n\r\n          _capsule.translate(result.normal.multiplyScalar(result.depth));\r\n        }\r\n      }\r\n\r\n      if (hit) {\r\n        var collisionVector = _capsule.getCenter(new Vector3()).sub(capsule.getCenter(_v1));\r\n\r\n        var depth = collisionVector.length();\r\n        return {\r\n          normal: collisionVector.normalize(),\r\n          depth: depth\r\n        };\r\n      }\r\n\r\n      return false;\r\n    },\r\n    rayIntersect: function (ray) {\r\n      if (ray.direction.length() === 0) return;\r\n      var triangles = [],\r\n          triangle,\r\n          position,\r\n          distance = 1e100,\r\n          result;\r\n      this.getRayTriangles(ray, triangles);\r\n\r\n      for (let i = 0; i < triangles.length; i++) {\r\n        result = ray.intersectTriangle(triangles[i].a, triangles[i].b, triangles[i].c, true, _v1);\r\n\r\n        if (result) {\r\n          var newdistance = result.sub(ray.origin).length();\r\n\r\n          if (distance > newdistance) {\r\n            position = result.clone().add(ray.origin);\r\n            distance = newdistance;\r\n            triangle = triangles[i];\r\n          }\r\n        }\r\n      }\r\n\r\n      return distance < 1e100 ? {\r\n        distance: distance,\r\n        triangle: triangle,\r\n        position: position\r\n      } : false;\r\n    },\r\n    fromGraphNode: function (group) {\r\n      group.traverse(obj => {\r\n        if (obj.type === 'Mesh') {\r\n          obj.updateMatrix();\r\n          obj.updateWorldMatrix();\r\n          var geometry,\r\n              isTemp = false;\r\n\r\n          if (obj.geometry.index) {\r\n            isTemp = true;\r\n            geometry = obj.geometry.clone().toNonIndexed();\r\n          } else {\r\n            geometry = obj.geometry;\r\n          }\r\n\r\n          var positions = geometry.attributes.position.array;\r\n          var transform = obj.matrixWorld;\r\n\r\n          for (let i = 0; i < positions.length; i += 9) {\r\n            var v1 = new Vector3(positions[i], positions[i + 1], positions[i + 2]);\r\n            var v2 = new Vector3(positions[i + 3], positions[i + 4], positions[i + 5]);\r\n            var v3 = new Vector3(positions[i + 6], positions[i + 7], positions[i + 8]);\r\n            v1.applyMatrix4(transform);\r\n            v2.applyMatrix4(transform);\r\n            v3.applyMatrix4(transform);\r\n            this.addTriangle(new Triangle(v1, v2, v3));\r\n          }\r\n\r\n          if (isTemp) {\r\n            geometry.dispose();\r\n          }\r\n        }\r\n      });\r\n      this.build();\r\n      return this;\r\n    }\r\n  });\r\n  return Octree;\r\n}();\r\n\r\nexport { Octree };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}