{"ast":null,"code":"import { MeshStandardMaterial } from 'three';\nclass MeshReflectorMaterial extends MeshStandardMaterial {\n  constructor() {\n    let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(parameters);\n    this._tDepth = {\n      value: null\n    };\n    this._distortionMap = {\n      value: null\n    };\n    this._tDiffuse = {\n      value: null\n    };\n    this._tDiffuseBlur = {\n      value: null\n    };\n    this._textureMatrix = {\n      value: null\n    };\n    this._hasBlur = {\n      value: false\n    };\n    this._mirror = {\n      value: 0.0\n    };\n    this._mixBlur = {\n      value: 0.0\n    };\n    this._blurStrength = {\n      value: 0.5\n    };\n    this._minDepthThreshold = {\n      value: 0.9\n    };\n    this._maxDepthThreshold = {\n      value: 1\n    };\n    this._depthScale = {\n      value: 0\n    };\n    this._depthToBlurRatioBias = {\n      value: 0.25\n    };\n    this._distortion = {\n      value: 1\n    };\n    this._mixContrast = {\n      value: 1.0\n    };\n    this.setValues(parameters);\n  }\n  onBeforeCompile(shader) {\n    var _shader$defines;\n    if (!((_shader$defines = shader.defines) != null && _shader$defines.USE_UV)) {\n      shader.defines.USE_UV = '';\n    }\n    shader.uniforms.hasBlur = this._hasBlur;\n    shader.uniforms.tDiffuse = this._tDiffuse;\n    shader.uniforms.tDepth = this._tDepth;\n    shader.uniforms.distortionMap = this._distortionMap;\n    shader.uniforms.tDiffuseBlur = this._tDiffuseBlur;\n    shader.uniforms.textureMatrix = this._textureMatrix;\n    shader.uniforms.mirror = this._mirror;\n    shader.uniforms.mixBlur = this._mixBlur;\n    shader.uniforms.mixStrength = this._blurStrength;\n    shader.uniforms.minDepthThreshold = this._minDepthThreshold;\n    shader.uniforms.maxDepthThreshold = this._maxDepthThreshold;\n    shader.uniforms.depthScale = this._depthScale;\n    shader.uniforms.depthToBlurRatioBias = this._depthToBlurRatioBias;\n    shader.uniforms.distortion = this._distortion;\n    shader.uniforms.mixContrast = this._mixContrast;\n    shader.vertexShader = \"\\n        uniform mat4 textureMatrix;\\n        varying vec4 my_vUv;\\n      \".concat(shader.vertexShader);\n    shader.vertexShader = shader.vertexShader.replace('#include <project_vertex>', \"#include <project_vertex>\\n        my_vUv = textureMatrix * vec4( position, 1.0 );\\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\");\n    shader.fragmentShader = \"\\n        uniform sampler2D tDiffuse;\\n        uniform sampler2D tDiffuseBlur;\\n        uniform sampler2D tDepth;\\n        uniform sampler2D distortionMap;\\n        uniform float distortion;\\n        uniform float cameraNear;\\n\\t\\t\\t  uniform float cameraFar;\\n        uniform bool hasBlur;\\n        uniform float mixBlur;\\n        uniform float mirror;\\n        uniform float mixStrength;\\n        uniform float minDepthThreshold;\\n        uniform float maxDepthThreshold;\\n        uniform float mixContrast;\\n        uniform float depthScale;\\n        uniform float depthToBlurRatioBias;\\n        varying vec4 my_vUv;\\n        \".concat(shader.fragmentShader);\n    shader.fragmentShader = shader.fragmentShader.replace('#include <emissivemap_fragment>', \"#include <emissivemap_fragment>\\n\\n      float distortionFactor = 0.0;\\n      #ifdef USE_DISTORTION\\n        distortionFactor = texture2D(distortionMap, vUv).r * distortion;\\n      #endif\\n\\n      vec4 new_vUv = my_vUv;\\n      new_vUv.x += distortionFactor;\\n      new_vUv.y += distortionFactor;\\n\\n      vec4 base = texture2DProj(tDiffuse, new_vUv);\\n      vec4 blur = texture2DProj(tDiffuseBlur, new_vUv);\\n\\n      vec4 merge = base;\\n\\n      #ifdef USE_NORMALMAP\\n        vec2 normal_uv = vec2(0.0);\\n        vec4 normalColor = texture2D(normalMap, vUv * normalScale);\\n        vec3 my_normal = normalize( vec3( normalColor.r * 2.0 - 1.0, normalColor.b,  normalColor.g * 2.0 - 1.0 ) );\\n        vec3 coord = new_vUv.xyz / new_vUv.w;\\n        normal_uv = coord.xy + coord.z * my_normal.xz * 0.05;\\n        vec4 base_normal = texture2D(tDiffuse, normal_uv);\\n        vec4 blur_normal = texture2D(tDiffuseBlur, normal_uv);\\n        merge = base_normal;\\n        blur = blur_normal;\\n      #endif\\n\\n      float depthFactor = 0.0001;\\n      float blurFactor = 0.0;\\n\\n      #ifdef USE_DEPTH\\n        vec4 depth = texture2DProj(tDepth, new_vUv);\\n        depthFactor = smoothstep(minDepthThreshold, maxDepthThreshold, 1.0-(depth.r * depth.a));\\n        depthFactor *= depthScale;\\n        depthFactor = max(0.0001, min(1.0, depthFactor));\\n\\n        #ifdef USE_BLUR\\n          blur = blur * min(1.0, depthFactor + depthToBlurRatioBias);\\n          merge = merge * min(1.0, depthFactor + 0.5);\\n        #else\\n          merge = merge * depthFactor;\\n        #endif\\n\\n      #endif\\n\\n      float reflectorRoughnessFactor = roughness;\\n      #ifdef USE_ROUGHNESSMAP\\n        vec4 reflectorTexelRoughness = texture2D( roughnessMap, vUv );\\n        reflectorRoughnessFactor *= reflectorTexelRoughness.g;\\n      #endif\\n\\n      #ifdef USE_BLUR\\n        blurFactor = min(1.0, mixBlur * reflectorRoughnessFactor);\\n        merge = mix(merge, blur, blurFactor);\\n      #endif\\n\\n      vec4 newMerge = vec4(0.0, 0.0, 0.0, 1.0);\\n      newMerge.r = (merge.r - 0.5) * mixContrast + 0.5;\\n      newMerge.g = (merge.g - 0.5) * mixContrast + 0.5;\\n      newMerge.b = (merge.b - 0.5) * mixContrast + 0.5;\\n\\n      diffuseColor.rgb = diffuseColor.rgb * ((1.0 - min(1.0, mirror)) + newMerge.rgb * mixStrength);\\n      \");\n  }\n  get tDiffuse() {\n    return this._tDiffuse.value;\n  }\n  set tDiffuse(v) {\n    this._tDiffuse.value = v;\n  }\n  get tDepth() {\n    return this._tDepth.value;\n  }\n  set tDepth(v) {\n    this._tDepth.value = v;\n  }\n  get distortionMap() {\n    return this._distortionMap.value;\n  }\n  set distortionMap(v) {\n    this._distortionMap.value = v;\n  }\n  get tDiffuseBlur() {\n    return this._tDiffuseBlur.value;\n  }\n  set tDiffuseBlur(v) {\n    this._tDiffuseBlur.value = v;\n  }\n  get textureMatrix() {\n    return this._textureMatrix.value;\n  }\n  set textureMatrix(v) {\n    this._textureMatrix.value = v;\n  }\n  get hasBlur() {\n    return this._hasBlur.value;\n  }\n  set hasBlur(v) {\n    this._hasBlur.value = v;\n  }\n  get mirror() {\n    return this._mirror.value;\n  }\n  set mirror(v) {\n    this._mirror.value = v;\n  }\n  get mixBlur() {\n    return this._mixBlur.value;\n  }\n  set mixBlur(v) {\n    this._mixBlur.value = v;\n  }\n  get mixStrength() {\n    return this._blurStrength.value;\n  }\n  set mixStrength(v) {\n    this._blurStrength.value = v;\n  }\n  get minDepthThreshold() {\n    return this._minDepthThreshold.value;\n  }\n  set minDepthThreshold(v) {\n    this._minDepthThreshold.value = v;\n  }\n  get maxDepthThreshold() {\n    return this._maxDepthThreshold.value;\n  }\n  set maxDepthThreshold(v) {\n    this._maxDepthThreshold.value = v;\n  }\n  get depthScale() {\n    return this._depthScale.value;\n  }\n  set depthScale(v) {\n    this._depthScale.value = v;\n  }\n  get depthToBlurRatioBias() {\n    return this._depthToBlurRatioBias.value;\n  }\n  set depthToBlurRatioBias(v) {\n    this._depthToBlurRatioBias.value = v;\n  }\n  get distortion() {\n    return this._distortion.value;\n  }\n  set distortion(v) {\n    this._distortion.value = v;\n  }\n  get mixContrast() {\n    return this._mixContrast.value;\n  }\n  set mixContrast(v) {\n    this._mixContrast.value = v;\n  }\n}\nexport { MeshReflectorMaterial };","map":{"version":3,"names":["MeshStandardMaterial","MeshReflectorMaterial","constructor","parameters","arguments","length","undefined","_tDepth","value","_distortionMap","_tDiffuse","_tDiffuseBlur","_textureMatrix","_hasBlur","_mirror","_mixBlur","_blurStrength","_minDepthThreshold","_maxDepthThreshold","_depthScale","_depthToBlurRatioBias","_distortion","_mixContrast","setValues","onBeforeCompile","shader","_shader$defines","defines","USE_UV","uniforms","hasBlur","tDiffuse","tDepth","distortionMap","tDiffuseBlur","textureMatrix","mirror","mixBlur","mixStrength","minDepthThreshold","maxDepthThreshold","depthScale","depthToBlurRatioBias","distortion","mixContrast","vertexShader","concat","replace","fragmentShader","v"],"sources":["D:/Github/NIKE-DJANGO/Jord/l4fycy/node_modules/@react-three/drei/materials/MeshReflectorMaterial.js"],"sourcesContent":["import { MeshStandardMaterial } from 'three';\n\nclass MeshReflectorMaterial extends MeshStandardMaterial {\n  constructor(parameters = {}) {\n    super(parameters);\n    this._tDepth = {\n      value: null\n    };\n    this._distortionMap = {\n      value: null\n    };\n    this._tDiffuse = {\n      value: null\n    };\n    this._tDiffuseBlur = {\n      value: null\n    };\n    this._textureMatrix = {\n      value: null\n    };\n    this._hasBlur = {\n      value: false\n    };\n    this._mirror = {\n      value: 0.0\n    };\n    this._mixBlur = {\n      value: 0.0\n    };\n    this._blurStrength = {\n      value: 0.5\n    };\n    this._minDepthThreshold = {\n      value: 0.9\n    };\n    this._maxDepthThreshold = {\n      value: 1\n    };\n    this._depthScale = {\n      value: 0\n    };\n    this._depthToBlurRatioBias = {\n      value: 0.25\n    };\n    this._distortion = {\n      value: 1\n    };\n    this._mixContrast = {\n      value: 1.0\n    };\n    this.setValues(parameters);\n  }\n  onBeforeCompile(shader) {\n    var _shader$defines;\n    if (!((_shader$defines = shader.defines) != null && _shader$defines.USE_UV)) {\n      shader.defines.USE_UV = '';\n    }\n    shader.uniforms.hasBlur = this._hasBlur;\n    shader.uniforms.tDiffuse = this._tDiffuse;\n    shader.uniforms.tDepth = this._tDepth;\n    shader.uniforms.distortionMap = this._distortionMap;\n    shader.uniforms.tDiffuseBlur = this._tDiffuseBlur;\n    shader.uniforms.textureMatrix = this._textureMatrix;\n    shader.uniforms.mirror = this._mirror;\n    shader.uniforms.mixBlur = this._mixBlur;\n    shader.uniforms.mixStrength = this._blurStrength;\n    shader.uniforms.minDepthThreshold = this._minDepthThreshold;\n    shader.uniforms.maxDepthThreshold = this._maxDepthThreshold;\n    shader.uniforms.depthScale = this._depthScale;\n    shader.uniforms.depthToBlurRatioBias = this._depthToBlurRatioBias;\n    shader.uniforms.distortion = this._distortion;\n    shader.uniforms.mixContrast = this._mixContrast;\n    shader.vertexShader = `\n        uniform mat4 textureMatrix;\n        varying vec4 my_vUv;\n      ${shader.vertexShader}`;\n    shader.vertexShader = shader.vertexShader.replace('#include <project_vertex>', `#include <project_vertex>\n        my_vUv = textureMatrix * vec4( position, 1.0 );\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );`);\n    shader.fragmentShader = `\n        uniform sampler2D tDiffuse;\n        uniform sampler2D tDiffuseBlur;\n        uniform sampler2D tDepth;\n        uniform sampler2D distortionMap;\n        uniform float distortion;\n        uniform float cameraNear;\n\t\t\t  uniform float cameraFar;\n        uniform bool hasBlur;\n        uniform float mixBlur;\n        uniform float mirror;\n        uniform float mixStrength;\n        uniform float minDepthThreshold;\n        uniform float maxDepthThreshold;\n        uniform float mixContrast;\n        uniform float depthScale;\n        uniform float depthToBlurRatioBias;\n        varying vec4 my_vUv;\n        ${shader.fragmentShader}`;\n    shader.fragmentShader = shader.fragmentShader.replace('#include <emissivemap_fragment>', `#include <emissivemap_fragment>\n\n      float distortionFactor = 0.0;\n      #ifdef USE_DISTORTION\n        distortionFactor = texture2D(distortionMap, vUv).r * distortion;\n      #endif\n\n      vec4 new_vUv = my_vUv;\n      new_vUv.x += distortionFactor;\n      new_vUv.y += distortionFactor;\n\n      vec4 base = texture2DProj(tDiffuse, new_vUv);\n      vec4 blur = texture2DProj(tDiffuseBlur, new_vUv);\n\n      vec4 merge = base;\n\n      #ifdef USE_NORMALMAP\n        vec2 normal_uv = vec2(0.0);\n        vec4 normalColor = texture2D(normalMap, vUv * normalScale);\n        vec3 my_normal = normalize( vec3( normalColor.r * 2.0 - 1.0, normalColor.b,  normalColor.g * 2.0 - 1.0 ) );\n        vec3 coord = new_vUv.xyz / new_vUv.w;\n        normal_uv = coord.xy + coord.z * my_normal.xz * 0.05;\n        vec4 base_normal = texture2D(tDiffuse, normal_uv);\n        vec4 blur_normal = texture2D(tDiffuseBlur, normal_uv);\n        merge = base_normal;\n        blur = blur_normal;\n      #endif\n\n      float depthFactor = 0.0001;\n      float blurFactor = 0.0;\n\n      #ifdef USE_DEPTH\n        vec4 depth = texture2DProj(tDepth, new_vUv);\n        depthFactor = smoothstep(minDepthThreshold, maxDepthThreshold, 1.0-(depth.r * depth.a));\n        depthFactor *= depthScale;\n        depthFactor = max(0.0001, min(1.0, depthFactor));\n\n        #ifdef USE_BLUR\n          blur = blur * min(1.0, depthFactor + depthToBlurRatioBias);\n          merge = merge * min(1.0, depthFactor + 0.5);\n        #else\n          merge = merge * depthFactor;\n        #endif\n\n      #endif\n\n      float reflectorRoughnessFactor = roughness;\n      #ifdef USE_ROUGHNESSMAP\n        vec4 reflectorTexelRoughness = texture2D( roughnessMap, vUv );\n        reflectorRoughnessFactor *= reflectorTexelRoughness.g;\n      #endif\n\n      #ifdef USE_BLUR\n        blurFactor = min(1.0, mixBlur * reflectorRoughnessFactor);\n        merge = mix(merge, blur, blurFactor);\n      #endif\n\n      vec4 newMerge = vec4(0.0, 0.0, 0.0, 1.0);\n      newMerge.r = (merge.r - 0.5) * mixContrast + 0.5;\n      newMerge.g = (merge.g - 0.5) * mixContrast + 0.5;\n      newMerge.b = (merge.b - 0.5) * mixContrast + 0.5;\n\n      diffuseColor.rgb = diffuseColor.rgb * ((1.0 - min(1.0, mirror)) + newMerge.rgb * mixStrength);\n      `);\n  }\n  get tDiffuse() {\n    return this._tDiffuse.value;\n  }\n  set tDiffuse(v) {\n    this._tDiffuse.value = v;\n  }\n  get tDepth() {\n    return this._tDepth.value;\n  }\n  set tDepth(v) {\n    this._tDepth.value = v;\n  }\n  get distortionMap() {\n    return this._distortionMap.value;\n  }\n  set distortionMap(v) {\n    this._distortionMap.value = v;\n  }\n  get tDiffuseBlur() {\n    return this._tDiffuseBlur.value;\n  }\n  set tDiffuseBlur(v) {\n    this._tDiffuseBlur.value = v;\n  }\n  get textureMatrix() {\n    return this._textureMatrix.value;\n  }\n  set textureMatrix(v) {\n    this._textureMatrix.value = v;\n  }\n  get hasBlur() {\n    return this._hasBlur.value;\n  }\n  set hasBlur(v) {\n    this._hasBlur.value = v;\n  }\n  get mirror() {\n    return this._mirror.value;\n  }\n  set mirror(v) {\n    this._mirror.value = v;\n  }\n  get mixBlur() {\n    return this._mixBlur.value;\n  }\n  set mixBlur(v) {\n    this._mixBlur.value = v;\n  }\n  get mixStrength() {\n    return this._blurStrength.value;\n  }\n  set mixStrength(v) {\n    this._blurStrength.value = v;\n  }\n  get minDepthThreshold() {\n    return this._minDepthThreshold.value;\n  }\n  set minDepthThreshold(v) {\n    this._minDepthThreshold.value = v;\n  }\n  get maxDepthThreshold() {\n    return this._maxDepthThreshold.value;\n  }\n  set maxDepthThreshold(v) {\n    this._maxDepthThreshold.value = v;\n  }\n  get depthScale() {\n    return this._depthScale.value;\n  }\n  set depthScale(v) {\n    this._depthScale.value = v;\n  }\n  get depthToBlurRatioBias() {\n    return this._depthToBlurRatioBias.value;\n  }\n  set depthToBlurRatioBias(v) {\n    this._depthToBlurRatioBias.value = v;\n  }\n  get distortion() {\n    return this._distortion.value;\n  }\n  set distortion(v) {\n    this._distortion.value = v;\n  }\n  get mixContrast() {\n    return this._mixContrast.value;\n  }\n  set mixContrast(v) {\n    this._mixContrast.value = v;\n  }\n}\n\nexport { MeshReflectorMaterial };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}