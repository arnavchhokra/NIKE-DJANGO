{"ast":null,"code":"/**\n * Brightness and contrast adjustment\n * https://github.com/evanw/glfx.js\n * brightness: -1 to 1 (-1 is solid black, 0 is no change, and 1 is solid white)\n * contrast: -1 to 1 (-1 is solid gray, 0 is no change, and 1 is maximum contrast)\n */\nvar BrightnessContrastShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    brightness: {\n      value: 0\n    },\n    contrast: {\n      value: 0\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform sampler2D tDiffuse;', 'uniform float brightness;', 'uniform float contrast;', 'varying vec2 vUv;', 'void main() {', '\tgl_FragColor = texture2D( tDiffuse, vUv );', '\tgl_FragColor.rgb += brightness;', '\tif (contrast > 0.0) {', '\t\tgl_FragColor.rgb = (gl_FragColor.rgb - 0.5) / (1.0 - contrast) + 0.5;', '\t} else {', '\t\tgl_FragColor.rgb = (gl_FragColor.rgb - 0.5) * (1.0 + contrast) + 0.5;', '\t}', '}'].join('\\n')\n};\nexport { BrightnessContrastShader };","map":{"version":3,"names":["BrightnessContrastShader","uniforms","tDiffuse","value","brightness","contrast","vertexShader","join","fragmentShader"],"sources":["C:/Users/Arnav/Downloads/l4fycy/node_modules/three-stdlib/shaders/BrightnessContrastShader.js"],"sourcesContent":["/**\n * Brightness and contrast adjustment\n * https://github.com/evanw/glfx.js\n * brightness: -1 to 1 (-1 is solid black, 0 is no change, and 1 is solid white)\n * contrast: -1 to 1 (-1 is solid gray, 0 is no change, and 1 is maximum contrast)\n */\nconst BrightnessContrastShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    brightness: {\n      value: 0\n    },\n    contrast: {\n      value: 0\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform sampler2D tDiffuse;', 'uniform float brightness;', 'uniform float contrast;', 'varying vec2 vUv;', 'void main() {', '\tgl_FragColor = texture2D( tDiffuse, vUv );', '\tgl_FragColor.rgb += brightness;', '\tif (contrast > 0.0) {', '\t\tgl_FragColor.rgb = (gl_FragColor.rgb - 0.5) / (1.0 - contrast) + 0.5;', '\t} else {', '\t\tgl_FragColor.rgb = (gl_FragColor.rgb - 0.5) * (1.0 + contrast) + 0.5;', '\t}', '}'].join('\\n')\n};\n\nexport { BrightnessContrastShader };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMA,wBAAwB,GAAG;EAC/BC,QAAQ,EAAE;IACRC,QAAQ,EAAE;MACRC,KAAK,EAAE;IADC,CADF;IAIRC,UAAU,EAAE;MACVD,KAAK,EAAE;IADG,CAJJ;IAORE,QAAQ,EAAE;MACRF,KAAK,EAAE;IADC;EAPF,CADqB;EAY/BG,YAAY,EAAE,CAAC,mBAAD,EAAsB,eAAtB,EAAuC,YAAvC,EAAqD,4EAArD,EAAmI,GAAnI,EAAwIC,IAAxI,CAA6I,IAA7I,CAZiB;EAa/BC,cAAc,EAAE,CAAC,6BAAD,EAAgC,2BAAhC,EAA6D,yBAA7D,EAAwF,mBAAxF,EAA6G,eAA7G,EAA8H,6CAA9H,EAA6K,kCAA7K,EAAiN,wBAAjN,EAA2O,yEAA3O,EAAsT,WAAtT,EAAmU,yEAAnU,EAA8Y,IAA9Y,EAAoZ,GAApZ,EAAyZD,IAAzZ,CAA8Z,IAA9Z;AAbe,CAAjC;AAgBA,SAASP,wBAAT"},"metadata":{},"sourceType":"module"}