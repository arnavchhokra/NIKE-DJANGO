{"ast":null,"code":"import _classCallCheck from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { CompressedTextureLoader, RGBA_PVRTC_4BPPV1_Format, RGB_PVRTC_4BPPV1_Format, RGBA_PVRTC_2BPPV1_Format, RGB_PVRTC_2BPPV1_Format } from 'three';\n/*\n *\t PVR v2 (legacy) parser\n *   TODO : Add Support for PVR v3 format\n *   TODO : implement loadMipmaps option\n */\n\nvar PVRLoader = /*#__PURE__*/function (_CompressedTextureLoa) {\n  _inherits(PVRLoader, _CompressedTextureLoa);\n\n  var _super = _createSuper(PVRLoader);\n\n  function PVRLoader(manager) {\n    _classCallCheck(this, PVRLoader);\n\n    return _super.call(this, manager);\n  }\n\n  _createClass(PVRLoader, [{\n    key: \"parse\",\n    value: function parse(buffer, loadMipmaps) {\n      var headerLengthInt = 13;\n      var header = new Uint32Array(buffer, 0, headerLengthInt);\n      var pvrDatas = {\n        buffer: buffer,\n        header: header,\n        loadMipmaps: loadMipmaps\n      };\n\n      if (header[0] === 0x03525650) {\n        // PVR v3\n        return _parseV3(pvrDatas);\n      } else if (header[11] === 0x21525650) {\n        // PVR v2\n        return _parseV2(pvrDatas);\n      } else {\n        console.error('THREE.PVRLoader: Unknown PVR format.');\n      }\n    }\n  }]);\n\n  return PVRLoader;\n}(CompressedTextureLoader);\n\nfunction _parseV3(pvrDatas) {\n  var header = pvrDatas.header;\n  var bpp, format;\n  var metaLen = header[12],\n      pixelFormat = header[2],\n      height = header[6],\n      width = header[7],\n      // numSurfs = header[ 9 ],\n  numFaces = header[10],\n      numMipmaps = header[11];\n\n  switch (pixelFormat) {\n    case 0:\n      // PVRTC 2bpp RGB\n      bpp = 2;\n      format = RGB_PVRTC_2BPPV1_Format;\n      break;\n\n    case 1:\n      // PVRTC 2bpp RGBA\n      bpp = 2;\n      format = RGBA_PVRTC_2BPPV1_Format;\n      break;\n\n    case 2:\n      // PVRTC 4bpp RGB\n      bpp = 4;\n      format = RGB_PVRTC_4BPPV1_Format;\n      break;\n\n    case 3:\n      // PVRTC 4bpp RGBA\n      bpp = 4;\n      format = RGBA_PVRTC_4BPPV1_Format;\n      break;\n\n    default:\n      console.error('THREE.PVRLoader: Unsupported PVR format:', pixelFormat);\n  }\n\n  pvrDatas.dataPtr = 52 + metaLen;\n  pvrDatas.bpp = bpp;\n  pvrDatas.format = format;\n  pvrDatas.width = width;\n  pvrDatas.height = height;\n  pvrDatas.numSurfaces = numFaces;\n  pvrDatas.numMipmaps = numMipmaps;\n  pvrDatas.isCubemap = numFaces === 6;\n  return _extract(pvrDatas);\n}\n\nfunction _parseV2(pvrDatas) {\n  var header = pvrDatas.header;\n  var headerLength = header[0],\n      height = header[1],\n      width = header[2],\n      numMipmaps = header[3],\n      flags = header[4],\n      // dataLength = header[ 5 ],\n  // bpp =  header[ 6 ],\n  // bitmaskRed = header[ 7 ],\n  // bitmaskGreen = header[ 8 ],\n  // bitmaskBlue = header[ 9 ],\n  bitmaskAlpha = header[10],\n      // pvrTag = header[ 11 ],\n  numSurfs = header[12];\n  var TYPE_MASK = 0xff;\n  var PVRTC_2 = 24,\n      PVRTC_4 = 25;\n  var formatFlags = flags & TYPE_MASK;\n  var bpp, format;\n\n  var _hasAlpha = bitmaskAlpha > 0;\n\n  if (formatFlags === PVRTC_4) {\n    format = _hasAlpha ? RGBA_PVRTC_4BPPV1_Format : RGB_PVRTC_4BPPV1_Format;\n    bpp = 4;\n  } else if (formatFlags === PVRTC_2) {\n    format = _hasAlpha ? RGBA_PVRTC_2BPPV1_Format : RGB_PVRTC_2BPPV1_Format;\n    bpp = 2;\n  } else {\n    console.error('THREE.PVRLoader: Unknown PVR format:', formatFlags);\n  }\n\n  pvrDatas.dataPtr = headerLength;\n  pvrDatas.bpp = bpp;\n  pvrDatas.format = format;\n  pvrDatas.width = width;\n  pvrDatas.height = height;\n  pvrDatas.numSurfaces = numSurfs;\n  pvrDatas.numMipmaps = numMipmaps + 1; // guess cubemap type seems tricky in v2\n  // it juste a pvr containing 6 surface (no explicit cubemap type)\n\n  pvrDatas.isCubemap = numSurfs === 6;\n  return _extract(pvrDatas);\n}\n\nfunction _extract(pvrDatas) {\n  var pvr = {\n    mipmaps: [],\n    width: pvrDatas.width,\n    height: pvrDatas.height,\n    format: pvrDatas.format,\n    mipmapCount: pvrDatas.numMipmaps,\n    isCubemap: pvrDatas.isCubemap\n  };\n  var buffer = pvrDatas.buffer;\n  var dataOffset = pvrDatas.dataPtr,\n      dataSize = 0,\n      blockSize = 0,\n      blockWidth = 0,\n      blockHeight = 0,\n      widthBlocks = 0,\n      heightBlocks = 0;\n  var bpp = pvrDatas.bpp,\n      numSurfs = pvrDatas.numSurfaces;\n\n  if (bpp === 2) {\n    blockWidth = 8;\n    blockHeight = 4;\n  } else {\n    blockWidth = 4;\n    blockHeight = 4;\n  }\n\n  blockSize = blockWidth * blockHeight * bpp / 8;\n  pvr.mipmaps.length = pvrDatas.numMipmaps * numSurfs;\n  var mipLevel = 0;\n\n  while (mipLevel < pvrDatas.numMipmaps) {\n    var sWidth = pvrDatas.width >> mipLevel,\n        sHeight = pvrDatas.height >> mipLevel;\n    widthBlocks = sWidth / blockWidth;\n    heightBlocks = sHeight / blockHeight; // Clamp to minimum number of blocks\n\n    if (widthBlocks < 2) widthBlocks = 2;\n    if (heightBlocks < 2) heightBlocks = 2;\n    dataSize = widthBlocks * heightBlocks * blockSize;\n\n    for (var surfIndex = 0; surfIndex < numSurfs; surfIndex++) {\n      var byteArray = new Uint8Array(buffer, dataOffset, dataSize);\n      var mipmap = {\n        data: byteArray,\n        width: sWidth,\n        height: sHeight\n      };\n      pvr.mipmaps[surfIndex * pvrDatas.numMipmaps + mipLevel] = mipmap;\n      dataOffset += dataSize;\n    }\n\n    mipLevel++;\n  }\n\n  return pvr;\n}\n\nexport { PVRLoader };","map":{"version":3,"names":["CompressedTextureLoader","RGBA_PVRTC_4BPPV1_Format","RGB_PVRTC_4BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","RGB_PVRTC_2BPPV1_Format","PVRLoader","manager","buffer","loadMipmaps","headerLengthInt","header","Uint32Array","pvrDatas","_parseV3","_parseV2","console","error","bpp","format","metaLen","pixelFormat","height","width","numFaces","numMipmaps","dataPtr","numSurfaces","isCubemap","_extract","headerLength","flags","bitmaskAlpha","numSurfs","TYPE_MASK","PVRTC_2","PVRTC_4","formatFlags","_hasAlpha","pvr","mipmaps","mipmapCount","dataOffset","dataSize","blockSize","blockWidth","blockHeight","widthBlocks","heightBlocks","length","mipLevel","sWidth","sHeight","surfIndex","byteArray","Uint8Array","mipmap","data"],"sources":["C:/Users/Arnav/Downloads/l4fycy/node_modules/three-stdlib/loaders/PVRLoader.js"],"sourcesContent":["import { CompressedTextureLoader, RGBA_PVRTC_4BPPV1_Format, RGB_PVRTC_4BPPV1_Format, RGBA_PVRTC_2BPPV1_Format, RGB_PVRTC_2BPPV1_Format } from 'three';\n\n/*\n *\t PVR v2 (legacy) parser\n *   TODO : Add Support for PVR v3 format\n *   TODO : implement loadMipmaps option\n */\n\nclass PVRLoader extends CompressedTextureLoader {\n  constructor(manager) {\n    super(manager);\n  }\n\n  parse(buffer, loadMipmaps) {\n    const headerLengthInt = 13;\n    const header = new Uint32Array(buffer, 0, headerLengthInt);\n    const pvrDatas = {\n      buffer: buffer,\n      header: header,\n      loadMipmaps: loadMipmaps\n    };\n\n    if (header[0] === 0x03525650) {\n      // PVR v3\n      return _parseV3(pvrDatas);\n    } else if (header[11] === 0x21525650) {\n      // PVR v2\n      return _parseV2(pvrDatas);\n    } else {\n      console.error('THREE.PVRLoader: Unknown PVR format.');\n    }\n  }\n\n}\n\nfunction _parseV3(pvrDatas) {\n  const header = pvrDatas.header;\n  let bpp, format;\n  const metaLen = header[12],\n        pixelFormat = header[2],\n        height = header[6],\n        width = header[7],\n        // numSurfs = header[ 9 ],\n  numFaces = header[10],\n        numMipmaps = header[11];\n\n  switch (pixelFormat) {\n    case 0:\n      // PVRTC 2bpp RGB\n      bpp = 2;\n      format = RGB_PVRTC_2BPPV1_Format;\n      break;\n\n    case 1:\n      // PVRTC 2bpp RGBA\n      bpp = 2;\n      format = RGBA_PVRTC_2BPPV1_Format;\n      break;\n\n    case 2:\n      // PVRTC 4bpp RGB\n      bpp = 4;\n      format = RGB_PVRTC_4BPPV1_Format;\n      break;\n\n    case 3:\n      // PVRTC 4bpp RGBA\n      bpp = 4;\n      format = RGBA_PVRTC_4BPPV1_Format;\n      break;\n\n    default:\n      console.error('THREE.PVRLoader: Unsupported PVR format:', pixelFormat);\n  }\n\n  pvrDatas.dataPtr = 52 + metaLen;\n  pvrDatas.bpp = bpp;\n  pvrDatas.format = format;\n  pvrDatas.width = width;\n  pvrDatas.height = height;\n  pvrDatas.numSurfaces = numFaces;\n  pvrDatas.numMipmaps = numMipmaps;\n  pvrDatas.isCubemap = numFaces === 6;\n  return _extract(pvrDatas);\n}\n\nfunction _parseV2(pvrDatas) {\n  const header = pvrDatas.header;\n  const headerLength = header[0],\n        height = header[1],\n        width = header[2],\n        numMipmaps = header[3],\n        flags = header[4],\n        // dataLength = header[ 5 ],\n  // bpp =  header[ 6 ],\n  // bitmaskRed = header[ 7 ],\n  // bitmaskGreen = header[ 8 ],\n  // bitmaskBlue = header[ 9 ],\n  bitmaskAlpha = header[10],\n        // pvrTag = header[ 11 ],\n  numSurfs = header[12];\n  const TYPE_MASK = 0xff;\n  const PVRTC_2 = 24,\n        PVRTC_4 = 25;\n  const formatFlags = flags & TYPE_MASK;\n  let bpp, format;\n\n  const _hasAlpha = bitmaskAlpha > 0;\n\n  if (formatFlags === PVRTC_4) {\n    format = _hasAlpha ? RGBA_PVRTC_4BPPV1_Format : RGB_PVRTC_4BPPV1_Format;\n    bpp = 4;\n  } else if (formatFlags === PVRTC_2) {\n    format = _hasAlpha ? RGBA_PVRTC_2BPPV1_Format : RGB_PVRTC_2BPPV1_Format;\n    bpp = 2;\n  } else {\n    console.error('THREE.PVRLoader: Unknown PVR format:', formatFlags);\n  }\n\n  pvrDatas.dataPtr = headerLength;\n  pvrDatas.bpp = bpp;\n  pvrDatas.format = format;\n  pvrDatas.width = width;\n  pvrDatas.height = height;\n  pvrDatas.numSurfaces = numSurfs;\n  pvrDatas.numMipmaps = numMipmaps + 1; // guess cubemap type seems tricky in v2\n  // it juste a pvr containing 6 surface (no explicit cubemap type)\n\n  pvrDatas.isCubemap = numSurfs === 6;\n  return _extract(pvrDatas);\n}\n\nfunction _extract(pvrDatas) {\n  const pvr = {\n    mipmaps: [],\n    width: pvrDatas.width,\n    height: pvrDatas.height,\n    format: pvrDatas.format,\n    mipmapCount: pvrDatas.numMipmaps,\n    isCubemap: pvrDatas.isCubemap\n  };\n  const buffer = pvrDatas.buffer;\n  let dataOffset = pvrDatas.dataPtr,\n      dataSize = 0,\n      blockSize = 0,\n      blockWidth = 0,\n      blockHeight = 0,\n      widthBlocks = 0,\n      heightBlocks = 0;\n  const bpp = pvrDatas.bpp,\n        numSurfs = pvrDatas.numSurfaces;\n\n  if (bpp === 2) {\n    blockWidth = 8;\n    blockHeight = 4;\n  } else {\n    blockWidth = 4;\n    blockHeight = 4;\n  }\n\n  blockSize = blockWidth * blockHeight * bpp / 8;\n  pvr.mipmaps.length = pvrDatas.numMipmaps * numSurfs;\n  let mipLevel = 0;\n\n  while (mipLevel < pvrDatas.numMipmaps) {\n    const sWidth = pvrDatas.width >> mipLevel,\n          sHeight = pvrDatas.height >> mipLevel;\n    widthBlocks = sWidth / blockWidth;\n    heightBlocks = sHeight / blockHeight; // Clamp to minimum number of blocks\n\n    if (widthBlocks < 2) widthBlocks = 2;\n    if (heightBlocks < 2) heightBlocks = 2;\n    dataSize = widthBlocks * heightBlocks * blockSize;\n\n    for (let surfIndex = 0; surfIndex < numSurfs; surfIndex++) {\n      const byteArray = new Uint8Array(buffer, dataOffset, dataSize);\n      const mipmap = {\n        data: byteArray,\n        width: sWidth,\n        height: sHeight\n      };\n      pvr.mipmaps[surfIndex * pvrDatas.numMipmaps + mipLevel] = mipmap;\n      dataOffset += dataSize;\n    }\n\n    mipLevel++;\n  }\n\n  return pvr;\n}\n\nexport { PVRLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}