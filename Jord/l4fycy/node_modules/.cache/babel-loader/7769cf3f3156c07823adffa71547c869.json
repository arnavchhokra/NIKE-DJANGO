{"ast":null,"code":"import _classCallCheck from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Loader, HalfFloatType, CubeTexture, LinearEncoding, LinearFilter, FloatType, FileLoader, DataTexture } from 'three';\nimport { RGBELoader } from './RGBELoader.js';\n\nvar HDRCubeTextureLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(HDRCubeTextureLoader, _Loader);\n\n  var _super = _createSuper(HDRCubeTextureLoader);\n\n  function HDRCubeTextureLoader(manager) {\n    var _this;\n\n    _classCallCheck(this, HDRCubeTextureLoader);\n\n    _this = _super.call(this, manager);\n    _this.hdrLoader = new RGBELoader();\n    _this.type = HalfFloatType;\n    return _this;\n  }\n\n  _createClass(HDRCubeTextureLoader, [{\n    key: \"load\",\n    value: function load(urls, onLoad, onProgress, onError) {\n      if (!Array.isArray(urls)) {\n        console.warn('THREE.HDRCubeTextureLoader signature has changed. Use .setDataType() instead.');\n        this.setDataType(urls);\n        urls = onLoad;\n        onLoad = onProgress;\n        onProgress = onError;\n        onError = arguments[4];\n      }\n\n      var texture = new CubeTexture();\n      texture.type = this.type;\n\n      switch (texture.type) {\n        case FloatType:\n          texture.encoding = LinearEncoding;\n          texture.minFilter = LinearFilter;\n          texture.magFilter = LinearFilter;\n          texture.generateMipmaps = false;\n          break;\n\n        case HalfFloatType:\n          texture.encoding = LinearEncoding;\n          texture.minFilter = LinearFilter;\n          texture.magFilter = LinearFilter;\n          texture.generateMipmaps = false;\n          break;\n      }\n\n      var scope = this;\n      var loaded = 0;\n\n      function loadHDRData(i, onLoad, onProgress, onError) {\n        new FileLoader(scope.manager).setPath(scope.path).setResponseType('arraybuffer').setWithCredentials(scope.withCredentials).load(urls[i], function (buffer) {\n          loaded++;\n          var texData = scope.hdrLoader.parse(buffer);\n          if (!texData) return;\n\n          if (texData.data !== undefined) {\n            var dataTexture = new DataTexture(texData.data, texData.width, texData.height);\n            dataTexture.type = texture.type;\n            dataTexture.encoding = texture.encoding;\n            dataTexture.format = texture.format;\n            dataTexture.minFilter = texture.minFilter;\n            dataTexture.magFilter = texture.magFilter;\n            dataTexture.generateMipmaps = texture.generateMipmaps;\n            texture.images[i] = dataTexture;\n          }\n\n          if (loaded === 6) {\n            texture.needsUpdate = true;\n            if (onLoad) onLoad(texture);\n          }\n        }, onProgress, onError);\n      }\n\n      for (var i = 0; i < urls.length; i++) {\n        loadHDRData(i, onLoad, onProgress, onError);\n      }\n\n      return texture;\n    }\n  }, {\n    key: \"setDataType\",\n    value: function setDataType(value) {\n      this.type = value;\n      this.hdrLoader.setDataType(value);\n      return this;\n    }\n  }]);\n\n  return HDRCubeTextureLoader;\n}(Loader);\n\nexport { HDRCubeTextureLoader };","map":{"version":3,"names":["Loader","HalfFloatType","CubeTexture","LinearEncoding","LinearFilter","FloatType","FileLoader","DataTexture","RGBELoader","HDRCubeTextureLoader","manager","hdrLoader","type","urls","onLoad","onProgress","onError","Array","isArray","console","warn","setDataType","arguments","texture","encoding","minFilter","magFilter","generateMipmaps","scope","loaded","loadHDRData","i","setPath","path","setResponseType","setWithCredentials","withCredentials","load","buffer","texData","parse","data","undefined","dataTexture","width","height","format","images","needsUpdate","length","value"],"sources":["D:/Jord/l4fycy/node_modules/three-stdlib/loaders/HDRCubeTextureLoader.js"],"sourcesContent":["import { Loader, HalfFloatType, CubeTexture, LinearEncoding, LinearFilter, FloatType, FileLoader, DataTexture } from 'three';\nimport { RGBELoader } from './RGBELoader.js';\n\nclass HDRCubeTextureLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.hdrLoader = new RGBELoader();\n    this.type = HalfFloatType;\n  }\n\n  load(urls, onLoad, onProgress, onError) {\n    if (!Array.isArray(urls)) {\n      console.warn('THREE.HDRCubeTextureLoader signature has changed. Use .setDataType() instead.');\n      this.setDataType(urls);\n      urls = onLoad;\n      onLoad = onProgress;\n      onProgress = onError;\n      onError = arguments[4];\n    }\n\n    const texture = new CubeTexture();\n    texture.type = this.type;\n\n    switch (texture.type) {\n      case FloatType:\n        texture.encoding = LinearEncoding;\n        texture.minFilter = LinearFilter;\n        texture.magFilter = LinearFilter;\n        texture.generateMipmaps = false;\n        break;\n\n      case HalfFloatType:\n        texture.encoding = LinearEncoding;\n        texture.minFilter = LinearFilter;\n        texture.magFilter = LinearFilter;\n        texture.generateMipmaps = false;\n        break;\n    }\n\n    const scope = this;\n    let loaded = 0;\n\n    function loadHDRData(i, onLoad, onProgress, onError) {\n      new FileLoader(scope.manager).setPath(scope.path).setResponseType('arraybuffer').setWithCredentials(scope.withCredentials).load(urls[i], function (buffer) {\n        loaded++;\n        const texData = scope.hdrLoader.parse(buffer);\n        if (!texData) return;\n\n        if (texData.data !== undefined) {\n          const dataTexture = new DataTexture(texData.data, texData.width, texData.height);\n          dataTexture.type = texture.type;\n          dataTexture.encoding = texture.encoding;\n          dataTexture.format = texture.format;\n          dataTexture.minFilter = texture.minFilter;\n          dataTexture.magFilter = texture.magFilter;\n          dataTexture.generateMipmaps = texture.generateMipmaps;\n          texture.images[i] = dataTexture;\n        }\n\n        if (loaded === 6) {\n          texture.needsUpdate = true;\n          if (onLoad) onLoad(texture);\n        }\n      }, onProgress, onError);\n    }\n\n    for (let i = 0; i < urls.length; i++) {\n      loadHDRData(i, onLoad, onProgress, onError);\n    }\n\n    return texture;\n  }\n\n  setDataType(value) {\n    this.type = value;\n    this.hdrLoader.setDataType(value);\n    return this;\n  }\n\n}\n\nexport { HDRCubeTextureLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}