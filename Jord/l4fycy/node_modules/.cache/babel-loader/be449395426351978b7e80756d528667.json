{"ast":null,"code":"import _classCallCheck from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Loader, FileLoader, LoaderUtils, BufferGeometry, Float32BufferAttribute } from 'three';\n/**\n * Description: A THREE loader for PLY ASCII files (known as the Polygon\n * File Format or the Stanford Triangle Format).\n *\n * Limitations: ASCII decoding assumes file is UTF-8.\n *\n * Usage:\n *\tconst loader = new PLYLoader();\n *\tloader.load('./models/ply/ascii/dolphins.ply', function (geometry) {\n *\n *\t\tscene.add( new THREE.Mesh( geometry ) );\n *\n *\t} );\n *\n * If the PLY file uses non standard property names, they can be mapped while\n * loading. For example, the following maps the properties\n * “diffuse_(red|green|blue)” in the file to standard color names.\n *\n * loader.setPropertyNameMapping( {\n *\tdiffuse_red: 'red',\n *\tdiffuse_green: 'green',\n *\tdiffuse_blue: 'blue'\n * } );\n *\n */\n\nvar PLYLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(PLYLoader, _Loader);\n\n  var _super = _createSuper(PLYLoader);\n\n  function PLYLoader(manager) {\n    var _this;\n\n    _classCallCheck(this, PLYLoader);\n\n    _this = _super.call(this, manager);\n    _this.propertyNameMapping = {};\n    return _this;\n  }\n\n  _createClass(PLYLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var loader = new FileLoader(this.manager);\n      loader.setPath(this.path);\n      loader.setResponseType('arraybuffer');\n      loader.setRequestHeader(this.requestHeader);\n      loader.setWithCredentials(this.withCredentials);\n      loader.load(url, function (text) {\n        try {\n          onLoad(scope.parse(text));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"setPropertyNameMapping\",\n    value: function setPropertyNameMapping(mapping) {\n      this.propertyNameMapping = mapping;\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(data) {\n      function parseHeader(data) {\n        var patternHeader = /ply([\\s\\S]*)end_header\\r?\\n/;\n        var headerText = '';\n        var headerLength = 0;\n        var result = patternHeader.exec(data);\n\n        if (result !== null) {\n          headerText = result[1];\n          headerLength = new Blob([result[0]]).size;\n        }\n\n        var header = {\n          comments: [],\n          elements: [],\n          headerLength: headerLength,\n          objInfo: ''\n        };\n        var lines = headerText.split('\\n');\n        var currentElement;\n\n        function make_ply_element_property(propertValues, propertyNameMapping) {\n          var property = {\n            type: propertValues[0]\n          };\n\n          if (property.type === 'list') {\n            property.name = propertValues[3];\n            property.countType = propertValues[1];\n            property.itemType = propertValues[2];\n          } else {\n            property.name = propertValues[1];\n          }\n\n          if (property.name in propertyNameMapping) {\n            property.name = propertyNameMapping[property.name];\n          }\n\n          return property;\n        }\n\n        for (var i = 0; i < lines.length; i++) {\n          var line = lines[i];\n          line = line.trim();\n          if (line === '') continue;\n          var lineValues = line.split(/\\s+/);\n          var lineType = lineValues.shift();\n          line = lineValues.join(' ');\n\n          switch (lineType) {\n            case 'format':\n              header.format = lineValues[0];\n              header.version = lineValues[1];\n              break;\n\n            case 'comment':\n              header.comments.push(line);\n              break;\n\n            case 'element':\n              if (currentElement !== undefined) {\n                header.elements.push(currentElement);\n              }\n\n              currentElement = {};\n              currentElement.name = lineValues[0];\n              currentElement.count = parseInt(lineValues[1]);\n              currentElement.properties = [];\n              break;\n\n            case 'property':\n              currentElement.properties.push(make_ply_element_property(lineValues, scope.propertyNameMapping));\n              break;\n\n            case 'obj_info':\n              header.objInfo = line;\n              break;\n\n            default:\n              console.log('unhandled', lineType, lineValues);\n          }\n        }\n\n        if (currentElement !== undefined) {\n          header.elements.push(currentElement);\n        }\n\n        return header;\n      }\n\n      function parseASCIINumber(n, type) {\n        switch (type) {\n          case 'char':\n          case 'uchar':\n          case 'short':\n          case 'ushort':\n          case 'int':\n          case 'uint':\n          case 'int8':\n          case 'uint8':\n          case 'int16':\n          case 'uint16':\n          case 'int32':\n          case 'uint32':\n            return parseInt(n);\n\n          case 'float':\n          case 'double':\n          case 'float32':\n          case 'float64':\n            return parseFloat(n);\n        }\n      }\n\n      function parseASCIIElement(properties, line) {\n        var values = line.split(/\\s+/);\n        var element = {};\n\n        for (var i = 0; i < properties.length; i++) {\n          if (properties[i].type === 'list') {\n            var list = [];\n            var n = parseASCIINumber(values.shift(), properties[i].countType);\n\n            for (var j = 0; j < n; j++) {\n              list.push(parseASCIINumber(values.shift(), properties[i].itemType));\n            }\n\n            element[properties[i].name] = list;\n          } else {\n            element[properties[i].name] = parseASCIINumber(values.shift(), properties[i].type);\n          }\n        }\n\n        return element;\n      }\n\n      function parseASCII(data, header) {\n        // PLY ascii format specification, as per http://en.wikipedia.org/wiki/PLY_(file_format)\n        var buffer = {\n          indices: [],\n          vertices: [],\n          normals: [],\n          uvs: [],\n          faceVertexUvs: [],\n          colors: []\n        };\n        var result;\n        var patternBody = /end_header\\s([\\s\\S]*)$/;\n        var body = '';\n\n        if ((result = patternBody.exec(data)) !== null) {\n          body = result[1];\n        }\n\n        var lines = body.split('\\n');\n        var currentElement = 0;\n        var currentElementCount = 0;\n\n        for (var i = 0; i < lines.length; i++) {\n          var line = lines[i];\n          line = line.trim();\n\n          if (line === '') {\n            continue;\n          }\n\n          if (currentElementCount >= header.elements[currentElement].count) {\n            currentElement++;\n            currentElementCount = 0;\n          }\n\n          var element = parseASCIIElement(header.elements[currentElement].properties, line);\n          handleElement(buffer, header.elements[currentElement].name, element);\n          currentElementCount++;\n        }\n\n        return postProcess(buffer);\n      }\n\n      function postProcess(buffer) {\n        var geometry = new BufferGeometry(); // mandatory buffer data\n\n        if (buffer.indices.length > 0) {\n          geometry.setIndex(buffer.indices);\n        }\n\n        geometry.setAttribute('position', new Float32BufferAttribute(buffer.vertices, 3)); // optional buffer data\n\n        if (buffer.normals.length > 0) {\n          geometry.setAttribute('normal', new Float32BufferAttribute(buffer.normals, 3));\n        }\n\n        if (buffer.uvs.length > 0) {\n          geometry.setAttribute('uv', new Float32BufferAttribute(buffer.uvs, 2));\n        }\n\n        if (buffer.colors.length > 0) {\n          geometry.setAttribute('color', new Float32BufferAttribute(buffer.colors, 3));\n        }\n\n        if (buffer.faceVertexUvs.length > 0) {\n          geometry = geometry.toNonIndexed();\n          geometry.setAttribute('uv', new Float32BufferAttribute(buffer.faceVertexUvs, 2));\n        }\n\n        geometry.computeBoundingSphere();\n        return geometry;\n      }\n\n      function handleElement(buffer, elementName, element) {\n        if (elementName === 'vertex') {\n          buffer.vertices.push(element.x, element.y, element.z);\n\n          if ('nx' in element && 'ny' in element && 'nz' in element) {\n            buffer.normals.push(element.nx, element.ny, element.nz);\n          }\n\n          if ('s' in element && 't' in element) {\n            buffer.uvs.push(element.s, element.t);\n          }\n\n          if ('red' in element && 'green' in element && 'blue' in element) {\n            buffer.colors.push(element.red / 255.0, element.green / 255.0, element.blue / 255.0);\n          }\n        } else if (elementName === 'face') {\n          var vertex_indices = element.vertex_indices || element.vertex_index; // issue #9338\n\n          var texcoord = element.texcoord;\n\n          if (vertex_indices.length === 3) {\n            buffer.indices.push(vertex_indices[0], vertex_indices[1], vertex_indices[2]);\n\n            if (texcoord && texcoord.length === 6) {\n              buffer.faceVertexUvs.push(texcoord[0], texcoord[1]);\n              buffer.faceVertexUvs.push(texcoord[2], texcoord[3]);\n              buffer.faceVertexUvs.push(texcoord[4], texcoord[5]);\n            }\n          } else if (vertex_indices.length === 4) {\n            buffer.indices.push(vertex_indices[0], vertex_indices[1], vertex_indices[3]);\n            buffer.indices.push(vertex_indices[1], vertex_indices[2], vertex_indices[3]);\n          }\n        }\n      }\n\n      function binaryRead(dataview, at, type, little_endian) {\n        switch (type) {\n          // corespondences for non-specific length types here match rply:\n          case 'int8':\n          case 'char':\n            return [dataview.getInt8(at), 1];\n\n          case 'uint8':\n          case 'uchar':\n            return [dataview.getUint8(at), 1];\n\n          case 'int16':\n          case 'short':\n            return [dataview.getInt16(at, little_endian), 2];\n\n          case 'uint16':\n          case 'ushort':\n            return [dataview.getUint16(at, little_endian), 2];\n\n          case 'int32':\n          case 'int':\n            return [dataview.getInt32(at, little_endian), 4];\n\n          case 'uint32':\n          case 'uint':\n            return [dataview.getUint32(at, little_endian), 4];\n\n          case 'float32':\n          case 'float':\n            return [dataview.getFloat32(at, little_endian), 4];\n\n          case 'float64':\n          case 'double':\n            return [dataview.getFloat64(at, little_endian), 8];\n        }\n      }\n\n      function binaryReadElement(dataview, at, properties, little_endian) {\n        var element = {};\n        var result,\n            read = 0;\n\n        for (var i = 0; i < properties.length; i++) {\n          if (properties[i].type === 'list') {\n            var list = [];\n            result = binaryRead(dataview, at + read, properties[i].countType, little_endian);\n            var n = result[0];\n            read += result[1];\n\n            for (var j = 0; j < n; j++) {\n              result = binaryRead(dataview, at + read, properties[i].itemType, little_endian);\n              list.push(result[0]);\n              read += result[1];\n            }\n\n            element[properties[i].name] = list;\n          } else {\n            result = binaryRead(dataview, at + read, properties[i].type, little_endian);\n            element[properties[i].name] = result[0];\n            read += result[1];\n          }\n        }\n\n        return [element, read];\n      }\n\n      function parseBinary(data, header) {\n        var buffer = {\n          indices: [],\n          vertices: [],\n          normals: [],\n          uvs: [],\n          faceVertexUvs: [],\n          colors: []\n        };\n        var little_endian = header.format === 'binary_little_endian';\n        var body = new DataView(data, header.headerLength);\n        var result,\n            loc = 0;\n\n        for (var currentElement = 0; currentElement < header.elements.length; currentElement++) {\n          for (var currentElementCount = 0; currentElementCount < header.elements[currentElement].count; currentElementCount++) {\n            result = binaryReadElement(body, loc, header.elements[currentElement].properties, little_endian);\n            loc += result[1];\n            var element = result[0];\n            handleElement(buffer, header.elements[currentElement].name, element);\n          }\n        }\n\n        return postProcess(buffer);\n      } //\n\n\n      var geometry;\n      var scope = this;\n\n      if (data instanceof ArrayBuffer) {\n        var text = LoaderUtils.decodeText(new Uint8Array(data));\n        var header = parseHeader(text);\n        geometry = header.format === 'ascii' ? parseASCII(text, header) : parseBinary(data, header);\n      } else {\n        geometry = parseASCII(data, parseHeader(data));\n      }\n\n      return geometry;\n    }\n  }]);\n\n  return PLYLoader;\n}(Loader);\n\nexport { PLYLoader };","map":{"version":3,"names":["Loader","FileLoader","LoaderUtils","BufferGeometry","Float32BufferAttribute","PLYLoader","manager","propertyNameMapping","url","onLoad","onProgress","onError","scope","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","load","text","parse","e","console","error","itemError","mapping","data","parseHeader","patternHeader","headerText","headerLength","result","exec","Blob","size","header","comments","elements","objInfo","lines","split","currentElement","make_ply_element_property","propertValues","property","type","name","countType","itemType","i","length","line","trim","lineValues","lineType","shift","join","format","version","push","undefined","count","parseInt","properties","log","parseASCIINumber","n","parseFloat","parseASCIIElement","values","element","list","j","parseASCII","buffer","indices","vertices","normals","uvs","faceVertexUvs","colors","patternBody","body","currentElementCount","handleElement","postProcess","geometry","setIndex","setAttribute","toNonIndexed","computeBoundingSphere","elementName","x","y","z","nx","ny","nz","s","t","red","green","blue","vertex_indices","vertex_index","texcoord","binaryRead","dataview","at","little_endian","getInt8","getUint8","getInt16","getUint16","getInt32","getUint32","getFloat32","getFloat64","binaryReadElement","read","parseBinary","DataView","loc","ArrayBuffer","decodeText","Uint8Array"],"sources":["D:/Jord/l4fycy/node_modules/three-stdlib/loaders/PLYLoader.js"],"sourcesContent":["import { Loader, FileLoader, LoaderUtils, BufferGeometry, Float32BufferAttribute } from 'three';\n\n/**\n * Description: A THREE loader for PLY ASCII files (known as the Polygon\n * File Format or the Stanford Triangle Format).\n *\n * Limitations: ASCII decoding assumes file is UTF-8.\n *\n * Usage:\n *\tconst loader = new PLYLoader();\n *\tloader.load('./models/ply/ascii/dolphins.ply', function (geometry) {\n *\n *\t\tscene.add( new THREE.Mesh( geometry ) );\n *\n *\t} );\n *\n * If the PLY file uses non standard property names, they can be mapped while\n * loading. For example, the following maps the properties\n * “diffuse_(red|green|blue)” in the file to standard color names.\n *\n * loader.setPropertyNameMapping( {\n *\tdiffuse_red: 'red',\n *\tdiffuse_green: 'green',\n *\tdiffuse_blue: 'blue'\n * } );\n *\n */\n\nclass PLYLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.propertyNameMapping = {};\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(this.requestHeader);\n    loader.setWithCredentials(this.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  setPropertyNameMapping(mapping) {\n    this.propertyNameMapping = mapping;\n  }\n\n  parse(data) {\n    function parseHeader(data) {\n      const patternHeader = /ply([\\s\\S]*)end_header\\r?\\n/;\n      let headerText = '';\n      let headerLength = 0;\n      const result = patternHeader.exec(data);\n\n      if (result !== null) {\n        headerText = result[1];\n        headerLength = new Blob([result[0]]).size;\n      }\n\n      const header = {\n        comments: [],\n        elements: [],\n        headerLength: headerLength,\n        objInfo: ''\n      };\n      const lines = headerText.split('\\n');\n      let currentElement;\n\n      function make_ply_element_property(propertValues, propertyNameMapping) {\n        const property = {\n          type: propertValues[0]\n        };\n\n        if (property.type === 'list') {\n          property.name = propertValues[3];\n          property.countType = propertValues[1];\n          property.itemType = propertValues[2];\n        } else {\n          property.name = propertValues[1];\n        }\n\n        if (property.name in propertyNameMapping) {\n          property.name = propertyNameMapping[property.name];\n        }\n\n        return property;\n      }\n\n      for (let i = 0; i < lines.length; i++) {\n        let line = lines[i];\n        line = line.trim();\n        if (line === '') continue;\n        const lineValues = line.split(/\\s+/);\n        const lineType = lineValues.shift();\n        line = lineValues.join(' ');\n\n        switch (lineType) {\n          case 'format':\n            header.format = lineValues[0];\n            header.version = lineValues[1];\n            break;\n\n          case 'comment':\n            header.comments.push(line);\n            break;\n\n          case 'element':\n            if (currentElement !== undefined) {\n              header.elements.push(currentElement);\n            }\n\n            currentElement = {};\n            currentElement.name = lineValues[0];\n            currentElement.count = parseInt(lineValues[1]);\n            currentElement.properties = [];\n            break;\n\n          case 'property':\n            currentElement.properties.push(make_ply_element_property(lineValues, scope.propertyNameMapping));\n            break;\n\n          case 'obj_info':\n            header.objInfo = line;\n            break;\n\n          default:\n            console.log('unhandled', lineType, lineValues);\n        }\n      }\n\n      if (currentElement !== undefined) {\n        header.elements.push(currentElement);\n      }\n\n      return header;\n    }\n\n    function parseASCIINumber(n, type) {\n      switch (type) {\n        case 'char':\n        case 'uchar':\n        case 'short':\n        case 'ushort':\n        case 'int':\n        case 'uint':\n        case 'int8':\n        case 'uint8':\n        case 'int16':\n        case 'uint16':\n        case 'int32':\n        case 'uint32':\n          return parseInt(n);\n\n        case 'float':\n        case 'double':\n        case 'float32':\n        case 'float64':\n          return parseFloat(n);\n      }\n    }\n\n    function parseASCIIElement(properties, line) {\n      const values = line.split(/\\s+/);\n      const element = {};\n\n      for (let i = 0; i < properties.length; i++) {\n        if (properties[i].type === 'list') {\n          const list = [];\n          const n = parseASCIINumber(values.shift(), properties[i].countType);\n\n          for (let j = 0; j < n; j++) {\n            list.push(parseASCIINumber(values.shift(), properties[i].itemType));\n          }\n\n          element[properties[i].name] = list;\n        } else {\n          element[properties[i].name] = parseASCIINumber(values.shift(), properties[i].type);\n        }\n      }\n\n      return element;\n    }\n\n    function parseASCII(data, header) {\n      // PLY ascii format specification, as per http://en.wikipedia.org/wiki/PLY_(file_format)\n      const buffer = {\n        indices: [],\n        vertices: [],\n        normals: [],\n        uvs: [],\n        faceVertexUvs: [],\n        colors: []\n      };\n      let result;\n      const patternBody = /end_header\\s([\\s\\S]*)$/;\n      let body = '';\n\n      if ((result = patternBody.exec(data)) !== null) {\n        body = result[1];\n      }\n\n      const lines = body.split('\\n');\n      let currentElement = 0;\n      let currentElementCount = 0;\n\n      for (let i = 0; i < lines.length; i++) {\n        let line = lines[i];\n        line = line.trim();\n\n        if (line === '') {\n          continue;\n        }\n\n        if (currentElementCount >= header.elements[currentElement].count) {\n          currentElement++;\n          currentElementCount = 0;\n        }\n\n        const element = parseASCIIElement(header.elements[currentElement].properties, line);\n        handleElement(buffer, header.elements[currentElement].name, element);\n        currentElementCount++;\n      }\n\n      return postProcess(buffer);\n    }\n\n    function postProcess(buffer) {\n      let geometry = new BufferGeometry(); // mandatory buffer data\n\n      if (buffer.indices.length > 0) {\n        geometry.setIndex(buffer.indices);\n      }\n\n      geometry.setAttribute('position', new Float32BufferAttribute(buffer.vertices, 3)); // optional buffer data\n\n      if (buffer.normals.length > 0) {\n        geometry.setAttribute('normal', new Float32BufferAttribute(buffer.normals, 3));\n      }\n\n      if (buffer.uvs.length > 0) {\n        geometry.setAttribute('uv', new Float32BufferAttribute(buffer.uvs, 2));\n      }\n\n      if (buffer.colors.length > 0) {\n        geometry.setAttribute('color', new Float32BufferAttribute(buffer.colors, 3));\n      }\n\n      if (buffer.faceVertexUvs.length > 0) {\n        geometry = geometry.toNonIndexed();\n        geometry.setAttribute('uv', new Float32BufferAttribute(buffer.faceVertexUvs, 2));\n      }\n\n      geometry.computeBoundingSphere();\n      return geometry;\n    }\n\n    function handleElement(buffer, elementName, element) {\n      if (elementName === 'vertex') {\n        buffer.vertices.push(element.x, element.y, element.z);\n\n        if ('nx' in element && 'ny' in element && 'nz' in element) {\n          buffer.normals.push(element.nx, element.ny, element.nz);\n        }\n\n        if ('s' in element && 't' in element) {\n          buffer.uvs.push(element.s, element.t);\n        }\n\n        if ('red' in element && 'green' in element && 'blue' in element) {\n          buffer.colors.push(element.red / 255.0, element.green / 255.0, element.blue / 255.0);\n        }\n      } else if (elementName === 'face') {\n        const vertex_indices = element.vertex_indices || element.vertex_index; // issue #9338\n\n        const texcoord = element.texcoord;\n\n        if (vertex_indices.length === 3) {\n          buffer.indices.push(vertex_indices[0], vertex_indices[1], vertex_indices[2]);\n\n          if (texcoord && texcoord.length === 6) {\n            buffer.faceVertexUvs.push(texcoord[0], texcoord[1]);\n            buffer.faceVertexUvs.push(texcoord[2], texcoord[3]);\n            buffer.faceVertexUvs.push(texcoord[4], texcoord[5]);\n          }\n        } else if (vertex_indices.length === 4) {\n          buffer.indices.push(vertex_indices[0], vertex_indices[1], vertex_indices[3]);\n          buffer.indices.push(vertex_indices[1], vertex_indices[2], vertex_indices[3]);\n        }\n      }\n    }\n\n    function binaryRead(dataview, at, type, little_endian) {\n      switch (type) {\n        // corespondences for non-specific length types here match rply:\n        case 'int8':\n        case 'char':\n          return [dataview.getInt8(at), 1];\n\n        case 'uint8':\n        case 'uchar':\n          return [dataview.getUint8(at), 1];\n\n        case 'int16':\n        case 'short':\n          return [dataview.getInt16(at, little_endian), 2];\n\n        case 'uint16':\n        case 'ushort':\n          return [dataview.getUint16(at, little_endian), 2];\n\n        case 'int32':\n        case 'int':\n          return [dataview.getInt32(at, little_endian), 4];\n\n        case 'uint32':\n        case 'uint':\n          return [dataview.getUint32(at, little_endian), 4];\n\n        case 'float32':\n        case 'float':\n          return [dataview.getFloat32(at, little_endian), 4];\n\n        case 'float64':\n        case 'double':\n          return [dataview.getFloat64(at, little_endian), 8];\n      }\n    }\n\n    function binaryReadElement(dataview, at, properties, little_endian) {\n      const element = {};\n      let result,\n          read = 0;\n\n      for (let i = 0; i < properties.length; i++) {\n        if (properties[i].type === 'list') {\n          const list = [];\n          result = binaryRead(dataview, at + read, properties[i].countType, little_endian);\n          const n = result[0];\n          read += result[1];\n\n          for (let j = 0; j < n; j++) {\n            result = binaryRead(dataview, at + read, properties[i].itemType, little_endian);\n            list.push(result[0]);\n            read += result[1];\n          }\n\n          element[properties[i].name] = list;\n        } else {\n          result = binaryRead(dataview, at + read, properties[i].type, little_endian);\n          element[properties[i].name] = result[0];\n          read += result[1];\n        }\n      }\n\n      return [element, read];\n    }\n\n    function parseBinary(data, header) {\n      const buffer = {\n        indices: [],\n        vertices: [],\n        normals: [],\n        uvs: [],\n        faceVertexUvs: [],\n        colors: []\n      };\n      const little_endian = header.format === 'binary_little_endian';\n      const body = new DataView(data, header.headerLength);\n      let result,\n          loc = 0;\n\n      for (let currentElement = 0; currentElement < header.elements.length; currentElement++) {\n        for (let currentElementCount = 0; currentElementCount < header.elements[currentElement].count; currentElementCount++) {\n          result = binaryReadElement(body, loc, header.elements[currentElement].properties, little_endian);\n          loc += result[1];\n          const element = result[0];\n          handleElement(buffer, header.elements[currentElement].name, element);\n        }\n      }\n\n      return postProcess(buffer);\n    } //\n\n\n    let geometry;\n    const scope = this;\n\n    if (data instanceof ArrayBuffer) {\n      const text = LoaderUtils.decodeText(new Uint8Array(data));\n      const header = parseHeader(text);\n      geometry = header.format === 'ascii' ? parseASCII(text, header) : parseBinary(data, header);\n    } else {\n      geometry = parseASCII(data, parseHeader(data));\n    }\n\n    return geometry;\n  }\n\n}\n\nexport { PLYLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}