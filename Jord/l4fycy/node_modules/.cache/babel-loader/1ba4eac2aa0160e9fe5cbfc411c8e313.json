{"ast":null,"code":"import _createClass from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _assertThisInitialized from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Mesh, Color, Vector3, Vector2, Matrix4, PerspectiveCamera, DepthTexture, UnsignedShortType, NearestFilter, WebGLRenderTarget, ShaderMaterial, UniformsUtils, Plane } from 'three';\n\nvar ReflectorForSSRPass = /*#__PURE__*/function (_Mesh) {\n  _inherits(ReflectorForSSRPass, _Mesh);\n\n  var _super = _createSuper(ReflectorForSSRPass);\n\n  function ReflectorForSSRPass(geometry) {\n    var _this;\n\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, ReflectorForSSRPass);\n\n    _this = _super.call(this, geometry);\n    _this.type = 'ReflectorForSSRPass';\n\n    var scope = _assertThisInitialized(_this);\n\n    var color = options.color !== undefined ? new Color(options.color) : new Color(0x7f7f7f);\n    var textureWidth = options.textureWidth || 512;\n    var textureHeight = options.textureHeight || 512;\n    var clipBias = options.clipBias || 0;\n    var shader = options.shader || ReflectorForSSRPass.ReflectorShader;\n    var useDepthTexture = options.useDepthTexture === true;\n    var yAxis = new Vector3(0, 1, 0);\n    var vecTemp0 = new Vector3();\n    var vecTemp1 = new Vector3(); //\n\n    scope.needsUpdate = false;\n    scope.maxDistance = ReflectorForSSRPass.ReflectorShader.uniforms.maxDistance.value;\n    scope.opacity = ReflectorForSSRPass.ReflectorShader.uniforms.opacity.value;\n    scope.color = color;\n    scope.resolution = options.resolution || new Vector2(window.innerWidth, window.innerHeight);\n    scope._distanceAttenuation = ReflectorForSSRPass.ReflectorShader.defines.DISTANCE_ATTENUATION;\n    Object.defineProperty(scope, 'distanceAttenuation', {\n      get: function get() {\n        return scope._distanceAttenuation;\n      },\n      set: function set(val) {\n        if (scope._distanceAttenuation === val) return;\n        scope._distanceAttenuation = val;\n        scope.material.defines.DISTANCE_ATTENUATION = val;\n        scope.material.needsUpdate = true;\n      }\n    });\n    scope._fresnel = ReflectorForSSRPass.ReflectorShader.defines.FRESNEL;\n    Object.defineProperty(scope, 'fresnel', {\n      get: function get() {\n        return scope._fresnel;\n      },\n      set: function set(val) {\n        if (scope._fresnel === val) return;\n        scope._fresnel = val;\n        scope.material.defines.FRESNEL = val;\n        scope.material.needsUpdate = true;\n      }\n    });\n    var normal = new Vector3();\n    var reflectorWorldPosition = new Vector3();\n    var cameraWorldPosition = new Vector3();\n    var rotationMatrix = new Matrix4();\n    var lookAtPosition = new Vector3(0, 0, -1);\n    var view = new Vector3();\n    var target = new Vector3();\n    var textureMatrix = new Matrix4();\n    var virtualCamera = new PerspectiveCamera();\n    var depthTexture;\n\n    if (useDepthTexture) {\n      depthTexture = new DepthTexture();\n      depthTexture.type = UnsignedShortType;\n      depthTexture.minFilter = NearestFilter;\n      depthTexture.magFilter = NearestFilter;\n    }\n\n    var parameters = {\n      depthTexture: useDepthTexture ? depthTexture : null\n    };\n    var renderTarget = new WebGLRenderTarget(textureWidth, textureHeight, parameters);\n    var material = new ShaderMaterial({\n      transparent: useDepthTexture,\n      defines: Object.assign({}, ReflectorForSSRPass.ReflectorShader.defines, {\n        useDepthTexture: useDepthTexture\n      }),\n      uniforms: UniformsUtils.clone(shader.uniforms),\n      fragmentShader: shader.fragmentShader,\n      vertexShader: shader.vertexShader\n    });\n    material.uniforms['tDiffuse'].value = renderTarget.texture;\n    material.uniforms['color'].value = scope.color;\n    material.uniforms['textureMatrix'].value = textureMatrix;\n\n    if (useDepthTexture) {\n      material.uniforms['tDepth'].value = renderTarget.depthTexture;\n    }\n\n    _this.material = material;\n    var globalPlane = new Plane(new Vector3(0, 1, 0), clipBias);\n    var globalPlanes = [globalPlane];\n\n    _this.doRender = function (renderer, scene, camera) {\n      material.uniforms['maxDistance'].value = scope.maxDistance;\n      material.uniforms['color'].value = scope.color;\n      material.uniforms['opacity'].value = scope.opacity;\n      vecTemp0.copy(camera.position).normalize();\n      vecTemp1.copy(vecTemp0).reflect(yAxis);\n      material.uniforms['fresnelCoe'].value = (vecTemp0.dot(vecTemp1) + 1) / 2; // TODO: Also need to use glsl viewPosition and viewNormal per pixel.\n\n      reflectorWorldPosition.setFromMatrixPosition(scope.matrixWorld);\n      cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);\n      rotationMatrix.extractRotation(scope.matrixWorld);\n      normal.set(0, 0, 1);\n      normal.applyMatrix4(rotationMatrix);\n      view.subVectors(reflectorWorldPosition, cameraWorldPosition); // Avoid rendering when reflector is facing away\n\n      if (view.dot(normal) > 0) return;\n      view.reflect(normal).negate();\n      view.add(reflectorWorldPosition);\n      rotationMatrix.extractRotation(camera.matrixWorld);\n      lookAtPosition.set(0, 0, -1);\n      lookAtPosition.applyMatrix4(rotationMatrix);\n      lookAtPosition.add(cameraWorldPosition);\n      target.subVectors(reflectorWorldPosition, lookAtPosition);\n      target.reflect(normal).negate();\n      target.add(reflectorWorldPosition);\n      virtualCamera.position.copy(view);\n      virtualCamera.up.set(0, 1, 0);\n      virtualCamera.up.applyMatrix4(rotationMatrix);\n      virtualCamera.up.reflect(normal);\n      virtualCamera.lookAt(target);\n      virtualCamera.far = camera.far; // Used in WebGLBackground\n\n      virtualCamera.updateMatrixWorld();\n      virtualCamera.projectionMatrix.copy(camera.projectionMatrix);\n      material.uniforms['virtualCameraNear'].value = camera.near;\n      material.uniforms['virtualCameraFar'].value = camera.far;\n      material.uniforms['virtualCameraMatrixWorld'].value = virtualCamera.matrixWorld;\n      material.uniforms['virtualCameraProjectionMatrix'].value = camera.projectionMatrix;\n      material.uniforms['virtualCameraProjectionMatrixInverse'].value = camera.projectionMatrixInverse;\n      material.uniforms['resolution'].value = scope.resolution; // Update the texture matrix\n\n      textureMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n      textureMatrix.multiply(virtualCamera.projectionMatrix);\n      textureMatrix.multiply(virtualCamera.matrixWorldInverse);\n      textureMatrix.multiply(scope.matrixWorld); // Render\n\n      renderTarget.texture.encoding = renderer.outputEncoding; // scope.visible = false;\n\n      var currentRenderTarget = renderer.getRenderTarget();\n      var currentXrEnabled = renderer.xr.enabled;\n      var currentShadowAutoUpdate = renderer.shadowMap.autoUpdate;\n      var currentClippingPlanes = renderer.clippingPlanes;\n      renderer.xr.enabled = false; // Avoid camera modification\n\n      renderer.shadowMap.autoUpdate = false; // Avoid re-computing shadows\n\n      renderer.clippingPlanes = globalPlanes;\n      renderer.setRenderTarget(renderTarget);\n      renderer.state.buffers.depth.setMask(true); // make sure the depth buffer is writable so it can be properly cleared, see #18897\n\n      if (renderer.autoClear === false) renderer.clear();\n      renderer.render(scene, virtualCamera);\n      renderer.xr.enabled = currentXrEnabled;\n      renderer.shadowMap.autoUpdate = currentShadowAutoUpdate;\n      renderer.clippingPlanes = currentClippingPlanes;\n      renderer.setRenderTarget(currentRenderTarget); // Restore viewport\n\n      var viewport = camera.viewport;\n\n      if (viewport !== undefined) {\n        renderer.state.viewport(viewport);\n      } // scope.visible = true;\n\n    };\n\n    _this.getRenderTarget = function () {\n      return renderTarget;\n    };\n\n    return _this;\n  }\n\n  return _createClass(ReflectorForSSRPass);\n}(Mesh);\n\nReflectorForSSRPass.prototype.isReflectorForSSRPass = true;\nReflectorForSSRPass.ReflectorShader = {\n  defines: {\n    DISTANCE_ATTENUATION: true,\n    FRESNEL: true\n  },\n  uniforms: {\n    color: {\n      value: null\n    },\n    tDiffuse: {\n      value: null\n    },\n    tDepth: {\n      value: null\n    },\n    textureMatrix: {\n      value: new Matrix4()\n    },\n    maxDistance: {\n      value: 180\n    },\n    opacity: {\n      value: 0.5\n    },\n    fresnelCoe: {\n      value: null\n    },\n    virtualCameraNear: {\n      value: null\n    },\n    virtualCameraFar: {\n      value: null\n    },\n    virtualCameraProjectionMatrix: {\n      value: new Matrix4()\n    },\n    virtualCameraMatrixWorld: {\n      value: new Matrix4()\n    },\n    virtualCameraProjectionMatrixInverse: {\n      value: new Matrix4()\n    },\n    resolution: {\n      value: new Vector2()\n    }\n  },\n  vertexShader:\n  /* glsl */\n  \"\\n\\t\\tuniform mat4 textureMatrix;\\n\\t\\tvarying vec4 vUv;\\n\\n\\t\\tvoid main() {\\n\\n\\t\\t\\tvUv = textureMatrix * vec4( position, 1.0 );\\n\\n\\t\\t\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\n\\t\\t}\",\n  fragmentShader:\n  /* glsl */\n  \"\\n\\t\\tuniform vec3 color;\\n\\t\\tuniform sampler2D tDiffuse;\\n\\t\\tuniform sampler2D tDepth;\\n\\t\\tuniform float maxDistance;\\n\\t\\tuniform float opacity;\\n\\t\\tuniform float fresnelCoe;\\n\\t\\tuniform float virtualCameraNear;\\n\\t\\tuniform float virtualCameraFar;\\n\\t\\tuniform mat4 virtualCameraProjectionMatrix;\\n\\t\\tuniform mat4 virtualCameraProjectionMatrixInverse;\\n\\t\\tuniform mat4 virtualCameraMatrixWorld;\\n\\t\\tuniform vec2 resolution;\\n\\t\\tvarying vec4 vUv;\\n\\t\\t#include <packing>\\n\\t\\tfloat blendOverlay( float base, float blend ) {\\n\\t\\t\\treturn( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );\\n\\t\\t}\\n\\t\\tvec3 blendOverlay( vec3 base, vec3 blend ) {\\n\\t\\t\\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ), blendOverlay( base.b, blend.b ) );\\n\\t\\t}\\n\\t\\tfloat getDepth( const in vec2 uv ) {\\n\\t\\t\\treturn texture2D( tDepth, uv ).x;\\n\\t\\t}\\n\\t\\tfloat getViewZ( const in float depth ) {\\n\\t\\t\\treturn perspectiveDepthToViewZ( depth, virtualCameraNear, virtualCameraFar );\\n\\t\\t}\\n\\t\\tvec3 getViewPosition( const in vec2 uv, const in float depth/*clip space*/, const in float clipW ) {\\n\\t\\t\\tvec4 clipPosition = vec4( ( vec3( uv, depth ) - 0.5 ) * 2.0, 1.0 );//ndc\\n\\t\\t\\tclipPosition *= clipW; //clip\\n\\t\\t\\treturn ( virtualCameraProjectionMatrixInverse * clipPosition ).xyz;//view\\n\\t\\t}\\n\\t\\tvoid main() {\\n\\t\\t\\tvec4 base = texture2DProj( tDiffuse, vUv );\\n\\t\\t\\t#ifdef useDepthTexture\\n\\t\\t\\t\\tvec2 uv=(gl_FragCoord.xy-.5)/resolution.xy;\\n\\t\\t\\t\\tuv.x=1.-uv.x;\\n\\t\\t\\t\\tfloat depth = texture2DProj( tDepth, vUv ).r;\\n\\t\\t\\t\\tfloat viewZ = getViewZ( depth );\\n\\t\\t\\t\\tfloat clipW = virtualCameraProjectionMatrix[2][3] * viewZ+virtualCameraProjectionMatrix[3][3];\\n\\t\\t\\t\\tvec3 viewPosition=getViewPosition( uv, depth, clipW );\\n\\t\\t\\t\\tvec3 worldPosition=(virtualCameraMatrixWorld*vec4(viewPosition,1)).xyz;\\n\\t\\t\\t\\tif(worldPosition.y>maxDistance) discard;\\n\\t\\t\\t\\tfloat op=opacity;\\n\\t\\t\\t\\t#ifdef DISTANCE_ATTENUATION\\n\\t\\t\\t\\t\\tfloat ratio=1.-(worldPosition.y/maxDistance);\\n\\t\\t\\t\\t\\tfloat attenuation=ratio*ratio;\\n\\t\\t\\t\\t\\top=opacity*attenuation;\\n\\t\\t\\t\\t#endif\\n\\t\\t\\t\\t#ifdef FRESNEL\\n\\t\\t\\t\\t\\top*=fresnelCoe;\\n\\t\\t\\t\\t#endif\\n\\t\\t\\t\\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), op );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );\\n\\t\\t\\t#endif\\n\\t\\t}\\n\\t\"\n};\nexport { ReflectorForSSRPass };","map":{"version":3,"names":["Mesh","Color","Vector3","Vector2","Matrix4","PerspectiveCamera","DepthTexture","UnsignedShortType","NearestFilter","WebGLRenderTarget","ShaderMaterial","UniformsUtils","Plane","ReflectorForSSRPass","geometry","options","type","scope","color","undefined","textureWidth","textureHeight","clipBias","shader","ReflectorShader","useDepthTexture","yAxis","vecTemp0","vecTemp1","needsUpdate","maxDistance","uniforms","value","opacity","resolution","window","innerWidth","innerHeight","_distanceAttenuation","defines","DISTANCE_ATTENUATION","Object","defineProperty","get","set","val","material","_fresnel","FRESNEL","normal","reflectorWorldPosition","cameraWorldPosition","rotationMatrix","lookAtPosition","view","target","textureMatrix","virtualCamera","depthTexture","minFilter","magFilter","parameters","renderTarget","transparent","assign","clone","fragmentShader","vertexShader","texture","globalPlane","globalPlanes","doRender","renderer","scene","camera","copy","position","normalize","reflect","dot","setFromMatrixPosition","matrixWorld","extractRotation","applyMatrix4","subVectors","negate","add","up","lookAt","far","updateMatrixWorld","projectionMatrix","near","projectionMatrixInverse","multiply","matrixWorldInverse","encoding","outputEncoding","currentRenderTarget","getRenderTarget","currentXrEnabled","xr","enabled","currentShadowAutoUpdate","shadowMap","autoUpdate","currentClippingPlanes","clippingPlanes","setRenderTarget","state","buffers","depth","setMask","autoClear","clear","render","viewport","prototype","isReflectorForSSRPass","tDiffuse","tDepth","fresnelCoe","virtualCameraNear","virtualCameraFar","virtualCameraProjectionMatrix","virtualCameraMatrixWorld","virtualCameraProjectionMatrixInverse"],"sources":["D:/Jord/l4fycy/node_modules/three-stdlib/objects/ReflectorForSSRPass.js"],"sourcesContent":["import { Mesh, Color, Vector3, Vector2, Matrix4, PerspectiveCamera, DepthTexture, UnsignedShortType, NearestFilter, WebGLRenderTarget, ShaderMaterial, UniformsUtils, Plane } from 'three';\n\nclass ReflectorForSSRPass extends Mesh {\n  constructor(geometry, options = {}) {\n    super(geometry);\n    this.type = 'ReflectorForSSRPass';\n    const scope = this;\n    const color = options.color !== undefined ? new Color(options.color) : new Color(0x7f7f7f);\n    const textureWidth = options.textureWidth || 512;\n    const textureHeight = options.textureHeight || 512;\n    const clipBias = options.clipBias || 0;\n    const shader = options.shader || ReflectorForSSRPass.ReflectorShader;\n    const useDepthTexture = options.useDepthTexture === true;\n    const yAxis = new Vector3(0, 1, 0);\n    const vecTemp0 = new Vector3();\n    const vecTemp1 = new Vector3(); //\n\n    scope.needsUpdate = false;\n    scope.maxDistance = ReflectorForSSRPass.ReflectorShader.uniforms.maxDistance.value;\n    scope.opacity = ReflectorForSSRPass.ReflectorShader.uniforms.opacity.value;\n    scope.color = color;\n    scope.resolution = options.resolution || new Vector2(window.innerWidth, window.innerHeight);\n    scope._distanceAttenuation = ReflectorForSSRPass.ReflectorShader.defines.DISTANCE_ATTENUATION;\n    Object.defineProperty(scope, 'distanceAttenuation', {\n      get() {\n        return scope._distanceAttenuation;\n      },\n\n      set(val) {\n        if (scope._distanceAttenuation === val) return;\n        scope._distanceAttenuation = val;\n        scope.material.defines.DISTANCE_ATTENUATION = val;\n        scope.material.needsUpdate = true;\n      }\n\n    });\n    scope._fresnel = ReflectorForSSRPass.ReflectorShader.defines.FRESNEL;\n    Object.defineProperty(scope, 'fresnel', {\n      get() {\n        return scope._fresnel;\n      },\n\n      set(val) {\n        if (scope._fresnel === val) return;\n        scope._fresnel = val;\n        scope.material.defines.FRESNEL = val;\n        scope.material.needsUpdate = true;\n      }\n\n    });\n    const normal = new Vector3();\n    const reflectorWorldPosition = new Vector3();\n    const cameraWorldPosition = new Vector3();\n    const rotationMatrix = new Matrix4();\n    const lookAtPosition = new Vector3(0, 0, -1);\n    const view = new Vector3();\n    const target = new Vector3();\n    const textureMatrix = new Matrix4();\n    const virtualCamera = new PerspectiveCamera();\n    let depthTexture;\n\n    if (useDepthTexture) {\n      depthTexture = new DepthTexture();\n      depthTexture.type = UnsignedShortType;\n      depthTexture.minFilter = NearestFilter;\n      depthTexture.magFilter = NearestFilter;\n    }\n\n    const parameters = {\n      depthTexture: useDepthTexture ? depthTexture : null\n    };\n    const renderTarget = new WebGLRenderTarget(textureWidth, textureHeight, parameters);\n    const material = new ShaderMaterial({\n      transparent: useDepthTexture,\n      defines: Object.assign({}, ReflectorForSSRPass.ReflectorShader.defines, {\n        useDepthTexture\n      }),\n      uniforms: UniformsUtils.clone(shader.uniforms),\n      fragmentShader: shader.fragmentShader,\n      vertexShader: shader.vertexShader\n    });\n    material.uniforms['tDiffuse'].value = renderTarget.texture;\n    material.uniforms['color'].value = scope.color;\n    material.uniforms['textureMatrix'].value = textureMatrix;\n\n    if (useDepthTexture) {\n      material.uniforms['tDepth'].value = renderTarget.depthTexture;\n    }\n\n    this.material = material;\n    const globalPlane = new Plane(new Vector3(0, 1, 0), clipBias);\n    const globalPlanes = [globalPlane];\n\n    this.doRender = function (renderer, scene, camera) {\n      material.uniforms['maxDistance'].value = scope.maxDistance;\n      material.uniforms['color'].value = scope.color;\n      material.uniforms['opacity'].value = scope.opacity;\n      vecTemp0.copy(camera.position).normalize();\n      vecTemp1.copy(vecTemp0).reflect(yAxis);\n      material.uniforms['fresnelCoe'].value = (vecTemp0.dot(vecTemp1) + 1) / 2; // TODO: Also need to use glsl viewPosition and viewNormal per pixel.\n\n      reflectorWorldPosition.setFromMatrixPosition(scope.matrixWorld);\n      cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);\n      rotationMatrix.extractRotation(scope.matrixWorld);\n      normal.set(0, 0, 1);\n      normal.applyMatrix4(rotationMatrix);\n      view.subVectors(reflectorWorldPosition, cameraWorldPosition); // Avoid rendering when reflector is facing away\n\n      if (view.dot(normal) > 0) return;\n      view.reflect(normal).negate();\n      view.add(reflectorWorldPosition);\n      rotationMatrix.extractRotation(camera.matrixWorld);\n      lookAtPosition.set(0, 0, -1);\n      lookAtPosition.applyMatrix4(rotationMatrix);\n      lookAtPosition.add(cameraWorldPosition);\n      target.subVectors(reflectorWorldPosition, lookAtPosition);\n      target.reflect(normal).negate();\n      target.add(reflectorWorldPosition);\n      virtualCamera.position.copy(view);\n      virtualCamera.up.set(0, 1, 0);\n      virtualCamera.up.applyMatrix4(rotationMatrix);\n      virtualCamera.up.reflect(normal);\n      virtualCamera.lookAt(target);\n      virtualCamera.far = camera.far; // Used in WebGLBackground\n\n      virtualCamera.updateMatrixWorld();\n      virtualCamera.projectionMatrix.copy(camera.projectionMatrix);\n      material.uniforms['virtualCameraNear'].value = camera.near;\n      material.uniforms['virtualCameraFar'].value = camera.far;\n      material.uniforms['virtualCameraMatrixWorld'].value = virtualCamera.matrixWorld;\n      material.uniforms['virtualCameraProjectionMatrix'].value = camera.projectionMatrix;\n      material.uniforms['virtualCameraProjectionMatrixInverse'].value = camera.projectionMatrixInverse;\n      material.uniforms['resolution'].value = scope.resolution; // Update the texture matrix\n\n      textureMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n      textureMatrix.multiply(virtualCamera.projectionMatrix);\n      textureMatrix.multiply(virtualCamera.matrixWorldInverse);\n      textureMatrix.multiply(scope.matrixWorld); // Render\n\n      renderTarget.texture.encoding = renderer.outputEncoding; // scope.visible = false;\n\n      const currentRenderTarget = renderer.getRenderTarget();\n      const currentXrEnabled = renderer.xr.enabled;\n      const currentShadowAutoUpdate = renderer.shadowMap.autoUpdate;\n      const currentClippingPlanes = renderer.clippingPlanes;\n      renderer.xr.enabled = false; // Avoid camera modification\n\n      renderer.shadowMap.autoUpdate = false; // Avoid re-computing shadows\n\n      renderer.clippingPlanes = globalPlanes;\n      renderer.setRenderTarget(renderTarget);\n      renderer.state.buffers.depth.setMask(true); // make sure the depth buffer is writable so it can be properly cleared, see #18897\n\n      if (renderer.autoClear === false) renderer.clear();\n      renderer.render(scene, virtualCamera);\n      renderer.xr.enabled = currentXrEnabled;\n      renderer.shadowMap.autoUpdate = currentShadowAutoUpdate;\n      renderer.clippingPlanes = currentClippingPlanes;\n      renderer.setRenderTarget(currentRenderTarget); // Restore viewport\n\n      const viewport = camera.viewport;\n\n      if (viewport !== undefined) {\n        renderer.state.viewport(viewport);\n      } // scope.visible = true;\n\n    };\n\n    this.getRenderTarget = function () {\n      return renderTarget;\n    };\n  }\n\n}\n\nReflectorForSSRPass.prototype.isReflectorForSSRPass = true;\nReflectorForSSRPass.ReflectorShader = {\n  defines: {\n    DISTANCE_ATTENUATION: true,\n    FRESNEL: true\n  },\n  uniforms: {\n    color: {\n      value: null\n    },\n    tDiffuse: {\n      value: null\n    },\n    tDepth: {\n      value: null\n    },\n    textureMatrix: {\n      value: new Matrix4()\n    },\n    maxDistance: {\n      value: 180\n    },\n    opacity: {\n      value: 0.5\n    },\n    fresnelCoe: {\n      value: null\n    },\n    virtualCameraNear: {\n      value: null\n    },\n    virtualCameraFar: {\n      value: null\n    },\n    virtualCameraProjectionMatrix: {\n      value: new Matrix4()\n    },\n    virtualCameraMatrixWorld: {\n      value: new Matrix4()\n    },\n    virtualCameraProjectionMatrixInverse: {\n      value: new Matrix4()\n    },\n    resolution: {\n      value: new Vector2()\n    }\n  },\n  vertexShader:\n  /* glsl */\n  `\n\t\tuniform mat4 textureMatrix;\n\t\tvarying vec4 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = textureMatrix * vec4( position, 1.0 );\n\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n  fragmentShader:\n  /* glsl */\n  `\n\t\tuniform vec3 color;\n\t\tuniform sampler2D tDiffuse;\n\t\tuniform sampler2D tDepth;\n\t\tuniform float maxDistance;\n\t\tuniform float opacity;\n\t\tuniform float fresnelCoe;\n\t\tuniform float virtualCameraNear;\n\t\tuniform float virtualCameraFar;\n\t\tuniform mat4 virtualCameraProjectionMatrix;\n\t\tuniform mat4 virtualCameraProjectionMatrixInverse;\n\t\tuniform mat4 virtualCameraMatrixWorld;\n\t\tuniform vec2 resolution;\n\t\tvarying vec4 vUv;\n\t\t#include <packing>\n\t\tfloat blendOverlay( float base, float blend ) {\n\t\t\treturn( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );\n\t\t}\n\t\tvec3 blendOverlay( vec3 base, vec3 blend ) {\n\t\t\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ), blendOverlay( base.b, blend.b ) );\n\t\t}\n\t\tfloat getDepth( const in vec2 uv ) {\n\t\t\treturn texture2D( tDepth, uv ).x;\n\t\t}\n\t\tfloat getViewZ( const in float depth ) {\n\t\t\treturn perspectiveDepthToViewZ( depth, virtualCameraNear, virtualCameraFar );\n\t\t}\n\t\tvec3 getViewPosition( const in vec2 uv, const in float depth/*clip space*/, const in float clipW ) {\n\t\t\tvec4 clipPosition = vec4( ( vec3( uv, depth ) - 0.5 ) * 2.0, 1.0 );//ndc\n\t\t\tclipPosition *= clipW; //clip\n\t\t\treturn ( virtualCameraProjectionMatrixInverse * clipPosition ).xyz;//view\n\t\t}\n\t\tvoid main() {\n\t\t\tvec4 base = texture2DProj( tDiffuse, vUv );\n\t\t\t#ifdef useDepthTexture\n\t\t\t\tvec2 uv=(gl_FragCoord.xy-.5)/resolution.xy;\n\t\t\t\tuv.x=1.-uv.x;\n\t\t\t\tfloat depth = texture2DProj( tDepth, vUv ).r;\n\t\t\t\tfloat viewZ = getViewZ( depth );\n\t\t\t\tfloat clipW = virtualCameraProjectionMatrix[2][3] * viewZ+virtualCameraProjectionMatrix[3][3];\n\t\t\t\tvec3 viewPosition=getViewPosition( uv, depth, clipW );\n\t\t\t\tvec3 worldPosition=(virtualCameraMatrixWorld*vec4(viewPosition,1)).xyz;\n\t\t\t\tif(worldPosition.y>maxDistance) discard;\n\t\t\t\tfloat op=opacity;\n\t\t\t\t#ifdef DISTANCE_ATTENUATION\n\t\t\t\t\tfloat ratio=1.-(worldPosition.y/maxDistance);\n\t\t\t\t\tfloat attenuation=ratio*ratio;\n\t\t\t\t\top=opacity*attenuation;\n\t\t\t\t#endif\n\t\t\t\t#ifdef FRESNEL\n\t\t\t\t\top*=fresnelCoe;\n\t\t\t\t#endif\n\t\t\t\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), op );\n\t\t\t#else\n\t\t\t\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );\n\t\t\t#endif\n\t\t}\n\t`\n};\n\nexport { ReflectorForSSRPass };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}