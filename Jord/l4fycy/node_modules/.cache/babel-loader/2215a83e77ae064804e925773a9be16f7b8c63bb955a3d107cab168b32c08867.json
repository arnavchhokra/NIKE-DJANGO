{"ast":null,"code":"const {\n  CstParser,\n  Lexer,\n  createToken\n} = (() => {\n  var freeGlobal = typeof global == \"object\" && global && global.Object === Object && global;\n  const freeGlobal$1 = freeGlobal;\n  var freeSelf = typeof self == \"object\" && self && self.Object === Object && self;\n  var root = freeGlobal$1 || freeSelf || Function(\"return this\")();\n  const root$1 = root;\n  var Symbol$1 = root$1.Symbol;\n  const Symbol$2 = Symbol$1;\n  var objectProto$j = Object.prototype;\n  var hasOwnProperty$g = objectProto$j.hasOwnProperty;\n  var nativeObjectToString$1 = objectProto$j.toString;\n  var symToStringTag$1 = Symbol$2 ? Symbol$2.toStringTag : void 0;\n  function getRawTag(value) {\n    var isOwn = hasOwnProperty$g.call(value, symToStringTag$1),\n      tag = value[symToStringTag$1];\n    try {\n      value[symToStringTag$1] = void 0;\n      var unmasked = true;\n    } catch (e) {}\n    var result = nativeObjectToString$1.call(value);\n    if (unmasked) {\n      if (isOwn) {\n        value[symToStringTag$1] = tag;\n      } else {\n        delete value[symToStringTag$1];\n      }\n    }\n    return result;\n  }\n  var objectProto$i = Object.prototype;\n  var nativeObjectToString = objectProto$i.toString;\n  function objectToString(value) {\n    return nativeObjectToString.call(value);\n  }\n  var nullTag = \"[object Null]\",\n    undefinedTag = \"[object Undefined]\";\n  var symToStringTag = Symbol$2 ? Symbol$2.toStringTag : void 0;\n  function baseGetTag(value) {\n    if (value == null) {\n      return value === void 0 ? undefinedTag : nullTag;\n    }\n    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);\n  }\n  function isObjectLike(value) {\n    return value != null && typeof value == \"object\";\n  }\n  var symbolTag$3 = \"[object Symbol]\";\n  function isSymbol(value) {\n    return typeof value == \"symbol\" || isObjectLike(value) && baseGetTag(value) == symbolTag$3;\n  }\n  function arrayMap(array, iteratee) {\n    var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n    while (++index < length) {\n      result[index] = iteratee(array[index], index, array);\n    }\n    return result;\n  }\n  var isArray = Array.isArray;\n  const isArray$1 = isArray;\n  var INFINITY$3 = 1 / 0;\n  var symbolProto$2 = Symbol$2 ? Symbol$2.prototype : void 0,\n    symbolToString = symbolProto$2 ? symbolProto$2.toString : void 0;\n  function baseToString(value) {\n    if (typeof value == \"string\") {\n      return value;\n    }\n    if (isArray$1(value)) {\n      return arrayMap(value, baseToString) + \"\";\n    }\n    if (isSymbol(value)) {\n      return symbolToString ? symbolToString.call(value) : \"\";\n    }\n    var result = value + \"\";\n    return result == \"0\" && 1 / value == -INFINITY$3 ? \"-0\" : result;\n  }\n  var reWhitespace = /\\s/;\n  function trimmedEndIndex(string) {\n    var index = string.length;\n    while (index-- && reWhitespace.test(string.charAt(index))) {}\n    return index;\n  }\n  var reTrimStart = /^\\s+/;\n  function baseTrim(string) {\n    return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, \"\") : string;\n  }\n  function isObject(value) {\n    var type = typeof value;\n    return value != null && (type == \"object\" || type == \"function\");\n  }\n  var NAN = 0 / 0;\n  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n  var reIsBinary = /^0b[01]+$/i;\n  var reIsOctal = /^0o[0-7]+$/i;\n  var freeParseInt = parseInt;\n  function toNumber(value) {\n    if (typeof value == \"number\") {\n      return value;\n    }\n    if (isSymbol(value)) {\n      return NAN;\n    }\n    if (isObject(value)) {\n      var other = typeof value.valueOf == \"function\" ? value.valueOf() : value;\n      value = isObject(other) ? other + \"\" : other;\n    }\n    if (typeof value != \"string\") {\n      return value === 0 ? value : +value;\n    }\n    value = baseTrim(value);\n    var isBinary = reIsBinary.test(value);\n    return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;\n  }\n  var INFINITY$2 = 1 / 0,\n    MAX_INTEGER = 17976931348623157e292;\n  function toFinite(value) {\n    if (!value) {\n      return value === 0 ? value : 0;\n    }\n    value = toNumber(value);\n    if (value === INFINITY$2 || value === -INFINITY$2) {\n      var sign = value < 0 ? -1 : 1;\n      return sign * MAX_INTEGER;\n    }\n    return value === value ? value : 0;\n  }\n  function toInteger(value) {\n    var result = toFinite(value),\n      remainder = result % 1;\n    return result === result ? remainder ? result - remainder : result : 0;\n  }\n  function identity(value) {\n    return value;\n  }\n  var asyncTag = \"[object AsyncFunction]\",\n    funcTag$2 = \"[object Function]\",\n    genTag$1 = \"[object GeneratorFunction]\",\n    proxyTag = \"[object Proxy]\";\n  function isFunction(value) {\n    if (!isObject(value)) {\n      return false;\n    }\n    var tag = baseGetTag(value);\n    return tag == funcTag$2 || tag == genTag$1 || tag == asyncTag || tag == proxyTag;\n  }\n  var coreJsData = root$1[\"__core-js_shared__\"];\n  const coreJsData$1 = coreJsData;\n  var maskSrcKey = function () {\n    var uid = /[^.]+$/.exec(coreJsData$1 && coreJsData$1.keys && coreJsData$1.keys.IE_PROTO || \"\");\n    return uid ? \"Symbol(src)_1.\" + uid : \"\";\n  }();\n  function isMasked(func) {\n    return !!maskSrcKey && maskSrcKey in func;\n  }\n  var funcProto$1 = Function.prototype;\n  var funcToString$1 = funcProto$1.toString;\n  function toSource(func) {\n    if (func != null) {\n      try {\n        return funcToString$1.call(func);\n      } catch (e) {}\n      try {\n        return func + \"\";\n      } catch (e) {}\n    }\n    return \"\";\n  }\n  var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n  var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n  var funcProto = Function.prototype,\n    objectProto$h = Object.prototype;\n  var funcToString = funcProto.toString;\n  var hasOwnProperty$f = objectProto$h.hasOwnProperty;\n  var reIsNative = RegExp(\"^\" + funcToString.call(hasOwnProperty$f).replace(reRegExpChar, \"\\\\$&\").replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, \"$1.*?\") + \"$\");\n  function baseIsNative(value) {\n    if (!isObject(value) || isMasked(value)) {\n      return false;\n    }\n    var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n    return pattern.test(toSource(value));\n  }\n  function getValue(object, key) {\n    return object == null ? void 0 : object[key];\n  }\n  function getNative(object, key) {\n    var value = getValue(object, key);\n    return baseIsNative(value) ? value : void 0;\n  }\n  var WeakMap = getNative(root$1, \"WeakMap\");\n  const WeakMap$1 = WeakMap;\n  var objectCreate = Object.create;\n  var baseCreate = function () {\n    function object() {}\n    return function (proto) {\n      if (!isObject(proto)) {\n        return {};\n      }\n      if (objectCreate) {\n        return objectCreate(proto);\n      }\n      object.prototype = proto;\n      var result = new object();\n      object.prototype = void 0;\n      return result;\n    };\n  }();\n  const baseCreate$1 = baseCreate;\n  function apply(func, thisArg, args) {\n    switch (args.length) {\n      case 0:\n        return func.call(thisArg);\n      case 1:\n        return func.call(thisArg, args[0]);\n      case 2:\n        return func.call(thisArg, args[0], args[1]);\n      case 3:\n        return func.call(thisArg, args[0], args[1], args[2]);\n    }\n    return func.apply(thisArg, args);\n  }\n  function noop() {}\n  function copyArray(source, array) {\n    var index = -1,\n      length = source.length;\n    array || (array = Array(length));\n    while (++index < length) {\n      array[index] = source[index];\n    }\n    return array;\n  }\n  var HOT_COUNT = 800,\n    HOT_SPAN = 16;\n  var nativeNow = Date.now;\n  function shortOut(func) {\n    var count = 0,\n      lastCalled = 0;\n    return function () {\n      var stamp = nativeNow(),\n        remaining = HOT_SPAN - (stamp - lastCalled);\n      lastCalled = stamp;\n      if (remaining > 0) {\n        if (++count >= HOT_COUNT) {\n          return arguments[0];\n        }\n      } else {\n        count = 0;\n      }\n      return func.apply(void 0, arguments);\n    };\n  }\n  function constant(value) {\n    return function () {\n      return value;\n    };\n  }\n  var defineProperty = function () {\n    try {\n      var func = getNative(Object, \"defineProperty\");\n      func({}, \"\", {});\n      return func;\n    } catch (e) {}\n  }();\n  const defineProperty$1 = defineProperty;\n  var baseSetToString = !defineProperty$1 ? identity : function (func, string) {\n    return defineProperty$1(func, \"toString\", {\n      configurable: true,\n      enumerable: false,\n      value: constant(string),\n      writable: true\n    });\n  };\n  const baseSetToString$1 = baseSetToString;\n  var setToString = shortOut(baseSetToString$1);\n  const setToString$1 = setToString;\n  function arrayEach(array, iteratee) {\n    var index = -1,\n      length = array == null ? 0 : array.length;\n    while (++index < length) {\n      if (iteratee(array[index], index, array) === false) {\n        break;\n      }\n    }\n    return array;\n  }\n  function baseFindIndex(array, predicate, fromIndex, fromRight) {\n    var length = array.length,\n      index = fromIndex + (fromRight ? 1 : -1);\n    while (fromRight ? index-- : ++index < length) {\n      if (predicate(array[index], index, array)) {\n        return index;\n      }\n    }\n    return -1;\n  }\n  function baseIsNaN(value) {\n    return value !== value;\n  }\n  function strictIndexOf(array, value, fromIndex) {\n    var index = fromIndex - 1,\n      length = array.length;\n    while (++index < length) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n    return -1;\n  }\n  function baseIndexOf(array, value, fromIndex) {\n    return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);\n  }\n  function arrayIncludes(array, value) {\n    var length = array == null ? 0 : array.length;\n    return !!length && baseIndexOf(array, value, 0) > -1;\n  }\n  var MAX_SAFE_INTEGER$1 = 9007199254740991;\n  var reIsUint = /^(?:0|[1-9]\\d*)$/;\n  function isIndex(value, length) {\n    var type = typeof value;\n    length = length == null ? MAX_SAFE_INTEGER$1 : length;\n    return !!length && (type == \"number\" || type != \"symbol\" && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;\n  }\n  function baseAssignValue(object, key, value) {\n    if (key == \"__proto__\" && defineProperty$1) {\n      defineProperty$1(object, key, {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      });\n    } else {\n      object[key] = value;\n    }\n  }\n  function eq(value, other) {\n    return value === other || value !== value && other !== other;\n  }\n  var objectProto$g = Object.prototype;\n  var hasOwnProperty$e = objectProto$g.hasOwnProperty;\n  function assignValue(object, key, value) {\n    var objValue = object[key];\n    if (!(hasOwnProperty$e.call(object, key) && eq(objValue, value)) || value === void 0 && !(key in object)) {\n      baseAssignValue(object, key, value);\n    }\n  }\n  function copyObject(source, props, object, customizer) {\n    var isNew = !object;\n    object || (object = {});\n    var index = -1,\n      length = props.length;\n    while (++index < length) {\n      var key = props[index];\n      var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;\n      if (newValue === void 0) {\n        newValue = source[key];\n      }\n      if (isNew) {\n        baseAssignValue(object, key, newValue);\n      } else {\n        assignValue(object, key, newValue);\n      }\n    }\n    return object;\n  }\n  var nativeMax$3 = Math.max;\n  function overRest(func, start, transform) {\n    start = nativeMax$3(start === void 0 ? func.length - 1 : start, 0);\n    return function () {\n      var args = arguments,\n        index = -1,\n        length = nativeMax$3(args.length - start, 0),\n        array = Array(length);\n      while (++index < length) {\n        array[index] = args[start + index];\n      }\n      index = -1;\n      var otherArgs = Array(start + 1);\n      while (++index < start) {\n        otherArgs[index] = args[index];\n      }\n      otherArgs[start] = transform(array);\n      return apply(func, this, otherArgs);\n    };\n  }\n  function baseRest(func, start) {\n    return setToString$1(overRest(func, start, identity), func + \"\");\n  }\n  var MAX_SAFE_INTEGER = 9007199254740991;\n  function isLength(value) {\n    return typeof value == \"number\" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n  }\n  function isArrayLike(value) {\n    return value != null && isLength(value.length) && !isFunction(value);\n  }\n  function isIterateeCall(value, index, object) {\n    if (!isObject(object)) {\n      return false;\n    }\n    var type = typeof index;\n    if (type == \"number\" ? isArrayLike(object) && isIndex(index, object.length) : type == \"string\" && index in object) {\n      return eq(object[index], value);\n    }\n    return false;\n  }\n  function createAssigner(assigner) {\n    return baseRest(function (object, sources) {\n      var index = -1,\n        length = sources.length,\n        customizer = length > 1 ? sources[length - 1] : void 0,\n        guard = length > 2 ? sources[2] : void 0;\n      customizer = assigner.length > 3 && typeof customizer == \"function\" ? (length--, customizer) : void 0;\n      if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n        customizer = length < 3 ? void 0 : customizer;\n        length = 1;\n      }\n      object = Object(object);\n      while (++index < length) {\n        var source = sources[index];\n        if (source) {\n          assigner(object, source, index, customizer);\n        }\n      }\n      return object;\n    });\n  }\n  var objectProto$f = Object.prototype;\n  function isPrototype(value) {\n    var Ctor = value && value.constructor,\n      proto = typeof Ctor == \"function\" && Ctor.prototype || objectProto$f;\n    return value === proto;\n  }\n  function baseTimes(n, iteratee) {\n    var index = -1,\n      result = Array(n);\n    while (++index < n) {\n      result[index] = iteratee(index);\n    }\n    return result;\n  }\n  var argsTag$3 = \"[object Arguments]\";\n  function baseIsArguments(value) {\n    return isObjectLike(value) && baseGetTag(value) == argsTag$3;\n  }\n  var objectProto$e = Object.prototype;\n  var hasOwnProperty$d = objectProto$e.hasOwnProperty;\n  var propertyIsEnumerable$1 = objectProto$e.propertyIsEnumerable;\n  var isArguments = baseIsArguments(function () {\n    return arguments;\n  }()) ? baseIsArguments : function (value) {\n    return isObjectLike(value) && hasOwnProperty$d.call(value, \"callee\") && !propertyIsEnumerable$1.call(value, \"callee\");\n  };\n  const isArguments$1 = isArguments;\n  function stubFalse() {\n    return false;\n  }\n  var freeExports$2 = typeof exports == \"object\" && exports && !exports.nodeType && exports;\n  var freeModule$2 = freeExports$2 && typeof module == \"object\" && module && !module.nodeType && module;\n  var moduleExports$2 = freeModule$2 && freeModule$2.exports === freeExports$2;\n  var Buffer$1 = moduleExports$2 ? root$1.Buffer : void 0;\n  var nativeIsBuffer = Buffer$1 ? Buffer$1.isBuffer : void 0;\n  var isBuffer = nativeIsBuffer || stubFalse;\n  const isBuffer$1 = isBuffer;\n  var argsTag$2 = \"[object Arguments]\",\n    arrayTag$2 = \"[object Array]\",\n    boolTag$3 = \"[object Boolean]\",\n    dateTag$3 = \"[object Date]\",\n    errorTag$2 = \"[object Error]\",\n    funcTag$1 = \"[object Function]\",\n    mapTag$6 = \"[object Map]\",\n    numberTag$3 = \"[object Number]\",\n    objectTag$3 = \"[object Object]\",\n    regexpTag$4 = \"[object RegExp]\",\n    setTag$6 = \"[object Set]\",\n    stringTag$4 = \"[object String]\",\n    weakMapTag$2 = \"[object WeakMap]\";\n  var arrayBufferTag$3 = \"[object ArrayBuffer]\",\n    dataViewTag$4 = \"[object DataView]\",\n    float32Tag$2 = \"[object Float32Array]\",\n    float64Tag$2 = \"[object Float64Array]\",\n    int8Tag$2 = \"[object Int8Array]\",\n    int16Tag$2 = \"[object Int16Array]\",\n    int32Tag$2 = \"[object Int32Array]\",\n    uint8Tag$2 = \"[object Uint8Array]\",\n    uint8ClampedTag$2 = \"[object Uint8ClampedArray]\",\n    uint16Tag$2 = \"[object Uint16Array]\",\n    uint32Tag$2 = \"[object Uint32Array]\";\n  var typedArrayTags = {};\n  typedArrayTags[float32Tag$2] = typedArrayTags[float64Tag$2] = typedArrayTags[int8Tag$2] = typedArrayTags[int16Tag$2] = typedArrayTags[int32Tag$2] = typedArrayTags[uint8Tag$2] = typedArrayTags[uint8ClampedTag$2] = typedArrayTags[uint16Tag$2] = typedArrayTags[uint32Tag$2] = true;\n  typedArrayTags[argsTag$2] = typedArrayTags[arrayTag$2] = typedArrayTags[arrayBufferTag$3] = typedArrayTags[boolTag$3] = typedArrayTags[dataViewTag$4] = typedArrayTags[dateTag$3] = typedArrayTags[errorTag$2] = typedArrayTags[funcTag$1] = typedArrayTags[mapTag$6] = typedArrayTags[numberTag$3] = typedArrayTags[objectTag$3] = typedArrayTags[regexpTag$4] = typedArrayTags[setTag$6] = typedArrayTags[stringTag$4] = typedArrayTags[weakMapTag$2] = false;\n  function baseIsTypedArray(value) {\n    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n  }\n  function baseUnary(func) {\n    return function (value) {\n      return func(value);\n    };\n  }\n  var freeExports$1 = typeof exports == \"object\" && exports && !exports.nodeType && exports;\n  var freeModule$1 = freeExports$1 && typeof module == \"object\" && module && !module.nodeType && module;\n  var moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;\n  var freeProcess = moduleExports$1 && freeGlobal$1.process;\n  var nodeUtil = function () {\n    try {\n      var types = freeModule$1 && freeModule$1.require && freeModule$1.require(\"util\").types;\n      if (types) {\n        return types;\n      }\n      return freeProcess && freeProcess.binding && freeProcess.binding(\"util\");\n    } catch (e) {}\n  }();\n  const nodeUtil$1 = nodeUtil;\n  var nodeIsTypedArray = nodeUtil$1 && nodeUtil$1.isTypedArray;\n  var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n  const isTypedArray$1 = isTypedArray;\n  var objectProto$d = Object.prototype;\n  var hasOwnProperty$c = objectProto$d.hasOwnProperty;\n  function arrayLikeKeys(value, inherited) {\n    var isArr = isArray$1(value),\n      isArg = !isArr && isArguments$1(value),\n      isBuff = !isArr && !isArg && isBuffer$1(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray$1(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n    for (var key in value) {\n      if ((inherited || hasOwnProperty$c.call(value, key)) && !(skipIndexes && (\n      // Safari 9 has enumerable `arguments.length` in strict mode.\n      key == \"length\" ||\n      // Node.js 0.10 has enumerable non-index properties on buffers.\n      isBuff && (key == \"offset\" || key == \"parent\") ||\n      // PhantomJS 2 has enumerable non-index properties on typed arrays.\n      isType && (key == \"buffer\" || key == \"byteLength\" || key == \"byteOffset\") ||\n      // Skip index properties.\n      isIndex(key, length)))) {\n        result.push(key);\n      }\n    }\n    return result;\n  }\n  function overArg(func, transform) {\n    return function (arg) {\n      return func(transform(arg));\n    };\n  }\n  var nativeKeys = overArg(Object.keys, Object);\n  const nativeKeys$1 = nativeKeys;\n  var objectProto$c = Object.prototype;\n  var hasOwnProperty$b = objectProto$c.hasOwnProperty;\n  function baseKeys(object) {\n    if (!isPrototype(object)) {\n      return nativeKeys$1(object);\n    }\n    var result = [];\n    for (var key in Object(object)) {\n      if (hasOwnProperty$b.call(object, key) && key != \"constructor\") {\n        result.push(key);\n      }\n    }\n    return result;\n  }\n  function keys(object) {\n    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n  }\n  var objectProto$b = Object.prototype;\n  var hasOwnProperty$a = objectProto$b.hasOwnProperty;\n  var assign = createAssigner(function (object, source) {\n    if (isPrototype(source) || isArrayLike(source)) {\n      copyObject(source, keys(source), object);\n      return;\n    }\n    for (var key in source) {\n      if (hasOwnProperty$a.call(source, key)) {\n        assignValue(object, key, source[key]);\n      }\n    }\n  });\n  const assign$1 = assign;\n  function nativeKeysIn(object) {\n    var result = [];\n    if (object != null) {\n      for (var key in Object(object)) {\n        result.push(key);\n      }\n    }\n    return result;\n  }\n  var objectProto$a = Object.prototype;\n  var hasOwnProperty$9 = objectProto$a.hasOwnProperty;\n  function baseKeysIn(object) {\n    if (!isObject(object)) {\n      return nativeKeysIn(object);\n    }\n    var isProto = isPrototype(object),\n      result = [];\n    for (var key in object) {\n      if (!(key == \"constructor\" && (isProto || !hasOwnProperty$9.call(object, key)))) {\n        result.push(key);\n      }\n    }\n    return result;\n  }\n  function keysIn(object) {\n    return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n  }\n  var reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/;\n  function isKey(value, object) {\n    if (isArray$1(value)) {\n      return false;\n    }\n    var type = typeof value;\n    if (type == \"number\" || type == \"symbol\" || type == \"boolean\" || value == null || isSymbol(value)) {\n      return true;\n    }\n    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);\n  }\n  var nativeCreate = getNative(Object, \"create\");\n  const nativeCreate$1 = nativeCreate;\n  function hashClear() {\n    this.__data__ = nativeCreate$1 ? nativeCreate$1(null) : {};\n    this.size = 0;\n  }\n  function hashDelete(key) {\n    var result = this.has(key) && delete this.__data__[key];\n    this.size -= result ? 1 : 0;\n    return result;\n  }\n  var HASH_UNDEFINED$2 = \"__lodash_hash_undefined__\";\n  var objectProto$9 = Object.prototype;\n  var hasOwnProperty$8 = objectProto$9.hasOwnProperty;\n  function hashGet(key) {\n    var data = this.__data__;\n    if (nativeCreate$1) {\n      var result = data[key];\n      return result === HASH_UNDEFINED$2 ? void 0 : result;\n    }\n    return hasOwnProperty$8.call(data, key) ? data[key] : void 0;\n  }\n  var objectProto$8 = Object.prototype;\n  var hasOwnProperty$7 = objectProto$8.hasOwnProperty;\n  function hashHas(key) {\n    var data = this.__data__;\n    return nativeCreate$1 ? data[key] !== void 0 : hasOwnProperty$7.call(data, key);\n  }\n  var HASH_UNDEFINED$1 = \"__lodash_hash_undefined__\";\n  function hashSet(key, value) {\n    var data = this.__data__;\n    this.size += this.has(key) ? 0 : 1;\n    data[key] = nativeCreate$1 && value === void 0 ? HASH_UNDEFINED$1 : value;\n    return this;\n  }\n  function Hash(entries) {\n    var index = -1,\n      length = entries == null ? 0 : entries.length;\n    this.clear();\n    while (++index < length) {\n      var entry = entries[index];\n      this.set(entry[0], entry[1]);\n    }\n  }\n  Hash.prototype.clear = hashClear;\n  Hash.prototype[\"delete\"] = hashDelete;\n  Hash.prototype.get = hashGet;\n  Hash.prototype.has = hashHas;\n  Hash.prototype.set = hashSet;\n  function listCacheClear() {\n    this.__data__ = [];\n    this.size = 0;\n  }\n  function assocIndexOf(array, key) {\n    var length = array.length;\n    while (length--) {\n      if (eq(array[length][0], key)) {\n        return length;\n      }\n    }\n    return -1;\n  }\n  var arrayProto = Array.prototype;\n  var splice = arrayProto.splice;\n  function listCacheDelete(key) {\n    var data = this.__data__,\n      index = assocIndexOf(data, key);\n    if (index < 0) {\n      return false;\n    }\n    var lastIndex = data.length - 1;\n    if (index == lastIndex) {\n      data.pop();\n    } else {\n      splice.call(data, index, 1);\n    }\n    --this.size;\n    return true;\n  }\n  function listCacheGet(key) {\n    var data = this.__data__,\n      index = assocIndexOf(data, key);\n    return index < 0 ? void 0 : data[index][1];\n  }\n  function listCacheHas(key) {\n    return assocIndexOf(this.__data__, key) > -1;\n  }\n  function listCacheSet(key, value) {\n    var data = this.__data__,\n      index = assocIndexOf(data, key);\n    if (index < 0) {\n      ++this.size;\n      data.push([key, value]);\n    } else {\n      data[index][1] = value;\n    }\n    return this;\n  }\n  function ListCache(entries) {\n    var index = -1,\n      length = entries == null ? 0 : entries.length;\n    this.clear();\n    while (++index < length) {\n      var entry = entries[index];\n      this.set(entry[0], entry[1]);\n    }\n  }\n  ListCache.prototype.clear = listCacheClear;\n  ListCache.prototype[\"delete\"] = listCacheDelete;\n  ListCache.prototype.get = listCacheGet;\n  ListCache.prototype.has = listCacheHas;\n  ListCache.prototype.set = listCacheSet;\n  var Map$1 = getNative(root$1, \"Map\");\n  const Map$2 = Map$1;\n  function mapCacheClear() {\n    this.size = 0;\n    this.__data__ = {\n      hash: new Hash(),\n      map: new (Map$2 || ListCache)(),\n      string: new Hash()\n    };\n  }\n  function isKeyable(value) {\n    var type = typeof value;\n    return type == \"string\" || type == \"number\" || type == \"symbol\" || type == \"boolean\" ? value !== \"__proto__\" : value === null;\n  }\n  function getMapData(map2, key) {\n    var data = map2.__data__;\n    return isKeyable(key) ? data[typeof key == \"string\" ? \"string\" : \"hash\"] : data.map;\n  }\n  function mapCacheDelete(key) {\n    var result = getMapData(this, key)[\"delete\"](key);\n    this.size -= result ? 1 : 0;\n    return result;\n  }\n  function mapCacheGet(key) {\n    return getMapData(this, key).get(key);\n  }\n  function mapCacheHas(key) {\n    return getMapData(this, key).has(key);\n  }\n  function mapCacheSet(key, value) {\n    var data = getMapData(this, key),\n      size = data.size;\n    data.set(key, value);\n    this.size += data.size == size ? 0 : 1;\n    return this;\n  }\n  function MapCache(entries) {\n    var index = -1,\n      length = entries == null ? 0 : entries.length;\n    this.clear();\n    while (++index < length) {\n      var entry = entries[index];\n      this.set(entry[0], entry[1]);\n    }\n  }\n  MapCache.prototype.clear = mapCacheClear;\n  MapCache.prototype[\"delete\"] = mapCacheDelete;\n  MapCache.prototype.get = mapCacheGet;\n  MapCache.prototype.has = mapCacheHas;\n  MapCache.prototype.set = mapCacheSet;\n  var FUNC_ERROR_TEXT$1 = \"Expected a function\";\n  function memoize(func, resolver) {\n    if (typeof func != \"function\" || resolver != null && typeof resolver != \"function\") {\n      throw new TypeError(FUNC_ERROR_TEXT$1);\n    }\n    var memoized = function () {\n      var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n      if (cache.has(key)) {\n        return cache.get(key);\n      }\n      var result = func.apply(this, args);\n      memoized.cache = cache.set(key, result) || cache;\n      return result;\n    };\n    memoized.cache = new (memoize.Cache || MapCache)();\n    return memoized;\n  }\n  memoize.Cache = MapCache;\n  var MAX_MEMOIZE_SIZE = 500;\n  function memoizeCapped(func) {\n    var result = memoize(func, function (key) {\n      if (cache.size === MAX_MEMOIZE_SIZE) {\n        cache.clear();\n      }\n      return key;\n    });\n    var cache = result.cache;\n    return result;\n  }\n  var rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n  var reEscapeChar = /\\\\(\\\\)?/g;\n  var stringToPath = memoizeCapped(function (string) {\n    var result = [];\n    if (string.charCodeAt(0) === 46) {\n      result.push(\"\");\n    }\n    string.replace(rePropName, function (match, number, quote, subString) {\n      result.push(quote ? subString.replace(reEscapeChar, \"$1\") : number || match);\n    });\n    return result;\n  });\n  const stringToPath$1 = stringToPath;\n  function toString(value) {\n    return value == null ? \"\" : baseToString(value);\n  }\n  function castPath(value, object) {\n    if (isArray$1(value)) {\n      return value;\n    }\n    return isKey(value, object) ? [value] : stringToPath$1(toString(value));\n  }\n  var INFINITY$1 = 1 / 0;\n  function toKey(value) {\n    if (typeof value == \"string\" || isSymbol(value)) {\n      return value;\n    }\n    var result = value + \"\";\n    return result == \"0\" && 1 / value == -INFINITY$1 ? \"-0\" : result;\n  }\n  function baseGet(object, path) {\n    path = castPath(path, object);\n    var index = 0,\n      length = path.length;\n    while (object != null && index < length) {\n      object = object[toKey(path[index++])];\n    }\n    return index && index == length ? object : void 0;\n  }\n  function get(object, path, defaultValue) {\n    var result = object == null ? void 0 : baseGet(object, path);\n    return result === void 0 ? defaultValue : result;\n  }\n  function arrayPush(array, values2) {\n    var index = -1,\n      length = values2.length,\n      offset = array.length;\n    while (++index < length) {\n      array[offset + index] = values2[index];\n    }\n    return array;\n  }\n  var spreadableSymbol = Symbol$2 ? Symbol$2.isConcatSpreadable : void 0;\n  function isFlattenable(value) {\n    return isArray$1(value) || isArguments$1(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);\n  }\n  function baseFlatten(array, depth, predicate, isStrict, result) {\n    var index = -1,\n      length = array.length;\n    predicate || (predicate = isFlattenable);\n    result || (result = []);\n    while (++index < length) {\n      var value = array[index];\n      if (depth > 0 && predicate(value)) {\n        if (depth > 1) {\n          baseFlatten(value, depth - 1, predicate, isStrict, result);\n        } else {\n          arrayPush(result, value);\n        }\n      } else if (!isStrict) {\n        result[result.length] = value;\n      }\n    }\n    return result;\n  }\n  function flatten(array) {\n    var length = array == null ? 0 : array.length;\n    return length ? baseFlatten(array, 1) : [];\n  }\n  var getPrototype = overArg(Object.getPrototypeOf, Object);\n  const getPrototype$1 = getPrototype;\n  function baseSlice(array, start, end) {\n    var index = -1,\n      length = array.length;\n    if (start < 0) {\n      start = -start > length ? 0 : length + start;\n    }\n    end = end > length ? length : end;\n    if (end < 0) {\n      end += length;\n    }\n    length = start > end ? 0 : end - start >>> 0;\n    start >>>= 0;\n    var result = Array(length);\n    while (++index < length) {\n      result[index] = array[index + start];\n    }\n    return result;\n  }\n  function arrayReduce(array, iteratee, accumulator, initAccum) {\n    var index = -1,\n      length = array == null ? 0 : array.length;\n    if (initAccum && length) {\n      accumulator = array[++index];\n    }\n    while (++index < length) {\n      accumulator = iteratee(accumulator, array[index], index, array);\n    }\n    return accumulator;\n  }\n  function stackClear() {\n    this.__data__ = new ListCache();\n    this.size = 0;\n  }\n  function stackDelete(key) {\n    var data = this.__data__,\n      result = data[\"delete\"](key);\n    this.size = data.size;\n    return result;\n  }\n  function stackGet(key) {\n    return this.__data__.get(key);\n  }\n  function stackHas(key) {\n    return this.__data__.has(key);\n  }\n  var LARGE_ARRAY_SIZE$2 = 200;\n  function stackSet(key, value) {\n    var data = this.__data__;\n    if (data instanceof ListCache) {\n      var pairs = data.__data__;\n      if (!Map$2 || pairs.length < LARGE_ARRAY_SIZE$2 - 1) {\n        pairs.push([key, value]);\n        this.size = ++data.size;\n        return this;\n      }\n      data = this.__data__ = new MapCache(pairs);\n    }\n    data.set(key, value);\n    this.size = data.size;\n    return this;\n  }\n  function Stack(entries) {\n    var data = this.__data__ = new ListCache(entries);\n    this.size = data.size;\n  }\n  Stack.prototype.clear = stackClear;\n  Stack.prototype[\"delete\"] = stackDelete;\n  Stack.prototype.get = stackGet;\n  Stack.prototype.has = stackHas;\n  Stack.prototype.set = stackSet;\n  function baseAssign(object, source) {\n    return object && copyObject(source, keys(source), object);\n  }\n  function baseAssignIn(object, source) {\n    return object && copyObject(source, keysIn(source), object);\n  }\n  var freeExports = typeof exports == \"object\" && exports && !exports.nodeType && exports;\n  var freeModule = freeExports && typeof module == \"object\" && module && !module.nodeType && module;\n  var moduleExports = freeModule && freeModule.exports === freeExports;\n  var Buffer = moduleExports ? root$1.Buffer : void 0,\n    allocUnsafe = Buffer ? Buffer.allocUnsafe : void 0;\n  function cloneBuffer(buffer, isDeep) {\n    if (isDeep) {\n      return buffer.slice();\n    }\n    var length = buffer.length,\n      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n    buffer.copy(result);\n    return result;\n  }\n  function arrayFilter(array, predicate) {\n    var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n    while (++index < length) {\n      var value = array[index];\n      if (predicate(value, index, array)) {\n        result[resIndex++] = value;\n      }\n    }\n    return result;\n  }\n  function stubArray() {\n    return [];\n  }\n  var objectProto$7 = Object.prototype;\n  var propertyIsEnumerable = objectProto$7.propertyIsEnumerable;\n  var nativeGetSymbols$1 = Object.getOwnPropertySymbols;\n  var getSymbols = !nativeGetSymbols$1 ? stubArray : function (object) {\n    if (object == null) {\n      return [];\n    }\n    object = Object(object);\n    return arrayFilter(nativeGetSymbols$1(object), function (symbol) {\n      return propertyIsEnumerable.call(object, symbol);\n    });\n  };\n  const getSymbols$1 = getSymbols;\n  function copySymbols(source, object) {\n    return copyObject(source, getSymbols$1(source), object);\n  }\n  var nativeGetSymbols = Object.getOwnPropertySymbols;\n  var getSymbolsIn = !nativeGetSymbols ? stubArray : function (object) {\n    var result = [];\n    while (object) {\n      arrayPush(result, getSymbols$1(object));\n      object = getPrototype$1(object);\n    }\n    return result;\n  };\n  const getSymbolsIn$1 = getSymbolsIn;\n  function copySymbolsIn(source, object) {\n    return copyObject(source, getSymbolsIn$1(source), object);\n  }\n  function baseGetAllKeys(object, keysFunc, symbolsFunc) {\n    var result = keysFunc(object);\n    return isArray$1(object) ? result : arrayPush(result, symbolsFunc(object));\n  }\n  function getAllKeys(object) {\n    return baseGetAllKeys(object, keys, getSymbols$1);\n  }\n  function getAllKeysIn(object) {\n    return baseGetAllKeys(object, keysIn, getSymbolsIn$1);\n  }\n  var DataView = getNative(root$1, \"DataView\");\n  const DataView$1 = DataView;\n  var Promise$1 = getNative(root$1, \"Promise\");\n  const Promise$2 = Promise$1;\n  var Set = getNative(root$1, \"Set\");\n  const Set$1 = Set;\n  var mapTag$5 = \"[object Map]\",\n    objectTag$2 = \"[object Object]\",\n    promiseTag = \"[object Promise]\",\n    setTag$5 = \"[object Set]\",\n    weakMapTag$1 = \"[object WeakMap]\";\n  var dataViewTag$3 = \"[object DataView]\";\n  var dataViewCtorString = toSource(DataView$1),\n    mapCtorString = toSource(Map$2),\n    promiseCtorString = toSource(Promise$2),\n    setCtorString = toSource(Set$1),\n    weakMapCtorString = toSource(WeakMap$1);\n  var getTag = baseGetTag;\n  if (DataView$1 && getTag(new DataView$1(new ArrayBuffer(1))) != dataViewTag$3 || Map$2 && getTag(new Map$2()) != mapTag$5 || Promise$2 && getTag(Promise$2.resolve()) != promiseTag || Set$1 && getTag(new Set$1()) != setTag$5 || WeakMap$1 && getTag(new WeakMap$1()) != weakMapTag$1) {\n    getTag = function (value) {\n      var result = baseGetTag(value),\n        Ctor = result == objectTag$2 ? value.constructor : void 0,\n        ctorString = Ctor ? toSource(Ctor) : \"\";\n      if (ctorString) {\n        switch (ctorString) {\n          case dataViewCtorString:\n            return dataViewTag$3;\n          case mapCtorString:\n            return mapTag$5;\n          case promiseCtorString:\n            return promiseTag;\n          case setCtorString:\n            return setTag$5;\n          case weakMapCtorString:\n            return weakMapTag$1;\n        }\n      }\n      return result;\n    };\n  }\n  const getTag$1 = getTag;\n  var objectProto$6 = Object.prototype;\n  var hasOwnProperty$6 = objectProto$6.hasOwnProperty;\n  function initCloneArray(array) {\n    var length = array.length,\n      result = new array.constructor(length);\n    if (length && typeof array[0] == \"string\" && hasOwnProperty$6.call(array, \"index\")) {\n      result.index = array.index;\n      result.input = array.input;\n    }\n    return result;\n  }\n  var Uint8Array = root$1.Uint8Array;\n  const Uint8Array$1 = Uint8Array;\n  function cloneArrayBuffer(arrayBuffer) {\n    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n    new Uint8Array$1(result).set(new Uint8Array$1(arrayBuffer));\n    return result;\n  }\n  function cloneDataView(dataView, isDeep) {\n    var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n  }\n  var reFlags = /\\w*$/;\n  function cloneRegExp(regexp) {\n    var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n    result.lastIndex = regexp.lastIndex;\n    return result;\n  }\n  var symbolProto$1 = Symbol$2 ? Symbol$2.prototype : void 0,\n    symbolValueOf$1 = symbolProto$1 ? symbolProto$1.valueOf : void 0;\n  function cloneSymbol(symbol) {\n    return symbolValueOf$1 ? Object(symbolValueOf$1.call(symbol)) : {};\n  }\n  function cloneTypedArray(typedArray, isDeep) {\n    var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n  }\n  var boolTag$2 = \"[object Boolean]\",\n    dateTag$2 = \"[object Date]\",\n    mapTag$4 = \"[object Map]\",\n    numberTag$2 = \"[object Number]\",\n    regexpTag$3 = \"[object RegExp]\",\n    setTag$4 = \"[object Set]\",\n    stringTag$3 = \"[object String]\",\n    symbolTag$2 = \"[object Symbol]\";\n  var arrayBufferTag$2 = \"[object ArrayBuffer]\",\n    dataViewTag$2 = \"[object DataView]\",\n    float32Tag$1 = \"[object Float32Array]\",\n    float64Tag$1 = \"[object Float64Array]\",\n    int8Tag$1 = \"[object Int8Array]\",\n    int16Tag$1 = \"[object Int16Array]\",\n    int32Tag$1 = \"[object Int32Array]\",\n    uint8Tag$1 = \"[object Uint8Array]\",\n    uint8ClampedTag$1 = \"[object Uint8ClampedArray]\",\n    uint16Tag$1 = \"[object Uint16Array]\",\n    uint32Tag$1 = \"[object Uint32Array]\";\n  function initCloneByTag(object, tag, isDeep) {\n    var Ctor = object.constructor;\n    switch (tag) {\n      case arrayBufferTag$2:\n        return cloneArrayBuffer(object);\n      case boolTag$2:\n      case dateTag$2:\n        return new Ctor(+object);\n      case dataViewTag$2:\n        return cloneDataView(object, isDeep);\n      case float32Tag$1:\n      case float64Tag$1:\n      case int8Tag$1:\n      case int16Tag$1:\n      case int32Tag$1:\n      case uint8Tag$1:\n      case uint8ClampedTag$1:\n      case uint16Tag$1:\n      case uint32Tag$1:\n        return cloneTypedArray(object, isDeep);\n      case mapTag$4:\n        return new Ctor();\n      case numberTag$2:\n      case stringTag$3:\n        return new Ctor(object);\n      case regexpTag$3:\n        return cloneRegExp(object);\n      case setTag$4:\n        return new Ctor();\n      case symbolTag$2:\n        return cloneSymbol(object);\n    }\n  }\n  function initCloneObject(object) {\n    return typeof object.constructor == \"function\" && !isPrototype(object) ? baseCreate$1(getPrototype$1(object)) : {};\n  }\n  var mapTag$3 = \"[object Map]\";\n  function baseIsMap(value) {\n    return isObjectLike(value) && getTag$1(value) == mapTag$3;\n  }\n  var nodeIsMap = nodeUtil$1 && nodeUtil$1.isMap;\n  var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;\n  const isMap$1 = isMap;\n  var setTag$3 = \"[object Set]\";\n  function baseIsSet(value) {\n    return isObjectLike(value) && getTag$1(value) == setTag$3;\n  }\n  var nodeIsSet = nodeUtil$1 && nodeUtil$1.isSet;\n  var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;\n  const isSet$1 = isSet;\n  var CLONE_DEEP_FLAG = 1,\n    CLONE_FLAT_FLAG = 2,\n    CLONE_SYMBOLS_FLAG$1 = 4;\n  var argsTag$1 = \"[object Arguments]\",\n    arrayTag$1 = \"[object Array]\",\n    boolTag$1 = \"[object Boolean]\",\n    dateTag$1 = \"[object Date]\",\n    errorTag$1 = \"[object Error]\",\n    funcTag = \"[object Function]\",\n    genTag = \"[object GeneratorFunction]\",\n    mapTag$2 = \"[object Map]\",\n    numberTag$1 = \"[object Number]\",\n    objectTag$1 = \"[object Object]\",\n    regexpTag$2 = \"[object RegExp]\",\n    setTag$2 = \"[object Set]\",\n    stringTag$2 = \"[object String]\",\n    symbolTag$1 = \"[object Symbol]\",\n    weakMapTag = \"[object WeakMap]\";\n  var arrayBufferTag$1 = \"[object ArrayBuffer]\",\n    dataViewTag$1 = \"[object DataView]\",\n    float32Tag = \"[object Float32Array]\",\n    float64Tag = \"[object Float64Array]\",\n    int8Tag = \"[object Int8Array]\",\n    int16Tag = \"[object Int16Array]\",\n    int32Tag = \"[object Int32Array]\",\n    uint8Tag = \"[object Uint8Array]\",\n    uint8ClampedTag = \"[object Uint8ClampedArray]\",\n    uint16Tag = \"[object Uint16Array]\",\n    uint32Tag = \"[object Uint32Array]\";\n  var cloneableTags = {};\n  cloneableTags[argsTag$1] = cloneableTags[arrayTag$1] = cloneableTags[arrayBufferTag$1] = cloneableTags[dataViewTag$1] = cloneableTags[boolTag$1] = cloneableTags[dateTag$1] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag$2] = cloneableTags[numberTag$1] = cloneableTags[objectTag$1] = cloneableTags[regexpTag$2] = cloneableTags[setTag$2] = cloneableTags[stringTag$2] = cloneableTags[symbolTag$1] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\n  cloneableTags[errorTag$1] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;\n  function baseClone(value, bitmask, customizer, key, object, stack) {\n    var result,\n      isDeep = bitmask & CLONE_DEEP_FLAG,\n      isFlat = bitmask & CLONE_FLAT_FLAG,\n      isFull = bitmask & CLONE_SYMBOLS_FLAG$1;\n    if (customizer) {\n      result = object ? customizer(value, key, object, stack) : customizer(value);\n    }\n    if (result !== void 0) {\n      return result;\n    }\n    if (!isObject(value)) {\n      return value;\n    }\n    var isArr = isArray$1(value);\n    if (isArr) {\n      result = initCloneArray(value);\n      if (!isDeep) {\n        return copyArray(value, result);\n      }\n    } else {\n      var tag = getTag$1(value),\n        isFunc = tag == funcTag || tag == genTag;\n      if (isBuffer$1(value)) {\n        return cloneBuffer(value, isDeep);\n      }\n      if (tag == objectTag$1 || tag == argsTag$1 || isFunc && !object) {\n        result = isFlat || isFunc ? {} : initCloneObject(value);\n        if (!isDeep) {\n          return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));\n        }\n      } else {\n        if (!cloneableTags[tag]) {\n          return object ? value : {};\n        }\n        result = initCloneByTag(value, tag, isDeep);\n      }\n    }\n    stack || (stack = new Stack());\n    var stacked = stack.get(value);\n    if (stacked) {\n      return stacked;\n    }\n    stack.set(value, result);\n    if (isSet$1(value)) {\n      value.forEach(function (subValue) {\n        result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\n      });\n    } else if (isMap$1(value)) {\n      value.forEach(function (subValue, key2) {\n        result.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));\n      });\n    }\n    var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;\n    var props = isArr ? void 0 : keysFunc(value);\n    arrayEach(props || value, function (subValue, key2) {\n      if (props) {\n        key2 = subValue;\n        subValue = value[key2];\n      }\n      assignValue(result, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));\n    });\n    return result;\n  }\n  var CLONE_SYMBOLS_FLAG = 4;\n  function clone(value) {\n    return baseClone(value, CLONE_SYMBOLS_FLAG);\n  }\n  function compact(array) {\n    var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n    while (++index < length) {\n      var value = array[index];\n      if (value) {\n        result[resIndex++] = value;\n      }\n    }\n    return result;\n  }\n  var HASH_UNDEFINED = \"__lodash_hash_undefined__\";\n  function setCacheAdd(value) {\n    this.__data__.set(value, HASH_UNDEFINED);\n    return this;\n  }\n  function setCacheHas(value) {\n    return this.__data__.has(value);\n  }\n  function SetCache(values2) {\n    var index = -1,\n      length = values2 == null ? 0 : values2.length;\n    this.__data__ = new MapCache();\n    while (++index < length) {\n      this.add(values2[index]);\n    }\n  }\n  SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\n  SetCache.prototype.has = setCacheHas;\n  function arraySome(array, predicate) {\n    var index = -1,\n      length = array == null ? 0 : array.length;\n    while (++index < length) {\n      if (predicate(array[index], index, array)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  function cacheHas(cache, key) {\n    return cache.has(key);\n  }\n  var COMPARE_PARTIAL_FLAG$5 = 1,\n    COMPARE_UNORDERED_FLAG$3 = 2;\n  function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n    var isPartial = bitmask & COMPARE_PARTIAL_FLAG$5,\n      arrLength = array.length,\n      othLength = other.length;\n    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n      return false;\n    }\n    var arrStacked = stack.get(array);\n    var othStacked = stack.get(other);\n    if (arrStacked && othStacked) {\n      return arrStacked == other && othStacked == array;\n    }\n    var index = -1,\n      result = true,\n      seen = bitmask & COMPARE_UNORDERED_FLAG$3 ? new SetCache() : void 0;\n    stack.set(array, other);\n    stack.set(other, array);\n    while (++index < arrLength) {\n      var arrValue = array[index],\n        othValue = other[index];\n      if (customizer) {\n        var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);\n      }\n      if (compared !== void 0) {\n        if (compared) {\n          continue;\n        }\n        result = false;\n        break;\n      }\n      if (seen) {\n        if (!arraySome(other, function (othValue2, othIndex) {\n          if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {\n            return seen.push(othIndex);\n          }\n        })) {\n          result = false;\n          break;\n        }\n      } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n        result = false;\n        break;\n      }\n    }\n    stack[\"delete\"](array);\n    stack[\"delete\"](other);\n    return result;\n  }\n  function mapToArray(map2) {\n    var index = -1,\n      result = Array(map2.size);\n    map2.forEach(function (value, key) {\n      result[++index] = [key, value];\n    });\n    return result;\n  }\n  function setToArray(set) {\n    var index = -1,\n      result = Array(set.size);\n    set.forEach(function (value) {\n      result[++index] = value;\n    });\n    return result;\n  }\n  var COMPARE_PARTIAL_FLAG$4 = 1,\n    COMPARE_UNORDERED_FLAG$2 = 2;\n  var boolTag = \"[object Boolean]\",\n    dateTag = \"[object Date]\",\n    errorTag = \"[object Error]\",\n    mapTag$1 = \"[object Map]\",\n    numberTag = \"[object Number]\",\n    regexpTag$1 = \"[object RegExp]\",\n    setTag$1 = \"[object Set]\",\n    stringTag$1 = \"[object String]\",\n    symbolTag = \"[object Symbol]\";\n  var arrayBufferTag = \"[object ArrayBuffer]\",\n    dataViewTag = \"[object DataView]\";\n  var symbolProto = Symbol$2 ? Symbol$2.prototype : void 0,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;\n  function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n    switch (tag) {\n      case dataViewTag:\n        if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {\n          return false;\n        }\n        object = object.buffer;\n        other = other.buffer;\n      case arrayBufferTag:\n        if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array$1(object), new Uint8Array$1(other))) {\n          return false;\n        }\n        return true;\n      case boolTag:\n      case dateTag:\n      case numberTag:\n        return eq(+object, +other);\n      case errorTag:\n        return object.name == other.name && object.message == other.message;\n      case regexpTag$1:\n      case stringTag$1:\n        return object == other + \"\";\n      case mapTag$1:\n        var convert = mapToArray;\n      case setTag$1:\n        var isPartial = bitmask & COMPARE_PARTIAL_FLAG$4;\n        convert || (convert = setToArray);\n        if (object.size != other.size && !isPartial) {\n          return false;\n        }\n        var stacked = stack.get(object);\n        if (stacked) {\n          return stacked == other;\n        }\n        bitmask |= COMPARE_UNORDERED_FLAG$2;\n        stack.set(object, other);\n        var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n        stack[\"delete\"](object);\n        return result;\n      case symbolTag:\n        if (symbolValueOf) {\n          return symbolValueOf.call(object) == symbolValueOf.call(other);\n        }\n    }\n    return false;\n  }\n  var COMPARE_PARTIAL_FLAG$3 = 1;\n  var objectProto$5 = Object.prototype;\n  var hasOwnProperty$5 = objectProto$5.hasOwnProperty;\n  function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n    var isPartial = bitmask & COMPARE_PARTIAL_FLAG$3,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n    if (objLength != othLength && !isPartial) {\n      return false;\n    }\n    var index = objLength;\n    while (index--) {\n      var key = objProps[index];\n      if (!(isPartial ? key in other : hasOwnProperty$5.call(other, key))) {\n        return false;\n      }\n    }\n    var objStacked = stack.get(object);\n    var othStacked = stack.get(other);\n    if (objStacked && othStacked) {\n      return objStacked == other && othStacked == object;\n    }\n    var result = true;\n    stack.set(object, other);\n    stack.set(other, object);\n    var skipCtor = isPartial;\n    while (++index < objLength) {\n      key = objProps[index];\n      var objValue = object[key],\n        othValue = other[key];\n      if (customizer) {\n        var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);\n      }\n      if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {\n        result = false;\n        break;\n      }\n      skipCtor || (skipCtor = key == \"constructor\");\n    }\n    if (result && !skipCtor) {\n      var objCtor = object.constructor,\n        othCtor = other.constructor;\n      if (objCtor != othCtor && \"constructor\" in object && \"constructor\" in other && !(typeof objCtor == \"function\" && objCtor instanceof objCtor && typeof othCtor == \"function\" && othCtor instanceof othCtor)) {\n        result = false;\n      }\n    }\n    stack[\"delete\"](object);\n    stack[\"delete\"](other);\n    return result;\n  }\n  var COMPARE_PARTIAL_FLAG$2 = 1;\n  var argsTag = \"[object Arguments]\",\n    arrayTag = \"[object Array]\",\n    objectTag = \"[object Object]\";\n  var objectProto$4 = Object.prototype;\n  var hasOwnProperty$4 = objectProto$4.hasOwnProperty;\n  function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n    var objIsArr = isArray$1(object),\n      othIsArr = isArray$1(other),\n      objTag = objIsArr ? arrayTag : getTag$1(object),\n      othTag = othIsArr ? arrayTag : getTag$1(other);\n    objTag = objTag == argsTag ? objectTag : objTag;\n    othTag = othTag == argsTag ? objectTag : othTag;\n    var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n    if (isSameTag && isBuffer$1(object)) {\n      if (!isBuffer$1(other)) {\n        return false;\n      }\n      objIsArr = true;\n      objIsObj = false;\n    }\n    if (isSameTag && !objIsObj) {\n      stack || (stack = new Stack());\n      return objIsArr || isTypedArray$1(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n    }\n    if (!(bitmask & COMPARE_PARTIAL_FLAG$2)) {\n      var objIsWrapped = objIsObj && hasOwnProperty$4.call(object, \"__wrapped__\"),\n        othIsWrapped = othIsObj && hasOwnProperty$4.call(other, \"__wrapped__\");\n      if (objIsWrapped || othIsWrapped) {\n        var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n        stack || (stack = new Stack());\n        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n      }\n    }\n    if (!isSameTag) {\n      return false;\n    }\n    stack || (stack = new Stack());\n    return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n  }\n  function baseIsEqual(value, other, bitmask, customizer, stack) {\n    if (value === other) {\n      return true;\n    }\n    if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {\n      return value !== value && other !== other;\n    }\n    return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n  }\n  var COMPARE_PARTIAL_FLAG$1 = 1,\n    COMPARE_UNORDERED_FLAG$1 = 2;\n  function baseIsMatch(object, source, matchData, customizer) {\n    var index = matchData.length,\n      length = index,\n      noCustomizer = !customizer;\n    if (object == null) {\n      return !length;\n    }\n    object = Object(object);\n    while (index--) {\n      var data = matchData[index];\n      if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {\n        return false;\n      }\n    }\n    while (++index < length) {\n      data = matchData[index];\n      var key = data[0],\n        objValue = object[key],\n        srcValue = data[1];\n      if (noCustomizer && data[2]) {\n        if (objValue === void 0 && !(key in object)) {\n          return false;\n        }\n      } else {\n        var stack = new Stack();\n        if (customizer) {\n          var result = customizer(objValue, srcValue, key, object, source, stack);\n        }\n        if (!(result === void 0 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG$1 | COMPARE_UNORDERED_FLAG$1, customizer, stack) : result)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n  function isStrictComparable(value) {\n    return value === value && !isObject(value);\n  }\n  function getMatchData(object) {\n    var result = keys(object),\n      length = result.length;\n    while (length--) {\n      var key = result[length],\n        value = object[key];\n      result[length] = [key, value, isStrictComparable(value)];\n    }\n    return result;\n  }\n  function matchesStrictComparable(key, srcValue) {\n    return function (object) {\n      if (object == null) {\n        return false;\n      }\n      return object[key] === srcValue && (srcValue !== void 0 || key in Object(object));\n    };\n  }\n  function baseMatches(source) {\n    var matchData = getMatchData(source);\n    if (matchData.length == 1 && matchData[0][2]) {\n      return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n    }\n    return function (object) {\n      return object === source || baseIsMatch(object, source, matchData);\n    };\n  }\n  function baseHasIn(object, key) {\n    return object != null && key in Object(object);\n  }\n  function hasPath(object, path, hasFunc) {\n    path = castPath(path, object);\n    var index = -1,\n      length = path.length,\n      result = false;\n    while (++index < length) {\n      var key = toKey(path[index]);\n      if (!(result = object != null && hasFunc(object, key))) {\n        break;\n      }\n      object = object[key];\n    }\n    if (result || ++index != length) {\n      return result;\n    }\n    length = object == null ? 0 : object.length;\n    return !!length && isLength(length) && isIndex(key, length) && (isArray$1(object) || isArguments$1(object));\n  }\n  function hasIn(object, path) {\n    return object != null && hasPath(object, path, baseHasIn);\n  }\n  var COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n  function baseMatchesProperty(path, srcValue) {\n    if (isKey(path) && isStrictComparable(srcValue)) {\n      return matchesStrictComparable(toKey(path), srcValue);\n    }\n    return function (object) {\n      var objValue = get(object, path);\n      return objValue === void 0 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n    };\n  }\n  function baseProperty(key) {\n    return function (object) {\n      return object == null ? void 0 : object[key];\n    };\n  }\n  function basePropertyDeep(path) {\n    return function (object) {\n      return baseGet(object, path);\n    };\n  }\n  function property(path) {\n    return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n  }\n  function baseIteratee(value) {\n    if (typeof value == \"function\") {\n      return value;\n    }\n    if (value == null) {\n      return identity;\n    }\n    if (typeof value == \"object\") {\n      return isArray$1(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);\n    }\n    return property(value);\n  }\n  function arrayAggregator(array, setter, iteratee, accumulator) {\n    var index = -1,\n      length = array == null ? 0 : array.length;\n    while (++index < length) {\n      var value = array[index];\n      setter(accumulator, value, iteratee(value), array);\n    }\n    return accumulator;\n  }\n  function createBaseFor(fromRight) {\n    return function (object, iteratee, keysFunc) {\n      var index = -1,\n        iterable = Object(object),\n        props = keysFunc(object),\n        length = props.length;\n      while (length--) {\n        var key = props[fromRight ? length : ++index];\n        if (iteratee(iterable[key], key, iterable) === false) {\n          break;\n        }\n      }\n      return object;\n    };\n  }\n  var baseFor = createBaseFor();\n  const baseFor$1 = baseFor;\n  function baseForOwn(object, iteratee) {\n    return object && baseFor$1(object, iteratee, keys);\n  }\n  function createBaseEach(eachFunc, fromRight) {\n    return function (collection, iteratee) {\n      if (collection == null) {\n        return collection;\n      }\n      if (!isArrayLike(collection)) {\n        return eachFunc(collection, iteratee);\n      }\n      var length = collection.length,\n        index = fromRight ? length : -1,\n        iterable = Object(collection);\n      while (fromRight ? index-- : ++index < length) {\n        if (iteratee(iterable[index], index, iterable) === false) {\n          break;\n        }\n      }\n      return collection;\n    };\n  }\n  var baseEach = createBaseEach(baseForOwn);\n  const baseEach$1 = baseEach;\n  function baseAggregator(collection, setter, iteratee, accumulator) {\n    baseEach$1(collection, function (value, key, collection2) {\n      setter(accumulator, value, iteratee(value), collection2);\n    });\n    return accumulator;\n  }\n  function createAggregator(setter, initializer) {\n    return function (collection, iteratee) {\n      var func = isArray$1(collection) ? arrayAggregator : baseAggregator,\n        accumulator = initializer ? initializer() : {};\n      return func(collection, setter, baseIteratee(iteratee), accumulator);\n    };\n  }\n  var objectProto$3 = Object.prototype;\n  var hasOwnProperty$3 = objectProto$3.hasOwnProperty;\n  var defaults = baseRest(function (object, sources) {\n    object = Object(object);\n    var index = -1;\n    var length = sources.length;\n    var guard = length > 2 ? sources[2] : void 0;\n    if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n      length = 1;\n    }\n    while (++index < length) {\n      var source = sources[index];\n      var props = keysIn(source);\n      var propsIndex = -1;\n      var propsLength = props.length;\n      while (++propsIndex < propsLength) {\n        var key = props[propsIndex];\n        var value = object[key];\n        if (value === void 0 || eq(value, objectProto$3[key]) && !hasOwnProperty$3.call(object, key)) {\n          object[key] = source[key];\n        }\n      }\n    }\n    return object;\n  });\n  const defaults$1 = defaults;\n  function isArrayLikeObject(value) {\n    return isObjectLike(value) && isArrayLike(value);\n  }\n  function arrayIncludesWith(array, value, comparator) {\n    var index = -1,\n      length = array == null ? 0 : array.length;\n    while (++index < length) {\n      if (comparator(value, array[index])) {\n        return true;\n      }\n    }\n    return false;\n  }\n  var LARGE_ARRAY_SIZE$1 = 200;\n  function baseDifference(array, values2, iteratee, comparator) {\n    var index = -1,\n      includes2 = arrayIncludes,\n      isCommon = true,\n      length = array.length,\n      result = [],\n      valuesLength = values2.length;\n    if (!length) {\n      return result;\n    }\n    if (iteratee) {\n      values2 = arrayMap(values2, baseUnary(iteratee));\n    }\n    if (comparator) {\n      includes2 = arrayIncludesWith;\n      isCommon = false;\n    } else if (values2.length >= LARGE_ARRAY_SIZE$1) {\n      includes2 = cacheHas;\n      isCommon = false;\n      values2 = new SetCache(values2);\n    }\n    outer: while (++index < length) {\n      var value = array[index],\n        computed = iteratee == null ? value : iteratee(value);\n      value = comparator || value !== 0 ? value : 0;\n      if (isCommon && computed === computed) {\n        var valuesIndex = valuesLength;\n        while (valuesIndex--) {\n          if (values2[valuesIndex] === computed) {\n            continue outer;\n          }\n        }\n        result.push(value);\n      } else if (!includes2(values2, computed, comparator)) {\n        result.push(value);\n      }\n    }\n    return result;\n  }\n  var difference = baseRest(function (array, values2) {\n    return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true)) : [];\n  });\n  const difference$1 = difference;\n  function last(array) {\n    var length = array == null ? 0 : array.length;\n    return length ? array[length - 1] : void 0;\n  }\n  function drop(array, n, guard) {\n    var length = array == null ? 0 : array.length;\n    if (!length) {\n      return [];\n    }\n    n = guard || n === void 0 ? 1 : toInteger(n);\n    return baseSlice(array, n < 0 ? 0 : n, length);\n  }\n  function dropRight(array, n, guard) {\n    var length = array == null ? 0 : array.length;\n    if (!length) {\n      return [];\n    }\n    n = guard || n === void 0 ? 1 : toInteger(n);\n    n = length - n;\n    return baseSlice(array, 0, n < 0 ? 0 : n);\n  }\n  function castFunction(value) {\n    return typeof value == \"function\" ? value : identity;\n  }\n  function forEach(collection, iteratee) {\n    var func = isArray$1(collection) ? arrayEach : baseEach$1;\n    return func(collection, castFunction(iteratee));\n  }\n  function arrayEvery(array, predicate) {\n    var index = -1,\n      length = array == null ? 0 : array.length;\n    while (++index < length) {\n      if (!predicate(array[index], index, array)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function baseEvery(collection, predicate) {\n    var result = true;\n    baseEach$1(collection, function (value, index, collection2) {\n      result = !!predicate(value, index, collection2);\n      return result;\n    });\n    return result;\n  }\n  function every(collection, predicate, guard) {\n    var func = isArray$1(collection) ? arrayEvery : baseEvery;\n    if (guard && isIterateeCall(collection, predicate, guard)) {\n      predicate = void 0;\n    }\n    return func(collection, baseIteratee(predicate));\n  }\n  function baseFilter(collection, predicate) {\n    var result = [];\n    baseEach$1(collection, function (value, index, collection2) {\n      if (predicate(value, index, collection2)) {\n        result.push(value);\n      }\n    });\n    return result;\n  }\n  function filter(collection, predicate) {\n    var func = isArray$1(collection) ? arrayFilter : baseFilter;\n    return func(collection, baseIteratee(predicate));\n  }\n  function createFind(findIndexFunc) {\n    return function (collection, predicate, fromIndex) {\n      var iterable = Object(collection);\n      if (!isArrayLike(collection)) {\n        var iteratee = baseIteratee(predicate);\n        collection = keys(collection);\n        predicate = function (key) {\n          return iteratee(iterable[key], key, iterable);\n        };\n      }\n      var index = findIndexFunc(collection, predicate, fromIndex);\n      return index > -1 ? iterable[iteratee ? collection[index] : index] : void 0;\n    };\n  }\n  var nativeMax$2 = Math.max;\n  function findIndex(array, predicate, fromIndex) {\n    var length = array == null ? 0 : array.length;\n    if (!length) {\n      return -1;\n    }\n    var index = fromIndex == null ? 0 : toInteger(fromIndex);\n    if (index < 0) {\n      index = nativeMax$2(length + index, 0);\n    }\n    return baseFindIndex(array, baseIteratee(predicate), index);\n  }\n  var find = createFind(findIndex);\n  const find$1 = find;\n  function head(array) {\n    return array && array.length ? array[0] : void 0;\n  }\n  function baseMap(collection, iteratee) {\n    var index = -1,\n      result = isArrayLike(collection) ? Array(collection.length) : [];\n    baseEach$1(collection, function (value, key, collection2) {\n      result[++index] = iteratee(value, key, collection2);\n    });\n    return result;\n  }\n  function map(collection, iteratee) {\n    var func = isArray$1(collection) ? arrayMap : baseMap;\n    return func(collection, baseIteratee(iteratee));\n  }\n  function flatMap(collection, iteratee) {\n    return baseFlatten(map(collection, iteratee), 1);\n  }\n  var objectProto$2 = Object.prototype;\n  var hasOwnProperty$2 = objectProto$2.hasOwnProperty;\n  var groupBy = createAggregator(function (result, value, key) {\n    if (hasOwnProperty$2.call(result, key)) {\n      result[key].push(value);\n    } else {\n      baseAssignValue(result, key, [value]);\n    }\n  });\n  const groupBy$1 = groupBy;\n  var objectProto$1 = Object.prototype;\n  var hasOwnProperty$1 = objectProto$1.hasOwnProperty;\n  function baseHas(object, key) {\n    return object != null && hasOwnProperty$1.call(object, key);\n  }\n  function has(object, path) {\n    return object != null && hasPath(object, path, baseHas);\n  }\n  var stringTag = \"[object String]\";\n  function isString(value) {\n    return typeof value == \"string\" || !isArray$1(value) && isObjectLike(value) && baseGetTag(value) == stringTag;\n  }\n  function baseValues(object, props) {\n    return arrayMap(props, function (key) {\n      return object[key];\n    });\n  }\n  function values(object) {\n    return object == null ? [] : baseValues(object, keys(object));\n  }\n  var nativeMax$1 = Math.max;\n  function includes(collection, value, fromIndex, guard) {\n    collection = isArrayLike(collection) ? collection : values(collection);\n    fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;\n    var length = collection.length;\n    if (fromIndex < 0) {\n      fromIndex = nativeMax$1(length + fromIndex, 0);\n    }\n    return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;\n  }\n  var nativeMax = Math.max;\n  function indexOf(array, value, fromIndex) {\n    var length = array == null ? 0 : array.length;\n    if (!length) {\n      return -1;\n    }\n    var index = fromIndex == null ? 0 : toInteger(fromIndex);\n    if (index < 0) {\n      index = nativeMax(length + index, 0);\n    }\n    return baseIndexOf(array, value, index);\n  }\n  var mapTag = \"[object Map]\",\n    setTag = \"[object Set]\";\n  var objectProto = Object.prototype;\n  var hasOwnProperty = objectProto.hasOwnProperty;\n  function isEmpty(value) {\n    if (value == null) {\n      return true;\n    }\n    if (isArrayLike(value) && (isArray$1(value) || typeof value == \"string\" || typeof value.splice == \"function\" || isBuffer$1(value) || isTypedArray$1(value) || isArguments$1(value))) {\n      return !value.length;\n    }\n    var tag = getTag$1(value);\n    if (tag == mapTag || tag == setTag) {\n      return !value.size;\n    }\n    if (isPrototype(value)) {\n      return !baseKeys(value).length;\n    }\n    for (var key in value) {\n      if (hasOwnProperty.call(value, key)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  var regexpTag = \"[object RegExp]\";\n  function baseIsRegExp(value) {\n    return isObjectLike(value) && baseGetTag(value) == regexpTag;\n  }\n  var nodeIsRegExp = nodeUtil$1 && nodeUtil$1.isRegExp;\n  var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;\n  const isRegExp$1 = isRegExp;\n  function isUndefined(value) {\n    return value === void 0;\n  }\n  var FUNC_ERROR_TEXT = \"Expected a function\";\n  function negate(predicate) {\n    if (typeof predicate != \"function\") {\n      throw new TypeError(FUNC_ERROR_TEXT);\n    }\n    return function () {\n      var args = arguments;\n      switch (args.length) {\n        case 0:\n          return !predicate.call(this);\n        case 1:\n          return !predicate.call(this, args[0]);\n        case 2:\n          return !predicate.call(this, args[0], args[1]);\n        case 3:\n          return !predicate.call(this, args[0], args[1], args[2]);\n      }\n      return !predicate.apply(this, args);\n    };\n  }\n  function baseSet(object, path, value, customizer) {\n    if (!isObject(object)) {\n      return object;\n    }\n    path = castPath(path, object);\n    var index = -1,\n      length = path.length,\n      lastIndex = length - 1,\n      nested = object;\n    while (nested != null && ++index < length) {\n      var key = toKey(path[index]),\n        newValue = value;\n      if (key === \"__proto__\" || key === \"constructor\" || key === \"prototype\") {\n        return object;\n      }\n      if (index != lastIndex) {\n        var objValue = nested[key];\n        newValue = customizer ? customizer(objValue, key, nested) : void 0;\n        if (newValue === void 0) {\n          newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};\n        }\n      }\n      assignValue(nested, key, newValue);\n      nested = nested[key];\n    }\n    return object;\n  }\n  function basePickBy(object, paths, predicate) {\n    var index = -1,\n      length = paths.length,\n      result = {};\n    while (++index < length) {\n      var path = paths[index],\n        value = baseGet(object, path);\n      if (predicate(value, path)) {\n        baseSet(result, castPath(path, object), value);\n      }\n    }\n    return result;\n  }\n  function pickBy(object, predicate) {\n    if (object == null) {\n      return {};\n    }\n    var props = arrayMap(getAllKeysIn(object), function (prop) {\n      return [prop];\n    });\n    predicate = baseIteratee(predicate);\n    return basePickBy(object, props, function (value, path) {\n      return predicate(value, path[0]);\n    });\n  }\n  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {\n    eachFunc(collection, function (value, index, collection2) {\n      accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection2);\n    });\n    return accumulator;\n  }\n  function reduce(collection, iteratee, accumulator) {\n    var func = isArray$1(collection) ? arrayReduce : baseReduce,\n      initAccum = arguments.length < 3;\n    return func(collection, baseIteratee(iteratee), accumulator, initAccum, baseEach$1);\n  }\n  function reject(collection, predicate) {\n    var func = isArray$1(collection) ? arrayFilter : baseFilter;\n    return func(collection, negate(baseIteratee(predicate)));\n  }\n  function baseSome(collection, predicate) {\n    var result;\n    baseEach$1(collection, function (value, index, collection2) {\n      result = predicate(value, index, collection2);\n      return !result;\n    });\n    return !!result;\n  }\n  function some(collection, predicate, guard) {\n    var func = isArray$1(collection) ? arraySome : baseSome;\n    if (guard && isIterateeCall(collection, predicate, guard)) {\n      predicate = void 0;\n    }\n    return func(collection, baseIteratee(predicate));\n  }\n  var INFINITY = 1 / 0;\n  var createSet = !(Set$1 && 1 / setToArray(new Set$1([, -0]))[1] == INFINITY) ? noop : function (values2) {\n    return new Set$1(values2);\n  };\n  const createSet$1 = createSet;\n  var LARGE_ARRAY_SIZE = 200;\n  function baseUniq(array, iteratee, comparator) {\n    var index = -1,\n      includes2 = arrayIncludes,\n      length = array.length,\n      isCommon = true,\n      result = [],\n      seen = result;\n    if (comparator) {\n      isCommon = false;\n      includes2 = arrayIncludesWith;\n    } else if (length >= LARGE_ARRAY_SIZE) {\n      var set = iteratee ? null : createSet$1(array);\n      if (set) {\n        return setToArray(set);\n      }\n      isCommon = false;\n      includes2 = cacheHas;\n      seen = new SetCache();\n    } else {\n      seen = iteratee ? [] : result;\n    }\n    outer: while (++index < length) {\n      var value = array[index],\n        computed = iteratee ? iteratee(value) : value;\n      value = comparator || value !== 0 ? value : 0;\n      if (isCommon && computed === computed) {\n        var seenIndex = seen.length;\n        while (seenIndex--) {\n          if (seen[seenIndex] === computed) {\n            continue outer;\n          }\n        }\n        if (iteratee) {\n          seen.push(computed);\n        }\n        result.push(value);\n      } else if (!includes2(seen, computed, comparator)) {\n        if (seen !== result) {\n          seen.push(computed);\n        }\n        result.push(value);\n      }\n    }\n    return result;\n  }\n  function uniq(array) {\n    return array && array.length ? baseUniq(array) : [];\n  }\n  function PRINT_ERROR(msg) {\n    if (console && console.error) {\n      console.error(\"Error: \".concat(msg));\n    }\n  }\n  function PRINT_WARNING(msg) {\n    if (console && console.warn) {\n      console.warn(\"Warning: \".concat(msg));\n    }\n  }\n  function timer(func) {\n    const start = ( /* @__PURE__ */new Date()).getTime();\n    const val = func();\n    const end = ( /* @__PURE__ */new Date()).getTime();\n    const total = end - start;\n    return {\n      time: total,\n      value: val\n    };\n  }\n  function toFastProperties(toBecomeFast) {\n    function FakeConstructor() {}\n    FakeConstructor.prototype = toBecomeFast;\n    const fakeInstance = new FakeConstructor();\n    function fakeAccess() {\n      return typeof fakeInstance.bar;\n    }\n    fakeAccess();\n    fakeAccess();\n    return toBecomeFast;\n  }\n  function tokenLabel$1(tokType) {\n    if (hasTokenLabel$1(tokType)) {\n      return tokType.LABEL;\n    } else {\n      return tokType.name;\n    }\n  }\n  function hasTokenLabel$1(obj) {\n    return isString(obj.LABEL) && obj.LABEL !== \"\";\n  }\n  class AbstractProduction {\n    get definition() {\n      return this._definition;\n    }\n    set definition(value) {\n      this._definition = value;\n    }\n    constructor(_definition) {\n      this._definition = _definition;\n    }\n    accept(visitor) {\n      visitor.visit(this);\n      forEach(this.definition, prod => {\n        prod.accept(visitor);\n      });\n    }\n  }\n  class NonTerminal extends AbstractProduction {\n    constructor(options) {\n      super([]);\n      this.idx = 1;\n      assign$1(this, pickBy(options, v => v !== void 0));\n    }\n    set definition(definition) {}\n    get definition() {\n      if (this.referencedRule !== void 0) {\n        return this.referencedRule.definition;\n      }\n      return [];\n    }\n    accept(visitor) {\n      visitor.visit(this);\n    }\n  }\n  class Rule extends AbstractProduction {\n    constructor(options) {\n      super(options.definition);\n      this.orgText = \"\";\n      assign$1(this, pickBy(options, v => v !== void 0));\n    }\n  }\n  class Alternative extends AbstractProduction {\n    constructor(options) {\n      super(options.definition);\n      this.ignoreAmbiguities = false;\n      assign$1(this, pickBy(options, v => v !== void 0));\n    }\n  }\n  class Option extends AbstractProduction {\n    constructor(options) {\n      super(options.definition);\n      this.idx = 1;\n      assign$1(this, pickBy(options, v => v !== void 0));\n    }\n  }\n  class RepetitionMandatory extends AbstractProduction {\n    constructor(options) {\n      super(options.definition);\n      this.idx = 1;\n      assign$1(this, pickBy(options, v => v !== void 0));\n    }\n  }\n  class RepetitionMandatoryWithSeparator extends AbstractProduction {\n    constructor(options) {\n      super(options.definition);\n      this.idx = 1;\n      assign$1(this, pickBy(options, v => v !== void 0));\n    }\n  }\n  class Repetition extends AbstractProduction {\n    constructor(options) {\n      super(options.definition);\n      this.idx = 1;\n      assign$1(this, pickBy(options, v => v !== void 0));\n    }\n  }\n  class RepetitionWithSeparator extends AbstractProduction {\n    constructor(options) {\n      super(options.definition);\n      this.idx = 1;\n      assign$1(this, pickBy(options, v => v !== void 0));\n    }\n  }\n  class Alternation extends AbstractProduction {\n    get definition() {\n      return this._definition;\n    }\n    set definition(value) {\n      this._definition = value;\n    }\n    constructor(options) {\n      super(options.definition);\n      this.idx = 1;\n      this.ignoreAmbiguities = false;\n      this.hasPredicates = false;\n      assign$1(this, pickBy(options, v => v !== void 0));\n    }\n  }\n  class Terminal {\n    constructor(options) {\n      this.idx = 1;\n      assign$1(this, pickBy(options, v => v !== void 0));\n    }\n    accept(visitor) {\n      visitor.visit(this);\n    }\n  }\n  function serializeGrammar(topRules) {\n    return map(topRules, serializeProduction);\n  }\n  function serializeProduction(node) {\n    function convertDefinition(definition) {\n      return map(definition, serializeProduction);\n    }\n    if (node instanceof NonTerminal) {\n      const serializedNonTerminal = {\n        type: \"NonTerminal\",\n        name: node.nonTerminalName,\n        idx: node.idx\n      };\n      if (isString(node.label)) {\n        serializedNonTerminal.label = node.label;\n      }\n      return serializedNonTerminal;\n    } else if (node instanceof Alternative) {\n      return {\n        type: \"Alternative\",\n        definition: convertDefinition(node.definition)\n      };\n    } else if (node instanceof Option) {\n      return {\n        type: \"Option\",\n        idx: node.idx,\n        definition: convertDefinition(node.definition)\n      };\n    } else if (node instanceof RepetitionMandatory) {\n      return {\n        type: \"RepetitionMandatory\",\n        idx: node.idx,\n        definition: convertDefinition(node.definition)\n      };\n    } else if (node instanceof RepetitionMandatoryWithSeparator) {\n      return {\n        type: \"RepetitionMandatoryWithSeparator\",\n        idx: node.idx,\n        separator: serializeProduction(new Terminal({\n          terminalType: node.separator\n        })),\n        definition: convertDefinition(node.definition)\n      };\n    } else if (node instanceof RepetitionWithSeparator) {\n      return {\n        type: \"RepetitionWithSeparator\",\n        idx: node.idx,\n        separator: serializeProduction(new Terminal({\n          terminalType: node.separator\n        })),\n        definition: convertDefinition(node.definition)\n      };\n    } else if (node instanceof Repetition) {\n      return {\n        type: \"Repetition\",\n        idx: node.idx,\n        definition: convertDefinition(node.definition)\n      };\n    } else if (node instanceof Alternation) {\n      return {\n        type: \"Alternation\",\n        idx: node.idx,\n        definition: convertDefinition(node.definition)\n      };\n    } else if (node instanceof Terminal) {\n      const serializedTerminal = {\n        type: \"Terminal\",\n        name: node.terminalType.name,\n        label: tokenLabel$1(node.terminalType),\n        idx: node.idx\n      };\n      if (isString(node.label)) {\n        serializedTerminal.terminalLabel = node.label;\n      }\n      const pattern = node.terminalType.PATTERN;\n      if (node.terminalType.PATTERN) {\n        serializedTerminal.pattern = isRegExp$1(pattern) ? pattern.source : pattern;\n      }\n      return serializedTerminal;\n    } else if (node instanceof Rule) {\n      return {\n        type: \"Rule\",\n        name: node.name,\n        orgText: node.orgText,\n        definition: convertDefinition(node.definition)\n      };\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n  }\n  class GAstVisitor {\n    visit(node) {\n      const nodeAny = node;\n      switch (nodeAny.constructor) {\n        case NonTerminal:\n          return this.visitNonTerminal(nodeAny);\n        case Alternative:\n          return this.visitAlternative(nodeAny);\n        case Option:\n          return this.visitOption(nodeAny);\n        case RepetitionMandatory:\n          return this.visitRepetitionMandatory(nodeAny);\n        case RepetitionMandatoryWithSeparator:\n          return this.visitRepetitionMandatoryWithSeparator(nodeAny);\n        case RepetitionWithSeparator:\n          return this.visitRepetitionWithSeparator(nodeAny);\n        case Repetition:\n          return this.visitRepetition(nodeAny);\n        case Alternation:\n          return this.visitAlternation(nodeAny);\n        case Terminal:\n          return this.visitTerminal(nodeAny);\n        case Rule:\n          return this.visitRule(nodeAny);\n        default:\n          throw Error(\"non exhaustive match\");\n      }\n    }\n    /* c8 ignore next */\n    visitNonTerminal(node) {}\n    /* c8 ignore next */\n    visitAlternative(node) {}\n    /* c8 ignore next */\n    visitOption(node) {}\n    /* c8 ignore next */\n    visitRepetition(node) {}\n    /* c8 ignore next */\n    visitRepetitionMandatory(node) {}\n    /* c8 ignore next 3 */\n    visitRepetitionMandatoryWithSeparator(node) {}\n    /* c8 ignore next */\n    visitRepetitionWithSeparator(node) {}\n    /* c8 ignore next */\n    visitAlternation(node) {}\n    /* c8 ignore next */\n    visitTerminal(node) {}\n    /* c8 ignore next */\n    visitRule(node) {}\n  }\n  function isSequenceProd(prod) {\n    return prod instanceof Alternative || prod instanceof Option || prod instanceof Repetition || prod instanceof RepetitionMandatory || prod instanceof RepetitionMandatoryWithSeparator || prod instanceof RepetitionWithSeparator || prod instanceof Terminal || prod instanceof Rule;\n  }\n  function isOptionalProd(prod) {\n    let alreadyVisited = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    const isDirectlyOptional = prod instanceof Option || prod instanceof Repetition || prod instanceof RepetitionWithSeparator;\n    if (isDirectlyOptional) {\n      return true;\n    }\n    if (prod instanceof Alternation) {\n      return some(prod.definition, subProd => {\n        return isOptionalProd(subProd, alreadyVisited);\n      });\n    } else if (prod instanceof NonTerminal && includes(alreadyVisited, prod)) {\n      return false;\n    } else if (prod instanceof AbstractProduction) {\n      if (prod instanceof NonTerminal) {\n        alreadyVisited.push(prod);\n      }\n      return every(prod.definition, subProd => {\n        return isOptionalProd(subProd, alreadyVisited);\n      });\n    } else {\n      return false;\n    }\n  }\n  function isBranchingProd(prod) {\n    return prod instanceof Alternation;\n  }\n  function getProductionDslName(prod) {\n    if (prod instanceof NonTerminal) {\n      return \"SUBRULE\";\n    } else if (prod instanceof Option) {\n      return \"OPTION\";\n    } else if (prod instanceof Alternation) {\n      return \"OR\";\n    } else if (prod instanceof RepetitionMandatory) {\n      return \"AT_LEAST_ONE\";\n    } else if (prod instanceof RepetitionMandatoryWithSeparator) {\n      return \"AT_LEAST_ONE_SEP\";\n    } else if (prod instanceof RepetitionWithSeparator) {\n      return \"MANY_SEP\";\n    } else if (prod instanceof Repetition) {\n      return \"MANY\";\n    } else if (prod instanceof Terminal) {\n      return \"CONSUME\";\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n  }\n  class RestWalker {\n    walk(prod) {\n      let prevRest = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      forEach(prod.definition, (subProd, index) => {\n        const currRest = drop(prod.definition, index + 1);\n        if (subProd instanceof NonTerminal) {\n          this.walkProdRef(subProd, currRest, prevRest);\n        } else if (subProd instanceof Terminal) {\n          this.walkTerminal(subProd, currRest, prevRest);\n        } else if (subProd instanceof Alternative) {\n          this.walkFlat(subProd, currRest, prevRest);\n        } else if (subProd instanceof Option) {\n          this.walkOption(subProd, currRest, prevRest);\n        } else if (subProd instanceof RepetitionMandatory) {\n          this.walkAtLeastOne(subProd, currRest, prevRest);\n        } else if (subProd instanceof RepetitionMandatoryWithSeparator) {\n          this.walkAtLeastOneSep(subProd, currRest, prevRest);\n        } else if (subProd instanceof RepetitionWithSeparator) {\n          this.walkManySep(subProd, currRest, prevRest);\n        } else if (subProd instanceof Repetition) {\n          this.walkMany(subProd, currRest, prevRest);\n        } else if (subProd instanceof Alternation) {\n          this.walkOr(subProd, currRest, prevRest);\n        } else {\n          throw Error(\"non exhaustive match\");\n        }\n      });\n    }\n    walkTerminal(terminal, currRest, prevRest) {}\n    walkProdRef(refProd, currRest, prevRest) {}\n    walkFlat(flatProd, currRest, prevRest) {\n      const fullOrRest = currRest.concat(prevRest);\n      this.walk(flatProd, fullOrRest);\n    }\n    walkOption(optionProd, currRest, prevRest) {\n      const fullOrRest = currRest.concat(prevRest);\n      this.walk(optionProd, fullOrRest);\n    }\n    walkAtLeastOne(atLeastOneProd, currRest, prevRest) {\n      const fullAtLeastOneRest = [new Option({\n        definition: atLeastOneProd.definition\n      })].concat(currRest, prevRest);\n      this.walk(atLeastOneProd, fullAtLeastOneRest);\n    }\n    walkAtLeastOneSep(atLeastOneSepProd, currRest, prevRest) {\n      const fullAtLeastOneSepRest = restForRepetitionWithSeparator(atLeastOneSepProd, currRest, prevRest);\n      this.walk(atLeastOneSepProd, fullAtLeastOneSepRest);\n    }\n    walkMany(manyProd, currRest, prevRest) {\n      const fullManyRest = [new Option({\n        definition: manyProd.definition\n      })].concat(currRest, prevRest);\n      this.walk(manyProd, fullManyRest);\n    }\n    walkManySep(manySepProd, currRest, prevRest) {\n      const fullManySepRest = restForRepetitionWithSeparator(manySepProd, currRest, prevRest);\n      this.walk(manySepProd, fullManySepRest);\n    }\n    walkOr(orProd, currRest, prevRest) {\n      const fullOrRest = currRest.concat(prevRest);\n      forEach(orProd.definition, alt => {\n        const prodWrapper = new Alternative({\n          definition: [alt]\n        });\n        this.walk(prodWrapper, fullOrRest);\n      });\n    }\n  }\n  function restForRepetitionWithSeparator(repSepProd, currRest, prevRest) {\n    const repSepRest = [new Option({\n      definition: [new Terminal({\n        terminalType: repSepProd.separator\n      })].concat(repSepProd.definition)\n    })];\n    const fullRepSepRest = repSepRest.concat(currRest, prevRest);\n    return fullRepSepRest;\n  }\n  function first(prod) {\n    if (prod instanceof NonTerminal) {\n      return first(prod.referencedRule);\n    } else if (prod instanceof Terminal) {\n      return firstForTerminal(prod);\n    } else if (isSequenceProd(prod)) {\n      return firstForSequence(prod);\n    } else if (isBranchingProd(prod)) {\n      return firstForBranching(prod);\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n  }\n  function firstForSequence(prod) {\n    let firstSet = [];\n    const seq = prod.definition;\n    let nextSubProdIdx = 0;\n    let hasInnerProdsRemaining = seq.length > nextSubProdIdx;\n    let currSubProd;\n    let isLastInnerProdOptional = true;\n    while (hasInnerProdsRemaining && isLastInnerProdOptional) {\n      currSubProd = seq[nextSubProdIdx];\n      isLastInnerProdOptional = isOptionalProd(currSubProd);\n      firstSet = firstSet.concat(first(currSubProd));\n      nextSubProdIdx = nextSubProdIdx + 1;\n      hasInnerProdsRemaining = seq.length > nextSubProdIdx;\n    }\n    return uniq(firstSet);\n  }\n  function firstForBranching(prod) {\n    const allAlternativesFirsts = map(prod.definition, innerProd => {\n      return first(innerProd);\n    });\n    return uniq(flatten(allAlternativesFirsts));\n  }\n  function firstForTerminal(terminal) {\n    return [terminal.terminalType];\n  }\n  const IN = \"_~IN~_\";\n  class ResyncFollowsWalker extends RestWalker {\n    constructor(topProd) {\n      super();\n      this.topProd = topProd;\n      this.follows = {};\n    }\n    startWalking() {\n      this.walk(this.topProd);\n      return this.follows;\n    }\n    walkTerminal(terminal, currRest, prevRest) {}\n    walkProdRef(refProd, currRest, prevRest) {\n      const followName = buildBetweenProdsFollowPrefix(refProd.referencedRule, refProd.idx) + this.topProd.name;\n      const fullRest = currRest.concat(prevRest);\n      const restProd = new Alternative({\n        definition: fullRest\n      });\n      const t_in_topProd_follows = first(restProd);\n      this.follows[followName] = t_in_topProd_follows;\n    }\n  }\n  function computeAllProdsFollows(topProductions) {\n    const reSyncFollows = {};\n    forEach(topProductions, topProd => {\n      const currRefsFollow = new ResyncFollowsWalker(topProd).startWalking();\n      assign$1(reSyncFollows, currRefsFollow);\n    });\n    return reSyncFollows;\n  }\n  function buildBetweenProdsFollowPrefix(inner, occurenceInParent) {\n    return inner.name + occurenceInParent + IN;\n  }\n  function cc(char) {\n    return char.charCodeAt(0);\n  }\n  function insertToSet(item, set) {\n    if (Array.isArray(item)) {\n      item.forEach(function (subItem) {\n        set.push(subItem);\n      });\n    } else {\n      set.push(item);\n    }\n  }\n  function addFlag(flagObj, flagKey) {\n    if (flagObj[flagKey] === true) {\n      throw \"duplicate flag \" + flagKey;\n    }\n    flagObj[flagKey];\n    flagObj[flagKey] = true;\n  }\n  function ASSERT_EXISTS(obj) {\n    if (obj === void 0) {\n      throw Error(\"Internal Error - Should never get here!\");\n    }\n    return true;\n  }\n  function ASSERT_NEVER_REACH_HERE() {\n    throw Error(\"Internal Error - Should never get here!\");\n  }\n  function isCharacter(obj) {\n    return obj[\"type\"] === \"Character\";\n  }\n  const digitsCharCodes = [];\n  for (let i = cc(\"0\"); i <= cc(\"9\"); i++) {\n    digitsCharCodes.push(i);\n  }\n  const wordCharCodes = [cc(\"_\")].concat(digitsCharCodes);\n  for (let i = cc(\"a\"); i <= cc(\"z\"); i++) {\n    wordCharCodes.push(i);\n  }\n  for (let i = cc(\"A\"); i <= cc(\"Z\"); i++) {\n    wordCharCodes.push(i);\n  }\n  const whitespaceCodes = [cc(\" \"), cc(\"\\f\"), cc(\"\\n\"), cc(\"\\r\"), cc(\"\t\"), cc(\"\\v\"), cc(\"\t\"), cc(\" \"), cc(\" \"), cc(\" \"), cc(\" \"), cc(\" \"), cc(\" \"), cc(\" \"), cc(\" \"), cc(\" \"), cc(\" \"), cc(\" \"), cc(\" \"), cc(\" \"), cc(\"\\u2028\"), cc(\"\\u2029\"), cc(\" \"), cc(\" \"), cc(\"　\"), cc(\"\\uFEFF\")];\n  const hexDigitPattern = /[0-9a-fA-F]/;\n  const decimalPattern = /[0-9]/;\n  const decimalPatternNoZero = /[1-9]/;\n  class RegExpParser {\n    constructor() {\n      this.idx = 0;\n      this.input = \"\";\n      this.groupIdx = 0;\n    }\n    saveState() {\n      return {\n        idx: this.idx,\n        input: this.input,\n        groupIdx: this.groupIdx\n      };\n    }\n    restoreState(newState) {\n      this.idx = newState.idx;\n      this.input = newState.input;\n      this.groupIdx = newState.groupIdx;\n    }\n    pattern(input) {\n      this.idx = 0;\n      this.input = input;\n      this.groupIdx = 0;\n      this.consumeChar(\"/\");\n      const value = this.disjunction();\n      this.consumeChar(\"/\");\n      const flags = {\n        type: \"Flags\",\n        loc: {\n          begin: this.idx,\n          end: input.length\n        },\n        global: false,\n        ignoreCase: false,\n        multiLine: false,\n        unicode: false,\n        sticky: false\n      };\n      while (this.isRegExpFlag()) {\n        switch (this.popChar()) {\n          case \"g\":\n            addFlag(flags, \"global\");\n            break;\n          case \"i\":\n            addFlag(flags, \"ignoreCase\");\n            break;\n          case \"m\":\n            addFlag(flags, \"multiLine\");\n            break;\n          case \"u\":\n            addFlag(flags, \"unicode\");\n            break;\n          case \"y\":\n            addFlag(flags, \"sticky\");\n            break;\n        }\n      }\n      if (this.idx !== this.input.length) {\n        throw Error(\"Redundant input: \" + this.input.substring(this.idx));\n      }\n      return {\n        type: \"Pattern\",\n        flags,\n        value,\n        loc: this.loc(0)\n      };\n    }\n    disjunction() {\n      const alts = [];\n      const begin = this.idx;\n      alts.push(this.alternative());\n      while (this.peekChar() === \"|\") {\n        this.consumeChar(\"|\");\n        alts.push(this.alternative());\n      }\n      return {\n        type: \"Disjunction\",\n        value: alts,\n        loc: this.loc(begin)\n      };\n    }\n    alternative() {\n      const terms = [];\n      const begin = this.idx;\n      while (this.isTerm()) {\n        terms.push(this.term());\n      }\n      return {\n        type: \"Alternative\",\n        value: terms,\n        loc: this.loc(begin)\n      };\n    }\n    term() {\n      if (this.isAssertion()) {\n        return this.assertion();\n      } else {\n        return this.atom();\n      }\n    }\n    assertion() {\n      const begin = this.idx;\n      switch (this.popChar()) {\n        case \"^\":\n          return {\n            type: \"StartAnchor\",\n            loc: this.loc(begin)\n          };\n        case \"$\":\n          return {\n            type: \"EndAnchor\",\n            loc: this.loc(begin)\n          };\n        case \"\\\\\":\n          switch (this.popChar()) {\n            case \"b\":\n              return {\n                type: \"WordBoundary\",\n                loc: this.loc(begin)\n              };\n            case \"B\":\n              return {\n                type: \"NonWordBoundary\",\n                loc: this.loc(begin)\n              };\n          }\n          throw Error(\"Invalid Assertion Escape\");\n        case \"(\":\n          this.consumeChar(\"?\");\n          let type;\n          switch (this.popChar()) {\n            case \"=\":\n              type = \"Lookahead\";\n              break;\n            case \"!\":\n              type = \"NegativeLookahead\";\n              break;\n          }\n          ASSERT_EXISTS(type);\n          const disjunction = this.disjunction();\n          this.consumeChar(\")\");\n          return {\n            type,\n            value: disjunction,\n            loc: this.loc(begin)\n          };\n      }\n      return ASSERT_NEVER_REACH_HERE();\n    }\n    quantifier() {\n      let isBacktracking = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      let range = void 0;\n      const begin = this.idx;\n      switch (this.popChar()) {\n        case \"*\":\n          range = {\n            atLeast: 0,\n            atMost: Infinity\n          };\n          break;\n        case \"+\":\n          range = {\n            atLeast: 1,\n            atMost: Infinity\n          };\n          break;\n        case \"?\":\n          range = {\n            atLeast: 0,\n            atMost: 1\n          };\n          break;\n        case \"{\":\n          const atLeast = this.integerIncludingZero();\n          switch (this.popChar()) {\n            case \"}\":\n              range = {\n                atLeast,\n                atMost: atLeast\n              };\n              break;\n            case \",\":\n              let atMost;\n              if (this.isDigit()) {\n                atMost = this.integerIncludingZero();\n                range = {\n                  atLeast,\n                  atMost\n                };\n              } else {\n                range = {\n                  atLeast,\n                  atMost: Infinity\n                };\n              }\n              this.consumeChar(\"}\");\n              break;\n          }\n          if (isBacktracking === true && range === void 0) {\n            return void 0;\n          }\n          ASSERT_EXISTS(range);\n          break;\n      }\n      if (isBacktracking === true && range === void 0) {\n        return void 0;\n      }\n      if (ASSERT_EXISTS(range)) {\n        if (this.peekChar(0) === \"?\") {\n          this.consumeChar(\"?\");\n          range.greedy = false;\n        } else {\n          range.greedy = true;\n        }\n        range.type = \"Quantifier\";\n        range.loc = this.loc(begin);\n        return range;\n      }\n    }\n    atom() {\n      let atom;\n      const begin = this.idx;\n      switch (this.peekChar()) {\n        case \".\":\n          atom = this.dotAll();\n          break;\n        case \"\\\\\":\n          atom = this.atomEscape();\n          break;\n        case \"[\":\n          atom = this.characterClass();\n          break;\n        case \"(\":\n          atom = this.group();\n          break;\n      }\n      if (atom === void 0 && this.isPatternCharacter()) {\n        atom = this.patternCharacter();\n      }\n      if (ASSERT_EXISTS(atom)) {\n        atom.loc = this.loc(begin);\n        if (this.isQuantifier()) {\n          atom.quantifier = this.quantifier();\n        }\n        return atom;\n      }\n    }\n    dotAll() {\n      this.consumeChar(\".\");\n      return {\n        type: \"Set\",\n        complement: true,\n        value: [cc(\"\\n\"), cc(\"\\r\"), cc(\"\\u2028\"), cc(\"\\u2029\")]\n      };\n    }\n    atomEscape() {\n      this.consumeChar(\"\\\\\");\n      switch (this.peekChar()) {\n        case \"1\":\n        case \"2\":\n        case \"3\":\n        case \"4\":\n        case \"5\":\n        case \"6\":\n        case \"7\":\n        case \"8\":\n        case \"9\":\n          return this.decimalEscapeAtom();\n        case \"d\":\n        case \"D\":\n        case \"s\":\n        case \"S\":\n        case \"w\":\n        case \"W\":\n          return this.characterClassEscape();\n        case \"f\":\n        case \"n\":\n        case \"r\":\n        case \"t\":\n        case \"v\":\n          return this.controlEscapeAtom();\n        case \"c\":\n          return this.controlLetterEscapeAtom();\n        case \"0\":\n          return this.nulCharacterAtom();\n        case \"x\":\n          return this.hexEscapeSequenceAtom();\n        case \"u\":\n          return this.regExpUnicodeEscapeSequenceAtom();\n        default:\n          return this.identityEscapeAtom();\n      }\n    }\n    decimalEscapeAtom() {\n      const value = this.positiveInteger();\n      return {\n        type: \"GroupBackReference\",\n        value\n      };\n    }\n    characterClassEscape() {\n      let set;\n      let complement = false;\n      switch (this.popChar()) {\n        case \"d\":\n          set = digitsCharCodes;\n          break;\n        case \"D\":\n          set = digitsCharCodes;\n          complement = true;\n          break;\n        case \"s\":\n          set = whitespaceCodes;\n          break;\n        case \"S\":\n          set = whitespaceCodes;\n          complement = true;\n          break;\n        case \"w\":\n          set = wordCharCodes;\n          break;\n        case \"W\":\n          set = wordCharCodes;\n          complement = true;\n          break;\n      }\n      if (ASSERT_EXISTS(set)) {\n        return {\n          type: \"Set\",\n          value: set,\n          complement\n        };\n      }\n    }\n    controlEscapeAtom() {\n      let escapeCode;\n      switch (this.popChar()) {\n        case \"f\":\n          escapeCode = cc(\"\\f\");\n          break;\n        case \"n\":\n          escapeCode = cc(\"\\n\");\n          break;\n        case \"r\":\n          escapeCode = cc(\"\\r\");\n          break;\n        case \"t\":\n          escapeCode = cc(\"\t\");\n          break;\n        case \"v\":\n          escapeCode = cc(\"\\v\");\n          break;\n      }\n      if (ASSERT_EXISTS(escapeCode)) {\n        return {\n          type: \"Character\",\n          value: escapeCode\n        };\n      }\n    }\n    controlLetterEscapeAtom() {\n      this.consumeChar(\"c\");\n      const letter = this.popChar();\n      if (/[a-zA-Z]/.test(letter) === false) {\n        throw Error(\"Invalid \");\n      }\n      const letterCode = letter.toUpperCase().charCodeAt(0) - 64;\n      return {\n        type: \"Character\",\n        value: letterCode\n      };\n    }\n    nulCharacterAtom() {\n      this.consumeChar(\"0\");\n      return {\n        type: \"Character\",\n        value: cc(\"\\0\")\n      };\n    }\n    hexEscapeSequenceAtom() {\n      this.consumeChar(\"x\");\n      return this.parseHexDigits(2);\n    }\n    regExpUnicodeEscapeSequenceAtom() {\n      this.consumeChar(\"u\");\n      return this.parseHexDigits(4);\n    }\n    identityEscapeAtom() {\n      const escapedChar = this.popChar();\n      return {\n        type: \"Character\",\n        value: cc(escapedChar)\n      };\n    }\n    classPatternCharacterAtom() {\n      switch (this.peekChar()) {\n        case \"\\n\":\n        case \"\\r\":\n        case \"\\u2028\":\n        case \"\\u2029\":\n        case \"\\\\\":\n        case \"]\":\n          throw Error(\"TBD\");\n        default:\n          const nextChar = this.popChar();\n          return {\n            type: \"Character\",\n            value: cc(nextChar)\n          };\n      }\n    }\n    characterClass() {\n      const set = [];\n      let complement = false;\n      this.consumeChar(\"[\");\n      if (this.peekChar(0) === \"^\") {\n        this.consumeChar(\"^\");\n        complement = true;\n      }\n      while (this.isClassAtom()) {\n        const from = this.classAtom();\n        from.type === \"Character\";\n        if (isCharacter(from) && this.isRangeDash()) {\n          this.consumeChar(\"-\");\n          const to = this.classAtom();\n          to.type === \"Character\";\n          if (isCharacter(to)) {\n            if (to.value < from.value) {\n              throw Error(\"Range out of order in character class\");\n            }\n            set.push({\n              from: from.value,\n              to: to.value\n            });\n          } else {\n            insertToSet(from.value, set);\n            set.push(cc(\"-\"));\n            insertToSet(to.value, set);\n          }\n        } else {\n          insertToSet(from.value, set);\n        }\n      }\n      this.consumeChar(\"]\");\n      return {\n        type: \"Set\",\n        complement,\n        value: set\n      };\n    }\n    classAtom() {\n      switch (this.peekChar()) {\n        case \"]\":\n        case \"\\n\":\n        case \"\\r\":\n        case \"\\u2028\":\n        case \"\\u2029\":\n          throw Error(\"TBD\");\n        case \"\\\\\":\n          return this.classEscape();\n        default:\n          return this.classPatternCharacterAtom();\n      }\n    }\n    classEscape() {\n      this.consumeChar(\"\\\\\");\n      switch (this.peekChar()) {\n        case \"b\":\n          this.consumeChar(\"b\");\n          return {\n            type: \"Character\",\n            value: cc(\"\\b\")\n          };\n        case \"d\":\n        case \"D\":\n        case \"s\":\n        case \"S\":\n        case \"w\":\n        case \"W\":\n          return this.characterClassEscape();\n        case \"f\":\n        case \"n\":\n        case \"r\":\n        case \"t\":\n        case \"v\":\n          return this.controlEscapeAtom();\n        case \"c\":\n          return this.controlLetterEscapeAtom();\n        case \"0\":\n          return this.nulCharacterAtom();\n        case \"x\":\n          return this.hexEscapeSequenceAtom();\n        case \"u\":\n          return this.regExpUnicodeEscapeSequenceAtom();\n        default:\n          return this.identityEscapeAtom();\n      }\n    }\n    group() {\n      let capturing = true;\n      this.consumeChar(\"(\");\n      switch (this.peekChar(0)) {\n        case \"?\":\n          this.consumeChar(\"?\");\n          this.consumeChar(\":\");\n          capturing = false;\n          break;\n        default:\n          this.groupIdx++;\n          break;\n      }\n      const value = this.disjunction();\n      this.consumeChar(\")\");\n      const groupAst = {\n        type: \"Group\",\n        capturing,\n        value\n      };\n      if (capturing) {\n        groupAst[\"idx\"] = this.groupIdx;\n      }\n      return groupAst;\n    }\n    positiveInteger() {\n      let number = this.popChar();\n      if (decimalPatternNoZero.test(number) === false) {\n        throw Error(\"Expecting a positive integer\");\n      }\n      while (decimalPattern.test(this.peekChar(0))) {\n        number += this.popChar();\n      }\n      return parseInt(number, 10);\n    }\n    integerIncludingZero() {\n      let number = this.popChar();\n      if (decimalPattern.test(number) === false) {\n        throw Error(\"Expecting an integer\");\n      }\n      while (decimalPattern.test(this.peekChar(0))) {\n        number += this.popChar();\n      }\n      return parseInt(number, 10);\n    }\n    patternCharacter() {\n      const nextChar = this.popChar();\n      switch (nextChar) {\n        case \"\\n\":\n        case \"\\r\":\n        case \"\\u2028\":\n        case \"\\u2029\":\n        case \"^\":\n        case \"$\":\n        case \"\\\\\":\n        case \".\":\n        case \"*\":\n        case \"+\":\n        case \"?\":\n        case \"(\":\n        case \")\":\n        case \"[\":\n        case \"|\":\n          throw Error(\"TBD\");\n        default:\n          return {\n            type: \"Character\",\n            value: cc(nextChar)\n          };\n      }\n    }\n    isRegExpFlag() {\n      switch (this.peekChar(0)) {\n        case \"g\":\n        case \"i\":\n        case \"m\":\n        case \"u\":\n        case \"y\":\n          return true;\n        default:\n          return false;\n      }\n    }\n    isRangeDash() {\n      return this.peekChar() === \"-\" && this.isClassAtom(1);\n    }\n    isDigit() {\n      return decimalPattern.test(this.peekChar(0));\n    }\n    isClassAtom() {\n      let howMuch = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      switch (this.peekChar(howMuch)) {\n        case \"]\":\n        case \"\\n\":\n        case \"\\r\":\n        case \"\\u2028\":\n        case \"\\u2029\":\n          return false;\n        default:\n          return true;\n      }\n    }\n    isTerm() {\n      return this.isAtom() || this.isAssertion();\n    }\n    isAtom() {\n      if (this.isPatternCharacter()) {\n        return true;\n      }\n      switch (this.peekChar(0)) {\n        case \".\":\n        case \"\\\\\":\n        case \"[\":\n        case \"(\":\n          return true;\n        default:\n          return false;\n      }\n    }\n    isAssertion() {\n      switch (this.peekChar(0)) {\n        case \"^\":\n        case \"$\":\n          return true;\n        case \"\\\\\":\n          switch (this.peekChar(1)) {\n            case \"b\":\n            case \"B\":\n              return true;\n            default:\n              return false;\n          }\n        case \"(\":\n          return this.peekChar(1) === \"?\" && (this.peekChar(2) === \"=\" || this.peekChar(2) === \"!\");\n        default:\n          return false;\n      }\n    }\n    isQuantifier() {\n      const prevState = this.saveState();\n      try {\n        return this.quantifier(true) !== void 0;\n      } catch (e) {\n        return false;\n      } finally {\n        this.restoreState(prevState);\n      }\n    }\n    isPatternCharacter() {\n      switch (this.peekChar()) {\n        case \"^\":\n        case \"$\":\n        case \"\\\\\":\n        case \".\":\n        case \"*\":\n        case \"+\":\n        case \"?\":\n        case \"(\":\n        case \")\":\n        case \"[\":\n        case \"|\":\n        case \"/\":\n        case \"\\n\":\n        case \"\\r\":\n        case \"\\u2028\":\n        case \"\\u2029\":\n          return false;\n        default:\n          return true;\n      }\n    }\n    parseHexDigits(howMany) {\n      let hexString = \"\";\n      for (let i = 0; i < howMany; i++) {\n        const hexChar = this.popChar();\n        if (hexDigitPattern.test(hexChar) === false) {\n          throw Error(\"Expecting a HexDecimal digits\");\n        }\n        hexString += hexChar;\n      }\n      const charCode = parseInt(hexString, 16);\n      return {\n        type: \"Character\",\n        value: charCode\n      };\n    }\n    peekChar() {\n      let howMuch = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      return this.input[this.idx + howMuch];\n    }\n    popChar() {\n      const nextChar = this.peekChar(0);\n      this.consumeChar(void 0);\n      return nextChar;\n    }\n    consumeChar(char) {\n      if (char !== void 0 && this.input[this.idx] !== char) {\n        throw Error(\"Expected: '\" + char + \"' but found: '\" + this.input[this.idx] + \"' at offset: \" + this.idx);\n      }\n      if (this.idx >= this.input.length) {\n        throw Error(\"Unexpected end of input\");\n      }\n      this.idx++;\n    }\n    loc(begin) {\n      return {\n        begin,\n        end: this.idx\n      };\n    }\n  }\n  class BaseRegExpVisitor {\n    visitChildren(node) {\n      for (const key in node) {\n        const child = node[key];\n        if (node.hasOwnProperty(key)) {\n          if (child.type !== void 0) {\n            this.visit(child);\n          } else if (Array.isArray(child)) {\n            child.forEach(subChild => {\n              this.visit(subChild);\n            }, this);\n          }\n        }\n      }\n    }\n    visit(node) {\n      switch (node.type) {\n        case \"Pattern\":\n          this.visitPattern(node);\n          break;\n        case \"Flags\":\n          this.visitFlags(node);\n          break;\n        case \"Disjunction\":\n          this.visitDisjunction(node);\n          break;\n        case \"Alternative\":\n          this.visitAlternative(node);\n          break;\n        case \"StartAnchor\":\n          this.visitStartAnchor(node);\n          break;\n        case \"EndAnchor\":\n          this.visitEndAnchor(node);\n          break;\n        case \"WordBoundary\":\n          this.visitWordBoundary(node);\n          break;\n        case \"NonWordBoundary\":\n          this.visitNonWordBoundary(node);\n          break;\n        case \"Lookahead\":\n          this.visitLookahead(node);\n          break;\n        case \"NegativeLookahead\":\n          this.visitNegativeLookahead(node);\n          break;\n        case \"Character\":\n          this.visitCharacter(node);\n          break;\n        case \"Set\":\n          this.visitSet(node);\n          break;\n        case \"Group\":\n          this.visitGroup(node);\n          break;\n        case \"GroupBackReference\":\n          this.visitGroupBackReference(node);\n          break;\n        case \"Quantifier\":\n          this.visitQuantifier(node);\n          break;\n      }\n      this.visitChildren(node);\n    }\n    visitPattern(node) {}\n    visitFlags(node) {}\n    visitDisjunction(node) {}\n    visitAlternative(node) {}\n    // Assertion\n    visitStartAnchor(node) {}\n    visitEndAnchor(node) {}\n    visitWordBoundary(node) {}\n    visitNonWordBoundary(node) {}\n    visitLookahead(node) {}\n    visitNegativeLookahead(node) {}\n    // atoms\n    visitCharacter(node) {}\n    visitSet(node) {}\n    visitGroup(node) {}\n    visitGroupBackReference(node) {}\n    visitQuantifier(node) {}\n  }\n  let regExpAstCache = {};\n  const regExpParser = new RegExpParser();\n  function getRegExpAst(regExp) {\n    const regExpStr = regExp.toString();\n    if (regExpAstCache.hasOwnProperty(regExpStr)) {\n      return regExpAstCache[regExpStr];\n    } else {\n      const regExpAst = regExpParser.pattern(regExpStr);\n      regExpAstCache[regExpStr] = regExpAst;\n      return regExpAst;\n    }\n  }\n  function clearRegExpParserCache() {\n    regExpAstCache = {};\n  }\n  const complementErrorMessage = \"Complement Sets are not supported for first char optimization\";\n  const failedOptimizationPrefixMsg = 'Unable to use \"first char\" lexer optimizations:\\n';\n  function getOptimizedStartCodesIndices(regExp) {\n    let ensureOptimizations = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    try {\n      const ast = getRegExpAst(regExp);\n      const firstChars = firstCharOptimizedIndices(ast.value, {}, ast.flags.ignoreCase);\n      return firstChars;\n    } catch (e) {\n      if (e.message === complementErrorMessage) {\n        if (ensureOptimizations) {\n          PRINT_WARNING(\"\".concat(failedOptimizationPrefixMsg, \"\\tUnable to optimize: < \").concat(regExp.toString(), \" >\\n\\tComplement Sets cannot be automatically optimized.\\n\\tThis will disable the lexer's first char optimizations.\\n\\tSee: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#COMPLEMENT for details.\"));\n        }\n      } else {\n        let msgSuffix = \"\";\n        if (ensureOptimizations) {\n          msgSuffix = \"\\n\tThis will disable the lexer's first char optimizations.\\n\tSee: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#REGEXP_PARSING for details.\";\n        }\n        PRINT_ERROR(\"\".concat(failedOptimizationPrefixMsg, \"\\n\\tFailed parsing: < \").concat(regExp.toString(), \" >\\n\\tUsing the @chevrotain/regexp-to-ast library\\n\\tPlease open an issue at: https://github.com/chevrotain/chevrotain/issues\") + msgSuffix);\n      }\n    }\n    return [];\n  }\n  function firstCharOptimizedIndices(ast, result, ignoreCase) {\n    switch (ast.type) {\n      case \"Disjunction\":\n        for (let i = 0; i < ast.value.length; i++) {\n          firstCharOptimizedIndices(ast.value[i], result, ignoreCase);\n        }\n        break;\n      case \"Alternative\":\n        const terms = ast.value;\n        for (let i = 0; i < terms.length; i++) {\n          const term = terms[i];\n          switch (term.type) {\n            case \"EndAnchor\":\n            case \"GroupBackReference\":\n            case \"Lookahead\":\n            case \"NegativeLookahead\":\n            case \"StartAnchor\":\n            case \"WordBoundary\":\n            case \"NonWordBoundary\":\n              continue;\n          }\n          const atom = term;\n          switch (atom.type) {\n            case \"Character\":\n              addOptimizedIdxToResult(atom.value, result, ignoreCase);\n              break;\n            case \"Set\":\n              if (atom.complement === true) {\n                throw Error(complementErrorMessage);\n              }\n              forEach(atom.value, code => {\n                if (typeof code === \"number\") {\n                  addOptimizedIdxToResult(code, result, ignoreCase);\n                } else {\n                  const range = code;\n                  if (ignoreCase === true) {\n                    for (let rangeCode = range.from; rangeCode <= range.to; rangeCode++) {\n                      addOptimizedIdxToResult(rangeCode, result, ignoreCase);\n                    }\n                  } else {\n                    for (let rangeCode = range.from; rangeCode <= range.to && rangeCode < minOptimizationVal; rangeCode++) {\n                      addOptimizedIdxToResult(rangeCode, result, ignoreCase);\n                    }\n                    if (range.to >= minOptimizationVal) {\n                      const minUnOptVal = range.from >= minOptimizationVal ? range.from : minOptimizationVal;\n                      const maxUnOptVal = range.to;\n                      const minOptIdx = charCodeToOptimizedIndex(minUnOptVal);\n                      const maxOptIdx = charCodeToOptimizedIndex(maxUnOptVal);\n                      for (let currOptIdx = minOptIdx; currOptIdx <= maxOptIdx; currOptIdx++) {\n                        result[currOptIdx] = currOptIdx;\n                      }\n                    }\n                  }\n                }\n              });\n              break;\n            case \"Group\":\n              firstCharOptimizedIndices(atom.value, result, ignoreCase);\n              break;\n            default:\n              throw Error(\"Non Exhaustive Match\");\n          }\n          const isOptionalQuantifier = atom.quantifier !== void 0 && atom.quantifier.atLeast === 0;\n          if (\n          // A group may be optional due to empty contents /(?:)/\n          // or if everything inside it is optional /((a)?)/\n          atom.type === \"Group\" && isWholeOptional(atom) === false ||\n          // If this term is not a group it may only be optional if it has an optional quantifier\n          atom.type !== \"Group\" && isOptionalQuantifier === false) {\n            break;\n          }\n        }\n        break;\n      default:\n        throw Error(\"non exhaustive match!\");\n    }\n    return values(result);\n  }\n  function addOptimizedIdxToResult(code, result, ignoreCase) {\n    const optimizedCharIdx = charCodeToOptimizedIndex(code);\n    result[optimizedCharIdx] = optimizedCharIdx;\n    if (ignoreCase === true) {\n      handleIgnoreCase(code, result);\n    }\n  }\n  function handleIgnoreCase(code, result) {\n    const char = String.fromCharCode(code);\n    const upperChar = char.toUpperCase();\n    if (upperChar !== char) {\n      const optimizedCharIdx = charCodeToOptimizedIndex(upperChar.charCodeAt(0));\n      result[optimizedCharIdx] = optimizedCharIdx;\n    } else {\n      const lowerChar = char.toLowerCase();\n      if (lowerChar !== char) {\n        const optimizedCharIdx = charCodeToOptimizedIndex(lowerChar.charCodeAt(0));\n        result[optimizedCharIdx] = optimizedCharIdx;\n      }\n    }\n  }\n  function findCode(setNode, targetCharCodes) {\n    return find$1(setNode.value, codeOrRange => {\n      if (typeof codeOrRange === \"number\") {\n        return includes(targetCharCodes, codeOrRange);\n      } else {\n        const range = codeOrRange;\n        return find$1(targetCharCodes, targetCode => range.from <= targetCode && targetCode <= range.to) !== void 0;\n      }\n    });\n  }\n  function isWholeOptional(ast) {\n    const quantifier = ast.quantifier;\n    if (quantifier && quantifier.atLeast === 0) {\n      return true;\n    }\n    if (!ast.value) {\n      return false;\n    }\n    return isArray$1(ast.value) ? every(ast.value, isWholeOptional) : isWholeOptional(ast.value);\n  }\n  class CharCodeFinder extends BaseRegExpVisitor {\n    constructor(targetCharCodes) {\n      super();\n      this.targetCharCodes = targetCharCodes;\n      this.found = false;\n    }\n    visitChildren(node) {\n      if (this.found === true) {\n        return;\n      }\n      switch (node.type) {\n        case \"Lookahead\":\n          this.visitLookahead(node);\n          return;\n        case \"NegativeLookahead\":\n          this.visitNegativeLookahead(node);\n          return;\n      }\n      super.visitChildren(node);\n    }\n    visitCharacter(node) {\n      if (includes(this.targetCharCodes, node.value)) {\n        this.found = true;\n      }\n    }\n    visitSet(node) {\n      if (node.complement) {\n        if (findCode(node, this.targetCharCodes) === void 0) {\n          this.found = true;\n        }\n      } else {\n        if (findCode(node, this.targetCharCodes) !== void 0) {\n          this.found = true;\n        }\n      }\n    }\n  }\n  function canMatchCharCode(charCodes, pattern) {\n    if (pattern instanceof RegExp) {\n      const ast = getRegExpAst(pattern);\n      const charCodeFinder = new CharCodeFinder(charCodes);\n      charCodeFinder.visit(ast);\n      return charCodeFinder.found;\n    } else {\n      return find$1(pattern, char => {\n        return includes(charCodes, char.charCodeAt(0));\n      }) !== void 0;\n    }\n  }\n  const PATTERN = \"PATTERN\";\n  const DEFAULT_MODE = \"defaultMode\";\n  const MODES = \"modes\";\n  let SUPPORT_STICKY = typeof new RegExp(\"(?:)\").sticky === \"boolean\";\n  function analyzeTokenTypes(tokenTypes, options) {\n    options = defaults$1(options, {\n      useSticky: SUPPORT_STICKY,\n      debug: false,\n      safeMode: false,\n      positionTracking: \"full\",\n      lineTerminatorCharacters: [\"\\r\", \"\\n\"],\n      tracer: (msg, action) => action()\n    });\n    const tracer = options.tracer;\n    tracer(\"initCharCodeToOptimizedIndexMap\", () => {\n      initCharCodeToOptimizedIndexMap();\n    });\n    let onlyRelevantTypes;\n    tracer(\"Reject Lexer.NA\", () => {\n      onlyRelevantTypes = reject(tokenTypes, currType => {\n        return currType[PATTERN] === Lexer2.NA;\n      });\n    });\n    let hasCustom = false;\n    let allTransformedPatterns;\n    tracer(\"Transform Patterns\", () => {\n      hasCustom = false;\n      allTransformedPatterns = map(onlyRelevantTypes, currType => {\n        const currPattern = currType[PATTERN];\n        if (isRegExp$1(currPattern)) {\n          const regExpSource = currPattern.source;\n          if (regExpSource.length === 1 &&\n          // only these regExp meta characters which can appear in a length one regExp\n          regExpSource !== \"^\" && regExpSource !== \"$\" && regExpSource !== \".\" && !currPattern.ignoreCase) {\n            return regExpSource;\n          } else if (regExpSource.length === 2 && regExpSource[0] === \"\\\\\" &&\n          // not a meta character\n          !includes([\"d\", \"D\", \"s\", \"S\", \"t\", \"r\", \"n\", \"t\", \"0\", \"c\", \"b\", \"B\", \"f\", \"v\", \"w\", \"W\"], regExpSource[1])) {\n            return regExpSource[1];\n          } else {\n            return options.useSticky ? addStickyFlag(currPattern) : addStartOfInput(currPattern);\n          }\n        } else if (isFunction(currPattern)) {\n          hasCustom = true;\n          return {\n            exec: currPattern\n          };\n        } else if (typeof currPattern === \"object\") {\n          hasCustom = true;\n          return currPattern;\n        } else if (typeof currPattern === \"string\") {\n          if (currPattern.length === 1) {\n            return currPattern;\n          } else {\n            const escapedRegExpString = currPattern.replace(/[\\\\^$.*+?()[\\]{}|]/g, \"\\\\$&\");\n            const wrappedRegExp = new RegExp(escapedRegExpString);\n            return options.useSticky ? addStickyFlag(wrappedRegExp) : addStartOfInput(wrappedRegExp);\n          }\n        } else {\n          throw Error(\"non exhaustive match\");\n        }\n      });\n    });\n    let patternIdxToType;\n    let patternIdxToGroup;\n    let patternIdxToLongerAltIdxArr;\n    let patternIdxToPushMode;\n    let patternIdxToPopMode;\n    tracer(\"misc mapping\", () => {\n      patternIdxToType = map(onlyRelevantTypes, currType => currType.tokenTypeIdx);\n      patternIdxToGroup = map(onlyRelevantTypes, clazz => {\n        const groupName = clazz.GROUP;\n        if (groupName === Lexer2.SKIPPED) {\n          return void 0;\n        } else if (isString(groupName)) {\n          return groupName;\n        } else if (isUndefined(groupName)) {\n          return false;\n        } else {\n          throw Error(\"non exhaustive match\");\n        }\n      });\n      patternIdxToLongerAltIdxArr = map(onlyRelevantTypes, clazz => {\n        const longerAltType = clazz.LONGER_ALT;\n        if (longerAltType) {\n          const longerAltIdxArr = isArray$1(longerAltType) ? map(longerAltType, type => indexOf(onlyRelevantTypes, type)) : [indexOf(onlyRelevantTypes, longerAltType)];\n          return longerAltIdxArr;\n        }\n      });\n      patternIdxToPushMode = map(onlyRelevantTypes, clazz => clazz.PUSH_MODE);\n      patternIdxToPopMode = map(onlyRelevantTypes, clazz => has(clazz, \"POP_MODE\"));\n    });\n    let patternIdxToCanLineTerminator;\n    tracer(\"Line Terminator Handling\", () => {\n      const lineTerminatorCharCodes = getCharCodes(options.lineTerminatorCharacters);\n      patternIdxToCanLineTerminator = map(onlyRelevantTypes, tokType => false);\n      if (options.positionTracking !== \"onlyOffset\") {\n        patternIdxToCanLineTerminator = map(onlyRelevantTypes, tokType => {\n          if (has(tokType, \"LINE_BREAKS\")) {\n            return !!tokType.LINE_BREAKS;\n          } else {\n            return checkLineBreaksIssues(tokType, lineTerminatorCharCodes) === false && canMatchCharCode(lineTerminatorCharCodes, tokType.PATTERN);\n          }\n        });\n      }\n    });\n    let patternIdxToIsCustom;\n    let patternIdxToShort;\n    let emptyGroups;\n    let patternIdxToConfig;\n    tracer(\"Misc Mapping #2\", () => {\n      patternIdxToIsCustom = map(onlyRelevantTypes, isCustomPattern);\n      patternIdxToShort = map(allTransformedPatterns, isShortPattern);\n      emptyGroups = reduce(onlyRelevantTypes, (acc, clazz) => {\n        const groupName = clazz.GROUP;\n        if (isString(groupName) && !(groupName === Lexer2.SKIPPED)) {\n          acc[groupName] = [];\n        }\n        return acc;\n      }, {});\n      patternIdxToConfig = map(allTransformedPatterns, (x, idx) => {\n        return {\n          pattern: allTransformedPatterns[idx],\n          longerAlt: patternIdxToLongerAltIdxArr[idx],\n          canLineTerminator: patternIdxToCanLineTerminator[idx],\n          isCustom: patternIdxToIsCustom[idx],\n          short: patternIdxToShort[idx],\n          group: patternIdxToGroup[idx],\n          push: patternIdxToPushMode[idx],\n          pop: patternIdxToPopMode[idx],\n          tokenTypeIdx: patternIdxToType[idx],\n          tokenType: onlyRelevantTypes[idx]\n        };\n      });\n    });\n    let canBeOptimized = true;\n    let charCodeToPatternIdxToConfig = [];\n    if (!options.safeMode) {\n      tracer(\"First Char Optimization\", () => {\n        charCodeToPatternIdxToConfig = reduce(onlyRelevantTypes, (result, currTokType, idx) => {\n          if (typeof currTokType.PATTERN === \"string\") {\n            const charCode = currTokType.PATTERN.charCodeAt(0);\n            const optimizedIdx = charCodeToOptimizedIndex(charCode);\n            addToMapOfArrays(result, optimizedIdx, patternIdxToConfig[idx]);\n          } else if (isArray$1(currTokType.START_CHARS_HINT)) {\n            let lastOptimizedIdx;\n            forEach(currTokType.START_CHARS_HINT, charOrInt => {\n              const charCode = typeof charOrInt === \"string\" ? charOrInt.charCodeAt(0) : charOrInt;\n              const currOptimizedIdx = charCodeToOptimizedIndex(charCode);\n              if (lastOptimizedIdx !== currOptimizedIdx) {\n                lastOptimizedIdx = currOptimizedIdx;\n                addToMapOfArrays(result, currOptimizedIdx, patternIdxToConfig[idx]);\n              }\n            });\n          } else if (isRegExp$1(currTokType.PATTERN)) {\n            if (currTokType.PATTERN.unicode) {\n              canBeOptimized = false;\n              if (options.ensureOptimizations) {\n                PRINT_ERROR(\"\".concat(failedOptimizationPrefixMsg, \"\\tUnable to analyze < \").concat(currTokType.PATTERN.toString(), \" > pattern.\\n\\tThe regexp unicode flag is not currently supported by the regexp-to-ast library.\\n\\tThis will disable the lexer's first char optimizations.\\n\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#UNICODE_OPTIMIZE\"));\n              }\n            } else {\n              const optimizedCodes = getOptimizedStartCodesIndices(currTokType.PATTERN, options.ensureOptimizations);\n              if (isEmpty(optimizedCodes)) {\n                canBeOptimized = false;\n              }\n              forEach(optimizedCodes, code => {\n                addToMapOfArrays(result, code, patternIdxToConfig[idx]);\n              });\n            }\n          } else {\n            if (options.ensureOptimizations) {\n              PRINT_ERROR(\"\".concat(failedOptimizationPrefixMsg, \"\\tTokenType: <\").concat(currTokType.name, \"> is using a custom token pattern without providing <start_chars_hint> parameter.\\n\\tThis will disable the lexer's first char optimizations.\\n\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#CUSTOM_OPTIMIZE\"));\n            }\n            canBeOptimized = false;\n          }\n          return result;\n        }, []);\n      });\n    }\n    return {\n      emptyGroups,\n      patternIdxToConfig,\n      charCodeToPatternIdxToConfig,\n      hasCustom,\n      canBeOptimized\n    };\n  }\n  function validatePatterns(tokenTypes, validModesNames) {\n    let errors = [];\n    const missingResult = findMissingPatterns(tokenTypes);\n    errors = errors.concat(missingResult.errors);\n    const invalidResult = findInvalidPatterns(missingResult.valid);\n    const validTokenTypes = invalidResult.valid;\n    errors = errors.concat(invalidResult.errors);\n    errors = errors.concat(validateRegExpPattern(validTokenTypes));\n    errors = errors.concat(findInvalidGroupType(validTokenTypes));\n    errors = errors.concat(findModesThatDoNotExist(validTokenTypes, validModesNames));\n    errors = errors.concat(findUnreachablePatterns(validTokenTypes));\n    return errors;\n  }\n  function validateRegExpPattern(tokenTypes) {\n    let errors = [];\n    const withRegExpPatterns = filter(tokenTypes, currTokType => isRegExp$1(currTokType[PATTERN]));\n    errors = errors.concat(findEndOfInputAnchor(withRegExpPatterns));\n    errors = errors.concat(findStartOfInputAnchor(withRegExpPatterns));\n    errors = errors.concat(findUnsupportedFlags(withRegExpPatterns));\n    errors = errors.concat(findDuplicatePatterns(withRegExpPatterns));\n    errors = errors.concat(findEmptyMatchRegExps(withRegExpPatterns));\n    return errors;\n  }\n  function findMissingPatterns(tokenTypes) {\n    const tokenTypesWithMissingPattern = filter(tokenTypes, currType => {\n      return !has(currType, PATTERN);\n    });\n    const errors = map(tokenTypesWithMissingPattern, currType => {\n      return {\n        message: \"Token Type: ->\" + currType.name + \"<- missing static 'PATTERN' property\",\n        type: LexerDefinitionErrorType.MISSING_PATTERN,\n        tokenTypes: [currType]\n      };\n    });\n    const valid = difference$1(tokenTypes, tokenTypesWithMissingPattern);\n    return {\n      errors,\n      valid\n    };\n  }\n  function findInvalidPatterns(tokenTypes) {\n    const tokenTypesWithInvalidPattern = filter(tokenTypes, currType => {\n      const pattern = currType[PATTERN];\n      return !isRegExp$1(pattern) && !isFunction(pattern) && !has(pattern, \"exec\") && !isString(pattern);\n    });\n    const errors = map(tokenTypesWithInvalidPattern, currType => {\n      return {\n        message: \"Token Type: ->\" + currType.name + \"<- static 'PATTERN' can only be a RegExp, a Function matching the {CustomPatternMatcherFunc} type or an Object matching the {ICustomPattern} interface.\",\n        type: LexerDefinitionErrorType.INVALID_PATTERN,\n        tokenTypes: [currType]\n      };\n    });\n    const valid = difference$1(tokenTypes, tokenTypesWithInvalidPattern);\n    return {\n      errors,\n      valid\n    };\n  }\n  const end_of_input = /[^\\\\][$]/;\n  function findEndOfInputAnchor(tokenTypes) {\n    class EndAnchorFinder extends BaseRegExpVisitor {\n      constructor() {\n        super(...arguments);\n        this.found = false;\n      }\n      visitEndAnchor(node) {\n        this.found = true;\n      }\n    }\n    const invalidRegex = filter(tokenTypes, currType => {\n      const pattern = currType.PATTERN;\n      try {\n        const regexpAst = getRegExpAst(pattern);\n        const endAnchorVisitor = new EndAnchorFinder();\n        endAnchorVisitor.visit(regexpAst);\n        return endAnchorVisitor.found;\n      } catch (e) {\n        return end_of_input.test(pattern.source);\n      }\n    });\n    const errors = map(invalidRegex, currType => {\n      return {\n        message: \"Unexpected RegExp Anchor Error:\\n\tToken Type: ->\" + currType.name + \"<- static 'PATTERN' cannot contain end of input anchor '$'\\n\tSee chevrotain.io/docs/guide/resolving_lexer_errors.html#ANCHORS\tfor details.\",\n        type: LexerDefinitionErrorType.EOI_ANCHOR_FOUND,\n        tokenTypes: [currType]\n      };\n    });\n    return errors;\n  }\n  function findEmptyMatchRegExps(tokenTypes) {\n    const matchesEmptyString = filter(tokenTypes, currType => {\n      const pattern = currType.PATTERN;\n      return pattern.test(\"\");\n    });\n    const errors = map(matchesEmptyString, currType => {\n      return {\n        message: \"Token Type: ->\" + currType.name + \"<- static 'PATTERN' must not match an empty string\",\n        type: LexerDefinitionErrorType.EMPTY_MATCH_PATTERN,\n        tokenTypes: [currType]\n      };\n    });\n    return errors;\n  }\n  const start_of_input = /[^\\\\[][\\^]|^\\^/;\n  function findStartOfInputAnchor(tokenTypes) {\n    class StartAnchorFinder extends BaseRegExpVisitor {\n      constructor() {\n        super(...arguments);\n        this.found = false;\n      }\n      visitStartAnchor(node) {\n        this.found = true;\n      }\n    }\n    const invalidRegex = filter(tokenTypes, currType => {\n      const pattern = currType.PATTERN;\n      try {\n        const regexpAst = getRegExpAst(pattern);\n        const startAnchorVisitor = new StartAnchorFinder();\n        startAnchorVisitor.visit(regexpAst);\n        return startAnchorVisitor.found;\n      } catch (e) {\n        return start_of_input.test(pattern.source);\n      }\n    });\n    const errors = map(invalidRegex, currType => {\n      return {\n        message: \"Unexpected RegExp Anchor Error:\\n\tToken Type: ->\" + currType.name + \"<- static 'PATTERN' cannot contain start of input anchor '^'\\n\tSee https://chevrotain.io/docs/guide/resolving_lexer_errors.html#ANCHORS\tfor details.\",\n        type: LexerDefinitionErrorType.SOI_ANCHOR_FOUND,\n        tokenTypes: [currType]\n      };\n    });\n    return errors;\n  }\n  function findUnsupportedFlags(tokenTypes) {\n    const invalidFlags = filter(tokenTypes, currType => {\n      const pattern = currType[PATTERN];\n      return pattern instanceof RegExp && (pattern.multiline || pattern.global);\n    });\n    const errors = map(invalidFlags, currType => {\n      return {\n        message: \"Token Type: ->\" + currType.name + \"<- static 'PATTERN' may NOT contain global('g') or multiline('m')\",\n        type: LexerDefinitionErrorType.UNSUPPORTED_FLAGS_FOUND,\n        tokenTypes: [currType]\n      };\n    });\n    return errors;\n  }\n  function findDuplicatePatterns(tokenTypes) {\n    const found = [];\n    let identicalPatterns = map(tokenTypes, outerType => {\n      return reduce(tokenTypes, (result, innerType) => {\n        if (outerType.PATTERN.source === innerType.PATTERN.source && !includes(found, innerType) && innerType.PATTERN !== Lexer2.NA) {\n          found.push(innerType);\n          result.push(innerType);\n          return result;\n        }\n        return result;\n      }, []);\n    });\n    identicalPatterns = compact(identicalPatterns);\n    const duplicatePatterns = filter(identicalPatterns, currIdenticalSet => {\n      return currIdenticalSet.length > 1;\n    });\n    const errors = map(duplicatePatterns, setOfIdentical => {\n      const tokenTypeNames = map(setOfIdentical, currType => {\n        return currType.name;\n      });\n      const dupPatternSrc = head(setOfIdentical).PATTERN;\n      return {\n        message: \"The same RegExp pattern ->\".concat(dupPatternSrc, \"<-has been used in all of the following Token Types: \").concat(tokenTypeNames.join(\", \"), \" <-\"),\n        type: LexerDefinitionErrorType.DUPLICATE_PATTERNS_FOUND,\n        tokenTypes: setOfIdentical\n      };\n    });\n    return errors;\n  }\n  function findInvalidGroupType(tokenTypes) {\n    const invalidTypes = filter(tokenTypes, clazz => {\n      if (!has(clazz, \"GROUP\")) {\n        return false;\n      }\n      const group = clazz.GROUP;\n      return group !== Lexer2.SKIPPED && group !== Lexer2.NA && !isString(group);\n    });\n    const errors = map(invalidTypes, currType => {\n      return {\n        message: \"Token Type: ->\" + currType.name + \"<- static 'GROUP' can only be Lexer.SKIPPED/Lexer.NA/A String\",\n        type: LexerDefinitionErrorType.INVALID_GROUP_TYPE_FOUND,\n        tokenTypes: [currType]\n      };\n    });\n    return errors;\n  }\n  function findModesThatDoNotExist(tokenTypes, validModes) {\n    const invalidModes = filter(tokenTypes, clazz => {\n      return clazz.PUSH_MODE !== void 0 && !includes(validModes, clazz.PUSH_MODE);\n    });\n    const errors = map(invalidModes, tokType => {\n      const msg = \"Token Type: ->\".concat(tokType.name, \"<- static 'PUSH_MODE' value cannot refer to a Lexer Mode ->\").concat(tokType.PUSH_MODE, \"<-which does not exist\");\n      return {\n        message: msg,\n        type: LexerDefinitionErrorType.PUSH_MODE_DOES_NOT_EXIST,\n        tokenTypes: [tokType]\n      };\n    });\n    return errors;\n  }\n  function findUnreachablePatterns(tokenTypes) {\n    const errors = [];\n    const canBeTested = reduce(tokenTypes, (result, tokType, idx) => {\n      const pattern = tokType.PATTERN;\n      if (pattern === Lexer2.NA) {\n        return result;\n      }\n      if (isString(pattern)) {\n        result.push({\n          str: pattern,\n          idx,\n          tokenType: tokType\n        });\n      } else if (isRegExp$1(pattern) && noMetaChar(pattern)) {\n        result.push({\n          str: pattern.source,\n          idx,\n          tokenType: tokType\n        });\n      }\n      return result;\n    }, []);\n    forEach(tokenTypes, (tokType, testIdx) => {\n      forEach(canBeTested, _ref => {\n        let {\n          str,\n          idx,\n          tokenType\n        } = _ref;\n        if (testIdx < idx && testTokenType(str, tokType.PATTERN)) {\n          const msg = \"Token: ->\".concat(tokenType.name, \"<- can never be matched.\\nBecause it appears AFTER the Token Type ->\").concat(tokType.name, \"<-in the lexer's definition.\\nSee https://chevrotain.io/docs/guide/resolving_lexer_errors.html#UNREACHABLE\");\n          errors.push({\n            message: msg,\n            type: LexerDefinitionErrorType.UNREACHABLE_PATTERN,\n            tokenTypes: [tokType, tokenType]\n          });\n        }\n      });\n    });\n    return errors;\n  }\n  function testTokenType(str, pattern) {\n    if (isRegExp$1(pattern)) {\n      const regExpArray = pattern.exec(str);\n      return regExpArray !== null && regExpArray.index === 0;\n    } else if (isFunction(pattern)) {\n      return pattern(str, 0, [], {});\n    } else if (has(pattern, \"exec\")) {\n      return pattern.exec(str, 0, [], {});\n    } else if (typeof pattern === \"string\") {\n      return pattern === str;\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n  }\n  function noMetaChar(regExp) {\n    const metaChars = [\".\", \"\\\\\", \"[\", \"]\", \"|\", \"^\", \"$\", \"(\", \")\", \"?\", \"*\", \"+\", \"{\"];\n    return find$1(metaChars, char => regExp.source.indexOf(char) !== -1) === void 0;\n  }\n  function addStartOfInput(pattern) {\n    const flags = pattern.ignoreCase ? \"i\" : \"\";\n    return new RegExp(\"^(?:\".concat(pattern.source, \")\"), flags);\n  }\n  function addStickyFlag(pattern) {\n    const flags = pattern.ignoreCase ? \"iy\" : \"y\";\n    return new RegExp(\"\".concat(pattern.source), flags);\n  }\n  function performRuntimeChecks(lexerDefinition, trackLines, lineTerminatorCharacters) {\n    const errors = [];\n    if (!has(lexerDefinition, DEFAULT_MODE)) {\n      errors.push({\n        message: \"A MultiMode Lexer cannot be initialized without a <\" + DEFAULT_MODE + \"> property in its definition\\n\",\n        type: LexerDefinitionErrorType.MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE\n      });\n    }\n    if (!has(lexerDefinition, MODES)) {\n      errors.push({\n        message: \"A MultiMode Lexer cannot be initialized without a <\" + MODES + \"> property in its definition\\n\",\n        type: LexerDefinitionErrorType.MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY\n      });\n    }\n    if (has(lexerDefinition, MODES) && has(lexerDefinition, DEFAULT_MODE) && !has(lexerDefinition.modes, lexerDefinition.defaultMode)) {\n      errors.push({\n        message: \"A MultiMode Lexer cannot be initialized with a \".concat(DEFAULT_MODE, \": <\").concat(lexerDefinition.defaultMode, \">which does not exist\\n\"),\n        type: LexerDefinitionErrorType.MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST\n      });\n    }\n    if (has(lexerDefinition, MODES)) {\n      forEach(lexerDefinition.modes, (currModeValue, currModeName) => {\n        forEach(currModeValue, (currTokType, currIdx) => {\n          if (isUndefined(currTokType)) {\n            errors.push({\n              message: \"A Lexer cannot be initialized using an undefined Token Type. Mode:<\".concat(currModeName, \"> at index: <\").concat(currIdx, \">\\n\"),\n              type: LexerDefinitionErrorType.LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED\n            });\n          } else if (has(currTokType, \"LONGER_ALT\")) {\n            const longerAlt = isArray$1(currTokType.LONGER_ALT) ? currTokType.LONGER_ALT : [currTokType.LONGER_ALT];\n            forEach(longerAlt, currLongerAlt => {\n              if (!isUndefined(currLongerAlt) && !includes(currModeValue, currLongerAlt)) {\n                errors.push({\n                  message: \"A MultiMode Lexer cannot be initialized with a longer_alt <\".concat(currLongerAlt.name, \"> on token <\").concat(currTokType.name, \"> outside of mode <\").concat(currModeName, \">\\n\"),\n                  type: LexerDefinitionErrorType.MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE\n                });\n              }\n            });\n          }\n        });\n      });\n    }\n    return errors;\n  }\n  function performWarningRuntimeChecks(lexerDefinition, trackLines, lineTerminatorCharacters) {\n    const warnings = [];\n    let hasAnyLineBreak = false;\n    const allTokenTypes = compact(flatten(values(lexerDefinition.modes)));\n    const concreteTokenTypes = reject(allTokenTypes, currType => currType[PATTERN] === Lexer2.NA);\n    const terminatorCharCodes = getCharCodes(lineTerminatorCharacters);\n    if (trackLines) {\n      forEach(concreteTokenTypes, tokType => {\n        const currIssue = checkLineBreaksIssues(tokType, terminatorCharCodes);\n        if (currIssue !== false) {\n          const message = buildLineBreakIssueMessage(tokType, currIssue);\n          const warningDescriptor = {\n            message,\n            type: currIssue.issue,\n            tokenType: tokType\n          };\n          warnings.push(warningDescriptor);\n        } else {\n          if (has(tokType, \"LINE_BREAKS\")) {\n            if (tokType.LINE_BREAKS === true) {\n              hasAnyLineBreak = true;\n            }\n          } else {\n            if (canMatchCharCode(terminatorCharCodes, tokType.PATTERN)) {\n              hasAnyLineBreak = true;\n            }\n          }\n        }\n      });\n    }\n    if (trackLines && !hasAnyLineBreak) {\n      warnings.push({\n        message: \"Warning: No LINE_BREAKS Found.\\n\tThis Lexer has been defined to track line and column information,\\n\tBut none of the Token Types can be identified as matching a line terminator.\\n\tSee https://chevrotain.io/docs/guide/resolving_lexer_errors.html#LINE_BREAKS \\n\tfor details.\",\n        type: LexerDefinitionErrorType.NO_LINE_BREAKS_FLAGS\n      });\n    }\n    return warnings;\n  }\n  function cloneEmptyGroups(emptyGroups) {\n    const clonedResult = {};\n    const groupKeys = keys(emptyGroups);\n    forEach(groupKeys, currKey => {\n      const currGroupValue = emptyGroups[currKey];\n      if (isArray$1(currGroupValue)) {\n        clonedResult[currKey] = [];\n      } else {\n        throw Error(\"non exhaustive match\");\n      }\n    });\n    return clonedResult;\n  }\n  function isCustomPattern(tokenType) {\n    const pattern = tokenType.PATTERN;\n    if (isRegExp$1(pattern)) {\n      return false;\n    } else if (isFunction(pattern)) {\n      return true;\n    } else if (has(pattern, \"exec\")) {\n      return true;\n    } else if (isString(pattern)) {\n      return false;\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n  }\n  function isShortPattern(pattern) {\n    if (isString(pattern) && pattern.length === 1) {\n      return pattern.charCodeAt(0);\n    } else {\n      return false;\n    }\n  }\n  const LineTerminatorOptimizedTester = {\n    // implements /\\n|\\r\\n?/g.test\n    test: function (text) {\n      const len = text.length;\n      for (let i = this.lastIndex; i < len; i++) {\n        const c = text.charCodeAt(i);\n        if (c === 10) {\n          this.lastIndex = i + 1;\n          return true;\n        } else if (c === 13) {\n          if (text.charCodeAt(i + 1) === 10) {\n            this.lastIndex = i + 2;\n          } else {\n            this.lastIndex = i + 1;\n          }\n          return true;\n        }\n      }\n      return false;\n    },\n    lastIndex: 0\n  };\n  function checkLineBreaksIssues(tokType, lineTerminatorCharCodes) {\n    if (has(tokType, \"LINE_BREAKS\")) {\n      return false;\n    } else {\n      if (isRegExp$1(tokType.PATTERN)) {\n        try {\n          canMatchCharCode(lineTerminatorCharCodes, tokType.PATTERN);\n        } catch (e) {\n          return {\n            issue: LexerDefinitionErrorType.IDENTIFY_TERMINATOR,\n            errMsg: e.message\n          };\n        }\n        return false;\n      } else if (isString(tokType.PATTERN)) {\n        return false;\n      } else if (isCustomPattern(tokType)) {\n        return {\n          issue: LexerDefinitionErrorType.CUSTOM_LINE_BREAK\n        };\n      } else {\n        throw Error(\"non exhaustive match\");\n      }\n    }\n  }\n  function buildLineBreakIssueMessage(tokType, details) {\n    if (details.issue === LexerDefinitionErrorType.IDENTIFY_TERMINATOR) {\n      return \"Warning: unable to identify line terminator usage in pattern.\\n\\tThe problem is in the <\".concat(tokType.name, \"> Token Type\\n\\t Root cause: \").concat(details.errMsg, \".\\n\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#IDENTIFY_TERMINATOR\");\n    } else if (details.issue === LexerDefinitionErrorType.CUSTOM_LINE_BREAK) {\n      return \"Warning: A Custom Token Pattern should specify the <line_breaks> option.\\n\\tThe problem is in the <\".concat(tokType.name, \"> Token Type\\n\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#CUSTOM_LINE_BREAK\");\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n  }\n  function getCharCodes(charsOrCodes) {\n    const charCodes = map(charsOrCodes, numOrString => {\n      if (isString(numOrString)) {\n        return numOrString.charCodeAt(0);\n      } else {\n        return numOrString;\n      }\n    });\n    return charCodes;\n  }\n  function addToMapOfArrays(map2, key, value) {\n    if (map2[key] === void 0) {\n      map2[key] = [value];\n    } else {\n      map2[key].push(value);\n    }\n  }\n  const minOptimizationVal = 256;\n  let charCodeToOptimizedIdxMap = [];\n  function charCodeToOptimizedIndex(charCode) {\n    return charCode < minOptimizationVal ? charCode : charCodeToOptimizedIdxMap[charCode];\n  }\n  function initCharCodeToOptimizedIndexMap() {\n    if (isEmpty(charCodeToOptimizedIdxMap)) {\n      charCodeToOptimizedIdxMap = new Array(65536);\n      for (let i = 0; i < 65536; i++) {\n        charCodeToOptimizedIdxMap[i] = i > 255 ? 255 + ~~(i / 255) : i;\n      }\n    }\n  }\n  function tokenStructuredMatcher(tokInstance, tokConstructor) {\n    const instanceType = tokInstance.tokenTypeIdx;\n    if (instanceType === tokConstructor.tokenTypeIdx) {\n      return true;\n    } else {\n      return tokConstructor.isParent === true && tokConstructor.categoryMatchesMap[instanceType] === true;\n    }\n  }\n  function tokenStructuredMatcherNoCategories(token, tokType) {\n    return token.tokenTypeIdx === tokType.tokenTypeIdx;\n  }\n  let tokenShortNameIdx = 1;\n  const tokenIdxToClass = {};\n  function augmentTokenTypes(tokenTypes) {\n    const tokenTypesAndParents = expandCategories(tokenTypes);\n    assignTokenDefaultProps(tokenTypesAndParents);\n    assignCategoriesMapProp(tokenTypesAndParents);\n    assignCategoriesTokensProp(tokenTypesAndParents);\n    forEach(tokenTypesAndParents, tokType => {\n      tokType.isParent = tokType.categoryMatches.length > 0;\n    });\n  }\n  function expandCategories(tokenTypes) {\n    let result = clone(tokenTypes);\n    let categories = tokenTypes;\n    let searching = true;\n    while (searching) {\n      categories = compact(flatten(map(categories, currTokType => currTokType.CATEGORIES)));\n      const newCategories = difference$1(categories, result);\n      result = result.concat(newCategories);\n      if (isEmpty(newCategories)) {\n        searching = false;\n      } else {\n        categories = newCategories;\n      }\n    }\n    return result;\n  }\n  function assignTokenDefaultProps(tokenTypes) {\n    forEach(tokenTypes, currTokType => {\n      if (!hasShortKeyProperty(currTokType)) {\n        tokenIdxToClass[tokenShortNameIdx] = currTokType;\n        currTokType.tokenTypeIdx = tokenShortNameIdx++;\n      }\n      if (hasCategoriesProperty(currTokType) && !isArray$1(currTokType.CATEGORIES)) {\n        currTokType.CATEGORIES = [currTokType.CATEGORIES];\n      }\n      if (!hasCategoriesProperty(currTokType)) {\n        currTokType.CATEGORIES = [];\n      }\n      if (!hasExtendingTokensTypesProperty(currTokType)) {\n        currTokType.categoryMatches = [];\n      }\n      if (!hasExtendingTokensTypesMapProperty(currTokType)) {\n        currTokType.categoryMatchesMap = {};\n      }\n    });\n  }\n  function assignCategoriesTokensProp(tokenTypes) {\n    forEach(tokenTypes, currTokType => {\n      currTokType.categoryMatches = [];\n      forEach(currTokType.categoryMatchesMap, (val, key) => {\n        currTokType.categoryMatches.push(tokenIdxToClass[key].tokenTypeIdx);\n      });\n    });\n  }\n  function assignCategoriesMapProp(tokenTypes) {\n    forEach(tokenTypes, currTokType => {\n      singleAssignCategoriesToksMap([], currTokType);\n    });\n  }\n  function singleAssignCategoriesToksMap(path, nextNode) {\n    forEach(path, pathNode => {\n      nextNode.categoryMatchesMap[pathNode.tokenTypeIdx] = true;\n    });\n    forEach(nextNode.CATEGORIES, nextCategory => {\n      const newPath = path.concat(nextNode);\n      if (!includes(newPath, nextCategory)) {\n        singleAssignCategoriesToksMap(newPath, nextCategory);\n      }\n    });\n  }\n  function hasShortKeyProperty(tokType) {\n    return has(tokType, \"tokenTypeIdx\");\n  }\n  function hasCategoriesProperty(tokType) {\n    return has(tokType, \"CATEGORIES\");\n  }\n  function hasExtendingTokensTypesProperty(tokType) {\n    return has(tokType, \"categoryMatches\");\n  }\n  function hasExtendingTokensTypesMapProperty(tokType) {\n    return has(tokType, \"categoryMatchesMap\");\n  }\n  function isTokenType(tokType) {\n    return has(tokType, \"tokenTypeIdx\");\n  }\n  const defaultLexerErrorProvider = {\n    buildUnableToPopLexerModeMessage(token) {\n      return \"Unable to pop Lexer Mode after encountering Token ->\".concat(token.image, \"<- The Mode Stack is empty\");\n    },\n    buildUnexpectedCharactersMessage(fullText, startOffset, length, line, column) {\n      return \"unexpected character: ->\".concat(fullText.charAt(startOffset), \"<- at offset: \").concat(startOffset, \", skipped \").concat(length, \" characters.\");\n    }\n  };\n  var LexerDefinitionErrorType;\n  (function (LexerDefinitionErrorType2) {\n    LexerDefinitionErrorType2[LexerDefinitionErrorType2[\"MISSING_PATTERN\"] = 0] = \"MISSING_PATTERN\";\n    LexerDefinitionErrorType2[LexerDefinitionErrorType2[\"INVALID_PATTERN\"] = 1] = \"INVALID_PATTERN\";\n    LexerDefinitionErrorType2[LexerDefinitionErrorType2[\"EOI_ANCHOR_FOUND\"] = 2] = \"EOI_ANCHOR_FOUND\";\n    LexerDefinitionErrorType2[LexerDefinitionErrorType2[\"UNSUPPORTED_FLAGS_FOUND\"] = 3] = \"UNSUPPORTED_FLAGS_FOUND\";\n    LexerDefinitionErrorType2[LexerDefinitionErrorType2[\"DUPLICATE_PATTERNS_FOUND\"] = 4] = \"DUPLICATE_PATTERNS_FOUND\";\n    LexerDefinitionErrorType2[LexerDefinitionErrorType2[\"INVALID_GROUP_TYPE_FOUND\"] = 5] = \"INVALID_GROUP_TYPE_FOUND\";\n    LexerDefinitionErrorType2[LexerDefinitionErrorType2[\"PUSH_MODE_DOES_NOT_EXIST\"] = 6] = \"PUSH_MODE_DOES_NOT_EXIST\";\n    LexerDefinitionErrorType2[LexerDefinitionErrorType2[\"MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE\"] = 7] = \"MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE\";\n    LexerDefinitionErrorType2[LexerDefinitionErrorType2[\"MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY\"] = 8] = \"MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY\";\n    LexerDefinitionErrorType2[LexerDefinitionErrorType2[\"MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST\"] = 9] = \"MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST\";\n    LexerDefinitionErrorType2[LexerDefinitionErrorType2[\"LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED\"] = 10] = \"LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED\";\n    LexerDefinitionErrorType2[LexerDefinitionErrorType2[\"SOI_ANCHOR_FOUND\"] = 11] = \"SOI_ANCHOR_FOUND\";\n    LexerDefinitionErrorType2[LexerDefinitionErrorType2[\"EMPTY_MATCH_PATTERN\"] = 12] = \"EMPTY_MATCH_PATTERN\";\n    LexerDefinitionErrorType2[LexerDefinitionErrorType2[\"NO_LINE_BREAKS_FLAGS\"] = 13] = \"NO_LINE_BREAKS_FLAGS\";\n    LexerDefinitionErrorType2[LexerDefinitionErrorType2[\"UNREACHABLE_PATTERN\"] = 14] = \"UNREACHABLE_PATTERN\";\n    LexerDefinitionErrorType2[LexerDefinitionErrorType2[\"IDENTIFY_TERMINATOR\"] = 15] = \"IDENTIFY_TERMINATOR\";\n    LexerDefinitionErrorType2[LexerDefinitionErrorType2[\"CUSTOM_LINE_BREAK\"] = 16] = \"CUSTOM_LINE_BREAK\";\n    LexerDefinitionErrorType2[LexerDefinitionErrorType2[\"MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE\"] = 17] = \"MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE\";\n  })(LexerDefinitionErrorType || (LexerDefinitionErrorType = {}));\n  const DEFAULT_LEXER_CONFIG = {\n    deferDefinitionErrorsHandling: false,\n    positionTracking: \"full\",\n    lineTerminatorsPattern: /\\n|\\r\\n?/g,\n    lineTerminatorCharacters: [\"\\n\", \"\\r\"],\n    ensureOptimizations: false,\n    safeMode: false,\n    errorMessageProvider: defaultLexerErrorProvider,\n    traceInitPerf: false,\n    skipValidations: false,\n    recoveryEnabled: true\n  };\n  Object.freeze(DEFAULT_LEXER_CONFIG);\n  class Lexer2 {\n    constructor(lexerDefinition) {\n      let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_LEXER_CONFIG;\n      this.lexerDefinition = lexerDefinition;\n      this.lexerDefinitionErrors = [];\n      this.lexerDefinitionWarning = [];\n      this.patternIdxToConfig = {};\n      this.charCodeToPatternIdxToConfig = {};\n      this.modes = [];\n      this.emptyGroups = {};\n      this.trackStartLines = true;\n      this.trackEndLines = true;\n      this.hasCustom = false;\n      this.canModeBeOptimized = {};\n      this.TRACE_INIT = (phaseDesc, phaseImpl) => {\n        if (this.traceInitPerf === true) {\n          this.traceInitIndent++;\n          const indent = new Array(this.traceInitIndent + 1).join(\"\t\");\n          if (this.traceInitIndent < this.traceInitMaxIdent) {\n            console.log(\"\".concat(indent, \"--> <\").concat(phaseDesc, \">\"));\n          }\n          const {\n            time,\n            value\n          } = timer(phaseImpl);\n          const traceMethod = time > 10 ? console.warn : console.log;\n          if (this.traceInitIndent < this.traceInitMaxIdent) {\n            traceMethod(\"\".concat(indent, \"<-- <\").concat(phaseDesc, \"> time: \").concat(time, \"ms\"));\n          }\n          this.traceInitIndent--;\n          return value;\n        } else {\n          return phaseImpl();\n        }\n      };\n      if (typeof config === \"boolean\") {\n        throw Error(\"The second argument to the Lexer constructor is now an ILexerConfig Object.\\na boolean 2nd argument is no longer supported\");\n      }\n      this.config = assign$1({}, DEFAULT_LEXER_CONFIG, config);\n      const traceInitVal = this.config.traceInitPerf;\n      if (traceInitVal === true) {\n        this.traceInitMaxIdent = Infinity;\n        this.traceInitPerf = true;\n      } else if (typeof traceInitVal === \"number\") {\n        this.traceInitMaxIdent = traceInitVal;\n        this.traceInitPerf = true;\n      }\n      this.traceInitIndent = -1;\n      this.TRACE_INIT(\"Lexer Constructor\", () => {\n        let actualDefinition;\n        let hasOnlySingleMode = true;\n        this.TRACE_INIT(\"Lexer Config handling\", () => {\n          if (this.config.lineTerminatorsPattern === DEFAULT_LEXER_CONFIG.lineTerminatorsPattern) {\n            this.config.lineTerminatorsPattern = LineTerminatorOptimizedTester;\n          } else {\n            if (this.config.lineTerminatorCharacters === DEFAULT_LEXER_CONFIG.lineTerminatorCharacters) {\n              throw Error(\"Error: Missing <lineTerminatorCharacters> property on the Lexer config.\\n\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#MISSING_LINE_TERM_CHARS\");\n            }\n          }\n          if (config.safeMode && config.ensureOptimizations) {\n            throw Error('\"safeMode\" and \"ensureOptimizations\" flags are mutually exclusive.');\n          }\n          this.trackStartLines = /full|onlyStart/i.test(this.config.positionTracking);\n          this.trackEndLines = /full/i.test(this.config.positionTracking);\n          if (isArray$1(lexerDefinition)) {\n            actualDefinition = {\n              modes: {\n                defaultMode: clone(lexerDefinition)\n              },\n              defaultMode: DEFAULT_MODE\n            };\n          } else {\n            hasOnlySingleMode = false;\n            actualDefinition = clone(lexerDefinition);\n          }\n        });\n        if (this.config.skipValidations === false) {\n          this.TRACE_INIT(\"performRuntimeChecks\", () => {\n            this.lexerDefinitionErrors = this.lexerDefinitionErrors.concat(performRuntimeChecks(actualDefinition, this.trackStartLines, this.config.lineTerminatorCharacters));\n          });\n          this.TRACE_INIT(\"performWarningRuntimeChecks\", () => {\n            this.lexerDefinitionWarning = this.lexerDefinitionWarning.concat(performWarningRuntimeChecks(actualDefinition, this.trackStartLines, this.config.lineTerminatorCharacters));\n          });\n        }\n        actualDefinition.modes = actualDefinition.modes ? actualDefinition.modes : {};\n        forEach(actualDefinition.modes, (currModeValue, currModeName) => {\n          actualDefinition.modes[currModeName] = reject(currModeValue, currTokType => isUndefined(currTokType));\n        });\n        const allModeNames = keys(actualDefinition.modes);\n        forEach(actualDefinition.modes, (currModDef, currModName) => {\n          this.TRACE_INIT(\"Mode: <\".concat(currModName, \"> processing\"), () => {\n            this.modes.push(currModName);\n            if (this.config.skipValidations === false) {\n              this.TRACE_INIT(\"validatePatterns\", () => {\n                this.lexerDefinitionErrors = this.lexerDefinitionErrors.concat(validatePatterns(currModDef, allModeNames));\n              });\n            }\n            if (isEmpty(this.lexerDefinitionErrors)) {\n              augmentTokenTypes(currModDef);\n              let currAnalyzeResult;\n              this.TRACE_INIT(\"analyzeTokenTypes\", () => {\n                currAnalyzeResult = analyzeTokenTypes(currModDef, {\n                  lineTerminatorCharacters: this.config.lineTerminatorCharacters,\n                  positionTracking: config.positionTracking,\n                  ensureOptimizations: config.ensureOptimizations,\n                  safeMode: config.safeMode,\n                  tracer: this.TRACE_INIT\n                });\n              });\n              this.patternIdxToConfig[currModName] = currAnalyzeResult.patternIdxToConfig;\n              this.charCodeToPatternIdxToConfig[currModName] = currAnalyzeResult.charCodeToPatternIdxToConfig;\n              this.emptyGroups = assign$1({}, this.emptyGroups, currAnalyzeResult.emptyGroups);\n              this.hasCustom = currAnalyzeResult.hasCustom || this.hasCustom;\n              this.canModeBeOptimized[currModName] = currAnalyzeResult.canBeOptimized;\n            }\n          });\n        });\n        this.defaultMode = actualDefinition.defaultMode;\n        if (!isEmpty(this.lexerDefinitionErrors) && !this.config.deferDefinitionErrorsHandling) {\n          const allErrMessages = map(this.lexerDefinitionErrors, error => {\n            return error.message;\n          });\n          const allErrMessagesString = allErrMessages.join(\"-----------------------\\n\");\n          throw new Error(\"Errors detected in definition of Lexer:\\n\" + allErrMessagesString);\n        }\n        forEach(this.lexerDefinitionWarning, warningDescriptor => {\n          PRINT_WARNING(warningDescriptor.message);\n        });\n        this.TRACE_INIT(\"Choosing sub-methods implementations\", () => {\n          if (SUPPORT_STICKY) {\n            this.chopInput = identity;\n            this.match = this.matchWithTest;\n          } else {\n            this.updateLastIndex = noop;\n            this.match = this.matchWithExec;\n          }\n          if (hasOnlySingleMode) {\n            this.handleModes = noop;\n          }\n          if (this.trackStartLines === false) {\n            this.computeNewColumn = identity;\n          }\n          if (this.trackEndLines === false) {\n            this.updateTokenEndLineColumnLocation = noop;\n          }\n          if (/full/i.test(this.config.positionTracking)) {\n            this.createTokenInstance = this.createFullToken;\n          } else if (/onlyStart/i.test(this.config.positionTracking)) {\n            this.createTokenInstance = this.createStartOnlyToken;\n          } else if (/onlyOffset/i.test(this.config.positionTracking)) {\n            this.createTokenInstance = this.createOffsetOnlyToken;\n          } else {\n            throw Error(\"Invalid <positionTracking> config option: \\\"\".concat(this.config.positionTracking, \"\\\"\"));\n          }\n          if (this.hasCustom) {\n            this.addToken = this.addTokenUsingPush;\n            this.handlePayload = this.handlePayloadWithCustom;\n          } else {\n            this.addToken = this.addTokenUsingMemberAccess;\n            this.handlePayload = this.handlePayloadNoCustom;\n          }\n        });\n        this.TRACE_INIT(\"Failed Optimization Warnings\", () => {\n          const unOptimizedModes = reduce(this.canModeBeOptimized, (cannotBeOptimized, canBeOptimized, modeName) => {\n            if (canBeOptimized === false) {\n              cannotBeOptimized.push(modeName);\n            }\n            return cannotBeOptimized;\n          }, []);\n          if (config.ensureOptimizations && !isEmpty(unOptimizedModes)) {\n            throw Error(\"Lexer Modes: < \".concat(unOptimizedModes.join(\", \"), \" > cannot be optimized.\\n\\t Disable the \\\"ensureOptimizations\\\" lexer config flag to silently ignore this and run the lexer in an un-optimized mode.\\n\\t Or inspect the console log for details on how to resolve these issues.\"));\n          }\n        });\n        this.TRACE_INIT(\"clearRegExpParserCache\", () => {\n          clearRegExpParserCache();\n        });\n        this.TRACE_INIT(\"toFastProperties\", () => {\n          toFastProperties(this);\n        });\n      });\n    }\n    tokenize(text) {\n      let initialMode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.defaultMode;\n      if (!isEmpty(this.lexerDefinitionErrors)) {\n        const allErrMessages = map(this.lexerDefinitionErrors, error => {\n          return error.message;\n        });\n        const allErrMessagesString = allErrMessages.join(\"-----------------------\\n\");\n        throw new Error(\"Unable to Tokenize because Errors detected in definition of Lexer:\\n\" + allErrMessagesString);\n      }\n      return this.tokenizeInternal(text, initialMode);\n    }\n    // There is quite a bit of duplication between this and \"tokenizeInternalLazy\"\n    // This is intentional due to performance considerations.\n    // this method also used quite a bit of `!` none null assertions because it is too optimized\n    // for `tsc` to always understand it is \"safe\"\n    tokenizeInternal(text, initialMode) {\n      let i, j, k, matchAltImage, longerAlt, matchedImage, payload, altPayload, imageLength, group, tokType, newToken, errLength, msg, match;\n      const orgText = text;\n      const orgLength = orgText.length;\n      let offset = 0;\n      let matchedTokensIndex = 0;\n      const guessedNumberOfTokens = this.hasCustom ? 0 : Math.floor(text.length / 10);\n      const matchedTokens = new Array(guessedNumberOfTokens);\n      const errors = [];\n      let line = this.trackStartLines ? 1 : void 0;\n      let column = this.trackStartLines ? 1 : void 0;\n      const groups = cloneEmptyGroups(this.emptyGroups);\n      const trackLines = this.trackStartLines;\n      const lineTerminatorPattern = this.config.lineTerminatorsPattern;\n      let currModePatternsLength = 0;\n      let patternIdxToConfig = [];\n      let currCharCodeToPatternIdxToConfig = [];\n      const modeStack = [];\n      const emptyArray = [];\n      Object.freeze(emptyArray);\n      let getPossiblePatterns;\n      function getPossiblePatternsSlow() {\n        return patternIdxToConfig;\n      }\n      function getPossiblePatternsOptimized(charCode) {\n        const optimizedCharIdx = charCodeToOptimizedIndex(charCode);\n        const possiblePatterns = currCharCodeToPatternIdxToConfig[optimizedCharIdx];\n        if (possiblePatterns === void 0) {\n          return emptyArray;\n        } else {\n          return possiblePatterns;\n        }\n      }\n      const pop_mode = popToken => {\n        if (modeStack.length === 1 &&\n        // if we have both a POP_MODE and a PUSH_MODE this is in-fact a \"transition\"\n        // So no error should occur.\n        popToken.tokenType.PUSH_MODE === void 0) {\n          const msg2 = this.config.errorMessageProvider.buildUnableToPopLexerModeMessage(popToken);\n          errors.push({\n            offset: popToken.startOffset,\n            line: popToken.startLine,\n            column: popToken.startColumn,\n            length: popToken.image.length,\n            message: msg2\n          });\n        } else {\n          modeStack.pop();\n          const newMode = last(modeStack);\n          patternIdxToConfig = this.patternIdxToConfig[newMode];\n          currCharCodeToPatternIdxToConfig = this.charCodeToPatternIdxToConfig[newMode];\n          currModePatternsLength = patternIdxToConfig.length;\n          const modeCanBeOptimized = this.canModeBeOptimized[newMode] && this.config.safeMode === false;\n          if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {\n            getPossiblePatterns = getPossiblePatternsOptimized;\n          } else {\n            getPossiblePatterns = getPossiblePatternsSlow;\n          }\n        }\n      };\n      function push_mode(newMode) {\n        modeStack.push(newMode);\n        currCharCodeToPatternIdxToConfig = this.charCodeToPatternIdxToConfig[newMode];\n        patternIdxToConfig = this.patternIdxToConfig[newMode];\n        currModePatternsLength = patternIdxToConfig.length;\n        currModePatternsLength = patternIdxToConfig.length;\n        const modeCanBeOptimized = this.canModeBeOptimized[newMode] && this.config.safeMode === false;\n        if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {\n          getPossiblePatterns = getPossiblePatternsOptimized;\n        } else {\n          getPossiblePatterns = getPossiblePatternsSlow;\n        }\n      }\n      push_mode.call(this, initialMode);\n      let currConfig;\n      const recoveryEnabled = this.config.recoveryEnabled;\n      while (offset < orgLength) {\n        matchedImage = null;\n        const nextCharCode = orgText.charCodeAt(offset);\n        const chosenPatternIdxToConfig = getPossiblePatterns(nextCharCode);\n        const chosenPatternsLength = chosenPatternIdxToConfig.length;\n        for (i = 0; i < chosenPatternsLength; i++) {\n          currConfig = chosenPatternIdxToConfig[i];\n          const currPattern = currConfig.pattern;\n          payload = null;\n          const singleCharCode = currConfig.short;\n          if (singleCharCode !== false) {\n            if (nextCharCode === singleCharCode) {\n              matchedImage = currPattern;\n            }\n          } else if (currConfig.isCustom === true) {\n            match = currPattern.exec(orgText, offset, matchedTokens, groups);\n            if (match !== null) {\n              matchedImage = match[0];\n              if (match.payload !== void 0) {\n                payload = match.payload;\n              }\n            } else {\n              matchedImage = null;\n            }\n          } else {\n            this.updateLastIndex(currPattern, offset);\n            matchedImage = this.match(currPattern, text, offset);\n          }\n          if (matchedImage !== null) {\n            longerAlt = currConfig.longerAlt;\n            if (longerAlt !== void 0) {\n              const longerAltLength = longerAlt.length;\n              for (k = 0; k < longerAltLength; k++) {\n                const longerAltConfig = patternIdxToConfig[longerAlt[k]];\n                const longerAltPattern = longerAltConfig.pattern;\n                altPayload = null;\n                if (longerAltConfig.isCustom === true) {\n                  match = longerAltPattern.exec(orgText, offset, matchedTokens, groups);\n                  if (match !== null) {\n                    matchAltImage = match[0];\n                    if (match.payload !== void 0) {\n                      altPayload = match.payload;\n                    }\n                  } else {\n                    matchAltImage = null;\n                  }\n                } else {\n                  this.updateLastIndex(longerAltPattern, offset);\n                  matchAltImage = this.match(longerAltPattern, text, offset);\n                }\n                if (matchAltImage && matchAltImage.length > matchedImage.length) {\n                  matchedImage = matchAltImage;\n                  payload = altPayload;\n                  currConfig = longerAltConfig;\n                  break;\n                }\n              }\n            }\n            break;\n          }\n        }\n        if (matchedImage !== null) {\n          imageLength = matchedImage.length;\n          group = currConfig.group;\n          if (group !== void 0) {\n            tokType = currConfig.tokenTypeIdx;\n            newToken = this.createTokenInstance(matchedImage, offset, tokType, currConfig.tokenType, line, column, imageLength);\n            this.handlePayload(newToken, payload);\n            if (group === false) {\n              matchedTokensIndex = this.addToken(matchedTokens, matchedTokensIndex, newToken);\n            } else {\n              groups[group].push(newToken);\n            }\n          }\n          text = this.chopInput(text, imageLength);\n          offset = offset + imageLength;\n          column = this.computeNewColumn(column, imageLength);\n          if (trackLines === true && currConfig.canLineTerminator === true) {\n            let numOfLTsInMatch = 0;\n            let foundTerminator;\n            let lastLTEndOffset;\n            lineTerminatorPattern.lastIndex = 0;\n            do {\n              foundTerminator = lineTerminatorPattern.test(matchedImage);\n              if (foundTerminator === true) {\n                lastLTEndOffset = lineTerminatorPattern.lastIndex - 1;\n                numOfLTsInMatch++;\n              }\n            } while (foundTerminator === true);\n            if (numOfLTsInMatch !== 0) {\n              line = line + numOfLTsInMatch;\n              column = imageLength - lastLTEndOffset;\n              this.updateTokenEndLineColumnLocation(newToken, group, lastLTEndOffset, numOfLTsInMatch, line, column, imageLength);\n            }\n          }\n          this.handleModes(currConfig, pop_mode, push_mode, newToken);\n        } else {\n          const errorStartOffset = offset;\n          const errorLine = line;\n          const errorColumn = column;\n          let foundResyncPoint = recoveryEnabled === false;\n          while (foundResyncPoint === false && offset < orgLength) {\n            text = this.chopInput(text, 1);\n            offset++;\n            for (j = 0; j < currModePatternsLength; j++) {\n              const currConfig2 = patternIdxToConfig[j];\n              const currPattern = currConfig2.pattern;\n              const singleCharCode = currConfig2.short;\n              if (singleCharCode !== false) {\n                if (orgText.charCodeAt(offset) === singleCharCode) {\n                  foundResyncPoint = true;\n                }\n              } else if (currConfig2.isCustom === true) {\n                foundResyncPoint = currPattern.exec(orgText, offset, matchedTokens, groups) !== null;\n              } else {\n                this.updateLastIndex(currPattern, offset);\n                foundResyncPoint = currPattern.exec(text) !== null;\n              }\n              if (foundResyncPoint === true) {\n                break;\n              }\n            }\n          }\n          errLength = offset - errorStartOffset;\n          column = this.computeNewColumn(column, errLength);\n          msg = this.config.errorMessageProvider.buildUnexpectedCharactersMessage(orgText, errorStartOffset, errLength, errorLine, errorColumn);\n          errors.push({\n            offset: errorStartOffset,\n            line: errorLine,\n            column: errorColumn,\n            length: errLength,\n            message: msg\n          });\n          if (recoveryEnabled === false) {\n            break;\n          }\n        }\n      }\n      if (!this.hasCustom) {\n        matchedTokens.length = matchedTokensIndex;\n      }\n      return {\n        tokens: matchedTokens,\n        groups,\n        errors\n      };\n    }\n    handleModes(config, pop_mode, push_mode, newToken) {\n      if (config.pop === true) {\n        const pushMode = config.push;\n        pop_mode(newToken);\n        if (pushMode !== void 0) {\n          push_mode.call(this, pushMode);\n        }\n      } else if (config.push !== void 0) {\n        push_mode.call(this, config.push);\n      }\n    }\n    chopInput(text, length) {\n      return text.substring(length);\n    }\n    updateLastIndex(regExp, newLastIndex) {\n      regExp.lastIndex = newLastIndex;\n    }\n    // TODO: decrease this under 600 characters? inspect stripping comments option in TSC compiler\n    updateTokenEndLineColumnLocation(newToken, group, lastLTIdx, numOfLTsInMatch, line, column, imageLength) {\n      let lastCharIsLT, fixForEndingInLT;\n      if (group !== void 0) {\n        lastCharIsLT = lastLTIdx === imageLength - 1;\n        fixForEndingInLT = lastCharIsLT ? -1 : 0;\n        if (!(numOfLTsInMatch === 1 && lastCharIsLT === true)) {\n          newToken.endLine = line + fixForEndingInLT;\n          newToken.endColumn = column - 1 + -fixForEndingInLT;\n        }\n      }\n    }\n    computeNewColumn(oldColumn, imageLength) {\n      return oldColumn + imageLength;\n    }\n    createOffsetOnlyToken(image, startOffset, tokenTypeIdx, tokenType) {\n      return {\n        image,\n        startOffset,\n        tokenTypeIdx,\n        tokenType\n      };\n    }\n    createStartOnlyToken(image, startOffset, tokenTypeIdx, tokenType, startLine, startColumn) {\n      return {\n        image,\n        startOffset,\n        startLine,\n        startColumn,\n        tokenTypeIdx,\n        tokenType\n      };\n    }\n    createFullToken(image, startOffset, tokenTypeIdx, tokenType, startLine, startColumn, imageLength) {\n      return {\n        image,\n        startOffset,\n        endOffset: startOffset + imageLength - 1,\n        startLine,\n        endLine: startLine,\n        startColumn,\n        endColumn: startColumn + imageLength - 1,\n        tokenTypeIdx,\n        tokenType\n      };\n    }\n    addTokenUsingPush(tokenVector, index, tokenToAdd) {\n      tokenVector.push(tokenToAdd);\n      return index;\n    }\n    addTokenUsingMemberAccess(tokenVector, index, tokenToAdd) {\n      tokenVector[index] = tokenToAdd;\n      index++;\n      return index;\n    }\n    handlePayloadNoCustom(token, payload) {}\n    handlePayloadWithCustom(token, payload) {\n      if (payload !== null) {\n        token.payload = payload;\n      }\n    }\n    matchWithTest(pattern, text, offset) {\n      const found = pattern.test(text);\n      if (found === true) {\n        return text.substring(offset, pattern.lastIndex);\n      }\n      return null;\n    }\n    matchWithExec(pattern, text) {\n      const regExpArray = pattern.exec(text);\n      return regExpArray !== null ? regExpArray[0] : null;\n    }\n  }\n  Lexer2.SKIPPED = \"This marks a skipped Token pattern, this means each token identified by it willbe consumed and then thrown into oblivion, this can be used to for example to completely ignore whitespace.\";\n  Lexer2.NA = /NOT_APPLICABLE/;\n  function tokenLabel(tokType) {\n    if (hasTokenLabel(tokType)) {\n      return tokType.LABEL;\n    } else {\n      return tokType.name;\n    }\n  }\n  function hasTokenLabel(obj) {\n    return isString(obj.LABEL) && obj.LABEL !== \"\";\n  }\n  const PARENT = \"parent\";\n  const CATEGORIES = \"categories\";\n  const LABEL = \"label\";\n  const GROUP = \"group\";\n  const PUSH_MODE = \"push_mode\";\n  const POP_MODE = \"pop_mode\";\n  const LONGER_ALT = \"longer_alt\";\n  const LINE_BREAKS = \"line_breaks\";\n  const START_CHARS_HINT = \"start_chars_hint\";\n  function createToken2(config) {\n    return createTokenInternal(config);\n  }\n  function createTokenInternal(config) {\n    const pattern = config.pattern;\n    const tokenType = {};\n    tokenType.name = config.name;\n    if (!isUndefined(pattern)) {\n      tokenType.PATTERN = pattern;\n    }\n    if (has(config, PARENT)) {\n      throw \"The parent property is no longer supported.\\nSee: https://github.com/chevrotain/chevrotain/issues/564#issuecomment-349062346 for details.\";\n    }\n    if (has(config, CATEGORIES)) {\n      tokenType.CATEGORIES = config[CATEGORIES];\n    }\n    augmentTokenTypes([tokenType]);\n    if (has(config, LABEL)) {\n      tokenType.LABEL = config[LABEL];\n    }\n    if (has(config, GROUP)) {\n      tokenType.GROUP = config[GROUP];\n    }\n    if (has(config, POP_MODE)) {\n      tokenType.POP_MODE = config[POP_MODE];\n    }\n    if (has(config, PUSH_MODE)) {\n      tokenType.PUSH_MODE = config[PUSH_MODE];\n    }\n    if (has(config, LONGER_ALT)) {\n      tokenType.LONGER_ALT = config[LONGER_ALT];\n    }\n    if (has(config, LINE_BREAKS)) {\n      tokenType.LINE_BREAKS = config[LINE_BREAKS];\n    }\n    if (has(config, START_CHARS_HINT)) {\n      tokenType.START_CHARS_HINT = config[START_CHARS_HINT];\n    }\n    return tokenType;\n  }\n  const EOF = createToken2({\n    name: \"EOF\",\n    pattern: Lexer2.NA\n  });\n  augmentTokenTypes([EOF]);\n  function createTokenInstance(tokType, image, startOffset, endOffset, startLine, endLine, startColumn, endColumn) {\n    return {\n      image,\n      startOffset,\n      endOffset,\n      startLine,\n      endLine,\n      startColumn,\n      endColumn,\n      tokenTypeIdx: tokType.tokenTypeIdx,\n      tokenType: tokType\n    };\n  }\n  function tokenMatcher(token, tokType) {\n    return tokenStructuredMatcher(token, tokType);\n  }\n  const defaultParserErrorProvider = {\n    buildMismatchTokenMessage(_ref2) {\n      let {\n        expected,\n        actual,\n        previous,\n        ruleName\n      } = _ref2;\n      const hasLabel = hasTokenLabel(expected);\n      const expectedMsg = hasLabel ? \"--> \".concat(tokenLabel(expected), \" <--\") : \"token of type --> \".concat(expected.name, \" <--\");\n      const msg = \"Expecting \".concat(expectedMsg, \" but found --> '\").concat(actual.image, \"' <--\");\n      return msg;\n    },\n    buildNotAllInputParsedMessage(_ref3) {\n      let {\n        firstRedundant,\n        ruleName\n      } = _ref3;\n      return \"Redundant input, expecting EOF but found: \" + firstRedundant.image;\n    },\n    buildNoViableAltMessage(_ref4) {\n      let {\n        expectedPathsPerAlt,\n        actual,\n        previous,\n        customUserDescription,\n        ruleName\n      } = _ref4;\n      const errPrefix = \"Expecting: \";\n      const actualText = head(actual).image;\n      const errSuffix = \"\\nbut found: '\" + actualText + \"'\";\n      if (customUserDescription) {\n        return errPrefix + customUserDescription + errSuffix;\n      } else {\n        const allLookAheadPaths = reduce(expectedPathsPerAlt, (result, currAltPaths) => result.concat(currAltPaths), []);\n        const nextValidTokenSequences = map(allLookAheadPaths, currPath => \"[\".concat(map(currPath, currTokenType => tokenLabel(currTokenType)).join(\", \"), \"]\"));\n        const nextValidSequenceItems = map(nextValidTokenSequences, (itemMsg, idx) => \"  \".concat(idx + 1, \". \").concat(itemMsg));\n        const calculatedDescription = \"one of these possible Token sequences:\\n\".concat(nextValidSequenceItems.join(\"\\n\"));\n        return errPrefix + calculatedDescription + errSuffix;\n      }\n    },\n    buildEarlyExitMessage(_ref5) {\n      let {\n        expectedIterationPaths,\n        actual,\n        customUserDescription,\n        ruleName\n      } = _ref5;\n      const errPrefix = \"Expecting: \";\n      const actualText = head(actual).image;\n      const errSuffix = \"\\nbut found: '\" + actualText + \"'\";\n      if (customUserDescription) {\n        return errPrefix + customUserDescription + errSuffix;\n      } else {\n        const nextValidTokenSequences = map(expectedIterationPaths, currPath => \"[\".concat(map(currPath, currTokenType => tokenLabel(currTokenType)).join(\",\"), \"]\"));\n        const calculatedDescription = \"expecting at least one iteration which starts with one of these possible Token sequences::\\n  <\".concat(nextValidTokenSequences.join(\" ,\"), \">\");\n        return errPrefix + calculatedDescription + errSuffix;\n      }\n    }\n  };\n  Object.freeze(defaultParserErrorProvider);\n  const defaultGrammarResolverErrorProvider = {\n    buildRuleNotFoundError(topLevelRule, undefinedRule) {\n      const msg = \"Invalid grammar, reference to a rule which is not defined: ->\" + undefinedRule.nonTerminalName + \"<-\\ninside top level rule: ->\" + topLevelRule.name + \"<-\";\n      return msg;\n    }\n  };\n  const defaultGrammarValidatorErrorProvider = {\n    buildDuplicateFoundError(topLevelRule, duplicateProds) {\n      function getExtraProductionArgument2(prod) {\n        if (prod instanceof Terminal) {\n          return prod.terminalType.name;\n        } else if (prod instanceof NonTerminal) {\n          return prod.nonTerminalName;\n        } else {\n          return \"\";\n        }\n      }\n      const topLevelName = topLevelRule.name;\n      const duplicateProd = head(duplicateProds);\n      const index = duplicateProd.idx;\n      const dslName = getProductionDslName(duplicateProd);\n      const extraArgument = getExtraProductionArgument2(duplicateProd);\n      const hasExplicitIndex = index > 0;\n      let msg = \"->\".concat(dslName).concat(hasExplicitIndex ? index : \"\", \"<- \").concat(extraArgument ? \"with argument: ->\".concat(extraArgument, \"<-\") : \"\", \"\\n                  appears more than once (\").concat(duplicateProds.length, \" times) in the top level rule: ->\").concat(topLevelName, \"<-.                  \\n                  For further details see: https://chevrotain.io/docs/FAQ.html#NUMERICAL_SUFFIXES \\n                  \");\n      msg = msg.replace(/[ \\t]+/g, \" \");\n      msg = msg.replace(/\\s\\s+/g, \"\\n\");\n      return msg;\n    },\n    buildNamespaceConflictError(rule) {\n      const errMsg = \"Namespace conflict found in grammar.\\nThe grammar has both a Terminal(Token) and a Non-Terminal(Rule) named: <\".concat(rule.name, \">.\\nTo resolve this make sure each Terminal and Non-Terminal names are unique\\nThis is easy to accomplish by using the convention that Terminal names start with an uppercase letter\\nand Non-Terminal names start with a lower case letter.\");\n      return errMsg;\n    },\n    buildAlternationPrefixAmbiguityError(options) {\n      const pathMsg = map(options.prefixPath, currTok => tokenLabel(currTok)).join(\", \");\n      const occurrence = options.alternation.idx === 0 ? \"\" : options.alternation.idx;\n      const errMsg = \"Ambiguous alternatives: <\".concat(options.ambiguityIndices.join(\" ,\"), \"> due to common lookahead prefix\\nin <OR\").concat(occurrence, \"> inside <\").concat(options.topLevelRule.name, \"> Rule,\\n<\").concat(pathMsg, \"> may appears as a prefix path in all these alternatives.\\nSee: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#COMMON_PREFIX\\nFor Further details.\");\n      return errMsg;\n    },\n    buildAlternationAmbiguityError(options) {\n      const pathMsg = map(options.prefixPath, currtok => tokenLabel(currtok)).join(\", \");\n      const occurrence = options.alternation.idx === 0 ? \"\" : options.alternation.idx;\n      let currMessage = \"Ambiguous Alternatives Detected: <\".concat(options.ambiguityIndices.join(\" ,\"), \"> in <OR\").concat(occurrence, \"> inside <\").concat(options.topLevelRule.name, \"> Rule,\\n<\").concat(pathMsg, \"> may appears as a prefix path in all these alternatives.\\n\");\n      currMessage = currMessage + \"See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#AMBIGUOUS_ALTERNATIVES\\nFor Further details.\";\n      return currMessage;\n    },\n    buildEmptyRepetitionError(options) {\n      let dslName = getProductionDslName(options.repetition);\n      if (options.repetition.idx !== 0) {\n        dslName += options.repetition.idx;\n      }\n      const errMsg = \"The repetition <\".concat(dslName, \"> within Rule <\").concat(options.topLevelRule.name, \"> can never consume any tokens.\\nThis could lead to an infinite loop.\");\n      return errMsg;\n    },\n    // TODO: remove - `errors_public` from nyc.config.js exclude\n    //       once this method is fully removed from this file\n    buildTokenNameError(options) {\n      return \"deprecated\";\n    },\n    buildEmptyAlternationError(options) {\n      const errMsg = \"Ambiguous empty alternative: <\".concat(options.emptyChoiceIdx + 1, \"> in <OR\").concat(options.alternation.idx, \"> inside <\").concat(options.topLevelRule.name, \"> Rule.\\nOnly the last alternative may be an empty alternative.\");\n      return errMsg;\n    },\n    buildTooManyAlternativesError(options) {\n      const errMsg = \"An Alternation cannot have more than 256 alternatives:\\n<OR\".concat(options.alternation.idx, \"> inside <\").concat(options.topLevelRule.name, \"> Rule.\\n has \").concat(options.alternation.definition.length + 1, \" alternatives.\");\n      return errMsg;\n    },\n    buildLeftRecursionError(options) {\n      const ruleName = options.topLevelRule.name;\n      const pathNames = map(options.leftRecursionPath, currRule => currRule.name);\n      const leftRecursivePath = \"\".concat(ruleName, \" --> \").concat(pathNames.concat([ruleName]).join(\" --> \"));\n      const errMsg = \"Left Recursion found in grammar.\\nrule: <\".concat(ruleName, \"> can be invoked from itself (directly or indirectly)\\nwithout consuming any Tokens. The grammar path that causes this is: \\n \").concat(leftRecursivePath, \"\\n To fix this refactor your grammar to remove the left recursion.\\nsee: https://en.wikipedia.org/wiki/LL_parser#Left_factoring.\");\n      return errMsg;\n    },\n    // TODO: remove - `errors_public` from nyc.config.js exclude\n    //       once this method is fully removed from this file\n    buildInvalidRuleNameError(options) {\n      return \"deprecated\";\n    },\n    buildDuplicateRuleNameError(options) {\n      let ruleName;\n      if (options.topLevelRule instanceof Rule) {\n        ruleName = options.topLevelRule.name;\n      } else {\n        ruleName = options.topLevelRule;\n      }\n      const errMsg = \"Duplicate definition, rule: ->\".concat(ruleName, \"<- is already defined in the grammar: ->\").concat(options.grammarName, \"<-\");\n      return errMsg;\n    }\n  };\n  function resolveGrammar$1(topLevels, errMsgProvider) {\n    const refResolver = new GastRefResolverVisitor(topLevels, errMsgProvider);\n    refResolver.resolveRefs();\n    return refResolver.errors;\n  }\n  class GastRefResolverVisitor extends GAstVisitor {\n    constructor(nameToTopRule, errMsgProvider) {\n      super();\n      this.nameToTopRule = nameToTopRule;\n      this.errMsgProvider = errMsgProvider;\n      this.errors = [];\n    }\n    resolveRefs() {\n      forEach(values(this.nameToTopRule), prod => {\n        this.currTopLevel = prod;\n        prod.accept(this);\n      });\n    }\n    visitNonTerminal(node) {\n      const ref = this.nameToTopRule[node.nonTerminalName];\n      if (!ref) {\n        const msg = this.errMsgProvider.buildRuleNotFoundError(this.currTopLevel, node);\n        this.errors.push({\n          message: msg,\n          type: ParserDefinitionErrorType.UNRESOLVED_SUBRULE_REF,\n          ruleName: this.currTopLevel.name,\n          unresolvedRefName: node.nonTerminalName\n        });\n      } else {\n        node.referencedRule = ref;\n      }\n    }\n  }\n  class AbstractNextPossibleTokensWalker extends RestWalker {\n    constructor(topProd, path) {\n      super();\n      this.topProd = topProd;\n      this.path = path;\n      this.possibleTokTypes = [];\n      this.nextProductionName = \"\";\n      this.nextProductionOccurrence = 0;\n      this.found = false;\n      this.isAtEndOfPath = false;\n    }\n    startWalking() {\n      this.found = false;\n      if (this.path.ruleStack[0] !== this.topProd.name) {\n        throw Error(\"The path does not start with the walker's top Rule!\");\n      }\n      this.ruleStack = clone(this.path.ruleStack).reverse();\n      this.occurrenceStack = clone(this.path.occurrenceStack).reverse();\n      this.ruleStack.pop();\n      this.occurrenceStack.pop();\n      this.updateExpectedNext();\n      this.walk(this.topProd);\n      return this.possibleTokTypes;\n    }\n    walk(prod) {\n      let prevRest = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      if (!this.found) {\n        super.walk(prod, prevRest);\n      }\n    }\n    walkProdRef(refProd, currRest, prevRest) {\n      if (refProd.referencedRule.name === this.nextProductionName && refProd.idx === this.nextProductionOccurrence) {\n        const fullRest = currRest.concat(prevRest);\n        this.updateExpectedNext();\n        this.walk(refProd.referencedRule, fullRest);\n      }\n    }\n    updateExpectedNext() {\n      if (isEmpty(this.ruleStack)) {\n        this.nextProductionName = \"\";\n        this.nextProductionOccurrence = 0;\n        this.isAtEndOfPath = true;\n      } else {\n        this.nextProductionName = this.ruleStack.pop();\n        this.nextProductionOccurrence = this.occurrenceStack.pop();\n      }\n    }\n  }\n  class NextAfterTokenWalker extends AbstractNextPossibleTokensWalker {\n    constructor(topProd, path) {\n      super(topProd, path);\n      this.path = path;\n      this.nextTerminalName = \"\";\n      this.nextTerminalOccurrence = 0;\n      this.nextTerminalName = this.path.lastTok.name;\n      this.nextTerminalOccurrence = this.path.lastTokOccurrence;\n    }\n    walkTerminal(terminal, currRest, prevRest) {\n      if (this.isAtEndOfPath && terminal.terminalType.name === this.nextTerminalName && terminal.idx === this.nextTerminalOccurrence && !this.found) {\n        const fullRest = currRest.concat(prevRest);\n        const restProd = new Alternative({\n          definition: fullRest\n        });\n        this.possibleTokTypes = first(restProd);\n        this.found = true;\n      }\n    }\n  }\n  class AbstractNextTerminalAfterProductionWalker extends RestWalker {\n    constructor(topRule, occurrence) {\n      super();\n      this.topRule = topRule;\n      this.occurrence = occurrence;\n      this.result = {\n        token: void 0,\n        occurrence: void 0,\n        isEndOfRule: void 0\n      };\n    }\n    startWalking() {\n      this.walk(this.topRule);\n      return this.result;\n    }\n  }\n  class NextTerminalAfterManyWalker extends AbstractNextTerminalAfterProductionWalker {\n    walkMany(manyProd, currRest, prevRest) {\n      if (manyProd.idx === this.occurrence) {\n        const firstAfterMany = head(currRest.concat(prevRest));\n        this.result.isEndOfRule = firstAfterMany === void 0;\n        if (firstAfterMany instanceof Terminal) {\n          this.result.token = firstAfterMany.terminalType;\n          this.result.occurrence = firstAfterMany.idx;\n        }\n      } else {\n        super.walkMany(manyProd, currRest, prevRest);\n      }\n    }\n  }\n  class NextTerminalAfterManySepWalker extends AbstractNextTerminalAfterProductionWalker {\n    walkManySep(manySepProd, currRest, prevRest) {\n      if (manySepProd.idx === this.occurrence) {\n        const firstAfterManySep = head(currRest.concat(prevRest));\n        this.result.isEndOfRule = firstAfterManySep === void 0;\n        if (firstAfterManySep instanceof Terminal) {\n          this.result.token = firstAfterManySep.terminalType;\n          this.result.occurrence = firstAfterManySep.idx;\n        }\n      } else {\n        super.walkManySep(manySepProd, currRest, prevRest);\n      }\n    }\n  }\n  class NextTerminalAfterAtLeastOneWalker extends AbstractNextTerminalAfterProductionWalker {\n    walkAtLeastOne(atLeastOneProd, currRest, prevRest) {\n      if (atLeastOneProd.idx === this.occurrence) {\n        const firstAfterAtLeastOne = head(currRest.concat(prevRest));\n        this.result.isEndOfRule = firstAfterAtLeastOne === void 0;\n        if (firstAfterAtLeastOne instanceof Terminal) {\n          this.result.token = firstAfterAtLeastOne.terminalType;\n          this.result.occurrence = firstAfterAtLeastOne.idx;\n        }\n      } else {\n        super.walkAtLeastOne(atLeastOneProd, currRest, prevRest);\n      }\n    }\n  }\n  class NextTerminalAfterAtLeastOneSepWalker extends AbstractNextTerminalAfterProductionWalker {\n    walkAtLeastOneSep(atleastOneSepProd, currRest, prevRest) {\n      if (atleastOneSepProd.idx === this.occurrence) {\n        const firstAfterfirstAfterAtLeastOneSep = head(currRest.concat(prevRest));\n        this.result.isEndOfRule = firstAfterfirstAfterAtLeastOneSep === void 0;\n        if (firstAfterfirstAfterAtLeastOneSep instanceof Terminal) {\n          this.result.token = firstAfterfirstAfterAtLeastOneSep.terminalType;\n          this.result.occurrence = firstAfterfirstAfterAtLeastOneSep.idx;\n        }\n      } else {\n        super.walkAtLeastOneSep(atleastOneSepProd, currRest, prevRest);\n      }\n    }\n  }\n  function possiblePathsFrom(targetDef, maxLength) {\n    let currPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    currPath = clone(currPath);\n    let result = [];\n    let i = 0;\n    function remainingPathWith(nextDef) {\n      return nextDef.concat(drop(targetDef, i + 1));\n    }\n    function getAlternativesForProd(definition) {\n      const alternatives = possiblePathsFrom(remainingPathWith(definition), maxLength, currPath);\n      return result.concat(alternatives);\n    }\n    while (currPath.length < maxLength && i < targetDef.length) {\n      const prod = targetDef[i];\n      if (prod instanceof Alternative) {\n        return getAlternativesForProd(prod.definition);\n      } else if (prod instanceof NonTerminal) {\n        return getAlternativesForProd(prod.definition);\n      } else if (prod instanceof Option) {\n        result = getAlternativesForProd(prod.definition);\n      } else if (prod instanceof RepetitionMandatory) {\n        const newDef = prod.definition.concat([new Repetition({\n          definition: prod.definition\n        })]);\n        return getAlternativesForProd(newDef);\n      } else if (prod instanceof RepetitionMandatoryWithSeparator) {\n        const newDef = [new Alternative({\n          definition: prod.definition\n        }), new Repetition({\n          definition: [new Terminal({\n            terminalType: prod.separator\n          })].concat(prod.definition)\n        })];\n        return getAlternativesForProd(newDef);\n      } else if (prod instanceof RepetitionWithSeparator) {\n        const newDef = prod.definition.concat([new Repetition({\n          definition: [new Terminal({\n            terminalType: prod.separator\n          })].concat(prod.definition)\n        })]);\n        result = getAlternativesForProd(newDef);\n      } else if (prod instanceof Repetition) {\n        const newDef = prod.definition.concat([new Repetition({\n          definition: prod.definition\n        })]);\n        result = getAlternativesForProd(newDef);\n      } else if (prod instanceof Alternation) {\n        forEach(prod.definition, currAlt => {\n          if (isEmpty(currAlt.definition) === false) {\n            result = getAlternativesForProd(currAlt.definition);\n          }\n        });\n        return result;\n      } else if (prod instanceof Terminal) {\n        currPath.push(prod.terminalType);\n      } else {\n        throw Error(\"non exhaustive match\");\n      }\n      i++;\n    }\n    result.push({\n      partialPath: currPath,\n      suffixDef: drop(targetDef, i)\n    });\n    return result;\n  }\n  function nextPossibleTokensAfter(initialDef, tokenVector, tokMatcher, maxLookAhead) {\n    const EXIT_NON_TERMINAL = \"EXIT_NONE_TERMINAL\";\n    const EXIT_NON_TERMINAL_ARR = [EXIT_NON_TERMINAL];\n    const EXIT_ALTERNATIVE = \"EXIT_ALTERNATIVE\";\n    let foundCompletePath = false;\n    const tokenVectorLength = tokenVector.length;\n    const minimalAlternativesIndex = tokenVectorLength - maxLookAhead - 1;\n    const result = [];\n    const possiblePaths = [];\n    possiblePaths.push({\n      idx: -1,\n      def: initialDef,\n      ruleStack: [],\n      occurrenceStack: []\n    });\n    while (!isEmpty(possiblePaths)) {\n      const currPath = possiblePaths.pop();\n      if (currPath === EXIT_ALTERNATIVE) {\n        if (foundCompletePath && last(possiblePaths).idx <= minimalAlternativesIndex) {\n          possiblePaths.pop();\n        }\n        continue;\n      }\n      const currDef = currPath.def;\n      const currIdx = currPath.idx;\n      const currRuleStack = currPath.ruleStack;\n      const currOccurrenceStack = currPath.occurrenceStack;\n      if (isEmpty(currDef)) {\n        continue;\n      }\n      const prod = currDef[0];\n      if (prod === EXIT_NON_TERMINAL) {\n        const nextPath = {\n          idx: currIdx,\n          def: drop(currDef),\n          ruleStack: dropRight(currRuleStack),\n          occurrenceStack: dropRight(currOccurrenceStack)\n        };\n        possiblePaths.push(nextPath);\n      } else if (prod instanceof Terminal) {\n        if (currIdx < tokenVectorLength - 1) {\n          const nextIdx = currIdx + 1;\n          const actualToken = tokenVector[nextIdx];\n          if (tokMatcher(actualToken, prod.terminalType)) {\n            const nextPath = {\n              idx: nextIdx,\n              def: drop(currDef),\n              ruleStack: currRuleStack,\n              occurrenceStack: currOccurrenceStack\n            };\n            possiblePaths.push(nextPath);\n          }\n        } else if (currIdx === tokenVectorLength - 1) {\n          result.push({\n            nextTokenType: prod.terminalType,\n            nextTokenOccurrence: prod.idx,\n            ruleStack: currRuleStack,\n            occurrenceStack: currOccurrenceStack\n          });\n          foundCompletePath = true;\n        } else {\n          throw Error(\"non exhaustive match\");\n        }\n      } else if (prod instanceof NonTerminal) {\n        const newRuleStack = clone(currRuleStack);\n        newRuleStack.push(prod.nonTerminalName);\n        const newOccurrenceStack = clone(currOccurrenceStack);\n        newOccurrenceStack.push(prod.idx);\n        const nextPath = {\n          idx: currIdx,\n          def: prod.definition.concat(EXIT_NON_TERMINAL_ARR, drop(currDef)),\n          ruleStack: newRuleStack,\n          occurrenceStack: newOccurrenceStack\n        };\n        possiblePaths.push(nextPath);\n      } else if (prod instanceof Option) {\n        const nextPathWithout = {\n          idx: currIdx,\n          def: drop(currDef),\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack\n        };\n        possiblePaths.push(nextPathWithout);\n        possiblePaths.push(EXIT_ALTERNATIVE);\n        const nextPathWith = {\n          idx: currIdx,\n          def: prod.definition.concat(drop(currDef)),\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack\n        };\n        possiblePaths.push(nextPathWith);\n      } else if (prod instanceof RepetitionMandatory) {\n        const secondIteration = new Repetition({\n          definition: prod.definition,\n          idx: prod.idx\n        });\n        const nextDef = prod.definition.concat([secondIteration], drop(currDef));\n        const nextPath = {\n          idx: currIdx,\n          def: nextDef,\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack\n        };\n        possiblePaths.push(nextPath);\n      } else if (prod instanceof RepetitionMandatoryWithSeparator) {\n        const separatorGast = new Terminal({\n          terminalType: prod.separator\n        });\n        const secondIteration = new Repetition({\n          definition: [separatorGast].concat(prod.definition),\n          idx: prod.idx\n        });\n        const nextDef = prod.definition.concat([secondIteration], drop(currDef));\n        const nextPath = {\n          idx: currIdx,\n          def: nextDef,\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack\n        };\n        possiblePaths.push(nextPath);\n      } else if (prod instanceof RepetitionWithSeparator) {\n        const nextPathWithout = {\n          idx: currIdx,\n          def: drop(currDef),\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack\n        };\n        possiblePaths.push(nextPathWithout);\n        possiblePaths.push(EXIT_ALTERNATIVE);\n        const separatorGast = new Terminal({\n          terminalType: prod.separator\n        });\n        const nthRepetition = new Repetition({\n          definition: [separatorGast].concat(prod.definition),\n          idx: prod.idx\n        });\n        const nextDef = prod.definition.concat([nthRepetition], drop(currDef));\n        const nextPathWith = {\n          idx: currIdx,\n          def: nextDef,\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack\n        };\n        possiblePaths.push(nextPathWith);\n      } else if (prod instanceof Repetition) {\n        const nextPathWithout = {\n          idx: currIdx,\n          def: drop(currDef),\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack\n        };\n        possiblePaths.push(nextPathWithout);\n        possiblePaths.push(EXIT_ALTERNATIVE);\n        const nthRepetition = new Repetition({\n          definition: prod.definition,\n          idx: prod.idx\n        });\n        const nextDef = prod.definition.concat([nthRepetition], drop(currDef));\n        const nextPathWith = {\n          idx: currIdx,\n          def: nextDef,\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack\n        };\n        possiblePaths.push(nextPathWith);\n      } else if (prod instanceof Alternation) {\n        for (let i = prod.definition.length - 1; i >= 0; i--) {\n          const currAlt = prod.definition[i];\n          const currAltPath = {\n            idx: currIdx,\n            def: currAlt.definition.concat(drop(currDef)),\n            ruleStack: currRuleStack,\n            occurrenceStack: currOccurrenceStack\n          };\n          possiblePaths.push(currAltPath);\n          possiblePaths.push(EXIT_ALTERNATIVE);\n        }\n      } else if (prod instanceof Alternative) {\n        possiblePaths.push({\n          idx: currIdx,\n          def: prod.definition.concat(drop(currDef)),\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack\n        });\n      } else if (prod instanceof Rule) {\n        possiblePaths.push(expandTopLevelRule(prod, currIdx, currRuleStack, currOccurrenceStack));\n      } else {\n        throw Error(\"non exhaustive match\");\n      }\n    }\n    return result;\n  }\n  function expandTopLevelRule(topRule, currIdx, currRuleStack, currOccurrenceStack) {\n    const newRuleStack = clone(currRuleStack);\n    newRuleStack.push(topRule.name);\n    const newCurrOccurrenceStack = clone(currOccurrenceStack);\n    newCurrOccurrenceStack.push(1);\n    return {\n      idx: currIdx,\n      def: topRule.definition,\n      ruleStack: newRuleStack,\n      occurrenceStack: newCurrOccurrenceStack\n    };\n  }\n  var PROD_TYPE;\n  (function (PROD_TYPE2) {\n    PROD_TYPE2[PROD_TYPE2[\"OPTION\"] = 0] = \"OPTION\";\n    PROD_TYPE2[PROD_TYPE2[\"REPETITION\"] = 1] = \"REPETITION\";\n    PROD_TYPE2[PROD_TYPE2[\"REPETITION_MANDATORY\"] = 2] = \"REPETITION_MANDATORY\";\n    PROD_TYPE2[PROD_TYPE2[\"REPETITION_MANDATORY_WITH_SEPARATOR\"] = 3] = \"REPETITION_MANDATORY_WITH_SEPARATOR\";\n    PROD_TYPE2[PROD_TYPE2[\"REPETITION_WITH_SEPARATOR\"] = 4] = \"REPETITION_WITH_SEPARATOR\";\n    PROD_TYPE2[PROD_TYPE2[\"ALTERNATION\"] = 5] = \"ALTERNATION\";\n  })(PROD_TYPE || (PROD_TYPE = {}));\n  function getProdType(prod) {\n    if (prod instanceof Option || prod === \"Option\") {\n      return PROD_TYPE.OPTION;\n    } else if (prod instanceof Repetition || prod === \"Repetition\") {\n      return PROD_TYPE.REPETITION;\n    } else if (prod instanceof RepetitionMandatory || prod === \"RepetitionMandatory\") {\n      return PROD_TYPE.REPETITION_MANDATORY;\n    } else if (prod instanceof RepetitionMandatoryWithSeparator || prod === \"RepetitionMandatoryWithSeparator\") {\n      return PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR;\n    } else if (prod instanceof RepetitionWithSeparator || prod === \"RepetitionWithSeparator\") {\n      return PROD_TYPE.REPETITION_WITH_SEPARATOR;\n    } else if (prod instanceof Alternation || prod === \"Alternation\") {\n      return PROD_TYPE.ALTERNATION;\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n  }\n  function buildLookaheadFuncForOr(occurrence, ruleGrammar, maxLookahead, hasPredicates, dynamicTokensEnabled, laFuncBuilder) {\n    const lookAheadPaths = getLookaheadPathsForOr(occurrence, ruleGrammar, maxLookahead);\n    const tokenMatcher2 = areTokenCategoriesNotUsed(lookAheadPaths) ? tokenStructuredMatcherNoCategories : tokenStructuredMatcher;\n    return laFuncBuilder(lookAheadPaths, hasPredicates, tokenMatcher2, dynamicTokensEnabled);\n  }\n  function buildLookaheadFuncForOptionalProd(occurrence, ruleGrammar, k, dynamicTokensEnabled, prodType, lookaheadBuilder) {\n    const lookAheadPaths = getLookaheadPathsForOptionalProd(occurrence, ruleGrammar, prodType, k);\n    const tokenMatcher2 = areTokenCategoriesNotUsed(lookAheadPaths) ? tokenStructuredMatcherNoCategories : tokenStructuredMatcher;\n    return lookaheadBuilder(lookAheadPaths[0], tokenMatcher2, dynamicTokensEnabled);\n  }\n  function buildAlternativesLookAheadFunc(alts, hasPredicates, tokenMatcher2, dynamicTokensEnabled) {\n    const numOfAlts = alts.length;\n    const areAllOneTokenLookahead = every(alts, currAlt => {\n      return every(currAlt, currPath => {\n        return currPath.length === 1;\n      });\n    });\n    if (hasPredicates) {\n      return function (orAlts) {\n        const predicates = map(orAlts, currAlt => currAlt.GATE);\n        for (let t = 0; t < numOfAlts; t++) {\n          const currAlt = alts[t];\n          const currNumOfPaths = currAlt.length;\n          const currPredicate = predicates[t];\n          if (currPredicate !== void 0 && currPredicate.call(this) === false) {\n            continue;\n          }\n          nextPath: for (let j = 0; j < currNumOfPaths; j++) {\n            const currPath = currAlt[j];\n            const currPathLength = currPath.length;\n            for (let i = 0; i < currPathLength; i++) {\n              const nextToken = this.LA(i + 1);\n              if (tokenMatcher2(nextToken, currPath[i]) === false) {\n                continue nextPath;\n              }\n            }\n            return t;\n          }\n        }\n        return void 0;\n      };\n    } else if (areAllOneTokenLookahead && !dynamicTokensEnabled) {\n      const singleTokenAlts = map(alts, currAlt => {\n        return flatten(currAlt);\n      });\n      const choiceToAlt = reduce(singleTokenAlts, (result, currAlt, idx) => {\n        forEach(currAlt, currTokType => {\n          if (!has(result, currTokType.tokenTypeIdx)) {\n            result[currTokType.tokenTypeIdx] = idx;\n          }\n          forEach(currTokType.categoryMatches, currExtendingType => {\n            if (!has(result, currExtendingType)) {\n              result[currExtendingType] = idx;\n            }\n          });\n        });\n        return result;\n      }, {});\n      return function () {\n        const nextToken = this.LA(1);\n        return choiceToAlt[nextToken.tokenTypeIdx];\n      };\n    } else {\n      return function () {\n        for (let t = 0; t < numOfAlts; t++) {\n          const currAlt = alts[t];\n          const currNumOfPaths = currAlt.length;\n          nextPath: for (let j = 0; j < currNumOfPaths; j++) {\n            const currPath = currAlt[j];\n            const currPathLength = currPath.length;\n            for (let i = 0; i < currPathLength; i++) {\n              const nextToken = this.LA(i + 1);\n              if (tokenMatcher2(nextToken, currPath[i]) === false) {\n                continue nextPath;\n              }\n            }\n            return t;\n          }\n        }\n        return void 0;\n      };\n    }\n  }\n  function buildSingleAlternativeLookaheadFunction(alt, tokenMatcher2, dynamicTokensEnabled) {\n    const areAllOneTokenLookahead = every(alt, currPath => {\n      return currPath.length === 1;\n    });\n    const numOfPaths = alt.length;\n    if (areAllOneTokenLookahead && !dynamicTokensEnabled) {\n      const singleTokensTypes = flatten(alt);\n      if (singleTokensTypes.length === 1 && isEmpty(singleTokensTypes[0].categoryMatches)) {\n        const expectedTokenType = singleTokensTypes[0];\n        const expectedTokenUniqueKey = expectedTokenType.tokenTypeIdx;\n        return function () {\n          return this.LA(1).tokenTypeIdx === expectedTokenUniqueKey;\n        };\n      } else {\n        const choiceToAlt = reduce(singleTokensTypes, (result, currTokType, idx) => {\n          result[currTokType.tokenTypeIdx] = true;\n          forEach(currTokType.categoryMatches, currExtendingType => {\n            result[currExtendingType] = true;\n          });\n          return result;\n        }, []);\n        return function () {\n          const nextToken = this.LA(1);\n          return choiceToAlt[nextToken.tokenTypeIdx] === true;\n        };\n      }\n    } else {\n      return function () {\n        nextPath: for (let j = 0; j < numOfPaths; j++) {\n          const currPath = alt[j];\n          const currPathLength = currPath.length;\n          for (let i = 0; i < currPathLength; i++) {\n            const nextToken = this.LA(i + 1);\n            if (tokenMatcher2(nextToken, currPath[i]) === false) {\n              continue nextPath;\n            }\n          }\n          return true;\n        }\n        return false;\n      };\n    }\n  }\n  class RestDefinitionFinderWalker extends RestWalker {\n    constructor(topProd, targetOccurrence, targetProdType) {\n      super();\n      this.topProd = topProd;\n      this.targetOccurrence = targetOccurrence;\n      this.targetProdType = targetProdType;\n    }\n    startWalking() {\n      this.walk(this.topProd);\n      return this.restDef;\n    }\n    checkIsTarget(node, expectedProdType, currRest, prevRest) {\n      if (node.idx === this.targetOccurrence && this.targetProdType === expectedProdType) {\n        this.restDef = currRest.concat(prevRest);\n        return true;\n      }\n      return false;\n    }\n    walkOption(optionProd, currRest, prevRest) {\n      if (!this.checkIsTarget(optionProd, PROD_TYPE.OPTION, currRest, prevRest)) {\n        super.walkOption(optionProd, currRest, prevRest);\n      }\n    }\n    walkAtLeastOne(atLeastOneProd, currRest, prevRest) {\n      if (!this.checkIsTarget(atLeastOneProd, PROD_TYPE.REPETITION_MANDATORY, currRest, prevRest)) {\n        super.walkOption(atLeastOneProd, currRest, prevRest);\n      }\n    }\n    walkAtLeastOneSep(atLeastOneSepProd, currRest, prevRest) {\n      if (!this.checkIsTarget(atLeastOneSepProd, PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR, currRest, prevRest)) {\n        super.walkOption(atLeastOneSepProd, currRest, prevRest);\n      }\n    }\n    walkMany(manyProd, currRest, prevRest) {\n      if (!this.checkIsTarget(manyProd, PROD_TYPE.REPETITION, currRest, prevRest)) {\n        super.walkOption(manyProd, currRest, prevRest);\n      }\n    }\n    walkManySep(manySepProd, currRest, prevRest) {\n      if (!this.checkIsTarget(manySepProd, PROD_TYPE.REPETITION_WITH_SEPARATOR, currRest, prevRest)) {\n        super.walkOption(manySepProd, currRest, prevRest);\n      }\n    }\n  }\n  class InsideDefinitionFinderVisitor extends GAstVisitor {\n    constructor(targetOccurrence, targetProdType, targetRef) {\n      super();\n      this.targetOccurrence = targetOccurrence;\n      this.targetProdType = targetProdType;\n      this.targetRef = targetRef;\n      this.result = [];\n    }\n    checkIsTarget(node, expectedProdName) {\n      if (node.idx === this.targetOccurrence && this.targetProdType === expectedProdName && (this.targetRef === void 0 || node === this.targetRef)) {\n        this.result = node.definition;\n      }\n    }\n    visitOption(node) {\n      this.checkIsTarget(node, PROD_TYPE.OPTION);\n    }\n    visitRepetition(node) {\n      this.checkIsTarget(node, PROD_TYPE.REPETITION);\n    }\n    visitRepetitionMandatory(node) {\n      this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY);\n    }\n    visitRepetitionMandatoryWithSeparator(node) {\n      this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR);\n    }\n    visitRepetitionWithSeparator(node) {\n      this.checkIsTarget(node, PROD_TYPE.REPETITION_WITH_SEPARATOR);\n    }\n    visitAlternation(node) {\n      this.checkIsTarget(node, PROD_TYPE.ALTERNATION);\n    }\n  }\n  function initializeArrayOfArrays(size) {\n    const result = new Array(size);\n    for (let i = 0; i < size; i++) {\n      result[i] = [];\n    }\n    return result;\n  }\n  function pathToHashKeys(path) {\n    let keys2 = [\"\"];\n    for (let i = 0; i < path.length; i++) {\n      const tokType = path[i];\n      const longerKeys = [];\n      for (let j = 0; j < keys2.length; j++) {\n        const currShorterKey = keys2[j];\n        longerKeys.push(currShorterKey + \"_\" + tokType.tokenTypeIdx);\n        for (let t = 0; t < tokType.categoryMatches.length; t++) {\n          const categoriesKeySuffix = \"_\" + tokType.categoryMatches[t];\n          longerKeys.push(currShorterKey + categoriesKeySuffix);\n        }\n      }\n      keys2 = longerKeys;\n    }\n    return keys2;\n  }\n  function isUniquePrefixHash(altKnownPathsKeys, searchPathKeys, idx) {\n    for (let currAltIdx = 0; currAltIdx < altKnownPathsKeys.length; currAltIdx++) {\n      if (currAltIdx === idx) {\n        continue;\n      }\n      const otherAltKnownPathsKeys = altKnownPathsKeys[currAltIdx];\n      for (let searchIdx = 0; searchIdx < searchPathKeys.length; searchIdx++) {\n        const searchKey = searchPathKeys[searchIdx];\n        if (otherAltKnownPathsKeys[searchKey] === true) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n  function lookAheadSequenceFromAlternatives(altsDefs, k) {\n    const partialAlts = map(altsDefs, currAlt => possiblePathsFrom([currAlt], 1));\n    const finalResult = initializeArrayOfArrays(partialAlts.length);\n    const altsHashes = map(partialAlts, currAltPaths => {\n      const dict = {};\n      forEach(currAltPaths, item => {\n        const keys2 = pathToHashKeys(item.partialPath);\n        forEach(keys2, currKey => {\n          dict[currKey] = true;\n        });\n      });\n      return dict;\n    });\n    let newData = partialAlts;\n    for (let pathLength = 1; pathLength <= k; pathLength++) {\n      const currDataset = newData;\n      newData = initializeArrayOfArrays(currDataset.length);\n      for (let altIdx = 0; altIdx < currDataset.length; altIdx++) {\n        const currAltPathsAndSuffixes = currDataset[altIdx];\n        for (let currPathIdx = 0; currPathIdx < currAltPathsAndSuffixes.length; currPathIdx++) {\n          const currPathPrefix = currAltPathsAndSuffixes[currPathIdx].partialPath;\n          const suffixDef = currAltPathsAndSuffixes[currPathIdx].suffixDef;\n          const prefixKeys = pathToHashKeys(currPathPrefix);\n          const isUnique = isUniquePrefixHash(altsHashes, prefixKeys, altIdx);\n          if (isUnique || isEmpty(suffixDef) || currPathPrefix.length === k) {\n            const currAltResult = finalResult[altIdx];\n            if (containsPath(currAltResult, currPathPrefix) === false) {\n              currAltResult.push(currPathPrefix);\n              for (let j = 0; j < prefixKeys.length; j++) {\n                const currKey = prefixKeys[j];\n                altsHashes[altIdx][currKey] = true;\n              }\n            }\n          } else {\n            const newPartialPathsAndSuffixes = possiblePathsFrom(suffixDef, pathLength + 1, currPathPrefix);\n            newData[altIdx] = newData[altIdx].concat(newPartialPathsAndSuffixes);\n            forEach(newPartialPathsAndSuffixes, item => {\n              const prefixKeys2 = pathToHashKeys(item.partialPath);\n              forEach(prefixKeys2, key => {\n                altsHashes[altIdx][key] = true;\n              });\n            });\n          }\n        }\n      }\n    }\n    return finalResult;\n  }\n  function getLookaheadPathsForOr(occurrence, ruleGrammar, k, orProd) {\n    const visitor = new InsideDefinitionFinderVisitor(occurrence, PROD_TYPE.ALTERNATION, orProd);\n    ruleGrammar.accept(visitor);\n    return lookAheadSequenceFromAlternatives(visitor.result, k);\n  }\n  function getLookaheadPathsForOptionalProd(occurrence, ruleGrammar, prodType, k) {\n    const insideDefVisitor = new InsideDefinitionFinderVisitor(occurrence, prodType);\n    ruleGrammar.accept(insideDefVisitor);\n    const insideDef = insideDefVisitor.result;\n    const afterDefWalker = new RestDefinitionFinderWalker(ruleGrammar, occurrence, prodType);\n    const afterDef = afterDefWalker.startWalking();\n    const insideFlat = new Alternative({\n      definition: insideDef\n    });\n    const afterFlat = new Alternative({\n      definition: afterDef\n    });\n    return lookAheadSequenceFromAlternatives([insideFlat, afterFlat], k);\n  }\n  function containsPath(alternative, searchPath) {\n    compareOtherPath: for (let i = 0; i < alternative.length; i++) {\n      const otherPath = alternative[i];\n      if (otherPath.length !== searchPath.length) {\n        continue;\n      }\n      for (let j = 0; j < otherPath.length; j++) {\n        const searchTok = searchPath[j];\n        const otherTok = otherPath[j];\n        const matchingTokens = searchTok === otherTok || otherTok.categoryMatchesMap[searchTok.tokenTypeIdx] !== void 0;\n        if (matchingTokens === false) {\n          continue compareOtherPath;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n  function isStrictPrefixOfPath(prefix, other) {\n    return prefix.length < other.length && every(prefix, (tokType, idx) => {\n      const otherTokType = other[idx];\n      return tokType === otherTokType || otherTokType.categoryMatchesMap[tokType.tokenTypeIdx];\n    });\n  }\n  function areTokenCategoriesNotUsed(lookAheadPaths) {\n    return every(lookAheadPaths, singleAltPaths => every(singleAltPaths, singlePath => every(singlePath, token => isEmpty(token.categoryMatches))));\n  }\n  function validateLookahead(options) {\n    const lookaheadValidationErrorMessages = options.lookaheadStrategy.validate({\n      rules: options.rules,\n      tokenTypes: options.tokenTypes,\n      grammarName: options.grammarName\n    });\n    return map(lookaheadValidationErrorMessages, errorMessage => Object.assign({\n      type: ParserDefinitionErrorType.CUSTOM_LOOKAHEAD_VALIDATION\n    }, errorMessage));\n  }\n  function validateGrammar$1(topLevels, tokenTypes, errMsgProvider, grammarName) {\n    const duplicateErrors = flatMap(topLevels, currTopLevel => validateDuplicateProductions(currTopLevel, errMsgProvider));\n    const termsNamespaceConflictErrors = checkTerminalAndNoneTerminalsNameSpace(topLevels, tokenTypes, errMsgProvider);\n    const tooManyAltsErrors = flatMap(topLevels, curRule => validateTooManyAlts(curRule, errMsgProvider));\n    const duplicateRulesError = flatMap(topLevels, curRule => validateRuleDoesNotAlreadyExist(curRule, topLevels, grammarName, errMsgProvider));\n    return duplicateErrors.concat(termsNamespaceConflictErrors, tooManyAltsErrors, duplicateRulesError);\n  }\n  function validateDuplicateProductions(topLevelRule, errMsgProvider) {\n    const collectorVisitor2 = new OccurrenceValidationCollector();\n    topLevelRule.accept(collectorVisitor2);\n    const allRuleProductions = collectorVisitor2.allProductions;\n    const productionGroups = groupBy$1(allRuleProductions, identifyProductionForDuplicates);\n    const duplicates = pickBy(productionGroups, currGroup => {\n      return currGroup.length > 1;\n    });\n    const errors = map(values(duplicates), currDuplicates => {\n      const firstProd = head(currDuplicates);\n      const msg = errMsgProvider.buildDuplicateFoundError(topLevelRule, currDuplicates);\n      const dslName = getProductionDslName(firstProd);\n      const defError = {\n        message: msg,\n        type: ParserDefinitionErrorType.DUPLICATE_PRODUCTIONS,\n        ruleName: topLevelRule.name,\n        dslName,\n        occurrence: firstProd.idx\n      };\n      const param = getExtraProductionArgument(firstProd);\n      if (param) {\n        defError.parameter = param;\n      }\n      return defError;\n    });\n    return errors;\n  }\n  function identifyProductionForDuplicates(prod) {\n    return \"\".concat(getProductionDslName(prod), \"_#_\").concat(prod.idx, \"_#_\").concat(getExtraProductionArgument(prod));\n  }\n  function getExtraProductionArgument(prod) {\n    if (prod instanceof Terminal) {\n      return prod.terminalType.name;\n    } else if (prod instanceof NonTerminal) {\n      return prod.nonTerminalName;\n    } else {\n      return \"\";\n    }\n  }\n  class OccurrenceValidationCollector extends GAstVisitor {\n    constructor() {\n      super(...arguments);\n      this.allProductions = [];\n    }\n    visitNonTerminal(subrule) {\n      this.allProductions.push(subrule);\n    }\n    visitOption(option) {\n      this.allProductions.push(option);\n    }\n    visitRepetitionWithSeparator(manySep) {\n      this.allProductions.push(manySep);\n    }\n    visitRepetitionMandatory(atLeastOne) {\n      this.allProductions.push(atLeastOne);\n    }\n    visitRepetitionMandatoryWithSeparator(atLeastOneSep) {\n      this.allProductions.push(atLeastOneSep);\n    }\n    visitRepetition(many) {\n      this.allProductions.push(many);\n    }\n    visitAlternation(or) {\n      this.allProductions.push(or);\n    }\n    visitTerminal(terminal) {\n      this.allProductions.push(terminal);\n    }\n  }\n  function validateRuleDoesNotAlreadyExist(rule, allRules, className, errMsgProvider) {\n    const errors = [];\n    const occurrences = reduce(allRules, (result, curRule) => {\n      if (curRule.name === rule.name) {\n        return result + 1;\n      }\n      return result;\n    }, 0);\n    if (occurrences > 1) {\n      const errMsg = errMsgProvider.buildDuplicateRuleNameError({\n        topLevelRule: rule,\n        grammarName: className\n      });\n      errors.push({\n        message: errMsg,\n        type: ParserDefinitionErrorType.DUPLICATE_RULE_NAME,\n        ruleName: rule.name\n      });\n    }\n    return errors;\n  }\n  function validateRuleIsOverridden(ruleName, definedRulesNames, className) {\n    const errors = [];\n    let errMsg;\n    if (!includes(definedRulesNames, ruleName)) {\n      errMsg = \"Invalid rule override, rule: ->\".concat(ruleName, \"<- cannot be overridden in the grammar: ->\").concat(className, \"<-as it is not defined in any of the super grammars \");\n      errors.push({\n        message: errMsg,\n        type: ParserDefinitionErrorType.INVALID_RULE_OVERRIDE,\n        ruleName\n      });\n    }\n    return errors;\n  }\n  function validateNoLeftRecursion(topRule, currRule, errMsgProvider) {\n    let path = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n    const errors = [];\n    const nextNonTerminals = getFirstNoneTerminal(currRule.definition);\n    if (isEmpty(nextNonTerminals)) {\n      return [];\n    } else {\n      const ruleName = topRule.name;\n      const foundLeftRecursion = includes(nextNonTerminals, topRule);\n      if (foundLeftRecursion) {\n        errors.push({\n          message: errMsgProvider.buildLeftRecursionError({\n            topLevelRule: topRule,\n            leftRecursionPath: path\n          }),\n          type: ParserDefinitionErrorType.LEFT_RECURSION,\n          ruleName\n        });\n      }\n      const validNextSteps = difference$1(nextNonTerminals, path.concat([topRule]));\n      const errorsFromNextSteps = flatMap(validNextSteps, currRefRule => {\n        const newPath = clone(path);\n        newPath.push(currRefRule);\n        return validateNoLeftRecursion(topRule, currRefRule, errMsgProvider, newPath);\n      });\n      return errors.concat(errorsFromNextSteps);\n    }\n  }\n  function getFirstNoneTerminal(definition) {\n    let result = [];\n    if (isEmpty(definition)) {\n      return result;\n    }\n    const firstProd = head(definition);\n    if (firstProd instanceof NonTerminal) {\n      result.push(firstProd.referencedRule);\n    } else if (firstProd instanceof Alternative || firstProd instanceof Option || firstProd instanceof RepetitionMandatory || firstProd instanceof RepetitionMandatoryWithSeparator || firstProd instanceof RepetitionWithSeparator || firstProd instanceof Repetition) {\n      result = result.concat(getFirstNoneTerminal(firstProd.definition));\n    } else if (firstProd instanceof Alternation) {\n      result = flatten(map(firstProd.definition, currSubDef => getFirstNoneTerminal(currSubDef.definition)));\n    } else if (firstProd instanceof Terminal) ;else {\n      throw Error(\"non exhaustive match\");\n    }\n    const isFirstOptional = isOptionalProd(firstProd);\n    const hasMore = definition.length > 1;\n    if (isFirstOptional && hasMore) {\n      const rest = drop(definition);\n      return result.concat(getFirstNoneTerminal(rest));\n    } else {\n      return result;\n    }\n  }\n  class OrCollector extends GAstVisitor {\n    constructor() {\n      super(...arguments);\n      this.alternations = [];\n    }\n    visitAlternation(node) {\n      this.alternations.push(node);\n    }\n  }\n  function validateEmptyOrAlternative(topLevelRule, errMsgProvider) {\n    const orCollector = new OrCollector();\n    topLevelRule.accept(orCollector);\n    const ors = orCollector.alternations;\n    const errors = flatMap(ors, currOr => {\n      const exceptLast = dropRight(currOr.definition);\n      return flatMap(exceptLast, (currAlternative, currAltIdx) => {\n        const possibleFirstInAlt = nextPossibleTokensAfter([currAlternative], [], tokenStructuredMatcher, 1);\n        if (isEmpty(possibleFirstInAlt)) {\n          return [{\n            message: errMsgProvider.buildEmptyAlternationError({\n              topLevelRule,\n              alternation: currOr,\n              emptyChoiceIdx: currAltIdx\n            }),\n            type: ParserDefinitionErrorType.NONE_LAST_EMPTY_ALT,\n            ruleName: topLevelRule.name,\n            occurrence: currOr.idx,\n            alternative: currAltIdx + 1\n          }];\n        } else {\n          return [];\n        }\n      });\n    });\n    return errors;\n  }\n  function validateAmbiguousAlternationAlternatives(topLevelRule, globalMaxLookahead, errMsgProvider) {\n    const orCollector = new OrCollector();\n    topLevelRule.accept(orCollector);\n    let ors = orCollector.alternations;\n    ors = reject(ors, currOr => currOr.ignoreAmbiguities === true);\n    const errors = flatMap(ors, currOr => {\n      const currOccurrence = currOr.idx;\n      const actualMaxLookahead = currOr.maxLookahead || globalMaxLookahead;\n      const alternatives = getLookaheadPathsForOr(currOccurrence, topLevelRule, actualMaxLookahead, currOr);\n      const altsAmbiguityErrors = checkAlternativesAmbiguities(alternatives, currOr, topLevelRule, errMsgProvider);\n      const altsPrefixAmbiguityErrors = checkPrefixAlternativesAmbiguities(alternatives, currOr, topLevelRule, errMsgProvider);\n      return altsAmbiguityErrors.concat(altsPrefixAmbiguityErrors);\n    });\n    return errors;\n  }\n  class RepetitionCollector extends GAstVisitor {\n    constructor() {\n      super(...arguments);\n      this.allProductions = [];\n    }\n    visitRepetitionWithSeparator(manySep) {\n      this.allProductions.push(manySep);\n    }\n    visitRepetitionMandatory(atLeastOne) {\n      this.allProductions.push(atLeastOne);\n    }\n    visitRepetitionMandatoryWithSeparator(atLeastOneSep) {\n      this.allProductions.push(atLeastOneSep);\n    }\n    visitRepetition(many) {\n      this.allProductions.push(many);\n    }\n  }\n  function validateTooManyAlts(topLevelRule, errMsgProvider) {\n    const orCollector = new OrCollector();\n    topLevelRule.accept(orCollector);\n    const ors = orCollector.alternations;\n    const errors = flatMap(ors, currOr => {\n      if (currOr.definition.length > 255) {\n        return [{\n          message: errMsgProvider.buildTooManyAlternativesError({\n            topLevelRule,\n            alternation: currOr\n          }),\n          type: ParserDefinitionErrorType.TOO_MANY_ALTS,\n          ruleName: topLevelRule.name,\n          occurrence: currOr.idx\n        }];\n      } else {\n        return [];\n      }\n    });\n    return errors;\n  }\n  function validateSomeNonEmptyLookaheadPath(topLevelRules, maxLookahead, errMsgProvider) {\n    const errors = [];\n    forEach(topLevelRules, currTopRule => {\n      const collectorVisitor2 = new RepetitionCollector();\n      currTopRule.accept(collectorVisitor2);\n      const allRuleProductions = collectorVisitor2.allProductions;\n      forEach(allRuleProductions, currProd => {\n        const prodType = getProdType(currProd);\n        const actualMaxLookahead = currProd.maxLookahead || maxLookahead;\n        const currOccurrence = currProd.idx;\n        const paths = getLookaheadPathsForOptionalProd(currOccurrence, currTopRule, prodType, actualMaxLookahead);\n        const pathsInsideProduction = paths[0];\n        if (isEmpty(flatten(pathsInsideProduction))) {\n          const errMsg = errMsgProvider.buildEmptyRepetitionError({\n            topLevelRule: currTopRule,\n            repetition: currProd\n          });\n          errors.push({\n            message: errMsg,\n            type: ParserDefinitionErrorType.NO_NON_EMPTY_LOOKAHEAD,\n            ruleName: currTopRule.name\n          });\n        }\n      });\n    });\n    return errors;\n  }\n  function checkAlternativesAmbiguities(alternatives, alternation, rule, errMsgProvider) {\n    const foundAmbiguousPaths = [];\n    const identicalAmbiguities = reduce(alternatives, (result, currAlt, currAltIdx) => {\n      if (alternation.definition[currAltIdx].ignoreAmbiguities === true) {\n        return result;\n      }\n      forEach(currAlt, currPath => {\n        const altsCurrPathAppearsIn = [currAltIdx];\n        forEach(alternatives, (currOtherAlt, currOtherAltIdx) => {\n          if (currAltIdx !== currOtherAltIdx && containsPath(currOtherAlt, currPath) &&\n          // ignore (skip) ambiguities with this \"other\" alternative\n          alternation.definition[currOtherAltIdx].ignoreAmbiguities !== true) {\n            altsCurrPathAppearsIn.push(currOtherAltIdx);\n          }\n        });\n        if (altsCurrPathAppearsIn.length > 1 && !containsPath(foundAmbiguousPaths, currPath)) {\n          foundAmbiguousPaths.push(currPath);\n          result.push({\n            alts: altsCurrPathAppearsIn,\n            path: currPath\n          });\n        }\n      });\n      return result;\n    }, []);\n    const currErrors = map(identicalAmbiguities, currAmbDescriptor => {\n      const ambgIndices = map(currAmbDescriptor.alts, currAltIdx => currAltIdx + 1);\n      const currMessage = errMsgProvider.buildAlternationAmbiguityError({\n        topLevelRule: rule,\n        alternation,\n        ambiguityIndices: ambgIndices,\n        prefixPath: currAmbDescriptor.path\n      });\n      return {\n        message: currMessage,\n        type: ParserDefinitionErrorType.AMBIGUOUS_ALTS,\n        ruleName: rule.name,\n        occurrence: alternation.idx,\n        alternatives: currAmbDescriptor.alts\n      };\n    });\n    return currErrors;\n  }\n  function checkPrefixAlternativesAmbiguities(alternatives, alternation, rule, errMsgProvider) {\n    const pathsAndIndices = reduce(alternatives, (result, currAlt, idx) => {\n      const currPathsAndIdx = map(currAlt, currPath => {\n        return {\n          idx,\n          path: currPath\n        };\n      });\n      return result.concat(currPathsAndIdx);\n    }, []);\n    const errors = compact(flatMap(pathsAndIndices, currPathAndIdx => {\n      const alternativeGast = alternation.definition[currPathAndIdx.idx];\n      if (alternativeGast.ignoreAmbiguities === true) {\n        return [];\n      }\n      const targetIdx = currPathAndIdx.idx;\n      const targetPath = currPathAndIdx.path;\n      const prefixAmbiguitiesPathsAndIndices = filter(pathsAndIndices, searchPathAndIdx => {\n        return (\n          // ignore (skip) ambiguities with this \"other\" alternative\n          alternation.definition[searchPathAndIdx.idx].ignoreAmbiguities !== true && searchPathAndIdx.idx < targetIdx &&\n          // checking for strict prefix because identical lookaheads\n          // will be be detected using a different validation.\n          isStrictPrefixOfPath(searchPathAndIdx.path, targetPath)\n        );\n      });\n      const currPathPrefixErrors = map(prefixAmbiguitiesPathsAndIndices, currAmbPathAndIdx => {\n        const ambgIndices = [currAmbPathAndIdx.idx + 1, targetIdx + 1];\n        const occurrence = alternation.idx === 0 ? \"\" : alternation.idx;\n        const message = errMsgProvider.buildAlternationPrefixAmbiguityError({\n          topLevelRule: rule,\n          alternation,\n          ambiguityIndices: ambgIndices,\n          prefixPath: currAmbPathAndIdx.path\n        });\n        return {\n          message,\n          type: ParserDefinitionErrorType.AMBIGUOUS_PREFIX_ALTS,\n          ruleName: rule.name,\n          occurrence,\n          alternatives: ambgIndices\n        };\n      });\n      return currPathPrefixErrors;\n    }));\n    return errors;\n  }\n  function checkTerminalAndNoneTerminalsNameSpace(topLevels, tokenTypes, errMsgProvider) {\n    const errors = [];\n    const tokenNames = map(tokenTypes, currToken => currToken.name);\n    forEach(topLevels, currRule => {\n      const currRuleName = currRule.name;\n      if (includes(tokenNames, currRuleName)) {\n        const errMsg = errMsgProvider.buildNamespaceConflictError(currRule);\n        errors.push({\n          message: errMsg,\n          type: ParserDefinitionErrorType.CONFLICT_TOKENS_RULES_NAMESPACE,\n          ruleName: currRuleName\n        });\n      }\n    });\n    return errors;\n  }\n  function resolveGrammar(options) {\n    const actualOptions = defaults$1(options, {\n      errMsgProvider: defaultGrammarResolverErrorProvider\n    });\n    const topRulesTable = {};\n    forEach(options.rules, rule => {\n      topRulesTable[rule.name] = rule;\n    });\n    return resolveGrammar$1(topRulesTable, actualOptions.errMsgProvider);\n  }\n  function validateGrammar(options) {\n    options = defaults$1(options, {\n      errMsgProvider: defaultGrammarValidatorErrorProvider\n    });\n    return validateGrammar$1(options.rules, options.tokenTypes, options.errMsgProvider, options.grammarName);\n  }\n  const MISMATCHED_TOKEN_EXCEPTION = \"MismatchedTokenException\";\n  const NO_VIABLE_ALT_EXCEPTION = \"NoViableAltException\";\n  const EARLY_EXIT_EXCEPTION = \"EarlyExitException\";\n  const NOT_ALL_INPUT_PARSED_EXCEPTION = \"NotAllInputParsedException\";\n  const RECOGNITION_EXCEPTION_NAMES = [MISMATCHED_TOKEN_EXCEPTION, NO_VIABLE_ALT_EXCEPTION, EARLY_EXIT_EXCEPTION, NOT_ALL_INPUT_PARSED_EXCEPTION];\n  Object.freeze(RECOGNITION_EXCEPTION_NAMES);\n  function isRecognitionException(error) {\n    return includes(RECOGNITION_EXCEPTION_NAMES, error.name);\n  }\n  class RecognitionException extends Error {\n    constructor(message, token) {\n      super(message);\n      this.token = token;\n      this.resyncedTokens = [];\n      Object.setPrototypeOf(this, new.target.prototype);\n      if (Error.captureStackTrace) {\n        Error.captureStackTrace(this, this.constructor);\n      }\n    }\n  }\n  class MismatchedTokenException extends RecognitionException {\n    constructor(message, token, previousToken) {\n      super(message, token);\n      this.previousToken = previousToken;\n      this.name = MISMATCHED_TOKEN_EXCEPTION;\n    }\n  }\n  class NoViableAltException extends RecognitionException {\n    constructor(message, token, previousToken) {\n      super(message, token);\n      this.previousToken = previousToken;\n      this.name = NO_VIABLE_ALT_EXCEPTION;\n    }\n  }\n  class NotAllInputParsedException extends RecognitionException {\n    constructor(message, token) {\n      super(message, token);\n      this.name = NOT_ALL_INPUT_PARSED_EXCEPTION;\n    }\n  }\n  class EarlyExitException extends RecognitionException {\n    constructor(message, token, previousToken) {\n      super(message, token);\n      this.previousToken = previousToken;\n      this.name = EARLY_EXIT_EXCEPTION;\n    }\n  }\n  const EOF_FOLLOW_KEY = {};\n  const IN_RULE_RECOVERY_EXCEPTION = \"InRuleRecoveryException\";\n  class InRuleRecoveryException extends Error {\n    constructor(message) {\n      super(message);\n      this.name = IN_RULE_RECOVERY_EXCEPTION;\n    }\n  }\n  class Recoverable {\n    initRecoverable(config) {\n      this.firstAfterRepMap = {};\n      this.resyncFollows = {};\n      this.recoveryEnabled = has(config, \"recoveryEnabled\") ? config.recoveryEnabled : DEFAULT_PARSER_CONFIG.recoveryEnabled;\n      if (this.recoveryEnabled) {\n        this.attemptInRepetitionRecovery = attemptInRepetitionRecovery;\n      }\n    }\n    getTokenToInsert(tokType) {\n      const tokToInsert = createTokenInstance(tokType, \"\", NaN, NaN, NaN, NaN, NaN, NaN);\n      tokToInsert.isInsertedInRecovery = true;\n      return tokToInsert;\n    }\n    canTokenTypeBeInsertedInRecovery(tokType) {\n      return true;\n    }\n    canTokenTypeBeDeletedInRecovery(tokType) {\n      return true;\n    }\n    tryInRepetitionRecovery(grammarRule, grammarRuleArgs, lookAheadFunc, expectedTokType) {\n      const reSyncTokType = this.findReSyncTokenType();\n      const savedLexerState = this.exportLexerState();\n      const resyncedTokens = [];\n      let passedResyncPoint = false;\n      const nextTokenWithoutResync = this.LA(1);\n      let currToken = this.LA(1);\n      const generateErrorMessage = () => {\n        const previousToken = this.LA(0);\n        const msg = this.errorMessageProvider.buildMismatchTokenMessage({\n          expected: expectedTokType,\n          actual: nextTokenWithoutResync,\n          previous: previousToken,\n          ruleName: this.getCurrRuleFullName()\n        });\n        const error = new MismatchedTokenException(msg, nextTokenWithoutResync, this.LA(0));\n        error.resyncedTokens = dropRight(resyncedTokens);\n        this.SAVE_ERROR(error);\n      };\n      while (!passedResyncPoint) {\n        if (this.tokenMatcher(currToken, expectedTokType)) {\n          generateErrorMessage();\n          return;\n        } else if (lookAheadFunc.call(this)) {\n          generateErrorMessage();\n          grammarRule.apply(this, grammarRuleArgs);\n          return;\n        } else if (this.tokenMatcher(currToken, reSyncTokType)) {\n          passedResyncPoint = true;\n        } else {\n          currToken = this.SKIP_TOKEN();\n          this.addToResyncTokens(currToken, resyncedTokens);\n        }\n      }\n      this.importLexerState(savedLexerState);\n    }\n    shouldInRepetitionRecoveryBeTried(expectTokAfterLastMatch, nextTokIdx, notStuck) {\n      if (notStuck === false) {\n        return false;\n      }\n      if (this.tokenMatcher(this.LA(1), expectTokAfterLastMatch)) {\n        return false;\n      }\n      if (this.isBackTracking()) {\n        return false;\n      }\n      if (this.canPerformInRuleRecovery(expectTokAfterLastMatch, this.getFollowsForInRuleRecovery(expectTokAfterLastMatch, nextTokIdx))) {\n        return false;\n      }\n      return true;\n    }\n    // Error Recovery functionality\n    getFollowsForInRuleRecovery(tokType, tokIdxInRule) {\n      const grammarPath = this.getCurrentGrammarPath(tokType, tokIdxInRule);\n      const follows = this.getNextPossibleTokenTypes(grammarPath);\n      return follows;\n    }\n    tryInRuleRecovery(expectedTokType, follows) {\n      if (this.canRecoverWithSingleTokenInsertion(expectedTokType, follows)) {\n        const tokToInsert = this.getTokenToInsert(expectedTokType);\n        return tokToInsert;\n      }\n      if (this.canRecoverWithSingleTokenDeletion(expectedTokType)) {\n        const nextTok = this.SKIP_TOKEN();\n        this.consumeToken();\n        return nextTok;\n      }\n      throw new InRuleRecoveryException(\"sad sad panda\");\n    }\n    canPerformInRuleRecovery(expectedToken, follows) {\n      return this.canRecoverWithSingleTokenInsertion(expectedToken, follows) || this.canRecoverWithSingleTokenDeletion(expectedToken);\n    }\n    canRecoverWithSingleTokenInsertion(expectedTokType, follows) {\n      if (!this.canTokenTypeBeInsertedInRecovery(expectedTokType)) {\n        return false;\n      }\n      if (isEmpty(follows)) {\n        return false;\n      }\n      const mismatchedTok = this.LA(1);\n      const isMisMatchedTokInFollows = find$1(follows, possibleFollowsTokType => {\n        return this.tokenMatcher(mismatchedTok, possibleFollowsTokType);\n      }) !== void 0;\n      return isMisMatchedTokInFollows;\n    }\n    canRecoverWithSingleTokenDeletion(expectedTokType) {\n      if (!this.canTokenTypeBeDeletedInRecovery(expectedTokType)) {\n        return false;\n      }\n      const isNextTokenWhatIsExpected = this.tokenMatcher(this.LA(2), expectedTokType);\n      return isNextTokenWhatIsExpected;\n    }\n    isInCurrentRuleReSyncSet(tokenTypeIdx) {\n      const followKey = this.getCurrFollowKey();\n      const currentRuleReSyncSet = this.getFollowSetFromFollowKey(followKey);\n      return includes(currentRuleReSyncSet, tokenTypeIdx);\n    }\n    findReSyncTokenType() {\n      const allPossibleReSyncTokTypes = this.flattenFollowSet();\n      let nextToken = this.LA(1);\n      let k = 2;\n      while (true) {\n        const foundMatch = find$1(allPossibleReSyncTokTypes, resyncTokType => {\n          const canMatch = tokenMatcher(nextToken, resyncTokType);\n          return canMatch;\n        });\n        if (foundMatch !== void 0) {\n          return foundMatch;\n        }\n        nextToken = this.LA(k);\n        k++;\n      }\n    }\n    getCurrFollowKey() {\n      if (this.RULE_STACK.length === 1) {\n        return EOF_FOLLOW_KEY;\n      }\n      const currRuleShortName = this.getLastExplicitRuleShortName();\n      const currRuleIdx = this.getLastExplicitRuleOccurrenceIndex();\n      const prevRuleShortName = this.getPreviousExplicitRuleShortName();\n      return {\n        ruleName: this.shortRuleNameToFullName(currRuleShortName),\n        idxInCallingRule: currRuleIdx,\n        inRule: this.shortRuleNameToFullName(prevRuleShortName)\n      };\n    }\n    buildFullFollowKeyStack() {\n      const explicitRuleStack = this.RULE_STACK;\n      const explicitOccurrenceStack = this.RULE_OCCURRENCE_STACK;\n      return map(explicitRuleStack, (ruleName, idx) => {\n        if (idx === 0) {\n          return EOF_FOLLOW_KEY;\n        }\n        return {\n          ruleName: this.shortRuleNameToFullName(ruleName),\n          idxInCallingRule: explicitOccurrenceStack[idx],\n          inRule: this.shortRuleNameToFullName(explicitRuleStack[idx - 1])\n        };\n      });\n    }\n    flattenFollowSet() {\n      const followStack = map(this.buildFullFollowKeyStack(), currKey => {\n        return this.getFollowSetFromFollowKey(currKey);\n      });\n      return flatten(followStack);\n    }\n    getFollowSetFromFollowKey(followKey) {\n      if (followKey === EOF_FOLLOW_KEY) {\n        return [EOF];\n      }\n      const followName = followKey.ruleName + followKey.idxInCallingRule + IN + followKey.inRule;\n      return this.resyncFollows[followName];\n    }\n    // It does not make any sense to include a virtual EOF token in the list of resynced tokens\n    // as EOF does not really exist and thus does not contain any useful information (line/column numbers)\n    addToResyncTokens(token, resyncTokens) {\n      if (!this.tokenMatcher(token, EOF)) {\n        resyncTokens.push(token);\n      }\n      return resyncTokens;\n    }\n    reSyncTo(tokType) {\n      const resyncedTokens = [];\n      let nextTok = this.LA(1);\n      while (this.tokenMatcher(nextTok, tokType) === false) {\n        nextTok = this.SKIP_TOKEN();\n        this.addToResyncTokens(nextTok, resyncedTokens);\n      }\n      return dropRight(resyncedTokens);\n    }\n    attemptInRepetitionRecovery(prodFunc, args, lookaheadFunc, dslMethodIdx, prodOccurrence, nextToksWalker, notStuck) {}\n    getCurrentGrammarPath(tokType, tokIdxInRule) {\n      const pathRuleStack = this.getHumanReadableRuleStack();\n      const pathOccurrenceStack = clone(this.RULE_OCCURRENCE_STACK);\n      const grammarPath = {\n        ruleStack: pathRuleStack,\n        occurrenceStack: pathOccurrenceStack,\n        lastTok: tokType,\n        lastTokOccurrence: tokIdxInRule\n      };\n      return grammarPath;\n    }\n    getHumanReadableRuleStack() {\n      return map(this.RULE_STACK, currShortName => this.shortRuleNameToFullName(currShortName));\n    }\n  }\n  function attemptInRepetitionRecovery(prodFunc, args, lookaheadFunc, dslMethodIdx, prodOccurrence, nextToksWalker, notStuck) {\n    const key = this.getKeyForAutomaticLookahead(dslMethodIdx, prodOccurrence);\n    let firstAfterRepInfo = this.firstAfterRepMap[key];\n    if (firstAfterRepInfo === void 0) {\n      const currRuleName = this.getCurrRuleFullName();\n      const ruleGrammar = this.getGAstProductions()[currRuleName];\n      const walker = new nextToksWalker(ruleGrammar, prodOccurrence);\n      firstAfterRepInfo = walker.startWalking();\n      this.firstAfterRepMap[key] = firstAfterRepInfo;\n    }\n    let expectTokAfterLastMatch = firstAfterRepInfo.token;\n    let nextTokIdx = firstAfterRepInfo.occurrence;\n    const isEndOfRule = firstAfterRepInfo.isEndOfRule;\n    if (this.RULE_STACK.length === 1 && isEndOfRule && expectTokAfterLastMatch === void 0) {\n      expectTokAfterLastMatch = EOF;\n      nextTokIdx = 1;\n    }\n    if (expectTokAfterLastMatch === void 0 || nextTokIdx === void 0) {\n      return;\n    }\n    if (this.shouldInRepetitionRecoveryBeTried(expectTokAfterLastMatch, nextTokIdx, notStuck)) {\n      this.tryInRepetitionRecovery(prodFunc, args, lookaheadFunc, expectTokAfterLastMatch);\n    }\n  }\n  const BITS_FOR_METHOD_TYPE = 4;\n  const BITS_FOR_OCCURRENCE_IDX = 8;\n  const OR_IDX = 1 << BITS_FOR_OCCURRENCE_IDX;\n  const OPTION_IDX = 2 << BITS_FOR_OCCURRENCE_IDX;\n  const MANY_IDX = 3 << BITS_FOR_OCCURRENCE_IDX;\n  const AT_LEAST_ONE_IDX = 4 << BITS_FOR_OCCURRENCE_IDX;\n  const MANY_SEP_IDX = 5 << BITS_FOR_OCCURRENCE_IDX;\n  const AT_LEAST_ONE_SEP_IDX = 6 << BITS_FOR_OCCURRENCE_IDX;\n  function getKeyForAutomaticLookahead(ruleIdx, dslMethodIdx, occurrence) {\n    return occurrence | dslMethodIdx | ruleIdx;\n  }\n  class LLkLookaheadStrategy {\n    constructor(options) {\n      var _a;\n      this.maxLookahead = (_a = options === null || options === void 0 ? void 0 : options.maxLookahead) !== null && _a !== void 0 ? _a : DEFAULT_PARSER_CONFIG.maxLookahead;\n    }\n    validate(options) {\n      const leftRecursionErrors = this.validateNoLeftRecursion(options.rules);\n      if (isEmpty(leftRecursionErrors)) {\n        const emptyAltErrors = this.validateEmptyOrAlternatives(options.rules);\n        const ambiguousAltsErrors = this.validateAmbiguousAlternationAlternatives(options.rules, this.maxLookahead);\n        const emptyRepetitionErrors = this.validateSomeNonEmptyLookaheadPath(options.rules, this.maxLookahead);\n        const allErrors = [...leftRecursionErrors, ...emptyAltErrors, ...ambiguousAltsErrors, ...emptyRepetitionErrors];\n        return allErrors;\n      }\n      return leftRecursionErrors;\n    }\n    validateNoLeftRecursion(rules) {\n      return flatMap(rules, currTopRule => validateNoLeftRecursion(currTopRule, currTopRule, defaultGrammarValidatorErrorProvider));\n    }\n    validateEmptyOrAlternatives(rules) {\n      return flatMap(rules, currTopRule => validateEmptyOrAlternative(currTopRule, defaultGrammarValidatorErrorProvider));\n    }\n    validateAmbiguousAlternationAlternatives(rules, maxLookahead) {\n      return flatMap(rules, currTopRule => validateAmbiguousAlternationAlternatives(currTopRule, maxLookahead, defaultGrammarValidatorErrorProvider));\n    }\n    validateSomeNonEmptyLookaheadPath(rules, maxLookahead) {\n      return validateSomeNonEmptyLookaheadPath(rules, maxLookahead, defaultGrammarValidatorErrorProvider);\n    }\n    buildLookaheadForAlternation(options) {\n      return buildLookaheadFuncForOr(options.prodOccurrence, options.rule, options.maxLookahead, options.hasPredicates, options.dynamicTokensEnabled, buildAlternativesLookAheadFunc);\n    }\n    buildLookaheadForOptional(options) {\n      return buildLookaheadFuncForOptionalProd(options.prodOccurrence, options.rule, options.maxLookahead, options.dynamicTokensEnabled, getProdType(options.prodType), buildSingleAlternativeLookaheadFunction);\n    }\n  }\n  class LooksAhead {\n    initLooksAhead(config) {\n      this.dynamicTokensEnabled = has(config, \"dynamicTokensEnabled\") ? config.dynamicTokensEnabled : DEFAULT_PARSER_CONFIG.dynamicTokensEnabled;\n      this.maxLookahead = has(config, \"maxLookahead\") ? config.maxLookahead : DEFAULT_PARSER_CONFIG.maxLookahead;\n      this.lookaheadStrategy = has(config, \"lookaheadStrategy\") ? config.lookaheadStrategy : new LLkLookaheadStrategy({\n        maxLookahead: this.maxLookahead\n      });\n      this.lookAheadFuncsCache = /* @__PURE__ */new Map();\n    }\n    preComputeLookaheadFunctions(rules) {\n      forEach(rules, currRule => {\n        this.TRACE_INIT(\"\".concat(currRule.name, \" Rule Lookahead\"), () => {\n          const {\n            alternation,\n            repetition,\n            option,\n            repetitionMandatory,\n            repetitionMandatoryWithSeparator,\n            repetitionWithSeparator\n          } = collectMethods(currRule);\n          forEach(alternation, currProd => {\n            const prodIdx = currProd.idx === 0 ? \"\" : currProd.idx;\n            this.TRACE_INIT(\"\".concat(getProductionDslName(currProd)).concat(prodIdx), () => {\n              const laFunc = this.lookaheadStrategy.buildLookaheadForAlternation({\n                prodOccurrence: currProd.idx,\n                rule: currRule,\n                maxLookahead: currProd.maxLookahead || this.maxLookahead,\n                hasPredicates: currProd.hasPredicates,\n                dynamicTokensEnabled: this.dynamicTokensEnabled\n              });\n              const key = getKeyForAutomaticLookahead(this.fullRuleNameToShort[currRule.name], OR_IDX, currProd.idx);\n              this.setLaFuncCache(key, laFunc);\n            });\n          });\n          forEach(repetition, currProd => {\n            this.computeLookaheadFunc(currRule, currProd.idx, MANY_IDX, \"Repetition\", currProd.maxLookahead, getProductionDslName(currProd));\n          });\n          forEach(option, currProd => {\n            this.computeLookaheadFunc(currRule, currProd.idx, OPTION_IDX, \"Option\", currProd.maxLookahead, getProductionDslName(currProd));\n          });\n          forEach(repetitionMandatory, currProd => {\n            this.computeLookaheadFunc(currRule, currProd.idx, AT_LEAST_ONE_IDX, \"RepetitionMandatory\", currProd.maxLookahead, getProductionDslName(currProd));\n          });\n          forEach(repetitionMandatoryWithSeparator, currProd => {\n            this.computeLookaheadFunc(currRule, currProd.idx, AT_LEAST_ONE_SEP_IDX, \"RepetitionMandatoryWithSeparator\", currProd.maxLookahead, getProductionDslName(currProd));\n          });\n          forEach(repetitionWithSeparator, currProd => {\n            this.computeLookaheadFunc(currRule, currProd.idx, MANY_SEP_IDX, \"RepetitionWithSeparator\", currProd.maxLookahead, getProductionDslName(currProd));\n          });\n        });\n      });\n    }\n    computeLookaheadFunc(rule, prodOccurrence, prodKey, prodType, prodMaxLookahead, dslMethodName) {\n      this.TRACE_INIT(\"\".concat(dslMethodName).concat(prodOccurrence === 0 ? \"\" : prodOccurrence), () => {\n        const laFunc = this.lookaheadStrategy.buildLookaheadForOptional({\n          prodOccurrence,\n          rule,\n          maxLookahead: prodMaxLookahead || this.maxLookahead,\n          dynamicTokensEnabled: this.dynamicTokensEnabled,\n          prodType\n        });\n        const key = getKeyForAutomaticLookahead(this.fullRuleNameToShort[rule.name], prodKey, prodOccurrence);\n        this.setLaFuncCache(key, laFunc);\n      });\n    }\n    // this actually returns a number, but it is always used as a string (object prop key)\n    getKeyForAutomaticLookahead(dslMethodIdx, occurrence) {\n      const currRuleShortName = this.getLastExplicitRuleShortName();\n      return getKeyForAutomaticLookahead(currRuleShortName, dslMethodIdx, occurrence);\n    }\n    getLaFuncFromCache(key) {\n      return this.lookAheadFuncsCache.get(key);\n    }\n    /* istanbul ignore next */\n    setLaFuncCache(key, value) {\n      this.lookAheadFuncsCache.set(key, value);\n    }\n  }\n  class DslMethodsCollectorVisitor extends GAstVisitor {\n    constructor() {\n      super(...arguments);\n      this.dslMethods = {\n        option: [],\n        alternation: [],\n        repetition: [],\n        repetitionWithSeparator: [],\n        repetitionMandatory: [],\n        repetitionMandatoryWithSeparator: []\n      };\n    }\n    reset() {\n      this.dslMethods = {\n        option: [],\n        alternation: [],\n        repetition: [],\n        repetitionWithSeparator: [],\n        repetitionMandatory: [],\n        repetitionMandatoryWithSeparator: []\n      };\n    }\n    visitOption(option) {\n      this.dslMethods.option.push(option);\n    }\n    visitRepetitionWithSeparator(manySep) {\n      this.dslMethods.repetitionWithSeparator.push(manySep);\n    }\n    visitRepetitionMandatory(atLeastOne) {\n      this.dslMethods.repetitionMandatory.push(atLeastOne);\n    }\n    visitRepetitionMandatoryWithSeparator(atLeastOneSep) {\n      this.dslMethods.repetitionMandatoryWithSeparator.push(atLeastOneSep);\n    }\n    visitRepetition(many) {\n      this.dslMethods.repetition.push(many);\n    }\n    visitAlternation(or) {\n      this.dslMethods.alternation.push(or);\n    }\n  }\n  const collectorVisitor = new DslMethodsCollectorVisitor();\n  function collectMethods(rule) {\n    collectorVisitor.reset();\n    rule.accept(collectorVisitor);\n    const dslMethods = collectorVisitor.dslMethods;\n    collectorVisitor.reset();\n    return dslMethods;\n  }\n  function setNodeLocationOnlyOffset(currNodeLocation, newLocationInfo) {\n    if (isNaN(currNodeLocation.startOffset) === true) {\n      currNodeLocation.startOffset = newLocationInfo.startOffset;\n      currNodeLocation.endOffset = newLocationInfo.endOffset;\n    } else if (currNodeLocation.endOffset < newLocationInfo.endOffset === true) {\n      currNodeLocation.endOffset = newLocationInfo.endOffset;\n    }\n  }\n  function setNodeLocationFull(currNodeLocation, newLocationInfo) {\n    if (isNaN(currNodeLocation.startOffset) === true) {\n      currNodeLocation.startOffset = newLocationInfo.startOffset;\n      currNodeLocation.startColumn = newLocationInfo.startColumn;\n      currNodeLocation.startLine = newLocationInfo.startLine;\n      currNodeLocation.endOffset = newLocationInfo.endOffset;\n      currNodeLocation.endColumn = newLocationInfo.endColumn;\n      currNodeLocation.endLine = newLocationInfo.endLine;\n    } else if (currNodeLocation.endOffset < newLocationInfo.endOffset === true) {\n      currNodeLocation.endOffset = newLocationInfo.endOffset;\n      currNodeLocation.endColumn = newLocationInfo.endColumn;\n      currNodeLocation.endLine = newLocationInfo.endLine;\n    }\n  }\n  function addTerminalToCst(node, token, tokenTypeName) {\n    if (node.children[tokenTypeName] === void 0) {\n      node.children[tokenTypeName] = [token];\n    } else {\n      node.children[tokenTypeName].push(token);\n    }\n  }\n  function addNoneTerminalToCst(node, ruleName, ruleResult) {\n    if (node.children[ruleName] === void 0) {\n      node.children[ruleName] = [ruleResult];\n    } else {\n      node.children[ruleName].push(ruleResult);\n    }\n  }\n  const NAME = \"name\";\n  function defineNameProp(obj, nameValue) {\n    Object.defineProperty(obj, NAME, {\n      enumerable: false,\n      configurable: true,\n      writable: false,\n      value: nameValue\n    });\n  }\n  function defaultVisit(ctx, param) {\n    const childrenNames = keys(ctx);\n    const childrenNamesLength = childrenNames.length;\n    for (let i = 0; i < childrenNamesLength; i++) {\n      const currChildName = childrenNames[i];\n      const currChildArray = ctx[currChildName];\n      const currChildArrayLength = currChildArray.length;\n      for (let j = 0; j < currChildArrayLength; j++) {\n        const currChild = currChildArray[j];\n        if (currChild.tokenTypeIdx === void 0) {\n          this[currChild.name](currChild.children, param);\n        }\n      }\n    }\n  }\n  function createBaseSemanticVisitorConstructor(grammarName, ruleNames) {\n    const derivedConstructor = function () {};\n    defineNameProp(derivedConstructor, grammarName + \"BaseSemantics\");\n    const semanticProto = {\n      visit: function (cstNode, param) {\n        if (isArray$1(cstNode)) {\n          cstNode = cstNode[0];\n        }\n        if (isUndefined(cstNode)) {\n          return void 0;\n        }\n        return this[cstNode.name](cstNode.children, param);\n      },\n      validateVisitor: function () {\n        const semanticDefinitionErrors = validateVisitor(this, ruleNames);\n        if (!isEmpty(semanticDefinitionErrors)) {\n          const errorMessages = map(semanticDefinitionErrors, currDefError => currDefError.msg);\n          throw Error(\"Errors Detected in CST Visitor <\".concat(this.constructor.name, \">:\\n\\t\").concat(errorMessages.join(\"\\n\\n\").replace(/\\n/g, \"\\n\t\")));\n        }\n      }\n    };\n    derivedConstructor.prototype = semanticProto;\n    derivedConstructor.prototype.constructor = derivedConstructor;\n    derivedConstructor._RULE_NAMES = ruleNames;\n    return derivedConstructor;\n  }\n  function createBaseVisitorConstructorWithDefaults(grammarName, ruleNames, baseConstructor) {\n    const derivedConstructor = function () {};\n    defineNameProp(derivedConstructor, grammarName + \"BaseSemanticsWithDefaults\");\n    const withDefaultsProto = Object.create(baseConstructor.prototype);\n    forEach(ruleNames, ruleName => {\n      withDefaultsProto[ruleName] = defaultVisit;\n    });\n    derivedConstructor.prototype = withDefaultsProto;\n    derivedConstructor.prototype.constructor = derivedConstructor;\n    return derivedConstructor;\n  }\n  var CstVisitorDefinitionError;\n  (function (CstVisitorDefinitionError2) {\n    CstVisitorDefinitionError2[CstVisitorDefinitionError2[\"REDUNDANT_METHOD\"] = 0] = \"REDUNDANT_METHOD\";\n    CstVisitorDefinitionError2[CstVisitorDefinitionError2[\"MISSING_METHOD\"] = 1] = \"MISSING_METHOD\";\n  })(CstVisitorDefinitionError || (CstVisitorDefinitionError = {}));\n  function validateVisitor(visitorInstance, ruleNames) {\n    const missingErrors = validateMissingCstMethods(visitorInstance, ruleNames);\n    return missingErrors;\n  }\n  function validateMissingCstMethods(visitorInstance, ruleNames) {\n    const missingRuleNames = filter(ruleNames, currRuleName => {\n      return isFunction(visitorInstance[currRuleName]) === false;\n    });\n    const errors = map(missingRuleNames, currRuleName => {\n      return {\n        msg: \"Missing visitor method: <\".concat(currRuleName, \"> on \").concat(visitorInstance.constructor.name, \" CST Visitor.\"),\n        type: CstVisitorDefinitionError.MISSING_METHOD,\n        methodName: currRuleName\n      };\n    });\n    return compact(errors);\n  }\n  class TreeBuilder {\n    initTreeBuilder(config) {\n      this.CST_STACK = [];\n      this.outputCst = config.outputCst;\n      this.nodeLocationTracking = has(config, \"nodeLocationTracking\") ? config.nodeLocationTracking : DEFAULT_PARSER_CONFIG.nodeLocationTracking;\n      if (!this.outputCst) {\n        this.cstInvocationStateUpdate = noop;\n        this.cstFinallyStateUpdate = noop;\n        this.cstPostTerminal = noop;\n        this.cstPostNonTerminal = noop;\n        this.cstPostRule = noop;\n      } else {\n        if (/full/i.test(this.nodeLocationTracking)) {\n          if (this.recoveryEnabled) {\n            this.setNodeLocationFromToken = setNodeLocationFull;\n            this.setNodeLocationFromNode = setNodeLocationFull;\n            this.cstPostRule = noop;\n            this.setInitialNodeLocation = this.setInitialNodeLocationFullRecovery;\n          } else {\n            this.setNodeLocationFromToken = noop;\n            this.setNodeLocationFromNode = noop;\n            this.cstPostRule = this.cstPostRuleFull;\n            this.setInitialNodeLocation = this.setInitialNodeLocationFullRegular;\n          }\n        } else if (/onlyOffset/i.test(this.nodeLocationTracking)) {\n          if (this.recoveryEnabled) {\n            this.setNodeLocationFromToken = setNodeLocationOnlyOffset;\n            this.setNodeLocationFromNode = setNodeLocationOnlyOffset;\n            this.cstPostRule = noop;\n            this.setInitialNodeLocation = this.setInitialNodeLocationOnlyOffsetRecovery;\n          } else {\n            this.setNodeLocationFromToken = noop;\n            this.setNodeLocationFromNode = noop;\n            this.cstPostRule = this.cstPostRuleOnlyOffset;\n            this.setInitialNodeLocation = this.setInitialNodeLocationOnlyOffsetRegular;\n          }\n        } else if (/none/i.test(this.nodeLocationTracking)) {\n          this.setNodeLocationFromToken = noop;\n          this.setNodeLocationFromNode = noop;\n          this.cstPostRule = noop;\n          this.setInitialNodeLocation = noop;\n        } else {\n          throw Error(\"Invalid <nodeLocationTracking> config option: \\\"\".concat(config.nodeLocationTracking, \"\\\"\"));\n        }\n      }\n    }\n    setInitialNodeLocationOnlyOffsetRecovery(cstNode) {\n      cstNode.location = {\n        startOffset: NaN,\n        endOffset: NaN\n      };\n    }\n    setInitialNodeLocationOnlyOffsetRegular(cstNode) {\n      cstNode.location = {\n        // without error recovery the starting Location of a new CstNode is guaranteed\n        // To be the next Token's startOffset (for valid inputs).\n        // For invalid inputs there won't be any CSTOutput so this potential\n        // inaccuracy does not matter\n        startOffset: this.LA(1).startOffset,\n        endOffset: NaN\n      };\n    }\n    setInitialNodeLocationFullRecovery(cstNode) {\n      cstNode.location = {\n        startOffset: NaN,\n        startLine: NaN,\n        startColumn: NaN,\n        endOffset: NaN,\n        endLine: NaN,\n        endColumn: NaN\n      };\n    }\n    /**\r\n         *  @see setInitialNodeLocationOnlyOffsetRegular for explanation why this work\r\n    \r\n         * @param cstNode\r\n         */\n    setInitialNodeLocationFullRegular(cstNode) {\n      const nextToken = this.LA(1);\n      cstNode.location = {\n        startOffset: nextToken.startOffset,\n        startLine: nextToken.startLine,\n        startColumn: nextToken.startColumn,\n        endOffset: NaN,\n        endLine: NaN,\n        endColumn: NaN\n      };\n    }\n    cstInvocationStateUpdate(fullRuleName) {\n      const cstNode = {\n        name: fullRuleName,\n        children: /* @__PURE__ */Object.create(null)\n      };\n      this.setInitialNodeLocation(cstNode);\n      this.CST_STACK.push(cstNode);\n    }\n    cstFinallyStateUpdate() {\n      this.CST_STACK.pop();\n    }\n    cstPostRuleFull(ruleCstNode) {\n      const prevToken = this.LA(0);\n      const loc = ruleCstNode.location;\n      if (loc.startOffset <= prevToken.startOffset === true) {\n        loc.endOffset = prevToken.endOffset;\n        loc.endLine = prevToken.endLine;\n        loc.endColumn = prevToken.endColumn;\n      } else {\n        loc.startOffset = NaN;\n        loc.startLine = NaN;\n        loc.startColumn = NaN;\n      }\n    }\n    cstPostRuleOnlyOffset(ruleCstNode) {\n      const prevToken = this.LA(0);\n      const loc = ruleCstNode.location;\n      if (loc.startOffset <= prevToken.startOffset === true) {\n        loc.endOffset = prevToken.endOffset;\n      } else {\n        loc.startOffset = NaN;\n      }\n    }\n    cstPostTerminal(key, consumedToken) {\n      const rootCst = this.CST_STACK[this.CST_STACK.length - 1];\n      addTerminalToCst(rootCst, consumedToken, key);\n      this.setNodeLocationFromToken(rootCst.location, consumedToken);\n    }\n    cstPostNonTerminal(ruleCstResult, ruleName) {\n      const preCstNode = this.CST_STACK[this.CST_STACK.length - 1];\n      addNoneTerminalToCst(preCstNode, ruleName, ruleCstResult);\n      this.setNodeLocationFromNode(preCstNode.location, ruleCstResult.location);\n    }\n    getBaseCstVisitorConstructor() {\n      if (isUndefined(this.baseCstVisitorConstructor)) {\n        const newBaseCstVisitorConstructor = createBaseSemanticVisitorConstructor(this.className, keys(this.gastProductionsCache));\n        this.baseCstVisitorConstructor = newBaseCstVisitorConstructor;\n        return newBaseCstVisitorConstructor;\n      }\n      return this.baseCstVisitorConstructor;\n    }\n    getBaseCstVisitorConstructorWithDefaults() {\n      if (isUndefined(this.baseCstVisitorWithDefaultsConstructor)) {\n        const newConstructor = createBaseVisitorConstructorWithDefaults(this.className, keys(this.gastProductionsCache), this.getBaseCstVisitorConstructor());\n        this.baseCstVisitorWithDefaultsConstructor = newConstructor;\n        return newConstructor;\n      }\n      return this.baseCstVisitorWithDefaultsConstructor;\n    }\n    getLastExplicitRuleShortName() {\n      const ruleStack = this.RULE_STACK;\n      return ruleStack[ruleStack.length - 1];\n    }\n    getPreviousExplicitRuleShortName() {\n      const ruleStack = this.RULE_STACK;\n      return ruleStack[ruleStack.length - 2];\n    }\n    getLastExplicitRuleOccurrenceIndex() {\n      const occurrenceStack = this.RULE_OCCURRENCE_STACK;\n      return occurrenceStack[occurrenceStack.length - 1];\n    }\n  }\n  class LexerAdapter {\n    initLexerAdapter() {\n      this.tokVector = [];\n      this.tokVectorLength = 0;\n      this.currIdx = -1;\n    }\n    set input(newInput) {\n      if (this.selfAnalysisDone !== true) {\n        throw Error(\"Missing <performSelfAnalysis> invocation at the end of the Parser's constructor.\");\n      }\n      this.reset();\n      this.tokVector = newInput;\n      this.tokVectorLength = newInput.length;\n    }\n    get input() {\n      return this.tokVector;\n    }\n    // skips a token and returns the next token\n    SKIP_TOKEN() {\n      if (this.currIdx <= this.tokVector.length - 2) {\n        this.consumeToken();\n        return this.LA(1);\n      } else {\n        return END_OF_FILE;\n      }\n    }\n    // Lexer (accessing Token vector) related methods which can be overridden to implement lazy lexers\n    // or lexers dependent on parser context.\n    LA(howMuch) {\n      const soughtIdx = this.currIdx + howMuch;\n      if (soughtIdx < 0 || this.tokVectorLength <= soughtIdx) {\n        return END_OF_FILE;\n      } else {\n        return this.tokVector[soughtIdx];\n      }\n    }\n    consumeToken() {\n      this.currIdx++;\n    }\n    exportLexerState() {\n      return this.currIdx;\n    }\n    importLexerState(newState) {\n      this.currIdx = newState;\n    }\n    resetLexerState() {\n      this.currIdx = -1;\n    }\n    moveToTerminatedState() {\n      this.currIdx = this.tokVector.length - 1;\n    }\n    getLexerPosition() {\n      return this.exportLexerState();\n    }\n  }\n  class RecognizerApi {\n    ACTION(impl) {\n      return impl.call(this);\n    }\n    consume(idx, tokType, options) {\n      return this.consumeInternal(tokType, idx, options);\n    }\n    subrule(idx, ruleToCall, options) {\n      return this.subruleInternal(ruleToCall, idx, options);\n    }\n    option(idx, actionORMethodDef) {\n      return this.optionInternal(actionORMethodDef, idx);\n    }\n    or(idx, altsOrOpts) {\n      return this.orInternal(altsOrOpts, idx);\n    }\n    many(idx, actionORMethodDef) {\n      return this.manyInternal(idx, actionORMethodDef);\n    }\n    atLeastOne(idx, actionORMethodDef) {\n      return this.atLeastOneInternal(idx, actionORMethodDef);\n    }\n    CONSUME(tokType, options) {\n      return this.consumeInternal(tokType, 0, options);\n    }\n    CONSUME1(tokType, options) {\n      return this.consumeInternal(tokType, 1, options);\n    }\n    CONSUME2(tokType, options) {\n      return this.consumeInternal(tokType, 2, options);\n    }\n    CONSUME3(tokType, options) {\n      return this.consumeInternal(tokType, 3, options);\n    }\n    CONSUME4(tokType, options) {\n      return this.consumeInternal(tokType, 4, options);\n    }\n    CONSUME5(tokType, options) {\n      return this.consumeInternal(tokType, 5, options);\n    }\n    CONSUME6(tokType, options) {\n      return this.consumeInternal(tokType, 6, options);\n    }\n    CONSUME7(tokType, options) {\n      return this.consumeInternal(tokType, 7, options);\n    }\n    CONSUME8(tokType, options) {\n      return this.consumeInternal(tokType, 8, options);\n    }\n    CONSUME9(tokType, options) {\n      return this.consumeInternal(tokType, 9, options);\n    }\n    SUBRULE(ruleToCall, options) {\n      return this.subruleInternal(ruleToCall, 0, options);\n    }\n    SUBRULE1(ruleToCall, options) {\n      return this.subruleInternal(ruleToCall, 1, options);\n    }\n    SUBRULE2(ruleToCall, options) {\n      return this.subruleInternal(ruleToCall, 2, options);\n    }\n    SUBRULE3(ruleToCall, options) {\n      return this.subruleInternal(ruleToCall, 3, options);\n    }\n    SUBRULE4(ruleToCall, options) {\n      return this.subruleInternal(ruleToCall, 4, options);\n    }\n    SUBRULE5(ruleToCall, options) {\n      return this.subruleInternal(ruleToCall, 5, options);\n    }\n    SUBRULE6(ruleToCall, options) {\n      return this.subruleInternal(ruleToCall, 6, options);\n    }\n    SUBRULE7(ruleToCall, options) {\n      return this.subruleInternal(ruleToCall, 7, options);\n    }\n    SUBRULE8(ruleToCall, options) {\n      return this.subruleInternal(ruleToCall, 8, options);\n    }\n    SUBRULE9(ruleToCall, options) {\n      return this.subruleInternal(ruleToCall, 9, options);\n    }\n    OPTION(actionORMethodDef) {\n      return this.optionInternal(actionORMethodDef, 0);\n    }\n    OPTION1(actionORMethodDef) {\n      return this.optionInternal(actionORMethodDef, 1);\n    }\n    OPTION2(actionORMethodDef) {\n      return this.optionInternal(actionORMethodDef, 2);\n    }\n    OPTION3(actionORMethodDef) {\n      return this.optionInternal(actionORMethodDef, 3);\n    }\n    OPTION4(actionORMethodDef) {\n      return this.optionInternal(actionORMethodDef, 4);\n    }\n    OPTION5(actionORMethodDef) {\n      return this.optionInternal(actionORMethodDef, 5);\n    }\n    OPTION6(actionORMethodDef) {\n      return this.optionInternal(actionORMethodDef, 6);\n    }\n    OPTION7(actionORMethodDef) {\n      return this.optionInternal(actionORMethodDef, 7);\n    }\n    OPTION8(actionORMethodDef) {\n      return this.optionInternal(actionORMethodDef, 8);\n    }\n    OPTION9(actionORMethodDef) {\n      return this.optionInternal(actionORMethodDef, 9);\n    }\n    OR(altsOrOpts) {\n      return this.orInternal(altsOrOpts, 0);\n    }\n    OR1(altsOrOpts) {\n      return this.orInternal(altsOrOpts, 1);\n    }\n    OR2(altsOrOpts) {\n      return this.orInternal(altsOrOpts, 2);\n    }\n    OR3(altsOrOpts) {\n      return this.orInternal(altsOrOpts, 3);\n    }\n    OR4(altsOrOpts) {\n      return this.orInternal(altsOrOpts, 4);\n    }\n    OR5(altsOrOpts) {\n      return this.orInternal(altsOrOpts, 5);\n    }\n    OR6(altsOrOpts) {\n      return this.orInternal(altsOrOpts, 6);\n    }\n    OR7(altsOrOpts) {\n      return this.orInternal(altsOrOpts, 7);\n    }\n    OR8(altsOrOpts) {\n      return this.orInternal(altsOrOpts, 8);\n    }\n    OR9(altsOrOpts) {\n      return this.orInternal(altsOrOpts, 9);\n    }\n    MANY(actionORMethodDef) {\n      this.manyInternal(0, actionORMethodDef);\n    }\n    MANY1(actionORMethodDef) {\n      this.manyInternal(1, actionORMethodDef);\n    }\n    MANY2(actionORMethodDef) {\n      this.manyInternal(2, actionORMethodDef);\n    }\n    MANY3(actionORMethodDef) {\n      this.manyInternal(3, actionORMethodDef);\n    }\n    MANY4(actionORMethodDef) {\n      this.manyInternal(4, actionORMethodDef);\n    }\n    MANY5(actionORMethodDef) {\n      this.manyInternal(5, actionORMethodDef);\n    }\n    MANY6(actionORMethodDef) {\n      this.manyInternal(6, actionORMethodDef);\n    }\n    MANY7(actionORMethodDef) {\n      this.manyInternal(7, actionORMethodDef);\n    }\n    MANY8(actionORMethodDef) {\n      this.manyInternal(8, actionORMethodDef);\n    }\n    MANY9(actionORMethodDef) {\n      this.manyInternal(9, actionORMethodDef);\n    }\n    MANY_SEP(options) {\n      this.manySepFirstInternal(0, options);\n    }\n    MANY_SEP1(options) {\n      this.manySepFirstInternal(1, options);\n    }\n    MANY_SEP2(options) {\n      this.manySepFirstInternal(2, options);\n    }\n    MANY_SEP3(options) {\n      this.manySepFirstInternal(3, options);\n    }\n    MANY_SEP4(options) {\n      this.manySepFirstInternal(4, options);\n    }\n    MANY_SEP5(options) {\n      this.manySepFirstInternal(5, options);\n    }\n    MANY_SEP6(options) {\n      this.manySepFirstInternal(6, options);\n    }\n    MANY_SEP7(options) {\n      this.manySepFirstInternal(7, options);\n    }\n    MANY_SEP8(options) {\n      this.manySepFirstInternal(8, options);\n    }\n    MANY_SEP9(options) {\n      this.manySepFirstInternal(9, options);\n    }\n    AT_LEAST_ONE(actionORMethodDef) {\n      this.atLeastOneInternal(0, actionORMethodDef);\n    }\n    AT_LEAST_ONE1(actionORMethodDef) {\n      return this.atLeastOneInternal(1, actionORMethodDef);\n    }\n    AT_LEAST_ONE2(actionORMethodDef) {\n      this.atLeastOneInternal(2, actionORMethodDef);\n    }\n    AT_LEAST_ONE3(actionORMethodDef) {\n      this.atLeastOneInternal(3, actionORMethodDef);\n    }\n    AT_LEAST_ONE4(actionORMethodDef) {\n      this.atLeastOneInternal(4, actionORMethodDef);\n    }\n    AT_LEAST_ONE5(actionORMethodDef) {\n      this.atLeastOneInternal(5, actionORMethodDef);\n    }\n    AT_LEAST_ONE6(actionORMethodDef) {\n      this.atLeastOneInternal(6, actionORMethodDef);\n    }\n    AT_LEAST_ONE7(actionORMethodDef) {\n      this.atLeastOneInternal(7, actionORMethodDef);\n    }\n    AT_LEAST_ONE8(actionORMethodDef) {\n      this.atLeastOneInternal(8, actionORMethodDef);\n    }\n    AT_LEAST_ONE9(actionORMethodDef) {\n      this.atLeastOneInternal(9, actionORMethodDef);\n    }\n    AT_LEAST_ONE_SEP(options) {\n      this.atLeastOneSepFirstInternal(0, options);\n    }\n    AT_LEAST_ONE_SEP1(options) {\n      this.atLeastOneSepFirstInternal(1, options);\n    }\n    AT_LEAST_ONE_SEP2(options) {\n      this.atLeastOneSepFirstInternal(2, options);\n    }\n    AT_LEAST_ONE_SEP3(options) {\n      this.atLeastOneSepFirstInternal(3, options);\n    }\n    AT_LEAST_ONE_SEP4(options) {\n      this.atLeastOneSepFirstInternal(4, options);\n    }\n    AT_LEAST_ONE_SEP5(options) {\n      this.atLeastOneSepFirstInternal(5, options);\n    }\n    AT_LEAST_ONE_SEP6(options) {\n      this.atLeastOneSepFirstInternal(6, options);\n    }\n    AT_LEAST_ONE_SEP7(options) {\n      this.atLeastOneSepFirstInternal(7, options);\n    }\n    AT_LEAST_ONE_SEP8(options) {\n      this.atLeastOneSepFirstInternal(8, options);\n    }\n    AT_LEAST_ONE_SEP9(options) {\n      this.atLeastOneSepFirstInternal(9, options);\n    }\n    RULE(name, implementation) {\n      let config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_RULE_CONFIG;\n      if (includes(this.definedRulesNames, name)) {\n        const errMsg = defaultGrammarValidatorErrorProvider.buildDuplicateRuleNameError({\n          topLevelRule: name,\n          grammarName: this.className\n        });\n        const error = {\n          message: errMsg,\n          type: ParserDefinitionErrorType.DUPLICATE_RULE_NAME,\n          ruleName: name\n        };\n        this.definitionErrors.push(error);\n      }\n      this.definedRulesNames.push(name);\n      const ruleImplementation = this.defineRule(name, implementation, config);\n      this[name] = ruleImplementation;\n      return ruleImplementation;\n    }\n    OVERRIDE_RULE(name, impl) {\n      let config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_RULE_CONFIG;\n      const ruleErrors = validateRuleIsOverridden(name, this.definedRulesNames, this.className);\n      this.definitionErrors = this.definitionErrors.concat(ruleErrors);\n      const ruleImplementation = this.defineRule(name, impl, config);\n      this[name] = ruleImplementation;\n      return ruleImplementation;\n    }\n    BACKTRACK(grammarRule, args) {\n      return function () {\n        this.isBackTrackingStack.push(1);\n        const orgState = this.saveRecogState();\n        try {\n          grammarRule.apply(this, args);\n          return true;\n        } catch (e) {\n          if (isRecognitionException(e)) {\n            return false;\n          } else {\n            throw e;\n          }\n        } finally {\n          this.reloadRecogState(orgState);\n          this.isBackTrackingStack.pop();\n        }\n      };\n    }\n    // GAST export APIs\n    getGAstProductions() {\n      return this.gastProductionsCache;\n    }\n    getSerializedGastProductions() {\n      return serializeGrammar(values(this.gastProductionsCache));\n    }\n  }\n  class RecognizerEngine {\n    initRecognizerEngine(tokenVocabulary, config) {\n      this.className = this.constructor.name;\n      this.shortRuleNameToFull = {};\n      this.fullRuleNameToShort = {};\n      this.ruleShortNameIdx = 256;\n      this.tokenMatcher = tokenStructuredMatcherNoCategories;\n      this.subruleIdx = 0;\n      this.definedRulesNames = [];\n      this.tokensMap = {};\n      this.isBackTrackingStack = [];\n      this.RULE_STACK = [];\n      this.RULE_OCCURRENCE_STACK = [];\n      this.gastProductionsCache = {};\n      if (has(config, \"serializedGrammar\")) {\n        throw Error(\"The Parser's configuration can no longer contain a <serializedGrammar> property.\\n\tSee: https://chevrotain.io/docs/changes/BREAKING_CHANGES.html#_6-0-0\\n\tFor Further details.\");\n      }\n      if (isArray$1(tokenVocabulary)) {\n        if (isEmpty(tokenVocabulary)) {\n          throw Error(\"A Token Vocabulary cannot be empty.\\n\tNote that the first argument for the parser constructor\\n\tis no longer a Token vector (since v4.0).\");\n        }\n        if (typeof tokenVocabulary[0].startOffset === \"number\") {\n          throw Error(\"The Parser constructor no longer accepts a token vector as the first argument.\\n\tSee: https://chevrotain.io/docs/changes/BREAKING_CHANGES.html#_4-0-0\\n\tFor Further details.\");\n        }\n      }\n      if (isArray$1(tokenVocabulary)) {\n        this.tokensMap = reduce(tokenVocabulary, (acc, tokType) => {\n          acc[tokType.name] = tokType;\n          return acc;\n        }, {});\n      } else if (has(tokenVocabulary, \"modes\") && every(flatten(values(tokenVocabulary.modes)), isTokenType)) {\n        const allTokenTypes2 = flatten(values(tokenVocabulary.modes));\n        const uniqueTokens = uniq(allTokenTypes2);\n        this.tokensMap = reduce(uniqueTokens, (acc, tokType) => {\n          acc[tokType.name] = tokType;\n          return acc;\n        }, {});\n      } else if (isObject(tokenVocabulary)) {\n        this.tokensMap = clone(tokenVocabulary);\n      } else {\n        throw new Error(\"<tokensDictionary> argument must be An Array of Token constructors, A dictionary of Token constructors or an IMultiModeLexerDefinition\");\n      }\n      this.tokensMap[\"EOF\"] = EOF;\n      const allTokenTypes = has(tokenVocabulary, \"modes\") ? flatten(values(tokenVocabulary.modes)) : values(tokenVocabulary);\n      const noTokenCategoriesUsed = every(allTokenTypes, tokenConstructor => isEmpty(tokenConstructor.categoryMatches));\n      this.tokenMatcher = noTokenCategoriesUsed ? tokenStructuredMatcherNoCategories : tokenStructuredMatcher;\n      augmentTokenTypes(values(this.tokensMap));\n    }\n    defineRule(ruleName, impl, config) {\n      if (this.selfAnalysisDone) {\n        throw Error(\"Grammar rule <\".concat(ruleName, \"> may not be defined after the 'performSelfAnalysis' method has been called'\\nMake sure that all grammar rule definitions are done before 'performSelfAnalysis' is called.\"));\n      }\n      const resyncEnabled = has(config, \"resyncEnabled\") ? config.resyncEnabled : DEFAULT_RULE_CONFIG.resyncEnabled;\n      const recoveryValueFunc = has(config, \"recoveryValueFunc\") ? config.recoveryValueFunc : DEFAULT_RULE_CONFIG.recoveryValueFunc;\n      const shortName = this.ruleShortNameIdx << BITS_FOR_METHOD_TYPE + BITS_FOR_OCCURRENCE_IDX;\n      this.ruleShortNameIdx++;\n      this.shortRuleNameToFull[shortName] = ruleName;\n      this.fullRuleNameToShort[ruleName] = shortName;\n      let invokeRuleWithTry;\n      if (this.outputCst === true) {\n        invokeRuleWithTry = function invokeRuleWithTry2() {\n          try {\n            this.ruleInvocationStateUpdate(shortName, ruleName, this.subruleIdx);\n            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n              args[_key] = arguments[_key];\n            }\n            impl.apply(this, args);\n            const cst = this.CST_STACK[this.CST_STACK.length - 1];\n            this.cstPostRule(cst);\n            return cst;\n          } catch (e) {\n            return this.invokeRuleCatch(e, resyncEnabled, recoveryValueFunc);\n          } finally {\n            this.ruleFinallyStateUpdate();\n          }\n        };\n      } else {\n        invokeRuleWithTry = function invokeRuleWithTryCst() {\n          try {\n            this.ruleInvocationStateUpdate(shortName, ruleName, this.subruleIdx);\n            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n              args[_key2] = arguments[_key2];\n            }\n            return impl.apply(this, args);\n          } catch (e) {\n            return this.invokeRuleCatch(e, resyncEnabled, recoveryValueFunc);\n          } finally {\n            this.ruleFinallyStateUpdate();\n          }\n        };\n      }\n      const wrappedGrammarRule = Object.assign(invokeRuleWithTry, {\n        ruleName,\n        originalGrammarAction: impl\n      });\n      return wrappedGrammarRule;\n    }\n    invokeRuleCatch(e, resyncEnabledConfig, recoveryValueFunc) {\n      const isFirstInvokedRule = this.RULE_STACK.length === 1;\n      const reSyncEnabled = resyncEnabledConfig && !this.isBackTracking() && this.recoveryEnabled;\n      if (isRecognitionException(e)) {\n        const recogError = e;\n        if (reSyncEnabled) {\n          const reSyncTokType = this.findReSyncTokenType();\n          if (this.isInCurrentRuleReSyncSet(reSyncTokType)) {\n            recogError.resyncedTokens = this.reSyncTo(reSyncTokType);\n            if (this.outputCst) {\n              const partialCstResult = this.CST_STACK[this.CST_STACK.length - 1];\n              partialCstResult.recoveredNode = true;\n              return partialCstResult;\n            } else {\n              return recoveryValueFunc(e);\n            }\n          } else {\n            if (this.outputCst) {\n              const partialCstResult = this.CST_STACK[this.CST_STACK.length - 1];\n              partialCstResult.recoveredNode = true;\n              recogError.partialCstResult = partialCstResult;\n            }\n            throw recogError;\n          }\n        } else if (isFirstInvokedRule) {\n          this.moveToTerminatedState();\n          return recoveryValueFunc(e);\n        } else {\n          throw recogError;\n        }\n      } else {\n        throw e;\n      }\n    }\n    // Implementation of parsing DSL\n    optionInternal(actionORMethodDef, occurrence) {\n      const key = this.getKeyForAutomaticLookahead(OPTION_IDX, occurrence);\n      return this.optionInternalLogic(actionORMethodDef, occurrence, key);\n    }\n    optionInternalLogic(actionORMethodDef, occurrence, key) {\n      let lookAheadFunc = this.getLaFuncFromCache(key);\n      let action;\n      if (typeof actionORMethodDef !== \"function\") {\n        action = actionORMethodDef.DEF;\n        const predicate = actionORMethodDef.GATE;\n        if (predicate !== void 0) {\n          const orgLookaheadFunction = lookAheadFunc;\n          lookAheadFunc = () => {\n            return predicate.call(this) && orgLookaheadFunction.call(this);\n          };\n        }\n      } else {\n        action = actionORMethodDef;\n      }\n      if (lookAheadFunc.call(this) === true) {\n        return action.call(this);\n      }\n      return void 0;\n    }\n    atLeastOneInternal(prodOccurrence, actionORMethodDef) {\n      const laKey = this.getKeyForAutomaticLookahead(AT_LEAST_ONE_IDX, prodOccurrence);\n      return this.atLeastOneInternalLogic(prodOccurrence, actionORMethodDef, laKey);\n    }\n    atLeastOneInternalLogic(prodOccurrence, actionORMethodDef, key) {\n      let lookAheadFunc = this.getLaFuncFromCache(key);\n      let action;\n      if (typeof actionORMethodDef !== \"function\") {\n        action = actionORMethodDef.DEF;\n        const predicate = actionORMethodDef.GATE;\n        if (predicate !== void 0) {\n          const orgLookaheadFunction = lookAheadFunc;\n          lookAheadFunc = () => {\n            return predicate.call(this) && orgLookaheadFunction.call(this);\n          };\n        }\n      } else {\n        action = actionORMethodDef;\n      }\n      if (lookAheadFunc.call(this) === true) {\n        let notStuck = this.doSingleRepetition(action);\n        while (lookAheadFunc.call(this) === true && notStuck === true) {\n          notStuck = this.doSingleRepetition(action);\n        }\n      } else {\n        throw this.raiseEarlyExitException(prodOccurrence, PROD_TYPE.REPETITION_MANDATORY, actionORMethodDef.ERR_MSG);\n      }\n      this.attemptInRepetitionRecovery(this.atLeastOneInternal, [prodOccurrence, actionORMethodDef], lookAheadFunc, AT_LEAST_ONE_IDX, prodOccurrence, NextTerminalAfterAtLeastOneWalker);\n    }\n    atLeastOneSepFirstInternal(prodOccurrence, options) {\n      const laKey = this.getKeyForAutomaticLookahead(AT_LEAST_ONE_SEP_IDX, prodOccurrence);\n      this.atLeastOneSepFirstInternalLogic(prodOccurrence, options, laKey);\n    }\n    atLeastOneSepFirstInternalLogic(prodOccurrence, options, key) {\n      const action = options.DEF;\n      const separator = options.SEP;\n      const firstIterationLookaheadFunc = this.getLaFuncFromCache(key);\n      if (firstIterationLookaheadFunc.call(this) === true) {\n        action.call(this);\n        const separatorLookAheadFunc = () => {\n          return this.tokenMatcher(this.LA(1), separator);\n        };\n        while (this.tokenMatcher(this.LA(1), separator) === true) {\n          this.CONSUME(separator);\n          action.call(this);\n        }\n        this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [prodOccurrence, separator, separatorLookAheadFunc, action, NextTerminalAfterAtLeastOneSepWalker], separatorLookAheadFunc, AT_LEAST_ONE_SEP_IDX, prodOccurrence, NextTerminalAfterAtLeastOneSepWalker);\n      } else {\n        throw this.raiseEarlyExitException(prodOccurrence, PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR, options.ERR_MSG);\n      }\n    }\n    manyInternal(prodOccurrence, actionORMethodDef) {\n      const laKey = this.getKeyForAutomaticLookahead(MANY_IDX, prodOccurrence);\n      return this.manyInternalLogic(prodOccurrence, actionORMethodDef, laKey);\n    }\n    manyInternalLogic(prodOccurrence, actionORMethodDef, key) {\n      let lookaheadFunction = this.getLaFuncFromCache(key);\n      let action;\n      if (typeof actionORMethodDef !== \"function\") {\n        action = actionORMethodDef.DEF;\n        const predicate = actionORMethodDef.GATE;\n        if (predicate !== void 0) {\n          const orgLookaheadFunction = lookaheadFunction;\n          lookaheadFunction = () => {\n            return predicate.call(this) && orgLookaheadFunction.call(this);\n          };\n        }\n      } else {\n        action = actionORMethodDef;\n      }\n      let notStuck = true;\n      while (lookaheadFunction.call(this) === true && notStuck === true) {\n        notStuck = this.doSingleRepetition(action);\n      }\n      this.attemptInRepetitionRecovery(this.manyInternal, [prodOccurrence, actionORMethodDef], lookaheadFunction, MANY_IDX, prodOccurrence, NextTerminalAfterManyWalker,\n      // The notStuck parameter is only relevant when \"attemptInRepetitionRecovery\"\n      // is invoked from manyInternal, in the MANY_SEP case and AT_LEAST_ONE[_SEP]\n      // An infinite loop cannot occur as:\n      // - Either the lookahead is guaranteed to consume something (Single Token Separator)\n      // - AT_LEAST_ONE by definition is guaranteed to consume something (or error out).\n      notStuck);\n    }\n    manySepFirstInternal(prodOccurrence, options) {\n      const laKey = this.getKeyForAutomaticLookahead(MANY_SEP_IDX, prodOccurrence);\n      this.manySepFirstInternalLogic(prodOccurrence, options, laKey);\n    }\n    manySepFirstInternalLogic(prodOccurrence, options, key) {\n      const action = options.DEF;\n      const separator = options.SEP;\n      const firstIterationLaFunc = this.getLaFuncFromCache(key);\n      if (firstIterationLaFunc.call(this) === true) {\n        action.call(this);\n        const separatorLookAheadFunc = () => {\n          return this.tokenMatcher(this.LA(1), separator);\n        };\n        while (this.tokenMatcher(this.LA(1), separator) === true) {\n          this.CONSUME(separator);\n          action.call(this);\n        }\n        this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [prodOccurrence, separator, separatorLookAheadFunc, action, NextTerminalAfterManySepWalker], separatorLookAheadFunc, MANY_SEP_IDX, prodOccurrence, NextTerminalAfterManySepWalker);\n      }\n    }\n    repetitionSepSecondInternal(prodOccurrence, separator, separatorLookAheadFunc, action, nextTerminalAfterWalker) {\n      while (separatorLookAheadFunc()) {\n        this.CONSUME(separator);\n        action.call(this);\n      }\n      this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [prodOccurrence, separator, separatorLookAheadFunc, action, nextTerminalAfterWalker], separatorLookAheadFunc, AT_LEAST_ONE_SEP_IDX, prodOccurrence, nextTerminalAfterWalker);\n    }\n    doSingleRepetition(action) {\n      const beforeIteration = this.getLexerPosition();\n      action.call(this);\n      const afterIteration = this.getLexerPosition();\n      return afterIteration > beforeIteration;\n    }\n    orInternal(altsOrOpts, occurrence) {\n      const laKey = this.getKeyForAutomaticLookahead(OR_IDX, occurrence);\n      const alts = isArray$1(altsOrOpts) ? altsOrOpts : altsOrOpts.DEF;\n      const laFunc = this.getLaFuncFromCache(laKey);\n      const altIdxToTake = laFunc.call(this, alts);\n      if (altIdxToTake !== void 0) {\n        const chosenAlternative = alts[altIdxToTake];\n        return chosenAlternative.ALT.call(this);\n      }\n      this.raiseNoAltException(occurrence, altsOrOpts.ERR_MSG);\n    }\n    ruleFinallyStateUpdate() {\n      this.RULE_STACK.pop();\n      this.RULE_OCCURRENCE_STACK.pop();\n      this.cstFinallyStateUpdate();\n      if (this.RULE_STACK.length === 0 && this.isAtEndOfInput() === false) {\n        const firstRedundantTok = this.LA(1);\n        const errMsg = this.errorMessageProvider.buildNotAllInputParsedMessage({\n          firstRedundant: firstRedundantTok,\n          ruleName: this.getCurrRuleFullName()\n        });\n        this.SAVE_ERROR(new NotAllInputParsedException(errMsg, firstRedundantTok));\n      }\n    }\n    subruleInternal(ruleToCall, idx, options) {\n      let ruleResult;\n      try {\n        const args = options !== void 0 ? options.ARGS : void 0;\n        this.subruleIdx = idx;\n        ruleResult = ruleToCall.apply(this, args);\n        this.cstPostNonTerminal(ruleResult, options !== void 0 && options.LABEL !== void 0 ? options.LABEL : ruleToCall.ruleName);\n        return ruleResult;\n      } catch (e) {\n        throw this.subruleInternalError(e, options, ruleToCall.ruleName);\n      }\n    }\n    subruleInternalError(e, options, ruleName) {\n      if (isRecognitionException(e) && e.partialCstResult !== void 0) {\n        this.cstPostNonTerminal(e.partialCstResult, options !== void 0 && options.LABEL !== void 0 ? options.LABEL : ruleName);\n        delete e.partialCstResult;\n      }\n      throw e;\n    }\n    consumeInternal(tokType, idx, options) {\n      let consumedToken;\n      try {\n        const nextToken = this.LA(1);\n        if (this.tokenMatcher(nextToken, tokType) === true) {\n          this.consumeToken();\n          consumedToken = nextToken;\n        } else {\n          this.consumeInternalError(tokType, nextToken, options);\n        }\n      } catch (eFromConsumption) {\n        consumedToken = this.consumeInternalRecovery(tokType, idx, eFromConsumption);\n      }\n      this.cstPostTerminal(options !== void 0 && options.LABEL !== void 0 ? options.LABEL : tokType.name, consumedToken);\n      return consumedToken;\n    }\n    consumeInternalError(tokType, nextToken, options) {\n      let msg;\n      const previousToken = this.LA(0);\n      if (options !== void 0 && options.ERR_MSG) {\n        msg = options.ERR_MSG;\n      } else {\n        msg = this.errorMessageProvider.buildMismatchTokenMessage({\n          expected: tokType,\n          actual: nextToken,\n          previous: previousToken,\n          ruleName: this.getCurrRuleFullName()\n        });\n      }\n      throw this.SAVE_ERROR(new MismatchedTokenException(msg, nextToken, previousToken));\n    }\n    consumeInternalRecovery(tokType, idx, eFromConsumption) {\n      if (this.recoveryEnabled &&\n      // TODO: more robust checking of the exception type. Perhaps Typescript extending expressions?\n      eFromConsumption.name === \"MismatchedTokenException\" && !this.isBackTracking()) {\n        const follows = this.getFollowsForInRuleRecovery(tokType, idx);\n        try {\n          return this.tryInRuleRecovery(tokType, follows);\n        } catch (eFromInRuleRecovery) {\n          if (eFromInRuleRecovery.name === IN_RULE_RECOVERY_EXCEPTION) {\n            throw eFromConsumption;\n          } else {\n            throw eFromInRuleRecovery;\n          }\n        }\n      } else {\n        throw eFromConsumption;\n      }\n    }\n    saveRecogState() {\n      const savedErrors = this.errors;\n      const savedRuleStack = clone(this.RULE_STACK);\n      return {\n        errors: savedErrors,\n        lexerState: this.exportLexerState(),\n        RULE_STACK: savedRuleStack,\n        CST_STACK: this.CST_STACK\n      };\n    }\n    reloadRecogState(newState) {\n      this.errors = newState.errors;\n      this.importLexerState(newState.lexerState);\n      this.RULE_STACK = newState.RULE_STACK;\n    }\n    ruleInvocationStateUpdate(shortName, fullName, idxInCallingRule) {\n      this.RULE_OCCURRENCE_STACK.push(idxInCallingRule);\n      this.RULE_STACK.push(shortName);\n      this.cstInvocationStateUpdate(fullName);\n    }\n    isBackTracking() {\n      return this.isBackTrackingStack.length !== 0;\n    }\n    getCurrRuleFullName() {\n      const shortName = this.getLastExplicitRuleShortName();\n      return this.shortRuleNameToFull[shortName];\n    }\n    shortRuleNameToFullName(shortName) {\n      return this.shortRuleNameToFull[shortName];\n    }\n    isAtEndOfInput() {\n      return this.tokenMatcher(this.LA(1), EOF);\n    }\n    reset() {\n      this.resetLexerState();\n      this.subruleIdx = 0;\n      this.isBackTrackingStack = [];\n      this.errors = [];\n      this.RULE_STACK = [];\n      this.CST_STACK = [];\n      this.RULE_OCCURRENCE_STACK = [];\n    }\n  }\n  class ErrorHandler {\n    initErrorHandler(config) {\n      this._errors = [];\n      this.errorMessageProvider = has(config, \"errorMessageProvider\") ? config.errorMessageProvider : DEFAULT_PARSER_CONFIG.errorMessageProvider;\n    }\n    SAVE_ERROR(error) {\n      if (isRecognitionException(error)) {\n        error.context = {\n          ruleStack: this.getHumanReadableRuleStack(),\n          ruleOccurrenceStack: clone(this.RULE_OCCURRENCE_STACK)\n        };\n        this._errors.push(error);\n        return error;\n      } else {\n        throw Error(\"Trying to save an Error which is not a RecognitionException\");\n      }\n    }\n    get errors() {\n      return clone(this._errors);\n    }\n    set errors(newErrors) {\n      this._errors = newErrors;\n    }\n    // TODO: consider caching the error message computed information\n    raiseEarlyExitException(occurrence, prodType, userDefinedErrMsg) {\n      const ruleName = this.getCurrRuleFullName();\n      const ruleGrammar = this.getGAstProductions()[ruleName];\n      const lookAheadPathsPerAlternative = getLookaheadPathsForOptionalProd(occurrence, ruleGrammar, prodType, this.maxLookahead);\n      const insideProdPaths = lookAheadPathsPerAlternative[0];\n      const actualTokens = [];\n      for (let i = 1; i <= this.maxLookahead; i++) {\n        actualTokens.push(this.LA(i));\n      }\n      const msg = this.errorMessageProvider.buildEarlyExitMessage({\n        expectedIterationPaths: insideProdPaths,\n        actual: actualTokens,\n        previous: this.LA(0),\n        customUserDescription: userDefinedErrMsg,\n        ruleName\n      });\n      throw this.SAVE_ERROR(new EarlyExitException(msg, this.LA(1), this.LA(0)));\n    }\n    // TODO: consider caching the error message computed information\n    raiseNoAltException(occurrence, errMsgTypes) {\n      const ruleName = this.getCurrRuleFullName();\n      const ruleGrammar = this.getGAstProductions()[ruleName];\n      const lookAheadPathsPerAlternative = getLookaheadPathsForOr(occurrence, ruleGrammar, this.maxLookahead);\n      const actualTokens = [];\n      for (let i = 1; i <= this.maxLookahead; i++) {\n        actualTokens.push(this.LA(i));\n      }\n      const previousToken = this.LA(0);\n      const errMsg = this.errorMessageProvider.buildNoViableAltMessage({\n        expectedPathsPerAlt: lookAheadPathsPerAlternative,\n        actual: actualTokens,\n        previous: previousToken,\n        customUserDescription: errMsgTypes,\n        ruleName: this.getCurrRuleFullName()\n      });\n      throw this.SAVE_ERROR(new NoViableAltException(errMsg, this.LA(1), previousToken));\n    }\n  }\n  class ContentAssist {\n    initContentAssist() {}\n    computeContentAssist(startRuleName, precedingInput) {\n      const startRuleGast = this.gastProductionsCache[startRuleName];\n      if (isUndefined(startRuleGast)) {\n        throw Error(\"Rule ->\".concat(startRuleName, \"<- does not exist in this grammar.\"));\n      }\n      return nextPossibleTokensAfter([startRuleGast], precedingInput, this.tokenMatcher, this.maxLookahead);\n    }\n    // TODO: should this be a member method or a utility? it does not have any state or usage of 'this'...\n    // TODO: should this be more explicitly part of the public API?\n    getNextPossibleTokenTypes(grammarPath) {\n      const topRuleName = head(grammarPath.ruleStack);\n      const gastProductions = this.getGAstProductions();\n      const topProduction = gastProductions[topRuleName];\n      const nextPossibleTokenTypes = new NextAfterTokenWalker(topProduction, grammarPath).startWalking();\n      return nextPossibleTokenTypes;\n    }\n  }\n  const RECORDING_NULL_OBJECT = {\n    description: \"This Object indicates the Parser is during Recording Phase\"\n  };\n  Object.freeze(RECORDING_NULL_OBJECT);\n  const HANDLE_SEPARATOR = true;\n  const MAX_METHOD_IDX = Math.pow(2, BITS_FOR_OCCURRENCE_IDX) - 1;\n  const RFT = createToken2({\n    name: \"RECORDING_PHASE_TOKEN\",\n    pattern: Lexer2.NA\n  });\n  augmentTokenTypes([RFT]);\n  const RECORDING_PHASE_TOKEN = createTokenInstance(RFT, \"This IToken indicates the Parser is in Recording Phase\\n\tSee: https://chevrotain.io/docs/guide/internals.html#grammar-recording for details\",\n  // Using \"-1\" instead of NaN (as in EOF) because an actual number is less likely to\n  // cause errors if the output of LA or CONSUME would be (incorrectly) used during the recording phase.\n  -1, -1, -1, -1, -1, -1);\n  Object.freeze(RECORDING_PHASE_TOKEN);\n  const RECORDING_PHASE_CSTNODE = {\n    name: \"This CSTNode indicates the Parser is in Recording Phase\\n\tSee: https://chevrotain.io/docs/guide/internals.html#grammar-recording for details\",\n    children: {}\n  };\n  class GastRecorder {\n    initGastRecorder(config) {\n      this.recordingProdStack = [];\n      this.RECORDING_PHASE = false;\n    }\n    enableRecording() {\n      this.RECORDING_PHASE = true;\n      this.TRACE_INIT(\"Enable Recording\", () => {\n        for (let i = 0; i < 10; i++) {\n          const idx = i > 0 ? i : \"\";\n          this[\"CONSUME\".concat(idx)] = function (arg1, arg2) {\n            return this.consumeInternalRecord(arg1, i, arg2);\n          };\n          this[\"SUBRULE\".concat(idx)] = function (arg1, arg2) {\n            return this.subruleInternalRecord(arg1, i, arg2);\n          };\n          this[\"OPTION\".concat(idx)] = function (arg1) {\n            return this.optionInternalRecord(arg1, i);\n          };\n          this[\"OR\".concat(idx)] = function (arg1) {\n            return this.orInternalRecord(arg1, i);\n          };\n          this[\"MANY\".concat(idx)] = function (arg1) {\n            this.manyInternalRecord(i, arg1);\n          };\n          this[\"MANY_SEP\".concat(idx)] = function (arg1) {\n            this.manySepFirstInternalRecord(i, arg1);\n          };\n          this[\"AT_LEAST_ONE\".concat(idx)] = function (arg1) {\n            this.atLeastOneInternalRecord(i, arg1);\n          };\n          this[\"AT_LEAST_ONE_SEP\".concat(idx)] = function (arg1) {\n            this.atLeastOneSepFirstInternalRecord(i, arg1);\n          };\n        }\n        this[\"consume\"] = function (idx, arg1, arg2) {\n          return this.consumeInternalRecord(arg1, idx, arg2);\n        };\n        this[\"subrule\"] = function (idx, arg1, arg2) {\n          return this.subruleInternalRecord(arg1, idx, arg2);\n        };\n        this[\"option\"] = function (idx, arg1) {\n          return this.optionInternalRecord(arg1, idx);\n        };\n        this[\"or\"] = function (idx, arg1) {\n          return this.orInternalRecord(arg1, idx);\n        };\n        this[\"many\"] = function (idx, arg1) {\n          this.manyInternalRecord(idx, arg1);\n        };\n        this[\"atLeastOne\"] = function (idx, arg1) {\n          this.atLeastOneInternalRecord(idx, arg1);\n        };\n        this.ACTION = this.ACTION_RECORD;\n        this.BACKTRACK = this.BACKTRACK_RECORD;\n        this.LA = this.LA_RECORD;\n      });\n    }\n    disableRecording() {\n      this.RECORDING_PHASE = false;\n      this.TRACE_INIT(\"Deleting Recording methods\", () => {\n        const that = this;\n        for (let i = 0; i < 10; i++) {\n          const idx = i > 0 ? i : \"\";\n          delete that[\"CONSUME\".concat(idx)];\n          delete that[\"SUBRULE\".concat(idx)];\n          delete that[\"OPTION\".concat(idx)];\n          delete that[\"OR\".concat(idx)];\n          delete that[\"MANY\".concat(idx)];\n          delete that[\"MANY_SEP\".concat(idx)];\n          delete that[\"AT_LEAST_ONE\".concat(idx)];\n          delete that[\"AT_LEAST_ONE_SEP\".concat(idx)];\n        }\n        delete that[\"consume\"];\n        delete that[\"subrule\"];\n        delete that[\"option\"];\n        delete that[\"or\"];\n        delete that[\"many\"];\n        delete that[\"atLeastOne\"];\n        delete that.ACTION;\n        delete that.BACKTRACK;\n        delete that.LA;\n      });\n    }\n    //   Parser methods are called inside an ACTION?\n    //   Maybe try/catch/finally on ACTIONS while disabling the recorders state changes?\n    // @ts-expect-error -- noop place holder\n    ACTION_RECORD(impl) {}\n    // Executing backtracking logic will break our recording logic assumptions\n    BACKTRACK_RECORD(grammarRule, args) {\n      return () => true;\n    }\n    // LA is part of the official API and may be used for custom lookahead logic\n    // by end users who may forget to wrap it in ACTION or inside a GATE\n    LA_RECORD(howMuch) {\n      return END_OF_FILE;\n    }\n    topLevelRuleRecord(name, def) {\n      try {\n        const newTopLevelRule = new Rule({\n          definition: [],\n          name\n        });\n        newTopLevelRule.name = name;\n        this.recordingProdStack.push(newTopLevelRule);\n        def.call(this);\n        this.recordingProdStack.pop();\n        return newTopLevelRule;\n      } catch (originalError) {\n        if (originalError.KNOWN_RECORDER_ERROR !== true) {\n          try {\n            originalError.message = originalError.message + '\\n\t This error was thrown during the \"grammar recording phase\" For more info see:\\n\thttps://chevrotain.io/docs/guide/internals.html#grammar-recording';\n          } catch (mutabilityError) {\n            throw originalError;\n          }\n        }\n        throw originalError;\n      }\n    }\n    // Implementation of parsing DSL\n    optionInternalRecord(actionORMethodDef, occurrence) {\n      return recordProd.call(this, Option, actionORMethodDef, occurrence);\n    }\n    atLeastOneInternalRecord(occurrence, actionORMethodDef) {\n      recordProd.call(this, RepetitionMandatory, actionORMethodDef, occurrence);\n    }\n    atLeastOneSepFirstInternalRecord(occurrence, options) {\n      recordProd.call(this, RepetitionMandatoryWithSeparator, options, occurrence, HANDLE_SEPARATOR);\n    }\n    manyInternalRecord(occurrence, actionORMethodDef) {\n      recordProd.call(this, Repetition, actionORMethodDef, occurrence);\n    }\n    manySepFirstInternalRecord(occurrence, options) {\n      recordProd.call(this, RepetitionWithSeparator, options, occurrence, HANDLE_SEPARATOR);\n    }\n    orInternalRecord(altsOrOpts, occurrence) {\n      return recordOrProd.call(this, altsOrOpts, occurrence);\n    }\n    subruleInternalRecord(ruleToCall, occurrence, options) {\n      assertMethodIdxIsValid(occurrence);\n      if (!ruleToCall || has(ruleToCall, \"ruleName\") === false) {\n        const error = new Error(\"<SUBRULE\".concat(getIdxSuffix(occurrence), \"> argument is invalid expecting a Parser method reference but got: <\").concat(JSON.stringify(ruleToCall), \">\\n inside top level rule: <\").concat(this.recordingProdStack[0].name, \">\"));\n        error.KNOWN_RECORDER_ERROR = true;\n        throw error;\n      }\n      const prevProd = last(this.recordingProdStack);\n      const ruleName = ruleToCall.ruleName;\n      const newNoneTerminal = new NonTerminal({\n        idx: occurrence,\n        nonTerminalName: ruleName,\n        label: options === null || options === void 0 ? void 0 : options.LABEL,\n        // The resolving of the `referencedRule` property will be done once all the Rule's GASTs have been created\n        referencedRule: void 0\n      });\n      prevProd.definition.push(newNoneTerminal);\n      return this.outputCst ? RECORDING_PHASE_CSTNODE : RECORDING_NULL_OBJECT;\n    }\n    consumeInternalRecord(tokType, occurrence, options) {\n      assertMethodIdxIsValid(occurrence);\n      if (!hasShortKeyProperty(tokType)) {\n        const error = new Error(\"<CONSUME\".concat(getIdxSuffix(occurrence), \"> argument is invalid expecting a TokenType reference but got: <\").concat(JSON.stringify(tokType), \">\\n inside top level rule: <\").concat(this.recordingProdStack[0].name, \">\"));\n        error.KNOWN_RECORDER_ERROR = true;\n        throw error;\n      }\n      const prevProd = last(this.recordingProdStack);\n      const newNoneTerminal = new Terminal({\n        idx: occurrence,\n        terminalType: tokType,\n        label: options === null || options === void 0 ? void 0 : options.LABEL\n      });\n      prevProd.definition.push(newNoneTerminal);\n      return RECORDING_PHASE_TOKEN;\n    }\n  }\n  function recordProd(prodConstructor, mainProdArg, occurrence) {\n    let handleSep = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    assertMethodIdxIsValid(occurrence);\n    const prevProd = last(this.recordingProdStack);\n    const grammarAction = isFunction(mainProdArg) ? mainProdArg : mainProdArg.DEF;\n    const newProd = new prodConstructor({\n      definition: [],\n      idx: occurrence\n    });\n    if (handleSep) {\n      newProd.separator = mainProdArg.SEP;\n    }\n    if (has(mainProdArg, \"MAX_LOOKAHEAD\")) {\n      newProd.maxLookahead = mainProdArg.MAX_LOOKAHEAD;\n    }\n    this.recordingProdStack.push(newProd);\n    grammarAction.call(this);\n    prevProd.definition.push(newProd);\n    this.recordingProdStack.pop();\n    return RECORDING_NULL_OBJECT;\n  }\n  function recordOrProd(mainProdArg, occurrence) {\n    assertMethodIdxIsValid(occurrence);\n    const prevProd = last(this.recordingProdStack);\n    const hasOptions = isArray$1(mainProdArg) === false;\n    const alts = hasOptions === false ? mainProdArg : mainProdArg.DEF;\n    const newOrProd = new Alternation({\n      definition: [],\n      idx: occurrence,\n      ignoreAmbiguities: hasOptions && mainProdArg.IGNORE_AMBIGUITIES === true\n    });\n    if (has(mainProdArg, \"MAX_LOOKAHEAD\")) {\n      newOrProd.maxLookahead = mainProdArg.MAX_LOOKAHEAD;\n    }\n    const hasPredicates = some(alts, currAlt => isFunction(currAlt.GATE));\n    newOrProd.hasPredicates = hasPredicates;\n    prevProd.definition.push(newOrProd);\n    forEach(alts, currAlt => {\n      const currAltFlat = new Alternative({\n        definition: []\n      });\n      newOrProd.definition.push(currAltFlat);\n      if (has(currAlt, \"IGNORE_AMBIGUITIES\")) {\n        currAltFlat.ignoreAmbiguities = currAlt.IGNORE_AMBIGUITIES;\n      } else if (has(currAlt, \"GATE\")) {\n        currAltFlat.ignoreAmbiguities = true;\n      }\n      this.recordingProdStack.push(currAltFlat);\n      currAlt.ALT.call(this);\n      this.recordingProdStack.pop();\n    });\n    return RECORDING_NULL_OBJECT;\n  }\n  function getIdxSuffix(idx) {\n    return idx === 0 ? \"\" : \"\".concat(idx);\n  }\n  function assertMethodIdxIsValid(idx) {\n    if (idx < 0 || idx > MAX_METHOD_IDX) {\n      const error = new Error( // The stack trace will contain all the needed details\n      \"Invalid DSL Method idx value: <\".concat(idx, \">\\n\\tIdx value must be a none negative value smaller than \").concat(MAX_METHOD_IDX + 1));\n      error.KNOWN_RECORDER_ERROR = true;\n      throw error;\n    }\n  }\n  class PerformanceTracer {\n    initPerformanceTracer(config) {\n      if (has(config, \"traceInitPerf\")) {\n        const userTraceInitPerf = config.traceInitPerf;\n        const traceIsNumber = typeof userTraceInitPerf === \"number\";\n        this.traceInitMaxIdent = traceIsNumber ? userTraceInitPerf : Infinity;\n        this.traceInitPerf = traceIsNumber ? userTraceInitPerf > 0 : userTraceInitPerf;\n      } else {\n        this.traceInitMaxIdent = 0;\n        this.traceInitPerf = DEFAULT_PARSER_CONFIG.traceInitPerf;\n      }\n      this.traceInitIndent = -1;\n    }\n    TRACE_INIT(phaseDesc, phaseImpl) {\n      if (this.traceInitPerf === true) {\n        this.traceInitIndent++;\n        const indent = new Array(this.traceInitIndent + 1).join(\"\t\");\n        if (this.traceInitIndent < this.traceInitMaxIdent) {\n          console.log(\"\".concat(indent, \"--> <\").concat(phaseDesc, \">\"));\n        }\n        const {\n          time,\n          value\n        } = timer(phaseImpl);\n        const traceMethod = time > 10 ? console.warn : console.log;\n        if (this.traceInitIndent < this.traceInitMaxIdent) {\n          traceMethod(\"\".concat(indent, \"<-- <\").concat(phaseDesc, \"> time: \").concat(time, \"ms\"));\n        }\n        this.traceInitIndent--;\n        return value;\n      } else {\n        return phaseImpl();\n      }\n    }\n  }\n  function applyMixins(derivedCtor, baseCtors) {\n    baseCtors.forEach(baseCtor => {\n      const baseProto = baseCtor.prototype;\n      Object.getOwnPropertyNames(baseProto).forEach(propName => {\n        if (propName === \"constructor\") {\n          return;\n        }\n        const basePropDescriptor = Object.getOwnPropertyDescriptor(baseProto, propName);\n        if (basePropDescriptor && (basePropDescriptor.get || basePropDescriptor.set)) {\n          Object.defineProperty(derivedCtor.prototype, propName, basePropDescriptor);\n        } else {\n          derivedCtor.prototype[propName] = baseCtor.prototype[propName];\n        }\n      });\n    });\n  }\n  const END_OF_FILE = createTokenInstance(EOF, \"\", NaN, NaN, NaN, NaN, NaN, NaN);\n  Object.freeze(END_OF_FILE);\n  const DEFAULT_PARSER_CONFIG = Object.freeze({\n    recoveryEnabled: false,\n    maxLookahead: 3,\n    dynamicTokensEnabled: false,\n    outputCst: true,\n    errorMessageProvider: defaultParserErrorProvider,\n    nodeLocationTracking: \"none\",\n    traceInitPerf: false,\n    skipValidations: false\n  });\n  const DEFAULT_RULE_CONFIG = Object.freeze({\n    recoveryValueFunc: () => void 0,\n    resyncEnabled: true\n  });\n  var ParserDefinitionErrorType;\n  (function (ParserDefinitionErrorType2) {\n    ParserDefinitionErrorType2[ParserDefinitionErrorType2[\"INVALID_RULE_NAME\"] = 0] = \"INVALID_RULE_NAME\";\n    ParserDefinitionErrorType2[ParserDefinitionErrorType2[\"DUPLICATE_RULE_NAME\"] = 1] = \"DUPLICATE_RULE_NAME\";\n    ParserDefinitionErrorType2[ParserDefinitionErrorType2[\"INVALID_RULE_OVERRIDE\"] = 2] = \"INVALID_RULE_OVERRIDE\";\n    ParserDefinitionErrorType2[ParserDefinitionErrorType2[\"DUPLICATE_PRODUCTIONS\"] = 3] = \"DUPLICATE_PRODUCTIONS\";\n    ParserDefinitionErrorType2[ParserDefinitionErrorType2[\"UNRESOLVED_SUBRULE_REF\"] = 4] = \"UNRESOLVED_SUBRULE_REF\";\n    ParserDefinitionErrorType2[ParserDefinitionErrorType2[\"LEFT_RECURSION\"] = 5] = \"LEFT_RECURSION\";\n    ParserDefinitionErrorType2[ParserDefinitionErrorType2[\"NONE_LAST_EMPTY_ALT\"] = 6] = \"NONE_LAST_EMPTY_ALT\";\n    ParserDefinitionErrorType2[ParserDefinitionErrorType2[\"AMBIGUOUS_ALTS\"] = 7] = \"AMBIGUOUS_ALTS\";\n    ParserDefinitionErrorType2[ParserDefinitionErrorType2[\"CONFLICT_TOKENS_RULES_NAMESPACE\"] = 8] = \"CONFLICT_TOKENS_RULES_NAMESPACE\";\n    ParserDefinitionErrorType2[ParserDefinitionErrorType2[\"INVALID_TOKEN_NAME\"] = 9] = \"INVALID_TOKEN_NAME\";\n    ParserDefinitionErrorType2[ParserDefinitionErrorType2[\"NO_NON_EMPTY_LOOKAHEAD\"] = 10] = \"NO_NON_EMPTY_LOOKAHEAD\";\n    ParserDefinitionErrorType2[ParserDefinitionErrorType2[\"AMBIGUOUS_PREFIX_ALTS\"] = 11] = \"AMBIGUOUS_PREFIX_ALTS\";\n    ParserDefinitionErrorType2[ParserDefinitionErrorType2[\"TOO_MANY_ALTS\"] = 12] = \"TOO_MANY_ALTS\";\n    ParserDefinitionErrorType2[ParserDefinitionErrorType2[\"CUSTOM_LOOKAHEAD_VALIDATION\"] = 13] = \"CUSTOM_LOOKAHEAD_VALIDATION\";\n  })(ParserDefinitionErrorType || (ParserDefinitionErrorType = {}));\n  class Parser {\n    /**\r\n     *  @deprecated use the **instance** method with the same name instead\r\n     */\n    static performSelfAnalysis(parserInstance) {\n      throw Error(\"The **static** `performSelfAnalysis` method has been deprecated.\t\\nUse the **instance** method with the same name instead.\");\n    }\n    performSelfAnalysis() {\n      this.TRACE_INIT(\"performSelfAnalysis\", () => {\n        let defErrorsMsgs;\n        this.selfAnalysisDone = true;\n        const className = this.className;\n        this.TRACE_INIT(\"toFastProps\", () => {\n          toFastProperties(this);\n        });\n        this.TRACE_INIT(\"Grammar Recording\", () => {\n          try {\n            this.enableRecording();\n            forEach(this.definedRulesNames, currRuleName => {\n              const wrappedRule = this[currRuleName];\n              const originalGrammarAction = wrappedRule[\"originalGrammarAction\"];\n              let recordedRuleGast;\n              this.TRACE_INIT(\"\".concat(currRuleName, \" Rule\"), () => {\n                recordedRuleGast = this.topLevelRuleRecord(currRuleName, originalGrammarAction);\n              });\n              this.gastProductionsCache[currRuleName] = recordedRuleGast;\n            });\n          } finally {\n            this.disableRecording();\n          }\n        });\n        let resolverErrors = [];\n        this.TRACE_INIT(\"Grammar Resolving\", () => {\n          resolverErrors = resolveGrammar({\n            rules: values(this.gastProductionsCache)\n          });\n          this.definitionErrors = this.definitionErrors.concat(resolverErrors);\n        });\n        this.TRACE_INIT(\"Grammar Validations\", () => {\n          if (isEmpty(resolverErrors) && this.skipValidations === false) {\n            const validationErrors = validateGrammar({\n              rules: values(this.gastProductionsCache),\n              tokenTypes: values(this.tokensMap),\n              errMsgProvider: defaultGrammarValidatorErrorProvider,\n              grammarName: className\n            });\n            const lookaheadValidationErrors = validateLookahead({\n              lookaheadStrategy: this.lookaheadStrategy,\n              rules: values(this.gastProductionsCache),\n              tokenTypes: values(this.tokensMap),\n              grammarName: className\n            });\n            this.definitionErrors = this.definitionErrors.concat(validationErrors, lookaheadValidationErrors);\n          }\n        });\n        if (isEmpty(this.definitionErrors)) {\n          if (this.recoveryEnabled) {\n            this.TRACE_INIT(\"computeAllProdsFollows\", () => {\n              const allFollows = computeAllProdsFollows(values(this.gastProductionsCache));\n              this.resyncFollows = allFollows;\n            });\n          }\n          this.TRACE_INIT(\"ComputeLookaheadFunctions\", () => {\n            var _a, _b;\n            (_b = (_a = this.lookaheadStrategy).initialize) === null || _b === void 0 ? void 0 : _b.call(_a, {\n              rules: values(this.gastProductionsCache)\n            });\n            this.preComputeLookaheadFunctions(values(this.gastProductionsCache));\n          });\n        }\n        if (!Parser.DEFER_DEFINITION_ERRORS_HANDLING && !isEmpty(this.definitionErrors)) {\n          defErrorsMsgs = map(this.definitionErrors, defError => defError.message);\n          throw new Error(\"Parser Definition Errors detected:\\n \".concat(defErrorsMsgs.join(\"\\n-------------------------------\\n\")));\n        }\n      });\n    }\n    constructor(tokenVocabulary, config) {\n      this.definitionErrors = [];\n      this.selfAnalysisDone = false;\n      const that = this;\n      that.initErrorHandler(config);\n      that.initLexerAdapter();\n      that.initLooksAhead(config);\n      that.initRecognizerEngine(tokenVocabulary, config);\n      that.initRecoverable(config);\n      that.initTreeBuilder(config);\n      that.initContentAssist();\n      that.initGastRecorder(config);\n      that.initPerformanceTracer(config);\n      if (has(config, \"ignoredIssues\")) {\n        throw new Error(\"The <ignoredIssues> IParserConfig property has been deprecated.\\n\tPlease use the <IGNORE_AMBIGUITIES> flag on the relevant DSL method instead.\\n\tSee: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#IGNORING_AMBIGUITIES\\n\tFor further details.\");\n      }\n      this.skipValidations = has(config, \"skipValidations\") ? config.skipValidations : DEFAULT_PARSER_CONFIG.skipValidations;\n    }\n  }\n  Parser.DEFER_DEFINITION_ERRORS_HANDLING = false;\n  applyMixins(Parser, [Recoverable, LooksAhead, TreeBuilder, LexerAdapter, RecognizerEngine, RecognizerApi, ErrorHandler, ContentAssist, GastRecorder, PerformanceTracer]);\n  class CstParser2 extends Parser {\n    constructor(tokenVocabulary) {\n      let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_PARSER_CONFIG;\n      const configClone = clone(config);\n      configClone.outputCst = true;\n      super(tokenVocabulary, configClone);\n    }\n  }\n  return {\n    CstParser: CstParser2,\n    Lexer: Lexer2,\n    createToken: createToken2\n  };\n})();\nexport { CstParser, Lexer, createToken };","map":{"version":3,"names":["CstParser","Lexer","createToken","freeGlobal","global","Object","freeGlobal$1","freeSelf","self","root","Function","root$1","Symbol$1","Symbol","Symbol$2","objectProto$j","prototype","hasOwnProperty$g","hasOwnProperty","nativeObjectToString$1","toString","symToStringTag$1","toStringTag","getRawTag","value","isOwn","call","tag","unmasked","e","result","objectProto$i","nativeObjectToString","objectToString","nullTag","undefinedTag","symToStringTag","baseGetTag","isObjectLike","symbolTag$3","isSymbol","arrayMap","array","iteratee","index","length","Array","isArray","isArray$1","INFINITY$3","symbolProto$2","symbolToString","baseToString","reWhitespace","trimmedEndIndex","string","test","charAt","reTrimStart","baseTrim","slice","replace","isObject","type","NAN","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","parseInt","toNumber","other","valueOf","isBinary","INFINITY$2","MAX_INTEGER","toFinite","sign","toInteger","remainder","identity","asyncTag","funcTag$2","genTag$1","proxyTag","isFunction","coreJsData","coreJsData$1","maskSrcKey","uid","exec","keys","IE_PROTO","isMasked","func","funcProto$1","funcToString$1","toSource","reRegExpChar","reIsHostCtor","funcProto","objectProto$h","funcToString","hasOwnProperty$f","reIsNative","RegExp","baseIsNative","pattern","getValue","object","key","getNative","WeakMap","WeakMap$1","objectCreate","create","baseCreate","proto","baseCreate$1","apply","thisArg","args","noop","copyArray","source","HOT_COUNT","HOT_SPAN","nativeNow","Date","now","shortOut","count","lastCalled","stamp","remaining","arguments","constant","defineProperty","defineProperty$1","baseSetToString","configurable","enumerable","writable","baseSetToString$1","setToString","setToString$1","arrayEach","baseFindIndex","predicate","fromIndex","fromRight","baseIsNaN","strictIndexOf","baseIndexOf","arrayIncludes","MAX_SAFE_INTEGER$1","reIsUint","isIndex","baseAssignValue","eq","objectProto$g","hasOwnProperty$e","assignValue","objValue","copyObject","props","customizer","isNew","newValue","nativeMax$3","Math","max","overRest","start","transform","otherArgs","baseRest","MAX_SAFE_INTEGER","isLength","isArrayLike","isIterateeCall","createAssigner","assigner","sources","guard","objectProto$f","isPrototype","Ctor","constructor","baseTimes","n","argsTag$3","baseIsArguments","objectProto$e","hasOwnProperty$d","propertyIsEnumerable$1","propertyIsEnumerable","isArguments","isArguments$1","stubFalse","freeExports$2","exports","nodeType","freeModule$2","module","moduleExports$2","Buffer$1","Buffer","nativeIsBuffer","isBuffer","isBuffer$1","argsTag$2","arrayTag$2","boolTag$3","dateTag$3","errorTag$2","funcTag$1","mapTag$6","numberTag$3","objectTag$3","regexpTag$4","setTag$6","stringTag$4","weakMapTag$2","arrayBufferTag$3","dataViewTag$4","float32Tag$2","float64Tag$2","int8Tag$2","int16Tag$2","int32Tag$2","uint8Tag$2","uint8ClampedTag$2","uint16Tag$2","uint32Tag$2","typedArrayTags","baseIsTypedArray","baseUnary","freeExports$1","freeModule$1","moduleExports$1","freeProcess","process","nodeUtil","types","require","binding","nodeUtil$1","nodeIsTypedArray","isTypedArray","isTypedArray$1","objectProto$d","hasOwnProperty$c","arrayLikeKeys","inherited","isArr","isArg","isBuff","isType","skipIndexes","String","push","overArg","arg","nativeKeys","nativeKeys$1","objectProto$c","hasOwnProperty$b","baseKeys","objectProto$b","hasOwnProperty$a","assign","assign$1","nativeKeysIn","objectProto$a","hasOwnProperty$9","baseKeysIn","isProto","keysIn","reIsDeepProp","reIsPlainProp","isKey","nativeCreate","nativeCreate$1","hashClear","__data__","size","hashDelete","has","HASH_UNDEFINED$2","objectProto$9","hasOwnProperty$8","hashGet","data","objectProto$8","hasOwnProperty$7","hashHas","HASH_UNDEFINED$1","hashSet","Hash","entries","clear","entry","set","get","listCacheClear","assocIndexOf","arrayProto","splice","listCacheDelete","lastIndex","pop","listCacheGet","listCacheHas","listCacheSet","ListCache","Map$1","Map$2","mapCacheClear","hash","map","isKeyable","getMapData","map2","mapCacheDelete","mapCacheGet","mapCacheHas","mapCacheSet","MapCache","FUNC_ERROR_TEXT$1","memoize","resolver","TypeError","memoized","cache","Cache","MAX_MEMOIZE_SIZE","memoizeCapped","rePropName","reEscapeChar","stringToPath","charCodeAt","match","number","quote","subString","stringToPath$1","castPath","INFINITY$1","toKey","baseGet","path","defaultValue","arrayPush","values2","offset","spreadableSymbol","isConcatSpreadable","isFlattenable","baseFlatten","depth","isStrict","flatten","getPrototype","getPrototypeOf","getPrototype$1","baseSlice","end","arrayReduce","accumulator","initAccum","stackClear","stackDelete","stackGet","stackHas","LARGE_ARRAY_SIZE$2","stackSet","pairs","Stack","baseAssign","baseAssignIn","freeExports","freeModule","moduleExports","allocUnsafe","cloneBuffer","buffer","isDeep","copy","arrayFilter","resIndex","stubArray","objectProto$7","nativeGetSymbols$1","getOwnPropertySymbols","getSymbols","symbol","getSymbols$1","copySymbols","nativeGetSymbols","getSymbolsIn","getSymbolsIn$1","copySymbolsIn","baseGetAllKeys","keysFunc","symbolsFunc","getAllKeys","getAllKeysIn","DataView","DataView$1","Promise$1","Promise$2","Set","Set$1","mapTag$5","objectTag$2","promiseTag","setTag$5","weakMapTag$1","dataViewTag$3","dataViewCtorString","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","getTag","ArrayBuffer","resolve","ctorString","getTag$1","objectProto$6","hasOwnProperty$6","initCloneArray","input","Uint8Array","Uint8Array$1","cloneArrayBuffer","arrayBuffer","byteLength","cloneDataView","dataView","byteOffset","reFlags","cloneRegExp","regexp","symbolProto$1","symbolValueOf$1","cloneSymbol","cloneTypedArray","typedArray","boolTag$2","dateTag$2","mapTag$4","numberTag$2","regexpTag$3","setTag$4","stringTag$3","symbolTag$2","arrayBufferTag$2","dataViewTag$2","float32Tag$1","float64Tag$1","int8Tag$1","int16Tag$1","int32Tag$1","uint8Tag$1","uint8ClampedTag$1","uint16Tag$1","uint32Tag$1","initCloneByTag","initCloneObject","mapTag$3","baseIsMap","nodeIsMap","isMap","isMap$1","setTag$3","baseIsSet","nodeIsSet","isSet","isSet$1","CLONE_DEEP_FLAG","CLONE_FLAT_FLAG","CLONE_SYMBOLS_FLAG$1","argsTag$1","arrayTag$1","boolTag$1","dateTag$1","errorTag$1","funcTag","genTag","mapTag$2","numberTag$1","objectTag$1","regexpTag$2","setTag$2","stringTag$2","symbolTag$1","weakMapTag","arrayBufferTag$1","dataViewTag$1","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag","cloneableTags","baseClone","bitmask","stack","isFlat","isFull","isFunc","stacked","forEach","subValue","add","key2","CLONE_SYMBOLS_FLAG","clone","compact","HASH_UNDEFINED","setCacheAdd","setCacheHas","SetCache","arraySome","cacheHas","COMPARE_PARTIAL_FLAG$5","COMPARE_UNORDERED_FLAG$3","equalArrays","equalFunc","isPartial","arrLength","othLength","arrStacked","othStacked","seen","arrValue","othValue","compared","othValue2","othIndex","mapToArray","setToArray","COMPARE_PARTIAL_FLAG$4","COMPARE_UNORDERED_FLAG$2","boolTag","dateTag","errorTag","mapTag$1","numberTag","regexpTag$1","setTag$1","stringTag$1","symbolTag","arrayBufferTag","dataViewTag","symbolProto","symbolValueOf","equalByTag","name","message","convert","COMPARE_PARTIAL_FLAG$3","objectProto$5","hasOwnProperty$5","equalObjects","objProps","objLength","othProps","objStacked","skipCtor","objCtor","othCtor","COMPARE_PARTIAL_FLAG$2","argsTag","arrayTag","objectTag","objectProto$4","hasOwnProperty$4","baseIsEqualDeep","objIsArr","othIsArr","objTag","othTag","objIsObj","othIsObj","isSameTag","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","baseIsEqual","COMPARE_PARTIAL_FLAG$1","COMPARE_UNORDERED_FLAG$1","baseIsMatch","matchData","noCustomizer","srcValue","isStrictComparable","getMatchData","matchesStrictComparable","baseMatches","baseHasIn","hasPath","hasFunc","hasIn","COMPARE_PARTIAL_FLAG","COMPARE_UNORDERED_FLAG","baseMatchesProperty","baseProperty","basePropertyDeep","property","baseIteratee","arrayAggregator","setter","createBaseFor","iterable","baseFor","baseFor$1","baseForOwn","createBaseEach","eachFunc","collection","baseEach","baseEach$1","baseAggregator","collection2","createAggregator","initializer","objectProto$3","hasOwnProperty$3","defaults","propsIndex","propsLength","defaults$1","isArrayLikeObject","arrayIncludesWith","comparator","LARGE_ARRAY_SIZE$1","baseDifference","includes2","isCommon","valuesLength","outer","computed","valuesIndex","difference","difference$1","last","drop","dropRight","castFunction","arrayEvery","baseEvery","every","baseFilter","filter","createFind","findIndexFunc","nativeMax$2","findIndex","find","find$1","head","baseMap","flatMap","objectProto$2","hasOwnProperty$2","groupBy","groupBy$1","objectProto$1","hasOwnProperty$1","baseHas","stringTag","isString","baseValues","values","nativeMax$1","includes","indexOf","nativeMax","mapTag","setTag","objectProto","isEmpty","regexpTag","baseIsRegExp","nodeIsRegExp","isRegExp","isRegExp$1","isUndefined","FUNC_ERROR_TEXT","negate","baseSet","nested","basePickBy","paths","pickBy","prop","baseReduce","reduce","reject","baseSome","some","INFINITY","createSet","createSet$1","LARGE_ARRAY_SIZE","baseUniq","seenIndex","uniq","PRINT_ERROR","msg","console","error","concat","PRINT_WARNING","warn","timer","getTime","val","total","time","toFastProperties","toBecomeFast","FakeConstructor","fakeInstance","fakeAccess","bar","tokenLabel$1","tokType","hasTokenLabel$1","LABEL","obj","AbstractProduction","definition","_definition","accept","visitor","visit","prod","NonTerminal","options","idx","v","referencedRule","Rule","orgText","Alternative","ignoreAmbiguities","Option","RepetitionMandatory","RepetitionMandatoryWithSeparator","Repetition","RepetitionWithSeparator","Alternation","hasPredicates","Terminal","serializeGrammar","topRules","serializeProduction","node","convertDefinition","serializedNonTerminal","nonTerminalName","label","separator","terminalType","serializedTerminal","terminalLabel","PATTERN","Error","GAstVisitor","nodeAny","visitNonTerminal","visitAlternative","visitOption","visitRepetitionMandatory","visitRepetitionMandatoryWithSeparator","visitRepetitionWithSeparator","visitRepetition","visitAlternation","visitTerminal","visitRule","isSequenceProd","isOptionalProd","alreadyVisited","undefined","isDirectlyOptional","subProd","isBranchingProd","getProductionDslName","RestWalker","walk","prevRest","currRest","walkProdRef","walkTerminal","walkFlat","walkOption","walkAtLeastOne","walkAtLeastOneSep","walkManySep","walkMany","walkOr","terminal","refProd","flatProd","fullOrRest","optionProd","atLeastOneProd","fullAtLeastOneRest","atLeastOneSepProd","fullAtLeastOneSepRest","restForRepetitionWithSeparator","manyProd","fullManyRest","manySepProd","fullManySepRest","orProd","alt","prodWrapper","repSepProd","repSepRest","fullRepSepRest","first","firstForTerminal","firstForSequence","firstForBranching","firstSet","seq","nextSubProdIdx","hasInnerProdsRemaining","currSubProd","isLastInnerProdOptional","allAlternativesFirsts","innerProd","IN","ResyncFollowsWalker","topProd","follows","startWalking","followName","buildBetweenProdsFollowPrefix","fullRest","restProd","t_in_topProd_follows","computeAllProdsFollows","topProductions","reSyncFollows","currRefsFollow","inner","occurenceInParent","cc","char","insertToSet","item","subItem","addFlag","flagObj","flagKey","ASSERT_EXISTS","ASSERT_NEVER_REACH_HERE","isCharacter","digitsCharCodes","i","wordCharCodes","whitespaceCodes","hexDigitPattern","decimalPattern","decimalPatternNoZero","RegExpParser","groupIdx","saveState","restoreState","newState","consumeChar","disjunction","flags","loc","begin","ignoreCase","multiLine","unicode","sticky","isRegExpFlag","popChar","substring","alts","alternative","peekChar","terms","isTerm","term","isAssertion","assertion","atom","quantifier","isBacktracking","range","atLeast","atMost","Infinity","integerIncludingZero","isDigit","greedy","dotAll","atomEscape","characterClass","group","isPatternCharacter","patternCharacter","isQuantifier","complement","decimalEscapeAtom","characterClassEscape","controlEscapeAtom","controlLetterEscapeAtom","nulCharacterAtom","hexEscapeSequenceAtom","regExpUnicodeEscapeSequenceAtom","identityEscapeAtom","positiveInteger","escapeCode","letter","letterCode","toUpperCase","parseHexDigits","escapedChar","classPatternCharacterAtom","nextChar","isClassAtom","from","classAtom","isRangeDash","to","classEscape","capturing","groupAst","howMuch","isAtom","prevState","howMany","hexString","hexChar","charCode","BaseRegExpVisitor","visitChildren","child","subChild","visitPattern","visitFlags","visitDisjunction","visitStartAnchor","visitEndAnchor","visitWordBoundary","visitNonWordBoundary","visitLookahead","visitNegativeLookahead","visitCharacter","visitSet","visitGroup","visitGroupBackReference","visitQuantifier","regExpAstCache","regExpParser","getRegExpAst","regExp","regExpStr","regExpAst","clearRegExpParserCache","complementErrorMessage","failedOptimizationPrefixMsg","getOptimizedStartCodesIndices","ensureOptimizations","ast","firstChars","firstCharOptimizedIndices","msgSuffix","addOptimizedIdxToResult","code","rangeCode","minOptimizationVal","minUnOptVal","maxUnOptVal","minOptIdx","charCodeToOptimizedIndex","maxOptIdx","currOptIdx","isOptionalQuantifier","isWholeOptional","optimizedCharIdx","handleIgnoreCase","fromCharCode","upperChar","lowerChar","toLowerCase","findCode","setNode","targetCharCodes","codeOrRange","targetCode","CharCodeFinder","found","canMatchCharCode","charCodes","charCodeFinder","DEFAULT_MODE","MODES","SUPPORT_STICKY","analyzeTokenTypes","tokenTypes","useSticky","debug","safeMode","positionTracking","lineTerminatorCharacters","tracer","action","initCharCodeToOptimizedIndexMap","onlyRelevantTypes","currType","Lexer2","NA","hasCustom","allTransformedPatterns","currPattern","regExpSource","addStickyFlag","addStartOfInput","escapedRegExpString","wrappedRegExp","patternIdxToType","patternIdxToGroup","patternIdxToLongerAltIdxArr","patternIdxToPushMode","patternIdxToPopMode","tokenTypeIdx","clazz","groupName","GROUP","SKIPPED","longerAltType","LONGER_ALT","longerAltIdxArr","PUSH_MODE","patternIdxToCanLineTerminator","lineTerminatorCharCodes","getCharCodes","LINE_BREAKS","checkLineBreaksIssues","patternIdxToIsCustom","patternIdxToShort","emptyGroups","patternIdxToConfig","isCustomPattern","isShortPattern","acc","x","longerAlt","canLineTerminator","isCustom","short","tokenType","canBeOptimized","charCodeToPatternIdxToConfig","currTokType","optimizedIdx","addToMapOfArrays","START_CHARS_HINT","lastOptimizedIdx","charOrInt","currOptimizedIdx","optimizedCodes","validatePatterns","validModesNames","errors","missingResult","findMissingPatterns","invalidResult","findInvalidPatterns","valid","validTokenTypes","validateRegExpPattern","findInvalidGroupType","findModesThatDoNotExist","findUnreachablePatterns","withRegExpPatterns","findEndOfInputAnchor","findStartOfInputAnchor","findUnsupportedFlags","findDuplicatePatterns","findEmptyMatchRegExps","tokenTypesWithMissingPattern","LexerDefinitionErrorType","MISSING_PATTERN","tokenTypesWithInvalidPattern","INVALID_PATTERN","end_of_input","EndAnchorFinder","invalidRegex","regexpAst","endAnchorVisitor","EOI_ANCHOR_FOUND","matchesEmptyString","EMPTY_MATCH_PATTERN","start_of_input","StartAnchorFinder","startAnchorVisitor","SOI_ANCHOR_FOUND","invalidFlags","multiline","UNSUPPORTED_FLAGS_FOUND","identicalPatterns","outerType","innerType","duplicatePatterns","currIdenticalSet","setOfIdentical","tokenTypeNames","dupPatternSrc","join","DUPLICATE_PATTERNS_FOUND","invalidTypes","INVALID_GROUP_TYPE_FOUND","validModes","invalidModes","PUSH_MODE_DOES_NOT_EXIST","canBeTested","str","noMetaChar","testIdx","_ref","testTokenType","UNREACHABLE_PATTERN","regExpArray","metaChars","performRuntimeChecks","lexerDefinition","trackLines","MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE","MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY","modes","defaultMode","MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST","currModeValue","currModeName","currIdx","LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED","currLongerAlt","MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE","performWarningRuntimeChecks","warnings","hasAnyLineBreak","allTokenTypes","concreteTokenTypes","terminatorCharCodes","currIssue","buildLineBreakIssueMessage","warningDescriptor","issue","NO_LINE_BREAKS_FLAGS","cloneEmptyGroups","clonedResult","groupKeys","currKey","currGroupValue","LineTerminatorOptimizedTester","text","len","c","IDENTIFY_TERMINATOR","errMsg","CUSTOM_LINE_BREAK","details","charsOrCodes","numOrString","charCodeToOptimizedIdxMap","tokenStructuredMatcher","tokInstance","tokConstructor","instanceType","isParent","categoryMatchesMap","tokenStructuredMatcherNoCategories","token","tokenShortNameIdx","tokenIdxToClass","augmentTokenTypes","tokenTypesAndParents","expandCategories","assignTokenDefaultProps","assignCategoriesMapProp","assignCategoriesTokensProp","categoryMatches","categories","searching","CATEGORIES","newCategories","hasShortKeyProperty","hasCategoriesProperty","hasExtendingTokensTypesProperty","hasExtendingTokensTypesMapProperty","singleAssignCategoriesToksMap","nextNode","pathNode","nextCategory","newPath","isTokenType","defaultLexerErrorProvider","buildUnableToPopLexerModeMessage","image","buildUnexpectedCharactersMessage","fullText","startOffset","line","column","LexerDefinitionErrorType2","DEFAULT_LEXER_CONFIG","deferDefinitionErrorsHandling","lineTerminatorsPattern","errorMessageProvider","traceInitPerf","skipValidations","recoveryEnabled","freeze","config","lexerDefinitionErrors","lexerDefinitionWarning","trackStartLines","trackEndLines","canModeBeOptimized","TRACE_INIT","phaseDesc","phaseImpl","traceInitIndent","indent","traceInitMaxIdent","log","traceMethod","traceInitVal","actualDefinition","hasOnlySingleMode","allModeNames","currModDef","currModName","currAnalyzeResult","allErrMessages","allErrMessagesString","chopInput","matchWithTest","updateLastIndex","matchWithExec","handleModes","computeNewColumn","updateTokenEndLineColumnLocation","createTokenInstance","createFullToken","createStartOnlyToken","createOffsetOnlyToken","addToken","addTokenUsingPush","handlePayload","handlePayloadWithCustom","addTokenUsingMemberAccess","handlePayloadNoCustom","unOptimizedModes","cannotBeOptimized","modeName","tokenize","initialMode","tokenizeInternal","j","k","matchAltImage","matchedImage","payload","altPayload","imageLength","newToken","errLength","orgLength","matchedTokensIndex","guessedNumberOfTokens","floor","matchedTokens","groups","lineTerminatorPattern","currModePatternsLength","currCharCodeToPatternIdxToConfig","modeStack","emptyArray","getPossiblePatterns","getPossiblePatternsSlow","getPossiblePatternsOptimized","possiblePatterns","pop_mode","popToken","msg2","startLine","startColumn","newMode","modeCanBeOptimized","push_mode","currConfig","nextCharCode","chosenPatternIdxToConfig","chosenPatternsLength","singleCharCode","longerAltLength","longerAltConfig","longerAltPattern","numOfLTsInMatch","foundTerminator","lastLTEndOffset","errorStartOffset","errorLine","errorColumn","foundResyncPoint","currConfig2","tokens","pushMode","newLastIndex","lastLTIdx","lastCharIsLT","fixForEndingInLT","endLine","endColumn","oldColumn","endOffset","tokenVector","tokenToAdd","tokenLabel","hasTokenLabel","PARENT","POP_MODE","createToken2","createTokenInternal","EOF","tokenMatcher","defaultParserErrorProvider","buildMismatchTokenMessage","_ref2","expected","actual","previous","ruleName","hasLabel","expectedMsg","buildNotAllInputParsedMessage","_ref3","firstRedundant","buildNoViableAltMessage","_ref4","expectedPathsPerAlt","customUserDescription","errPrefix","actualText","errSuffix","allLookAheadPaths","currAltPaths","nextValidTokenSequences","currPath","currTokenType","nextValidSequenceItems","itemMsg","calculatedDescription","buildEarlyExitMessage","_ref5","expectedIterationPaths","defaultGrammarResolverErrorProvider","buildRuleNotFoundError","topLevelRule","undefinedRule","defaultGrammarValidatorErrorProvider","buildDuplicateFoundError","duplicateProds","getExtraProductionArgument2","topLevelName","duplicateProd","dslName","extraArgument","hasExplicitIndex","buildNamespaceConflictError","rule","buildAlternationPrefixAmbiguityError","pathMsg","prefixPath","currTok","occurrence","alternation","ambiguityIndices","buildAlternationAmbiguityError","currtok","currMessage","buildEmptyRepetitionError","repetition","buildTokenNameError","buildEmptyAlternationError","emptyChoiceIdx","buildTooManyAlternativesError","buildLeftRecursionError","pathNames","leftRecursionPath","currRule","leftRecursivePath","buildInvalidRuleNameError","buildDuplicateRuleNameError","grammarName","resolveGrammar$1","topLevels","errMsgProvider","refResolver","GastRefResolverVisitor","resolveRefs","nameToTopRule","currTopLevel","ref","ParserDefinitionErrorType","UNRESOLVED_SUBRULE_REF","unresolvedRefName","AbstractNextPossibleTokensWalker","possibleTokTypes","nextProductionName","nextProductionOccurrence","isAtEndOfPath","ruleStack","reverse","occurrenceStack","updateExpectedNext","NextAfterTokenWalker","nextTerminalName","nextTerminalOccurrence","lastTok","lastTokOccurrence","AbstractNextTerminalAfterProductionWalker","topRule","isEndOfRule","NextTerminalAfterManyWalker","firstAfterMany","NextTerminalAfterManySepWalker","firstAfterManySep","NextTerminalAfterAtLeastOneWalker","firstAfterAtLeastOne","NextTerminalAfterAtLeastOneSepWalker","atleastOneSepProd","firstAfterfirstAfterAtLeastOneSep","possiblePathsFrom","targetDef","maxLength","remainingPathWith","nextDef","getAlternativesForProd","alternatives","newDef","currAlt","partialPath","suffixDef","nextPossibleTokensAfter","initialDef","tokMatcher","maxLookAhead","EXIT_NON_TERMINAL","EXIT_NON_TERMINAL_ARR","EXIT_ALTERNATIVE","foundCompletePath","tokenVectorLength","minimalAlternativesIndex","possiblePaths","def","currDef","currRuleStack","currOccurrenceStack","nextPath","nextIdx","actualToken","nextTokenType","nextTokenOccurrence","newRuleStack","newOccurrenceStack","nextPathWithout","nextPathWith","secondIteration","separatorGast","nthRepetition","currAltPath","expandTopLevelRule","newCurrOccurrenceStack","PROD_TYPE","PROD_TYPE2","getProdType","OPTION","REPETITION","REPETITION_MANDATORY","REPETITION_MANDATORY_WITH_SEPARATOR","REPETITION_WITH_SEPARATOR","ALTERNATION","buildLookaheadFuncForOr","ruleGrammar","maxLookahead","dynamicTokensEnabled","laFuncBuilder","lookAheadPaths","getLookaheadPathsForOr","tokenMatcher2","areTokenCategoriesNotUsed","buildLookaheadFuncForOptionalProd","prodType","lookaheadBuilder","getLookaheadPathsForOptionalProd","buildAlternativesLookAheadFunc","numOfAlts","areAllOneTokenLookahead","orAlts","predicates","GATE","t","currNumOfPaths","currPredicate","currPathLength","nextToken","LA","singleTokenAlts","choiceToAlt","currExtendingType","buildSingleAlternativeLookaheadFunction","numOfPaths","singleTokensTypes","expectedTokenType","expectedTokenUniqueKey","RestDefinitionFinderWalker","targetOccurrence","targetProdType","restDef","checkIsTarget","expectedProdType","InsideDefinitionFinderVisitor","targetRef","expectedProdName","initializeArrayOfArrays","pathToHashKeys","keys2","longerKeys","currShorterKey","categoriesKeySuffix","isUniquePrefixHash","altKnownPathsKeys","searchPathKeys","currAltIdx","otherAltKnownPathsKeys","searchIdx","searchKey","lookAheadSequenceFromAlternatives","altsDefs","partialAlts","finalResult","altsHashes","dict","newData","pathLength","currDataset","altIdx","currAltPathsAndSuffixes","currPathIdx","currPathPrefix","prefixKeys","isUnique","currAltResult","containsPath","newPartialPathsAndSuffixes","prefixKeys2","insideDefVisitor","insideDef","afterDefWalker","afterDef","insideFlat","afterFlat","searchPath","compareOtherPath","otherPath","searchTok","otherTok","matchingTokens","isStrictPrefixOfPath","prefix","otherTokType","singleAltPaths","singlePath","validateLookahead","lookaheadValidationErrorMessages","lookaheadStrategy","validate","rules","errorMessage","CUSTOM_LOOKAHEAD_VALIDATION","validateGrammar$1","duplicateErrors","validateDuplicateProductions","termsNamespaceConflictErrors","checkTerminalAndNoneTerminalsNameSpace","tooManyAltsErrors","curRule","validateTooManyAlts","duplicateRulesError","validateRuleDoesNotAlreadyExist","collectorVisitor2","OccurrenceValidationCollector","allRuleProductions","allProductions","productionGroups","identifyProductionForDuplicates","duplicates","currGroup","currDuplicates","firstProd","defError","DUPLICATE_PRODUCTIONS","param","getExtraProductionArgument","parameter","subrule","option","manySep","atLeastOne","atLeastOneSep","many","or","allRules","className","occurrences","DUPLICATE_RULE_NAME","validateRuleIsOverridden","definedRulesNames","INVALID_RULE_OVERRIDE","validateNoLeftRecursion","nextNonTerminals","getFirstNoneTerminal","foundLeftRecursion","LEFT_RECURSION","validNextSteps","errorsFromNextSteps","currRefRule","currSubDef","isFirstOptional","hasMore","rest","OrCollector","alternations","validateEmptyOrAlternative","orCollector","ors","currOr","exceptLast","currAlternative","possibleFirstInAlt","NONE_LAST_EMPTY_ALT","validateAmbiguousAlternationAlternatives","globalMaxLookahead","currOccurrence","actualMaxLookahead","altsAmbiguityErrors","checkAlternativesAmbiguities","altsPrefixAmbiguityErrors","checkPrefixAlternativesAmbiguities","RepetitionCollector","TOO_MANY_ALTS","validateSomeNonEmptyLookaheadPath","topLevelRules","currTopRule","currProd","pathsInsideProduction","NO_NON_EMPTY_LOOKAHEAD","foundAmbiguousPaths","identicalAmbiguities","altsCurrPathAppearsIn","currOtherAlt","currOtherAltIdx","currErrors","currAmbDescriptor","ambgIndices","AMBIGUOUS_ALTS","pathsAndIndices","currPathsAndIdx","currPathAndIdx","alternativeGast","targetIdx","targetPath","prefixAmbiguitiesPathsAndIndices","searchPathAndIdx","currPathPrefixErrors","currAmbPathAndIdx","AMBIGUOUS_PREFIX_ALTS","tokenNames","currToken","currRuleName","CONFLICT_TOKENS_RULES_NAMESPACE","resolveGrammar","actualOptions","topRulesTable","validateGrammar","MISMATCHED_TOKEN_EXCEPTION","NO_VIABLE_ALT_EXCEPTION","EARLY_EXIT_EXCEPTION","NOT_ALL_INPUT_PARSED_EXCEPTION","RECOGNITION_EXCEPTION_NAMES","isRecognitionException","RecognitionException","resyncedTokens","setPrototypeOf","new","target","captureStackTrace","MismatchedTokenException","previousToken","NoViableAltException","NotAllInputParsedException","EarlyExitException","EOF_FOLLOW_KEY","IN_RULE_RECOVERY_EXCEPTION","InRuleRecoveryException","Recoverable","initRecoverable","firstAfterRepMap","resyncFollows","DEFAULT_PARSER_CONFIG","attemptInRepetitionRecovery","getTokenToInsert","tokToInsert","NaN","isInsertedInRecovery","canTokenTypeBeInsertedInRecovery","canTokenTypeBeDeletedInRecovery","tryInRepetitionRecovery","grammarRule","grammarRuleArgs","lookAheadFunc","expectedTokType","reSyncTokType","findReSyncTokenType","savedLexerState","exportLexerState","passedResyncPoint","nextTokenWithoutResync","generateErrorMessage","getCurrRuleFullName","SAVE_ERROR","SKIP_TOKEN","addToResyncTokens","importLexerState","shouldInRepetitionRecoveryBeTried","expectTokAfterLastMatch","nextTokIdx","notStuck","isBackTracking","canPerformInRuleRecovery","getFollowsForInRuleRecovery","tokIdxInRule","grammarPath","getCurrentGrammarPath","getNextPossibleTokenTypes","tryInRuleRecovery","canRecoverWithSingleTokenInsertion","canRecoverWithSingleTokenDeletion","nextTok","consumeToken","expectedToken","mismatchedTok","isMisMatchedTokInFollows","possibleFollowsTokType","isNextTokenWhatIsExpected","isInCurrentRuleReSyncSet","followKey","getCurrFollowKey","currentRuleReSyncSet","getFollowSetFromFollowKey","allPossibleReSyncTokTypes","flattenFollowSet","foundMatch","resyncTokType","canMatch","RULE_STACK","currRuleShortName","getLastExplicitRuleShortName","currRuleIdx","getLastExplicitRuleOccurrenceIndex","prevRuleShortName","getPreviousExplicitRuleShortName","shortRuleNameToFullName","idxInCallingRule","inRule","buildFullFollowKeyStack","explicitRuleStack","explicitOccurrenceStack","RULE_OCCURRENCE_STACK","followStack","resyncTokens","reSyncTo","prodFunc","lookaheadFunc","dslMethodIdx","prodOccurrence","nextToksWalker","pathRuleStack","getHumanReadableRuleStack","pathOccurrenceStack","currShortName","getKeyForAutomaticLookahead","firstAfterRepInfo","getGAstProductions","walker","BITS_FOR_METHOD_TYPE","BITS_FOR_OCCURRENCE_IDX","OR_IDX","OPTION_IDX","MANY_IDX","AT_LEAST_ONE_IDX","MANY_SEP_IDX","AT_LEAST_ONE_SEP_IDX","ruleIdx","LLkLookaheadStrategy","_a","leftRecursionErrors","emptyAltErrors","validateEmptyOrAlternatives","ambiguousAltsErrors","emptyRepetitionErrors","allErrors","buildLookaheadForAlternation","buildLookaheadForOptional","LooksAhead","initLooksAhead","lookAheadFuncsCache","Map","preComputeLookaheadFunctions","repetitionMandatory","repetitionMandatoryWithSeparator","repetitionWithSeparator","collectMethods","prodIdx","laFunc","fullRuleNameToShort","setLaFuncCache","computeLookaheadFunc","prodKey","prodMaxLookahead","dslMethodName","getLaFuncFromCache","DslMethodsCollectorVisitor","dslMethods","reset","collectorVisitor","setNodeLocationOnlyOffset","currNodeLocation","newLocationInfo","isNaN","setNodeLocationFull","addTerminalToCst","tokenTypeName","children","addNoneTerminalToCst","ruleResult","NAME","defineNameProp","nameValue","defaultVisit","ctx","childrenNames","childrenNamesLength","currChildName","currChildArray","currChildArrayLength","currChild","createBaseSemanticVisitorConstructor","ruleNames","derivedConstructor","semanticProto","cstNode","validateVisitor","semanticDefinitionErrors","errorMessages","currDefError","_RULE_NAMES","createBaseVisitorConstructorWithDefaults","baseConstructor","withDefaultsProto","CstVisitorDefinitionError","CstVisitorDefinitionError2","visitorInstance","missingErrors","validateMissingCstMethods","missingRuleNames","MISSING_METHOD","methodName","TreeBuilder","initTreeBuilder","CST_STACK","outputCst","nodeLocationTracking","cstInvocationStateUpdate","cstFinallyStateUpdate","cstPostTerminal","cstPostNonTerminal","cstPostRule","setNodeLocationFromToken","setNodeLocationFromNode","setInitialNodeLocation","setInitialNodeLocationFullRecovery","cstPostRuleFull","setInitialNodeLocationFullRegular","setInitialNodeLocationOnlyOffsetRecovery","cstPostRuleOnlyOffset","setInitialNodeLocationOnlyOffsetRegular","location","fullRuleName","ruleCstNode","prevToken","consumedToken","rootCst","ruleCstResult","preCstNode","getBaseCstVisitorConstructor","baseCstVisitorConstructor","newBaseCstVisitorConstructor","gastProductionsCache","getBaseCstVisitorConstructorWithDefaults","baseCstVisitorWithDefaultsConstructor","newConstructor","LexerAdapter","initLexerAdapter","tokVector","tokVectorLength","newInput","selfAnalysisDone","END_OF_FILE","soughtIdx","resetLexerState","moveToTerminatedState","getLexerPosition","RecognizerApi","ACTION","impl","consume","consumeInternal","ruleToCall","subruleInternal","actionORMethodDef","optionInternal","altsOrOpts","orInternal","manyInternal","atLeastOneInternal","CONSUME","CONSUME1","CONSUME2","CONSUME3","CONSUME4","CONSUME5","CONSUME6","CONSUME7","CONSUME8","CONSUME9","SUBRULE","SUBRULE1","SUBRULE2","SUBRULE3","SUBRULE4","SUBRULE5","SUBRULE6","SUBRULE7","SUBRULE8","SUBRULE9","OPTION1","OPTION2","OPTION3","OPTION4","OPTION5","OPTION6","OPTION7","OPTION8","OPTION9","OR","OR1","OR2","OR3","OR4","OR5","OR6","OR7","OR8","OR9","MANY","MANY1","MANY2","MANY3","MANY4","MANY5","MANY6","MANY7","MANY8","MANY9","MANY_SEP","manySepFirstInternal","MANY_SEP1","MANY_SEP2","MANY_SEP3","MANY_SEP4","MANY_SEP5","MANY_SEP6","MANY_SEP7","MANY_SEP8","MANY_SEP9","AT_LEAST_ONE","AT_LEAST_ONE1","AT_LEAST_ONE2","AT_LEAST_ONE3","AT_LEAST_ONE4","AT_LEAST_ONE5","AT_LEAST_ONE6","AT_LEAST_ONE7","AT_LEAST_ONE8","AT_LEAST_ONE9","AT_LEAST_ONE_SEP","atLeastOneSepFirstInternal","AT_LEAST_ONE_SEP1","AT_LEAST_ONE_SEP2","AT_LEAST_ONE_SEP3","AT_LEAST_ONE_SEP4","AT_LEAST_ONE_SEP5","AT_LEAST_ONE_SEP6","AT_LEAST_ONE_SEP7","AT_LEAST_ONE_SEP8","AT_LEAST_ONE_SEP9","RULE","implementation","DEFAULT_RULE_CONFIG","definitionErrors","ruleImplementation","defineRule","OVERRIDE_RULE","ruleErrors","BACKTRACK","isBackTrackingStack","orgState","saveRecogState","reloadRecogState","getSerializedGastProductions","RecognizerEngine","initRecognizerEngine","tokenVocabulary","shortRuleNameToFull","ruleShortNameIdx","subruleIdx","tokensMap","allTokenTypes2","uniqueTokens","noTokenCategoriesUsed","tokenConstructor","resyncEnabled","recoveryValueFunc","shortName","invokeRuleWithTry","invokeRuleWithTry2","ruleInvocationStateUpdate","_len","_key","cst","invokeRuleCatch","ruleFinallyStateUpdate","invokeRuleWithTryCst","_len2","_key2","wrappedGrammarRule","originalGrammarAction","resyncEnabledConfig","isFirstInvokedRule","reSyncEnabled","recogError","partialCstResult","recoveredNode","optionInternalLogic","DEF","orgLookaheadFunction","laKey","atLeastOneInternalLogic","doSingleRepetition","raiseEarlyExitException","ERR_MSG","atLeastOneSepFirstInternalLogic","SEP","firstIterationLookaheadFunc","separatorLookAheadFunc","repetitionSepSecondInternal","manyInternalLogic","lookaheadFunction","manySepFirstInternalLogic","firstIterationLaFunc","nextTerminalAfterWalker","beforeIteration","afterIteration","altIdxToTake","chosenAlternative","ALT","raiseNoAltException","isAtEndOfInput","firstRedundantTok","ARGS","subruleInternalError","consumeInternalError","eFromConsumption","consumeInternalRecovery","eFromInRuleRecovery","savedErrors","savedRuleStack","lexerState","fullName","ErrorHandler","initErrorHandler","_errors","context","ruleOccurrenceStack","newErrors","userDefinedErrMsg","lookAheadPathsPerAlternative","insideProdPaths","actualTokens","errMsgTypes","ContentAssist","initContentAssist","computeContentAssist","startRuleName","precedingInput","startRuleGast","topRuleName","gastProductions","topProduction","nextPossibleTokenTypes","RECORDING_NULL_OBJECT","description","HANDLE_SEPARATOR","MAX_METHOD_IDX","pow","RFT","RECORDING_PHASE_TOKEN","RECORDING_PHASE_CSTNODE","GastRecorder","initGastRecorder","recordingProdStack","RECORDING_PHASE","enableRecording","arg1","arg2","consumeInternalRecord","subruleInternalRecord","optionInternalRecord","orInternalRecord","manyInternalRecord","manySepFirstInternalRecord","atLeastOneInternalRecord","atLeastOneSepFirstInternalRecord","ACTION_RECORD","BACKTRACK_RECORD","LA_RECORD","disableRecording","that","topLevelRuleRecord","newTopLevelRule","originalError","KNOWN_RECORDER_ERROR","mutabilityError","recordProd","recordOrProd","assertMethodIdxIsValid","getIdxSuffix","JSON","stringify","prevProd","newNoneTerminal","prodConstructor","mainProdArg","handleSep","grammarAction","newProd","MAX_LOOKAHEAD","hasOptions","newOrProd","IGNORE_AMBIGUITIES","currAltFlat","PerformanceTracer","initPerformanceTracer","userTraceInitPerf","traceIsNumber","applyMixins","derivedCtor","baseCtors","baseCtor","baseProto","getOwnPropertyNames","propName","basePropDescriptor","getOwnPropertyDescriptor","ParserDefinitionErrorType2","Parser","performSelfAnalysis","parserInstance","defErrorsMsgs","wrappedRule","recordedRuleGast","resolverErrors","validationErrors","lookaheadValidationErrors","allFollows","_b","initialize","DEFER_DEFINITION_ERRORS_HANDLING","CstParser2","configClone"],"sources":["D:\\Repos\\NIKE-DJANGO\\Jord\\l4fycy\\node_modules\\src\\libs\\chevrotain.js"],"sourcesContent":["const { CstParser, Lexer, createToken } = (() => {\n  /** Detect free variable `global` from Node.js. */\n  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global\n\n  const freeGlobal$1 = freeGlobal\n\n  /** Detect free variable `self`. */\n  var freeSelf = typeof self == 'object' && self && self.Object === Object && self\n\n  /** Used as a reference to the global object. */\n  var root = freeGlobal$1 || freeSelf || Function('return this')()\n\n  const root$1 = root\n\n  /** Built-in value references. */\n  var Symbol$1 = root$1.Symbol\n\n  const Symbol$2 = Symbol$1\n\n  /** Used for built-in method references. */\n  var objectProto$j = Object.prototype\n\n  /** Used to check objects for own properties. */\n  var hasOwnProperty$g = objectProto$j.hasOwnProperty\n\n  /**\n   * Used to resolve the\n   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n   * of values.\n   */\n  var nativeObjectToString$1 = objectProto$j.toString\n\n  /** Built-in value references. */\n  var symToStringTag$1 = Symbol$2 ? Symbol$2.toStringTag : undefined\n\n  /**\n   * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n   *\n   * @private\n   * @param {*} value The value to query.\n   * @returns {string} Returns the raw `toStringTag`.\n   */\n  function getRawTag(value) {\n    var isOwn = hasOwnProperty$g.call(value, symToStringTag$1),\n      tag = value[symToStringTag$1]\n\n    try {\n      value[symToStringTag$1] = undefined\n      var unmasked = true\n    } catch (e) {}\n\n    var result = nativeObjectToString$1.call(value)\n    if (unmasked) {\n      if (isOwn) {\n        value[symToStringTag$1] = tag\n      } else {\n        delete value[symToStringTag$1]\n      }\n    }\n    return result\n  }\n\n  /** Used for built-in method references. */\n  var objectProto$i = Object.prototype\n\n  /**\n   * Used to resolve the\n   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n   * of values.\n   */\n  var nativeObjectToString = objectProto$i.toString\n\n  /**\n   * Converts `value` to a string using `Object.prototype.toString`.\n   *\n   * @private\n   * @param {*} value The value to convert.\n   * @returns {string} Returns the converted string.\n   */\n  function objectToString(value) {\n    return nativeObjectToString.call(value)\n  }\n\n  /** `Object#toString` result references. */\n  var nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]'\n\n  /** Built-in value references. */\n  var symToStringTag = Symbol$2 ? Symbol$2.toStringTag : undefined\n\n  /**\n   * The base implementation of `getTag` without fallbacks for buggy environments.\n   *\n   * @private\n   * @param {*} value The value to query.\n   * @returns {string} Returns the `toStringTag`.\n   */\n  function baseGetTag(value) {\n    if (value == null) {\n      return value === undefined ? undefinedTag : nullTag\n    }\n    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value)\n  }\n\n  /**\n   * Checks if `value` is object-like. A value is object-like if it's not `null`\n   * and has a `typeof` result of \"object\".\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n   * @example\n   *\n   * _.isObjectLike({});\n   * // => true\n   *\n   * _.isObjectLike([1, 2, 3]);\n   * // => true\n   *\n   * _.isObjectLike(_.noop);\n   * // => false\n   *\n   * _.isObjectLike(null);\n   * // => false\n   */\n  function isObjectLike(value) {\n    return value != null && typeof value == 'object'\n  }\n\n  /** `Object#toString` result references. */\n  var symbolTag$3 = '[object Symbol]'\n\n  /**\n   * Checks if `value` is classified as a `Symbol` primitive or object.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n   * @example\n   *\n   * _.isSymbol(Symbol.iterator);\n   * // => true\n   *\n   * _.isSymbol('abc');\n   * // => false\n   */\n  function isSymbol(value) {\n    return typeof value == 'symbol' || (isObjectLike(value) && baseGetTag(value) == symbolTag$3)\n  }\n\n  /**\n   * A specialized version of `_.map` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the new mapped array.\n   */\n  function arrayMap(array, iteratee) {\n    var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length)\n\n    while (++index < length) {\n      result[index] = iteratee(array[index], index, array)\n    }\n    return result\n  }\n\n  /**\n   * Checks if `value` is classified as an `Array` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n   * @example\n   *\n   * _.isArray([1, 2, 3]);\n   * // => true\n   *\n   * _.isArray(document.body.children);\n   * // => false\n   *\n   * _.isArray('abc');\n   * // => false\n   *\n   * _.isArray(_.noop);\n   * // => false\n   */\n  var isArray = Array.isArray\n\n  const isArray$1 = isArray\n\n  /** Used as references for various `Number` constants. */\n  var INFINITY$3 = 1 / 0\n\n  /** Used to convert symbols to primitives and strings. */\n  var symbolProto$2 = Symbol$2 ? Symbol$2.prototype : undefined,\n    symbolToString = symbolProto$2 ? symbolProto$2.toString : undefined\n\n  /**\n   * The base implementation of `_.toString` which doesn't convert nullish\n   * values to empty strings.\n   *\n   * @private\n   * @param {*} value The value to process.\n   * @returns {string} Returns the string.\n   */\n  function baseToString(value) {\n    // Exit early for strings to avoid a performance hit in some environments.\n    if (typeof value == 'string') {\n      return value\n    }\n    if (isArray$1(value)) {\n      // Recursively convert values (susceptible to call stack limits).\n      return arrayMap(value, baseToString) + ''\n    }\n    if (isSymbol(value)) {\n      return symbolToString ? symbolToString.call(value) : ''\n    }\n    var result = value + ''\n    return result == '0' && 1 / value == -INFINITY$3 ? '-0' : result\n  }\n\n  /** Used to match a single whitespace character. */\n  var reWhitespace = /\\s/\n\n  /**\n   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace\n   * character of `string`.\n   *\n   * @private\n   * @param {string} string The string to inspect.\n   * @returns {number} Returns the index of the last non-whitespace character.\n   */\n  function trimmedEndIndex(string) {\n    var index = string.length\n\n    while (index-- && reWhitespace.test(string.charAt(index))) {}\n    return index\n  }\n\n  /** Used to match leading whitespace. */\n  var reTrimStart = /^\\s+/\n\n  /**\n   * The base implementation of `_.trim`.\n   *\n   * @private\n   * @param {string} string The string to trim.\n   * @returns {string} Returns the trimmed string.\n   */\n  function baseTrim(string) {\n    return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '') : string\n  }\n\n  /**\n   * Checks if `value` is the\n   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n   * @example\n   *\n   * _.isObject({});\n   * // => true\n   *\n   * _.isObject([1, 2, 3]);\n   * // => true\n   *\n   * _.isObject(_.noop);\n   * // => true\n   *\n   * _.isObject(null);\n   * // => false\n   */\n  function isObject(value) {\n    var type = typeof value\n    return value != null && (type == 'object' || type == 'function')\n  }\n\n  /** Used as references for various `Number` constants. */\n  var NAN = 0 / 0\n\n  /** Used to detect bad signed hexadecimal string values. */\n  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i\n\n  /** Used to detect binary string values. */\n  var reIsBinary = /^0b[01]+$/i\n\n  /** Used to detect octal string values. */\n  var reIsOctal = /^0o[0-7]+$/i\n\n  /** Built-in method references without a dependency on `root`. */\n  var freeParseInt = parseInt\n\n  /**\n   * Converts `value` to a number.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to process.\n   * @returns {number} Returns the number.\n   * @example\n   *\n   * _.toNumber(3.2);\n   * // => 3.2\n   *\n   * _.toNumber(Number.MIN_VALUE);\n   * // => 5e-324\n   *\n   * _.toNumber(Infinity);\n   * // => Infinity\n   *\n   * _.toNumber('3.2');\n   * // => 3.2\n   */\n  function toNumber(value) {\n    if (typeof value == 'number') {\n      return value\n    }\n    if (isSymbol(value)) {\n      return NAN\n    }\n    if (isObject(value)) {\n      var other = typeof value.valueOf == 'function' ? value.valueOf() : value\n      value = isObject(other) ? other + '' : other\n    }\n    if (typeof value != 'string') {\n      return value === 0 ? value : +value\n    }\n    value = baseTrim(value)\n    var isBinary = reIsBinary.test(value)\n    return isBinary || reIsOctal.test(value)\n      ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n      : reIsBadHex.test(value)\n      ? NAN\n      : +value\n  }\n\n  /** Used as references for various `Number` constants. */\n  var INFINITY$2 = 1 / 0,\n    MAX_INTEGER = 1.7976931348623157e308\n\n  /**\n   * Converts `value` to a finite number.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.12.0\n   * @category Lang\n   * @param {*} value The value to convert.\n   * @returns {number} Returns the converted number.\n   * @example\n   *\n   * _.toFinite(3.2);\n   * // => 3.2\n   *\n   * _.toFinite(Number.MIN_VALUE);\n   * // => 5e-324\n   *\n   * _.toFinite(Infinity);\n   * // => 1.7976931348623157e+308\n   *\n   * _.toFinite('3.2');\n   * // => 3.2\n   */\n  function toFinite(value) {\n    if (!value) {\n      return value === 0 ? value : 0\n    }\n    value = toNumber(value)\n    if (value === INFINITY$2 || value === -INFINITY$2) {\n      var sign = value < 0 ? -1 : 1\n      return sign * MAX_INTEGER\n    }\n    return value === value ? value : 0\n  }\n\n  /**\n   * Converts `value` to an integer.\n   *\n   * **Note:** This method is loosely based on\n   * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to convert.\n   * @returns {number} Returns the converted integer.\n   * @example\n   *\n   * _.toInteger(3.2);\n   * // => 3\n   *\n   * _.toInteger(Number.MIN_VALUE);\n   * // => 0\n   *\n   * _.toInteger(Infinity);\n   * // => 1.7976931348623157e+308\n   *\n   * _.toInteger('3.2');\n   * // => 3\n   */\n  function toInteger(value) {\n    var result = toFinite(value),\n      remainder = result % 1\n\n    return result === result ? (remainder ? result - remainder : result) : 0\n  }\n\n  /**\n   * This method returns the first argument it receives.\n   *\n   * @static\n   * @since 0.1.0\n   * @memberOf _\n   * @category Util\n   * @param {*} value Any value.\n   * @returns {*} Returns `value`.\n   * @example\n   *\n   * var object = { 'a': 1 };\n   *\n   * console.log(_.identity(object) === object);\n   * // => true\n   */\n  function identity(value) {\n    return value\n  }\n\n  /** `Object#toString` result references. */\n  var asyncTag = '[object AsyncFunction]',\n    funcTag$2 = '[object Function]',\n    genTag$1 = '[object GeneratorFunction]',\n    proxyTag = '[object Proxy]'\n\n  /**\n   * Checks if `value` is classified as a `Function` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n   * @example\n   *\n   * _.isFunction(_);\n   * // => true\n   *\n   * _.isFunction(/abc/);\n   * // => false\n   */\n  function isFunction(value) {\n    if (!isObject(value)) {\n      return false\n    }\n    // The use of `Object#toString` avoids issues with the `typeof` operator\n    // in Safari 9 which returns 'object' for typed arrays and other constructors.\n    var tag = baseGetTag(value)\n    return tag == funcTag$2 || tag == genTag$1 || tag == asyncTag || tag == proxyTag\n  }\n\n  /** Used to detect overreaching core-js shims. */\n  var coreJsData = root$1['__core-js_shared__']\n\n  const coreJsData$1 = coreJsData\n\n  /** Used to detect methods masquerading as native. */\n  var maskSrcKey = (function () {\n    var uid = /[^.]+$/.exec((coreJsData$1 && coreJsData$1.keys && coreJsData$1.keys.IE_PROTO) || '')\n    return uid ? 'Symbol(src)_1.' + uid : ''\n  })()\n\n  /**\n   * Checks if `func` has its source masked.\n   *\n   * @private\n   * @param {Function} func The function to check.\n   * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n   */\n  function isMasked(func) {\n    return !!maskSrcKey && maskSrcKey in func\n  }\n\n  /** Used for built-in method references. */\n  var funcProto$1 = Function.prototype\n\n  /** Used to resolve the decompiled source of functions. */\n  var funcToString$1 = funcProto$1.toString\n\n  /**\n   * Converts `func` to its source code.\n   *\n   * @private\n   * @param {Function} func The function to convert.\n   * @returns {string} Returns the source code.\n   */\n  function toSource(func) {\n    if (func != null) {\n      try {\n        return funcToString$1.call(func)\n      } catch (e) {}\n      try {\n        return func + ''\n      } catch (e) {}\n    }\n    return ''\n  }\n\n  /**\n   * Used to match `RegExp`\n   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n   */\n  var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g\n\n  /** Used to detect host constructors (Safari). */\n  var reIsHostCtor = /^\\[object .+?Constructor\\]$/\n\n  /** Used for built-in method references. */\n  var funcProto = Function.prototype,\n    objectProto$h = Object.prototype\n\n  /** Used to resolve the decompiled source of functions. */\n  var funcToString = funcProto.toString\n\n  /** Used to check objects for own properties. */\n  var hasOwnProperty$f = objectProto$h.hasOwnProperty\n\n  /** Used to detect if a method is native. */\n  var reIsNative = RegExp(\n    '^' +\n      funcToString\n        .call(hasOwnProperty$f)\n        .replace(reRegExpChar, '\\\\$&')\n        .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') +\n      '$',\n  )\n\n  /**\n   * The base implementation of `_.isNative` without bad shim checks.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a native function,\n   *  else `false`.\n   */\n  function baseIsNative(value) {\n    if (!isObject(value) || isMasked(value)) {\n      return false\n    }\n    var pattern = isFunction(value) ? reIsNative : reIsHostCtor\n    return pattern.test(toSource(value))\n  }\n\n  /**\n   * Gets the value at `key` of `object`.\n   *\n   * @private\n   * @param {Object} [object] The object to query.\n   * @param {string} key The key of the property to get.\n   * @returns {*} Returns the property value.\n   */\n  function getValue(object, key) {\n    return object == null ? undefined : object[key]\n  }\n\n  /**\n   * Gets the native function at `key` of `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {string} key The key of the method to get.\n   * @returns {*} Returns the function if it's native, else `undefined`.\n   */\n  function getNative(object, key) {\n    var value = getValue(object, key)\n    return baseIsNative(value) ? value : undefined\n  }\n\n  /* Built-in method references that are verified to be native. */\n  var WeakMap = getNative(root$1, 'WeakMap')\n\n  const WeakMap$1 = WeakMap\n\n  /** Built-in value references. */\n  var objectCreate = Object.create\n\n  /**\n   * The base implementation of `_.create` without support for assigning\n   * properties to the created object.\n   *\n   * @private\n   * @param {Object} proto The object to inherit from.\n   * @returns {Object} Returns the new object.\n   */\n  var baseCreate = (function () {\n    function object() {}\n    return function (proto) {\n      if (!isObject(proto)) {\n        return {}\n      }\n      if (objectCreate) {\n        return objectCreate(proto)\n      }\n      object.prototype = proto\n      var result = new object()\n      object.prototype = undefined\n      return result\n    }\n  })()\n\n  const baseCreate$1 = baseCreate\n\n  /**\n   * A faster alternative to `Function#apply`, this function invokes `func`\n   * with the `this` binding of `thisArg` and the arguments of `args`.\n   *\n   * @private\n   * @param {Function} func The function to invoke.\n   * @param {*} thisArg The `this` binding of `func`.\n   * @param {Array} args The arguments to invoke `func` with.\n   * @returns {*} Returns the result of `func`.\n   */\n  function apply(func, thisArg, args) {\n    switch (args.length) {\n      case 0:\n        return func.call(thisArg)\n      case 1:\n        return func.call(thisArg, args[0])\n      case 2:\n        return func.call(thisArg, args[0], args[1])\n      case 3:\n        return func.call(thisArg, args[0], args[1], args[2])\n    }\n    return func.apply(thisArg, args)\n  }\n\n  /**\n   * This method returns `undefined`.\n   *\n   * @static\n   * @memberOf _\n   * @since 2.3.0\n   * @category Util\n   * @example\n   *\n   * _.times(2, _.noop);\n   * // => [undefined, undefined]\n   */\n  function noop() {\n    // No operation performed.\n  }\n\n  /**\n   * Copies the values of `source` to `array`.\n   *\n   * @private\n   * @param {Array} source The array to copy values from.\n   * @param {Array} [array=[]] The array to copy values to.\n   * @returns {Array} Returns `array`.\n   */\n  function copyArray(source, array) {\n    var index = -1,\n      length = source.length\n\n    array || (array = Array(length))\n    while (++index < length) {\n      array[index] = source[index]\n    }\n    return array\n  }\n\n  /** Used to detect hot functions by number of calls within a span of milliseconds. */\n  var HOT_COUNT = 800,\n    HOT_SPAN = 16\n\n  /* Built-in method references for those with the same name as other `lodash` methods. */\n  var nativeNow = Date.now\n\n  /**\n   * Creates a function that'll short out and invoke `identity` instead\n   * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n   * milliseconds.\n   *\n   * @private\n   * @param {Function} func The function to restrict.\n   * @returns {Function} Returns the new shortable function.\n   */\n  function shortOut(func) {\n    var count = 0,\n      lastCalled = 0\n\n    return function () {\n      var stamp = nativeNow(),\n        remaining = HOT_SPAN - (stamp - lastCalled)\n\n      lastCalled = stamp\n      if (remaining > 0) {\n        if (++count >= HOT_COUNT) {\n          return arguments[0]\n        }\n      } else {\n        count = 0\n      }\n      return func.apply(undefined, arguments)\n    }\n  }\n\n  /**\n   * Creates a function that returns `value`.\n   *\n   * @static\n   * @memberOf _\n   * @since 2.4.0\n   * @category Util\n   * @param {*} value The value to return from the new function.\n   * @returns {Function} Returns the new constant function.\n   * @example\n   *\n   * var objects = _.times(2, _.constant({ 'a': 1 }));\n   *\n   * console.log(objects);\n   * // => [{ 'a': 1 }, { 'a': 1 }]\n   *\n   * console.log(objects[0] === objects[1]);\n   * // => true\n   */\n  function constant(value) {\n    return function () {\n      return value\n    }\n  }\n\n  var defineProperty = (function () {\n    try {\n      var func = getNative(Object, 'defineProperty')\n      func({}, '', {})\n      return func\n    } catch (e) {}\n  })()\n\n  const defineProperty$1 = defineProperty\n\n  /**\n   * The base implementation of `setToString` without support for hot loop shorting.\n   *\n   * @private\n   * @param {Function} func The function to modify.\n   * @param {Function} string The `toString` result.\n   * @returns {Function} Returns `func`.\n   */\n  var baseSetToString = !defineProperty$1\n    ? identity\n    : function (func, string) {\n        return defineProperty$1(func, 'toString', {\n          configurable: true,\n          enumerable: false,\n          value: constant(string),\n          writable: true,\n        })\n      }\n\n  const baseSetToString$1 = baseSetToString\n\n  /**\n   * Sets the `toString` method of `func` to return `string`.\n   *\n   * @private\n   * @param {Function} func The function to modify.\n   * @param {Function} string The `toString` result.\n   * @returns {Function} Returns `func`.\n   */\n  var setToString = shortOut(baseSetToString$1)\n\n  const setToString$1 = setToString\n\n  /**\n   * A specialized version of `_.forEach` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayEach(array, iteratee) {\n    var index = -1,\n      length = array == null ? 0 : array.length\n\n    while (++index < length) {\n      if (iteratee(array[index], index, array) === false) {\n        break\n      }\n    }\n    return array\n  }\n\n  /**\n   * The base implementation of `_.findIndex` and `_.findLastIndex` without\n   * support for iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {Function} predicate The function invoked per iteration.\n   * @param {number} fromIndex The index to search from.\n   * @param {boolean} [fromRight] Specify iterating from right to left.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseFindIndex(array, predicate, fromIndex, fromRight) {\n    var length = array.length,\n      index = fromIndex + (fromRight ? 1 : -1)\n\n    while (fromRight ? index-- : ++index < length) {\n      if (predicate(array[index], index, array)) {\n        return index\n      }\n    }\n    return -1\n  }\n\n  /**\n   * The base implementation of `_.isNaN` without support for number objects.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n   */\n  function baseIsNaN(value) {\n    return value !== value\n  }\n\n  /**\n   * A specialized version of `_.indexOf` which performs strict equality\n   * comparisons of values, i.e. `===`.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function strictIndexOf(array, value, fromIndex) {\n    var index = fromIndex - 1,\n      length = array.length\n\n    while (++index < length) {\n      if (array[index] === value) {\n        return index\n      }\n    }\n    return -1\n  }\n\n  /**\n   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseIndexOf(array, value, fromIndex) {\n    return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex)\n  }\n\n  /**\n   * A specialized version of `_.includes` for arrays without support for\n   * specifying an index to search from.\n   *\n   * @private\n   * @param {Array} [array] The array to inspect.\n   * @param {*} target The value to search for.\n   * @returns {boolean} Returns `true` if `target` is found, else `false`.\n   */\n  function arrayIncludes(array, value) {\n    var length = array == null ? 0 : array.length\n    return !!length && baseIndexOf(array, value, 0) > -1\n  }\n\n  /** Used as references for various `Number` constants. */\n  var MAX_SAFE_INTEGER$1 = 9007199254740991\n\n  /** Used to detect unsigned integer values. */\n  var reIsUint = /^(?:0|[1-9]\\d*)$/\n\n  /**\n   * Checks if `value` is a valid array-like index.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n   */\n  function isIndex(value, length) {\n    var type = typeof value\n    length = length == null ? MAX_SAFE_INTEGER$1 : length\n\n    return (\n      !!length &&\n      (type == 'number' || (type != 'symbol' && reIsUint.test(value))) &&\n      value > -1 &&\n      value % 1 == 0 &&\n      value < length\n    )\n  }\n\n  /**\n   * The base implementation of `assignValue` and `assignMergeValue` without\n   * value checks.\n   *\n   * @private\n   * @param {Object} object The object to modify.\n   * @param {string} key The key of the property to assign.\n   * @param {*} value The value to assign.\n   */\n  function baseAssignValue(object, key, value) {\n    if (key == '__proto__' && defineProperty$1) {\n      defineProperty$1(object, key, {\n        configurable: true,\n        enumerable: true,\n        value: value,\n        writable: true,\n      })\n    } else {\n      object[key] = value\n    }\n  }\n\n  /**\n   * Performs a\n   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n   * comparison between two values to determine if they are equivalent.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to compare.\n   * @param {*} other The other value to compare.\n   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n   * @example\n   *\n   * var object = { 'a': 1 };\n   * var other = { 'a': 1 };\n   *\n   * _.eq(object, object);\n   * // => true\n   *\n   * _.eq(object, other);\n   * // => false\n   *\n   * _.eq('a', 'a');\n   * // => true\n   *\n   * _.eq('a', Object('a'));\n   * // => false\n   *\n   * _.eq(NaN, NaN);\n   * // => true\n   */\n  function eq(value, other) {\n    return value === other || (value !== value && other !== other)\n  }\n\n  /** Used for built-in method references. */\n  var objectProto$g = Object.prototype\n\n  /** Used to check objects for own properties. */\n  var hasOwnProperty$e = objectProto$g.hasOwnProperty\n\n  /**\n   * Assigns `value` to `key` of `object` if the existing value is not equivalent\n   * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n   * for equality comparisons.\n   *\n   * @private\n   * @param {Object} object The object to modify.\n   * @param {string} key The key of the property to assign.\n   * @param {*} value The value to assign.\n   */\n  function assignValue(object, key, value) {\n    var objValue = object[key]\n    if (!(hasOwnProperty$e.call(object, key) && eq(objValue, value)) || (value === undefined && !(key in object))) {\n      baseAssignValue(object, key, value)\n    }\n  }\n\n  /**\n   * Copies properties of `source` to `object`.\n   *\n   * @private\n   * @param {Object} source The object to copy properties from.\n   * @param {Array} props The property identifiers to copy.\n   * @param {Object} [object={}] The object to copy properties to.\n   * @param {Function} [customizer] The function to customize copied values.\n   * @returns {Object} Returns `object`.\n   */\n  function copyObject(source, props, object, customizer) {\n    var isNew = !object\n    object || (object = {})\n\n    var index = -1,\n      length = props.length\n\n    while (++index < length) {\n      var key = props[index]\n\n      var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined\n\n      if (newValue === undefined) {\n        newValue = source[key]\n      }\n      if (isNew) {\n        baseAssignValue(object, key, newValue)\n      } else {\n        assignValue(object, key, newValue)\n      }\n    }\n    return object\n  }\n\n  /* Built-in method references for those with the same name as other `lodash` methods. */\n  var nativeMax$3 = Math.max\n\n  /**\n   * A specialized version of `baseRest` which transforms the rest array.\n   *\n   * @private\n   * @param {Function} func The function to apply a rest parameter to.\n   * @param {number} [start=func.length-1] The start position of the rest parameter.\n   * @param {Function} transform The rest array transform.\n   * @returns {Function} Returns the new function.\n   */\n  function overRest(func, start, transform) {\n    start = nativeMax$3(start === undefined ? func.length - 1 : start, 0)\n    return function () {\n      var args = arguments,\n        index = -1,\n        length = nativeMax$3(args.length - start, 0),\n        array = Array(length)\n\n      while (++index < length) {\n        array[index] = args[start + index]\n      }\n      index = -1\n      var otherArgs = Array(start + 1)\n      while (++index < start) {\n        otherArgs[index] = args[index]\n      }\n      otherArgs[start] = transform(array)\n      return apply(func, this, otherArgs)\n    }\n  }\n\n  /**\n   * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n   *\n   * @private\n   * @param {Function} func The function to apply a rest parameter to.\n   * @param {number} [start=func.length-1] The start position of the rest parameter.\n   * @returns {Function} Returns the new function.\n   */\n  function baseRest(func, start) {\n    return setToString$1(overRest(func, start, identity), func + '')\n  }\n\n  /** Used as references for various `Number` constants. */\n  var MAX_SAFE_INTEGER = 9007199254740991\n\n  /**\n   * Checks if `value` is a valid array-like length.\n   *\n   * **Note:** This method is loosely based on\n   * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n   * @example\n   *\n   * _.isLength(3);\n   * // => true\n   *\n   * _.isLength(Number.MIN_VALUE);\n   * // => false\n   *\n   * _.isLength(Infinity);\n   * // => false\n   *\n   * _.isLength('3');\n   * // => false\n   */\n  function isLength(value) {\n    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER\n  }\n\n  /**\n   * Checks if `value` is array-like. A value is considered array-like if it's\n   * not a function and has a `value.length` that's an integer greater than or\n   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n   * @example\n   *\n   * _.isArrayLike([1, 2, 3]);\n   * // => true\n   *\n   * _.isArrayLike(document.body.children);\n   * // => true\n   *\n   * _.isArrayLike('abc');\n   * // => true\n   *\n   * _.isArrayLike(_.noop);\n   * // => false\n   */\n  function isArrayLike(value) {\n    return value != null && isLength(value.length) && !isFunction(value)\n  }\n\n  /**\n   * Checks if the given arguments are from an iteratee call.\n   *\n   * @private\n   * @param {*} value The potential iteratee value argument.\n   * @param {*} index The potential iteratee index or key argument.\n   * @param {*} object The potential iteratee object argument.\n   * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n   *  else `false`.\n   */\n  function isIterateeCall(value, index, object) {\n    if (!isObject(object)) {\n      return false\n    }\n    var type = typeof index\n    if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) {\n      return eq(object[index], value)\n    }\n    return false\n  }\n\n  /**\n   * Creates a function like `_.assign`.\n   *\n   * @private\n   * @param {Function} assigner The function to assign values.\n   * @returns {Function} Returns the new assigner function.\n   */\n  function createAssigner(assigner) {\n    return baseRest(function (object, sources) {\n      var index = -1,\n        length = sources.length,\n        customizer = length > 1 ? sources[length - 1] : undefined,\n        guard = length > 2 ? sources[2] : undefined\n\n      customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined\n\n      if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n        customizer = length < 3 ? undefined : customizer\n        length = 1\n      }\n      object = Object(object)\n      while (++index < length) {\n        var source = sources[index]\n        if (source) {\n          assigner(object, source, index, customizer)\n        }\n      }\n      return object\n    })\n  }\n\n  /** Used for built-in method references. */\n  var objectProto$f = Object.prototype\n\n  /**\n   * Checks if `value` is likely a prototype object.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n   */\n  function isPrototype(value) {\n    var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$f\n\n    return value === proto\n  }\n\n  /**\n   * The base implementation of `_.times` without support for iteratee shorthands\n   * or max array length checks.\n   *\n   * @private\n   * @param {number} n The number of times to invoke `iteratee`.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the array of results.\n   */\n  function baseTimes(n, iteratee) {\n    var index = -1,\n      result = Array(n)\n\n    while (++index < n) {\n      result[index] = iteratee(index)\n    }\n    return result\n  }\n\n  /** `Object#toString` result references. */\n  var argsTag$3 = '[object Arguments]'\n\n  /**\n   * The base implementation of `_.isArguments`.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n   */\n  function baseIsArguments(value) {\n    return isObjectLike(value) && baseGetTag(value) == argsTag$3\n  }\n\n  /** Used for built-in method references. */\n  var objectProto$e = Object.prototype\n\n  /** Used to check objects for own properties. */\n  var hasOwnProperty$d = objectProto$e.hasOwnProperty\n\n  /** Built-in value references. */\n  var propertyIsEnumerable$1 = objectProto$e.propertyIsEnumerable\n\n  /**\n   * Checks if `value` is likely an `arguments` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n   *  else `false`.\n   * @example\n   *\n   * _.isArguments(function() { return arguments; }());\n   * // => true\n   *\n   * _.isArguments([1, 2, 3]);\n   * // => false\n   */\n  var isArguments = baseIsArguments(\n    (function () {\n      return arguments\n    })(),\n  )\n    ? baseIsArguments\n    : function (value) {\n        return (\n          isObjectLike(value) && hasOwnProperty$d.call(value, 'callee') && !propertyIsEnumerable$1.call(value, 'callee')\n        )\n      }\n\n  const isArguments$1 = isArguments\n\n  /**\n   * This method returns `false`.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.13.0\n   * @category Util\n   * @returns {boolean} Returns `false`.\n   * @example\n   *\n   * _.times(2, _.stubFalse);\n   * // => [false, false]\n   */\n  function stubFalse() {\n    return false\n  }\n\n  /** Detect free variable `exports`. */\n  var freeExports$2 = typeof exports == 'object' && exports && !exports.nodeType && exports\n\n  /** Detect free variable `module`. */\n  var freeModule$2 = freeExports$2 && typeof module == 'object' && module && !module.nodeType && module\n\n  /** Detect the popular CommonJS extension `module.exports`. */\n  var moduleExports$2 = freeModule$2 && freeModule$2.exports === freeExports$2\n\n  /** Built-in value references. */\n  var Buffer$1 = moduleExports$2 ? root$1.Buffer : undefined\n\n  /* Built-in method references for those with the same name as other `lodash` methods. */\n  var nativeIsBuffer = Buffer$1 ? Buffer$1.isBuffer : undefined\n\n  /**\n   * Checks if `value` is a buffer.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.3.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n   * @example\n   *\n   * _.isBuffer(new Buffer(2));\n   * // => true\n   *\n   * _.isBuffer(new Uint8Array(2));\n   * // => false\n   */\n  var isBuffer = nativeIsBuffer || stubFalse\n\n  const isBuffer$1 = isBuffer\n\n  /** `Object#toString` result references. */\n  var argsTag$2 = '[object Arguments]',\n    arrayTag$2 = '[object Array]',\n    boolTag$3 = '[object Boolean]',\n    dateTag$3 = '[object Date]',\n    errorTag$2 = '[object Error]',\n    funcTag$1 = '[object Function]',\n    mapTag$6 = '[object Map]',\n    numberTag$3 = '[object Number]',\n    objectTag$3 = '[object Object]',\n    regexpTag$4 = '[object RegExp]',\n    setTag$6 = '[object Set]',\n    stringTag$4 = '[object String]',\n    weakMapTag$2 = '[object WeakMap]'\n\n  var arrayBufferTag$3 = '[object ArrayBuffer]',\n    dataViewTag$4 = '[object DataView]',\n    float32Tag$2 = '[object Float32Array]',\n    float64Tag$2 = '[object Float64Array]',\n    int8Tag$2 = '[object Int8Array]',\n    int16Tag$2 = '[object Int16Array]',\n    int32Tag$2 = '[object Int32Array]',\n    uint8Tag$2 = '[object Uint8Array]',\n    uint8ClampedTag$2 = '[object Uint8ClampedArray]',\n    uint16Tag$2 = '[object Uint16Array]',\n    uint32Tag$2 = '[object Uint32Array]'\n\n  /** Used to identify `toStringTag` values of typed arrays. */\n  var typedArrayTags = {}\n  typedArrayTags[float32Tag$2] = typedArrayTags[float64Tag$2] = typedArrayTags[int8Tag$2] = typedArrayTags[\n    int16Tag$2\n  ] = typedArrayTags[int32Tag$2] = typedArrayTags[uint8Tag$2] = typedArrayTags[uint8ClampedTag$2] = typedArrayTags[\n    uint16Tag$2\n  ] = typedArrayTags[uint32Tag$2] = true\n  typedArrayTags[argsTag$2] = typedArrayTags[arrayTag$2] = typedArrayTags[arrayBufferTag$3] = typedArrayTags[\n    boolTag$3\n  ] = typedArrayTags[dataViewTag$4] = typedArrayTags[dateTag$3] = typedArrayTags[errorTag$2] = typedArrayTags[\n    funcTag$1\n  ] = typedArrayTags[mapTag$6] = typedArrayTags[numberTag$3] = typedArrayTags[objectTag$3] = typedArrayTags[\n    regexpTag$4\n  ] = typedArrayTags[setTag$6] = typedArrayTags[stringTag$4] = typedArrayTags[weakMapTag$2] = false\n\n  /**\n   * The base implementation of `_.isTypedArray` without Node.js optimizations.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n   */\n  function baseIsTypedArray(value) {\n    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)]\n  }\n\n  /**\n   * The base implementation of `_.unary` without support for storing metadata.\n   *\n   * @private\n   * @param {Function} func The function to cap arguments for.\n   * @returns {Function} Returns the new capped function.\n   */\n  function baseUnary(func) {\n    return function (value) {\n      return func(value)\n    }\n  }\n\n  /** Detect free variable `exports`. */\n  var freeExports$1 = typeof exports == 'object' && exports && !exports.nodeType && exports\n\n  /** Detect free variable `module`. */\n  var freeModule$1 = freeExports$1 && typeof module == 'object' && module && !module.nodeType && module\n\n  /** Detect the popular CommonJS extension `module.exports`. */\n  var moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1\n\n  /** Detect free variable `process` from Node.js. */\n  var freeProcess = moduleExports$1 && freeGlobal$1.process\n\n  /** Used to access faster Node.js helpers. */\n  var nodeUtil = (function () {\n    try {\n      // Use `util.types` for Node.js 10+.\n      var types = freeModule$1 && freeModule$1.require && freeModule$1.require('util').types\n\n      if (types) {\n        return types\n      }\n\n      // Legacy `process.binding('util')` for Node.js < 10.\n      return freeProcess && freeProcess.binding && freeProcess.binding('util')\n    } catch (e) {}\n  })()\n\n  const nodeUtil$1 = nodeUtil\n\n  /* Node.js helper references. */\n  var nodeIsTypedArray = nodeUtil$1 && nodeUtil$1.isTypedArray\n\n  /**\n   * Checks if `value` is classified as a typed array.\n   *\n   * @static\n   * @memberOf _\n   * @since 3.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n   * @example\n   *\n   * _.isTypedArray(new Uint8Array);\n   * // => true\n   *\n   * _.isTypedArray([]);\n   * // => false\n   */\n  var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray\n\n  const isTypedArray$1 = isTypedArray\n\n  /** Used for built-in method references. */\n  var objectProto$d = Object.prototype\n\n  /** Used to check objects for own properties. */\n  var hasOwnProperty$c = objectProto$d.hasOwnProperty\n\n  /**\n   * Creates an array of the enumerable property names of the array-like `value`.\n   *\n   * @private\n   * @param {*} value The value to query.\n   * @param {boolean} inherited Specify returning inherited property names.\n   * @returns {Array} Returns the array of property names.\n   */\n  function arrayLikeKeys(value, inherited) {\n    var isArr = isArray$1(value),\n      isArg = !isArr && isArguments$1(value),\n      isBuff = !isArr && !isArg && isBuffer$1(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray$1(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length\n\n    for (var key in value) {\n      if (\n        (inherited || hasOwnProperty$c.call(value, key)) &&\n        !(\n          skipIndexes &&\n          // Safari 9 has enumerable `arguments.length` in strict mode.\n          (key == 'length' ||\n            // Node.js 0.10 has enumerable non-index properties on buffers.\n            (isBuff && (key == 'offset' || key == 'parent')) ||\n            // PhantomJS 2 has enumerable non-index properties on typed arrays.\n            (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n            // Skip index properties.\n            isIndex(key, length))\n        )\n      ) {\n        result.push(key)\n      }\n    }\n    return result\n  }\n\n  /**\n   * Creates a unary function that invokes `func` with its argument transformed.\n   *\n   * @private\n   * @param {Function} func The function to wrap.\n   * @param {Function} transform The argument transform.\n   * @returns {Function} Returns the new function.\n   */\n  function overArg(func, transform) {\n    return function (arg) {\n      return func(transform(arg))\n    }\n  }\n\n  /* Built-in method references for those with the same name as other `lodash` methods. */\n  var nativeKeys = overArg(Object.keys, Object)\n\n  const nativeKeys$1 = nativeKeys\n\n  /** Used for built-in method references. */\n  var objectProto$c = Object.prototype\n\n  /** Used to check objects for own properties. */\n  var hasOwnProperty$b = objectProto$c.hasOwnProperty\n\n  /**\n   * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property names.\n   */\n  function baseKeys(object) {\n    if (!isPrototype(object)) {\n      return nativeKeys$1(object)\n    }\n    var result = []\n    for (var key in Object(object)) {\n      if (hasOwnProperty$b.call(object, key) && key != 'constructor') {\n        result.push(key)\n      }\n    }\n    return result\n  }\n\n  /**\n   * Creates an array of the own enumerable property names of `object`.\n   *\n   * **Note:** Non-object values are coerced to objects. See the\n   * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n   * for more details.\n   *\n   * @static\n   * @since 0.1.0\n   * @memberOf _\n   * @category Object\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property names.\n   * @example\n   *\n   * function Foo() {\n   *   this.a = 1;\n   *   this.b = 2;\n   * }\n   *\n   * Foo.prototype.c = 3;\n   *\n   * _.keys(new Foo);\n   * // => ['a', 'b'] (iteration order is not guaranteed)\n   *\n   * _.keys('hi');\n   * // => ['0', '1']\n   */\n  function keys(object) {\n    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object)\n  }\n\n  /** Used for built-in method references. */\n  var objectProto$b = Object.prototype\n\n  /** Used to check objects for own properties. */\n  var hasOwnProperty$a = objectProto$b.hasOwnProperty\n\n  /**\n   * Assigns own enumerable string keyed properties of source objects to the\n   * destination object. Source objects are applied from left to right.\n   * Subsequent sources overwrite property assignments of previous sources.\n   *\n   * **Note:** This method mutates `object` and is loosely based on\n   * [`Object.assign`](https://mdn.io/Object/assign).\n   *\n   * @static\n   * @memberOf _\n   * @since 0.10.0\n   * @category Object\n   * @param {Object} object The destination object.\n   * @param {...Object} [sources] The source objects.\n   * @returns {Object} Returns `object`.\n   * @see _.assignIn\n   * @example\n   *\n   * function Foo() {\n   *   this.a = 1;\n   * }\n   *\n   * function Bar() {\n   *   this.c = 3;\n   * }\n   *\n   * Foo.prototype.b = 2;\n   * Bar.prototype.d = 4;\n   *\n   * _.assign({ 'a': 0 }, new Foo, new Bar);\n   * // => { 'a': 1, 'c': 3 }\n   */\n  var assign = createAssigner(function (object, source) {\n    if (isPrototype(source) || isArrayLike(source)) {\n      copyObject(source, keys(source), object)\n      return\n    }\n    for (var key in source) {\n      if (hasOwnProperty$a.call(source, key)) {\n        assignValue(object, key, source[key])\n      }\n    }\n  })\n\n  const assign$1 = assign\n\n  /**\n   * This function is like\n   * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n   * except that it includes inherited enumerable properties.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property names.\n   */\n  function nativeKeysIn(object) {\n    var result = []\n    if (object != null) {\n      for (var key in Object(object)) {\n        result.push(key)\n      }\n    }\n    return result\n  }\n\n  /** Used for built-in method references. */\n  var objectProto$a = Object.prototype\n\n  /** Used to check objects for own properties. */\n  var hasOwnProperty$9 = objectProto$a.hasOwnProperty\n\n  /**\n   * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property names.\n   */\n  function baseKeysIn(object) {\n    if (!isObject(object)) {\n      return nativeKeysIn(object)\n    }\n    var isProto = isPrototype(object),\n      result = []\n\n    for (var key in object) {\n      if (!(key == 'constructor' && (isProto || !hasOwnProperty$9.call(object, key)))) {\n        result.push(key)\n      }\n    }\n    return result\n  }\n\n  /**\n   * Creates an array of the own and inherited enumerable property names of `object`.\n   *\n   * **Note:** Non-object values are coerced to objects.\n   *\n   * @static\n   * @memberOf _\n   * @since 3.0.0\n   * @category Object\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property names.\n   * @example\n   *\n   * function Foo() {\n   *   this.a = 1;\n   *   this.b = 2;\n   * }\n   *\n   * Foo.prototype.c = 3;\n   *\n   * _.keysIn(new Foo);\n   * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n   */\n  function keysIn(object) {\n    return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object)\n  }\n\n  /** Used to match property names within property paths. */\n  var reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/\n\n  /**\n   * Checks if `value` is a property name and not a property path.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @param {Object} [object] The object to query keys on.\n   * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n   */\n  function isKey(value, object) {\n    if (isArray$1(value)) {\n      return false\n    }\n    var type = typeof value\n    if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {\n      return true\n    }\n    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || (object != null && value in Object(object))\n  }\n\n  /* Built-in method references that are verified to be native. */\n  var nativeCreate = getNative(Object, 'create')\n\n  const nativeCreate$1 = nativeCreate\n\n  /**\n   * Removes all key-value entries from the hash.\n   *\n   * @private\n   * @name clear\n   * @memberOf Hash\n   */\n  function hashClear() {\n    this.__data__ = nativeCreate$1 ? nativeCreate$1(null) : {}\n    this.size = 0\n  }\n\n  /**\n   * Removes `key` and its value from the hash.\n   *\n   * @private\n   * @name delete\n   * @memberOf Hash\n   * @param {Object} hash The hash to modify.\n   * @param {string} key The key of the value to remove.\n   * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n   */\n  function hashDelete(key) {\n    var result = this.has(key) && delete this.__data__[key]\n    this.size -= result ? 1 : 0\n    return result\n  }\n\n  /** Used to stand-in for `undefined` hash values. */\n  var HASH_UNDEFINED$2 = '__lodash_hash_undefined__'\n\n  /** Used for built-in method references. */\n  var objectProto$9 = Object.prototype\n\n  /** Used to check objects for own properties. */\n  var hasOwnProperty$8 = objectProto$9.hasOwnProperty\n\n  /**\n   * Gets the hash value for `key`.\n   *\n   * @private\n   * @name get\n   * @memberOf Hash\n   * @param {string} key The key of the value to get.\n   * @returns {*} Returns the entry value.\n   */\n  function hashGet(key) {\n    var data = this.__data__\n    if (nativeCreate$1) {\n      var result = data[key]\n      return result === HASH_UNDEFINED$2 ? undefined : result\n    }\n    return hasOwnProperty$8.call(data, key) ? data[key] : undefined\n  }\n\n  /** Used for built-in method references. */\n  var objectProto$8 = Object.prototype\n\n  /** Used to check objects for own properties. */\n  var hasOwnProperty$7 = objectProto$8.hasOwnProperty\n\n  /**\n   * Checks if a hash value for `key` exists.\n   *\n   * @private\n   * @name has\n   * @memberOf Hash\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n  function hashHas(key) {\n    var data = this.__data__\n    return nativeCreate$1 ? data[key] !== undefined : hasOwnProperty$7.call(data, key)\n  }\n\n  /** Used to stand-in for `undefined` hash values. */\n  var HASH_UNDEFINED$1 = '__lodash_hash_undefined__'\n\n  /**\n   * Sets the hash `key` to `value`.\n   *\n   * @private\n   * @name set\n   * @memberOf Hash\n   * @param {string} key The key of the value to set.\n   * @param {*} value The value to set.\n   * @returns {Object} Returns the hash instance.\n   */\n  function hashSet(key, value) {\n    var data = this.__data__\n    this.size += this.has(key) ? 0 : 1\n    data[key] = nativeCreate$1 && value === undefined ? HASH_UNDEFINED$1 : value\n    return this\n  }\n\n  /**\n   * Creates a hash object.\n   *\n   * @private\n   * @constructor\n   * @param {Array} [entries] The key-value pairs to cache.\n   */\n  function Hash(entries) {\n    var index = -1,\n      length = entries == null ? 0 : entries.length\n\n    this.clear()\n    while (++index < length) {\n      var entry = entries[index]\n      this.set(entry[0], entry[1])\n    }\n  }\n\n  // Add methods to `Hash`.\n  Hash.prototype.clear = hashClear\n  Hash.prototype['delete'] = hashDelete\n  Hash.prototype.get = hashGet\n  Hash.prototype.has = hashHas\n  Hash.prototype.set = hashSet\n\n  /**\n   * Removes all key-value entries from the list cache.\n   *\n   * @private\n   * @name clear\n   * @memberOf ListCache\n   */\n  function listCacheClear() {\n    this.__data__ = []\n    this.size = 0\n  }\n\n  /**\n   * Gets the index at which the `key` is found in `array` of key-value pairs.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} key The key to search for.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function assocIndexOf(array, key) {\n    var length = array.length\n    while (length--) {\n      if (eq(array[length][0], key)) {\n        return length\n      }\n    }\n    return -1\n  }\n\n  /** Used for built-in method references. */\n  var arrayProto = Array.prototype\n\n  /** Built-in value references. */\n  var splice = arrayProto.splice\n\n  /**\n   * Removes `key` and its value from the list cache.\n   *\n   * @private\n   * @name delete\n   * @memberOf ListCache\n   * @param {string} key The key of the value to remove.\n   * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n   */\n  function listCacheDelete(key) {\n    var data = this.__data__,\n      index = assocIndexOf(data, key)\n\n    if (index < 0) {\n      return false\n    }\n    var lastIndex = data.length - 1\n    if (index == lastIndex) {\n      data.pop()\n    } else {\n      splice.call(data, index, 1)\n    }\n    --this.size\n    return true\n  }\n\n  /**\n   * Gets the list cache value for `key`.\n   *\n   * @private\n   * @name get\n   * @memberOf ListCache\n   * @param {string} key The key of the value to get.\n   * @returns {*} Returns the entry value.\n   */\n  function listCacheGet(key) {\n    var data = this.__data__,\n      index = assocIndexOf(data, key)\n\n    return index < 0 ? undefined : data[index][1]\n  }\n\n  /**\n   * Checks if a list cache value for `key` exists.\n   *\n   * @private\n   * @name has\n   * @memberOf ListCache\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n  function listCacheHas(key) {\n    return assocIndexOf(this.__data__, key) > -1\n  }\n\n  /**\n   * Sets the list cache `key` to `value`.\n   *\n   * @private\n   * @name set\n   * @memberOf ListCache\n   * @param {string} key The key of the value to set.\n   * @param {*} value The value to set.\n   * @returns {Object} Returns the list cache instance.\n   */\n  function listCacheSet(key, value) {\n    var data = this.__data__,\n      index = assocIndexOf(data, key)\n\n    if (index < 0) {\n      ++this.size\n      data.push([key, value])\n    } else {\n      data[index][1] = value\n    }\n    return this\n  }\n\n  /**\n   * Creates an list cache object.\n   *\n   * @private\n   * @constructor\n   * @param {Array} [entries] The key-value pairs to cache.\n   */\n  function ListCache(entries) {\n    var index = -1,\n      length = entries == null ? 0 : entries.length\n\n    this.clear()\n    while (++index < length) {\n      var entry = entries[index]\n      this.set(entry[0], entry[1])\n    }\n  }\n\n  // Add methods to `ListCache`.\n  ListCache.prototype.clear = listCacheClear\n  ListCache.prototype['delete'] = listCacheDelete\n  ListCache.prototype.get = listCacheGet\n  ListCache.prototype.has = listCacheHas\n  ListCache.prototype.set = listCacheSet\n\n  /* Built-in method references that are verified to be native. */\n  var Map$1 = getNative(root$1, 'Map')\n\n  const Map$2 = Map$1\n\n  /**\n   * Removes all key-value entries from the map.\n   *\n   * @private\n   * @name clear\n   * @memberOf MapCache\n   */\n  function mapCacheClear() {\n    this.size = 0\n    this.__data__ = {\n      hash: new Hash(),\n      map: new (Map$2 || ListCache)(),\n      string: new Hash(),\n    }\n  }\n\n  /**\n   * Checks if `value` is suitable for use as unique object key.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n   */\n  function isKeyable(value) {\n    var type = typeof value\n    return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean'\n      ? value !== '__proto__'\n      : value === null\n  }\n\n  /**\n   * Gets the data for `map`.\n   *\n   * @private\n   * @param {Object} map The map to query.\n   * @param {string} key The reference key.\n   * @returns {*} Returns the map data.\n   */\n  function getMapData(map, key) {\n    var data = map.__data__\n    return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map\n  }\n\n  /**\n   * Removes `key` and its value from the map.\n   *\n   * @private\n   * @name delete\n   * @memberOf MapCache\n   * @param {string} key The key of the value to remove.\n   * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n   */\n  function mapCacheDelete(key) {\n    var result = getMapData(this, key)['delete'](key)\n    this.size -= result ? 1 : 0\n    return result\n  }\n\n  /**\n   * Gets the map value for `key`.\n   *\n   * @private\n   * @name get\n   * @memberOf MapCache\n   * @param {string} key The key of the value to get.\n   * @returns {*} Returns the entry value.\n   */\n  function mapCacheGet(key) {\n    return getMapData(this, key).get(key)\n  }\n\n  /**\n   * Checks if a map value for `key` exists.\n   *\n   * @private\n   * @name has\n   * @memberOf MapCache\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n  function mapCacheHas(key) {\n    return getMapData(this, key).has(key)\n  }\n\n  /**\n   * Sets the map `key` to `value`.\n   *\n   * @private\n   * @name set\n   * @memberOf MapCache\n   * @param {string} key The key of the value to set.\n   * @param {*} value The value to set.\n   * @returns {Object} Returns the map cache instance.\n   */\n  function mapCacheSet(key, value) {\n    var data = getMapData(this, key),\n      size = data.size\n\n    data.set(key, value)\n    this.size += data.size == size ? 0 : 1\n    return this\n  }\n\n  /**\n   * Creates a map cache object to store key-value pairs.\n   *\n   * @private\n   * @constructor\n   * @param {Array} [entries] The key-value pairs to cache.\n   */\n  function MapCache(entries) {\n    var index = -1,\n      length = entries == null ? 0 : entries.length\n\n    this.clear()\n    while (++index < length) {\n      var entry = entries[index]\n      this.set(entry[0], entry[1])\n    }\n  }\n\n  // Add methods to `MapCache`.\n  MapCache.prototype.clear = mapCacheClear\n  MapCache.prototype['delete'] = mapCacheDelete\n  MapCache.prototype.get = mapCacheGet\n  MapCache.prototype.has = mapCacheHas\n  MapCache.prototype.set = mapCacheSet\n\n  /** Error message constants. */\n  var FUNC_ERROR_TEXT$1 = 'Expected a function'\n\n  /**\n   * Creates a function that memoizes the result of `func`. If `resolver` is\n   * provided, it determines the cache key for storing the result based on the\n   * arguments provided to the memoized function. By default, the first argument\n   * provided to the memoized function is used as the map cache key. The `func`\n   * is invoked with the `this` binding of the memoized function.\n   *\n   * **Note:** The cache is exposed as the `cache` property on the memoized\n   * function. Its creation may be customized by replacing the `_.memoize.Cache`\n   * constructor with one whose instances implement the\n   * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n   * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Function\n   * @param {Function} func The function to have its output memoized.\n   * @param {Function} [resolver] The function to resolve the cache key.\n   * @returns {Function} Returns the new memoized function.\n   * @example\n   *\n   * var object = { 'a': 1, 'b': 2 };\n   * var other = { 'c': 3, 'd': 4 };\n   *\n   * var values = _.memoize(_.values);\n   * values(object);\n   * // => [1, 2]\n   *\n   * values(other);\n   * // => [3, 4]\n   *\n   * object.a = 2;\n   * values(object);\n   * // => [1, 2]\n   *\n   * // Modify the result cache.\n   * values.cache.set(object, ['a', 'b']);\n   * values(object);\n   * // => ['a', 'b']\n   *\n   * // Replace `_.memoize.Cache`.\n   * _.memoize.Cache = WeakMap;\n   */\n  function memoize(func, resolver) {\n    if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n      throw new TypeError(FUNC_ERROR_TEXT$1)\n    }\n    var memoized = function () {\n      var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache\n\n      if (cache.has(key)) {\n        return cache.get(key)\n      }\n      var result = func.apply(this, args)\n      memoized.cache = cache.set(key, result) || cache\n      return result\n    }\n    memoized.cache = new (memoize.Cache || MapCache)()\n    return memoized\n  }\n\n  // Expose `MapCache`.\n  memoize.Cache = MapCache\n\n  /** Used as the maximum memoize cache size. */\n  var MAX_MEMOIZE_SIZE = 500\n\n  /**\n   * A specialized version of `_.memoize` which clears the memoized function's\n   * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n   *\n   * @private\n   * @param {Function} func The function to have its output memoized.\n   * @returns {Function} Returns the new memoized function.\n   */\n  function memoizeCapped(func) {\n    var result = memoize(func, function (key) {\n      if (cache.size === MAX_MEMOIZE_SIZE) {\n        cache.clear()\n      }\n      return key\n    })\n\n    var cache = result.cache\n    return result\n  }\n\n  /** Used to match property names within property paths. */\n  var rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g\n\n  /** Used to match backslashes in property paths. */\n  var reEscapeChar = /\\\\(\\\\)?/g\n\n  /**\n   * Converts `string` to a property path array.\n   *\n   * @private\n   * @param {string} string The string to convert.\n   * @returns {Array} Returns the property path array.\n   */\n  var stringToPath = memoizeCapped(function (string) {\n    var result = []\n    if (string.charCodeAt(0) === 46 /* . */) {\n      result.push('')\n    }\n    string.replace(rePropName, function (match, number, quote, subString) {\n      result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match)\n    })\n    return result\n  })\n\n  const stringToPath$1 = stringToPath\n\n  /**\n   * Converts `value` to a string. An empty string is returned for `null`\n   * and `undefined` values. The sign of `-0` is preserved.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to convert.\n   * @returns {string} Returns the converted string.\n   * @example\n   *\n   * _.toString(null);\n   * // => ''\n   *\n   * _.toString(-0);\n   * // => '-0'\n   *\n   * _.toString([1, 2, 3]);\n   * // => '1,2,3'\n   */\n  function toString(value) {\n    return value == null ? '' : baseToString(value)\n  }\n\n  /**\n   * Casts `value` to a path array if it's not one.\n   *\n   * @private\n   * @param {*} value The value to inspect.\n   * @param {Object} [object] The object to query keys on.\n   * @returns {Array} Returns the cast property path array.\n   */\n  function castPath(value, object) {\n    if (isArray$1(value)) {\n      return value\n    }\n    return isKey(value, object) ? [value] : stringToPath$1(toString(value))\n  }\n\n  /** Used as references for various `Number` constants. */\n  var INFINITY$1 = 1 / 0\n\n  /**\n   * Converts `value` to a string key if it's not a string or symbol.\n   *\n   * @private\n   * @param {*} value The value to inspect.\n   * @returns {string|symbol} Returns the key.\n   */\n  function toKey(value) {\n    if (typeof value == 'string' || isSymbol(value)) {\n      return value\n    }\n    var result = value + ''\n    return result == '0' && 1 / value == -INFINITY$1 ? '-0' : result\n  }\n\n  /**\n   * The base implementation of `_.get` without support for default values.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array|string} path The path of the property to get.\n   * @returns {*} Returns the resolved value.\n   */\n  function baseGet(object, path) {\n    path = castPath(path, object)\n\n    var index = 0,\n      length = path.length\n\n    while (object != null && index < length) {\n      object = object[toKey(path[index++])]\n    }\n    return index && index == length ? object : undefined\n  }\n\n  /**\n   * Gets the value at `path` of `object`. If the resolved value is\n   * `undefined`, the `defaultValue` is returned in its place.\n   *\n   * @static\n   * @memberOf _\n   * @since 3.7.0\n   * @category Object\n   * @param {Object} object The object to query.\n   * @param {Array|string} path The path of the property to get.\n   * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n   * @returns {*} Returns the resolved value.\n   * @example\n   *\n   * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n   *\n   * _.get(object, 'a[0].b.c');\n   * // => 3\n   *\n   * _.get(object, ['a', '0', 'b', 'c']);\n   * // => 3\n   *\n   * _.get(object, 'a.b.c', 'default');\n   * // => 'default'\n   */\n  function get(object, path, defaultValue) {\n    var result = object == null ? undefined : baseGet(object, path)\n    return result === undefined ? defaultValue : result\n  }\n\n  /**\n   * Appends the elements of `values` to `array`.\n   *\n   * @private\n   * @param {Array} array The array to modify.\n   * @param {Array} values The values to append.\n   * @returns {Array} Returns `array`.\n   */\n  function arrayPush(array, values) {\n    var index = -1,\n      length = values.length,\n      offset = array.length\n\n    while (++index < length) {\n      array[offset + index] = values[index]\n    }\n    return array\n  }\n\n  /** Built-in value references. */\n  var spreadableSymbol = Symbol$2 ? Symbol$2.isConcatSpreadable : undefined\n\n  /**\n   * Checks if `value` is a flattenable `arguments` object or array.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n   */\n  function isFlattenable(value) {\n    return isArray$1(value) || isArguments$1(value) || !!(spreadableSymbol && value && value[spreadableSymbol])\n  }\n\n  /**\n   * The base implementation of `_.flatten` with support for restricting flattening.\n   *\n   * @private\n   * @param {Array} array The array to flatten.\n   * @param {number} depth The maximum recursion depth.\n   * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n   * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n   * @param {Array} [result=[]] The initial result value.\n   * @returns {Array} Returns the new flattened array.\n   */\n  function baseFlatten(array, depth, predicate, isStrict, result) {\n    var index = -1,\n      length = array.length\n\n    predicate || (predicate = isFlattenable)\n    result || (result = [])\n\n    while (++index < length) {\n      var value = array[index]\n      if (depth > 0 && predicate(value)) {\n        if (depth > 1) {\n          // Recursively flatten arrays (susceptible to call stack limits).\n          baseFlatten(value, depth - 1, predicate, isStrict, result)\n        } else {\n          arrayPush(result, value)\n        }\n      } else if (!isStrict) {\n        result[result.length] = value\n      }\n    }\n    return result\n  }\n\n  /**\n   * Flattens `array` a single level deep.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Array\n   * @param {Array} array The array to flatten.\n   * @returns {Array} Returns the new flattened array.\n   * @example\n   *\n   * _.flatten([1, [2, [3, [4]], 5]]);\n   * // => [1, 2, [3, [4]], 5]\n   */\n  function flatten(array) {\n    var length = array == null ? 0 : array.length\n    return length ? baseFlatten(array, 1) : []\n  }\n\n  /** Built-in value references. */\n  var getPrototype = overArg(Object.getPrototypeOf, Object)\n\n  const getPrototype$1 = getPrototype\n\n  /**\n   * The base implementation of `_.slice` without an iteratee call guard.\n   *\n   * @private\n   * @param {Array} array The array to slice.\n   * @param {number} [start=0] The start position.\n   * @param {number} [end=array.length] The end position.\n   * @returns {Array} Returns the slice of `array`.\n   */\n  function baseSlice(array, start, end) {\n    var index = -1,\n      length = array.length\n\n    if (start < 0) {\n      start = -start > length ? 0 : length + start\n    }\n    end = end > length ? length : end\n    if (end < 0) {\n      end += length\n    }\n    length = start > end ? 0 : (end - start) >>> 0\n    start >>>= 0\n\n    var result = Array(length)\n    while (++index < length) {\n      result[index] = array[index + start]\n    }\n    return result\n  }\n\n  /**\n   * A specialized version of `_.reduce` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} [accumulator] The initial value.\n   * @param {boolean} [initAccum] Specify using the first element of `array` as\n   *  the initial value.\n   * @returns {*} Returns the accumulated value.\n   */\n  function arrayReduce(array, iteratee, accumulator, initAccum) {\n    var index = -1,\n      length = array == null ? 0 : array.length\n\n    if (initAccum && length) {\n      accumulator = array[++index]\n    }\n    while (++index < length) {\n      accumulator = iteratee(accumulator, array[index], index, array)\n    }\n    return accumulator\n  }\n\n  /**\n   * Removes all key-value entries from the stack.\n   *\n   * @private\n   * @name clear\n   * @memberOf Stack\n   */\n  function stackClear() {\n    this.__data__ = new ListCache()\n    this.size = 0\n  }\n\n  /**\n   * Removes `key` and its value from the stack.\n   *\n   * @private\n   * @name delete\n   * @memberOf Stack\n   * @param {string} key The key of the value to remove.\n   * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n   */\n  function stackDelete(key) {\n    var data = this.__data__,\n      result = data['delete'](key)\n\n    this.size = data.size\n    return result\n  }\n\n  /**\n   * Gets the stack value for `key`.\n   *\n   * @private\n   * @name get\n   * @memberOf Stack\n   * @param {string} key The key of the value to get.\n   * @returns {*} Returns the entry value.\n   */\n  function stackGet(key) {\n    return this.__data__.get(key)\n  }\n\n  /**\n   * Checks if a stack value for `key` exists.\n   *\n   * @private\n   * @name has\n   * @memberOf Stack\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n  function stackHas(key) {\n    return this.__data__.has(key)\n  }\n\n  /** Used as the size to enable large array optimizations. */\n  var LARGE_ARRAY_SIZE$2 = 200\n\n  /**\n   * Sets the stack `key` to `value`.\n   *\n   * @private\n   * @name set\n   * @memberOf Stack\n   * @param {string} key The key of the value to set.\n   * @param {*} value The value to set.\n   * @returns {Object} Returns the stack cache instance.\n   */\n  function stackSet(key, value) {\n    var data = this.__data__\n    if (data instanceof ListCache) {\n      var pairs = data.__data__\n      if (!Map$2 || pairs.length < LARGE_ARRAY_SIZE$2 - 1) {\n        pairs.push([key, value])\n        this.size = ++data.size\n        return this\n      }\n      data = this.__data__ = new MapCache(pairs)\n    }\n    data.set(key, value)\n    this.size = data.size\n    return this\n  }\n\n  /**\n   * Creates a stack cache object to store key-value pairs.\n   *\n   * @private\n   * @constructor\n   * @param {Array} [entries] The key-value pairs to cache.\n   */\n  function Stack(entries) {\n    var data = (this.__data__ = new ListCache(entries))\n    this.size = data.size\n  }\n\n  // Add methods to `Stack`.\n  Stack.prototype.clear = stackClear\n  Stack.prototype['delete'] = stackDelete\n  Stack.prototype.get = stackGet\n  Stack.prototype.has = stackHas\n  Stack.prototype.set = stackSet\n\n  /**\n   * The base implementation of `_.assign` without support for multiple sources\n   * or `customizer` functions.\n   *\n   * @private\n   * @param {Object} object The destination object.\n   * @param {Object} source The source object.\n   * @returns {Object} Returns `object`.\n   */\n  function baseAssign(object, source) {\n    return object && copyObject(source, keys(source), object)\n  }\n\n  /**\n   * The base implementation of `_.assignIn` without support for multiple sources\n   * or `customizer` functions.\n   *\n   * @private\n   * @param {Object} object The destination object.\n   * @param {Object} source The source object.\n   * @returns {Object} Returns `object`.\n   */\n  function baseAssignIn(object, source) {\n    return object && copyObject(source, keysIn(source), object)\n  }\n\n  /** Detect free variable `exports`. */\n  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports\n\n  /** Detect free variable `module`. */\n  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module\n\n  /** Detect the popular CommonJS extension `module.exports`. */\n  var moduleExports = freeModule && freeModule.exports === freeExports\n\n  /** Built-in value references. */\n  var Buffer = moduleExports ? root$1.Buffer : undefined,\n    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined\n\n  /**\n   * Creates a clone of  `buffer`.\n   *\n   * @private\n   * @param {Buffer} buffer The buffer to clone.\n   * @param {boolean} [isDeep] Specify a deep clone.\n   * @returns {Buffer} Returns the cloned buffer.\n   */\n  function cloneBuffer(buffer, isDeep) {\n    if (isDeep) {\n      return buffer.slice()\n    }\n    var length = buffer.length,\n      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length)\n\n    buffer.copy(result)\n    return result\n  }\n\n  /**\n   * A specialized version of `_.filter` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {Array} Returns the new filtered array.\n   */\n  function arrayFilter(array, predicate) {\n    var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = []\n\n    while (++index < length) {\n      var value = array[index]\n      if (predicate(value, index, array)) {\n        result[resIndex++] = value\n      }\n    }\n    return result\n  }\n\n  /**\n   * This method returns a new empty array.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.13.0\n   * @category Util\n   * @returns {Array} Returns the new empty array.\n   * @example\n   *\n   * var arrays = _.times(2, _.stubArray);\n   *\n   * console.log(arrays);\n   * // => [[], []]\n   *\n   * console.log(arrays[0] === arrays[1]);\n   * // => false\n   */\n  function stubArray() {\n    return []\n  }\n\n  /** Used for built-in method references. */\n  var objectProto$7 = Object.prototype\n\n  /** Built-in value references. */\n  var propertyIsEnumerable = objectProto$7.propertyIsEnumerable\n\n  /* Built-in method references for those with the same name as other `lodash` methods. */\n  var nativeGetSymbols$1 = Object.getOwnPropertySymbols\n\n  /**\n   * Creates an array of the own enumerable symbols of `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of symbols.\n   */\n  var getSymbols = !nativeGetSymbols$1\n    ? stubArray\n    : function (object) {\n        if (object == null) {\n          return []\n        }\n        object = Object(object)\n        return arrayFilter(nativeGetSymbols$1(object), function (symbol) {\n          return propertyIsEnumerable.call(object, symbol)\n        })\n      }\n\n  const getSymbols$1 = getSymbols\n\n  /**\n   * Copies own symbols of `source` to `object`.\n   *\n   * @private\n   * @param {Object} source The object to copy symbols from.\n   * @param {Object} [object={}] The object to copy symbols to.\n   * @returns {Object} Returns `object`.\n   */\n  function copySymbols(source, object) {\n    return copyObject(source, getSymbols$1(source), object)\n  }\n\n  /* Built-in method references for those with the same name as other `lodash` methods. */\n  var nativeGetSymbols = Object.getOwnPropertySymbols\n\n  /**\n   * Creates an array of the own and inherited enumerable symbols of `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of symbols.\n   */\n  var getSymbolsIn = !nativeGetSymbols\n    ? stubArray\n    : function (object) {\n        var result = []\n        while (object) {\n          arrayPush(result, getSymbols$1(object))\n          object = getPrototype$1(object)\n        }\n        return result\n      }\n\n  const getSymbolsIn$1 = getSymbolsIn\n\n  /**\n   * Copies own and inherited symbols of `source` to `object`.\n   *\n   * @private\n   * @param {Object} source The object to copy symbols from.\n   * @param {Object} [object={}] The object to copy symbols to.\n   * @returns {Object} Returns `object`.\n   */\n  function copySymbolsIn(source, object) {\n    return copyObject(source, getSymbolsIn$1(source), object)\n  }\n\n  /**\n   * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n   * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n   * symbols of `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Function} keysFunc The function to get the keys of `object`.\n   * @param {Function} symbolsFunc The function to get the symbols of `object`.\n   * @returns {Array} Returns the array of property names and symbols.\n   */\n  function baseGetAllKeys(object, keysFunc, symbolsFunc) {\n    var result = keysFunc(object)\n    return isArray$1(object) ? result : arrayPush(result, symbolsFunc(object))\n  }\n\n  /**\n   * Creates an array of own enumerable property names and symbols of `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property names and symbols.\n   */\n  function getAllKeys(object) {\n    return baseGetAllKeys(object, keys, getSymbols$1)\n  }\n\n  /**\n   * Creates an array of own and inherited enumerable property names and\n   * symbols of `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property names and symbols.\n   */\n  function getAllKeysIn(object) {\n    return baseGetAllKeys(object, keysIn, getSymbolsIn$1)\n  }\n\n  /* Built-in method references that are verified to be native. */\n  var DataView = getNative(root$1, 'DataView')\n\n  const DataView$1 = DataView\n\n  /* Built-in method references that are verified to be native. */\n  var Promise$1 = getNative(root$1, 'Promise')\n\n  const Promise$2 = Promise$1\n\n  /* Built-in method references that are verified to be native. */\n  var Set = getNative(root$1, 'Set')\n\n  const Set$1 = Set\n\n  /** `Object#toString` result references. */\n  var mapTag$5 = '[object Map]',\n    objectTag$2 = '[object Object]',\n    promiseTag = '[object Promise]',\n    setTag$5 = '[object Set]',\n    weakMapTag$1 = '[object WeakMap]'\n\n  var dataViewTag$3 = '[object DataView]'\n\n  /** Used to detect maps, sets, and weakmaps. */\n  var dataViewCtorString = toSource(DataView$1),\n    mapCtorString = toSource(Map$2),\n    promiseCtorString = toSource(Promise$2),\n    setCtorString = toSource(Set$1),\n    weakMapCtorString = toSource(WeakMap$1)\n\n  /**\n   * Gets the `toStringTag` of `value`.\n   *\n   * @private\n   * @param {*} value The value to query.\n   * @returns {string} Returns the `toStringTag`.\n   */\n  var getTag = baseGetTag\n\n  // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\n  if (\n    (DataView$1 && getTag(new DataView$1(new ArrayBuffer(1))) != dataViewTag$3) ||\n    (Map$2 && getTag(new Map$2()) != mapTag$5) ||\n    (Promise$2 && getTag(Promise$2.resolve()) != promiseTag) ||\n    (Set$1 && getTag(new Set$1()) != setTag$5) ||\n    (WeakMap$1 && getTag(new WeakMap$1()) != weakMapTag$1)\n  ) {\n    getTag = function (value) {\n      var result = baseGetTag(value),\n        Ctor = result == objectTag$2 ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : ''\n\n      if (ctorString) {\n        switch (ctorString) {\n          case dataViewCtorString:\n            return dataViewTag$3\n          case mapCtorString:\n            return mapTag$5\n          case promiseCtorString:\n            return promiseTag\n          case setCtorString:\n            return setTag$5\n          case weakMapCtorString:\n            return weakMapTag$1\n        }\n      }\n      return result\n    }\n  }\n\n  const getTag$1 = getTag\n\n  /** Used for built-in method references. */\n  var objectProto$6 = Object.prototype\n\n  /** Used to check objects for own properties. */\n  var hasOwnProperty$6 = objectProto$6.hasOwnProperty\n\n  /**\n   * Initializes an array clone.\n   *\n   * @private\n   * @param {Array} array The array to clone.\n   * @returns {Array} Returns the initialized clone.\n   */\n  function initCloneArray(array) {\n    var length = array.length,\n      result = new array.constructor(length)\n\n    // Add properties assigned by `RegExp#exec`.\n    if (length && typeof array[0] == 'string' && hasOwnProperty$6.call(array, 'index')) {\n      result.index = array.index\n      result.input = array.input\n    }\n    return result\n  }\n\n  /** Built-in value references. */\n  var Uint8Array = root$1.Uint8Array\n\n  const Uint8Array$1 = Uint8Array\n\n  /**\n   * Creates a clone of `arrayBuffer`.\n   *\n   * @private\n   * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n   * @returns {ArrayBuffer} Returns the cloned array buffer.\n   */\n  function cloneArrayBuffer(arrayBuffer) {\n    var result = new arrayBuffer.constructor(arrayBuffer.byteLength)\n    new Uint8Array$1(result).set(new Uint8Array$1(arrayBuffer))\n    return result\n  }\n\n  /**\n   * Creates a clone of `dataView`.\n   *\n   * @private\n   * @param {Object} dataView The data view to clone.\n   * @param {boolean} [isDeep] Specify a deep clone.\n   * @returns {Object} Returns the cloned data view.\n   */\n  function cloneDataView(dataView, isDeep) {\n    var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer\n    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength)\n  }\n\n  /** Used to match `RegExp` flags from their coerced string values. */\n  var reFlags = /\\w*$/\n\n  /**\n   * Creates a clone of `regexp`.\n   *\n   * @private\n   * @param {Object} regexp The regexp to clone.\n   * @returns {Object} Returns the cloned regexp.\n   */\n  function cloneRegExp(regexp) {\n    var result = new regexp.constructor(regexp.source, reFlags.exec(regexp))\n    result.lastIndex = regexp.lastIndex\n    return result\n  }\n\n  /** Used to convert symbols to primitives and strings. */\n  var symbolProto$1 = Symbol$2 ? Symbol$2.prototype : undefined,\n    symbolValueOf$1 = symbolProto$1 ? symbolProto$1.valueOf : undefined\n\n  /**\n   * Creates a clone of the `symbol` object.\n   *\n   * @private\n   * @param {Object} symbol The symbol object to clone.\n   * @returns {Object} Returns the cloned symbol object.\n   */\n  function cloneSymbol(symbol) {\n    return symbolValueOf$1 ? Object(symbolValueOf$1.call(symbol)) : {}\n  }\n\n  /**\n   * Creates a clone of `typedArray`.\n   *\n   * @private\n   * @param {Object} typedArray The typed array to clone.\n   * @param {boolean} [isDeep] Specify a deep clone.\n   * @returns {Object} Returns the cloned typed array.\n   */\n  function cloneTypedArray(typedArray, isDeep) {\n    var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer\n    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length)\n  }\n\n  /** `Object#toString` result references. */\n  var boolTag$2 = '[object Boolean]',\n    dateTag$2 = '[object Date]',\n    mapTag$4 = '[object Map]',\n    numberTag$2 = '[object Number]',\n    regexpTag$3 = '[object RegExp]',\n    setTag$4 = '[object Set]',\n    stringTag$3 = '[object String]',\n    symbolTag$2 = '[object Symbol]'\n\n  var arrayBufferTag$2 = '[object ArrayBuffer]',\n    dataViewTag$2 = '[object DataView]',\n    float32Tag$1 = '[object Float32Array]',\n    float64Tag$1 = '[object Float64Array]',\n    int8Tag$1 = '[object Int8Array]',\n    int16Tag$1 = '[object Int16Array]',\n    int32Tag$1 = '[object Int32Array]',\n    uint8Tag$1 = '[object Uint8Array]',\n    uint8ClampedTag$1 = '[object Uint8ClampedArray]',\n    uint16Tag$1 = '[object Uint16Array]',\n    uint32Tag$1 = '[object Uint32Array]'\n\n  /**\n   * Initializes an object clone based on its `toStringTag`.\n   *\n   * **Note:** This function only supports cloning values with tags of\n   * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.\n   *\n   * @private\n   * @param {Object} object The object to clone.\n   * @param {string} tag The `toStringTag` of the object to clone.\n   * @param {boolean} [isDeep] Specify a deep clone.\n   * @returns {Object} Returns the initialized clone.\n   */\n  function initCloneByTag(object, tag, isDeep) {\n    var Ctor = object.constructor\n    switch (tag) {\n      case arrayBufferTag$2:\n        return cloneArrayBuffer(object)\n\n      case boolTag$2:\n      case dateTag$2:\n        return new Ctor(+object)\n\n      case dataViewTag$2:\n        return cloneDataView(object, isDeep)\n\n      case float32Tag$1:\n      case float64Tag$1:\n      case int8Tag$1:\n      case int16Tag$1:\n      case int32Tag$1:\n      case uint8Tag$1:\n      case uint8ClampedTag$1:\n      case uint16Tag$1:\n      case uint32Tag$1:\n        return cloneTypedArray(object, isDeep)\n\n      case mapTag$4:\n        return new Ctor()\n\n      case numberTag$2:\n      case stringTag$3:\n        return new Ctor(object)\n\n      case regexpTag$3:\n        return cloneRegExp(object)\n\n      case setTag$4:\n        return new Ctor()\n\n      case symbolTag$2:\n        return cloneSymbol(object)\n    }\n  }\n\n  /**\n   * Initializes an object clone.\n   *\n   * @private\n   * @param {Object} object The object to clone.\n   * @returns {Object} Returns the initialized clone.\n   */\n  function initCloneObject(object) {\n    return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate$1(getPrototype$1(object)) : {}\n  }\n\n  /** `Object#toString` result references. */\n  var mapTag$3 = '[object Map]'\n\n  /**\n   * The base implementation of `_.isMap` without Node.js optimizations.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n   */\n  function baseIsMap(value) {\n    return isObjectLike(value) && getTag$1(value) == mapTag$3\n  }\n\n  /* Node.js helper references. */\n  var nodeIsMap = nodeUtil$1 && nodeUtil$1.isMap\n\n  /**\n   * Checks if `value` is classified as a `Map` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.3.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n   * @example\n   *\n   * _.isMap(new Map);\n   * // => true\n   *\n   * _.isMap(new WeakMap);\n   * // => false\n   */\n  var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap\n\n  const isMap$1 = isMap\n\n  /** `Object#toString` result references. */\n  var setTag$3 = '[object Set]'\n\n  /**\n   * The base implementation of `_.isSet` without Node.js optimizations.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n   */\n  function baseIsSet(value) {\n    return isObjectLike(value) && getTag$1(value) == setTag$3\n  }\n\n  /* Node.js helper references. */\n  var nodeIsSet = nodeUtil$1 && nodeUtil$1.isSet\n\n  /**\n   * Checks if `value` is classified as a `Set` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.3.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n   * @example\n   *\n   * _.isSet(new Set);\n   * // => true\n   *\n   * _.isSet(new WeakSet);\n   * // => false\n   */\n  var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet\n\n  const isSet$1 = isSet\n\n  /** Used to compose bitmasks for cloning. */\n  var CLONE_DEEP_FLAG = 1,\n    CLONE_FLAT_FLAG = 2,\n    CLONE_SYMBOLS_FLAG$1 = 4\n\n  /** `Object#toString` result references. */\n  var argsTag$1 = '[object Arguments]',\n    arrayTag$1 = '[object Array]',\n    boolTag$1 = '[object Boolean]',\n    dateTag$1 = '[object Date]',\n    errorTag$1 = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag$2 = '[object Map]',\n    numberTag$1 = '[object Number]',\n    objectTag$1 = '[object Object]',\n    regexpTag$2 = '[object RegExp]',\n    setTag$2 = '[object Set]',\n    stringTag$2 = '[object String]',\n    symbolTag$1 = '[object Symbol]',\n    weakMapTag = '[object WeakMap]'\n\n  var arrayBufferTag$1 = '[object ArrayBuffer]',\n    dataViewTag$1 = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]'\n\n  /** Used to identify `toStringTag` values supported by `_.clone`. */\n  var cloneableTags = {}\n  cloneableTags[argsTag$1] = cloneableTags[arrayTag$1] = cloneableTags[arrayBufferTag$1] = cloneableTags[\n    dataViewTag$1\n  ] = cloneableTags[boolTag$1] = cloneableTags[dateTag$1] = cloneableTags[float32Tag] = cloneableTags[\n    float64Tag\n  ] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[\n    mapTag$2\n  ] = cloneableTags[numberTag$1] = cloneableTags[objectTag$1] = cloneableTags[regexpTag$2] = cloneableTags[\n    setTag$2\n  ] = cloneableTags[stringTag$2] = cloneableTags[symbolTag$1] = cloneableTags[uint8Tag] = cloneableTags[\n    uint8ClampedTag\n  ] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true\n  cloneableTags[errorTag$1] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false\n\n  /**\n   * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n   * traversed objects.\n   *\n   * @private\n   * @param {*} value The value to clone.\n   * @param {boolean} bitmask The bitmask flags.\n   *  1 - Deep clone\n   *  2 - Flatten inherited properties\n   *  4 - Clone symbols\n   * @param {Function} [customizer] The function to customize cloning.\n   * @param {string} [key] The key of `value`.\n   * @param {Object} [object] The parent object of `value`.\n   * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n   * @returns {*} Returns the cloned value.\n   */\n  function baseClone(value, bitmask, customizer, key, object, stack) {\n    var result,\n      isDeep = bitmask & CLONE_DEEP_FLAG,\n      isFlat = bitmask & CLONE_FLAT_FLAG,\n      isFull = bitmask & CLONE_SYMBOLS_FLAG$1\n\n    if (customizer) {\n      result = object ? customizer(value, key, object, stack) : customizer(value)\n    }\n    if (result !== undefined) {\n      return result\n    }\n    if (!isObject(value)) {\n      return value\n    }\n    var isArr = isArray$1(value)\n    if (isArr) {\n      result = initCloneArray(value)\n      if (!isDeep) {\n        return copyArray(value, result)\n      }\n    } else {\n      var tag = getTag$1(value),\n        isFunc = tag == funcTag || tag == genTag\n\n      if (isBuffer$1(value)) {\n        return cloneBuffer(value, isDeep)\n      }\n      if (tag == objectTag$1 || tag == argsTag$1 || (isFunc && !object)) {\n        result = isFlat || isFunc ? {} : initCloneObject(value)\n        if (!isDeep) {\n          return isFlat\n            ? copySymbolsIn(value, baseAssignIn(result, value))\n            : copySymbols(value, baseAssign(result, value))\n        }\n      } else {\n        if (!cloneableTags[tag]) {\n          return object ? value : {}\n        }\n        result = initCloneByTag(value, tag, isDeep)\n      }\n    }\n    // Check for circular references and return its corresponding clone.\n    stack || (stack = new Stack())\n    var stacked = stack.get(value)\n    if (stacked) {\n      return stacked\n    }\n    stack.set(value, result)\n\n    if (isSet$1(value)) {\n      value.forEach(function (subValue) {\n        result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack))\n      })\n    } else if (isMap$1(value)) {\n      value.forEach(function (subValue, key) {\n        result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack))\n      })\n    }\n\n    var keysFunc = isFull ? (isFlat ? getAllKeysIn : getAllKeys) : isFlat ? keysIn : keys\n\n    var props = isArr ? undefined : keysFunc(value)\n    arrayEach(props || value, function (subValue, key) {\n      if (props) {\n        key = subValue\n        subValue = value[key]\n      }\n      // Recursively populate clone (susceptible to call stack limits).\n      assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack))\n    })\n    return result\n  }\n\n  /** Used to compose bitmasks for cloning. */\n  var CLONE_SYMBOLS_FLAG = 4\n\n  /**\n   * Creates a shallow clone of `value`.\n   *\n   * **Note:** This method is loosely based on the\n   * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n   * and supports cloning arrays, array buffers, booleans, date objects, maps,\n   * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n   * arrays. The own enumerable properties of `arguments` objects are cloned\n   * as plain objects. An empty object is returned for uncloneable values such\n   * as error objects, functions, DOM nodes, and WeakMaps.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to clone.\n   * @returns {*} Returns the cloned value.\n   * @see _.cloneDeep\n   * @example\n   *\n   * var objects = [{ 'a': 1 }, { 'b': 2 }];\n   *\n   * var shallow = _.clone(objects);\n   * console.log(shallow[0] === objects[0]);\n   * // => true\n   */\n  function clone(value) {\n    return baseClone(value, CLONE_SYMBOLS_FLAG)\n  }\n\n  /**\n   * Creates an array with all falsey values removed. The values `false`, `null`,\n   * `0`, `\"\"`, `undefined`, and `NaN` are falsey.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Array\n   * @param {Array} array The array to compact.\n   * @returns {Array} Returns the new array of filtered values.\n   * @example\n   *\n   * _.compact([0, 1, false, 2, '', 3]);\n   * // => [1, 2, 3]\n   */\n  function compact(array) {\n    var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = []\n\n    while (++index < length) {\n      var value = array[index]\n      if (value) {\n        result[resIndex++] = value\n      }\n    }\n    return result\n  }\n\n  /** Used to stand-in for `undefined` hash values. */\n  var HASH_UNDEFINED = '__lodash_hash_undefined__'\n\n  /**\n   * Adds `value` to the array cache.\n   *\n   * @private\n   * @name add\n   * @memberOf SetCache\n   * @alias push\n   * @param {*} value The value to cache.\n   * @returns {Object} Returns the cache instance.\n   */\n  function setCacheAdd(value) {\n    this.__data__.set(value, HASH_UNDEFINED)\n    return this\n  }\n\n  /**\n   * Checks if `value` is in the array cache.\n   *\n   * @private\n   * @name has\n   * @memberOf SetCache\n   * @param {*} value The value to search for.\n   * @returns {number} Returns `true` if `value` is found, else `false`.\n   */\n  function setCacheHas(value) {\n    return this.__data__.has(value)\n  }\n\n  /**\n   *\n   * Creates an array cache object to store unique values.\n   *\n   * @private\n   * @constructor\n   * @param {Array} [values] The values to cache.\n   */\n  function SetCache(values) {\n    var index = -1,\n      length = values == null ? 0 : values.length\n\n    this.__data__ = new MapCache()\n    while (++index < length) {\n      this.add(values[index])\n    }\n  }\n\n  // Add methods to `SetCache`.\n  SetCache.prototype.add = SetCache.prototype.push = setCacheAdd\n  SetCache.prototype.has = setCacheHas\n\n  /**\n   * A specialized version of `_.some` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {boolean} Returns `true` if any element passes the predicate check,\n   *  else `false`.\n   */\n  function arraySome(array, predicate) {\n    var index = -1,\n      length = array == null ? 0 : array.length\n\n    while (++index < length) {\n      if (predicate(array[index], index, array)) {\n        return true\n      }\n    }\n    return false\n  }\n\n  /**\n   * Checks if a `cache` value for `key` exists.\n   *\n   * @private\n   * @param {Object} cache The cache to query.\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   */\n  function cacheHas(cache, key) {\n    return cache.has(key)\n  }\n\n  /** Used to compose bitmasks for value comparisons. */\n  var COMPARE_PARTIAL_FLAG$5 = 1,\n    COMPARE_UNORDERED_FLAG$3 = 2\n\n  /**\n   * A specialized version of `baseIsEqualDeep` for arrays with support for\n   * partial deep comparisons.\n   *\n   * @private\n   * @param {Array} array The array to compare.\n   * @param {Array} other The other array to compare.\n   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n   * @param {Function} customizer The function to customize comparisons.\n   * @param {Function} equalFunc The function to determine equivalents of values.\n   * @param {Object} stack Tracks traversed `array` and `other` objects.\n   * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n   */\n  function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n    var isPartial = bitmask & COMPARE_PARTIAL_FLAG$5,\n      arrLength = array.length,\n      othLength = other.length\n\n    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n      return false\n    }\n    // Check that cyclic values are equal.\n    var arrStacked = stack.get(array)\n    var othStacked = stack.get(other)\n    if (arrStacked && othStacked) {\n      return arrStacked == other && othStacked == array\n    }\n    var index = -1,\n      result = true,\n      seen = bitmask & COMPARE_UNORDERED_FLAG$3 ? new SetCache() : undefined\n\n    stack.set(array, other)\n    stack.set(other, array)\n\n    // Ignore non-index properties.\n    while (++index < arrLength) {\n      var arrValue = array[index],\n        othValue = other[index]\n\n      if (customizer) {\n        var compared = isPartial\n          ? customizer(othValue, arrValue, index, other, array, stack)\n          : customizer(arrValue, othValue, index, array, other, stack)\n      }\n      if (compared !== undefined) {\n        if (compared) {\n          continue\n        }\n        result = false\n        break\n      }\n      // Recursively compare arrays (susceptible to call stack limits).\n      if (seen) {\n        if (\n          !arraySome(other, function (othValue, othIndex) {\n            if (\n              !cacheHas(seen, othIndex) &&\n              (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))\n            ) {\n              return seen.push(othIndex)\n            }\n          })\n        ) {\n          result = false\n          break\n        }\n      } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n        result = false\n        break\n      }\n    }\n    stack['delete'](array)\n    stack['delete'](other)\n    return result\n  }\n\n  /**\n   * Converts `map` to its key-value pairs.\n   *\n   * @private\n   * @param {Object} map The map to convert.\n   * @returns {Array} Returns the key-value pairs.\n   */\n  function mapToArray(map) {\n    var index = -1,\n      result = Array(map.size)\n\n    map.forEach(function (value, key) {\n      result[++index] = [key, value]\n    })\n    return result\n  }\n\n  /**\n   * Converts `set` to an array of its values.\n   *\n   * @private\n   * @param {Object} set The set to convert.\n   * @returns {Array} Returns the values.\n   */\n  function setToArray(set) {\n    var index = -1,\n      result = Array(set.size)\n\n    set.forEach(function (value) {\n      result[++index] = value\n    })\n    return result\n  }\n\n  /** Used to compose bitmasks for value comparisons. */\n  var COMPARE_PARTIAL_FLAG$4 = 1,\n    COMPARE_UNORDERED_FLAG$2 = 2\n\n  /** `Object#toString` result references. */\n  var boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    mapTag$1 = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag$1 = '[object RegExp]',\n    setTag$1 = '[object Set]',\n    stringTag$1 = '[object String]',\n    symbolTag = '[object Symbol]'\n\n  var arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]'\n\n  /** Used to convert symbols to primitives and strings. */\n  var symbolProto = Symbol$2 ? Symbol$2.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined\n\n  /**\n   * A specialized version of `baseIsEqualDeep` for comparing objects of\n   * the same `toStringTag`.\n   *\n   * **Note:** This function only supports comparing values with tags of\n   * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n   *\n   * @private\n   * @param {Object} object The object to compare.\n   * @param {Object} other The other object to compare.\n   * @param {string} tag The `toStringTag` of the objects to compare.\n   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n   * @param {Function} customizer The function to customize comparisons.\n   * @param {Function} equalFunc The function to determine equivalents of values.\n   * @param {Object} stack Tracks traversed `object` and `other` objects.\n   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n   */\n  function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n    switch (tag) {\n      case dataViewTag:\n        if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {\n          return false\n        }\n        object = object.buffer\n        other = other.buffer\n\n      case arrayBufferTag:\n        if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array$1(object), new Uint8Array$1(other))) {\n          return false\n        }\n        return true\n\n      case boolTag:\n      case dateTag:\n      case numberTag:\n        // Coerce booleans to `1` or `0` and dates to milliseconds.\n        // Invalid dates are coerced to `NaN`.\n        return eq(+object, +other)\n\n      case errorTag:\n        return object.name == other.name && object.message == other.message\n\n      case regexpTag$1:\n      case stringTag$1:\n        // Coerce regexes to strings and treat strings, primitives and objects,\n        // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n        // for more details.\n        return object == other + ''\n\n      case mapTag$1:\n        var convert = mapToArray\n\n      case setTag$1:\n        var isPartial = bitmask & COMPARE_PARTIAL_FLAG$4\n        convert || (convert = setToArray)\n\n        if (object.size != other.size && !isPartial) {\n          return false\n        }\n        // Assume cyclic values are equal.\n        var stacked = stack.get(object)\n        if (stacked) {\n          return stacked == other\n        }\n        bitmask |= COMPARE_UNORDERED_FLAG$2\n\n        // Recursively compare objects (susceptible to call stack limits).\n        stack.set(object, other)\n        var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack)\n        stack['delete'](object)\n        return result\n\n      case symbolTag:\n        if (symbolValueOf) {\n          return symbolValueOf.call(object) == symbolValueOf.call(other)\n        }\n    }\n    return false\n  }\n\n  /** Used to compose bitmasks for value comparisons. */\n  var COMPARE_PARTIAL_FLAG$3 = 1\n\n  /** Used for built-in method references. */\n  var objectProto$5 = Object.prototype\n\n  /** Used to check objects for own properties. */\n  var hasOwnProperty$5 = objectProto$5.hasOwnProperty\n\n  /**\n   * A specialized version of `baseIsEqualDeep` for objects with support for\n   * partial deep comparisons.\n   *\n   * @private\n   * @param {Object} object The object to compare.\n   * @param {Object} other The other object to compare.\n   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n   * @param {Function} customizer The function to customize comparisons.\n   * @param {Function} equalFunc The function to determine equivalents of values.\n   * @param {Object} stack Tracks traversed `object` and `other` objects.\n   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n   */\n  function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n    var isPartial = bitmask & COMPARE_PARTIAL_FLAG$3,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length\n\n    if (objLength != othLength && !isPartial) {\n      return false\n    }\n    var index = objLength\n    while (index--) {\n      var key = objProps[index]\n      if (!(isPartial ? key in other : hasOwnProperty$5.call(other, key))) {\n        return false\n      }\n    }\n    // Check that cyclic values are equal.\n    var objStacked = stack.get(object)\n    var othStacked = stack.get(other)\n    if (objStacked && othStacked) {\n      return objStacked == other && othStacked == object\n    }\n    var result = true\n    stack.set(object, other)\n    stack.set(other, object)\n\n    var skipCtor = isPartial\n    while (++index < objLength) {\n      key = objProps[index]\n      var objValue = object[key],\n        othValue = other[key]\n\n      if (customizer) {\n        var compared = isPartial\n          ? customizer(othValue, objValue, key, other, object, stack)\n          : customizer(objValue, othValue, key, object, other, stack)\n      }\n      // Recursively compare objects (susceptible to call stack limits).\n      if (\n        !(compared === undefined\n          ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack)\n          : compared)\n      ) {\n        result = false\n        break\n      }\n      skipCtor || (skipCtor = key == 'constructor')\n    }\n    if (result && !skipCtor) {\n      var objCtor = object.constructor,\n        othCtor = other.constructor\n\n      // Non `Object` object instances with different constructors are not equal.\n      if (\n        objCtor != othCtor &&\n        'constructor' in object &&\n        'constructor' in other &&\n        !(\n          typeof objCtor == 'function' &&\n          objCtor instanceof objCtor &&\n          typeof othCtor == 'function' &&\n          othCtor instanceof othCtor\n        )\n      ) {\n        result = false\n      }\n    }\n    stack['delete'](object)\n    stack['delete'](other)\n    return result\n  }\n\n  /** Used to compose bitmasks for value comparisons. */\n  var COMPARE_PARTIAL_FLAG$2 = 1\n\n  /** `Object#toString` result references. */\n  var argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    objectTag = '[object Object]'\n\n  /** Used for built-in method references. */\n  var objectProto$4 = Object.prototype\n\n  /** Used to check objects for own properties. */\n  var hasOwnProperty$4 = objectProto$4.hasOwnProperty\n\n  /**\n   * A specialized version of `baseIsEqual` for arrays and objects which performs\n   * deep comparisons and tracks traversed objects enabling objects with circular\n   * references to be compared.\n   *\n   * @private\n   * @param {Object} object The object to compare.\n   * @param {Object} other The other object to compare.\n   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n   * @param {Function} customizer The function to customize comparisons.\n   * @param {Function} equalFunc The function to determine equivalents of values.\n   * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n   */\n  function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n    var objIsArr = isArray$1(object),\n      othIsArr = isArray$1(other),\n      objTag = objIsArr ? arrayTag : getTag$1(object),\n      othTag = othIsArr ? arrayTag : getTag$1(other)\n\n    objTag = objTag == argsTag ? objectTag : objTag\n    othTag = othTag == argsTag ? objectTag : othTag\n\n    var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag\n\n    if (isSameTag && isBuffer$1(object)) {\n      if (!isBuffer$1(other)) {\n        return false\n      }\n      objIsArr = true\n      objIsObj = false\n    }\n    if (isSameTag && !objIsObj) {\n      stack || (stack = new Stack())\n      return objIsArr || isTypedArray$1(object)\n        ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n        : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack)\n    }\n    if (!(bitmask & COMPARE_PARTIAL_FLAG$2)) {\n      var objIsWrapped = objIsObj && hasOwnProperty$4.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty$4.call(other, '__wrapped__')\n\n      if (objIsWrapped || othIsWrapped) {\n        var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other\n\n        stack || (stack = new Stack())\n        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack)\n      }\n    }\n    if (!isSameTag) {\n      return false\n    }\n    stack || (stack = new Stack())\n    return equalObjects(object, other, bitmask, customizer, equalFunc, stack)\n  }\n\n  /**\n   * The base implementation of `_.isEqual` which supports partial comparisons\n   * and tracks traversed objects.\n   *\n   * @private\n   * @param {*} value The value to compare.\n   * @param {*} other The other value to compare.\n   * @param {boolean} bitmask The bitmask flags.\n   *  1 - Unordered comparison\n   *  2 - Partial comparison\n   * @param {Function} [customizer] The function to customize comparisons.\n   * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n   */\n  function baseIsEqual(value, other, bitmask, customizer, stack) {\n    if (value === other) {\n      return true\n    }\n    if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n      return value !== value && other !== other\n    }\n    return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack)\n  }\n\n  /** Used to compose bitmasks for value comparisons. */\n  var COMPARE_PARTIAL_FLAG$1 = 1,\n    COMPARE_UNORDERED_FLAG$1 = 2\n\n  /**\n   * The base implementation of `_.isMatch` without support for iteratee shorthands.\n   *\n   * @private\n   * @param {Object} object The object to inspect.\n   * @param {Object} source The object of property values to match.\n   * @param {Array} matchData The property names, values, and compare flags to match.\n   * @param {Function} [customizer] The function to customize comparisons.\n   * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n   */\n  function baseIsMatch(object, source, matchData, customizer) {\n    var index = matchData.length,\n      length = index,\n      noCustomizer = !customizer\n\n    if (object == null) {\n      return !length\n    }\n    object = Object(object)\n    while (index--) {\n      var data = matchData[index]\n      if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {\n        return false\n      }\n    }\n    while (++index < length) {\n      data = matchData[index]\n      var key = data[0],\n        objValue = object[key],\n        srcValue = data[1]\n\n      if (noCustomizer && data[2]) {\n        if (objValue === undefined && !(key in object)) {\n          return false\n        }\n      } else {\n        var stack = new Stack()\n        if (customizer) {\n          var result = customizer(objValue, srcValue, key, object, source, stack)\n        }\n        if (\n          !(result === undefined\n            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG$1 | COMPARE_UNORDERED_FLAG$1, customizer, stack)\n            : result)\n        ) {\n          return false\n        }\n      }\n    }\n    return true\n  }\n\n  /**\n   * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` if suitable for strict\n   *  equality comparisons, else `false`.\n   */\n  function isStrictComparable(value) {\n    return value === value && !isObject(value)\n  }\n\n  /**\n   * Gets the property names, values, and compare flags of `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the match data of `object`.\n   */\n  function getMatchData(object) {\n    var result = keys(object),\n      length = result.length\n\n    while (length--) {\n      var key = result[length],\n        value = object[key]\n\n      result[length] = [key, value, isStrictComparable(value)]\n    }\n    return result\n  }\n\n  /**\n   * A specialized version of `matchesProperty` for source values suitable\n   * for strict equality comparisons, i.e. `===`.\n   *\n   * @private\n   * @param {string} key The key of the property to get.\n   * @param {*} srcValue The value to match.\n   * @returns {Function} Returns the new spec function.\n   */\n  function matchesStrictComparable(key, srcValue) {\n    return function (object) {\n      if (object == null) {\n        return false\n      }\n      return object[key] === srcValue && (srcValue !== undefined || key in Object(object))\n    }\n  }\n\n  /**\n   * The base implementation of `_.matches` which doesn't clone `source`.\n   *\n   * @private\n   * @param {Object} source The object of property values to match.\n   * @returns {Function} Returns the new spec function.\n   */\n  function baseMatches(source) {\n    var matchData = getMatchData(source)\n    if (matchData.length == 1 && matchData[0][2]) {\n      return matchesStrictComparable(matchData[0][0], matchData[0][1])\n    }\n    return function (object) {\n      return object === source || baseIsMatch(object, source, matchData)\n    }\n  }\n\n  /**\n   * The base implementation of `_.hasIn` without support for deep paths.\n   *\n   * @private\n   * @param {Object} [object] The object to query.\n   * @param {Array|string} key The key to check.\n   * @returns {boolean} Returns `true` if `key` exists, else `false`.\n   */\n  function baseHasIn(object, key) {\n    return object != null && key in Object(object)\n  }\n\n  /**\n   * Checks if `path` exists on `object`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array|string} path The path to check.\n   * @param {Function} hasFunc The function to check properties.\n   * @returns {boolean} Returns `true` if `path` exists, else `false`.\n   */\n  function hasPath(object, path, hasFunc) {\n    path = castPath(path, object)\n\n    var index = -1,\n      length = path.length,\n      result = false\n\n    while (++index < length) {\n      var key = toKey(path[index])\n      if (!(result = object != null && hasFunc(object, key))) {\n        break\n      }\n      object = object[key]\n    }\n    if (result || ++index != length) {\n      return result\n    }\n    length = object == null ? 0 : object.length\n    return !!length && isLength(length) && isIndex(key, length) && (isArray$1(object) || isArguments$1(object))\n  }\n\n  /**\n   * Checks if `path` is a direct or inherited property of `object`.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Object\n   * @param {Object} object The object to query.\n   * @param {Array|string} path The path to check.\n   * @returns {boolean} Returns `true` if `path` exists, else `false`.\n   * @example\n   *\n   * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n   *\n   * _.hasIn(object, 'a');\n   * // => true\n   *\n   * _.hasIn(object, 'a.b');\n   * // => true\n   *\n   * _.hasIn(object, ['a', 'b']);\n   * // => true\n   *\n   * _.hasIn(object, 'b');\n   * // => false\n   */\n  function hasIn(object, path) {\n    return object != null && hasPath(object, path, baseHasIn)\n  }\n\n  /** Used to compose bitmasks for value comparisons. */\n  var COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2\n\n  /**\n   * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n   *\n   * @private\n   * @param {string} path The path of the property to get.\n   * @param {*} srcValue The value to match.\n   * @returns {Function} Returns the new spec function.\n   */\n  function baseMatchesProperty(path, srcValue) {\n    if (isKey(path) && isStrictComparable(srcValue)) {\n      return matchesStrictComparable(toKey(path), srcValue)\n    }\n    return function (object) {\n      var objValue = get(object, path)\n      return objValue === undefined && objValue === srcValue\n        ? hasIn(object, path)\n        : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG)\n    }\n  }\n\n  /**\n   * The base implementation of `_.property` without support for deep paths.\n   *\n   * @private\n   * @param {string} key The key of the property to get.\n   * @returns {Function} Returns the new accessor function.\n   */\n  function baseProperty(key) {\n    return function (object) {\n      return object == null ? undefined : object[key]\n    }\n  }\n\n  /**\n   * A specialized version of `baseProperty` which supports deep paths.\n   *\n   * @private\n   * @param {Array|string} path The path of the property to get.\n   * @returns {Function} Returns the new accessor function.\n   */\n  function basePropertyDeep(path) {\n    return function (object) {\n      return baseGet(object, path)\n    }\n  }\n\n  /**\n   * Creates a function that returns the value at `path` of a given object.\n   *\n   * @static\n   * @memberOf _\n   * @since 2.4.0\n   * @category Util\n   * @param {Array|string} path The path of the property to get.\n   * @returns {Function} Returns the new accessor function.\n   * @example\n   *\n   * var objects = [\n   *   { 'a': { 'b': 2 } },\n   *   { 'a': { 'b': 1 } }\n   * ];\n   *\n   * _.map(objects, _.property('a.b'));\n   * // => [2, 1]\n   *\n   * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n   * // => [1, 2]\n   */\n  function property(path) {\n    return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path)\n  }\n\n  /**\n   * The base implementation of `_.iteratee`.\n   *\n   * @private\n   * @param {*} [value=_.identity] The value to convert to an iteratee.\n   * @returns {Function} Returns the iteratee.\n   */\n  function baseIteratee(value) {\n    // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n    // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n    if (typeof value == 'function') {\n      return value\n    }\n    if (value == null) {\n      return identity\n    }\n    if (typeof value == 'object') {\n      return isArray$1(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value)\n    }\n    return property(value)\n  }\n\n  /**\n   * A specialized version of `baseAggregator` for arrays.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} setter The function to set `accumulator` values.\n   * @param {Function} iteratee The iteratee to transform keys.\n   * @param {Object} accumulator The initial aggregated object.\n   * @returns {Function} Returns `accumulator`.\n   */\n  function arrayAggregator(array, setter, iteratee, accumulator) {\n    var index = -1,\n      length = array == null ? 0 : array.length\n\n    while (++index < length) {\n      var value = array[index]\n      setter(accumulator, value, iteratee(value), array)\n    }\n    return accumulator\n  }\n\n  /**\n   * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n   *\n   * @private\n   * @param {boolean} [fromRight] Specify iterating from right to left.\n   * @returns {Function} Returns the new base function.\n   */\n  function createBaseFor(fromRight) {\n    return function (object, iteratee, keysFunc) {\n      var index = -1,\n        iterable = Object(object),\n        props = keysFunc(object),\n        length = props.length\n\n      while (length--) {\n        var key = props[fromRight ? length : ++index]\n        if (iteratee(iterable[key], key, iterable) === false) {\n          break\n        }\n      }\n      return object\n    }\n  }\n\n  /**\n   * The base implementation of `baseForOwn` which iterates over `object`\n   * properties returned by `keysFunc` and invokes `iteratee` for each property.\n   * Iteratee functions may exit iteration early by explicitly returning `false`.\n   *\n   * @private\n   * @param {Object} object The object to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {Function} keysFunc The function to get the keys of `object`.\n   * @returns {Object} Returns `object`.\n   */\n  var baseFor = createBaseFor()\n\n  const baseFor$1 = baseFor\n\n  /**\n   * The base implementation of `_.forOwn` without support for iteratee shorthands.\n   *\n   * @private\n   * @param {Object} object The object to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Object} Returns `object`.\n   */\n  function baseForOwn(object, iteratee) {\n    return object && baseFor$1(object, iteratee, keys)\n  }\n\n  /**\n   * Creates a `baseEach` or `baseEachRight` function.\n   *\n   * @private\n   * @param {Function} eachFunc The function to iterate over a collection.\n   * @param {boolean} [fromRight] Specify iterating from right to left.\n   * @returns {Function} Returns the new base function.\n   */\n  function createBaseEach(eachFunc, fromRight) {\n    return function (collection, iteratee) {\n      if (collection == null) {\n        return collection\n      }\n      if (!isArrayLike(collection)) {\n        return eachFunc(collection, iteratee)\n      }\n      var length = collection.length,\n        index = fromRight ? length : -1,\n        iterable = Object(collection)\n\n      while (fromRight ? index-- : ++index < length) {\n        if (iteratee(iterable[index], index, iterable) === false) {\n          break\n        }\n      }\n      return collection\n    }\n  }\n\n  /**\n   * The base implementation of `_.forEach` without support for iteratee shorthands.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array|Object} Returns `collection`.\n   */\n  var baseEach = createBaseEach(baseForOwn)\n\n  const baseEach$1 = baseEach\n\n  /**\n   * Aggregates elements of `collection` on `accumulator` with keys transformed\n   * by `iteratee` and values set by `setter`.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} setter The function to set `accumulator` values.\n   * @param {Function} iteratee The iteratee to transform keys.\n   * @param {Object} accumulator The initial aggregated object.\n   * @returns {Function} Returns `accumulator`.\n   */\n  function baseAggregator(collection, setter, iteratee, accumulator) {\n    baseEach$1(collection, function (value, key, collection) {\n      setter(accumulator, value, iteratee(value), collection)\n    })\n    return accumulator\n  }\n\n  /**\n   * Creates a function like `_.groupBy`.\n   *\n   * @private\n   * @param {Function} setter The function to set accumulator values.\n   * @param {Function} [initializer] The accumulator object initializer.\n   * @returns {Function} Returns the new aggregator function.\n   */\n  function createAggregator(setter, initializer) {\n    return function (collection, iteratee) {\n      var func = isArray$1(collection) ? arrayAggregator : baseAggregator,\n        accumulator = initializer ? initializer() : {}\n\n      return func(collection, setter, baseIteratee(iteratee), accumulator)\n    }\n  }\n\n  /** Used for built-in method references. */\n  var objectProto$3 = Object.prototype\n\n  /** Used to check objects for own properties. */\n  var hasOwnProperty$3 = objectProto$3.hasOwnProperty\n\n  /**\n   * Assigns own and inherited enumerable string keyed properties of source\n   * objects to the destination object for all destination properties that\n   * resolve to `undefined`. Source objects are applied from left to right.\n   * Once a property is set, additional values of the same property are ignored.\n   *\n   * **Note:** This method mutates `object`.\n   *\n   * @static\n   * @since 0.1.0\n   * @memberOf _\n   * @category Object\n   * @param {Object} object The destination object.\n   * @param {...Object} [sources] The source objects.\n   * @returns {Object} Returns `object`.\n   * @see _.defaultsDeep\n   * @example\n   *\n   * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n   * // => { 'a': 1, 'b': 2 }\n   */\n  var defaults = baseRest(function (object, sources) {\n    object = Object(object)\n\n    var index = -1\n    var length = sources.length\n    var guard = length > 2 ? sources[2] : undefined\n\n    if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n      length = 1\n    }\n\n    while (++index < length) {\n      var source = sources[index]\n      var props = keysIn(source)\n      var propsIndex = -1\n      var propsLength = props.length\n\n      while (++propsIndex < propsLength) {\n        var key = props[propsIndex]\n        var value = object[key]\n\n        if (value === undefined || (eq(value, objectProto$3[key]) && !hasOwnProperty$3.call(object, key))) {\n          object[key] = source[key]\n        }\n      }\n    }\n\n    return object\n  })\n\n  const defaults$1 = defaults\n\n  /**\n   * This method is like `_.isArrayLike` except that it also checks if `value`\n   * is an object.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an array-like object,\n   *  else `false`.\n   * @example\n   *\n   * _.isArrayLikeObject([1, 2, 3]);\n   * // => true\n   *\n   * _.isArrayLikeObject(document.body.children);\n   * // => true\n   *\n   * _.isArrayLikeObject('abc');\n   * // => false\n   *\n   * _.isArrayLikeObject(_.noop);\n   * // => false\n   */\n  function isArrayLikeObject(value) {\n    return isObjectLike(value) && isArrayLike(value)\n  }\n\n  /**\n   * This function is like `arrayIncludes` except that it accepts a comparator.\n   *\n   * @private\n   * @param {Array} [array] The array to inspect.\n   * @param {*} target The value to search for.\n   * @param {Function} comparator The comparator invoked per element.\n   * @returns {boolean} Returns `true` if `target` is found, else `false`.\n   */\n  function arrayIncludesWith(array, value, comparator) {\n    var index = -1,\n      length = array == null ? 0 : array.length\n\n    while (++index < length) {\n      if (comparator(value, array[index])) {\n        return true\n      }\n    }\n    return false\n  }\n\n  /** Used as the size to enable large array optimizations. */\n  var LARGE_ARRAY_SIZE$1 = 200\n\n  /**\n   * The base implementation of methods like `_.difference` without support\n   * for excluding multiple arrays or iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {Array} values The values to exclude.\n   * @param {Function} [iteratee] The iteratee invoked per element.\n   * @param {Function} [comparator] The comparator invoked per element.\n   * @returns {Array} Returns the new array of filtered values.\n   */\n  function baseDifference(array, values, iteratee, comparator) {\n    var index = -1,\n      includes = arrayIncludes,\n      isCommon = true,\n      length = array.length,\n      result = [],\n      valuesLength = values.length\n\n    if (!length) {\n      return result\n    }\n    if (iteratee) {\n      values = arrayMap(values, baseUnary(iteratee))\n    }\n    if (comparator) {\n      includes = arrayIncludesWith\n      isCommon = false\n    } else if (values.length >= LARGE_ARRAY_SIZE$1) {\n      includes = cacheHas\n      isCommon = false\n      values = new SetCache(values)\n    }\n    outer: while (++index < length) {\n      var value = array[index],\n        computed = iteratee == null ? value : iteratee(value)\n\n      value = comparator || value !== 0 ? value : 0\n      if (isCommon && computed === computed) {\n        var valuesIndex = valuesLength\n        while (valuesIndex--) {\n          if (values[valuesIndex] === computed) {\n            continue outer\n          }\n        }\n        result.push(value)\n      } else if (!includes(values, computed, comparator)) {\n        result.push(value)\n      }\n    }\n    return result\n  }\n\n  /**\n   * Creates an array of `array` values not included in the other given arrays\n   * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n   * for equality comparisons. The order and references of result values are\n   * determined by the first array.\n   *\n   * **Note:** Unlike `_.pullAll`, this method returns a new array.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Array\n   * @param {Array} array The array to inspect.\n   * @param {...Array} [values] The values to exclude.\n   * @returns {Array} Returns the new array of filtered values.\n   * @see _.without, _.xor\n   * @example\n   *\n   * _.difference([2, 1], [2, 3]);\n   * // => [1]\n   */\n  var difference = baseRest(function (array, values) {\n    return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true)) : []\n  })\n\n  const difference$1 = difference\n\n  /**\n   * Gets the last element of `array`.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Array\n   * @param {Array} array The array to query.\n   * @returns {*} Returns the last element of `array`.\n   * @example\n   *\n   * _.last([1, 2, 3]);\n   * // => 3\n   */\n  function last(array) {\n    var length = array == null ? 0 : array.length\n    return length ? array[length - 1] : undefined\n  }\n\n  /**\n   * Creates a slice of `array` with `n` elements dropped from the beginning.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.5.0\n   * @category Array\n   * @param {Array} array The array to query.\n   * @param {number} [n=1] The number of elements to drop.\n   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n   * @returns {Array} Returns the slice of `array`.\n   * @example\n   *\n   * _.drop([1, 2, 3]);\n   * // => [2, 3]\n   *\n   * _.drop([1, 2, 3], 2);\n   * // => [3]\n   *\n   * _.drop([1, 2, 3], 5);\n   * // => []\n   *\n   * _.drop([1, 2, 3], 0);\n   * // => [1, 2, 3]\n   */\n  function drop(array, n, guard) {\n    var length = array == null ? 0 : array.length\n    if (!length) {\n      return []\n    }\n    n = guard || n === undefined ? 1 : toInteger(n)\n    return baseSlice(array, n < 0 ? 0 : n, length)\n  }\n\n  /**\n   * Creates a slice of `array` with `n` elements dropped from the end.\n   *\n   * @static\n   * @memberOf _\n   * @since 3.0.0\n   * @category Array\n   * @param {Array} array The array to query.\n   * @param {number} [n=1] The number of elements to drop.\n   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n   * @returns {Array} Returns the slice of `array`.\n   * @example\n   *\n   * _.dropRight([1, 2, 3]);\n   * // => [1, 2]\n   *\n   * _.dropRight([1, 2, 3], 2);\n   * // => [1]\n   *\n   * _.dropRight([1, 2, 3], 5);\n   * // => []\n   *\n   * _.dropRight([1, 2, 3], 0);\n   * // => [1, 2, 3]\n   */\n  function dropRight(array, n, guard) {\n    var length = array == null ? 0 : array.length\n    if (!length) {\n      return []\n    }\n    n = guard || n === undefined ? 1 : toInteger(n)\n    n = length - n\n    return baseSlice(array, 0, n < 0 ? 0 : n)\n  }\n\n  /**\n   * Casts `value` to `identity` if it's not a function.\n   *\n   * @private\n   * @param {*} value The value to inspect.\n   * @returns {Function} Returns cast function.\n   */\n  function castFunction(value) {\n    return typeof value == 'function' ? value : identity\n  }\n\n  /**\n   * Iterates over elements of `collection` and invokes `iteratee` for each element.\n   * The iteratee is invoked with three arguments: (value, index|key, collection).\n   * Iteratee functions may exit iteration early by explicitly returning `false`.\n   *\n   * **Note:** As with other \"Collections\" methods, objects with a \"length\"\n   * property are iterated like arrays. To avoid this behavior use `_.forIn`\n   * or `_.forOwn` for object iteration.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @alias each\n   * @category Collection\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n   * @returns {Array|Object} Returns `collection`.\n   * @see _.forEachRight\n   * @example\n   *\n   * _.forEach([1, 2], function(value) {\n   *   console.log(value);\n   * });\n   * // => Logs `1` then `2`.\n   *\n   * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {\n   *   console.log(key);\n   * });\n   * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n   */\n  function forEach(collection, iteratee) {\n    var func = isArray$1(collection) ? arrayEach : baseEach$1\n    return func(collection, castFunction(iteratee))\n  }\n\n  /**\n   * A specialized version of `_.every` for arrays without support for\n   * iteratee shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {boolean} Returns `true` if all elements pass the predicate check,\n   *  else `false`.\n   */\n  function arrayEvery(array, predicate) {\n    var index = -1,\n      length = array == null ? 0 : array.length\n\n    while (++index < length) {\n      if (!predicate(array[index], index, array)) {\n        return false\n      }\n    }\n    return true\n  }\n\n  /**\n   * The base implementation of `_.every` without support for iteratee shorthands.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {boolean} Returns `true` if all elements pass the predicate check,\n   *  else `false`\n   */\n  function baseEvery(collection, predicate) {\n    var result = true\n    baseEach$1(collection, function (value, index, collection) {\n      result = !!predicate(value, index, collection)\n      return result\n    })\n    return result\n  }\n\n  /**\n   * Checks if `predicate` returns truthy for **all** elements of `collection`.\n   * Iteration is stopped once `predicate` returns falsey. The predicate is\n   * invoked with three arguments: (value, index|key, collection).\n   *\n   * **Note:** This method returns `true` for\n   * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because\n   * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of\n   * elements of empty collections.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Collection\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} [predicate=_.identity] The function invoked per iteration.\n   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n   * @returns {boolean} Returns `true` if all elements pass the predicate check,\n   *  else `false`.\n   * @example\n   *\n   * _.every([true, 1, null, 'yes'], Boolean);\n   * // => false\n   *\n   * var users = [\n   *   { 'user': 'barney', 'age': 36, 'active': false },\n   *   { 'user': 'fred',   'age': 40, 'active': false }\n   * ];\n   *\n   * // The `_.matches` iteratee shorthand.\n   * _.every(users, { 'user': 'barney', 'active': false });\n   * // => false\n   *\n   * // The `_.matchesProperty` iteratee shorthand.\n   * _.every(users, ['active', false]);\n   * // => true\n   *\n   * // The `_.property` iteratee shorthand.\n   * _.every(users, 'active');\n   * // => false\n   */\n  function every(collection, predicate, guard) {\n    var func = isArray$1(collection) ? arrayEvery : baseEvery\n    if (guard && isIterateeCall(collection, predicate, guard)) {\n      predicate = undefined\n    }\n    return func(collection, baseIteratee(predicate))\n  }\n\n  /**\n   * The base implementation of `_.filter` without support for iteratee shorthands.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {Array} Returns the new filtered array.\n   */\n  function baseFilter(collection, predicate) {\n    var result = []\n    baseEach$1(collection, function (value, index, collection) {\n      if (predicate(value, index, collection)) {\n        result.push(value)\n      }\n    })\n    return result\n  }\n\n  /**\n   * Iterates over elements of `collection`, returning an array of all elements\n   * `predicate` returns truthy for. The predicate is invoked with three\n   * arguments: (value, index|key, collection).\n   *\n   * **Note:** Unlike `_.remove`, this method returns a new array.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Collection\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} [predicate=_.identity] The function invoked per iteration.\n   * @returns {Array} Returns the new filtered array.\n   * @see _.reject\n   * @example\n   *\n   * var users = [\n   *   { 'user': 'barney', 'age': 36, 'active': true },\n   *   { 'user': 'fred',   'age': 40, 'active': false }\n   * ];\n   *\n   * _.filter(users, function(o) { return !o.active; });\n   * // => objects for ['fred']\n   *\n   * // The `_.matches` iteratee shorthand.\n   * _.filter(users, { 'age': 36, 'active': true });\n   * // => objects for ['barney']\n   *\n   * // The `_.matchesProperty` iteratee shorthand.\n   * _.filter(users, ['active', false]);\n   * // => objects for ['fred']\n   *\n   * // The `_.property` iteratee shorthand.\n   * _.filter(users, 'active');\n   * // => objects for ['barney']\n   *\n   * // Combining several predicates using `_.overEvery` or `_.overSome`.\n   * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));\n   * // => objects for ['fred', 'barney']\n   */\n  function filter(collection, predicate) {\n    var func = isArray$1(collection) ? arrayFilter : baseFilter\n    return func(collection, baseIteratee(predicate))\n  }\n\n  /**\n   * Creates a `_.find` or `_.findLast` function.\n   *\n   * @private\n   * @param {Function} findIndexFunc The function to find the collection index.\n   * @returns {Function} Returns the new find function.\n   */\n  function createFind(findIndexFunc) {\n    return function (collection, predicate, fromIndex) {\n      var iterable = Object(collection)\n      if (!isArrayLike(collection)) {\n        var iteratee = baseIteratee(predicate)\n        collection = keys(collection)\n        predicate = function (key) {\n          return iteratee(iterable[key], key, iterable)\n        }\n      }\n      var index = findIndexFunc(collection, predicate, fromIndex)\n      return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined\n    }\n  }\n\n  /* Built-in method references for those with the same name as other `lodash` methods. */\n  var nativeMax$2 = Math.max\n\n  /**\n   * This method is like `_.find` except that it returns the index of the first\n   * element `predicate` returns truthy for instead of the element itself.\n   *\n   * @static\n   * @memberOf _\n   * @since 1.1.0\n   * @category Array\n   * @param {Array} array The array to inspect.\n   * @param {Function} [predicate=_.identity] The function invoked per iteration.\n   * @param {number} [fromIndex=0] The index to search from.\n   * @returns {number} Returns the index of the found element, else `-1`.\n   * @example\n   *\n   * var users = [\n   *   { 'user': 'barney',  'active': false },\n   *   { 'user': 'fred',    'active': false },\n   *   { 'user': 'pebbles', 'active': true }\n   * ];\n   *\n   * _.findIndex(users, function(o) { return o.user == 'barney'; });\n   * // => 0\n   *\n   * // The `_.matches` iteratee shorthand.\n   * _.findIndex(users, { 'user': 'fred', 'active': false });\n   * // => 1\n   *\n   * // The `_.matchesProperty` iteratee shorthand.\n   * _.findIndex(users, ['active', false]);\n   * // => 0\n   *\n   * // The `_.property` iteratee shorthand.\n   * _.findIndex(users, 'active');\n   * // => 2\n   */\n  function findIndex(array, predicate, fromIndex) {\n    var length = array == null ? 0 : array.length\n    if (!length) {\n      return -1\n    }\n    var index = fromIndex == null ? 0 : toInteger(fromIndex)\n    if (index < 0) {\n      index = nativeMax$2(length + index, 0)\n    }\n    return baseFindIndex(array, baseIteratee(predicate), index)\n  }\n\n  /**\n   * Iterates over elements of `collection`, returning the first element\n   * `predicate` returns truthy for. The predicate is invoked with three\n   * arguments: (value, index|key, collection).\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Collection\n   * @param {Array|Object} collection The collection to inspect.\n   * @param {Function} [predicate=_.identity] The function invoked per iteration.\n   * @param {number} [fromIndex=0] The index to search from.\n   * @returns {*} Returns the matched element, else `undefined`.\n   * @example\n   *\n   * var users = [\n   *   { 'user': 'barney',  'age': 36, 'active': true },\n   *   { 'user': 'fred',    'age': 40, 'active': false },\n   *   { 'user': 'pebbles', 'age': 1,  'active': true }\n   * ];\n   *\n   * _.find(users, function(o) { return o.age < 40; });\n   * // => object for 'barney'\n   *\n   * // The `_.matches` iteratee shorthand.\n   * _.find(users, { 'age': 1, 'active': true });\n   * // => object for 'pebbles'\n   *\n   * // The `_.matchesProperty` iteratee shorthand.\n   * _.find(users, ['active', false]);\n   * // => object for 'fred'\n   *\n   * // The `_.property` iteratee shorthand.\n   * _.find(users, 'active');\n   * // => object for 'barney'\n   */\n  var find = createFind(findIndex)\n\n  const find$1 = find\n\n  /**\n   * Gets the first element of `array`.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @alias first\n   * @category Array\n   * @param {Array} array The array to query.\n   * @returns {*} Returns the first element of `array`.\n   * @example\n   *\n   * _.head([1, 2, 3]);\n   * // => 1\n   *\n   * _.head([]);\n   * // => undefined\n   */\n  function head(array) {\n    return array && array.length ? array[0] : undefined\n  }\n\n  /**\n   * The base implementation of `_.map` without support for iteratee shorthands.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the new mapped array.\n   */\n  function baseMap(collection, iteratee) {\n    var index = -1,\n      result = isArrayLike(collection) ? Array(collection.length) : []\n\n    baseEach$1(collection, function (value, key, collection) {\n      result[++index] = iteratee(value, key, collection)\n    })\n    return result\n  }\n\n  /**\n   * Creates an array of values by running each element in `collection` thru\n   * `iteratee`. The iteratee is invoked with three arguments:\n   * (value, index|key, collection).\n   *\n   * Many lodash methods are guarded to work as iteratees for methods like\n   * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n   *\n   * The guarded methods are:\n   * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n   * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n   * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n   * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Collection\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n   * @returns {Array} Returns the new mapped array.\n   * @example\n   *\n   * function square(n) {\n   *   return n * n;\n   * }\n   *\n   * _.map([4, 8], square);\n   * // => [16, 64]\n   *\n   * _.map({ 'a': 4, 'b': 8 }, square);\n   * // => [16, 64] (iteration order is not guaranteed)\n   *\n   * var users = [\n   *   { 'user': 'barney' },\n   *   { 'user': 'fred' }\n   * ];\n   *\n   * // The `_.property` iteratee shorthand.\n   * _.map(users, 'user');\n   * // => ['barney', 'fred']\n   */\n  function map(collection, iteratee) {\n    var func = isArray$1(collection) ? arrayMap : baseMap\n    return func(collection, baseIteratee(iteratee))\n  }\n\n  /**\n   * Creates a flattened array of values by running each element in `collection`\n   * thru `iteratee` and flattening the mapped results. The iteratee is invoked\n   * with three arguments: (value, index|key, collection).\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Collection\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n   * @returns {Array} Returns the new flattened array.\n   * @example\n   *\n   * function duplicate(n) {\n   *   return [n, n];\n   * }\n   *\n   * _.flatMap([1, 2], duplicate);\n   * // => [1, 1, 2, 2]\n   */\n  function flatMap(collection, iteratee) {\n    return baseFlatten(map(collection, iteratee), 1)\n  }\n\n  /** Used for built-in method references. */\n  var objectProto$2 = Object.prototype\n\n  /** Used to check objects for own properties. */\n  var hasOwnProperty$2 = objectProto$2.hasOwnProperty\n\n  /**\n   * Creates an object composed of keys generated from the results of running\n   * each element of `collection` thru `iteratee`. The order of grouped values\n   * is determined by the order they occur in `collection`. The corresponding\n   * value of each key is an array of elements responsible for generating the\n   * key. The iteratee is invoked with one argument: (value).\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Collection\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n   * @returns {Object} Returns the composed aggregate object.\n   * @example\n   *\n   * _.groupBy([6.1, 4.2, 6.3], Math.floor);\n   * // => { '4': [4.2], '6': [6.1, 6.3] }\n   *\n   * // The `_.property` iteratee shorthand.\n   * _.groupBy(['one', 'two', 'three'], 'length');\n   * // => { '3': ['one', 'two'], '5': ['three'] }\n   */\n  var groupBy = createAggregator(function (result, value, key) {\n    if (hasOwnProperty$2.call(result, key)) {\n      result[key].push(value)\n    } else {\n      baseAssignValue(result, key, [value])\n    }\n  })\n\n  const groupBy$1 = groupBy\n\n  /** Used for built-in method references. */\n  var objectProto$1 = Object.prototype\n\n  /** Used to check objects for own properties. */\n  var hasOwnProperty$1 = objectProto$1.hasOwnProperty\n\n  /**\n   * The base implementation of `_.has` without support for deep paths.\n   *\n   * @private\n   * @param {Object} [object] The object to query.\n   * @param {Array|string} key The key to check.\n   * @returns {boolean} Returns `true` if `key` exists, else `false`.\n   */\n  function baseHas(object, key) {\n    return object != null && hasOwnProperty$1.call(object, key)\n  }\n\n  /**\n   * Checks if `path` is a direct property of `object`.\n   *\n   * @static\n   * @since 0.1.0\n   * @memberOf _\n   * @category Object\n   * @param {Object} object The object to query.\n   * @param {Array|string} path The path to check.\n   * @returns {boolean} Returns `true` if `path` exists, else `false`.\n   * @example\n   *\n   * var object = { 'a': { 'b': 2 } };\n   * var other = _.create({ 'a': _.create({ 'b': 2 }) });\n   *\n   * _.has(object, 'a');\n   * // => true\n   *\n   * _.has(object, 'a.b');\n   * // => true\n   *\n   * _.has(object, ['a', 'b']);\n   * // => true\n   *\n   * _.has(other, 'a');\n   * // => false\n   */\n  function has(object, path) {\n    return object != null && hasPath(object, path, baseHas)\n  }\n\n  /** `Object#toString` result references. */\n  var stringTag = '[object String]'\n\n  /**\n   * Checks if `value` is classified as a `String` primitive or object.\n   *\n   * @static\n   * @since 0.1.0\n   * @memberOf _\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n   * @example\n   *\n   * _.isString('abc');\n   * // => true\n   *\n   * _.isString(1);\n   * // => false\n   */\n  function isString(value) {\n    return typeof value == 'string' || (!isArray$1(value) && isObjectLike(value) && baseGetTag(value) == stringTag)\n  }\n\n  /**\n   * The base implementation of `_.values` and `_.valuesIn` which creates an\n   * array of `object` property values corresponding to the property names\n   * of `props`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array} props The property names to get values for.\n   * @returns {Object} Returns the array of property values.\n   */\n  function baseValues(object, props) {\n    return arrayMap(props, function (key) {\n      return object[key]\n    })\n  }\n\n  /**\n   * Creates an array of the own enumerable string keyed property values of `object`.\n   *\n   * **Note:** Non-object values are coerced to objects.\n   *\n   * @static\n   * @since 0.1.0\n   * @memberOf _\n   * @category Object\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property values.\n   * @example\n   *\n   * function Foo() {\n   *   this.a = 1;\n   *   this.b = 2;\n   * }\n   *\n   * Foo.prototype.c = 3;\n   *\n   * _.values(new Foo);\n   * // => [1, 2] (iteration order is not guaranteed)\n   *\n   * _.values('hi');\n   * // => ['h', 'i']\n   */\n  function values(object) {\n    return object == null ? [] : baseValues(object, keys(object))\n  }\n\n  /* Built-in method references for those with the same name as other `lodash` methods. */\n  var nativeMax$1 = Math.max\n\n  /**\n   * Checks if `value` is in `collection`. If `collection` is a string, it's\n   * checked for a substring of `value`, otherwise\n   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n   * is used for equality comparisons. If `fromIndex` is negative, it's used as\n   * the offset from the end of `collection`.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Collection\n   * @param {Array|Object|string} collection The collection to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} [fromIndex=0] The index to search from.\n   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n   * @returns {boolean} Returns `true` if `value` is found, else `false`.\n   * @example\n   *\n   * _.includes([1, 2, 3], 1);\n   * // => true\n   *\n   * _.includes([1, 2, 3], 1, 2);\n   * // => false\n   *\n   * _.includes({ 'a': 1, 'b': 2 }, 1);\n   * // => true\n   *\n   * _.includes('abcd', 'bc');\n   * // => true\n   */\n  function includes(collection, value, fromIndex, guard) {\n    collection = isArrayLike(collection) ? collection : values(collection)\n    fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0\n\n    var length = collection.length\n    if (fromIndex < 0) {\n      fromIndex = nativeMax$1(length + fromIndex, 0)\n    }\n    return isString(collection)\n      ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1\n      : !!length && baseIndexOf(collection, value, fromIndex) > -1\n  }\n\n  /* Built-in method references for those with the same name as other `lodash` methods. */\n  var nativeMax = Math.max\n\n  /**\n   * Gets the index at which the first occurrence of `value` is found in `array`\n   * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n   * for equality comparisons. If `fromIndex` is negative, it's used as the\n   * offset from the end of `array`.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Array\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} [fromIndex=0] The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   * @example\n   *\n   * _.indexOf([1, 2, 1, 2], 2);\n   * // => 1\n   *\n   * // Search from the `fromIndex`.\n   * _.indexOf([1, 2, 1, 2], 2, 2);\n   * // => 3\n   */\n  function indexOf(array, value, fromIndex) {\n    var length = array == null ? 0 : array.length\n    if (!length) {\n      return -1\n    }\n    var index = fromIndex == null ? 0 : toInteger(fromIndex)\n    if (index < 0) {\n      index = nativeMax(length + index, 0)\n    }\n    return baseIndexOf(array, value, index)\n  }\n\n  /** `Object#toString` result references. */\n  var mapTag = '[object Map]',\n    setTag = '[object Set]'\n\n  /** Used for built-in method references. */\n  var objectProto = Object.prototype\n\n  /** Used to check objects for own properties. */\n  var hasOwnProperty = objectProto.hasOwnProperty\n\n  /**\n   * Checks if `value` is an empty object, collection, map, or set.\n   *\n   * Objects are considered empty if they have no own enumerable string keyed\n   * properties.\n   *\n   * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n   * jQuery-like collections are considered empty if they have a `length` of `0`.\n   * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n   * @example\n   *\n   * _.isEmpty(null);\n   * // => true\n   *\n   * _.isEmpty(true);\n   * // => true\n   *\n   * _.isEmpty(1);\n   * // => true\n   *\n   * _.isEmpty([1, 2, 3]);\n   * // => false\n   *\n   * _.isEmpty({ 'a': 1 });\n   * // => false\n   */\n  function isEmpty(value) {\n    if (value == null) {\n      return true\n    }\n    if (\n      isArrayLike(value) &&\n      (isArray$1(value) ||\n        typeof value == 'string' ||\n        typeof value.splice == 'function' ||\n        isBuffer$1(value) ||\n        isTypedArray$1(value) ||\n        isArguments$1(value))\n    ) {\n      return !value.length\n    }\n    var tag = getTag$1(value)\n    if (tag == mapTag || tag == setTag) {\n      return !value.size\n    }\n    if (isPrototype(value)) {\n      return !baseKeys(value).length\n    }\n    for (var key in value) {\n      if (hasOwnProperty.call(value, key)) {\n        return false\n      }\n    }\n    return true\n  }\n\n  /** `Object#toString` result references. */\n  var regexpTag = '[object RegExp]'\n\n  /**\n   * The base implementation of `_.isRegExp` without Node.js optimizations.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n   */\n  function baseIsRegExp(value) {\n    return isObjectLike(value) && baseGetTag(value) == regexpTag\n  }\n\n  /* Node.js helper references. */\n  var nodeIsRegExp = nodeUtil$1 && nodeUtil$1.isRegExp\n\n  /**\n   * Checks if `value` is classified as a `RegExp` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n   * @example\n   *\n   * _.isRegExp(/abc/);\n   * // => true\n   *\n   * _.isRegExp('/abc/');\n   * // => false\n   */\n  var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp\n\n  const isRegExp$1 = isRegExp\n\n  /**\n   * Checks if `value` is `undefined`.\n   *\n   * @static\n   * @since 0.1.0\n   * @memberOf _\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n   * @example\n   *\n   * _.isUndefined(void 0);\n   * // => true\n   *\n   * _.isUndefined(null);\n   * // => false\n   */\n  function isUndefined(value) {\n    return value === undefined\n  }\n\n  /** Error message constants. */\n  var FUNC_ERROR_TEXT = 'Expected a function'\n\n  /**\n   * Creates a function that negates the result of the predicate `func`. The\n   * `func` predicate is invoked with the `this` binding and arguments of the\n   * created function.\n   *\n   * @static\n   * @memberOf _\n   * @since 3.0.0\n   * @category Function\n   * @param {Function} predicate The predicate to negate.\n   * @returns {Function} Returns the new negated function.\n   * @example\n   *\n   * function isEven(n) {\n   *   return n % 2 == 0;\n   * }\n   *\n   * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n   * // => [1, 3, 5]\n   */\n  function negate(predicate) {\n    if (typeof predicate != 'function') {\n      throw new TypeError(FUNC_ERROR_TEXT)\n    }\n    return function () {\n      var args = arguments\n      switch (args.length) {\n        case 0:\n          return !predicate.call(this)\n        case 1:\n          return !predicate.call(this, args[0])\n        case 2:\n          return !predicate.call(this, args[0], args[1])\n        case 3:\n          return !predicate.call(this, args[0], args[1], args[2])\n      }\n      return !predicate.apply(this, args)\n    }\n  }\n\n  /**\n   * The base implementation of `_.set`.\n   *\n   * @private\n   * @param {Object} object The object to modify.\n   * @param {Array|string} path The path of the property to set.\n   * @param {*} value The value to set.\n   * @param {Function} [customizer] The function to customize path creation.\n   * @returns {Object} Returns `object`.\n   */\n  function baseSet(object, path, value, customizer) {\n    if (!isObject(object)) {\n      return object\n    }\n    path = castPath(path, object)\n\n    var index = -1,\n      length = path.length,\n      lastIndex = length - 1,\n      nested = object\n\n    while (nested != null && ++index < length) {\n      var key = toKey(path[index]),\n        newValue = value\n\n      if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\n        return object\n      }\n\n      if (index != lastIndex) {\n        var objValue = nested[key]\n        newValue = customizer ? customizer(objValue, key, nested) : undefined\n        if (newValue === undefined) {\n          newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {}\n        }\n      }\n      assignValue(nested, key, newValue)\n      nested = nested[key]\n    }\n    return object\n  }\n\n  /**\n   * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n   *\n   * @private\n   * @param {Object} object The source object.\n   * @param {string[]} paths The property paths to pick.\n   * @param {Function} predicate The function invoked per property.\n   * @returns {Object} Returns the new object.\n   */\n  function basePickBy(object, paths, predicate) {\n    var index = -1,\n      length = paths.length,\n      result = {}\n\n    while (++index < length) {\n      var path = paths[index],\n        value = baseGet(object, path)\n\n      if (predicate(value, path)) {\n        baseSet(result, castPath(path, object), value)\n      }\n    }\n    return result\n  }\n\n  /**\n   * Creates an object composed of the `object` properties `predicate` returns\n   * truthy for. The predicate is invoked with two arguments: (value, key).\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Object\n   * @param {Object} object The source object.\n   * @param {Function} [predicate=_.identity] The function invoked per property.\n   * @returns {Object} Returns the new object.\n   * @example\n   *\n   * var object = { 'a': 1, 'b': '2', 'c': 3 };\n   *\n   * _.pickBy(object, _.isNumber);\n   * // => { 'a': 1, 'c': 3 }\n   */\n  function pickBy(object, predicate) {\n    if (object == null) {\n      return {}\n    }\n    var props = arrayMap(getAllKeysIn(object), function (prop) {\n      return [prop]\n    })\n    predicate = baseIteratee(predicate)\n    return basePickBy(object, props, function (value, path) {\n      return predicate(value, path[0])\n    })\n  }\n\n  /**\n   * The base implementation of `_.reduce` and `_.reduceRight`, without support\n   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @param {*} accumulator The initial value.\n   * @param {boolean} initAccum Specify using the first or last element of\n   *  `collection` as the initial value.\n   * @param {Function} eachFunc The function to iterate over `collection`.\n   * @returns {*} Returns the accumulated value.\n   */\n  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {\n    eachFunc(collection, function (value, index, collection) {\n      accumulator = initAccum ? ((initAccum = false), value) : iteratee(accumulator, value, index, collection)\n    })\n    return accumulator\n  }\n\n  /**\n   * Reduces `collection` to a value which is the accumulated result of running\n   * each element in `collection` thru `iteratee`, where each successive\n   * invocation is supplied the return value of the previous. If `accumulator`\n   * is not given, the first element of `collection` is used as the initial\n   * value. The iteratee is invoked with four arguments:\n   * (accumulator, value, index|key, collection).\n   *\n   * Many lodash methods are guarded to work as iteratees for methods like\n   * `_.reduce`, `_.reduceRight`, and `_.transform`.\n   *\n   * The guarded methods are:\n   * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,\n   * and `sortBy`\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Collection\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n   * @param {*} [accumulator] The initial value.\n   * @returns {*} Returns the accumulated value.\n   * @see _.reduceRight\n   * @example\n   *\n   * _.reduce([1, 2], function(sum, n) {\n   *   return sum + n;\n   * }, 0);\n   * // => 3\n   *\n   * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n   *   (result[value] || (result[value] = [])).push(key);\n   *   return result;\n   * }, {});\n   * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)\n   */\n  function reduce(collection, iteratee, accumulator) {\n    var func = isArray$1(collection) ? arrayReduce : baseReduce,\n      initAccum = arguments.length < 3\n\n    return func(collection, baseIteratee(iteratee), accumulator, initAccum, baseEach$1)\n  }\n\n  /**\n   * The opposite of `_.filter`; this method returns the elements of `collection`\n   * that `predicate` does **not** return truthy for.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Collection\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} [predicate=_.identity] The function invoked per iteration.\n   * @returns {Array} Returns the new filtered array.\n   * @see _.filter\n   * @example\n   *\n   * var users = [\n   *   { 'user': 'barney', 'age': 36, 'active': false },\n   *   { 'user': 'fred',   'age': 40, 'active': true }\n   * ];\n   *\n   * _.reject(users, function(o) { return !o.active; });\n   * // => objects for ['fred']\n   *\n   * // The `_.matches` iteratee shorthand.\n   * _.reject(users, { 'age': 40, 'active': true });\n   * // => objects for ['barney']\n   *\n   * // The `_.matchesProperty` iteratee shorthand.\n   * _.reject(users, ['active', false]);\n   * // => objects for ['fred']\n   *\n   * // The `_.property` iteratee shorthand.\n   * _.reject(users, 'active');\n   * // => objects for ['barney']\n   */\n  function reject(collection, predicate) {\n    var func = isArray$1(collection) ? arrayFilter : baseFilter\n    return func(collection, negate(baseIteratee(predicate)))\n  }\n\n  /**\n   * The base implementation of `_.some` without support for iteratee shorthands.\n   *\n   * @private\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} predicate The function invoked per iteration.\n   * @returns {boolean} Returns `true` if any element passes the predicate check,\n   *  else `false`.\n   */\n  function baseSome(collection, predicate) {\n    var result\n\n    baseEach$1(collection, function (value, index, collection) {\n      result = predicate(value, index, collection)\n      return !result\n    })\n    return !!result\n  }\n\n  /**\n   * Checks if `predicate` returns truthy for **any** element of `collection`.\n   * Iteration is stopped once `predicate` returns truthy. The predicate is\n   * invoked with three arguments: (value, index|key, collection).\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Collection\n   * @param {Array|Object} collection The collection to iterate over.\n   * @param {Function} [predicate=_.identity] The function invoked per iteration.\n   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n   * @returns {boolean} Returns `true` if any element passes the predicate check,\n   *  else `false`.\n   * @example\n   *\n   * _.some([null, 0, 'yes', false], Boolean);\n   * // => true\n   *\n   * var users = [\n   *   { 'user': 'barney', 'active': true },\n   *   { 'user': 'fred',   'active': false }\n   * ];\n   *\n   * // The `_.matches` iteratee shorthand.\n   * _.some(users, { 'user': 'barney', 'active': false });\n   * // => false\n   *\n   * // The `_.matchesProperty` iteratee shorthand.\n   * _.some(users, ['active', false]);\n   * // => true\n   *\n   * // The `_.property` iteratee shorthand.\n   * _.some(users, 'active');\n   * // => true\n   */\n  function some(collection, predicate, guard) {\n    var func = isArray$1(collection) ? arraySome : baseSome\n    if (guard && isIterateeCall(collection, predicate, guard)) {\n      predicate = undefined\n    }\n    return func(collection, baseIteratee(predicate))\n  }\n\n  /** Used as references for various `Number` constants. */\n  var INFINITY = 1 / 0\n\n  /**\n   * Creates a set object of `values`.\n   *\n   * @private\n   * @param {Array} values The values to add to the set.\n   * @returns {Object} Returns the new set.\n   */\n  var createSet = !(Set$1 && 1 / setToArray(new Set$1([, -0]))[1] == INFINITY)\n    ? noop\n    : function (values) {\n        return new Set$1(values)\n      }\n\n  const createSet$1 = createSet\n\n  /** Used as the size to enable large array optimizations. */\n  var LARGE_ARRAY_SIZE = 200\n\n  /**\n   * The base implementation of `_.uniqBy` without support for iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {Function} [iteratee] The iteratee invoked per element.\n   * @param {Function} [comparator] The comparator invoked per element.\n   * @returns {Array} Returns the new duplicate free array.\n   */\n  function baseUniq(array, iteratee, comparator) {\n    var index = -1,\n      includes = arrayIncludes,\n      length = array.length,\n      isCommon = true,\n      result = [],\n      seen = result\n\n    if (comparator) {\n      isCommon = false\n      includes = arrayIncludesWith\n    } else if (length >= LARGE_ARRAY_SIZE) {\n      var set = iteratee ? null : createSet$1(array)\n      if (set) {\n        return setToArray(set)\n      }\n      isCommon = false\n      includes = cacheHas\n      seen = new SetCache()\n    } else {\n      seen = iteratee ? [] : result\n    }\n    outer: while (++index < length) {\n      var value = array[index],\n        computed = iteratee ? iteratee(value) : value\n\n      value = comparator || value !== 0 ? value : 0\n      if (isCommon && computed === computed) {\n        var seenIndex = seen.length\n        while (seenIndex--) {\n          if (seen[seenIndex] === computed) {\n            continue outer\n          }\n        }\n        if (iteratee) {\n          seen.push(computed)\n        }\n        result.push(value)\n      } else if (!includes(seen, computed, comparator)) {\n        if (seen !== result) {\n          seen.push(computed)\n        }\n        result.push(value)\n      }\n    }\n    return result\n  }\n\n  /**\n   * Creates a duplicate-free version of an array, using\n   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n   * for equality comparisons, in which only the first occurrence of each element\n   * is kept. The order of result values is determined by the order they occur\n   * in the array.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Array\n   * @param {Array} array The array to inspect.\n   * @returns {Array} Returns the new duplicate free array.\n   * @example\n   *\n   * _.uniq([2, 1, 2]);\n   * // => [2, 1]\n   */\n  function uniq(array) {\n    return array && array.length ? baseUniq(array) : []\n  }\n\n  function PRINT_ERROR(msg) {\n    /* istanbul ignore else - can't override global.console in node.js */\n    if (console && console.error) {\n      console.error(`Error: ${msg}`)\n    }\n  }\n  function PRINT_WARNING(msg) {\n    /* istanbul ignore else - can't override global.console in node.js*/\n    if (console && console.warn) {\n      // TODO: modify docs accordingly\n      console.warn(`Warning: ${msg}`)\n    }\n  }\n\n  function timer(func) {\n    const start = new Date().getTime()\n    const val = func()\n    const end = new Date().getTime()\n    const total = end - start\n    return { time: total, value: val }\n  }\n\n  // based on: https://github.com/petkaantonov/bluebird/blob/b97c0d2d487e8c5076e8bd897e0dcd4622d31846/src/util.js#L201-L216\n  function toFastProperties(toBecomeFast) {\n    function FakeConstructor() {}\n    // If our object is used as a constructor, it would receive\n    FakeConstructor.prototype = toBecomeFast\n    const fakeInstance = new FakeConstructor()\n    function fakeAccess() {\n      return typeof fakeInstance.bar\n    }\n    // help V8 understand this is a \"real\" prototype by actually using\n    // the fake instance.\n    fakeAccess()\n    fakeAccess()\n    // Always true condition to suppress the Firefox warning of unreachable\n    // code after a return statement.\n    return toBecomeFast\n  }\n\n  // TODO: duplicated code to avoid extracting another sub-package -- how to avoid?\n  function tokenLabel$1(tokType) {\n    if (hasTokenLabel$1(tokType)) {\n      return tokType.LABEL\n    } else {\n      return tokType.name\n    }\n  }\n  // TODO: duplicated code to avoid extracting another sub-package -- how to avoid?\n  function hasTokenLabel$1(obj) {\n    return isString(obj.LABEL) && obj.LABEL !== ''\n  }\n  class AbstractProduction {\n    get definition() {\n      return this._definition\n    }\n    set definition(value) {\n      this._definition = value\n    }\n    constructor(_definition) {\n      this._definition = _definition\n    }\n    accept(visitor) {\n      visitor.visit(this)\n      forEach(this.definition, (prod) => {\n        prod.accept(visitor)\n      })\n    }\n  }\n  class NonTerminal extends AbstractProduction {\n    constructor(options) {\n      super([])\n      this.idx = 1\n      assign$1(\n        this,\n        pickBy(options, (v) => v !== undefined),\n      )\n    }\n    set definition(definition) {\n      // immutable\n    }\n    get definition() {\n      if (this.referencedRule !== undefined) {\n        return this.referencedRule.definition\n      }\n      return []\n    }\n    accept(visitor) {\n      visitor.visit(this)\n      // don't visit children of a reference, we will get cyclic infinite loops if we do so\n    }\n  }\n  class Rule extends AbstractProduction {\n    constructor(options) {\n      super(options.definition)\n      this.orgText = ''\n      assign$1(\n        this,\n        pickBy(options, (v) => v !== undefined),\n      )\n    }\n  }\n  class Alternative extends AbstractProduction {\n    constructor(options) {\n      super(options.definition)\n      this.ignoreAmbiguities = false\n      assign$1(\n        this,\n        pickBy(options, (v) => v !== undefined),\n      )\n    }\n  }\n  class Option extends AbstractProduction {\n    constructor(options) {\n      super(options.definition)\n      this.idx = 1\n      assign$1(\n        this,\n        pickBy(options, (v) => v !== undefined),\n      )\n    }\n  }\n  class RepetitionMandatory extends AbstractProduction {\n    constructor(options) {\n      super(options.definition)\n      this.idx = 1\n      assign$1(\n        this,\n        pickBy(options, (v) => v !== undefined),\n      )\n    }\n  }\n  class RepetitionMandatoryWithSeparator extends AbstractProduction {\n    constructor(options) {\n      super(options.definition)\n      this.idx = 1\n      assign$1(\n        this,\n        pickBy(options, (v) => v !== undefined),\n      )\n    }\n  }\n  class Repetition extends AbstractProduction {\n    constructor(options) {\n      super(options.definition)\n      this.idx = 1\n      assign$1(\n        this,\n        pickBy(options, (v) => v !== undefined),\n      )\n    }\n  }\n  class RepetitionWithSeparator extends AbstractProduction {\n    constructor(options) {\n      super(options.definition)\n      this.idx = 1\n      assign$1(\n        this,\n        pickBy(options, (v) => v !== undefined),\n      )\n    }\n  }\n  class Alternation extends AbstractProduction {\n    get definition() {\n      return this._definition\n    }\n    set definition(value) {\n      this._definition = value\n    }\n    constructor(options) {\n      super(options.definition)\n      this.idx = 1\n      this.ignoreAmbiguities = false\n      this.hasPredicates = false\n      assign$1(\n        this,\n        pickBy(options, (v) => v !== undefined),\n      )\n    }\n  }\n  class Terminal {\n    constructor(options) {\n      this.idx = 1\n      assign$1(\n        this,\n        pickBy(options, (v) => v !== undefined),\n      )\n    }\n    accept(visitor) {\n      visitor.visit(this)\n    }\n  }\n  function serializeGrammar(topRules) {\n    return map(topRules, serializeProduction)\n  }\n  function serializeProduction(node) {\n    function convertDefinition(definition) {\n      return map(definition, serializeProduction)\n    }\n    /* istanbul ignore else */\n    if (node instanceof NonTerminal) {\n      const serializedNonTerminal = {\n        type: 'NonTerminal',\n        name: node.nonTerminalName,\n        idx: node.idx,\n      }\n      if (isString(node.label)) {\n        serializedNonTerminal.label = node.label\n      }\n      return serializedNonTerminal\n    } else if (node instanceof Alternative) {\n      return {\n        type: 'Alternative',\n        definition: convertDefinition(node.definition),\n      }\n    } else if (node instanceof Option) {\n      return {\n        type: 'Option',\n        idx: node.idx,\n        definition: convertDefinition(node.definition),\n      }\n    } else if (node instanceof RepetitionMandatory) {\n      return {\n        type: 'RepetitionMandatory',\n        idx: node.idx,\n        definition: convertDefinition(node.definition),\n      }\n    } else if (node instanceof RepetitionMandatoryWithSeparator) {\n      return {\n        type: 'RepetitionMandatoryWithSeparator',\n        idx: node.idx,\n        separator: serializeProduction(new Terminal({ terminalType: node.separator })),\n        definition: convertDefinition(node.definition),\n      }\n    } else if (node instanceof RepetitionWithSeparator) {\n      return {\n        type: 'RepetitionWithSeparator',\n        idx: node.idx,\n        separator: serializeProduction(new Terminal({ terminalType: node.separator })),\n        definition: convertDefinition(node.definition),\n      }\n    } else if (node instanceof Repetition) {\n      return {\n        type: 'Repetition',\n        idx: node.idx,\n        definition: convertDefinition(node.definition),\n      }\n    } else if (node instanceof Alternation) {\n      return {\n        type: 'Alternation',\n        idx: node.idx,\n        definition: convertDefinition(node.definition),\n      }\n    } else if (node instanceof Terminal) {\n      const serializedTerminal = {\n        type: 'Terminal',\n        name: node.terminalType.name,\n        label: tokenLabel$1(node.terminalType),\n        idx: node.idx,\n      }\n      if (isString(node.label)) {\n        serializedTerminal.terminalLabel = node.label\n      }\n      const pattern = node.terminalType.PATTERN\n      if (node.terminalType.PATTERN) {\n        serializedTerminal.pattern = isRegExp$1(pattern) ? pattern.source : pattern\n      }\n      return serializedTerminal\n    } else if (node instanceof Rule) {\n      return {\n        type: 'Rule',\n        name: node.name,\n        orgText: node.orgText,\n        definition: convertDefinition(node.definition),\n      }\n      /* c8 ignore next 3 */\n    } else {\n      throw Error('non exhaustive match')\n    }\n  }\n\n  class GAstVisitor {\n    visit(node) {\n      const nodeAny = node\n      switch (nodeAny.constructor) {\n        case NonTerminal:\n          return this.visitNonTerminal(nodeAny)\n        case Alternative:\n          return this.visitAlternative(nodeAny)\n        case Option:\n          return this.visitOption(nodeAny)\n        case RepetitionMandatory:\n          return this.visitRepetitionMandatory(nodeAny)\n        case RepetitionMandatoryWithSeparator:\n          return this.visitRepetitionMandatoryWithSeparator(nodeAny)\n        case RepetitionWithSeparator:\n          return this.visitRepetitionWithSeparator(nodeAny)\n        case Repetition:\n          return this.visitRepetition(nodeAny)\n        case Alternation:\n          return this.visitAlternation(nodeAny)\n        case Terminal:\n          return this.visitTerminal(nodeAny)\n        case Rule:\n          return this.visitRule(nodeAny)\n        /* c8 ignore next 2 */\n        default:\n          throw Error('non exhaustive match')\n      }\n    }\n    /* c8 ignore next */\n    visitNonTerminal(node) {}\n    /* c8 ignore next */\n    visitAlternative(node) {}\n    /* c8 ignore next */\n    visitOption(node) {}\n    /* c8 ignore next */\n    visitRepetition(node) {}\n    /* c8 ignore next */\n    visitRepetitionMandatory(node) {}\n    /* c8 ignore next 3 */\n    visitRepetitionMandatoryWithSeparator(node) {}\n    /* c8 ignore next */\n    visitRepetitionWithSeparator(node) {}\n    /* c8 ignore next */\n    visitAlternation(node) {}\n    /* c8 ignore next */\n    visitTerminal(node) {}\n    /* c8 ignore next */\n    visitRule(node) {}\n  }\n\n  function isSequenceProd(prod) {\n    return (\n      prod instanceof Alternative ||\n      prod instanceof Option ||\n      prod instanceof Repetition ||\n      prod instanceof RepetitionMandatory ||\n      prod instanceof RepetitionMandatoryWithSeparator ||\n      prod instanceof RepetitionWithSeparator ||\n      prod instanceof Terminal ||\n      prod instanceof Rule\n    )\n  }\n  function isOptionalProd(prod, alreadyVisited = []) {\n    const isDirectlyOptional =\n      prod instanceof Option || prod instanceof Repetition || prod instanceof RepetitionWithSeparator\n    if (isDirectlyOptional) {\n      return true\n    }\n    // note that this can cause infinite loop if one optional empty TOP production has a cyclic dependency with another\n    // empty optional top rule\n    // may be indirectly optional ((A?B?C?) | (D?E?F?))\n    if (prod instanceof Alternation) {\n      // for OR its enough for just one of the alternatives to be optional\n      return some(prod.definition, (subProd) => {\n        return isOptionalProd(subProd, alreadyVisited)\n      })\n    } else if (prod instanceof NonTerminal && includes(alreadyVisited, prod)) {\n      // avoiding stack overflow due to infinite recursion\n      return false\n    } else if (prod instanceof AbstractProduction) {\n      if (prod instanceof NonTerminal) {\n        alreadyVisited.push(prod)\n      }\n      return every(prod.definition, (subProd) => {\n        return isOptionalProd(subProd, alreadyVisited)\n      })\n    } else {\n      return false\n    }\n  }\n  function isBranchingProd(prod) {\n    return prod instanceof Alternation\n  }\n  function getProductionDslName(prod) {\n    /* istanbul ignore else */\n    if (prod instanceof NonTerminal) {\n      return 'SUBRULE'\n    } else if (prod instanceof Option) {\n      return 'OPTION'\n    } else if (prod instanceof Alternation) {\n      return 'OR'\n    } else if (prod instanceof RepetitionMandatory) {\n      return 'AT_LEAST_ONE'\n    } else if (prod instanceof RepetitionMandatoryWithSeparator) {\n      return 'AT_LEAST_ONE_SEP'\n    } else if (prod instanceof RepetitionWithSeparator) {\n      return 'MANY_SEP'\n    } else if (prod instanceof Repetition) {\n      return 'MANY'\n    } else if (prod instanceof Terminal) {\n      return 'CONSUME'\n      /* c8 ignore next 3 */\n    } else {\n      throw Error('non exhaustive match')\n    }\n  }\n\n  /**\n   *  A Grammar Walker that computes the \"remaining\" grammar \"after\" a productions in the grammar.\n   */\n  class RestWalker {\n    walk(prod, prevRest = []) {\n      forEach(prod.definition, (subProd, index) => {\n        const currRest = drop(prod.definition, index + 1)\n        /* istanbul ignore else */\n        if (subProd instanceof NonTerminal) {\n          this.walkProdRef(subProd, currRest, prevRest)\n        } else if (subProd instanceof Terminal) {\n          this.walkTerminal(subProd, currRest, prevRest)\n        } else if (subProd instanceof Alternative) {\n          this.walkFlat(subProd, currRest, prevRest)\n        } else if (subProd instanceof Option) {\n          this.walkOption(subProd, currRest, prevRest)\n        } else if (subProd instanceof RepetitionMandatory) {\n          this.walkAtLeastOne(subProd, currRest, prevRest)\n        } else if (subProd instanceof RepetitionMandatoryWithSeparator) {\n          this.walkAtLeastOneSep(subProd, currRest, prevRest)\n        } else if (subProd instanceof RepetitionWithSeparator) {\n          this.walkManySep(subProd, currRest, prevRest)\n        } else if (subProd instanceof Repetition) {\n          this.walkMany(subProd, currRest, prevRest)\n        } else if (subProd instanceof Alternation) {\n          this.walkOr(subProd, currRest, prevRest)\n        } else {\n          throw Error('non exhaustive match')\n        }\n      })\n    }\n    walkTerminal(terminal, currRest, prevRest) {}\n    walkProdRef(refProd, currRest, prevRest) {}\n    walkFlat(flatProd, currRest, prevRest) {\n      // ABCDEF => after the D the rest is EF\n      const fullOrRest = currRest.concat(prevRest)\n      this.walk(flatProd, fullOrRest)\n    }\n    walkOption(optionProd, currRest, prevRest) {\n      // ABC(DE)?F => after the (DE)? the rest is F\n      const fullOrRest = currRest.concat(prevRest)\n      this.walk(optionProd, fullOrRest)\n    }\n    walkAtLeastOne(atLeastOneProd, currRest, prevRest) {\n      // ABC(DE)+F => after the (DE)+ the rest is (DE)?F\n      const fullAtLeastOneRest = [new Option({ definition: atLeastOneProd.definition })].concat(currRest, prevRest)\n      this.walk(atLeastOneProd, fullAtLeastOneRest)\n    }\n    walkAtLeastOneSep(atLeastOneSepProd, currRest, prevRest) {\n      // ABC DE(,DE)* F => after the (,DE)+ the rest is (,DE)?F\n      const fullAtLeastOneSepRest = restForRepetitionWithSeparator(atLeastOneSepProd, currRest, prevRest)\n      this.walk(atLeastOneSepProd, fullAtLeastOneSepRest)\n    }\n    walkMany(manyProd, currRest, prevRest) {\n      // ABC(DE)*F => after the (DE)* the rest is (DE)?F\n      const fullManyRest = [new Option({ definition: manyProd.definition })].concat(currRest, prevRest)\n      this.walk(manyProd, fullManyRest)\n    }\n    walkManySep(manySepProd, currRest, prevRest) {\n      // ABC (DE(,DE)*)? F => after the (,DE)* the rest is (,DE)?F\n      const fullManySepRest = restForRepetitionWithSeparator(manySepProd, currRest, prevRest)\n      this.walk(manySepProd, fullManySepRest)\n    }\n    walkOr(orProd, currRest, prevRest) {\n      // ABC(D|E|F)G => when finding the (D|E|F) the rest is G\n      const fullOrRest = currRest.concat(prevRest)\n      // walk all different alternatives\n      forEach(orProd.definition, (alt) => {\n        // wrapping each alternative in a single definition wrapper\n        // to avoid errors in computing the rest of that alternative in the invocation to computeInProdFollows\n        // (otherwise for OR([alt1,alt2]) alt2 will be considered in 'rest' of alt1\n        const prodWrapper = new Alternative({ definition: [alt] })\n        this.walk(prodWrapper, fullOrRest)\n      })\n    }\n  }\n  function restForRepetitionWithSeparator(repSepProd, currRest, prevRest) {\n    const repSepRest = [\n      new Option({\n        definition: [new Terminal({ terminalType: repSepProd.separator })].concat(repSepProd.definition),\n      }),\n    ]\n    const fullRepSepRest = repSepRest.concat(currRest, prevRest)\n    return fullRepSepRest\n  }\n\n  function first(prod) {\n    /* istanbul ignore else */\n    if (prod instanceof NonTerminal) {\n      // this could in theory cause infinite loops if\n      // (1) prod A refs prod B.\n      // (2) prod B refs prod A\n      // (3) AB can match the empty set\n      // in other words a cycle where everything is optional so the first will keep\n      // looking ahead for the next optional part and will never exit\n      // currently there is no safeguard for this unique edge case because\n      // (1) not sure a grammar in which this can happen is useful for anything (productive)\n      return first(prod.referencedRule)\n    } else if (prod instanceof Terminal) {\n      return firstForTerminal(prod)\n    } else if (isSequenceProd(prod)) {\n      return firstForSequence(prod)\n    } else if (isBranchingProd(prod)) {\n      return firstForBranching(prod)\n    } else {\n      throw Error('non exhaustive match')\n    }\n  }\n  function firstForSequence(prod) {\n    let firstSet = []\n    const seq = prod.definition\n    let nextSubProdIdx = 0\n    let hasInnerProdsRemaining = seq.length > nextSubProdIdx\n    let currSubProd\n    // so we enter the loop at least once (if the definition is not empty\n    let isLastInnerProdOptional = true\n    // scan a sequence until it's end or until we have found a NONE optional production in it\n    while (hasInnerProdsRemaining && isLastInnerProdOptional) {\n      currSubProd = seq[nextSubProdIdx]\n      isLastInnerProdOptional = isOptionalProd(currSubProd)\n      firstSet = firstSet.concat(first(currSubProd))\n      nextSubProdIdx = nextSubProdIdx + 1\n      hasInnerProdsRemaining = seq.length > nextSubProdIdx\n    }\n    return uniq(firstSet)\n  }\n  function firstForBranching(prod) {\n    const allAlternativesFirsts = map(prod.definition, (innerProd) => {\n      return first(innerProd)\n    })\n    return uniq(flatten(allAlternativesFirsts))\n  }\n  function firstForTerminal(terminal) {\n    return [terminal.terminalType]\n  }\n\n  // TODO: can this be removed? where is it used?\n  const IN = '_~IN~_'\n\n  // This ResyncFollowsWalker computes all of the follows required for RESYNC\n  // (skipping reference production).\n  class ResyncFollowsWalker extends RestWalker {\n    constructor(topProd) {\n      super()\n      this.topProd = topProd\n      this.follows = {}\n    }\n    startWalking() {\n      this.walk(this.topProd)\n      return this.follows\n    }\n    walkTerminal(terminal, currRest, prevRest) {\n      // do nothing! just like in the public sector after 13:00\n    }\n    walkProdRef(refProd, currRest, prevRest) {\n      const followName = buildBetweenProdsFollowPrefix(refProd.referencedRule, refProd.idx) + this.topProd.name\n      const fullRest = currRest.concat(prevRest)\n      const restProd = new Alternative({ definition: fullRest })\n      const t_in_topProd_follows = first(restProd)\n      this.follows[followName] = t_in_topProd_follows\n    }\n  }\n  function computeAllProdsFollows(topProductions) {\n    const reSyncFollows = {}\n    forEach(topProductions, (topProd) => {\n      const currRefsFollow = new ResyncFollowsWalker(topProd).startWalking()\n      assign$1(reSyncFollows, currRefsFollow)\n    })\n    return reSyncFollows\n  }\n  function buildBetweenProdsFollowPrefix(inner, occurenceInParent) {\n    return inner.name + occurenceInParent + IN\n  }\n\n  function cc(char) {\n    return char.charCodeAt(0)\n  }\n  function insertToSet(item, set) {\n    if (Array.isArray(item)) {\n      item.forEach(function (subItem) {\n        set.push(subItem)\n      })\n    } else {\n      set.push(item)\n    }\n  }\n  function addFlag(flagObj, flagKey) {\n    if (flagObj[flagKey] === true) {\n      throw 'duplicate flag ' + flagKey\n    }\n    flagObj[flagKey]\n    flagObj[flagKey] = true\n  }\n  function ASSERT_EXISTS(obj) {\n    // istanbul ignore next\n    if (obj === undefined) {\n      throw Error('Internal Error - Should never get here!')\n    }\n    return true\n  }\n  // istanbul ignore next\n  function ASSERT_NEVER_REACH_HERE() {\n    throw Error('Internal Error - Should never get here!')\n  }\n  function isCharacter(obj) {\n    return obj['type'] === 'Character'\n  }\n\n  const digitsCharCodes = []\n  for (let i = cc('0'); i <= cc('9'); i++) {\n    digitsCharCodes.push(i)\n  }\n  const wordCharCodes = [cc('_')].concat(digitsCharCodes)\n  for (let i = cc('a'); i <= cc('z'); i++) {\n    wordCharCodes.push(i)\n  }\n  for (let i = cc('A'); i <= cc('Z'); i++) {\n    wordCharCodes.push(i)\n  }\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#character-classes\n  const whitespaceCodes = [\n    cc(' '),\n    cc('\\f'),\n    cc('\\n'),\n    cc('\\r'),\n    cc('\\t'),\n    cc('\\v'),\n    cc('\\t'),\n    cc('\\u00a0'),\n    cc('\\u1680'),\n    cc('\\u2000'),\n    cc('\\u2001'),\n    cc('\\u2002'),\n    cc('\\u2003'),\n    cc('\\u2004'),\n    cc('\\u2005'),\n    cc('\\u2006'),\n    cc('\\u2007'),\n    cc('\\u2008'),\n    cc('\\u2009'),\n    cc('\\u200a'),\n    cc('\\u2028'),\n    cc('\\u2029'),\n    cc('\\u202f'),\n    cc('\\u205f'),\n    cc('\\u3000'),\n    cc('\\ufeff'),\n  ]\n\n  // consts and utilities\n  const hexDigitPattern = /[0-9a-fA-F]/\n  const decimalPattern = /[0-9]/\n  const decimalPatternNoZero = /[1-9]/\n  // https://hackernoon.com/the-madness-of-parsing-real-world-javascript-regexps-d9ee336df983\n  // https://www.ecma-international.org/ecma-262/8.0/index.html#prod-Pattern\n  class RegExpParser {\n    constructor() {\n      this.idx = 0\n      this.input = ''\n      this.groupIdx = 0\n    }\n    saveState() {\n      return {\n        idx: this.idx,\n        input: this.input,\n        groupIdx: this.groupIdx,\n      }\n    }\n    restoreState(newState) {\n      this.idx = newState.idx\n      this.input = newState.input\n      this.groupIdx = newState.groupIdx\n    }\n    pattern(input) {\n      // parser state\n      this.idx = 0\n      this.input = input\n      this.groupIdx = 0\n      this.consumeChar('/')\n      const value = this.disjunction()\n      this.consumeChar('/')\n      const flags = {\n        type: 'Flags',\n        loc: { begin: this.idx, end: input.length },\n        global: false,\n        ignoreCase: false,\n        multiLine: false,\n        unicode: false,\n        sticky: false,\n      }\n      while (this.isRegExpFlag()) {\n        switch (this.popChar()) {\n          case 'g':\n            addFlag(flags, 'global')\n            break\n          case 'i':\n            addFlag(flags, 'ignoreCase')\n            break\n          case 'm':\n            addFlag(flags, 'multiLine')\n            break\n          case 'u':\n            addFlag(flags, 'unicode')\n            break\n          case 'y':\n            addFlag(flags, 'sticky')\n            break\n        }\n      }\n      if (this.idx !== this.input.length) {\n        throw Error('Redundant input: ' + this.input.substring(this.idx))\n      }\n      return {\n        type: 'Pattern',\n        flags: flags,\n        value: value,\n        loc: this.loc(0),\n      }\n    }\n    disjunction() {\n      const alts = []\n      const begin = this.idx\n      alts.push(this.alternative())\n      while (this.peekChar() === '|') {\n        this.consumeChar('|')\n        alts.push(this.alternative())\n      }\n      return { type: 'Disjunction', value: alts, loc: this.loc(begin) }\n    }\n    alternative() {\n      const terms = []\n      const begin = this.idx\n      while (this.isTerm()) {\n        terms.push(this.term())\n      }\n      return { type: 'Alternative', value: terms, loc: this.loc(begin) }\n    }\n    term() {\n      if (this.isAssertion()) {\n        return this.assertion()\n      } else {\n        return this.atom()\n      }\n    }\n    assertion() {\n      const begin = this.idx\n      switch (this.popChar()) {\n        case '^':\n          return {\n            type: 'StartAnchor',\n            loc: this.loc(begin),\n          }\n        case '$':\n          return { type: 'EndAnchor', loc: this.loc(begin) }\n        // '\\b' or '\\B'\n        case '\\\\':\n          switch (this.popChar()) {\n            case 'b':\n              return {\n                type: 'WordBoundary',\n                loc: this.loc(begin),\n              }\n            case 'B':\n              return {\n                type: 'NonWordBoundary',\n                loc: this.loc(begin),\n              }\n          }\n          // istanbul ignore next\n          throw Error('Invalid Assertion Escape')\n        // '(?=' or '(?!'\n        case '(':\n          this.consumeChar('?')\n          let type\n          switch (this.popChar()) {\n            case '=':\n              type = 'Lookahead'\n              break\n            case '!':\n              type = 'NegativeLookahead'\n              break\n          }\n          ASSERT_EXISTS(type)\n          const disjunction = this.disjunction()\n          this.consumeChar(')')\n          return {\n            type: type,\n            value: disjunction,\n            loc: this.loc(begin),\n          }\n      }\n      // istanbul ignore next\n      return ASSERT_NEVER_REACH_HERE()\n    }\n    quantifier(isBacktracking = false) {\n      let range = undefined\n      const begin = this.idx\n      switch (this.popChar()) {\n        case '*':\n          range = {\n            atLeast: 0,\n            atMost: Infinity,\n          }\n          break\n        case '+':\n          range = {\n            atLeast: 1,\n            atMost: Infinity,\n          }\n          break\n        case '?':\n          range = {\n            atLeast: 0,\n            atMost: 1,\n          }\n          break\n        case '{':\n          const atLeast = this.integerIncludingZero()\n          switch (this.popChar()) {\n            case '}':\n              range = {\n                atLeast: atLeast,\n                atMost: atLeast,\n              }\n              break\n            case ',':\n              let atMost\n              if (this.isDigit()) {\n                atMost = this.integerIncludingZero()\n                range = {\n                  atLeast: atLeast,\n                  atMost: atMost,\n                }\n              } else {\n                range = {\n                  atLeast: atLeast,\n                  atMost: Infinity,\n                }\n              }\n              this.consumeChar('}')\n              break\n          }\n          // throwing exceptions from \"ASSERT_EXISTS\" during backtracking\n          // causes severe performance degradations\n          if (isBacktracking === true && range === undefined) {\n            return undefined\n          }\n          ASSERT_EXISTS(range)\n          break\n      }\n      // throwing exceptions from \"ASSERT_EXISTS\" during backtracking\n      // causes severe performance degradations\n      if (isBacktracking === true && range === undefined) {\n        return undefined\n      }\n      // istanbul ignore else\n      if (ASSERT_EXISTS(range)) {\n        if (this.peekChar(0) === '?') {\n          this.consumeChar('?')\n          range.greedy = false\n        } else {\n          range.greedy = true\n        }\n        range.type = 'Quantifier'\n        range.loc = this.loc(begin)\n        return range\n      }\n    }\n    atom() {\n      let atom\n      const begin = this.idx\n      switch (this.peekChar()) {\n        case '.':\n          atom = this.dotAll()\n          break\n        case '\\\\':\n          atom = this.atomEscape()\n          break\n        case '[':\n          atom = this.characterClass()\n          break\n        case '(':\n          atom = this.group()\n          break\n      }\n      if (atom === undefined && this.isPatternCharacter()) {\n        atom = this.patternCharacter()\n      }\n      // istanbul ignore else\n      if (ASSERT_EXISTS(atom)) {\n        atom.loc = this.loc(begin)\n        if (this.isQuantifier()) {\n          atom.quantifier = this.quantifier()\n        }\n        return atom\n      }\n    }\n    dotAll() {\n      this.consumeChar('.')\n      return {\n        type: 'Set',\n        complement: true,\n        value: [cc('\\n'), cc('\\r'), cc('\\u2028'), cc('\\u2029')],\n      }\n    }\n    atomEscape() {\n      this.consumeChar('\\\\')\n      switch (this.peekChar()) {\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n          return this.decimalEscapeAtom()\n        case 'd':\n        case 'D':\n        case 's':\n        case 'S':\n        case 'w':\n        case 'W':\n          return this.characterClassEscape()\n        case 'f':\n        case 'n':\n        case 'r':\n        case 't':\n        case 'v':\n          return this.controlEscapeAtom()\n        case 'c':\n          return this.controlLetterEscapeAtom()\n        case '0':\n          return this.nulCharacterAtom()\n        case 'x':\n          return this.hexEscapeSequenceAtom()\n        case 'u':\n          return this.regExpUnicodeEscapeSequenceAtom()\n        default:\n          return this.identityEscapeAtom()\n      }\n    }\n    decimalEscapeAtom() {\n      const value = this.positiveInteger()\n      return { type: 'GroupBackReference', value: value }\n    }\n    characterClassEscape() {\n      let set\n      let complement = false\n      switch (this.popChar()) {\n        case 'd':\n          set = digitsCharCodes\n          break\n        case 'D':\n          set = digitsCharCodes\n          complement = true\n          break\n        case 's':\n          set = whitespaceCodes\n          break\n        case 'S':\n          set = whitespaceCodes\n          complement = true\n          break\n        case 'w':\n          set = wordCharCodes\n          break\n        case 'W':\n          set = wordCharCodes\n          complement = true\n          break\n      }\n      // istanbul ignore else\n      if (ASSERT_EXISTS(set)) {\n        return { type: 'Set', value: set, complement: complement }\n      }\n    }\n    controlEscapeAtom() {\n      let escapeCode\n      switch (this.popChar()) {\n        case 'f':\n          escapeCode = cc('\\f')\n          break\n        case 'n':\n          escapeCode = cc('\\n')\n          break\n        case 'r':\n          escapeCode = cc('\\r')\n          break\n        case 't':\n          escapeCode = cc('\\t')\n          break\n        case 'v':\n          escapeCode = cc('\\v')\n          break\n      }\n      // istanbul ignore else\n      if (ASSERT_EXISTS(escapeCode)) {\n        return { type: 'Character', value: escapeCode }\n      }\n    }\n    controlLetterEscapeAtom() {\n      this.consumeChar('c')\n      const letter = this.popChar()\n      if (/[a-zA-Z]/.test(letter) === false) {\n        throw Error('Invalid ')\n      }\n      const letterCode = letter.toUpperCase().charCodeAt(0) - 64\n      return { type: 'Character', value: letterCode }\n    }\n    nulCharacterAtom() {\n      // TODO implement '[lookahead ∉ DecimalDigit]'\n      // TODO: for the deprecated octal escape sequence\n      this.consumeChar('0')\n      return { type: 'Character', value: cc('\\0') }\n    }\n    hexEscapeSequenceAtom() {\n      this.consumeChar('x')\n      return this.parseHexDigits(2)\n    }\n    regExpUnicodeEscapeSequenceAtom() {\n      this.consumeChar('u')\n      return this.parseHexDigits(4)\n    }\n    identityEscapeAtom() {\n      // TODO: implement \"SourceCharacter but not UnicodeIDContinue\"\n      // // http://unicode.org/reports/tr31/#Specific_Character_Adjustments\n      const escapedChar = this.popChar()\n      return { type: 'Character', value: cc(escapedChar) }\n    }\n    classPatternCharacterAtom() {\n      switch (this.peekChar()) {\n        // istanbul ignore next\n        case '\\n':\n        // istanbul ignore next\n        case '\\r':\n        // istanbul ignore next\n        case '\\u2028':\n        // istanbul ignore next\n        case '\\u2029':\n        // istanbul ignore next\n        case '\\\\':\n        // istanbul ignore next\n        case ']':\n          throw Error('TBD')\n        default:\n          const nextChar = this.popChar()\n          return { type: 'Character', value: cc(nextChar) }\n      }\n    }\n    characterClass() {\n      const set = []\n      let complement = false\n      this.consumeChar('[')\n      if (this.peekChar(0) === '^') {\n        this.consumeChar('^')\n        complement = true\n      }\n      while (this.isClassAtom()) {\n        const from = this.classAtom()\n        from.type === 'Character'\n        if (isCharacter(from) && this.isRangeDash()) {\n          this.consumeChar('-')\n          const to = this.classAtom()\n          to.type === 'Character'\n          // a range can only be used when both sides are single characters\n          if (isCharacter(to)) {\n            if (to.value < from.value) {\n              throw Error('Range out of order in character class')\n            }\n            set.push({ from: from.value, to: to.value })\n          } else {\n            // literal dash\n            insertToSet(from.value, set)\n            set.push(cc('-'))\n            insertToSet(to.value, set)\n          }\n        } else {\n          insertToSet(from.value, set)\n        }\n      }\n      this.consumeChar(']')\n      return { type: 'Set', complement: complement, value: set }\n    }\n    classAtom() {\n      switch (this.peekChar()) {\n        // istanbul ignore next\n        case ']':\n        // istanbul ignore next\n        case '\\n':\n        // istanbul ignore next\n        case '\\r':\n        // istanbul ignore next\n        case '\\u2028':\n        // istanbul ignore next\n        case '\\u2029':\n          throw Error('TBD')\n        case '\\\\':\n          return this.classEscape()\n        default:\n          return this.classPatternCharacterAtom()\n      }\n    }\n    classEscape() {\n      this.consumeChar('\\\\')\n      switch (this.peekChar()) {\n        // Matches a backspace.\n        // (Not to be confused with \\b word boundary outside characterClass)\n        case 'b':\n          this.consumeChar('b')\n          return { type: 'Character', value: cc('\\u0008') }\n        case 'd':\n        case 'D':\n        case 's':\n        case 'S':\n        case 'w':\n        case 'W':\n          return this.characterClassEscape()\n        case 'f':\n        case 'n':\n        case 'r':\n        case 't':\n        case 'v':\n          return this.controlEscapeAtom()\n        case 'c':\n          return this.controlLetterEscapeAtom()\n        case '0':\n          return this.nulCharacterAtom()\n        case 'x':\n          return this.hexEscapeSequenceAtom()\n        case 'u':\n          return this.regExpUnicodeEscapeSequenceAtom()\n        default:\n          return this.identityEscapeAtom()\n      }\n    }\n    group() {\n      let capturing = true\n      this.consumeChar('(')\n      switch (this.peekChar(0)) {\n        case '?':\n          this.consumeChar('?')\n          this.consumeChar(':')\n          capturing = false\n          break\n        default:\n          this.groupIdx++\n          break\n      }\n      const value = this.disjunction()\n      this.consumeChar(')')\n      const groupAst = {\n        type: 'Group',\n        capturing: capturing,\n        value: value,\n      }\n      if (capturing) {\n        groupAst['idx'] = this.groupIdx\n      }\n      return groupAst\n    }\n    positiveInteger() {\n      let number = this.popChar()\n      // istanbul ignore next - can't ever get here due to previous lookahead checks\n      // still implementing this error checking in case this ever changes.\n      if (decimalPatternNoZero.test(number) === false) {\n        throw Error('Expecting a positive integer')\n      }\n      while (decimalPattern.test(this.peekChar(0))) {\n        number += this.popChar()\n      }\n      return parseInt(number, 10)\n    }\n    integerIncludingZero() {\n      let number = this.popChar()\n      if (decimalPattern.test(number) === false) {\n        throw Error('Expecting an integer')\n      }\n      while (decimalPattern.test(this.peekChar(0))) {\n        number += this.popChar()\n      }\n      return parseInt(number, 10)\n    }\n    patternCharacter() {\n      const nextChar = this.popChar()\n      switch (nextChar) {\n        // istanbul ignore next\n        case '\\n':\n        // istanbul ignore next\n        case '\\r':\n        // istanbul ignore next\n        case '\\u2028':\n        // istanbul ignore next\n        case '\\u2029':\n        // istanbul ignore next\n        case '^':\n        // istanbul ignore next\n        case '$':\n        // istanbul ignore next\n        case '\\\\':\n        // istanbul ignore next\n        case '.':\n        // istanbul ignore next\n        case '*':\n        // istanbul ignore next\n        case '+':\n        // istanbul ignore next\n        case '?':\n        // istanbul ignore next\n        case '(':\n        // istanbul ignore next\n        case ')':\n        // istanbul ignore next\n        case '[':\n        // istanbul ignore next\n        case '|':\n          // istanbul ignore next\n          throw Error('TBD')\n        default:\n          return { type: 'Character', value: cc(nextChar) }\n      }\n    }\n    isRegExpFlag() {\n      switch (this.peekChar(0)) {\n        case 'g':\n        case 'i':\n        case 'm':\n        case 'u':\n        case 'y':\n          return true\n        default:\n          return false\n      }\n    }\n    isRangeDash() {\n      return this.peekChar() === '-' && this.isClassAtom(1)\n    }\n    isDigit() {\n      return decimalPattern.test(this.peekChar(0))\n    }\n    isClassAtom(howMuch = 0) {\n      switch (this.peekChar(howMuch)) {\n        case ']':\n        case '\\n':\n        case '\\r':\n        case '\\u2028':\n        case '\\u2029':\n          return false\n        default:\n          return true\n      }\n    }\n    isTerm() {\n      return this.isAtom() || this.isAssertion()\n    }\n    isAtom() {\n      if (this.isPatternCharacter()) {\n        return true\n      }\n      switch (this.peekChar(0)) {\n        case '.':\n        case '\\\\': // atomEscape\n        case '[': // characterClass\n        // TODO: isAtom must be called before isAssertion - disambiguate\n        case '(': // group\n          return true\n        default:\n          return false\n      }\n    }\n    isAssertion() {\n      switch (this.peekChar(0)) {\n        case '^':\n        case '$':\n          return true\n        // '\\b' or '\\B'\n        case '\\\\':\n          switch (this.peekChar(1)) {\n            case 'b':\n            case 'B':\n              return true\n            default:\n              return false\n          }\n        // '(?=' or '(?!'\n        case '(':\n          return this.peekChar(1) === '?' && (this.peekChar(2) === '=' || this.peekChar(2) === '!')\n        default:\n          return false\n      }\n    }\n    isQuantifier() {\n      const prevState = this.saveState()\n      try {\n        return this.quantifier(true) !== undefined\n      } catch (e) {\n        return false\n      } finally {\n        this.restoreState(prevState)\n      }\n    }\n    isPatternCharacter() {\n      switch (this.peekChar()) {\n        case '^':\n        case '$':\n        case '\\\\':\n        case '.':\n        case '*':\n        case '+':\n        case '?':\n        case '(':\n        case ')':\n        case '[':\n        case '|':\n        case '/':\n        case '\\n':\n        case '\\r':\n        case '\\u2028':\n        case '\\u2029':\n          return false\n        default:\n          return true\n      }\n    }\n    parseHexDigits(howMany) {\n      let hexString = ''\n      for (let i = 0; i < howMany; i++) {\n        const hexChar = this.popChar()\n        if (hexDigitPattern.test(hexChar) === false) {\n          throw Error('Expecting a HexDecimal digits')\n        }\n        hexString += hexChar\n      }\n      const charCode = parseInt(hexString, 16)\n      return { type: 'Character', value: charCode }\n    }\n    peekChar(howMuch = 0) {\n      return this.input[this.idx + howMuch]\n    }\n    popChar() {\n      const nextChar = this.peekChar(0)\n      this.consumeChar(undefined)\n      return nextChar\n    }\n    consumeChar(char) {\n      if (char !== undefined && this.input[this.idx] !== char) {\n        throw Error(\"Expected: '\" + char + \"' but found: '\" + this.input[this.idx] + \"' at offset: \" + this.idx)\n      }\n      if (this.idx >= this.input.length) {\n        throw Error('Unexpected end of input')\n      }\n      this.idx++\n    }\n    loc(begin) {\n      return { begin: begin, end: this.idx }\n    }\n  }\n\n  class BaseRegExpVisitor {\n    visitChildren(node) {\n      for (const key in node) {\n        const child = node[key]\n        /* istanbul ignore else */\n        if (node.hasOwnProperty(key)) {\n          if (child.type !== undefined) {\n            this.visit(child)\n          } else if (Array.isArray(child)) {\n            child.forEach((subChild) => {\n              this.visit(subChild)\n            }, this)\n          }\n        }\n      }\n    }\n    visit(node) {\n      switch (node.type) {\n        case 'Pattern':\n          this.visitPattern(node)\n          break\n        case 'Flags':\n          this.visitFlags(node)\n          break\n        case 'Disjunction':\n          this.visitDisjunction(node)\n          break\n        case 'Alternative':\n          this.visitAlternative(node)\n          break\n        case 'StartAnchor':\n          this.visitStartAnchor(node)\n          break\n        case 'EndAnchor':\n          this.visitEndAnchor(node)\n          break\n        case 'WordBoundary':\n          this.visitWordBoundary(node)\n          break\n        case 'NonWordBoundary':\n          this.visitNonWordBoundary(node)\n          break\n        case 'Lookahead':\n          this.visitLookahead(node)\n          break\n        case 'NegativeLookahead':\n          this.visitNegativeLookahead(node)\n          break\n        case 'Character':\n          this.visitCharacter(node)\n          break\n        case 'Set':\n          this.visitSet(node)\n          break\n        case 'Group':\n          this.visitGroup(node)\n          break\n        case 'GroupBackReference':\n          this.visitGroupBackReference(node)\n          break\n        case 'Quantifier':\n          this.visitQuantifier(node)\n          break\n      }\n      this.visitChildren(node)\n    }\n    visitPattern(node) {}\n    visitFlags(node) {}\n    visitDisjunction(node) {}\n    visitAlternative(node) {}\n    // Assertion\n    visitStartAnchor(node) {}\n    visitEndAnchor(node) {}\n    visitWordBoundary(node) {}\n    visitNonWordBoundary(node) {}\n    visitLookahead(node) {}\n    visitNegativeLookahead(node) {}\n    // atoms\n    visitCharacter(node) {}\n    visitSet(node) {}\n    visitGroup(node) {}\n    visitGroupBackReference(node) {}\n    visitQuantifier(node) {}\n  }\n\n  let regExpAstCache = {}\n  const regExpParser = new RegExpParser()\n  function getRegExpAst(regExp) {\n    const regExpStr = regExp.toString()\n    if (regExpAstCache.hasOwnProperty(regExpStr)) {\n      return regExpAstCache[regExpStr]\n    } else {\n      const regExpAst = regExpParser.pattern(regExpStr)\n      regExpAstCache[regExpStr] = regExpAst\n      return regExpAst\n    }\n  }\n  function clearRegExpParserCache() {\n    regExpAstCache = {}\n  }\n\n  const complementErrorMessage = 'Complement Sets are not supported for first char optimization'\n  const failedOptimizationPrefixMsg = 'Unable to use \"first char\" lexer optimizations:\\n'\n  function getOptimizedStartCodesIndices(regExp, ensureOptimizations = false) {\n    try {\n      const ast = getRegExpAst(regExp)\n      const firstChars = firstCharOptimizedIndices(ast.value, {}, ast.flags.ignoreCase)\n      return firstChars\n    } catch (e) {\n      /* istanbul ignore next */\n      // Testing this relies on the regexp-to-ast library having a bug... */\n      // TODO: only the else branch needs to be ignored, try to fix with newer prettier / tsc\n      if (e.message === complementErrorMessage) {\n        if (ensureOptimizations) {\n          PRINT_WARNING(\n            `${failedOptimizationPrefixMsg}` +\n              `\\tUnable to optimize: < ${regExp.toString()} >\\n` +\n              '\\tComplement Sets cannot be automatically optimized.\\n' +\n              \"\\tThis will disable the lexer's first char optimizations.\\n\" +\n              '\\tSee: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#COMPLEMENT for details.',\n          )\n        }\n      } else {\n        let msgSuffix = ''\n        if (ensureOptimizations) {\n          msgSuffix =\n            \"\\n\\tThis will disable the lexer's first char optimizations.\\n\" +\n            '\\tSee: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#REGEXP_PARSING for details.'\n        }\n        PRINT_ERROR(\n          `${failedOptimizationPrefixMsg}\\n` +\n            `\\tFailed parsing: < ${regExp.toString()} >\\n` +\n            `\\tUsing the @chevrotain/regexp-to-ast library\\n` +\n            '\\tPlease open an issue at: https://github.com/chevrotain/chevrotain/issues' +\n            msgSuffix,\n        )\n      }\n    }\n    return []\n  }\n  function firstCharOptimizedIndices(ast, result, ignoreCase) {\n    switch (ast.type) {\n      case 'Disjunction':\n        for (let i = 0; i < ast.value.length; i++) {\n          firstCharOptimizedIndices(ast.value[i], result, ignoreCase)\n        }\n        break\n      case 'Alternative':\n        const terms = ast.value\n        for (let i = 0; i < terms.length; i++) {\n          const term = terms[i]\n          // skip terms that cannot effect the first char results\n          switch (term.type) {\n            case 'EndAnchor':\n            // A group back reference cannot affect potential starting char.\n            // because if a back reference is the first production than automatically\n            // the group being referenced has had to come BEFORE so its codes have already been added\n            case 'GroupBackReference':\n            // assertions do not affect potential starting codes\n            case 'Lookahead':\n            case 'NegativeLookahead':\n            case 'StartAnchor':\n            case 'WordBoundary':\n            case 'NonWordBoundary':\n              continue\n          }\n          const atom = term\n          switch (atom.type) {\n            case 'Character':\n              addOptimizedIdxToResult(atom.value, result, ignoreCase)\n              break\n            case 'Set':\n              if (atom.complement === true) {\n                throw Error(complementErrorMessage)\n              }\n              forEach(atom.value, (code) => {\n                if (typeof code === 'number') {\n                  addOptimizedIdxToResult(code, result, ignoreCase)\n                } else {\n                  // range\n                  const range = code\n                  // cannot optimize when ignoreCase is\n                  if (ignoreCase === true) {\n                    for (let rangeCode = range.from; rangeCode <= range.to; rangeCode++) {\n                      addOptimizedIdxToResult(rangeCode, result, ignoreCase)\n                    }\n                  }\n                  // Optimization (2 orders of magnitude less work for very large ranges)\n                  else {\n                    // handle unoptimized values\n                    for (\n                      let rangeCode = range.from;\n                      rangeCode <= range.to && rangeCode < minOptimizationVal;\n                      rangeCode++\n                    ) {\n                      addOptimizedIdxToResult(rangeCode, result, ignoreCase)\n                    }\n                    // Less common charCode where we optimize for faster init time, by using larger \"buckets\"\n                    if (range.to >= minOptimizationVal) {\n                      const minUnOptVal = range.from >= minOptimizationVal ? range.from : minOptimizationVal\n                      const maxUnOptVal = range.to\n                      const minOptIdx = charCodeToOptimizedIndex(minUnOptVal)\n                      const maxOptIdx = charCodeToOptimizedIndex(maxUnOptVal)\n                      for (let currOptIdx = minOptIdx; currOptIdx <= maxOptIdx; currOptIdx++) {\n                        result[currOptIdx] = currOptIdx\n                      }\n                    }\n                  }\n                }\n              })\n              break\n            case 'Group':\n              firstCharOptimizedIndices(atom.value, result, ignoreCase)\n              break\n            /* istanbul ignore next */\n            default:\n              throw Error('Non Exhaustive Match')\n          }\n          // reached a mandatory production, no more **start** codes can be found on this alternative\n          const isOptionalQuantifier = atom.quantifier !== undefined && atom.quantifier.atLeast === 0\n          if (\n            // A group may be optional due to empty contents /(?:)/\n            // or if everything inside it is optional /((a)?)/\n            (atom.type === 'Group' && isWholeOptional(atom) === false) ||\n            // If this term is not a group it may only be optional if it has an optional quantifier\n            (atom.type !== 'Group' && isOptionalQuantifier === false)\n          ) {\n            break\n          }\n        }\n        break\n      /* istanbul ignore next */\n      default:\n        throw Error('non exhaustive match!')\n    }\n    // console.log(Object.keys(result).length)\n    return values(result)\n  }\n  function addOptimizedIdxToResult(code, result, ignoreCase) {\n    const optimizedCharIdx = charCodeToOptimizedIndex(code)\n    result[optimizedCharIdx] = optimizedCharIdx\n    if (ignoreCase === true) {\n      handleIgnoreCase(code, result)\n    }\n  }\n  function handleIgnoreCase(code, result) {\n    const char = String.fromCharCode(code)\n    const upperChar = char.toUpperCase()\n    /* istanbul ignore else */\n    if (upperChar !== char) {\n      const optimizedCharIdx = charCodeToOptimizedIndex(upperChar.charCodeAt(0))\n      result[optimizedCharIdx] = optimizedCharIdx\n    } else {\n      const lowerChar = char.toLowerCase()\n      if (lowerChar !== char) {\n        const optimizedCharIdx = charCodeToOptimizedIndex(lowerChar.charCodeAt(0))\n        result[optimizedCharIdx] = optimizedCharIdx\n      }\n    }\n  }\n  function findCode(setNode, targetCharCodes) {\n    return find$1(setNode.value, (codeOrRange) => {\n      if (typeof codeOrRange === 'number') {\n        return includes(targetCharCodes, codeOrRange)\n      } else {\n        // range\n        const range = codeOrRange\n        return find$1(targetCharCodes, (targetCode) => range.from <= targetCode && targetCode <= range.to) !== undefined\n      }\n    })\n  }\n  function isWholeOptional(ast) {\n    const quantifier = ast.quantifier\n    if (quantifier && quantifier.atLeast === 0) {\n      return true\n    }\n    if (!ast.value) {\n      return false\n    }\n    return isArray$1(ast.value) ? every(ast.value, isWholeOptional) : isWholeOptional(ast.value)\n  }\n  class CharCodeFinder extends BaseRegExpVisitor {\n    constructor(targetCharCodes) {\n      super()\n      this.targetCharCodes = targetCharCodes\n      this.found = false\n    }\n    visitChildren(node) {\n      // No need to keep looking...\n      if (this.found === true) {\n        return\n      }\n      // switch lookaheads as they do not actually consume any characters thus\n      // finding a charCode at lookahead context does not mean that regexp can actually contain it in a match.\n      switch (node.type) {\n        case 'Lookahead':\n          this.visitLookahead(node)\n          return\n        case 'NegativeLookahead':\n          this.visitNegativeLookahead(node)\n          return\n      }\n      super.visitChildren(node)\n    }\n    visitCharacter(node) {\n      if (includes(this.targetCharCodes, node.value)) {\n        this.found = true\n      }\n    }\n    visitSet(node) {\n      if (node.complement) {\n        if (findCode(node, this.targetCharCodes) === undefined) {\n          this.found = true\n        }\n      } else {\n        if (findCode(node, this.targetCharCodes) !== undefined) {\n          this.found = true\n        }\n      }\n    }\n  }\n  function canMatchCharCode(charCodes, pattern) {\n    if (pattern instanceof RegExp) {\n      const ast = getRegExpAst(pattern)\n      const charCodeFinder = new CharCodeFinder(charCodes)\n      charCodeFinder.visit(ast)\n      return charCodeFinder.found\n    } else {\n      return (\n        find$1(pattern, (char) => {\n          return includes(charCodes, char.charCodeAt(0))\n        }) !== undefined\n      )\n    }\n  }\n\n  const PATTERN = 'PATTERN'\n  const DEFAULT_MODE = 'defaultMode'\n  const MODES = 'modes'\n  let SUPPORT_STICKY = typeof new RegExp('(?:)').sticky === 'boolean'\n  function analyzeTokenTypes(tokenTypes, options) {\n    options = defaults$1(options, {\n      useSticky: SUPPORT_STICKY,\n      debug: false,\n      safeMode: false,\n      positionTracking: 'full',\n      lineTerminatorCharacters: ['\\r', '\\n'],\n      tracer: (msg, action) => action(),\n    })\n    const tracer = options.tracer\n    tracer('initCharCodeToOptimizedIndexMap', () => {\n      initCharCodeToOptimizedIndexMap()\n    })\n    let onlyRelevantTypes\n    tracer('Reject Lexer.NA', () => {\n      onlyRelevantTypes = reject(tokenTypes, (currType) => {\n        return currType[PATTERN] === Lexer.NA\n      })\n    })\n    let hasCustom = false\n    let allTransformedPatterns\n    tracer('Transform Patterns', () => {\n      hasCustom = false\n      allTransformedPatterns = map(onlyRelevantTypes, (currType) => {\n        const currPattern = currType[PATTERN]\n        /* istanbul ignore else */\n        if (isRegExp$1(currPattern)) {\n          const regExpSource = currPattern.source\n          if (\n            regExpSource.length === 1 &&\n            // only these regExp meta characters which can appear in a length one regExp\n            regExpSource !== '^' &&\n            regExpSource !== '$' &&\n            regExpSource !== '.' &&\n            !currPattern.ignoreCase\n          ) {\n            return regExpSource\n          } else if (\n            regExpSource.length === 2 &&\n            regExpSource[0] === '\\\\' &&\n            // not a meta character\n            !includes(['d', 'D', 's', 'S', 't', 'r', 'n', 't', '0', 'c', 'b', 'B', 'f', 'v', 'w', 'W'], regExpSource[1])\n          ) {\n            // escaped meta Characters: /\\+/ /\\[/\n            // or redundant escaping: /\\a/\n            // without the escaping \"\\\"\n            return regExpSource[1]\n          } else {\n            return options.useSticky ? addStickyFlag(currPattern) : addStartOfInput(currPattern)\n          }\n        } else if (isFunction(currPattern)) {\n          hasCustom = true\n          // CustomPatternMatcherFunc - custom patterns do not require any transformations, only wrapping in a RegExp Like object\n          return { exec: currPattern }\n        } else if (typeof currPattern === 'object') {\n          hasCustom = true\n          // ICustomPattern\n          return currPattern\n        } else if (typeof currPattern === 'string') {\n          if (currPattern.length === 1) {\n            return currPattern\n          } else {\n            const escapedRegExpString = currPattern.replace(/[\\\\^$.*+?()[\\]{}|]/g, '\\\\$&')\n            const wrappedRegExp = new RegExp(escapedRegExpString)\n            return options.useSticky ? addStickyFlag(wrappedRegExp) : addStartOfInput(wrappedRegExp)\n          }\n        } else {\n          throw Error('non exhaustive match')\n        }\n      })\n    })\n    let patternIdxToType\n    let patternIdxToGroup\n    let patternIdxToLongerAltIdxArr\n    let patternIdxToPushMode\n    let patternIdxToPopMode\n    tracer('misc mapping', () => {\n      patternIdxToType = map(onlyRelevantTypes, (currType) => currType.tokenTypeIdx)\n      patternIdxToGroup = map(onlyRelevantTypes, (clazz) => {\n        const groupName = clazz.GROUP\n        /* istanbul ignore next */\n        if (groupName === Lexer.SKIPPED) {\n          return undefined\n        } else if (isString(groupName)) {\n          return groupName\n        } else if (isUndefined(groupName)) {\n          return false\n        } else {\n          throw Error('non exhaustive match')\n        }\n      })\n      patternIdxToLongerAltIdxArr = map(onlyRelevantTypes, (clazz) => {\n        const longerAltType = clazz.LONGER_ALT\n        if (longerAltType) {\n          const longerAltIdxArr = isArray$1(longerAltType)\n            ? map(longerAltType, (type) => indexOf(onlyRelevantTypes, type))\n            : [indexOf(onlyRelevantTypes, longerAltType)]\n          return longerAltIdxArr\n        }\n      })\n      patternIdxToPushMode = map(onlyRelevantTypes, (clazz) => clazz.PUSH_MODE)\n      patternIdxToPopMode = map(onlyRelevantTypes, (clazz) => has(clazz, 'POP_MODE'))\n    })\n    let patternIdxToCanLineTerminator\n    tracer('Line Terminator Handling', () => {\n      const lineTerminatorCharCodes = getCharCodes(options.lineTerminatorCharacters)\n      patternIdxToCanLineTerminator = map(onlyRelevantTypes, (tokType) => false)\n      if (options.positionTracking !== 'onlyOffset') {\n        patternIdxToCanLineTerminator = map(onlyRelevantTypes, (tokType) => {\n          if (has(tokType, 'LINE_BREAKS')) {\n            return !!tokType.LINE_BREAKS\n          } else {\n            return (\n              checkLineBreaksIssues(tokType, lineTerminatorCharCodes) === false &&\n              canMatchCharCode(lineTerminatorCharCodes, tokType.PATTERN)\n            )\n          }\n        })\n      }\n    })\n    let patternIdxToIsCustom\n    let patternIdxToShort\n    let emptyGroups\n    let patternIdxToConfig\n    tracer('Misc Mapping #2', () => {\n      patternIdxToIsCustom = map(onlyRelevantTypes, isCustomPattern)\n      patternIdxToShort = map(allTransformedPatterns, isShortPattern)\n      emptyGroups = reduce(\n        onlyRelevantTypes,\n        (acc, clazz) => {\n          const groupName = clazz.GROUP\n          if (isString(groupName) && !(groupName === Lexer.SKIPPED)) {\n            acc[groupName] = []\n          }\n          return acc\n        },\n        {},\n      )\n      patternIdxToConfig = map(allTransformedPatterns, (x, idx) => {\n        return {\n          pattern: allTransformedPatterns[idx],\n          longerAlt: patternIdxToLongerAltIdxArr[idx],\n          canLineTerminator: patternIdxToCanLineTerminator[idx],\n          isCustom: patternIdxToIsCustom[idx],\n          short: patternIdxToShort[idx],\n          group: patternIdxToGroup[idx],\n          push: patternIdxToPushMode[idx],\n          pop: patternIdxToPopMode[idx],\n          tokenTypeIdx: patternIdxToType[idx],\n          tokenType: onlyRelevantTypes[idx],\n        }\n      })\n    })\n    let canBeOptimized = true\n    let charCodeToPatternIdxToConfig = []\n    if (!options.safeMode) {\n      tracer('First Char Optimization', () => {\n        charCodeToPatternIdxToConfig = reduce(\n          onlyRelevantTypes,\n          (result, currTokType, idx) => {\n            if (typeof currTokType.PATTERN === 'string') {\n              const charCode = currTokType.PATTERN.charCodeAt(0)\n              const optimizedIdx = charCodeToOptimizedIndex(charCode)\n              addToMapOfArrays(result, optimizedIdx, patternIdxToConfig[idx])\n            } else if (isArray$1(currTokType.START_CHARS_HINT)) {\n              let lastOptimizedIdx\n              forEach(currTokType.START_CHARS_HINT, (charOrInt) => {\n                const charCode = typeof charOrInt === 'string' ? charOrInt.charCodeAt(0) : charOrInt\n                const currOptimizedIdx = charCodeToOptimizedIndex(charCode)\n                // Avoid adding the config multiple times\n                /* istanbul ignore else */\n                // - Difficult to check this scenario effects as it is only a performance\n                //   optimization that does not change correctness\n                if (lastOptimizedIdx !== currOptimizedIdx) {\n                  lastOptimizedIdx = currOptimizedIdx\n                  addToMapOfArrays(result, currOptimizedIdx, patternIdxToConfig[idx])\n                }\n              })\n            } else if (isRegExp$1(currTokType.PATTERN)) {\n              if (currTokType.PATTERN.unicode) {\n                canBeOptimized = false\n                if (options.ensureOptimizations) {\n                  PRINT_ERROR(\n                    `${failedOptimizationPrefixMsg}` +\n                      `\\tUnable to analyze < ${currTokType.PATTERN.toString()} > pattern.\\n` +\n                      '\\tThe regexp unicode flag is not currently supported by the regexp-to-ast library.\\n' +\n                      \"\\tThis will disable the lexer's first char optimizations.\\n\" +\n                      '\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#UNICODE_OPTIMIZE',\n                  )\n                }\n              } else {\n                const optimizedCodes = getOptimizedStartCodesIndices(currTokType.PATTERN, options.ensureOptimizations)\n                /* istanbul ignore if */\n                // start code will only be empty given an empty regExp or failure of regexp-to-ast library\n                // the first should be a different validation and the second cannot be tested.\n                if (isEmpty(optimizedCodes)) {\n                  // we cannot understand what codes may start possible matches\n                  // The optimization correctness requires knowing start codes for ALL patterns.\n                  // Not actually sure this is an error, no debug message\n                  canBeOptimized = false\n                }\n                forEach(optimizedCodes, (code) => {\n                  addToMapOfArrays(result, code, patternIdxToConfig[idx])\n                })\n              }\n            } else {\n              if (options.ensureOptimizations) {\n                PRINT_ERROR(\n                  `${failedOptimizationPrefixMsg}` +\n                    `\\tTokenType: <${currTokType.name}> is using a custom token pattern without providing <start_chars_hint> parameter.\\n` +\n                    \"\\tThis will disable the lexer's first char optimizations.\\n\" +\n                    '\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#CUSTOM_OPTIMIZE',\n                )\n              }\n              canBeOptimized = false\n            }\n            return result\n          },\n          [],\n        )\n      })\n    }\n    return {\n      emptyGroups: emptyGroups,\n      patternIdxToConfig: patternIdxToConfig,\n      charCodeToPatternIdxToConfig: charCodeToPatternIdxToConfig,\n      hasCustom: hasCustom,\n      canBeOptimized: canBeOptimized,\n    }\n  }\n  function validatePatterns(tokenTypes, validModesNames) {\n    let errors = []\n    const missingResult = findMissingPatterns(tokenTypes)\n    errors = errors.concat(missingResult.errors)\n    const invalidResult = findInvalidPatterns(missingResult.valid)\n    const validTokenTypes = invalidResult.valid\n    errors = errors.concat(invalidResult.errors)\n    errors = errors.concat(validateRegExpPattern(validTokenTypes))\n    errors = errors.concat(findInvalidGroupType(validTokenTypes))\n    errors = errors.concat(findModesThatDoNotExist(validTokenTypes, validModesNames))\n    errors = errors.concat(findUnreachablePatterns(validTokenTypes))\n    return errors\n  }\n  function validateRegExpPattern(tokenTypes) {\n    let errors = []\n    const withRegExpPatterns = filter(tokenTypes, (currTokType) => isRegExp$1(currTokType[PATTERN]))\n    errors = errors.concat(findEndOfInputAnchor(withRegExpPatterns))\n    errors = errors.concat(findStartOfInputAnchor(withRegExpPatterns))\n    errors = errors.concat(findUnsupportedFlags(withRegExpPatterns))\n    errors = errors.concat(findDuplicatePatterns(withRegExpPatterns))\n    errors = errors.concat(findEmptyMatchRegExps(withRegExpPatterns))\n    return errors\n  }\n  function findMissingPatterns(tokenTypes) {\n    const tokenTypesWithMissingPattern = filter(tokenTypes, (currType) => {\n      return !has(currType, PATTERN)\n    })\n    const errors = map(tokenTypesWithMissingPattern, (currType) => {\n      return {\n        message: 'Token Type: ->' + currType.name + \"<- missing static 'PATTERN' property\",\n        type: LexerDefinitionErrorType.MISSING_PATTERN,\n        tokenTypes: [currType],\n      }\n    })\n    const valid = difference$1(tokenTypes, tokenTypesWithMissingPattern)\n    return { errors, valid }\n  }\n  function findInvalidPatterns(tokenTypes) {\n    const tokenTypesWithInvalidPattern = filter(tokenTypes, (currType) => {\n      const pattern = currType[PATTERN]\n      return !isRegExp$1(pattern) && !isFunction(pattern) && !has(pattern, 'exec') && !isString(pattern)\n    })\n    const errors = map(tokenTypesWithInvalidPattern, (currType) => {\n      return {\n        message:\n          'Token Type: ->' +\n          currType.name +\n          \"<- static 'PATTERN' can only be a RegExp, a\" +\n          ' Function matching the {CustomPatternMatcherFunc} type or an Object matching the {ICustomPattern} interface.',\n        type: LexerDefinitionErrorType.INVALID_PATTERN,\n        tokenTypes: [currType],\n      }\n    })\n    const valid = difference$1(tokenTypes, tokenTypesWithInvalidPattern)\n    return { errors, valid }\n  }\n  const end_of_input = /[^\\\\][$]/\n  function findEndOfInputAnchor(tokenTypes) {\n    class EndAnchorFinder extends BaseRegExpVisitor {\n      constructor() {\n        super(...arguments)\n        this.found = false\n      }\n      visitEndAnchor(node) {\n        this.found = true\n      }\n    }\n    const invalidRegex = filter(tokenTypes, (currType) => {\n      const pattern = currType.PATTERN\n      try {\n        const regexpAst = getRegExpAst(pattern)\n        const endAnchorVisitor = new EndAnchorFinder()\n        endAnchorVisitor.visit(regexpAst)\n        return endAnchorVisitor.found\n      } catch (e) {\n        // old behavior in case of runtime exceptions with regexp-to-ast.\n        /* istanbul ignore next - cannot ensure an error in regexp-to-ast*/\n        return end_of_input.test(pattern.source)\n      }\n    })\n    const errors = map(invalidRegex, (currType) => {\n      return {\n        message:\n          'Unexpected RegExp Anchor Error:\\n' +\n          '\\tToken Type: ->' +\n          currType.name +\n          \"<- static 'PATTERN' cannot contain end of input anchor '$'\\n\" +\n          '\\tSee chevrotain.io/docs/guide/resolving_lexer_errors.html#ANCHORS' +\n          '\\tfor details.',\n        type: LexerDefinitionErrorType.EOI_ANCHOR_FOUND,\n        tokenTypes: [currType],\n      }\n    })\n    return errors\n  }\n  function findEmptyMatchRegExps(tokenTypes) {\n    const matchesEmptyString = filter(tokenTypes, (currType) => {\n      const pattern = currType.PATTERN\n      return pattern.test('')\n    })\n    const errors = map(matchesEmptyString, (currType) => {\n      return {\n        message: 'Token Type: ->' + currType.name + \"<- static 'PATTERN' must not match an empty string\",\n        type: LexerDefinitionErrorType.EMPTY_MATCH_PATTERN,\n        tokenTypes: [currType],\n      }\n    })\n    return errors\n  }\n  const start_of_input = /[^\\\\[][\\^]|^\\^/\n  function findStartOfInputAnchor(tokenTypes) {\n    class StartAnchorFinder extends BaseRegExpVisitor {\n      constructor() {\n        super(...arguments)\n        this.found = false\n      }\n      visitStartAnchor(node) {\n        this.found = true\n      }\n    }\n    const invalidRegex = filter(tokenTypes, (currType) => {\n      const pattern = currType.PATTERN\n      try {\n        const regexpAst = getRegExpAst(pattern)\n        const startAnchorVisitor = new StartAnchorFinder()\n        startAnchorVisitor.visit(regexpAst)\n        return startAnchorVisitor.found\n      } catch (e) {\n        // old behavior in case of runtime exceptions with regexp-to-ast.\n        /* istanbul ignore next - cannot ensure an error in regexp-to-ast*/\n        return start_of_input.test(pattern.source)\n      }\n    })\n    const errors = map(invalidRegex, (currType) => {\n      return {\n        message:\n          'Unexpected RegExp Anchor Error:\\n' +\n          '\\tToken Type: ->' +\n          currType.name +\n          \"<- static 'PATTERN' cannot contain start of input anchor '^'\\n\" +\n          '\\tSee https://chevrotain.io/docs/guide/resolving_lexer_errors.html#ANCHORS' +\n          '\\tfor details.',\n        type: LexerDefinitionErrorType.SOI_ANCHOR_FOUND,\n        tokenTypes: [currType],\n      }\n    })\n    return errors\n  }\n  function findUnsupportedFlags(tokenTypes) {\n    const invalidFlags = filter(tokenTypes, (currType) => {\n      const pattern = currType[PATTERN]\n      return pattern instanceof RegExp && (pattern.multiline || pattern.global)\n    })\n    const errors = map(invalidFlags, (currType) => {\n      return {\n        message: 'Token Type: ->' + currType.name + \"<- static 'PATTERN' may NOT contain global('g') or multiline('m')\",\n        type: LexerDefinitionErrorType.UNSUPPORTED_FLAGS_FOUND,\n        tokenTypes: [currType],\n      }\n    })\n    return errors\n  }\n  // This can only test for identical duplicate RegExps, not semantically equivalent ones.\n  function findDuplicatePatterns(tokenTypes) {\n    const found = []\n    let identicalPatterns = map(tokenTypes, (outerType) => {\n      return reduce(\n        tokenTypes,\n        (result, innerType) => {\n          if (\n            outerType.PATTERN.source === innerType.PATTERN.source &&\n            !includes(found, innerType) &&\n            innerType.PATTERN !== Lexer.NA\n          ) {\n            // this avoids duplicates in the result, each Token Type may only appear in one \"set\"\n            // in essence we are creating Equivalence classes on equality relation.\n            found.push(innerType)\n            result.push(innerType)\n            return result\n          }\n          return result\n        },\n        [],\n      )\n    })\n    identicalPatterns = compact(identicalPatterns)\n    const duplicatePatterns = filter(identicalPatterns, (currIdenticalSet) => {\n      return currIdenticalSet.length > 1\n    })\n    const errors = map(duplicatePatterns, (setOfIdentical) => {\n      const tokenTypeNames = map(setOfIdentical, (currType) => {\n        return currType.name\n      })\n      const dupPatternSrc = head(setOfIdentical).PATTERN\n      return {\n        message:\n          `The same RegExp pattern ->${dupPatternSrc}<-` +\n          `has been used in all of the following Token Types: ${tokenTypeNames.join(', ')} <-`,\n        type: LexerDefinitionErrorType.DUPLICATE_PATTERNS_FOUND,\n        tokenTypes: setOfIdentical,\n      }\n    })\n    return errors\n  }\n  function findInvalidGroupType(tokenTypes) {\n    const invalidTypes = filter(tokenTypes, (clazz) => {\n      if (!has(clazz, 'GROUP')) {\n        return false\n      }\n      const group = clazz.GROUP\n      return group !== Lexer.SKIPPED && group !== Lexer.NA && !isString(group)\n    })\n    const errors = map(invalidTypes, (currType) => {\n      return {\n        message: 'Token Type: ->' + currType.name + \"<- static 'GROUP' can only be Lexer.SKIPPED/Lexer.NA/A String\",\n        type: LexerDefinitionErrorType.INVALID_GROUP_TYPE_FOUND,\n        tokenTypes: [currType],\n      }\n    })\n    return errors\n  }\n  function findModesThatDoNotExist(tokenTypes, validModes) {\n    const invalidModes = filter(tokenTypes, (clazz) => {\n      return clazz.PUSH_MODE !== undefined && !includes(validModes, clazz.PUSH_MODE)\n    })\n    const errors = map(invalidModes, (tokType) => {\n      const msg =\n        `Token Type: ->${tokType.name}<- static 'PUSH_MODE' value cannot refer to a Lexer Mode ->${tokType.PUSH_MODE}<-` +\n        `which does not exist`\n      return {\n        message: msg,\n        type: LexerDefinitionErrorType.PUSH_MODE_DOES_NOT_EXIST,\n        tokenTypes: [tokType],\n      }\n    })\n    return errors\n  }\n  function findUnreachablePatterns(tokenTypes) {\n    const errors = []\n    const canBeTested = reduce(\n      tokenTypes,\n      (result, tokType, idx) => {\n        const pattern = tokType.PATTERN\n        if (pattern === Lexer.NA) {\n          return result\n        }\n        // a more comprehensive validation for all forms of regExps would require\n        // deeper regExp analysis capabilities\n        if (isString(pattern)) {\n          result.push({ str: pattern, idx, tokenType: tokType })\n        } else if (isRegExp$1(pattern) && noMetaChar(pattern)) {\n          result.push({ str: pattern.source, idx, tokenType: tokType })\n        }\n        return result\n      },\n      [],\n    )\n    forEach(tokenTypes, (tokType, testIdx) => {\n      forEach(canBeTested, ({ str, idx, tokenType }) => {\n        if (testIdx < idx && testTokenType(str, tokType.PATTERN)) {\n          const msg =\n            `Token: ->${tokenType.name}<- can never be matched.\\n` +\n            `Because it appears AFTER the Token Type ->${tokType.name}<-` +\n            `in the lexer's definition.\\n` +\n            `See https://chevrotain.io/docs/guide/resolving_lexer_errors.html#UNREACHABLE`\n          errors.push({\n            message: msg,\n            type: LexerDefinitionErrorType.UNREACHABLE_PATTERN,\n            tokenTypes: [tokType, tokenType],\n          })\n        }\n      })\n    })\n    return errors\n  }\n  function testTokenType(str, pattern) {\n    /* istanbul ignore else */\n    if (isRegExp$1(pattern)) {\n      const regExpArray = pattern.exec(str)\n      return regExpArray !== null && regExpArray.index === 0\n    } else if (isFunction(pattern)) {\n      // maintain the API of custom patterns\n      return pattern(str, 0, [], {})\n    } else if (has(pattern, 'exec')) {\n      // maintain the API of custom patterns\n      return pattern.exec(str, 0, [], {})\n    } else if (typeof pattern === 'string') {\n      return pattern === str\n    } else {\n      throw Error('non exhaustive match')\n    }\n  }\n  function noMetaChar(regExp) {\n    //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\n    const metaChars = ['.', '\\\\', '[', ']', '|', '^', '$', '(', ')', '?', '*', '+', '{']\n    return find$1(metaChars, (char) => regExp.source.indexOf(char) !== -1) === undefined\n  }\n  function addStartOfInput(pattern) {\n    const flags = pattern.ignoreCase ? 'i' : ''\n    // always wrapping in a none capturing group preceded by '^' to make sure matching can only work on start of input.\n    // duplicate/redundant start of input markers have no meaning (/^^^^A/ === /^A/)\n    return new RegExp(`^(?:${pattern.source})`, flags)\n  }\n  function addStickyFlag(pattern) {\n    const flags = pattern.ignoreCase ? 'iy' : 'y'\n    // always wrapping in a none capturing group preceded by '^' to make sure matching can only work on start of input.\n    // duplicate/redundant start of input markers have no meaning (/^^^^A/ === /^A/)\n    return new RegExp(`${pattern.source}`, flags)\n  }\n  function performRuntimeChecks(lexerDefinition, trackLines, lineTerminatorCharacters) {\n    const errors = []\n    // some run time checks to help the end users.\n    if (!has(lexerDefinition, DEFAULT_MODE)) {\n      errors.push({\n        message:\n          'A MultiMode Lexer cannot be initialized without a <' + DEFAULT_MODE + '> property in its definition\\n',\n        type: LexerDefinitionErrorType.MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE,\n      })\n    }\n    if (!has(lexerDefinition, MODES)) {\n      errors.push({\n        message: 'A MultiMode Lexer cannot be initialized without a <' + MODES + '> property in its definition\\n',\n        type: LexerDefinitionErrorType.MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY,\n      })\n    }\n    if (\n      has(lexerDefinition, MODES) &&\n      has(lexerDefinition, DEFAULT_MODE) &&\n      !has(lexerDefinition.modes, lexerDefinition.defaultMode)\n    ) {\n      errors.push({\n        message:\n          `A MultiMode Lexer cannot be initialized with a ${DEFAULT_MODE}: <${lexerDefinition.defaultMode}>` +\n          `which does not exist\\n`,\n        type: LexerDefinitionErrorType.MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST,\n      })\n    }\n    if (has(lexerDefinition, MODES)) {\n      forEach(lexerDefinition.modes, (currModeValue, currModeName) => {\n        forEach(currModeValue, (currTokType, currIdx) => {\n          if (isUndefined(currTokType)) {\n            errors.push({\n              message:\n                `A Lexer cannot be initialized using an undefined Token Type. Mode:` +\n                `<${currModeName}> at index: <${currIdx}>\\n`,\n              type: LexerDefinitionErrorType.LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED,\n            })\n          } else if (has(currTokType, 'LONGER_ALT')) {\n            const longerAlt = isArray$1(currTokType.LONGER_ALT) ? currTokType.LONGER_ALT : [currTokType.LONGER_ALT]\n            forEach(longerAlt, (currLongerAlt) => {\n              if (!isUndefined(currLongerAlt) && !includes(currModeValue, currLongerAlt)) {\n                errors.push({\n                  message: `A MultiMode Lexer cannot be initialized with a longer_alt <${currLongerAlt.name}> on token <${currTokType.name}> outside of mode <${currModeName}>\\n`,\n                  type: LexerDefinitionErrorType.MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE,\n                })\n              }\n            })\n          }\n        })\n      })\n    }\n    return errors\n  }\n  function performWarningRuntimeChecks(lexerDefinition, trackLines, lineTerminatorCharacters) {\n    const warnings = []\n    let hasAnyLineBreak = false\n    const allTokenTypes = compact(flatten(values(lexerDefinition.modes)))\n    const concreteTokenTypes = reject(allTokenTypes, (currType) => currType[PATTERN] === Lexer.NA)\n    const terminatorCharCodes = getCharCodes(lineTerminatorCharacters)\n    if (trackLines) {\n      forEach(concreteTokenTypes, (tokType) => {\n        const currIssue = checkLineBreaksIssues(tokType, terminatorCharCodes)\n        if (currIssue !== false) {\n          const message = buildLineBreakIssueMessage(tokType, currIssue)\n          const warningDescriptor = {\n            message,\n            type: currIssue.issue,\n            tokenType: tokType,\n          }\n          warnings.push(warningDescriptor)\n        } else {\n          // we don't want to attempt to scan if the user explicitly specified the line_breaks option.\n          if (has(tokType, 'LINE_BREAKS')) {\n            if (tokType.LINE_BREAKS === true) {\n              hasAnyLineBreak = true\n            }\n          } else {\n            if (canMatchCharCode(terminatorCharCodes, tokType.PATTERN)) {\n              hasAnyLineBreak = true\n            }\n          }\n        }\n      })\n    }\n    if (trackLines && !hasAnyLineBreak) {\n      warnings.push({\n        message:\n          'Warning: No LINE_BREAKS Found.\\n' +\n          '\\tThis Lexer has been defined to track line and column information,\\n' +\n          '\\tBut none of the Token Types can be identified as matching a line terminator.\\n' +\n          '\\tSee https://chevrotain.io/docs/guide/resolving_lexer_errors.html#LINE_BREAKS \\n' +\n          '\\tfor details.',\n        type: LexerDefinitionErrorType.NO_LINE_BREAKS_FLAGS,\n      })\n    }\n    return warnings\n  }\n  function cloneEmptyGroups(emptyGroups) {\n    const clonedResult = {}\n    const groupKeys = keys(emptyGroups)\n    forEach(groupKeys, (currKey) => {\n      const currGroupValue = emptyGroups[currKey]\n      /* istanbul ignore else */\n      if (isArray$1(currGroupValue)) {\n        clonedResult[currKey] = []\n      } else {\n        throw Error('non exhaustive match')\n      }\n    })\n    return clonedResult\n  }\n  // TODO: refactor to avoid duplication\n  function isCustomPattern(tokenType) {\n    const pattern = tokenType.PATTERN\n    /* istanbul ignore else */\n    if (isRegExp$1(pattern)) {\n      return false\n    } else if (isFunction(pattern)) {\n      // CustomPatternMatcherFunc - custom patterns do not require any transformations, only wrapping in a RegExp Like object\n      return true\n    } else if (has(pattern, 'exec')) {\n      // ICustomPattern\n      return true\n    } else if (isString(pattern)) {\n      return false\n    } else {\n      throw Error('non exhaustive match')\n    }\n  }\n  function isShortPattern(pattern) {\n    if (isString(pattern) && pattern.length === 1) {\n      return pattern.charCodeAt(0)\n    } else {\n      return false\n    }\n  }\n  /**\n   * Faster than using a RegExp for default newline detection during lexing.\n   */\n  const LineTerminatorOptimizedTester = {\n    // implements /\\n|\\r\\n?/g.test\n    test: function (text) {\n      const len = text.length\n      for (let i = this.lastIndex; i < len; i++) {\n        const c = text.charCodeAt(i)\n        if (c === 10) {\n          this.lastIndex = i + 1\n          return true\n        } else if (c === 13) {\n          if (text.charCodeAt(i + 1) === 10) {\n            this.lastIndex = i + 2\n          } else {\n            this.lastIndex = i + 1\n          }\n          return true\n        }\n      }\n      return false\n    },\n    lastIndex: 0,\n  }\n  function checkLineBreaksIssues(tokType, lineTerminatorCharCodes) {\n    if (has(tokType, 'LINE_BREAKS')) {\n      // if the user explicitly declared the line_breaks option we will respect their choice\n      // and assume it is correct.\n      return false\n    } else {\n      /* istanbul ignore else */\n      if (isRegExp$1(tokType.PATTERN)) {\n        try {\n          // TODO: why is the casting suddenly needed?\n          canMatchCharCode(lineTerminatorCharCodes, tokType.PATTERN)\n        } catch (e) {\n          /* istanbul ignore next - to test this we would have to mock <canMatchCharCode> to throw an error */\n          return {\n            issue: LexerDefinitionErrorType.IDENTIFY_TERMINATOR,\n            errMsg: e.message,\n          }\n        }\n        return false\n      } else if (isString(tokType.PATTERN)) {\n        // string literal patterns can always be analyzed to detect line terminator usage\n        return false\n      } else if (isCustomPattern(tokType)) {\n        // custom token types\n        return { issue: LexerDefinitionErrorType.CUSTOM_LINE_BREAK }\n      } else {\n        throw Error('non exhaustive match')\n      }\n    }\n  }\n  function buildLineBreakIssueMessage(tokType, details) {\n    /* istanbul ignore else */\n    if (details.issue === LexerDefinitionErrorType.IDENTIFY_TERMINATOR) {\n      return (\n        'Warning: unable to identify line terminator usage in pattern.\\n' +\n        `\\tThe problem is in the <${tokType.name}> Token Type\\n` +\n        `\\t Root cause: ${details.errMsg}.\\n` +\n        '\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#IDENTIFY_TERMINATOR'\n      )\n    } else if (details.issue === LexerDefinitionErrorType.CUSTOM_LINE_BREAK) {\n      return (\n        'Warning: A Custom Token Pattern should specify the <line_breaks> option.\\n' +\n        `\\tThe problem is in the <${tokType.name}> Token Type\\n` +\n        '\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#CUSTOM_LINE_BREAK'\n      )\n    } else {\n      throw Error('non exhaustive match')\n    }\n  }\n  function getCharCodes(charsOrCodes) {\n    const charCodes = map(charsOrCodes, (numOrString) => {\n      if (isString(numOrString)) {\n        return numOrString.charCodeAt(0)\n      } else {\n        return numOrString\n      }\n    })\n    return charCodes\n  }\n  function addToMapOfArrays(map, key, value) {\n    if (map[key] === undefined) {\n      map[key] = [value]\n    } else {\n      map[key].push(value)\n    }\n  }\n  const minOptimizationVal = 256\n  /**\n   * We are mapping charCode above ASCI (256) into buckets each in the size of 256.\n   * This is because ASCI are the most common start chars so each one of those will get its own\n   * possible token configs vector.\n   *\n   * Tokens starting with charCodes \"above\" ASCI are uncommon, so we can \"afford\"\n   * to place these into buckets of possible token configs, What we gain from\n   * this is avoiding the case of creating an optimization 'charCodeToPatternIdxToConfig'\n   * which would contain 10,000+ arrays of small size (e.g unicode Identifiers scenario).\n   * Our 'charCodeToPatternIdxToConfig' max size will now be:\n   * 256 + (2^16 / 2^8) - 1 === 511\n   *\n   * note the hack for fast division integer part extraction\n   * See: https://stackoverflow.com/a/4228528\n   */\n  let charCodeToOptimizedIdxMap = []\n  function charCodeToOptimizedIndex(charCode) {\n    return charCode < minOptimizationVal ? charCode : charCodeToOptimizedIdxMap[charCode]\n  }\n  /**\n   * This is a compromise between cold start / hot running performance\n   * Creating this array takes ~3ms on a modern machine,\n   * But if we perform the computation at runtime as needed the CSS Lexer benchmark\n   * performance degrades by ~10%\n   *\n   * TODO: Perhaps it should be lazy initialized only if a charCode > 255 is used.\n   */\n  function initCharCodeToOptimizedIndexMap() {\n    if (isEmpty(charCodeToOptimizedIdxMap)) {\n      charCodeToOptimizedIdxMap = new Array(65536)\n      for (let i = 0; i < 65536; i++) {\n        charCodeToOptimizedIdxMap[i] = i > 255 ? 255 + ~~(i / 255) : i\n      }\n    }\n  }\n\n  function tokenStructuredMatcher(tokInstance, tokConstructor) {\n    const instanceType = tokInstance.tokenTypeIdx\n    if (instanceType === tokConstructor.tokenTypeIdx) {\n      return true\n    } else {\n      return tokConstructor.isParent === true && tokConstructor.categoryMatchesMap[instanceType] === true\n    }\n  }\n  // Optimized tokenMatcher in case our grammar does not use token categories\n  // Being so tiny it is much more likely to be in-lined and this avoid the function call overhead\n  function tokenStructuredMatcherNoCategories(token, tokType) {\n    return token.tokenTypeIdx === tokType.tokenTypeIdx\n  }\n  let tokenShortNameIdx = 1\n  const tokenIdxToClass = {}\n  function augmentTokenTypes(tokenTypes) {\n    // collect the parent Token Types as well.\n    const tokenTypesAndParents = expandCategories(tokenTypes)\n    // add required tokenType and categoryMatches properties\n    assignTokenDefaultProps(tokenTypesAndParents)\n    // fill up the categoryMatches\n    assignCategoriesMapProp(tokenTypesAndParents)\n    assignCategoriesTokensProp(tokenTypesAndParents)\n    forEach(tokenTypesAndParents, (tokType) => {\n      tokType.isParent = tokType.categoryMatches.length > 0\n    })\n  }\n  function expandCategories(tokenTypes) {\n    let result = clone(tokenTypes)\n    let categories = tokenTypes\n    let searching = true\n    while (searching) {\n      categories = compact(flatten(map(categories, (currTokType) => currTokType.CATEGORIES)))\n      const newCategories = difference$1(categories, result)\n      result = result.concat(newCategories)\n      if (isEmpty(newCategories)) {\n        searching = false\n      } else {\n        categories = newCategories\n      }\n    }\n    return result\n  }\n  function assignTokenDefaultProps(tokenTypes) {\n    forEach(tokenTypes, (currTokType) => {\n      if (!hasShortKeyProperty(currTokType)) {\n        tokenIdxToClass[tokenShortNameIdx] = currTokType\n        currTokType.tokenTypeIdx = tokenShortNameIdx++\n      }\n      // CATEGORIES? : TokenType | TokenType[]\n      if (\n        hasCategoriesProperty(currTokType) &&\n        !isArray$1(currTokType.CATEGORIES)\n        // &&\n        // !isUndefined(currTokType.CATEGORIES.PATTERN)\n      ) {\n        currTokType.CATEGORIES = [currTokType.CATEGORIES]\n      }\n      if (!hasCategoriesProperty(currTokType)) {\n        currTokType.CATEGORIES = []\n      }\n      if (!hasExtendingTokensTypesProperty(currTokType)) {\n        currTokType.categoryMatches = []\n      }\n      if (!hasExtendingTokensTypesMapProperty(currTokType)) {\n        currTokType.categoryMatchesMap = {}\n      }\n    })\n  }\n  function assignCategoriesTokensProp(tokenTypes) {\n    forEach(tokenTypes, (currTokType) => {\n      // avoid duplications\n      currTokType.categoryMatches = []\n      forEach(currTokType.categoryMatchesMap, (val, key) => {\n        currTokType.categoryMatches.push(tokenIdxToClass[key].tokenTypeIdx)\n      })\n    })\n  }\n  function assignCategoriesMapProp(tokenTypes) {\n    forEach(tokenTypes, (currTokType) => {\n      singleAssignCategoriesToksMap([], currTokType)\n    })\n  }\n  function singleAssignCategoriesToksMap(path, nextNode) {\n    forEach(path, (pathNode) => {\n      nextNode.categoryMatchesMap[pathNode.tokenTypeIdx] = true\n    })\n    forEach(nextNode.CATEGORIES, (nextCategory) => {\n      const newPath = path.concat(nextNode)\n      // avoids infinite loops due to cyclic categories.\n      if (!includes(newPath, nextCategory)) {\n        singleAssignCategoriesToksMap(newPath, nextCategory)\n      }\n    })\n  }\n  function hasShortKeyProperty(tokType) {\n    return has(tokType, 'tokenTypeIdx')\n  }\n  function hasCategoriesProperty(tokType) {\n    return has(tokType, 'CATEGORIES')\n  }\n  function hasExtendingTokensTypesProperty(tokType) {\n    return has(tokType, 'categoryMatches')\n  }\n  function hasExtendingTokensTypesMapProperty(tokType) {\n    return has(tokType, 'categoryMatchesMap')\n  }\n  function isTokenType(tokType) {\n    return has(tokType, 'tokenTypeIdx')\n  }\n\n  const defaultLexerErrorProvider = {\n    buildUnableToPopLexerModeMessage(token) {\n      return `Unable to pop Lexer Mode after encountering Token ->${token.image}<- The Mode Stack is empty`\n    },\n    buildUnexpectedCharactersMessage(fullText, startOffset, length, line, column) {\n      return (\n        `unexpected character: ->${fullText.charAt(startOffset)}<- at offset: ${startOffset},` +\n        ` skipped ${length} characters.`\n      )\n    },\n  }\n\n  var LexerDefinitionErrorType\n  ;(function (LexerDefinitionErrorType) {\n    LexerDefinitionErrorType[(LexerDefinitionErrorType['MISSING_PATTERN'] = 0)] = 'MISSING_PATTERN'\n    LexerDefinitionErrorType[(LexerDefinitionErrorType['INVALID_PATTERN'] = 1)] = 'INVALID_PATTERN'\n    LexerDefinitionErrorType[(LexerDefinitionErrorType['EOI_ANCHOR_FOUND'] = 2)] = 'EOI_ANCHOR_FOUND'\n    LexerDefinitionErrorType[(LexerDefinitionErrorType['UNSUPPORTED_FLAGS_FOUND'] = 3)] = 'UNSUPPORTED_FLAGS_FOUND'\n    LexerDefinitionErrorType[(LexerDefinitionErrorType['DUPLICATE_PATTERNS_FOUND'] = 4)] = 'DUPLICATE_PATTERNS_FOUND'\n    LexerDefinitionErrorType[(LexerDefinitionErrorType['INVALID_GROUP_TYPE_FOUND'] = 5)] = 'INVALID_GROUP_TYPE_FOUND'\n    LexerDefinitionErrorType[(LexerDefinitionErrorType['PUSH_MODE_DOES_NOT_EXIST'] = 6)] = 'PUSH_MODE_DOES_NOT_EXIST'\n    LexerDefinitionErrorType[(LexerDefinitionErrorType['MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE'] = 7)] =\n      'MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE'\n    LexerDefinitionErrorType[(LexerDefinitionErrorType['MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY'] = 8)] =\n      'MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY'\n    LexerDefinitionErrorType[(LexerDefinitionErrorType['MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST'] = 9)] =\n      'MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST'\n    LexerDefinitionErrorType[(LexerDefinitionErrorType['LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED'] = 10)] =\n      'LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED'\n    LexerDefinitionErrorType[(LexerDefinitionErrorType['SOI_ANCHOR_FOUND'] = 11)] = 'SOI_ANCHOR_FOUND'\n    LexerDefinitionErrorType[(LexerDefinitionErrorType['EMPTY_MATCH_PATTERN'] = 12)] = 'EMPTY_MATCH_PATTERN'\n    LexerDefinitionErrorType[(LexerDefinitionErrorType['NO_LINE_BREAKS_FLAGS'] = 13)] = 'NO_LINE_BREAKS_FLAGS'\n    LexerDefinitionErrorType[(LexerDefinitionErrorType['UNREACHABLE_PATTERN'] = 14)] = 'UNREACHABLE_PATTERN'\n    LexerDefinitionErrorType[(LexerDefinitionErrorType['IDENTIFY_TERMINATOR'] = 15)] = 'IDENTIFY_TERMINATOR'\n    LexerDefinitionErrorType[(LexerDefinitionErrorType['CUSTOM_LINE_BREAK'] = 16)] = 'CUSTOM_LINE_BREAK'\n    LexerDefinitionErrorType[(LexerDefinitionErrorType['MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE'] = 17)] =\n      'MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE'\n  })(LexerDefinitionErrorType || (LexerDefinitionErrorType = {}))\n  const DEFAULT_LEXER_CONFIG = {\n    deferDefinitionErrorsHandling: false,\n    positionTracking: 'full',\n    lineTerminatorsPattern: /\\n|\\r\\n?/g,\n    lineTerminatorCharacters: ['\\n', '\\r'],\n    ensureOptimizations: false,\n    safeMode: false,\n    errorMessageProvider: defaultLexerErrorProvider,\n    traceInitPerf: false,\n    skipValidations: false,\n    recoveryEnabled: true,\n  }\n  Object.freeze(DEFAULT_LEXER_CONFIG)\n  class Lexer {\n    constructor(lexerDefinition, config = DEFAULT_LEXER_CONFIG) {\n      this.lexerDefinition = lexerDefinition\n      this.lexerDefinitionErrors = []\n      this.lexerDefinitionWarning = []\n      this.patternIdxToConfig = {}\n      this.charCodeToPatternIdxToConfig = {}\n      this.modes = []\n      this.emptyGroups = {}\n      this.trackStartLines = true\n      this.trackEndLines = true\n      this.hasCustom = false\n      this.canModeBeOptimized = {}\n      // Duplicated from the parser's perf trace trait to allow future extraction\n      // of the lexer to a separate package.\n      this.TRACE_INIT = (phaseDesc, phaseImpl) => {\n        // No need to optimize this using NOOP pattern because\n        // It is not called in a hot spot...\n        if (this.traceInitPerf === true) {\n          this.traceInitIndent++\n          const indent = new Array(this.traceInitIndent + 1).join('\\t')\n          if (this.traceInitIndent < this.traceInitMaxIdent) {\n            console.log(`${indent}--> <${phaseDesc}>`)\n          }\n          const { time, value } = timer(phaseImpl)\n          /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\n          const traceMethod = time > 10 ? console.warn : console.log\n          if (this.traceInitIndent < this.traceInitMaxIdent) {\n            traceMethod(`${indent}<-- <${phaseDesc}> time: ${time}ms`)\n          }\n          this.traceInitIndent--\n          return value\n        } else {\n          return phaseImpl()\n        }\n      }\n      if (typeof config === 'boolean') {\n        throw Error(\n          'The second argument to the Lexer constructor is now an ILexerConfig Object.\\n' +\n            'a boolean 2nd argument is no longer supported',\n        )\n      }\n      // todo: defaults func?\n      this.config = assign$1({}, DEFAULT_LEXER_CONFIG, config)\n      const traceInitVal = this.config.traceInitPerf\n      if (traceInitVal === true) {\n        this.traceInitMaxIdent = Infinity\n        this.traceInitPerf = true\n      } else if (typeof traceInitVal === 'number') {\n        this.traceInitMaxIdent = traceInitVal\n        this.traceInitPerf = true\n      }\n      this.traceInitIndent = -1\n      this.TRACE_INIT('Lexer Constructor', () => {\n        let actualDefinition\n        let hasOnlySingleMode = true\n        this.TRACE_INIT('Lexer Config handling', () => {\n          if (this.config.lineTerminatorsPattern === DEFAULT_LEXER_CONFIG.lineTerminatorsPattern) {\n            // optimized built-in implementation for the defaults definition of lineTerminators\n            this.config.lineTerminatorsPattern = LineTerminatorOptimizedTester\n          } else {\n            if (this.config.lineTerminatorCharacters === DEFAULT_LEXER_CONFIG.lineTerminatorCharacters) {\n              throw Error(\n                'Error: Missing <lineTerminatorCharacters> property on the Lexer config.\\n' +\n                  '\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#MISSING_LINE_TERM_CHARS',\n              )\n            }\n          }\n          if (config.safeMode && config.ensureOptimizations) {\n            throw Error('\"safeMode\" and \"ensureOptimizations\" flags are mutually exclusive.')\n          }\n          this.trackStartLines = /full|onlyStart/i.test(this.config.positionTracking)\n          this.trackEndLines = /full/i.test(this.config.positionTracking)\n          // Convert SingleModeLexerDefinition into a IMultiModeLexerDefinition.\n          if (isArray$1(lexerDefinition)) {\n            actualDefinition = {\n              modes: { defaultMode: clone(lexerDefinition) },\n              defaultMode: DEFAULT_MODE,\n            }\n          } else {\n            // no conversion needed, input should already be a IMultiModeLexerDefinition\n            hasOnlySingleMode = false\n            actualDefinition = clone(lexerDefinition)\n          }\n        })\n        if (this.config.skipValidations === false) {\n          this.TRACE_INIT('performRuntimeChecks', () => {\n            this.lexerDefinitionErrors = this.lexerDefinitionErrors.concat(\n              performRuntimeChecks(actualDefinition, this.trackStartLines, this.config.lineTerminatorCharacters),\n            )\n          })\n          this.TRACE_INIT('performWarningRuntimeChecks', () => {\n            this.lexerDefinitionWarning = this.lexerDefinitionWarning.concat(\n              performWarningRuntimeChecks(actualDefinition, this.trackStartLines, this.config.lineTerminatorCharacters),\n            )\n          })\n        }\n        // for extra robustness to avoid throwing an none informative error message\n        actualDefinition.modes = actualDefinition.modes ? actualDefinition.modes : {}\n        // an error of undefined TokenTypes will be detected in \"performRuntimeChecks\" above.\n        // this transformation is to increase robustness in the case of partially invalid lexer definition.\n        forEach(actualDefinition.modes, (currModeValue, currModeName) => {\n          actualDefinition.modes[currModeName] = reject(currModeValue, (currTokType) => isUndefined(currTokType))\n        })\n        const allModeNames = keys(actualDefinition.modes)\n        forEach(actualDefinition.modes, (currModDef, currModName) => {\n          this.TRACE_INIT(`Mode: <${currModName}> processing`, () => {\n            this.modes.push(currModName)\n            if (this.config.skipValidations === false) {\n              this.TRACE_INIT(`validatePatterns`, () => {\n                this.lexerDefinitionErrors = this.lexerDefinitionErrors.concat(\n                  validatePatterns(currModDef, allModeNames),\n                )\n              })\n            }\n            // If definition errors were encountered, the analysis phase may fail unexpectedly/\n            // Considering a lexer with definition errors may never be used, there is no point\n            // to performing the analysis anyhow...\n            if (isEmpty(this.lexerDefinitionErrors)) {\n              augmentTokenTypes(currModDef)\n              let currAnalyzeResult\n              this.TRACE_INIT(`analyzeTokenTypes`, () => {\n                currAnalyzeResult = analyzeTokenTypes(currModDef, {\n                  lineTerminatorCharacters: this.config.lineTerminatorCharacters,\n                  positionTracking: config.positionTracking,\n                  ensureOptimizations: config.ensureOptimizations,\n                  safeMode: config.safeMode,\n                  tracer: this.TRACE_INIT,\n                })\n              })\n              this.patternIdxToConfig[currModName] = currAnalyzeResult.patternIdxToConfig\n              this.charCodeToPatternIdxToConfig[currModName] = currAnalyzeResult.charCodeToPatternIdxToConfig\n              this.emptyGroups = assign$1({}, this.emptyGroups, currAnalyzeResult.emptyGroups)\n              this.hasCustom = currAnalyzeResult.hasCustom || this.hasCustom\n              this.canModeBeOptimized[currModName] = currAnalyzeResult.canBeOptimized\n            }\n          })\n        })\n        this.defaultMode = actualDefinition.defaultMode\n        if (!isEmpty(this.lexerDefinitionErrors) && !this.config.deferDefinitionErrorsHandling) {\n          const allErrMessages = map(this.lexerDefinitionErrors, (error) => {\n            return error.message\n          })\n          const allErrMessagesString = allErrMessages.join('-----------------------\\n')\n          throw new Error('Errors detected in definition of Lexer:\\n' + allErrMessagesString)\n        }\n        // Only print warning if there are no errors, This will avoid pl\n        forEach(this.lexerDefinitionWarning, (warningDescriptor) => {\n          PRINT_WARNING(warningDescriptor.message)\n        })\n        this.TRACE_INIT('Choosing sub-methods implementations', () => {\n          // Choose the relevant internal implementations for this specific parser.\n          // These implementations should be in-lined by the JavaScript engine\n          // to provide optimal performance in each scenario.\n          if (SUPPORT_STICKY) {\n            this.chopInput = identity\n            this.match = this.matchWithTest\n          } else {\n            this.updateLastIndex = noop\n            this.match = this.matchWithExec\n          }\n          if (hasOnlySingleMode) {\n            this.handleModes = noop\n          }\n          if (this.trackStartLines === false) {\n            this.computeNewColumn = identity\n          }\n          if (this.trackEndLines === false) {\n            this.updateTokenEndLineColumnLocation = noop\n          }\n          if (/full/i.test(this.config.positionTracking)) {\n            this.createTokenInstance = this.createFullToken\n          } else if (/onlyStart/i.test(this.config.positionTracking)) {\n            this.createTokenInstance = this.createStartOnlyToken\n          } else if (/onlyOffset/i.test(this.config.positionTracking)) {\n            this.createTokenInstance = this.createOffsetOnlyToken\n          } else {\n            throw Error(`Invalid <positionTracking> config option: \"${this.config.positionTracking}\"`)\n          }\n          if (this.hasCustom) {\n            this.addToken = this.addTokenUsingPush\n            this.handlePayload = this.handlePayloadWithCustom\n          } else {\n            this.addToken = this.addTokenUsingMemberAccess\n            this.handlePayload = this.handlePayloadNoCustom\n          }\n        })\n        this.TRACE_INIT('Failed Optimization Warnings', () => {\n          const unOptimizedModes = reduce(\n            this.canModeBeOptimized,\n            (cannotBeOptimized, canBeOptimized, modeName) => {\n              if (canBeOptimized === false) {\n                cannotBeOptimized.push(modeName)\n              }\n              return cannotBeOptimized\n            },\n            [],\n          )\n          if (config.ensureOptimizations && !isEmpty(unOptimizedModes)) {\n            throw Error(\n              `Lexer Modes: < ${unOptimizedModes.join(', ')} > cannot be optimized.\\n` +\n                '\\t Disable the \"ensureOptimizations\" lexer config flag to silently ignore this and run the lexer in an un-optimized mode.\\n' +\n                '\\t Or inspect the console log for details on how to resolve these issues.',\n            )\n          }\n        })\n        this.TRACE_INIT('clearRegExpParserCache', () => {\n          clearRegExpParserCache()\n        })\n        this.TRACE_INIT('toFastProperties', () => {\n          toFastProperties(this)\n        })\n      })\n    }\n    tokenize(text, initialMode = this.defaultMode) {\n      if (!isEmpty(this.lexerDefinitionErrors)) {\n        const allErrMessages = map(this.lexerDefinitionErrors, (error) => {\n          return error.message\n        })\n        const allErrMessagesString = allErrMessages.join('-----------------------\\n')\n        throw new Error('Unable to Tokenize because Errors detected in definition of Lexer:\\n' + allErrMessagesString)\n      }\n      return this.tokenizeInternal(text, initialMode)\n    }\n    // There is quite a bit of duplication between this and \"tokenizeInternalLazy\"\n    // This is intentional due to performance considerations.\n    // this method also used quite a bit of `!` none null assertions because it is too optimized\n    // for `tsc` to always understand it is \"safe\"\n    tokenizeInternal(text, initialMode) {\n      let i,\n        j,\n        k,\n        matchAltImage,\n        longerAlt,\n        matchedImage,\n        payload,\n        altPayload,\n        imageLength,\n        group,\n        tokType,\n        newToken,\n        errLength,\n        msg,\n        match\n      const orgText = text\n      const orgLength = orgText.length\n      let offset = 0\n      let matchedTokensIndex = 0\n      // initializing the tokensArray to the \"guessed\" size.\n      // guessing too little will still reduce the number of array re-sizes on pushes.\n      // guessing too large (Tested by guessing x4 too large) may cost a bit more of memory\n      // but would still have a faster runtime by avoiding (All but one) array resizing.\n      const guessedNumberOfTokens = this.hasCustom\n        ? 0 // will break custom token pattern APIs the matchedTokens array will contain undefined elements.\n        : Math.floor(text.length / 10)\n      const matchedTokens = new Array(guessedNumberOfTokens)\n      const errors = []\n      let line = this.trackStartLines ? 1 : undefined\n      let column = this.trackStartLines ? 1 : undefined\n      const groups = cloneEmptyGroups(this.emptyGroups)\n      const trackLines = this.trackStartLines\n      const lineTerminatorPattern = this.config.lineTerminatorsPattern\n      let currModePatternsLength = 0\n      let patternIdxToConfig = []\n      let currCharCodeToPatternIdxToConfig = []\n      const modeStack = []\n      const emptyArray = []\n      Object.freeze(emptyArray)\n      let getPossiblePatterns\n      function getPossiblePatternsSlow() {\n        return patternIdxToConfig\n      }\n      function getPossiblePatternsOptimized(charCode) {\n        const optimizedCharIdx = charCodeToOptimizedIndex(charCode)\n        const possiblePatterns = currCharCodeToPatternIdxToConfig[optimizedCharIdx]\n        if (possiblePatterns === undefined) {\n          return emptyArray\n        } else {\n          return possiblePatterns\n        }\n      }\n      const pop_mode = (popToken) => {\n        // TODO: perhaps avoid this error in the edge case there is no more input?\n        if (\n          modeStack.length === 1 &&\n          // if we have both a POP_MODE and a PUSH_MODE this is in-fact a \"transition\"\n          // So no error should occur.\n          popToken.tokenType.PUSH_MODE === undefined\n        ) {\n          // if we try to pop the last mode there lexer will no longer have ANY mode.\n          // thus the pop is ignored, an error will be created and the lexer will continue parsing in the previous mode.\n          const msg = this.config.errorMessageProvider.buildUnableToPopLexerModeMessage(popToken)\n          errors.push({\n            offset: popToken.startOffset,\n            line: popToken.startLine,\n            column: popToken.startColumn,\n            length: popToken.image.length,\n            message: msg,\n          })\n        } else {\n          modeStack.pop()\n          const newMode = last(modeStack)\n          patternIdxToConfig = this.patternIdxToConfig[newMode]\n          currCharCodeToPatternIdxToConfig = this.charCodeToPatternIdxToConfig[newMode]\n          currModePatternsLength = patternIdxToConfig.length\n          const modeCanBeOptimized = this.canModeBeOptimized[newMode] && this.config.safeMode === false\n          if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {\n            getPossiblePatterns = getPossiblePatternsOptimized\n          } else {\n            getPossiblePatterns = getPossiblePatternsSlow\n          }\n        }\n      }\n      function push_mode(newMode) {\n        modeStack.push(newMode)\n        currCharCodeToPatternIdxToConfig = this.charCodeToPatternIdxToConfig[newMode]\n        patternIdxToConfig = this.patternIdxToConfig[newMode]\n        currModePatternsLength = patternIdxToConfig.length\n        currModePatternsLength = patternIdxToConfig.length\n        const modeCanBeOptimized = this.canModeBeOptimized[newMode] && this.config.safeMode === false\n        if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {\n          getPossiblePatterns = getPossiblePatternsOptimized\n        } else {\n          getPossiblePatterns = getPossiblePatternsSlow\n        }\n      }\n      // this pattern seems to avoid a V8 de-optimization, although that de-optimization does not\n      // seem to matter performance wise.\n      push_mode.call(this, initialMode)\n      let currConfig\n      const recoveryEnabled = this.config.recoveryEnabled\n      while (offset < orgLength) {\n        matchedImage = null\n        const nextCharCode = orgText.charCodeAt(offset)\n        const chosenPatternIdxToConfig = getPossiblePatterns(nextCharCode)\n        const chosenPatternsLength = chosenPatternIdxToConfig.length\n        for (i = 0; i < chosenPatternsLength; i++) {\n          currConfig = chosenPatternIdxToConfig[i]\n          const currPattern = currConfig.pattern\n          payload = null\n          // manually in-lined because > 600 chars won't be in-lined in V8\n          const singleCharCode = currConfig.short\n          if (singleCharCode !== false) {\n            if (nextCharCode === singleCharCode) {\n              // single character string\n              matchedImage = currPattern\n            }\n          } else if (currConfig.isCustom === true) {\n            match = currPattern.exec(orgText, offset, matchedTokens, groups)\n            if (match !== null) {\n              matchedImage = match[0]\n              if (match.payload !== undefined) {\n                payload = match.payload\n              }\n            } else {\n              matchedImage = null\n            }\n          } else {\n            this.updateLastIndex(currPattern, offset)\n            matchedImage = this.match(currPattern, text, offset)\n          }\n          if (matchedImage !== null) {\n            // even though this pattern matched we must try a another longer alternative.\n            // this can be used to prioritize keywords over identifiers\n            longerAlt = currConfig.longerAlt\n            if (longerAlt !== undefined) {\n              // TODO: micro optimize, avoid extra prop access\n              // by saving/linking longerAlt on the original config?\n              const longerAltLength = longerAlt.length\n              for (k = 0; k < longerAltLength; k++) {\n                const longerAltConfig = patternIdxToConfig[longerAlt[k]]\n                const longerAltPattern = longerAltConfig.pattern\n                altPayload = null\n                // single Char can never be a longer alt so no need to test it.\n                // manually in-lined because > 600 chars won't be in-lined in V8\n                if (longerAltConfig.isCustom === true) {\n                  match = longerAltPattern.exec(orgText, offset, matchedTokens, groups)\n                  if (match !== null) {\n                    matchAltImage = match[0]\n                    if (match.payload !== undefined) {\n                      altPayload = match.payload\n                    }\n                  } else {\n                    matchAltImage = null\n                  }\n                } else {\n                  this.updateLastIndex(longerAltPattern, offset)\n                  matchAltImage = this.match(longerAltPattern, text, offset)\n                }\n                if (matchAltImage && matchAltImage.length > matchedImage.length) {\n                  matchedImage = matchAltImage\n                  payload = altPayload\n                  currConfig = longerAltConfig\n                  // Exit the loop early after matching one of the longer alternatives\n                  // The first matched alternative takes precedence\n                  break\n                }\n              }\n            }\n            break\n          }\n        }\n        // successful match\n        if (matchedImage !== null) {\n          imageLength = matchedImage.length\n          group = currConfig.group\n          if (group !== undefined) {\n            tokType = currConfig.tokenTypeIdx\n            // TODO: \"offset + imageLength\" and the new column may be computed twice in case of \"full\" location information inside\n            // createFullToken method\n            newToken = this.createTokenInstance(\n              matchedImage,\n              offset,\n              tokType,\n              currConfig.tokenType,\n              line,\n              column,\n              imageLength,\n            )\n            this.handlePayload(newToken, payload)\n            // TODO: optimize NOOP in case there are no special groups?\n            if (group === false) {\n              matchedTokensIndex = this.addToken(matchedTokens, matchedTokensIndex, newToken)\n            } else {\n              groups[group].push(newToken)\n            }\n          }\n          text = this.chopInput(text, imageLength)\n          offset = offset + imageLength\n          // TODO: with newlines the column may be assigned twice\n          column = this.computeNewColumn(column, imageLength)\n          if (trackLines === true && currConfig.canLineTerminator === true) {\n            let numOfLTsInMatch = 0\n            let foundTerminator\n            let lastLTEndOffset\n            lineTerminatorPattern.lastIndex = 0\n            do {\n              foundTerminator = lineTerminatorPattern.test(matchedImage)\n              if (foundTerminator === true) {\n                lastLTEndOffset = lineTerminatorPattern.lastIndex - 1\n                numOfLTsInMatch++\n              }\n            } while (foundTerminator === true)\n            if (numOfLTsInMatch !== 0) {\n              line = line + numOfLTsInMatch\n              column = imageLength - lastLTEndOffset\n              this.updateTokenEndLineColumnLocation(\n                newToken,\n                group,\n                lastLTEndOffset,\n                numOfLTsInMatch,\n                line,\n                column,\n                imageLength,\n              )\n            }\n          }\n          // will be NOOP if no modes present\n          this.handleModes(currConfig, pop_mode, push_mode, newToken)\n        } else {\n          // error recovery, drop characters until we identify a valid token's start point\n          const errorStartOffset = offset\n          const errorLine = line\n          const errorColumn = column\n          let foundResyncPoint = recoveryEnabled === false\n          while (foundResyncPoint === false && offset < orgLength) {\n            // Identity Func (when sticky flag is enabled)\n            text = this.chopInput(text, 1)\n            offset++\n            for (j = 0; j < currModePatternsLength; j++) {\n              const currConfig = patternIdxToConfig[j]\n              const currPattern = currConfig.pattern\n              // manually in-lined because > 600 chars won't be in-lined in V8\n              const singleCharCode = currConfig.short\n              if (singleCharCode !== false) {\n                if (orgText.charCodeAt(offset) === singleCharCode) {\n                  // single character string\n                  foundResyncPoint = true\n                }\n              } else if (currConfig.isCustom === true) {\n                foundResyncPoint = currPattern.exec(orgText, offset, matchedTokens, groups) !== null\n              } else {\n                this.updateLastIndex(currPattern, offset)\n                foundResyncPoint = currPattern.exec(text) !== null\n              }\n              if (foundResyncPoint === true) {\n                break\n              }\n            }\n          }\n          errLength = offset - errorStartOffset\n          column = this.computeNewColumn(column, errLength)\n          // at this point we either re-synced or reached the end of the input text\n          msg = this.config.errorMessageProvider.buildUnexpectedCharactersMessage(\n            orgText,\n            errorStartOffset,\n            errLength,\n            errorLine,\n            errorColumn,\n          )\n          errors.push({\n            offset: errorStartOffset,\n            line: errorLine,\n            column: errorColumn,\n            length: errLength,\n            message: msg,\n          })\n          if (recoveryEnabled === false) {\n            break\n          }\n        }\n      }\n      // if we do have custom patterns which push directly into the\n      // TODO: custom tokens should not push directly??\n      if (!this.hasCustom) {\n        // if we guessed a too large size for the tokens array this will shrink it to the right size.\n        matchedTokens.length = matchedTokensIndex\n      }\n      return {\n        tokens: matchedTokens,\n        groups: groups,\n        errors: errors,\n      }\n    }\n    handleModes(config, pop_mode, push_mode, newToken) {\n      if (config.pop === true) {\n        // need to save the PUSH_MODE property as if the mode is popped\n        // patternIdxToPopMode is updated to reflect the new mode after popping the stack\n        const pushMode = config.push\n        pop_mode(newToken)\n        if (pushMode !== undefined) {\n          push_mode.call(this, pushMode)\n        }\n      } else if (config.push !== undefined) {\n        push_mode.call(this, config.push)\n      }\n    }\n    chopInput(text, length) {\n      return text.substring(length)\n    }\n    updateLastIndex(regExp, newLastIndex) {\n      regExp.lastIndex = newLastIndex\n    }\n    // TODO: decrease this under 600 characters? inspect stripping comments option in TSC compiler\n    updateTokenEndLineColumnLocation(newToken, group, lastLTIdx, numOfLTsInMatch, line, column, imageLength) {\n      let lastCharIsLT, fixForEndingInLT\n      if (group !== undefined) {\n        // a none skipped multi line Token, need to update endLine/endColumn\n        lastCharIsLT = lastLTIdx === imageLength - 1\n        fixForEndingInLT = lastCharIsLT ? -1 : 0\n        if (!(numOfLTsInMatch === 1 && lastCharIsLT === true)) {\n          // if a token ends in a LT that last LT only affects the line numbering of following Tokens\n          newToken.endLine = line + fixForEndingInLT\n          // the last LT in a token does not affect the endColumn either as the [columnStart ... columnEnd)\n          // inclusive to exclusive range.\n          newToken.endColumn = column - 1 + -fixForEndingInLT\n        }\n        // else single LT in the last character of a token, no need to modify the endLine/EndColumn\n      }\n    }\n    computeNewColumn(oldColumn, imageLength) {\n      return oldColumn + imageLength\n    }\n    createOffsetOnlyToken(image, startOffset, tokenTypeIdx, tokenType) {\n      return {\n        image,\n        startOffset,\n        tokenTypeIdx,\n        tokenType,\n      }\n    }\n    createStartOnlyToken(image, startOffset, tokenTypeIdx, tokenType, startLine, startColumn) {\n      return {\n        image,\n        startOffset,\n        startLine,\n        startColumn,\n        tokenTypeIdx,\n        tokenType,\n      }\n    }\n    createFullToken(image, startOffset, tokenTypeIdx, tokenType, startLine, startColumn, imageLength) {\n      return {\n        image,\n        startOffset,\n        endOffset: startOffset + imageLength - 1,\n        startLine,\n        endLine: startLine,\n        startColumn,\n        endColumn: startColumn + imageLength - 1,\n        tokenTypeIdx,\n        tokenType,\n      }\n    }\n    addTokenUsingPush(tokenVector, index, tokenToAdd) {\n      tokenVector.push(tokenToAdd)\n      return index\n    }\n    addTokenUsingMemberAccess(tokenVector, index, tokenToAdd) {\n      tokenVector[index] = tokenToAdd\n      index++\n      return index\n    }\n    handlePayloadNoCustom(token, payload) {}\n    handlePayloadWithCustom(token, payload) {\n      if (payload !== null) {\n        token.payload = payload\n      }\n    }\n    matchWithTest(pattern, text, offset) {\n      const found = pattern.test(text)\n      if (found === true) {\n        return text.substring(offset, pattern.lastIndex)\n      }\n      return null\n    }\n    matchWithExec(pattern, text) {\n      const regExpArray = pattern.exec(text)\n      return regExpArray !== null ? regExpArray[0] : null\n    }\n  }\n  Lexer.SKIPPED =\n    'This marks a skipped Token pattern, this means each token identified by it will' +\n    'be consumed and then thrown into oblivion, this can be used to for example to completely ignore whitespace.'\n  Lexer.NA = /NOT_APPLICABLE/\n\n  function tokenLabel(tokType) {\n    if (hasTokenLabel(tokType)) {\n      return tokType.LABEL\n    } else {\n      return tokType.name\n    }\n  }\n  function hasTokenLabel(obj) {\n    return isString(obj.LABEL) && obj.LABEL !== ''\n  }\n  const PARENT = 'parent'\n  const CATEGORIES = 'categories'\n  const LABEL = 'label'\n  const GROUP = 'group'\n  const PUSH_MODE = 'push_mode'\n  const POP_MODE = 'pop_mode'\n  const LONGER_ALT = 'longer_alt'\n  const LINE_BREAKS = 'line_breaks'\n  const START_CHARS_HINT = 'start_chars_hint'\n  function createToken(config) {\n    return createTokenInternal(config)\n  }\n  function createTokenInternal(config) {\n    const pattern = config.pattern\n    const tokenType = {}\n    tokenType.name = config.name\n    if (!isUndefined(pattern)) {\n      tokenType.PATTERN = pattern\n    }\n    if (has(config, PARENT)) {\n      throw (\n        'The parent property is no longer supported.\\n' +\n        'See: https://github.com/chevrotain/chevrotain/issues/564#issuecomment-349062346 for details.'\n      )\n    }\n    if (has(config, CATEGORIES)) {\n      // casting to ANY as this will be fixed inside `augmentTokenTypes``\n      tokenType.CATEGORIES = config[CATEGORIES]\n    }\n    augmentTokenTypes([tokenType])\n    if (has(config, LABEL)) {\n      tokenType.LABEL = config[LABEL]\n    }\n    if (has(config, GROUP)) {\n      tokenType.GROUP = config[GROUP]\n    }\n    if (has(config, POP_MODE)) {\n      tokenType.POP_MODE = config[POP_MODE]\n    }\n    if (has(config, PUSH_MODE)) {\n      tokenType.PUSH_MODE = config[PUSH_MODE]\n    }\n    if (has(config, LONGER_ALT)) {\n      tokenType.LONGER_ALT = config[LONGER_ALT]\n    }\n    if (has(config, LINE_BREAKS)) {\n      tokenType.LINE_BREAKS = config[LINE_BREAKS]\n    }\n    if (has(config, START_CHARS_HINT)) {\n      tokenType.START_CHARS_HINT = config[START_CHARS_HINT]\n    }\n    return tokenType\n  }\n  const EOF = createToken({ name: 'EOF', pattern: Lexer.NA })\n  augmentTokenTypes([EOF])\n  function createTokenInstance(tokType, image, startOffset, endOffset, startLine, endLine, startColumn, endColumn) {\n    return {\n      image,\n      startOffset,\n      endOffset,\n      startLine,\n      endLine,\n      startColumn,\n      endColumn,\n      tokenTypeIdx: tokType.tokenTypeIdx,\n      tokenType: tokType,\n    }\n  }\n  function tokenMatcher(token, tokType) {\n    return tokenStructuredMatcher(token, tokType)\n  }\n\n  const defaultParserErrorProvider = {\n    buildMismatchTokenMessage({ expected, actual, previous, ruleName }) {\n      const hasLabel = hasTokenLabel(expected)\n      const expectedMsg = hasLabel ? `--> ${tokenLabel(expected)} <--` : `token of type --> ${expected.name} <--`\n      const msg = `Expecting ${expectedMsg} but found --> '${actual.image}' <--`\n      return msg\n    },\n    buildNotAllInputParsedMessage({ firstRedundant, ruleName }) {\n      return 'Redundant input, expecting EOF but found: ' + firstRedundant.image\n    },\n    buildNoViableAltMessage({ expectedPathsPerAlt, actual, previous, customUserDescription, ruleName }) {\n      const errPrefix = 'Expecting: '\n      // TODO: issue: No Viable Alternative Error may have incomplete details. #502\n      const actualText = head(actual).image\n      const errSuffix = \"\\nbut found: '\" + actualText + \"'\"\n      if (customUserDescription) {\n        return errPrefix + customUserDescription + errSuffix\n      } else {\n        const allLookAheadPaths = reduce(expectedPathsPerAlt, (result, currAltPaths) => result.concat(currAltPaths), [])\n        const nextValidTokenSequences = map(\n          allLookAheadPaths,\n          (currPath) => `[${map(currPath, (currTokenType) => tokenLabel(currTokenType)).join(', ')}]`,\n        )\n        const nextValidSequenceItems = map(nextValidTokenSequences, (itemMsg, idx) => `  ${idx + 1}. ${itemMsg}`)\n        const calculatedDescription = `one of these possible Token sequences:\\n${nextValidSequenceItems.join('\\n')}`\n        return errPrefix + calculatedDescription + errSuffix\n      }\n    },\n    buildEarlyExitMessage({ expectedIterationPaths, actual, customUserDescription, ruleName }) {\n      const errPrefix = 'Expecting: '\n      // TODO: issue: No Viable Alternative Error may have incomplete details. #502\n      const actualText = head(actual).image\n      const errSuffix = \"\\nbut found: '\" + actualText + \"'\"\n      if (customUserDescription) {\n        return errPrefix + customUserDescription + errSuffix\n      } else {\n        const nextValidTokenSequences = map(\n          expectedIterationPaths,\n          (currPath) => `[${map(currPath, (currTokenType) => tokenLabel(currTokenType)).join(',')}]`,\n        )\n        const calculatedDescription =\n          `expecting at least one iteration which starts with one of these possible Token sequences::\\n  ` +\n          `<${nextValidTokenSequences.join(' ,')}>`\n        return errPrefix + calculatedDescription + errSuffix\n      }\n    },\n  }\n  Object.freeze(defaultParserErrorProvider)\n  const defaultGrammarResolverErrorProvider = {\n    buildRuleNotFoundError(topLevelRule, undefinedRule) {\n      const msg =\n        'Invalid grammar, reference to a rule which is not defined: ->' +\n        undefinedRule.nonTerminalName +\n        '<-\\n' +\n        'inside top level rule: ->' +\n        topLevelRule.name +\n        '<-'\n      return msg\n    },\n  }\n  const defaultGrammarValidatorErrorProvider = {\n    buildDuplicateFoundError(topLevelRule, duplicateProds) {\n      function getExtraProductionArgument(prod) {\n        if (prod instanceof Terminal) {\n          return prod.terminalType.name\n        } else if (prod instanceof NonTerminal) {\n          return prod.nonTerminalName\n        } else {\n          return ''\n        }\n      }\n      const topLevelName = topLevelRule.name\n      const duplicateProd = head(duplicateProds)\n      const index = duplicateProd.idx\n      const dslName = getProductionDslName(duplicateProd)\n      const extraArgument = getExtraProductionArgument(duplicateProd)\n      const hasExplicitIndex = index > 0\n      let msg = `->${dslName}${hasExplicitIndex ? index : ''}<- ${\n        extraArgument ? `with argument: ->${extraArgument}<-` : ''\n      }\n                  appears more than once (${\n                    duplicateProds.length\n                  } times) in the top level rule: ->${topLevelName}<-.                  \n                  For further details see: https://chevrotain.io/docs/FAQ.html#NUMERICAL_SUFFIXES \n                  `\n      // white space trimming time! better to trim afterwards as it allows to use WELL formatted multi line template strings...\n      msg = msg.replace(/[ \\t]+/g, ' ')\n      msg = msg.replace(/\\s\\s+/g, '\\n')\n      return msg\n    },\n    buildNamespaceConflictError(rule) {\n      const errMsg =\n        `Namespace conflict found in grammar.\\n` +\n        `The grammar has both a Terminal(Token) and a Non-Terminal(Rule) named: <${rule.name}>.\\n` +\n        `To resolve this make sure each Terminal and Non-Terminal names are unique\\n` +\n        `This is easy to accomplish by using the convention that Terminal names start with an uppercase letter\\n` +\n        `and Non-Terminal names start with a lower case letter.`\n      return errMsg\n    },\n    buildAlternationPrefixAmbiguityError(options) {\n      const pathMsg = map(options.prefixPath, (currTok) => tokenLabel(currTok)).join(', ')\n      const occurrence = options.alternation.idx === 0 ? '' : options.alternation.idx\n      const errMsg =\n        `Ambiguous alternatives: <${options.ambiguityIndices.join(' ,')}> due to common lookahead prefix\\n` +\n        `in <OR${occurrence}> inside <${options.topLevelRule.name}> Rule,\\n` +\n        `<${pathMsg}> may appears as a prefix path in all these alternatives.\\n` +\n        `See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#COMMON_PREFIX\\n` +\n        `For Further details.`\n      return errMsg\n    },\n    buildAlternationAmbiguityError(options) {\n      const pathMsg = map(options.prefixPath, (currtok) => tokenLabel(currtok)).join(', ')\n      const occurrence = options.alternation.idx === 0 ? '' : options.alternation.idx\n      let currMessage =\n        `Ambiguous Alternatives Detected: <${options.ambiguityIndices.join(' ,')}> in <OR${occurrence}>` +\n        ` inside <${options.topLevelRule.name}> Rule,\\n` +\n        `<${pathMsg}> may appears as a prefix path in all these alternatives.\\n`\n      currMessage =\n        currMessage +\n        `See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#AMBIGUOUS_ALTERNATIVES\\n` +\n        `For Further details.`\n      return currMessage\n    },\n    buildEmptyRepetitionError(options) {\n      let dslName = getProductionDslName(options.repetition)\n      if (options.repetition.idx !== 0) {\n        dslName += options.repetition.idx\n      }\n      const errMsg =\n        `The repetition <${dslName}> within Rule <${options.topLevelRule.name}> can never consume any tokens.\\n` +\n        `This could lead to an infinite loop.`\n      return errMsg\n    },\n    // TODO: remove - `errors_public` from nyc.config.js exclude\n    //       once this method is fully removed from this file\n    buildTokenNameError(options) {\n      /* istanbul ignore next */\n      return 'deprecated'\n    },\n    buildEmptyAlternationError(options) {\n      const errMsg =\n        `Ambiguous empty alternative: <${options.emptyChoiceIdx + 1}>` +\n        ` in <OR${options.alternation.idx}> inside <${options.topLevelRule.name}> Rule.\\n` +\n        `Only the last alternative may be an empty alternative.`\n      return errMsg\n    },\n    buildTooManyAlternativesError(options) {\n      const errMsg =\n        `An Alternation cannot have more than 256 alternatives:\\n` +\n        `<OR${options.alternation.idx}> inside <${options.topLevelRule.name}> Rule.\\n has ${\n          options.alternation.definition.length + 1\n        } alternatives.`\n      return errMsg\n    },\n    buildLeftRecursionError(options) {\n      const ruleName = options.topLevelRule.name\n      const pathNames = map(options.leftRecursionPath, (currRule) => currRule.name)\n      const leftRecursivePath = `${ruleName} --> ${pathNames.concat([ruleName]).join(' --> ')}`\n      const errMsg =\n        `Left Recursion found in grammar.\\n` +\n        `rule: <${ruleName}> can be invoked from itself (directly or indirectly)\\n` +\n        `without consuming any Tokens. The grammar path that causes this is: \\n ${leftRecursivePath}\\n` +\n        ` To fix this refactor your grammar to remove the left recursion.\\n` +\n        `see: https://en.wikipedia.org/wiki/LL_parser#Left_factoring.`\n      return errMsg\n    },\n    // TODO: remove - `errors_public` from nyc.config.js exclude\n    //       once this method is fully removed from this file\n    buildInvalidRuleNameError(options) {\n      /* istanbul ignore next */\n      return 'deprecated'\n    },\n    buildDuplicateRuleNameError(options) {\n      let ruleName\n      if (options.topLevelRule instanceof Rule) {\n        ruleName = options.topLevelRule.name\n      } else {\n        ruleName = options.topLevelRule\n      }\n      const errMsg = `Duplicate definition, rule: ->${ruleName}<- is already defined in the grammar: ->${options.grammarName}<-`\n      return errMsg\n    },\n  }\n\n  function resolveGrammar$1(topLevels, errMsgProvider) {\n    const refResolver = new GastRefResolverVisitor(topLevels, errMsgProvider)\n    refResolver.resolveRefs()\n    return refResolver.errors\n  }\n  class GastRefResolverVisitor extends GAstVisitor {\n    constructor(nameToTopRule, errMsgProvider) {\n      super()\n      this.nameToTopRule = nameToTopRule\n      this.errMsgProvider = errMsgProvider\n      this.errors = []\n    }\n    resolveRefs() {\n      forEach(values(this.nameToTopRule), (prod) => {\n        this.currTopLevel = prod\n        prod.accept(this)\n      })\n    }\n    visitNonTerminal(node) {\n      const ref = this.nameToTopRule[node.nonTerminalName]\n      if (!ref) {\n        const msg = this.errMsgProvider.buildRuleNotFoundError(this.currTopLevel, node)\n        this.errors.push({\n          message: msg,\n          type: ParserDefinitionErrorType.UNRESOLVED_SUBRULE_REF,\n          ruleName: this.currTopLevel.name,\n          unresolvedRefName: node.nonTerminalName,\n        })\n      } else {\n        node.referencedRule = ref\n      }\n    }\n  }\n\n  class AbstractNextPossibleTokensWalker extends RestWalker {\n    constructor(topProd, path) {\n      super()\n      this.topProd = topProd\n      this.path = path\n      this.possibleTokTypes = []\n      this.nextProductionName = ''\n      this.nextProductionOccurrence = 0\n      this.found = false\n      this.isAtEndOfPath = false\n    }\n    startWalking() {\n      this.found = false\n      if (this.path.ruleStack[0] !== this.topProd.name) {\n        throw Error(\"The path does not start with the walker's top Rule!\")\n      }\n      // immutable for the win\n      this.ruleStack = clone(this.path.ruleStack).reverse() // intelij bug requires assertion\n      this.occurrenceStack = clone(this.path.occurrenceStack).reverse() // intelij bug requires assertion\n      // already verified that the first production is valid, we now seek the 2nd production\n      this.ruleStack.pop()\n      this.occurrenceStack.pop()\n      this.updateExpectedNext()\n      this.walk(this.topProd)\n      return this.possibleTokTypes\n    }\n    walk(prod, prevRest = []) {\n      // stop scanning once we found the path\n      if (!this.found) {\n        super.walk(prod, prevRest)\n      }\n    }\n    walkProdRef(refProd, currRest, prevRest) {\n      // found the next production, need to keep walking in it\n      if (refProd.referencedRule.name === this.nextProductionName && refProd.idx === this.nextProductionOccurrence) {\n        const fullRest = currRest.concat(prevRest)\n        this.updateExpectedNext()\n        this.walk(refProd.referencedRule, fullRest)\n      }\n    }\n    updateExpectedNext() {\n      // need to consume the Terminal\n      if (isEmpty(this.ruleStack)) {\n        // must reset nextProductionXXX to avoid walking down another Top Level production while what we are\n        // really seeking is the last Terminal...\n        this.nextProductionName = ''\n        this.nextProductionOccurrence = 0\n        this.isAtEndOfPath = true\n      } else {\n        this.nextProductionName = this.ruleStack.pop()\n        this.nextProductionOccurrence = this.occurrenceStack.pop()\n      }\n    }\n  }\n  class NextAfterTokenWalker extends AbstractNextPossibleTokensWalker {\n    constructor(topProd, path) {\n      super(topProd, path)\n      this.path = path\n      this.nextTerminalName = ''\n      this.nextTerminalOccurrence = 0\n      this.nextTerminalName = this.path.lastTok.name\n      this.nextTerminalOccurrence = this.path.lastTokOccurrence\n    }\n    walkTerminal(terminal, currRest, prevRest) {\n      if (\n        this.isAtEndOfPath &&\n        terminal.terminalType.name === this.nextTerminalName &&\n        terminal.idx === this.nextTerminalOccurrence &&\n        !this.found\n      ) {\n        const fullRest = currRest.concat(prevRest)\n        const restProd = new Alternative({ definition: fullRest })\n        this.possibleTokTypes = first(restProd)\n        this.found = true\n      }\n    }\n  }\n  /**\n   * This walker only \"walks\" a single \"TOP\" level in the Grammar Ast, this means\n   * it never \"follows\" production refs\n   */\n  class AbstractNextTerminalAfterProductionWalker extends RestWalker {\n    constructor(topRule, occurrence) {\n      super()\n      this.topRule = topRule\n      this.occurrence = occurrence\n      this.result = {\n        token: undefined,\n        occurrence: undefined,\n        isEndOfRule: undefined,\n      }\n    }\n    startWalking() {\n      this.walk(this.topRule)\n      return this.result\n    }\n  }\n  class NextTerminalAfterManyWalker extends AbstractNextTerminalAfterProductionWalker {\n    walkMany(manyProd, currRest, prevRest) {\n      if (manyProd.idx === this.occurrence) {\n        const firstAfterMany = head(currRest.concat(prevRest))\n        this.result.isEndOfRule = firstAfterMany === undefined\n        if (firstAfterMany instanceof Terminal) {\n          this.result.token = firstAfterMany.terminalType\n          this.result.occurrence = firstAfterMany.idx\n        }\n      } else {\n        super.walkMany(manyProd, currRest, prevRest)\n      }\n    }\n  }\n  class NextTerminalAfterManySepWalker extends AbstractNextTerminalAfterProductionWalker {\n    walkManySep(manySepProd, currRest, prevRest) {\n      if (manySepProd.idx === this.occurrence) {\n        const firstAfterManySep = head(currRest.concat(prevRest))\n        this.result.isEndOfRule = firstAfterManySep === undefined\n        if (firstAfterManySep instanceof Terminal) {\n          this.result.token = firstAfterManySep.terminalType\n          this.result.occurrence = firstAfterManySep.idx\n        }\n      } else {\n        super.walkManySep(manySepProd, currRest, prevRest)\n      }\n    }\n  }\n  class NextTerminalAfterAtLeastOneWalker extends AbstractNextTerminalAfterProductionWalker {\n    walkAtLeastOne(atLeastOneProd, currRest, prevRest) {\n      if (atLeastOneProd.idx === this.occurrence) {\n        const firstAfterAtLeastOne = head(currRest.concat(prevRest))\n        this.result.isEndOfRule = firstAfterAtLeastOne === undefined\n        if (firstAfterAtLeastOne instanceof Terminal) {\n          this.result.token = firstAfterAtLeastOne.terminalType\n          this.result.occurrence = firstAfterAtLeastOne.idx\n        }\n      } else {\n        super.walkAtLeastOne(atLeastOneProd, currRest, prevRest)\n      }\n    }\n  }\n  // TODO: reduce code duplication in the AfterWalkers\n  class NextTerminalAfterAtLeastOneSepWalker extends AbstractNextTerminalAfterProductionWalker {\n    walkAtLeastOneSep(atleastOneSepProd, currRest, prevRest) {\n      if (atleastOneSepProd.idx === this.occurrence) {\n        const firstAfterfirstAfterAtLeastOneSep = head(currRest.concat(prevRest))\n        this.result.isEndOfRule = firstAfterfirstAfterAtLeastOneSep === undefined\n        if (firstAfterfirstAfterAtLeastOneSep instanceof Terminal) {\n          this.result.token = firstAfterfirstAfterAtLeastOneSep.terminalType\n          this.result.occurrence = firstAfterfirstAfterAtLeastOneSep.idx\n        }\n      } else {\n        super.walkAtLeastOneSep(atleastOneSepProd, currRest, prevRest)\n      }\n    }\n  }\n  function possiblePathsFrom(targetDef, maxLength, currPath = []) {\n    // avoid side effects\n    currPath = clone(currPath)\n    let result = []\n    let i = 0\n    // TODO: avoid inner funcs\n    function remainingPathWith(nextDef) {\n      return nextDef.concat(drop(targetDef, i + 1))\n    }\n    // TODO: avoid inner funcs\n    function getAlternativesForProd(definition) {\n      const alternatives = possiblePathsFrom(remainingPathWith(definition), maxLength, currPath)\n      return result.concat(alternatives)\n    }\n    /**\n     * Mandatory productions will halt the loop as the paths computed from their recursive calls will already contain the\n     * following (rest) of the targetDef.\n     *\n     * For optional productions (Option/Repetition/...) the loop will continue to represent the paths that do not include the\n     * the optional production.\n     */\n    while (currPath.length < maxLength && i < targetDef.length) {\n      const prod = targetDef[i]\n      /* istanbul ignore else */\n      if (prod instanceof Alternative) {\n        return getAlternativesForProd(prod.definition)\n      } else if (prod instanceof NonTerminal) {\n        return getAlternativesForProd(prod.definition)\n      } else if (prod instanceof Option) {\n        result = getAlternativesForProd(prod.definition)\n      } else if (prod instanceof RepetitionMandatory) {\n        const newDef = prod.definition.concat([\n          new Repetition({\n            definition: prod.definition,\n          }),\n        ])\n        return getAlternativesForProd(newDef)\n      } else if (prod instanceof RepetitionMandatoryWithSeparator) {\n        const newDef = [\n          new Alternative({ definition: prod.definition }),\n          new Repetition({\n            definition: [new Terminal({ terminalType: prod.separator })].concat(prod.definition),\n          }),\n        ]\n        return getAlternativesForProd(newDef)\n      } else if (prod instanceof RepetitionWithSeparator) {\n        const newDef = prod.definition.concat([\n          new Repetition({\n            definition: [new Terminal({ terminalType: prod.separator })].concat(prod.definition),\n          }),\n        ])\n        result = getAlternativesForProd(newDef)\n      } else if (prod instanceof Repetition) {\n        const newDef = prod.definition.concat([\n          new Repetition({\n            definition: prod.definition,\n          }),\n        ])\n        result = getAlternativesForProd(newDef)\n      } else if (prod instanceof Alternation) {\n        forEach(prod.definition, (currAlt) => {\n          // TODO: this is a limited check for empty alternatives\n          //   It would prevent a common case of infinite loops during parser initialization.\n          //   However **in-directly** empty alternatives may still cause issues.\n          if (isEmpty(currAlt.definition) === false) {\n            result = getAlternativesForProd(currAlt.definition)\n          }\n        })\n        return result\n      } else if (prod instanceof Terminal) {\n        currPath.push(prod.terminalType)\n      } else {\n        throw Error('non exhaustive match')\n      }\n      i++\n    }\n    result.push({\n      partialPath: currPath,\n      suffixDef: drop(targetDef, i),\n    })\n    return result\n  }\n  function nextPossibleTokensAfter(initialDef, tokenVector, tokMatcher, maxLookAhead) {\n    const EXIT_NON_TERMINAL = 'EXIT_NONE_TERMINAL'\n    // to avoid creating a new Array each time.\n    const EXIT_NON_TERMINAL_ARR = [EXIT_NON_TERMINAL]\n    const EXIT_ALTERNATIVE = 'EXIT_ALTERNATIVE'\n    let foundCompletePath = false\n    const tokenVectorLength = tokenVector.length\n    const minimalAlternativesIndex = tokenVectorLength - maxLookAhead - 1\n    const result = []\n    const possiblePaths = []\n    possiblePaths.push({\n      idx: -1,\n      def: initialDef,\n      ruleStack: [],\n      occurrenceStack: [],\n    })\n    while (!isEmpty(possiblePaths)) {\n      const currPath = possiblePaths.pop()\n      // skip alternatives if no more results can be found (assuming deterministic grammar with fixed lookahead)\n      if (currPath === EXIT_ALTERNATIVE) {\n        if (foundCompletePath && last(possiblePaths).idx <= minimalAlternativesIndex) {\n          // remove irrelevant alternative\n          possiblePaths.pop()\n        }\n        continue\n      }\n      const currDef = currPath.def\n      const currIdx = currPath.idx\n      const currRuleStack = currPath.ruleStack\n      const currOccurrenceStack = currPath.occurrenceStack\n      // For Example: an empty path could exist in a valid grammar in the case of an EMPTY_ALT\n      if (isEmpty(currDef)) {\n        continue\n      }\n      const prod = currDef[0]\n      /* istanbul ignore else */\n      if (prod === EXIT_NON_TERMINAL) {\n        const nextPath = {\n          idx: currIdx,\n          def: drop(currDef),\n          ruleStack: dropRight(currRuleStack),\n          occurrenceStack: dropRight(currOccurrenceStack),\n        }\n        possiblePaths.push(nextPath)\n      } else if (prod instanceof Terminal) {\n        /* istanbul ignore else */\n        if (currIdx < tokenVectorLength - 1) {\n          const nextIdx = currIdx + 1\n          const actualToken = tokenVector[nextIdx]\n          if (tokMatcher(actualToken, prod.terminalType)) {\n            const nextPath = {\n              idx: nextIdx,\n              def: drop(currDef),\n              ruleStack: currRuleStack,\n              occurrenceStack: currOccurrenceStack,\n            }\n            possiblePaths.push(nextPath)\n          }\n          // end of the line\n        } else if (currIdx === tokenVectorLength - 1) {\n          // IGNORE ABOVE ELSE\n          result.push({\n            nextTokenType: prod.terminalType,\n            nextTokenOccurrence: prod.idx,\n            ruleStack: currRuleStack,\n            occurrenceStack: currOccurrenceStack,\n          })\n          foundCompletePath = true\n        } else {\n          throw Error('non exhaustive match')\n        }\n      } else if (prod instanceof NonTerminal) {\n        const newRuleStack = clone(currRuleStack)\n        newRuleStack.push(prod.nonTerminalName)\n        const newOccurrenceStack = clone(currOccurrenceStack)\n        newOccurrenceStack.push(prod.idx)\n        const nextPath = {\n          idx: currIdx,\n          def: prod.definition.concat(EXIT_NON_TERMINAL_ARR, drop(currDef)),\n          ruleStack: newRuleStack,\n          occurrenceStack: newOccurrenceStack,\n        }\n        possiblePaths.push(nextPath)\n      } else if (prod instanceof Option) {\n        // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n        const nextPathWithout = {\n          idx: currIdx,\n          def: drop(currDef),\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack,\n        }\n        possiblePaths.push(nextPathWithout)\n        // required marker to avoid backtracking paths whose higher priority alternatives already matched\n        possiblePaths.push(EXIT_ALTERNATIVE)\n        const nextPathWith = {\n          idx: currIdx,\n          def: prod.definition.concat(drop(currDef)),\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack,\n        }\n        possiblePaths.push(nextPathWith)\n      } else if (prod instanceof RepetitionMandatory) {\n        // TODO:(THE NEW operators here take a while...) (convert once?)\n        const secondIteration = new Repetition({\n          definition: prod.definition,\n          idx: prod.idx,\n        })\n        const nextDef = prod.definition.concat([secondIteration], drop(currDef))\n        const nextPath = {\n          idx: currIdx,\n          def: nextDef,\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack,\n        }\n        possiblePaths.push(nextPath)\n      } else if (prod instanceof RepetitionMandatoryWithSeparator) {\n        // TODO:(THE NEW operators here take a while...) (convert once?)\n        const separatorGast = new Terminal({\n          terminalType: prod.separator,\n        })\n        const secondIteration = new Repetition({\n          definition: [separatorGast].concat(prod.definition),\n          idx: prod.idx,\n        })\n        const nextDef = prod.definition.concat([secondIteration], drop(currDef))\n        const nextPath = {\n          idx: currIdx,\n          def: nextDef,\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack,\n        }\n        possiblePaths.push(nextPath)\n      } else if (prod instanceof RepetitionWithSeparator) {\n        // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n        const nextPathWithout = {\n          idx: currIdx,\n          def: drop(currDef),\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack,\n        }\n        possiblePaths.push(nextPathWithout)\n        // required marker to avoid backtracking paths whose higher priority alternatives already matched\n        possiblePaths.push(EXIT_ALTERNATIVE)\n        const separatorGast = new Terminal({\n          terminalType: prod.separator,\n        })\n        const nthRepetition = new Repetition({\n          definition: [separatorGast].concat(prod.definition),\n          idx: prod.idx,\n        })\n        const nextDef = prod.definition.concat([nthRepetition], drop(currDef))\n        const nextPathWith = {\n          idx: currIdx,\n          def: nextDef,\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack,\n        }\n        possiblePaths.push(nextPathWith)\n      } else if (prod instanceof Repetition) {\n        // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n        const nextPathWithout = {\n          idx: currIdx,\n          def: drop(currDef),\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack,\n        }\n        possiblePaths.push(nextPathWithout)\n        // required marker to avoid backtracking paths whose higher priority alternatives already matched\n        possiblePaths.push(EXIT_ALTERNATIVE)\n        // TODO: an empty repetition will cause infinite loops here, will the parser detect this in selfAnalysis?\n        const nthRepetition = new Repetition({\n          definition: prod.definition,\n          idx: prod.idx,\n        })\n        const nextDef = prod.definition.concat([nthRepetition], drop(currDef))\n        const nextPathWith = {\n          idx: currIdx,\n          def: nextDef,\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack,\n        }\n        possiblePaths.push(nextPathWith)\n      } else if (prod instanceof Alternation) {\n        // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n        for (let i = prod.definition.length - 1; i >= 0; i--) {\n          const currAlt = prod.definition[i]\n          const currAltPath = {\n            idx: currIdx,\n            def: currAlt.definition.concat(drop(currDef)),\n            ruleStack: currRuleStack,\n            occurrenceStack: currOccurrenceStack,\n          }\n          possiblePaths.push(currAltPath)\n          possiblePaths.push(EXIT_ALTERNATIVE)\n        }\n      } else if (prod instanceof Alternative) {\n        possiblePaths.push({\n          idx: currIdx,\n          def: prod.definition.concat(drop(currDef)),\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack,\n        })\n      } else if (prod instanceof Rule) {\n        // last because we should only encounter at most a single one of these per invocation.\n        possiblePaths.push(expandTopLevelRule(prod, currIdx, currRuleStack, currOccurrenceStack))\n      } else {\n        throw Error('non exhaustive match')\n      }\n    }\n    return result\n  }\n  function expandTopLevelRule(topRule, currIdx, currRuleStack, currOccurrenceStack) {\n    const newRuleStack = clone(currRuleStack)\n    newRuleStack.push(topRule.name)\n    const newCurrOccurrenceStack = clone(currOccurrenceStack)\n    // top rule is always assumed to have been called with occurrence index 1\n    newCurrOccurrenceStack.push(1)\n    return {\n      idx: currIdx,\n      def: topRule.definition,\n      ruleStack: newRuleStack,\n      occurrenceStack: newCurrOccurrenceStack,\n    }\n  }\n\n  var PROD_TYPE\n  ;(function (PROD_TYPE) {\n    PROD_TYPE[(PROD_TYPE['OPTION'] = 0)] = 'OPTION'\n    PROD_TYPE[(PROD_TYPE['REPETITION'] = 1)] = 'REPETITION'\n    PROD_TYPE[(PROD_TYPE['REPETITION_MANDATORY'] = 2)] = 'REPETITION_MANDATORY'\n    PROD_TYPE[(PROD_TYPE['REPETITION_MANDATORY_WITH_SEPARATOR'] = 3)] = 'REPETITION_MANDATORY_WITH_SEPARATOR'\n    PROD_TYPE[(PROD_TYPE['REPETITION_WITH_SEPARATOR'] = 4)] = 'REPETITION_WITH_SEPARATOR'\n    PROD_TYPE[(PROD_TYPE['ALTERNATION'] = 5)] = 'ALTERNATION'\n  })(PROD_TYPE || (PROD_TYPE = {}))\n  function getProdType(prod) {\n    /* istanbul ignore else */\n    if (prod instanceof Option || prod === 'Option') {\n      return PROD_TYPE.OPTION\n    } else if (prod instanceof Repetition || prod === 'Repetition') {\n      return PROD_TYPE.REPETITION\n    } else if (prod instanceof RepetitionMandatory || prod === 'RepetitionMandatory') {\n      return PROD_TYPE.REPETITION_MANDATORY\n    } else if (prod instanceof RepetitionMandatoryWithSeparator || prod === 'RepetitionMandatoryWithSeparator') {\n      return PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR\n    } else if (prod instanceof RepetitionWithSeparator || prod === 'RepetitionWithSeparator') {\n      return PROD_TYPE.REPETITION_WITH_SEPARATOR\n    } else if (prod instanceof Alternation || prod === 'Alternation') {\n      return PROD_TYPE.ALTERNATION\n    } else {\n      throw Error('non exhaustive match')\n    }\n  }\n  function buildLookaheadFuncForOr(\n    occurrence,\n    ruleGrammar,\n    maxLookahead,\n    hasPredicates,\n    dynamicTokensEnabled,\n    laFuncBuilder,\n  ) {\n    const lookAheadPaths = getLookaheadPathsForOr(occurrence, ruleGrammar, maxLookahead)\n    const tokenMatcher = areTokenCategoriesNotUsed(lookAheadPaths)\n      ? tokenStructuredMatcherNoCategories\n      : tokenStructuredMatcher\n    return laFuncBuilder(lookAheadPaths, hasPredicates, tokenMatcher, dynamicTokensEnabled)\n  }\n  /**\n   *  When dealing with an Optional production (OPTION/MANY/2nd iteration of AT_LEAST_ONE/...) we need to compare\n   *  the lookahead \"inside\" the production and the lookahead immediately \"after\" it in the same top level rule (context free).\n   *\n   *  Example: given a production:\n   *  ABC(DE)?DF\n   *\n   *  The optional '(DE)?' should only be entered if we see 'DE'. a single Token 'D' is not sufficient to distinguish between the two\n   *  alternatives.\n   *\n   *  @returns A Lookahead function which will return true IFF the parser should parse the Optional production.\n   */\n  function buildLookaheadFuncForOptionalProd(\n    occurrence,\n    ruleGrammar,\n    k,\n    dynamicTokensEnabled,\n    prodType,\n    lookaheadBuilder,\n  ) {\n    const lookAheadPaths = getLookaheadPathsForOptionalProd(occurrence, ruleGrammar, prodType, k)\n    const tokenMatcher = areTokenCategoriesNotUsed(lookAheadPaths)\n      ? tokenStructuredMatcherNoCategories\n      : tokenStructuredMatcher\n    return lookaheadBuilder(lookAheadPaths[0], tokenMatcher, dynamicTokensEnabled)\n  }\n  function buildAlternativesLookAheadFunc(alts, hasPredicates, tokenMatcher, dynamicTokensEnabled) {\n    const numOfAlts = alts.length\n    const areAllOneTokenLookahead = every(alts, (currAlt) => {\n      return every(currAlt, (currPath) => {\n        return currPath.length === 1\n      })\n    })\n    // This version takes into account the predicates as well.\n    if (hasPredicates) {\n      /**\n       * @returns {number} - The chosen alternative index\n       */\n      return function (orAlts) {\n        // unfortunately the predicates must be extracted every single time\n        // as they cannot be cached due to references to parameters(vars) which are no longer valid.\n        // note that in the common case of no predicates, no cpu time will be wasted on this (see else block)\n        const predicates = map(orAlts, (currAlt) => currAlt.GATE)\n        for (let t = 0; t < numOfAlts; t++) {\n          const currAlt = alts[t]\n          const currNumOfPaths = currAlt.length\n          const currPredicate = predicates[t]\n          if (currPredicate !== undefined && currPredicate.call(this) === false) {\n            // if the predicate does not match there is no point in checking the paths\n            continue\n          }\n          nextPath: for (let j = 0; j < currNumOfPaths; j++) {\n            const currPath = currAlt[j]\n            const currPathLength = currPath.length\n            for (let i = 0; i < currPathLength; i++) {\n              const nextToken = this.LA(i + 1)\n              if (tokenMatcher(nextToken, currPath[i]) === false) {\n                // mismatch in current path\n                // try the next pth\n                continue nextPath\n              }\n            }\n            // found a full path that matches.\n            // this will also work for an empty ALT as the loop will be skipped\n            return t\n          }\n          // none of the paths for the current alternative matched\n          // try the next alternative\n        }\n        // none of the alternatives could be matched\n        return undefined\n      }\n    } else if (areAllOneTokenLookahead && !dynamicTokensEnabled) {\n      // optimized (common) case of all the lookaheads paths requiring only\n      // a single token lookahead. These Optimizations cannot work if dynamically defined Tokens are used.\n      const singleTokenAlts = map(alts, (currAlt) => {\n        return flatten(currAlt)\n      })\n      const choiceToAlt = reduce(\n        singleTokenAlts,\n        (result, currAlt, idx) => {\n          forEach(currAlt, (currTokType) => {\n            if (!has(result, currTokType.tokenTypeIdx)) {\n              result[currTokType.tokenTypeIdx] = idx\n            }\n            forEach(currTokType.categoryMatches, (currExtendingType) => {\n              if (!has(result, currExtendingType)) {\n                result[currExtendingType] = idx\n              }\n            })\n          })\n          return result\n        },\n        {},\n      )\n      /**\n       * @returns {number} - The chosen alternative index\n       */\n      return function () {\n        const nextToken = this.LA(1)\n        return choiceToAlt[nextToken.tokenTypeIdx]\n      }\n    } else {\n      // optimized lookahead without needing to check the predicates at all.\n      // this causes code duplication which is intentional to improve performance.\n      /**\n       * @returns {number} - The chosen alternative index\n       */\n      return function () {\n        for (let t = 0; t < numOfAlts; t++) {\n          const currAlt = alts[t]\n          const currNumOfPaths = currAlt.length\n          nextPath: for (let j = 0; j < currNumOfPaths; j++) {\n            const currPath = currAlt[j]\n            const currPathLength = currPath.length\n            for (let i = 0; i < currPathLength; i++) {\n              const nextToken = this.LA(i + 1)\n              if (tokenMatcher(nextToken, currPath[i]) === false) {\n                // mismatch in current path\n                // try the next pth\n                continue nextPath\n              }\n            }\n            // found a full path that matches.\n            // this will also work for an empty ALT as the loop will be skipped\n            return t\n          }\n          // none of the paths for the current alternative matched\n          // try the next alternative\n        }\n        // none of the alternatives could be matched\n        return undefined\n      }\n    }\n  }\n  function buildSingleAlternativeLookaheadFunction(alt, tokenMatcher, dynamicTokensEnabled) {\n    const areAllOneTokenLookahead = every(alt, (currPath) => {\n      return currPath.length === 1\n    })\n    const numOfPaths = alt.length\n    // optimized (common) case of all the lookaheads paths requiring only\n    // a single token lookahead.\n    if (areAllOneTokenLookahead && !dynamicTokensEnabled) {\n      const singleTokensTypes = flatten(alt)\n      if (singleTokensTypes.length === 1 && isEmpty(singleTokensTypes[0].categoryMatches)) {\n        const expectedTokenType = singleTokensTypes[0]\n        const expectedTokenUniqueKey = expectedTokenType.tokenTypeIdx\n        return function () {\n          return this.LA(1).tokenTypeIdx === expectedTokenUniqueKey\n        }\n      } else {\n        const choiceToAlt = reduce(\n          singleTokensTypes,\n          (result, currTokType, idx) => {\n            result[currTokType.tokenTypeIdx] = true\n            forEach(currTokType.categoryMatches, (currExtendingType) => {\n              result[currExtendingType] = true\n            })\n            return result\n          },\n          [],\n        )\n        return function () {\n          const nextToken = this.LA(1)\n          return choiceToAlt[nextToken.tokenTypeIdx] === true\n        }\n      }\n    } else {\n      return function () {\n        nextPath: for (let j = 0; j < numOfPaths; j++) {\n          const currPath = alt[j]\n          const currPathLength = currPath.length\n          for (let i = 0; i < currPathLength; i++) {\n            const nextToken = this.LA(i + 1)\n            if (tokenMatcher(nextToken, currPath[i]) === false) {\n              // mismatch in current path\n              // try the next pth\n              continue nextPath\n            }\n          }\n          // found a full path that matches.\n          return true\n        }\n        // none of the paths matched\n        return false\n      }\n    }\n  }\n  class RestDefinitionFinderWalker extends RestWalker {\n    constructor(topProd, targetOccurrence, targetProdType) {\n      super()\n      this.topProd = topProd\n      this.targetOccurrence = targetOccurrence\n      this.targetProdType = targetProdType\n    }\n    startWalking() {\n      this.walk(this.topProd)\n      return this.restDef\n    }\n    checkIsTarget(node, expectedProdType, currRest, prevRest) {\n      if (node.idx === this.targetOccurrence && this.targetProdType === expectedProdType) {\n        this.restDef = currRest.concat(prevRest)\n        return true\n      }\n      // performance optimization, do not iterate over the entire Grammar ast after we have found the target\n      return false\n    }\n    walkOption(optionProd, currRest, prevRest) {\n      if (!this.checkIsTarget(optionProd, PROD_TYPE.OPTION, currRest, prevRest)) {\n        super.walkOption(optionProd, currRest, prevRest)\n      }\n    }\n    walkAtLeastOne(atLeastOneProd, currRest, prevRest) {\n      if (!this.checkIsTarget(atLeastOneProd, PROD_TYPE.REPETITION_MANDATORY, currRest, prevRest)) {\n        super.walkOption(atLeastOneProd, currRest, prevRest)\n      }\n    }\n    walkAtLeastOneSep(atLeastOneSepProd, currRest, prevRest) {\n      if (!this.checkIsTarget(atLeastOneSepProd, PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR, currRest, prevRest)) {\n        super.walkOption(atLeastOneSepProd, currRest, prevRest)\n      }\n    }\n    walkMany(manyProd, currRest, prevRest) {\n      if (!this.checkIsTarget(manyProd, PROD_TYPE.REPETITION, currRest, prevRest)) {\n        super.walkOption(manyProd, currRest, prevRest)\n      }\n    }\n    walkManySep(manySepProd, currRest, prevRest) {\n      if (!this.checkIsTarget(manySepProd, PROD_TYPE.REPETITION_WITH_SEPARATOR, currRest, prevRest)) {\n        super.walkOption(manySepProd, currRest, prevRest)\n      }\n    }\n  }\n  /**\n   * Returns the definition of a target production in a top level level rule.\n   */\n  class InsideDefinitionFinderVisitor extends GAstVisitor {\n    constructor(targetOccurrence, targetProdType, targetRef) {\n      super()\n      this.targetOccurrence = targetOccurrence\n      this.targetProdType = targetProdType\n      this.targetRef = targetRef\n      this.result = []\n    }\n    checkIsTarget(node, expectedProdName) {\n      if (\n        node.idx === this.targetOccurrence &&\n        this.targetProdType === expectedProdName &&\n        (this.targetRef === undefined || node === this.targetRef)\n      ) {\n        this.result = node.definition\n      }\n    }\n    visitOption(node) {\n      this.checkIsTarget(node, PROD_TYPE.OPTION)\n    }\n    visitRepetition(node) {\n      this.checkIsTarget(node, PROD_TYPE.REPETITION)\n    }\n    visitRepetitionMandatory(node) {\n      this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY)\n    }\n    visitRepetitionMandatoryWithSeparator(node) {\n      this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR)\n    }\n    visitRepetitionWithSeparator(node) {\n      this.checkIsTarget(node, PROD_TYPE.REPETITION_WITH_SEPARATOR)\n    }\n    visitAlternation(node) {\n      this.checkIsTarget(node, PROD_TYPE.ALTERNATION)\n    }\n  }\n  function initializeArrayOfArrays(size) {\n    const result = new Array(size)\n    for (let i = 0; i < size; i++) {\n      result[i] = []\n    }\n    return result\n  }\n  /**\n   * A sort of hash function between a Path in the grammar and a string.\n   * Note that this returns multiple \"hashes\" to support the scenario of token categories.\n   * -  A single path with categories may match multiple **actual** paths.\n   */\n  function pathToHashKeys(path) {\n    let keys = ['']\n    for (let i = 0; i < path.length; i++) {\n      const tokType = path[i]\n      const longerKeys = []\n      for (let j = 0; j < keys.length; j++) {\n        const currShorterKey = keys[j]\n        longerKeys.push(currShorterKey + '_' + tokType.tokenTypeIdx)\n        for (let t = 0; t < tokType.categoryMatches.length; t++) {\n          const categoriesKeySuffix = '_' + tokType.categoryMatches[t]\n          longerKeys.push(currShorterKey + categoriesKeySuffix)\n        }\n      }\n      keys = longerKeys\n    }\n    return keys\n  }\n  /**\n   * Imperative style due to being called from a hot spot\n   */\n  function isUniquePrefixHash(altKnownPathsKeys, searchPathKeys, idx) {\n    for (let currAltIdx = 0; currAltIdx < altKnownPathsKeys.length; currAltIdx++) {\n      // We only want to test vs the other alternatives\n      if (currAltIdx === idx) {\n        continue\n      }\n      const otherAltKnownPathsKeys = altKnownPathsKeys[currAltIdx]\n      for (let searchIdx = 0; searchIdx < searchPathKeys.length; searchIdx++) {\n        const searchKey = searchPathKeys[searchIdx]\n        if (otherAltKnownPathsKeys[searchKey] === true) {\n          return false\n        }\n      }\n    }\n    // None of the SearchPathKeys were found in any of the other alternatives\n    return true\n  }\n  function lookAheadSequenceFromAlternatives(altsDefs, k) {\n    const partialAlts = map(altsDefs, (currAlt) => possiblePathsFrom([currAlt], 1))\n    const finalResult = initializeArrayOfArrays(partialAlts.length)\n    const altsHashes = map(partialAlts, (currAltPaths) => {\n      const dict = {}\n      forEach(currAltPaths, (item) => {\n        const keys = pathToHashKeys(item.partialPath)\n        forEach(keys, (currKey) => {\n          dict[currKey] = true\n        })\n      })\n      return dict\n    })\n    let newData = partialAlts\n    // maxLookahead loop\n    for (let pathLength = 1; pathLength <= k; pathLength++) {\n      const currDataset = newData\n      newData = initializeArrayOfArrays(currDataset.length)\n      // alternatives loop\n      for (let altIdx = 0; altIdx < currDataset.length; altIdx++) {\n        const currAltPathsAndSuffixes = currDataset[altIdx]\n        // paths in current alternative loop\n        for (let currPathIdx = 0; currPathIdx < currAltPathsAndSuffixes.length; currPathIdx++) {\n          const currPathPrefix = currAltPathsAndSuffixes[currPathIdx].partialPath\n          const suffixDef = currAltPathsAndSuffixes[currPathIdx].suffixDef\n          const prefixKeys = pathToHashKeys(currPathPrefix)\n          const isUnique = isUniquePrefixHash(altsHashes, prefixKeys, altIdx)\n          // End of the line for this path.\n          if (isUnique || isEmpty(suffixDef) || currPathPrefix.length === k) {\n            const currAltResult = finalResult[altIdx]\n            // TODO: Can we implement a containsPath using Maps/Dictionaries?\n            if (containsPath(currAltResult, currPathPrefix) === false) {\n              currAltResult.push(currPathPrefix)\n              // Update all new  keys for the current path.\n              for (let j = 0; j < prefixKeys.length; j++) {\n                const currKey = prefixKeys[j]\n                altsHashes[altIdx][currKey] = true\n              }\n            }\n          }\n          // Expand longer paths\n          else {\n            const newPartialPathsAndSuffixes = possiblePathsFrom(suffixDef, pathLength + 1, currPathPrefix)\n            newData[altIdx] = newData[altIdx].concat(newPartialPathsAndSuffixes)\n            // Update keys for new known paths\n            forEach(newPartialPathsAndSuffixes, (item) => {\n              const prefixKeys = pathToHashKeys(item.partialPath)\n              forEach(prefixKeys, (key) => {\n                altsHashes[altIdx][key] = true\n              })\n            })\n          }\n        }\n      }\n    }\n    return finalResult\n  }\n  function getLookaheadPathsForOr(occurrence, ruleGrammar, k, orProd) {\n    const visitor = new InsideDefinitionFinderVisitor(occurrence, PROD_TYPE.ALTERNATION, orProd)\n    ruleGrammar.accept(visitor)\n    return lookAheadSequenceFromAlternatives(visitor.result, k)\n  }\n  function getLookaheadPathsForOptionalProd(occurrence, ruleGrammar, prodType, k) {\n    const insideDefVisitor = new InsideDefinitionFinderVisitor(occurrence, prodType)\n    ruleGrammar.accept(insideDefVisitor)\n    const insideDef = insideDefVisitor.result\n    const afterDefWalker = new RestDefinitionFinderWalker(ruleGrammar, occurrence, prodType)\n    const afterDef = afterDefWalker.startWalking()\n    const insideFlat = new Alternative({ definition: insideDef })\n    const afterFlat = new Alternative({ definition: afterDef })\n    return lookAheadSequenceFromAlternatives([insideFlat, afterFlat], k)\n  }\n  function containsPath(alternative, searchPath) {\n    compareOtherPath: for (let i = 0; i < alternative.length; i++) {\n      const otherPath = alternative[i]\n      if (otherPath.length !== searchPath.length) {\n        continue\n      }\n      for (let j = 0; j < otherPath.length; j++) {\n        const searchTok = searchPath[j]\n        const otherTok = otherPath[j]\n        const matchingTokens =\n          searchTok === otherTok || otherTok.categoryMatchesMap[searchTok.tokenTypeIdx] !== undefined\n        if (matchingTokens === false) {\n          continue compareOtherPath\n        }\n      }\n      return true\n    }\n    return false\n  }\n  function isStrictPrefixOfPath(prefix, other) {\n    return (\n      prefix.length < other.length &&\n      every(prefix, (tokType, idx) => {\n        const otherTokType = other[idx]\n        return tokType === otherTokType || otherTokType.categoryMatchesMap[tokType.tokenTypeIdx]\n      })\n    )\n  }\n  function areTokenCategoriesNotUsed(lookAheadPaths) {\n    return every(lookAheadPaths, (singleAltPaths) =>\n      every(singleAltPaths, (singlePath) => every(singlePath, (token) => isEmpty(token.categoryMatches))),\n    )\n  }\n\n  function validateLookahead(options) {\n    const lookaheadValidationErrorMessages = options.lookaheadStrategy.validate({\n      rules: options.rules,\n      tokenTypes: options.tokenTypes,\n      grammarName: options.grammarName,\n    })\n    return map(lookaheadValidationErrorMessages, (errorMessage) =>\n      Object.assign({ type: ParserDefinitionErrorType.CUSTOM_LOOKAHEAD_VALIDATION }, errorMessage),\n    )\n  }\n  function validateGrammar$1(topLevels, tokenTypes, errMsgProvider, grammarName) {\n    const duplicateErrors = flatMap(topLevels, (currTopLevel) =>\n      validateDuplicateProductions(currTopLevel, errMsgProvider),\n    )\n    const termsNamespaceConflictErrors = checkTerminalAndNoneTerminalsNameSpace(topLevels, tokenTypes, errMsgProvider)\n    const tooManyAltsErrors = flatMap(topLevels, (curRule) => validateTooManyAlts(curRule, errMsgProvider))\n    const duplicateRulesError = flatMap(topLevels, (curRule) =>\n      validateRuleDoesNotAlreadyExist(curRule, topLevels, grammarName, errMsgProvider),\n    )\n    return duplicateErrors.concat(termsNamespaceConflictErrors, tooManyAltsErrors, duplicateRulesError)\n  }\n  function validateDuplicateProductions(topLevelRule, errMsgProvider) {\n    const collectorVisitor = new OccurrenceValidationCollector()\n    topLevelRule.accept(collectorVisitor)\n    const allRuleProductions = collectorVisitor.allProductions\n    const productionGroups = groupBy$1(allRuleProductions, identifyProductionForDuplicates)\n    const duplicates = pickBy(productionGroups, (currGroup) => {\n      return currGroup.length > 1\n    })\n    const errors = map(values(duplicates), (currDuplicates) => {\n      const firstProd = head(currDuplicates)\n      const msg = errMsgProvider.buildDuplicateFoundError(topLevelRule, currDuplicates)\n      const dslName = getProductionDslName(firstProd)\n      const defError = {\n        message: msg,\n        type: ParserDefinitionErrorType.DUPLICATE_PRODUCTIONS,\n        ruleName: topLevelRule.name,\n        dslName: dslName,\n        occurrence: firstProd.idx,\n      }\n      const param = getExtraProductionArgument(firstProd)\n      if (param) {\n        defError.parameter = param\n      }\n      return defError\n    })\n    return errors\n  }\n  function identifyProductionForDuplicates(prod) {\n    return `${getProductionDslName(prod)}_#_${prod.idx}_#_${getExtraProductionArgument(prod)}`\n  }\n  function getExtraProductionArgument(prod) {\n    if (prod instanceof Terminal) {\n      return prod.terminalType.name\n    } else if (prod instanceof NonTerminal) {\n      return prod.nonTerminalName\n    } else {\n      return ''\n    }\n  }\n  class OccurrenceValidationCollector extends GAstVisitor {\n    constructor() {\n      super(...arguments)\n      this.allProductions = []\n    }\n    visitNonTerminal(subrule) {\n      this.allProductions.push(subrule)\n    }\n    visitOption(option) {\n      this.allProductions.push(option)\n    }\n    visitRepetitionWithSeparator(manySep) {\n      this.allProductions.push(manySep)\n    }\n    visitRepetitionMandatory(atLeastOne) {\n      this.allProductions.push(atLeastOne)\n    }\n    visitRepetitionMandatoryWithSeparator(atLeastOneSep) {\n      this.allProductions.push(atLeastOneSep)\n    }\n    visitRepetition(many) {\n      this.allProductions.push(many)\n    }\n    visitAlternation(or) {\n      this.allProductions.push(or)\n    }\n    visitTerminal(terminal) {\n      this.allProductions.push(terminal)\n    }\n  }\n  function validateRuleDoesNotAlreadyExist(rule, allRules, className, errMsgProvider) {\n    const errors = []\n    const occurrences = reduce(\n      allRules,\n      (result, curRule) => {\n        if (curRule.name === rule.name) {\n          return result + 1\n        }\n        return result\n      },\n      0,\n    )\n    if (occurrences > 1) {\n      const errMsg = errMsgProvider.buildDuplicateRuleNameError({\n        topLevelRule: rule,\n        grammarName: className,\n      })\n      errors.push({\n        message: errMsg,\n        type: ParserDefinitionErrorType.DUPLICATE_RULE_NAME,\n        ruleName: rule.name,\n      })\n    }\n    return errors\n  }\n  // TODO: is there anyway to get only the rule names of rules inherited from the super grammars?\n  // This is not part of the IGrammarErrorProvider because the validation cannot be performed on\n  // The grammar structure, only at runtime.\n  function validateRuleIsOverridden(ruleName, definedRulesNames, className) {\n    const errors = []\n    let errMsg\n    if (!includes(definedRulesNames, ruleName)) {\n      errMsg =\n        `Invalid rule override, rule: ->${ruleName}<- cannot be overridden in the grammar: ->${className}<-` +\n        `as it is not defined in any of the super grammars `\n      errors.push({\n        message: errMsg,\n        type: ParserDefinitionErrorType.INVALID_RULE_OVERRIDE,\n        ruleName: ruleName,\n      })\n    }\n    return errors\n  }\n  function validateNoLeftRecursion(topRule, currRule, errMsgProvider, path = []) {\n    const errors = []\n    const nextNonTerminals = getFirstNoneTerminal(currRule.definition)\n    if (isEmpty(nextNonTerminals)) {\n      return []\n    } else {\n      const ruleName = topRule.name\n      const foundLeftRecursion = includes(nextNonTerminals, topRule)\n      if (foundLeftRecursion) {\n        errors.push({\n          message: errMsgProvider.buildLeftRecursionError({\n            topLevelRule: topRule,\n            leftRecursionPath: path,\n          }),\n          type: ParserDefinitionErrorType.LEFT_RECURSION,\n          ruleName: ruleName,\n        })\n      }\n      // we are only looking for cyclic paths leading back to the specific topRule\n      // other cyclic paths are ignored, we still need this difference to avoid infinite loops...\n      const validNextSteps = difference$1(nextNonTerminals, path.concat([topRule]))\n      const errorsFromNextSteps = flatMap(validNextSteps, (currRefRule) => {\n        const newPath = clone(path)\n        newPath.push(currRefRule)\n        return validateNoLeftRecursion(topRule, currRefRule, errMsgProvider, newPath)\n      })\n      return errors.concat(errorsFromNextSteps)\n    }\n  }\n  function getFirstNoneTerminal(definition) {\n    let result = []\n    if (isEmpty(definition)) {\n      return result\n    }\n    const firstProd = head(definition)\n    /* istanbul ignore else */\n    if (firstProd instanceof NonTerminal) {\n      result.push(firstProd.referencedRule)\n    } else if (\n      firstProd instanceof Alternative ||\n      firstProd instanceof Option ||\n      firstProd instanceof RepetitionMandatory ||\n      firstProd instanceof RepetitionMandatoryWithSeparator ||\n      firstProd instanceof RepetitionWithSeparator ||\n      firstProd instanceof Repetition\n    ) {\n      result = result.concat(getFirstNoneTerminal(firstProd.definition))\n    } else if (firstProd instanceof Alternation) {\n      // each sub definition in alternation is a FLAT\n      result = flatten(map(firstProd.definition, (currSubDef) => getFirstNoneTerminal(currSubDef.definition)))\n    } else if (firstProd instanceof Terminal);\n    else {\n      throw Error('non exhaustive match')\n    }\n    const isFirstOptional = isOptionalProd(firstProd)\n    const hasMore = definition.length > 1\n    if (isFirstOptional && hasMore) {\n      const rest = drop(definition)\n      return result.concat(getFirstNoneTerminal(rest))\n    } else {\n      return result\n    }\n  }\n  class OrCollector extends GAstVisitor {\n    constructor() {\n      super(...arguments)\n      this.alternations = []\n    }\n    visitAlternation(node) {\n      this.alternations.push(node)\n    }\n  }\n  function validateEmptyOrAlternative(topLevelRule, errMsgProvider) {\n    const orCollector = new OrCollector()\n    topLevelRule.accept(orCollector)\n    const ors = orCollector.alternations\n    const errors = flatMap(ors, (currOr) => {\n      const exceptLast = dropRight(currOr.definition)\n      return flatMap(exceptLast, (currAlternative, currAltIdx) => {\n        const possibleFirstInAlt = nextPossibleTokensAfter([currAlternative], [], tokenStructuredMatcher, 1)\n        if (isEmpty(possibleFirstInAlt)) {\n          return [\n            {\n              message: errMsgProvider.buildEmptyAlternationError({\n                topLevelRule: topLevelRule,\n                alternation: currOr,\n                emptyChoiceIdx: currAltIdx,\n              }),\n              type: ParserDefinitionErrorType.NONE_LAST_EMPTY_ALT,\n              ruleName: topLevelRule.name,\n              occurrence: currOr.idx,\n              alternative: currAltIdx + 1,\n            },\n          ]\n        } else {\n          return []\n        }\n      })\n    })\n    return errors\n  }\n  function validateAmbiguousAlternationAlternatives(topLevelRule, globalMaxLookahead, errMsgProvider) {\n    const orCollector = new OrCollector()\n    topLevelRule.accept(orCollector)\n    let ors = orCollector.alternations\n    // New Handling of ignoring ambiguities\n    // - https://github.com/chevrotain/chevrotain/issues/869\n    ors = reject(ors, (currOr) => currOr.ignoreAmbiguities === true)\n    const errors = flatMap(ors, (currOr) => {\n      const currOccurrence = currOr.idx\n      const actualMaxLookahead = currOr.maxLookahead || globalMaxLookahead\n      const alternatives = getLookaheadPathsForOr(currOccurrence, topLevelRule, actualMaxLookahead, currOr)\n      const altsAmbiguityErrors = checkAlternativesAmbiguities(alternatives, currOr, topLevelRule, errMsgProvider)\n      const altsPrefixAmbiguityErrors = checkPrefixAlternativesAmbiguities(\n        alternatives,\n        currOr,\n        topLevelRule,\n        errMsgProvider,\n      )\n      return altsAmbiguityErrors.concat(altsPrefixAmbiguityErrors)\n    })\n    return errors\n  }\n  class RepetitionCollector extends GAstVisitor {\n    constructor() {\n      super(...arguments)\n      this.allProductions = []\n    }\n    visitRepetitionWithSeparator(manySep) {\n      this.allProductions.push(manySep)\n    }\n    visitRepetitionMandatory(atLeastOne) {\n      this.allProductions.push(atLeastOne)\n    }\n    visitRepetitionMandatoryWithSeparator(atLeastOneSep) {\n      this.allProductions.push(atLeastOneSep)\n    }\n    visitRepetition(many) {\n      this.allProductions.push(many)\n    }\n  }\n  function validateTooManyAlts(topLevelRule, errMsgProvider) {\n    const orCollector = new OrCollector()\n    topLevelRule.accept(orCollector)\n    const ors = orCollector.alternations\n    const errors = flatMap(ors, (currOr) => {\n      if (currOr.definition.length > 255) {\n        return [\n          {\n            message: errMsgProvider.buildTooManyAlternativesError({\n              topLevelRule: topLevelRule,\n              alternation: currOr,\n            }),\n            type: ParserDefinitionErrorType.TOO_MANY_ALTS,\n            ruleName: topLevelRule.name,\n            occurrence: currOr.idx,\n          },\n        ]\n      } else {\n        return []\n      }\n    })\n    return errors\n  }\n  function validateSomeNonEmptyLookaheadPath(topLevelRules, maxLookahead, errMsgProvider) {\n    const errors = []\n    forEach(topLevelRules, (currTopRule) => {\n      const collectorVisitor = new RepetitionCollector()\n      currTopRule.accept(collectorVisitor)\n      const allRuleProductions = collectorVisitor.allProductions\n      forEach(allRuleProductions, (currProd) => {\n        const prodType = getProdType(currProd)\n        const actualMaxLookahead = currProd.maxLookahead || maxLookahead\n        const currOccurrence = currProd.idx\n        const paths = getLookaheadPathsForOptionalProd(currOccurrence, currTopRule, prodType, actualMaxLookahead)\n        const pathsInsideProduction = paths[0]\n        if (isEmpty(flatten(pathsInsideProduction))) {\n          const errMsg = errMsgProvider.buildEmptyRepetitionError({\n            topLevelRule: currTopRule,\n            repetition: currProd,\n          })\n          errors.push({\n            message: errMsg,\n            type: ParserDefinitionErrorType.NO_NON_EMPTY_LOOKAHEAD,\n            ruleName: currTopRule.name,\n          })\n        }\n      })\n    })\n    return errors\n  }\n  function checkAlternativesAmbiguities(alternatives, alternation, rule, errMsgProvider) {\n    const foundAmbiguousPaths = []\n    const identicalAmbiguities = reduce(\n      alternatives,\n      (result, currAlt, currAltIdx) => {\n        // ignore (skip) ambiguities with this alternative\n        if (alternation.definition[currAltIdx].ignoreAmbiguities === true) {\n          return result\n        }\n        forEach(currAlt, (currPath) => {\n          const altsCurrPathAppearsIn = [currAltIdx]\n          forEach(alternatives, (currOtherAlt, currOtherAltIdx) => {\n            if (\n              currAltIdx !== currOtherAltIdx &&\n              containsPath(currOtherAlt, currPath) &&\n              // ignore (skip) ambiguities with this \"other\" alternative\n              alternation.definition[currOtherAltIdx].ignoreAmbiguities !== true\n            ) {\n              altsCurrPathAppearsIn.push(currOtherAltIdx)\n            }\n          })\n          if (altsCurrPathAppearsIn.length > 1 && !containsPath(foundAmbiguousPaths, currPath)) {\n            foundAmbiguousPaths.push(currPath)\n            result.push({\n              alts: altsCurrPathAppearsIn,\n              path: currPath,\n            })\n          }\n        })\n        return result\n      },\n      [],\n    )\n    const currErrors = map(identicalAmbiguities, (currAmbDescriptor) => {\n      const ambgIndices = map(currAmbDescriptor.alts, (currAltIdx) => currAltIdx + 1)\n      const currMessage = errMsgProvider.buildAlternationAmbiguityError({\n        topLevelRule: rule,\n        alternation: alternation,\n        ambiguityIndices: ambgIndices,\n        prefixPath: currAmbDescriptor.path,\n      })\n      return {\n        message: currMessage,\n        type: ParserDefinitionErrorType.AMBIGUOUS_ALTS,\n        ruleName: rule.name,\n        occurrence: alternation.idx,\n        alternatives: currAmbDescriptor.alts,\n      }\n    })\n    return currErrors\n  }\n  function checkPrefixAlternativesAmbiguities(alternatives, alternation, rule, errMsgProvider) {\n    // flatten\n    const pathsAndIndices = reduce(\n      alternatives,\n      (result, currAlt, idx) => {\n        const currPathsAndIdx = map(currAlt, (currPath) => {\n          return { idx: idx, path: currPath }\n        })\n        return result.concat(currPathsAndIdx)\n      },\n      [],\n    )\n    const errors = compact(\n      flatMap(pathsAndIndices, (currPathAndIdx) => {\n        const alternativeGast = alternation.definition[currPathAndIdx.idx]\n        // ignore (skip) ambiguities with this alternative\n        if (alternativeGast.ignoreAmbiguities === true) {\n          return []\n        }\n        const targetIdx = currPathAndIdx.idx\n        const targetPath = currPathAndIdx.path\n        const prefixAmbiguitiesPathsAndIndices = filter(pathsAndIndices, (searchPathAndIdx) => {\n          // prefix ambiguity can only be created from lower idx (higher priority) path\n          return (\n            // ignore (skip) ambiguities with this \"other\" alternative\n            alternation.definition[searchPathAndIdx.idx].ignoreAmbiguities !== true &&\n            searchPathAndIdx.idx < targetIdx &&\n            // checking for strict prefix because identical lookaheads\n            // will be be detected using a different validation.\n            isStrictPrefixOfPath(searchPathAndIdx.path, targetPath)\n          )\n        })\n        const currPathPrefixErrors = map(prefixAmbiguitiesPathsAndIndices, (currAmbPathAndIdx) => {\n          const ambgIndices = [currAmbPathAndIdx.idx + 1, targetIdx + 1]\n          const occurrence = alternation.idx === 0 ? '' : alternation.idx\n          const message = errMsgProvider.buildAlternationPrefixAmbiguityError({\n            topLevelRule: rule,\n            alternation: alternation,\n            ambiguityIndices: ambgIndices,\n            prefixPath: currAmbPathAndIdx.path,\n          })\n          return {\n            message: message,\n            type: ParserDefinitionErrorType.AMBIGUOUS_PREFIX_ALTS,\n            ruleName: rule.name,\n            occurrence: occurrence,\n            alternatives: ambgIndices,\n          }\n        })\n        return currPathPrefixErrors\n      }),\n    )\n    return errors\n  }\n  function checkTerminalAndNoneTerminalsNameSpace(topLevels, tokenTypes, errMsgProvider) {\n    const errors = []\n    const tokenNames = map(tokenTypes, (currToken) => currToken.name)\n    forEach(topLevels, (currRule) => {\n      const currRuleName = currRule.name\n      if (includes(tokenNames, currRuleName)) {\n        const errMsg = errMsgProvider.buildNamespaceConflictError(currRule)\n        errors.push({\n          message: errMsg,\n          type: ParserDefinitionErrorType.CONFLICT_TOKENS_RULES_NAMESPACE,\n          ruleName: currRuleName,\n        })\n      }\n    })\n    return errors\n  }\n\n  function resolveGrammar(options) {\n    const actualOptions = defaults$1(options, {\n      errMsgProvider: defaultGrammarResolverErrorProvider,\n    })\n    const topRulesTable = {}\n    forEach(options.rules, (rule) => {\n      topRulesTable[rule.name] = rule\n    })\n    return resolveGrammar$1(topRulesTable, actualOptions.errMsgProvider)\n  }\n  function validateGrammar(options) {\n    options = defaults$1(options, {\n      errMsgProvider: defaultGrammarValidatorErrorProvider,\n    })\n    return validateGrammar$1(options.rules, options.tokenTypes, options.errMsgProvider, options.grammarName)\n  }\n\n  const MISMATCHED_TOKEN_EXCEPTION = 'MismatchedTokenException'\n  const NO_VIABLE_ALT_EXCEPTION = 'NoViableAltException'\n  const EARLY_EXIT_EXCEPTION = 'EarlyExitException'\n  const NOT_ALL_INPUT_PARSED_EXCEPTION = 'NotAllInputParsedException'\n  const RECOGNITION_EXCEPTION_NAMES = [\n    MISMATCHED_TOKEN_EXCEPTION,\n    NO_VIABLE_ALT_EXCEPTION,\n    EARLY_EXIT_EXCEPTION,\n    NOT_ALL_INPUT_PARSED_EXCEPTION,\n  ]\n  Object.freeze(RECOGNITION_EXCEPTION_NAMES)\n  // hacks to bypass no support for custom Errors in javascript/typescript\n  function isRecognitionException(error) {\n    // can't do instanceof on hacked custom js exceptions\n    return includes(RECOGNITION_EXCEPTION_NAMES, error.name)\n  }\n  class RecognitionException extends Error {\n    constructor(message, token) {\n      super(message)\n      this.token = token\n      this.resyncedTokens = []\n      // fix prototype chain when typescript target is ES5\n      Object.setPrototypeOf(this, new.target.prototype)\n      /* istanbul ignore next - V8 workaround to remove constructor from stacktrace when typescript target is ES5 */\n      if (Error.captureStackTrace) {\n        Error.captureStackTrace(this, this.constructor)\n      }\n    }\n  }\n  class MismatchedTokenException extends RecognitionException {\n    constructor(message, token, previousToken) {\n      super(message, token)\n      this.previousToken = previousToken\n      this.name = MISMATCHED_TOKEN_EXCEPTION\n    }\n  }\n  class NoViableAltException extends RecognitionException {\n    constructor(message, token, previousToken) {\n      super(message, token)\n      this.previousToken = previousToken\n      this.name = NO_VIABLE_ALT_EXCEPTION\n    }\n  }\n  class NotAllInputParsedException extends RecognitionException {\n    constructor(message, token) {\n      super(message, token)\n      this.name = NOT_ALL_INPUT_PARSED_EXCEPTION\n    }\n  }\n  class EarlyExitException extends RecognitionException {\n    constructor(message, token, previousToken) {\n      super(message, token)\n      this.previousToken = previousToken\n      this.name = EARLY_EXIT_EXCEPTION\n    }\n  }\n\n  const EOF_FOLLOW_KEY = {}\n  const IN_RULE_RECOVERY_EXCEPTION = 'InRuleRecoveryException'\n  class InRuleRecoveryException extends Error {\n    constructor(message) {\n      super(message)\n      this.name = IN_RULE_RECOVERY_EXCEPTION\n    }\n  }\n  /**\n   * This trait is responsible for the error recovery and fault tolerant logic\n   */\n  class Recoverable {\n    initRecoverable(config) {\n      this.firstAfterRepMap = {}\n      this.resyncFollows = {}\n      this.recoveryEnabled = has(config, 'recoveryEnabled')\n        ? config.recoveryEnabled // assumes end user provides the correct config value/type\n        : DEFAULT_PARSER_CONFIG.recoveryEnabled\n      // performance optimization, NOOP will be inlined which\n      // effectively means that this optional feature does not exist\n      // when not used.\n      if (this.recoveryEnabled) {\n        this.attemptInRepetitionRecovery = attemptInRepetitionRecovery\n      }\n    }\n    getTokenToInsert(tokType) {\n      const tokToInsert = createTokenInstance(tokType, '', NaN, NaN, NaN, NaN, NaN, NaN)\n      tokToInsert.isInsertedInRecovery = true\n      return tokToInsert\n    }\n    canTokenTypeBeInsertedInRecovery(tokType) {\n      return true\n    }\n    canTokenTypeBeDeletedInRecovery(tokType) {\n      return true\n    }\n    tryInRepetitionRecovery(grammarRule, grammarRuleArgs, lookAheadFunc, expectedTokType) {\n      // TODO: can the resyncTokenType be cached?\n      const reSyncTokType = this.findReSyncTokenType()\n      const savedLexerState = this.exportLexerState()\n      const resyncedTokens = []\n      let passedResyncPoint = false\n      const nextTokenWithoutResync = this.LA(1)\n      let currToken = this.LA(1)\n      const generateErrorMessage = () => {\n        const previousToken = this.LA(0)\n        // we are preemptively re-syncing before an error has been detected, therefor we must reproduce\n        // the error that would have been thrown\n        const msg = this.errorMessageProvider.buildMismatchTokenMessage({\n          expected: expectedTokType,\n          actual: nextTokenWithoutResync,\n          previous: previousToken,\n          ruleName: this.getCurrRuleFullName(),\n        })\n        const error = new MismatchedTokenException(msg, nextTokenWithoutResync, this.LA(0))\n        // the first token here will be the original cause of the error, this is not part of the resyncedTokens property.\n        error.resyncedTokens = dropRight(resyncedTokens)\n        this.SAVE_ERROR(error)\n      }\n      while (!passedResyncPoint) {\n        // re-synced to a point where we can safely exit the repetition/\n        if (this.tokenMatcher(currToken, expectedTokType)) {\n          generateErrorMessage()\n          return // must return here to avoid reverting the inputIdx\n        } else if (lookAheadFunc.call(this)) {\n          // we skipped enough tokens so we can resync right back into another iteration of the repetition grammar rule\n          generateErrorMessage()\n          // recursive invocation in other to support multiple re-syncs in the same top level repetition grammar rule\n          grammarRule.apply(this, grammarRuleArgs)\n          return // must return here to avoid reverting the inputIdx\n        } else if (this.tokenMatcher(currToken, reSyncTokType)) {\n          passedResyncPoint = true\n        } else {\n          currToken = this.SKIP_TOKEN()\n          this.addToResyncTokens(currToken, resyncedTokens)\n        }\n      }\n      // we were unable to find a CLOSER point to resync inside the Repetition, reset the state.\n      // The parsing exception we were trying to prevent will happen in the NEXT parsing step. it may be handled by\n      // \"between rules\" resync recovery later in the flow.\n      this.importLexerState(savedLexerState)\n    }\n    shouldInRepetitionRecoveryBeTried(expectTokAfterLastMatch, nextTokIdx, notStuck) {\n      // Edge case of arriving from a MANY repetition which is stuck\n      // Attempting recovery in this case could cause an infinite loop\n      if (notStuck === false) {\n        return false\n      }\n      // no need to recover, next token is what we expect...\n      if (this.tokenMatcher(this.LA(1), expectTokAfterLastMatch)) {\n        return false\n      }\n      // error recovery is disabled during backtracking as it can make the parser ignore a valid grammar path\n      // and prefer some backtracking path that includes recovered errors.\n      if (this.isBackTracking()) {\n        return false\n      }\n      // if we can perform inRule recovery (single token insertion or deletion) we always prefer that recovery algorithm\n      // because if it works, it makes the least amount of changes to the input stream (greedy algorithm)\n      //noinspection RedundantIfStatementJS\n      if (\n        this.canPerformInRuleRecovery(\n          expectTokAfterLastMatch,\n          this.getFollowsForInRuleRecovery(expectTokAfterLastMatch, nextTokIdx),\n        )\n      ) {\n        return false\n      }\n      return true\n    }\n    // Error Recovery functionality\n    getFollowsForInRuleRecovery(tokType, tokIdxInRule) {\n      const grammarPath = this.getCurrentGrammarPath(tokType, tokIdxInRule)\n      const follows = this.getNextPossibleTokenTypes(grammarPath)\n      return follows\n    }\n    tryInRuleRecovery(expectedTokType, follows) {\n      if (this.canRecoverWithSingleTokenInsertion(expectedTokType, follows)) {\n        const tokToInsert = this.getTokenToInsert(expectedTokType)\n        return tokToInsert\n      }\n      if (this.canRecoverWithSingleTokenDeletion(expectedTokType)) {\n        const nextTok = this.SKIP_TOKEN()\n        this.consumeToken()\n        return nextTok\n      }\n      throw new InRuleRecoveryException('sad sad panda')\n    }\n    canPerformInRuleRecovery(expectedToken, follows) {\n      return (\n        this.canRecoverWithSingleTokenInsertion(expectedToken, follows) ||\n        this.canRecoverWithSingleTokenDeletion(expectedToken)\n      )\n    }\n    canRecoverWithSingleTokenInsertion(expectedTokType, follows) {\n      if (!this.canTokenTypeBeInsertedInRecovery(expectedTokType)) {\n        return false\n      }\n      // must know the possible following tokens to perform single token insertion\n      if (isEmpty(follows)) {\n        return false\n      }\n      const mismatchedTok = this.LA(1)\n      const isMisMatchedTokInFollows =\n        find$1(follows, (possibleFollowsTokType) => {\n          return this.tokenMatcher(mismatchedTok, possibleFollowsTokType)\n        }) !== undefined\n      return isMisMatchedTokInFollows\n    }\n    canRecoverWithSingleTokenDeletion(expectedTokType) {\n      if (!this.canTokenTypeBeDeletedInRecovery(expectedTokType)) {\n        return false\n      }\n      const isNextTokenWhatIsExpected = this.tokenMatcher(this.LA(2), expectedTokType)\n      return isNextTokenWhatIsExpected\n    }\n    isInCurrentRuleReSyncSet(tokenTypeIdx) {\n      const followKey = this.getCurrFollowKey()\n      const currentRuleReSyncSet = this.getFollowSetFromFollowKey(followKey)\n      return includes(currentRuleReSyncSet, tokenTypeIdx)\n    }\n    findReSyncTokenType() {\n      const allPossibleReSyncTokTypes = this.flattenFollowSet()\n      // this loop will always terminate as EOF is always in the follow stack and also always (virtually) in the input\n      let nextToken = this.LA(1)\n      let k = 2\n      while (true) {\n        const foundMatch = find$1(allPossibleReSyncTokTypes, (resyncTokType) => {\n          const canMatch = tokenMatcher(nextToken, resyncTokType)\n          return canMatch\n        })\n        if (foundMatch !== undefined) {\n          return foundMatch\n        }\n        nextToken = this.LA(k)\n        k++\n      }\n    }\n    getCurrFollowKey() {\n      // the length is at least one as we always add the ruleName to the stack before invoking the rule.\n      if (this.RULE_STACK.length === 1) {\n        return EOF_FOLLOW_KEY\n      }\n      const currRuleShortName = this.getLastExplicitRuleShortName()\n      const currRuleIdx = this.getLastExplicitRuleOccurrenceIndex()\n      const prevRuleShortName = this.getPreviousExplicitRuleShortName()\n      return {\n        ruleName: this.shortRuleNameToFullName(currRuleShortName),\n        idxInCallingRule: currRuleIdx,\n        inRule: this.shortRuleNameToFullName(prevRuleShortName),\n      }\n    }\n    buildFullFollowKeyStack() {\n      const explicitRuleStack = this.RULE_STACK\n      const explicitOccurrenceStack = this.RULE_OCCURRENCE_STACK\n      return map(explicitRuleStack, (ruleName, idx) => {\n        if (idx === 0) {\n          return EOF_FOLLOW_KEY\n        }\n        return {\n          ruleName: this.shortRuleNameToFullName(ruleName),\n          idxInCallingRule: explicitOccurrenceStack[idx],\n          inRule: this.shortRuleNameToFullName(explicitRuleStack[idx - 1]),\n        }\n      })\n    }\n    flattenFollowSet() {\n      const followStack = map(this.buildFullFollowKeyStack(), (currKey) => {\n        return this.getFollowSetFromFollowKey(currKey)\n      })\n      return flatten(followStack)\n    }\n    getFollowSetFromFollowKey(followKey) {\n      if (followKey === EOF_FOLLOW_KEY) {\n        return [EOF]\n      }\n      const followName = followKey.ruleName + followKey.idxInCallingRule + IN + followKey.inRule\n      return this.resyncFollows[followName]\n    }\n    // It does not make any sense to include a virtual EOF token in the list of resynced tokens\n    // as EOF does not really exist and thus does not contain any useful information (line/column numbers)\n    addToResyncTokens(token, resyncTokens) {\n      if (!this.tokenMatcher(token, EOF)) {\n        resyncTokens.push(token)\n      }\n      return resyncTokens\n    }\n    reSyncTo(tokType) {\n      const resyncedTokens = []\n      let nextTok = this.LA(1)\n      while (this.tokenMatcher(nextTok, tokType) === false) {\n        nextTok = this.SKIP_TOKEN()\n        this.addToResyncTokens(nextTok, resyncedTokens)\n      }\n      // the last token is not part of the error.\n      return dropRight(resyncedTokens)\n    }\n    attemptInRepetitionRecovery(prodFunc, args, lookaheadFunc, dslMethodIdx, prodOccurrence, nextToksWalker, notStuck) {\n      // by default this is a NO-OP\n      // The actual implementation is with the function(not method) below\n    }\n    getCurrentGrammarPath(tokType, tokIdxInRule) {\n      const pathRuleStack = this.getHumanReadableRuleStack()\n      const pathOccurrenceStack = clone(this.RULE_OCCURRENCE_STACK)\n      const grammarPath = {\n        ruleStack: pathRuleStack,\n        occurrenceStack: pathOccurrenceStack,\n        lastTok: tokType,\n        lastTokOccurrence: tokIdxInRule,\n      }\n      return grammarPath\n    }\n    getHumanReadableRuleStack() {\n      return map(this.RULE_STACK, (currShortName) => this.shortRuleNameToFullName(currShortName))\n    }\n  }\n  function attemptInRepetitionRecovery(\n    prodFunc,\n    args,\n    lookaheadFunc,\n    dslMethodIdx,\n    prodOccurrence,\n    nextToksWalker,\n    notStuck,\n  ) {\n    const key = this.getKeyForAutomaticLookahead(dslMethodIdx, prodOccurrence)\n    let firstAfterRepInfo = this.firstAfterRepMap[key]\n    if (firstAfterRepInfo === undefined) {\n      const currRuleName = this.getCurrRuleFullName()\n      const ruleGrammar = this.getGAstProductions()[currRuleName]\n      const walker = new nextToksWalker(ruleGrammar, prodOccurrence)\n      firstAfterRepInfo = walker.startWalking()\n      this.firstAfterRepMap[key] = firstAfterRepInfo\n    }\n    let expectTokAfterLastMatch = firstAfterRepInfo.token\n    let nextTokIdx = firstAfterRepInfo.occurrence\n    const isEndOfRule = firstAfterRepInfo.isEndOfRule\n    // special edge case of a TOP most repetition after which the input should END.\n    // this will force an attempt for inRule recovery in that scenario.\n    if (this.RULE_STACK.length === 1 && isEndOfRule && expectTokAfterLastMatch === undefined) {\n      expectTokAfterLastMatch = EOF\n      nextTokIdx = 1\n    }\n    // We don't have anything to re-sync to...\n    // this condition was extracted from `shouldInRepetitionRecoveryBeTried` to act as a type-guard\n    if (expectTokAfterLastMatch === undefined || nextTokIdx === undefined) {\n      return\n    }\n    if (this.shouldInRepetitionRecoveryBeTried(expectTokAfterLastMatch, nextTokIdx, notStuck)) {\n      // TODO: performance optimization: instead of passing the original args here, we modify\n      // the args param (or create a new one) and make sure the lookahead func is explicitly provided\n      // to avoid searching the cache for it once more.\n      this.tryInRepetitionRecovery(prodFunc, args, lookaheadFunc, expectTokAfterLastMatch)\n    }\n  }\n\n  // Lookahead keys are 32Bit integers in the form\n  // TTTTTTTT-ZZZZZZZZZZZZ-YYYY-XXXXXXXX\n  // XXXX -> Occurrence Index bitmap.\n  // YYYY -> DSL Method Type bitmap.\n  // ZZZZZZZZZZZZZZZ -> Rule short Index bitmap.\n  // TTTTTTTTT -> alternation alternative index bitmap\n  const BITS_FOR_METHOD_TYPE = 4\n  const BITS_FOR_OCCURRENCE_IDX = 8\n  // short string used as part of mapping keys.\n  // being short improves the performance when composing KEYS for maps out of these\n  // The 5 - 8 bits (16 possible values, are reserved for the DSL method indices)\n  const OR_IDX = 1 << BITS_FOR_OCCURRENCE_IDX\n  const OPTION_IDX = 2 << BITS_FOR_OCCURRENCE_IDX\n  const MANY_IDX = 3 << BITS_FOR_OCCURRENCE_IDX\n  const AT_LEAST_ONE_IDX = 4 << BITS_FOR_OCCURRENCE_IDX\n  const MANY_SEP_IDX = 5 << BITS_FOR_OCCURRENCE_IDX\n  const AT_LEAST_ONE_SEP_IDX = 6 << BITS_FOR_OCCURRENCE_IDX\n  // this actually returns a number, but it is always used as a string (object prop key)\n  function getKeyForAutomaticLookahead(ruleIdx, dslMethodIdx, occurrence) {\n    return occurrence | dslMethodIdx | ruleIdx\n  }\n\n  class LLkLookaheadStrategy {\n    constructor(options) {\n      var _a\n      this.maxLookahead =\n        (_a = options === null || options === void 0 ? void 0 : options.maxLookahead) !== null && _a !== void 0\n          ? _a\n          : DEFAULT_PARSER_CONFIG.maxLookahead\n    }\n    validate(options) {\n      const leftRecursionErrors = this.validateNoLeftRecursion(options.rules)\n      if (isEmpty(leftRecursionErrors)) {\n        const emptyAltErrors = this.validateEmptyOrAlternatives(options.rules)\n        const ambiguousAltsErrors = this.validateAmbiguousAlternationAlternatives(options.rules, this.maxLookahead)\n        const emptyRepetitionErrors = this.validateSomeNonEmptyLookaheadPath(options.rules, this.maxLookahead)\n        const allErrors = [...leftRecursionErrors, ...emptyAltErrors, ...ambiguousAltsErrors, ...emptyRepetitionErrors]\n        return allErrors\n      }\n      return leftRecursionErrors\n    }\n    validateNoLeftRecursion(rules) {\n      return flatMap(rules, (currTopRule) =>\n        validateNoLeftRecursion(currTopRule, currTopRule, defaultGrammarValidatorErrorProvider),\n      )\n    }\n    validateEmptyOrAlternatives(rules) {\n      return flatMap(rules, (currTopRule) =>\n        validateEmptyOrAlternative(currTopRule, defaultGrammarValidatorErrorProvider),\n      )\n    }\n    validateAmbiguousAlternationAlternatives(rules, maxLookahead) {\n      return flatMap(rules, (currTopRule) =>\n        validateAmbiguousAlternationAlternatives(currTopRule, maxLookahead, defaultGrammarValidatorErrorProvider),\n      )\n    }\n    validateSomeNonEmptyLookaheadPath(rules, maxLookahead) {\n      return validateSomeNonEmptyLookaheadPath(rules, maxLookahead, defaultGrammarValidatorErrorProvider)\n    }\n    buildLookaheadForAlternation(options) {\n      return buildLookaheadFuncForOr(\n        options.prodOccurrence,\n        options.rule,\n        options.maxLookahead,\n        options.hasPredicates,\n        options.dynamicTokensEnabled,\n        buildAlternativesLookAheadFunc,\n      )\n    }\n    buildLookaheadForOptional(options) {\n      return buildLookaheadFuncForOptionalProd(\n        options.prodOccurrence,\n        options.rule,\n        options.maxLookahead,\n        options.dynamicTokensEnabled,\n        getProdType(options.prodType),\n        buildSingleAlternativeLookaheadFunction,\n      )\n    }\n  }\n\n  /**\n   * Trait responsible for the lookahead related utilities and optimizations.\n   */\n  class LooksAhead {\n    initLooksAhead(config) {\n      this.dynamicTokensEnabled = has(config, 'dynamicTokensEnabled')\n        ? config.dynamicTokensEnabled // assumes end user provides the correct config value/type\n        : DEFAULT_PARSER_CONFIG.dynamicTokensEnabled\n      this.maxLookahead = has(config, 'maxLookahead')\n        ? config.maxLookahead // assumes end user provides the correct config value/type\n        : DEFAULT_PARSER_CONFIG.maxLookahead\n      this.lookaheadStrategy = has(config, 'lookaheadStrategy')\n        ? config.lookaheadStrategy // assumes end user provides the correct config value/type\n        : new LLkLookaheadStrategy({ maxLookahead: this.maxLookahead })\n      this.lookAheadFuncsCache = new Map()\n    }\n    preComputeLookaheadFunctions(rules) {\n      forEach(rules, (currRule) => {\n        this.TRACE_INIT(`${currRule.name} Rule Lookahead`, () => {\n          const {\n            alternation,\n            repetition,\n            option,\n            repetitionMandatory,\n            repetitionMandatoryWithSeparator,\n            repetitionWithSeparator,\n          } = collectMethods(currRule)\n          forEach(alternation, (currProd) => {\n            const prodIdx = currProd.idx === 0 ? '' : currProd.idx\n            this.TRACE_INIT(`${getProductionDslName(currProd)}${prodIdx}`, () => {\n              const laFunc = this.lookaheadStrategy.buildLookaheadForAlternation({\n                prodOccurrence: currProd.idx,\n                rule: currRule,\n                maxLookahead: currProd.maxLookahead || this.maxLookahead,\n                hasPredicates: currProd.hasPredicates,\n                dynamicTokensEnabled: this.dynamicTokensEnabled,\n              })\n              const key = getKeyForAutomaticLookahead(this.fullRuleNameToShort[currRule.name], OR_IDX, currProd.idx)\n              this.setLaFuncCache(key, laFunc)\n            })\n          })\n          forEach(repetition, (currProd) => {\n            this.computeLookaheadFunc(\n              currRule,\n              currProd.idx,\n              MANY_IDX,\n              'Repetition',\n              currProd.maxLookahead,\n              getProductionDslName(currProd),\n            )\n          })\n          forEach(option, (currProd) => {\n            this.computeLookaheadFunc(\n              currRule,\n              currProd.idx,\n              OPTION_IDX,\n              'Option',\n              currProd.maxLookahead,\n              getProductionDslName(currProd),\n            )\n          })\n          forEach(repetitionMandatory, (currProd) => {\n            this.computeLookaheadFunc(\n              currRule,\n              currProd.idx,\n              AT_LEAST_ONE_IDX,\n              'RepetitionMandatory',\n              currProd.maxLookahead,\n              getProductionDslName(currProd),\n            )\n          })\n          forEach(repetitionMandatoryWithSeparator, (currProd) => {\n            this.computeLookaheadFunc(\n              currRule,\n              currProd.idx,\n              AT_LEAST_ONE_SEP_IDX,\n              'RepetitionMandatoryWithSeparator',\n              currProd.maxLookahead,\n              getProductionDslName(currProd),\n            )\n          })\n          forEach(repetitionWithSeparator, (currProd) => {\n            this.computeLookaheadFunc(\n              currRule,\n              currProd.idx,\n              MANY_SEP_IDX,\n              'RepetitionWithSeparator',\n              currProd.maxLookahead,\n              getProductionDslName(currProd),\n            )\n          })\n        })\n      })\n    }\n    computeLookaheadFunc(rule, prodOccurrence, prodKey, prodType, prodMaxLookahead, dslMethodName) {\n      this.TRACE_INIT(`${dslMethodName}${prodOccurrence === 0 ? '' : prodOccurrence}`, () => {\n        const laFunc = this.lookaheadStrategy.buildLookaheadForOptional({\n          prodOccurrence,\n          rule,\n          maxLookahead: prodMaxLookahead || this.maxLookahead,\n          dynamicTokensEnabled: this.dynamicTokensEnabled,\n          prodType,\n        })\n        const key = getKeyForAutomaticLookahead(this.fullRuleNameToShort[rule.name], prodKey, prodOccurrence)\n        this.setLaFuncCache(key, laFunc)\n      })\n    }\n    // this actually returns a number, but it is always used as a string (object prop key)\n    getKeyForAutomaticLookahead(dslMethodIdx, occurrence) {\n      const currRuleShortName = this.getLastExplicitRuleShortName()\n      return getKeyForAutomaticLookahead(currRuleShortName, dslMethodIdx, occurrence)\n    }\n    getLaFuncFromCache(key) {\n      return this.lookAheadFuncsCache.get(key)\n    }\n    /* istanbul ignore next */\n    setLaFuncCache(key, value) {\n      this.lookAheadFuncsCache.set(key, value)\n    }\n  }\n  class DslMethodsCollectorVisitor extends GAstVisitor {\n    constructor() {\n      super(...arguments)\n      this.dslMethods = {\n        option: [],\n        alternation: [],\n        repetition: [],\n        repetitionWithSeparator: [],\n        repetitionMandatory: [],\n        repetitionMandatoryWithSeparator: [],\n      }\n    }\n    reset() {\n      this.dslMethods = {\n        option: [],\n        alternation: [],\n        repetition: [],\n        repetitionWithSeparator: [],\n        repetitionMandatory: [],\n        repetitionMandatoryWithSeparator: [],\n      }\n    }\n    visitOption(option) {\n      this.dslMethods.option.push(option)\n    }\n    visitRepetitionWithSeparator(manySep) {\n      this.dslMethods.repetitionWithSeparator.push(manySep)\n    }\n    visitRepetitionMandatory(atLeastOne) {\n      this.dslMethods.repetitionMandatory.push(atLeastOne)\n    }\n    visitRepetitionMandatoryWithSeparator(atLeastOneSep) {\n      this.dslMethods.repetitionMandatoryWithSeparator.push(atLeastOneSep)\n    }\n    visitRepetition(many) {\n      this.dslMethods.repetition.push(many)\n    }\n    visitAlternation(or) {\n      this.dslMethods.alternation.push(or)\n    }\n  }\n  const collectorVisitor = new DslMethodsCollectorVisitor()\n  function collectMethods(rule) {\n    collectorVisitor.reset()\n    rule.accept(collectorVisitor)\n    const dslMethods = collectorVisitor.dslMethods\n    // avoid uncleaned references\n    collectorVisitor.reset()\n    return dslMethods\n  }\n\n  /**\n   * This nodeLocation tracking is not efficient and should only be used\n   * when error recovery is enabled or the Token Vector contains virtual Tokens\n   * (e.g, Python Indent/Outdent)\n   * As it executes the calculation for every single terminal/nonTerminal\n   * and does not rely on the fact the token vector is **sorted**\n   */\n  function setNodeLocationOnlyOffset(currNodeLocation, newLocationInfo) {\n    // First (valid) update for this cst node\n    if (isNaN(currNodeLocation.startOffset) === true) {\n      // assumption1: Token location information is either NaN or a valid number\n      // assumption2: Token location information is fully valid if it exist\n      // (both start/end offsets exist and are numbers).\n      currNodeLocation.startOffset = newLocationInfo.startOffset\n      currNodeLocation.endOffset = newLocationInfo.endOffset\n    }\n    // Once the startOffset has been updated with a valid number it should never receive\n    // any farther updates as the Token vector is sorted.\n    // We still have to check this this condition for every new possible location info\n    // because with error recovery enabled we may encounter invalid tokens (NaN location props)\n    else if (currNodeLocation.endOffset < newLocationInfo.endOffset === true) {\n      currNodeLocation.endOffset = newLocationInfo.endOffset\n    }\n  }\n  /**\n   * This nodeLocation tracking is not efficient and should only be used\n   * when error recovery is enabled or the Token Vector contains virtual Tokens\n   * (e.g, Python Indent/Outdent)\n   * As it executes the calculation for every single terminal/nonTerminal\n   * and does not rely on the fact the token vector is **sorted**\n   */\n  function setNodeLocationFull(currNodeLocation, newLocationInfo) {\n    // First (valid) update for this cst node\n    if (isNaN(currNodeLocation.startOffset) === true) {\n      // assumption1: Token location information is either NaN or a valid number\n      // assumption2: Token location information is fully valid if it exist\n      // (all start/end props exist and are numbers).\n      currNodeLocation.startOffset = newLocationInfo.startOffset\n      currNodeLocation.startColumn = newLocationInfo.startColumn\n      currNodeLocation.startLine = newLocationInfo.startLine\n      currNodeLocation.endOffset = newLocationInfo.endOffset\n      currNodeLocation.endColumn = newLocationInfo.endColumn\n      currNodeLocation.endLine = newLocationInfo.endLine\n    }\n    // Once the start props has been updated with a valid number it should never receive\n    // any farther updates as the Token vector is sorted.\n    // We still have to check this this condition for every new possible location info\n    // because with error recovery enabled we may encounter invalid tokens (NaN location props)\n    else if (currNodeLocation.endOffset < newLocationInfo.endOffset === true) {\n      currNodeLocation.endOffset = newLocationInfo.endOffset\n      currNodeLocation.endColumn = newLocationInfo.endColumn\n      currNodeLocation.endLine = newLocationInfo.endLine\n    }\n  }\n  function addTerminalToCst(node, token, tokenTypeName) {\n    if (node.children[tokenTypeName] === undefined) {\n      node.children[tokenTypeName] = [token]\n    } else {\n      node.children[tokenTypeName].push(token)\n    }\n  }\n  function addNoneTerminalToCst(node, ruleName, ruleResult) {\n    if (node.children[ruleName] === undefined) {\n      node.children[ruleName] = [ruleResult]\n    } else {\n      node.children[ruleName].push(ruleResult)\n    }\n  }\n\n  const NAME = 'name'\n  function defineNameProp(obj, nameValue) {\n    Object.defineProperty(obj, NAME, {\n      enumerable: false,\n      configurable: true,\n      writable: false,\n      value: nameValue,\n    })\n  }\n\n  function defaultVisit(ctx, param) {\n    const childrenNames = keys(ctx)\n    const childrenNamesLength = childrenNames.length\n    for (let i = 0; i < childrenNamesLength; i++) {\n      const currChildName = childrenNames[i]\n      const currChildArray = ctx[currChildName]\n      const currChildArrayLength = currChildArray.length\n      for (let j = 0; j < currChildArrayLength; j++) {\n        const currChild = currChildArray[j]\n        // distinction between Tokens Children and CstNode children\n        if (currChild.tokenTypeIdx === undefined) {\n          this[currChild.name](currChild.children, param)\n        }\n      }\n    }\n    // defaultVisit does not support generic out param\n  }\n  function createBaseSemanticVisitorConstructor(grammarName, ruleNames) {\n    const derivedConstructor = function () {}\n    // can be overwritten according to:\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n    // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n    defineNameProp(derivedConstructor, grammarName + 'BaseSemantics')\n    const semanticProto = {\n      visit: function (cstNode, param) {\n        // enables writing more concise visitor methods when CstNode has only a single child\n        if (isArray$1(cstNode)) {\n          // A CST Node's children dictionary can never have empty arrays as values\n          // If a key is defined there will be at least one element in the corresponding value array.\n          cstNode = cstNode[0]\n        }\n        // enables passing optional CstNodes concisely.\n        if (isUndefined(cstNode)) {\n          return undefined\n        }\n        return this[cstNode.name](cstNode.children, param)\n      },\n      validateVisitor: function () {\n        const semanticDefinitionErrors = validateVisitor(this, ruleNames)\n        if (!isEmpty(semanticDefinitionErrors)) {\n          const errorMessages = map(semanticDefinitionErrors, (currDefError) => currDefError.msg)\n          throw Error(\n            `Errors Detected in CST Visitor <${this.constructor.name}>:\\n\\t` +\n              `${errorMessages.join('\\n\\n').replace(/\\n/g, '\\n\\t')}`,\n          )\n        }\n      },\n    }\n    derivedConstructor.prototype = semanticProto\n    derivedConstructor.prototype.constructor = derivedConstructor\n    derivedConstructor._RULE_NAMES = ruleNames\n    return derivedConstructor\n  }\n  function createBaseVisitorConstructorWithDefaults(grammarName, ruleNames, baseConstructor) {\n    const derivedConstructor = function () {}\n    // can be overwritten according to:\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n    // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n    defineNameProp(derivedConstructor, grammarName + 'BaseSemanticsWithDefaults')\n    const withDefaultsProto = Object.create(baseConstructor.prototype)\n    forEach(ruleNames, (ruleName) => {\n      withDefaultsProto[ruleName] = defaultVisit\n    })\n    derivedConstructor.prototype = withDefaultsProto\n    derivedConstructor.prototype.constructor = derivedConstructor\n    return derivedConstructor\n  }\n  var CstVisitorDefinitionError\n  ;(function (CstVisitorDefinitionError) {\n    CstVisitorDefinitionError[(CstVisitorDefinitionError['REDUNDANT_METHOD'] = 0)] = 'REDUNDANT_METHOD'\n    CstVisitorDefinitionError[(CstVisitorDefinitionError['MISSING_METHOD'] = 1)] = 'MISSING_METHOD'\n  })(CstVisitorDefinitionError || (CstVisitorDefinitionError = {}))\n  function validateVisitor(visitorInstance, ruleNames) {\n    const missingErrors = validateMissingCstMethods(visitorInstance, ruleNames)\n    return missingErrors\n  }\n  function validateMissingCstMethods(visitorInstance, ruleNames) {\n    const missingRuleNames = filter(ruleNames, (currRuleName) => {\n      return isFunction(visitorInstance[currRuleName]) === false\n    })\n    const errors = map(missingRuleNames, (currRuleName) => {\n      return {\n        msg: `Missing visitor method: <${currRuleName}> on ${visitorInstance.constructor.name} CST Visitor.`,\n        type: CstVisitorDefinitionError.MISSING_METHOD,\n        methodName: currRuleName,\n      }\n    })\n    return compact(errors)\n  }\n\n  /**\n   * This trait is responsible for the CST building logic.\n   */\n  class TreeBuilder {\n    initTreeBuilder(config) {\n      this.CST_STACK = []\n      // outputCst is no longer exposed/defined in the pubic API\n      this.outputCst = config.outputCst\n      this.nodeLocationTracking = has(config, 'nodeLocationTracking')\n        ? config.nodeLocationTracking // assumes end user provides the correct config value/type\n        : DEFAULT_PARSER_CONFIG.nodeLocationTracking\n      if (!this.outputCst) {\n        this.cstInvocationStateUpdate = noop\n        this.cstFinallyStateUpdate = noop\n        this.cstPostTerminal = noop\n        this.cstPostNonTerminal = noop\n        this.cstPostRule = noop\n      } else {\n        if (/full/i.test(this.nodeLocationTracking)) {\n          if (this.recoveryEnabled) {\n            this.setNodeLocationFromToken = setNodeLocationFull\n            this.setNodeLocationFromNode = setNodeLocationFull\n            this.cstPostRule = noop\n            this.setInitialNodeLocation = this.setInitialNodeLocationFullRecovery\n          } else {\n            this.setNodeLocationFromToken = noop\n            this.setNodeLocationFromNode = noop\n            this.cstPostRule = this.cstPostRuleFull\n            this.setInitialNodeLocation = this.setInitialNodeLocationFullRegular\n          }\n        } else if (/onlyOffset/i.test(this.nodeLocationTracking)) {\n          if (this.recoveryEnabled) {\n            this.setNodeLocationFromToken = setNodeLocationOnlyOffset\n            this.setNodeLocationFromNode = setNodeLocationOnlyOffset\n            this.cstPostRule = noop\n            this.setInitialNodeLocation = this.setInitialNodeLocationOnlyOffsetRecovery\n          } else {\n            this.setNodeLocationFromToken = noop\n            this.setNodeLocationFromNode = noop\n            this.cstPostRule = this.cstPostRuleOnlyOffset\n            this.setInitialNodeLocation = this.setInitialNodeLocationOnlyOffsetRegular\n          }\n        } else if (/none/i.test(this.nodeLocationTracking)) {\n          this.setNodeLocationFromToken = noop\n          this.setNodeLocationFromNode = noop\n          this.cstPostRule = noop\n          this.setInitialNodeLocation = noop\n        } else {\n          throw Error(`Invalid <nodeLocationTracking> config option: \"${config.nodeLocationTracking}\"`)\n        }\n      }\n    }\n    setInitialNodeLocationOnlyOffsetRecovery(cstNode) {\n      cstNode.location = {\n        startOffset: NaN,\n        endOffset: NaN,\n      }\n    }\n    setInitialNodeLocationOnlyOffsetRegular(cstNode) {\n      cstNode.location = {\n        // without error recovery the starting Location of a new CstNode is guaranteed\n        // To be the next Token's startOffset (for valid inputs).\n        // For invalid inputs there won't be any CSTOutput so this potential\n        // inaccuracy does not matter\n        startOffset: this.LA(1).startOffset,\n        endOffset: NaN,\n      }\n    }\n    setInitialNodeLocationFullRecovery(cstNode) {\n      cstNode.location = {\n        startOffset: NaN,\n        startLine: NaN,\n        startColumn: NaN,\n        endOffset: NaN,\n        endLine: NaN,\n        endColumn: NaN,\n      }\n    }\n    /**\n       *  @see setInitialNodeLocationOnlyOffsetRegular for explanation why this work\n  \n       * @param cstNode\n       */\n    setInitialNodeLocationFullRegular(cstNode) {\n      const nextToken = this.LA(1)\n      cstNode.location = {\n        startOffset: nextToken.startOffset,\n        startLine: nextToken.startLine,\n        startColumn: nextToken.startColumn,\n        endOffset: NaN,\n        endLine: NaN,\n        endColumn: NaN,\n      }\n    }\n    cstInvocationStateUpdate(fullRuleName) {\n      const cstNode = {\n        name: fullRuleName,\n        children: Object.create(null),\n      }\n      this.setInitialNodeLocation(cstNode)\n      this.CST_STACK.push(cstNode)\n    }\n    cstFinallyStateUpdate() {\n      this.CST_STACK.pop()\n    }\n    cstPostRuleFull(ruleCstNode) {\n      // casts to `required<CstNodeLocation>` are safe because `cstPostRuleFull` should only be invoked when full location is enabled\n      const prevToken = this.LA(0)\n      const loc = ruleCstNode.location\n      // If this condition is true it means we consumed at least one Token\n      // In this CstNode.\n      if (loc.startOffset <= prevToken.startOffset === true) {\n        loc.endOffset = prevToken.endOffset\n        loc.endLine = prevToken.endLine\n        loc.endColumn = prevToken.endColumn\n      }\n      // \"empty\" CstNode edge case\n      else {\n        loc.startOffset = NaN\n        loc.startLine = NaN\n        loc.startColumn = NaN\n      }\n    }\n    cstPostRuleOnlyOffset(ruleCstNode) {\n      const prevToken = this.LA(0)\n      // `location' is not null because `cstPostRuleOnlyOffset` will only be invoked when location tracking is enabled.\n      const loc = ruleCstNode.location\n      // If this condition is true it means we consumed at least one Token\n      // In this CstNode.\n      if (loc.startOffset <= prevToken.startOffset === true) {\n        loc.endOffset = prevToken.endOffset\n      }\n      // \"empty\" CstNode edge case\n      else {\n        loc.startOffset = NaN\n      }\n    }\n    cstPostTerminal(key, consumedToken) {\n      const rootCst = this.CST_STACK[this.CST_STACK.length - 1]\n      addTerminalToCst(rootCst, consumedToken, key)\n      // This is only used when **both** error recovery and CST Output are enabled.\n      this.setNodeLocationFromToken(rootCst.location, consumedToken)\n    }\n    cstPostNonTerminal(ruleCstResult, ruleName) {\n      const preCstNode = this.CST_STACK[this.CST_STACK.length - 1]\n      addNoneTerminalToCst(preCstNode, ruleName, ruleCstResult)\n      // This is only used when **both** error recovery and CST Output are enabled.\n      this.setNodeLocationFromNode(preCstNode.location, ruleCstResult.location)\n    }\n    getBaseCstVisitorConstructor() {\n      if (isUndefined(this.baseCstVisitorConstructor)) {\n        const newBaseCstVisitorConstructor = createBaseSemanticVisitorConstructor(\n          this.className,\n          keys(this.gastProductionsCache),\n        )\n        this.baseCstVisitorConstructor = newBaseCstVisitorConstructor\n        return newBaseCstVisitorConstructor\n      }\n      return this.baseCstVisitorConstructor\n    }\n    getBaseCstVisitorConstructorWithDefaults() {\n      if (isUndefined(this.baseCstVisitorWithDefaultsConstructor)) {\n        const newConstructor = createBaseVisitorConstructorWithDefaults(\n          this.className,\n          keys(this.gastProductionsCache),\n          this.getBaseCstVisitorConstructor(),\n        )\n        this.baseCstVisitorWithDefaultsConstructor = newConstructor\n        return newConstructor\n      }\n      return this.baseCstVisitorWithDefaultsConstructor\n    }\n    getLastExplicitRuleShortName() {\n      const ruleStack = this.RULE_STACK\n      return ruleStack[ruleStack.length - 1]\n    }\n    getPreviousExplicitRuleShortName() {\n      const ruleStack = this.RULE_STACK\n      return ruleStack[ruleStack.length - 2]\n    }\n    getLastExplicitRuleOccurrenceIndex() {\n      const occurrenceStack = this.RULE_OCCURRENCE_STACK\n      return occurrenceStack[occurrenceStack.length - 1]\n    }\n  }\n\n  /**\n   * Trait responsible abstracting over the interaction with Lexer output (Token vector).\n   *\n   * This could be generalized to support other kinds of lexers, e.g.\n   * - Just in Time Lexing / Lexer-Less parsing.\n   * - Streaming Lexer.\n   */\n  class LexerAdapter {\n    initLexerAdapter() {\n      this.tokVector = []\n      this.tokVectorLength = 0\n      this.currIdx = -1\n    }\n    set input(newInput) {\n      // @ts-ignore - `this parameter` not supported in setters/getters\n      //   - https://www.typescriptlang.org/docs/handbook/functions.html#this-parameters\n      if (this.selfAnalysisDone !== true) {\n        throw Error(`Missing <performSelfAnalysis> invocation at the end of the Parser's constructor.`)\n      }\n      // @ts-ignore - `this parameter` not supported in setters/getters\n      //   - https://www.typescriptlang.org/docs/handbook/functions.html#this-parameters\n      this.reset()\n      this.tokVector = newInput\n      this.tokVectorLength = newInput.length\n    }\n    get input() {\n      return this.tokVector\n    }\n    // skips a token and returns the next token\n    SKIP_TOKEN() {\n      if (this.currIdx <= this.tokVector.length - 2) {\n        this.consumeToken()\n        return this.LA(1)\n      } else {\n        return END_OF_FILE\n      }\n    }\n    // Lexer (accessing Token vector) related methods which can be overridden to implement lazy lexers\n    // or lexers dependent on parser context.\n    LA(howMuch) {\n      const soughtIdx = this.currIdx + howMuch\n      if (soughtIdx < 0 || this.tokVectorLength <= soughtIdx) {\n        return END_OF_FILE\n      } else {\n        return this.tokVector[soughtIdx]\n      }\n    }\n    consumeToken() {\n      this.currIdx++\n    }\n    exportLexerState() {\n      return this.currIdx\n    }\n    importLexerState(newState) {\n      this.currIdx = newState\n    }\n    resetLexerState() {\n      this.currIdx = -1\n    }\n    moveToTerminatedState() {\n      this.currIdx = this.tokVector.length - 1\n    }\n    getLexerPosition() {\n      return this.exportLexerState()\n    }\n  }\n\n  /**\n   * This trait is responsible for implementing the public API\n   * for defining Chevrotain parsers, i.e:\n   * - CONSUME\n   * - RULE\n   * - OPTION\n   * - ...\n   */\n  class RecognizerApi {\n    ACTION(impl) {\n      return impl.call(this)\n    }\n    consume(idx, tokType, options) {\n      return this.consumeInternal(tokType, idx, options)\n    }\n    subrule(idx, ruleToCall, options) {\n      return this.subruleInternal(ruleToCall, idx, options)\n    }\n    option(idx, actionORMethodDef) {\n      return this.optionInternal(actionORMethodDef, idx)\n    }\n    or(idx, altsOrOpts) {\n      return this.orInternal(altsOrOpts, idx)\n    }\n    many(idx, actionORMethodDef) {\n      return this.manyInternal(idx, actionORMethodDef)\n    }\n    atLeastOne(idx, actionORMethodDef) {\n      return this.atLeastOneInternal(idx, actionORMethodDef)\n    }\n    CONSUME(tokType, options) {\n      return this.consumeInternal(tokType, 0, options)\n    }\n    CONSUME1(tokType, options) {\n      return this.consumeInternal(tokType, 1, options)\n    }\n    CONSUME2(tokType, options) {\n      return this.consumeInternal(tokType, 2, options)\n    }\n    CONSUME3(tokType, options) {\n      return this.consumeInternal(tokType, 3, options)\n    }\n    CONSUME4(tokType, options) {\n      return this.consumeInternal(tokType, 4, options)\n    }\n    CONSUME5(tokType, options) {\n      return this.consumeInternal(tokType, 5, options)\n    }\n    CONSUME6(tokType, options) {\n      return this.consumeInternal(tokType, 6, options)\n    }\n    CONSUME7(tokType, options) {\n      return this.consumeInternal(tokType, 7, options)\n    }\n    CONSUME8(tokType, options) {\n      return this.consumeInternal(tokType, 8, options)\n    }\n    CONSUME9(tokType, options) {\n      return this.consumeInternal(tokType, 9, options)\n    }\n    SUBRULE(ruleToCall, options) {\n      return this.subruleInternal(ruleToCall, 0, options)\n    }\n    SUBRULE1(ruleToCall, options) {\n      return this.subruleInternal(ruleToCall, 1, options)\n    }\n    SUBRULE2(ruleToCall, options) {\n      return this.subruleInternal(ruleToCall, 2, options)\n    }\n    SUBRULE3(ruleToCall, options) {\n      return this.subruleInternal(ruleToCall, 3, options)\n    }\n    SUBRULE4(ruleToCall, options) {\n      return this.subruleInternal(ruleToCall, 4, options)\n    }\n    SUBRULE5(ruleToCall, options) {\n      return this.subruleInternal(ruleToCall, 5, options)\n    }\n    SUBRULE6(ruleToCall, options) {\n      return this.subruleInternal(ruleToCall, 6, options)\n    }\n    SUBRULE7(ruleToCall, options) {\n      return this.subruleInternal(ruleToCall, 7, options)\n    }\n    SUBRULE8(ruleToCall, options) {\n      return this.subruleInternal(ruleToCall, 8, options)\n    }\n    SUBRULE9(ruleToCall, options) {\n      return this.subruleInternal(ruleToCall, 9, options)\n    }\n    OPTION(actionORMethodDef) {\n      return this.optionInternal(actionORMethodDef, 0)\n    }\n    OPTION1(actionORMethodDef) {\n      return this.optionInternal(actionORMethodDef, 1)\n    }\n    OPTION2(actionORMethodDef) {\n      return this.optionInternal(actionORMethodDef, 2)\n    }\n    OPTION3(actionORMethodDef) {\n      return this.optionInternal(actionORMethodDef, 3)\n    }\n    OPTION4(actionORMethodDef) {\n      return this.optionInternal(actionORMethodDef, 4)\n    }\n    OPTION5(actionORMethodDef) {\n      return this.optionInternal(actionORMethodDef, 5)\n    }\n    OPTION6(actionORMethodDef) {\n      return this.optionInternal(actionORMethodDef, 6)\n    }\n    OPTION7(actionORMethodDef) {\n      return this.optionInternal(actionORMethodDef, 7)\n    }\n    OPTION8(actionORMethodDef) {\n      return this.optionInternal(actionORMethodDef, 8)\n    }\n    OPTION9(actionORMethodDef) {\n      return this.optionInternal(actionORMethodDef, 9)\n    }\n    OR(altsOrOpts) {\n      return this.orInternal(altsOrOpts, 0)\n    }\n    OR1(altsOrOpts) {\n      return this.orInternal(altsOrOpts, 1)\n    }\n    OR2(altsOrOpts) {\n      return this.orInternal(altsOrOpts, 2)\n    }\n    OR3(altsOrOpts) {\n      return this.orInternal(altsOrOpts, 3)\n    }\n    OR4(altsOrOpts) {\n      return this.orInternal(altsOrOpts, 4)\n    }\n    OR5(altsOrOpts) {\n      return this.orInternal(altsOrOpts, 5)\n    }\n    OR6(altsOrOpts) {\n      return this.orInternal(altsOrOpts, 6)\n    }\n    OR7(altsOrOpts) {\n      return this.orInternal(altsOrOpts, 7)\n    }\n    OR8(altsOrOpts) {\n      return this.orInternal(altsOrOpts, 8)\n    }\n    OR9(altsOrOpts) {\n      return this.orInternal(altsOrOpts, 9)\n    }\n    MANY(actionORMethodDef) {\n      this.manyInternal(0, actionORMethodDef)\n    }\n    MANY1(actionORMethodDef) {\n      this.manyInternal(1, actionORMethodDef)\n    }\n    MANY2(actionORMethodDef) {\n      this.manyInternal(2, actionORMethodDef)\n    }\n    MANY3(actionORMethodDef) {\n      this.manyInternal(3, actionORMethodDef)\n    }\n    MANY4(actionORMethodDef) {\n      this.manyInternal(4, actionORMethodDef)\n    }\n    MANY5(actionORMethodDef) {\n      this.manyInternal(5, actionORMethodDef)\n    }\n    MANY6(actionORMethodDef) {\n      this.manyInternal(6, actionORMethodDef)\n    }\n    MANY7(actionORMethodDef) {\n      this.manyInternal(7, actionORMethodDef)\n    }\n    MANY8(actionORMethodDef) {\n      this.manyInternal(8, actionORMethodDef)\n    }\n    MANY9(actionORMethodDef) {\n      this.manyInternal(9, actionORMethodDef)\n    }\n    MANY_SEP(options) {\n      this.manySepFirstInternal(0, options)\n    }\n    MANY_SEP1(options) {\n      this.manySepFirstInternal(1, options)\n    }\n    MANY_SEP2(options) {\n      this.manySepFirstInternal(2, options)\n    }\n    MANY_SEP3(options) {\n      this.manySepFirstInternal(3, options)\n    }\n    MANY_SEP4(options) {\n      this.manySepFirstInternal(4, options)\n    }\n    MANY_SEP5(options) {\n      this.manySepFirstInternal(5, options)\n    }\n    MANY_SEP6(options) {\n      this.manySepFirstInternal(6, options)\n    }\n    MANY_SEP7(options) {\n      this.manySepFirstInternal(7, options)\n    }\n    MANY_SEP8(options) {\n      this.manySepFirstInternal(8, options)\n    }\n    MANY_SEP9(options) {\n      this.manySepFirstInternal(9, options)\n    }\n    AT_LEAST_ONE(actionORMethodDef) {\n      this.atLeastOneInternal(0, actionORMethodDef)\n    }\n    AT_LEAST_ONE1(actionORMethodDef) {\n      return this.atLeastOneInternal(1, actionORMethodDef)\n    }\n    AT_LEAST_ONE2(actionORMethodDef) {\n      this.atLeastOneInternal(2, actionORMethodDef)\n    }\n    AT_LEAST_ONE3(actionORMethodDef) {\n      this.atLeastOneInternal(3, actionORMethodDef)\n    }\n    AT_LEAST_ONE4(actionORMethodDef) {\n      this.atLeastOneInternal(4, actionORMethodDef)\n    }\n    AT_LEAST_ONE5(actionORMethodDef) {\n      this.atLeastOneInternal(5, actionORMethodDef)\n    }\n    AT_LEAST_ONE6(actionORMethodDef) {\n      this.atLeastOneInternal(6, actionORMethodDef)\n    }\n    AT_LEAST_ONE7(actionORMethodDef) {\n      this.atLeastOneInternal(7, actionORMethodDef)\n    }\n    AT_LEAST_ONE8(actionORMethodDef) {\n      this.atLeastOneInternal(8, actionORMethodDef)\n    }\n    AT_LEAST_ONE9(actionORMethodDef) {\n      this.atLeastOneInternal(9, actionORMethodDef)\n    }\n    AT_LEAST_ONE_SEP(options) {\n      this.atLeastOneSepFirstInternal(0, options)\n    }\n    AT_LEAST_ONE_SEP1(options) {\n      this.atLeastOneSepFirstInternal(1, options)\n    }\n    AT_LEAST_ONE_SEP2(options) {\n      this.atLeastOneSepFirstInternal(2, options)\n    }\n    AT_LEAST_ONE_SEP3(options) {\n      this.atLeastOneSepFirstInternal(3, options)\n    }\n    AT_LEAST_ONE_SEP4(options) {\n      this.atLeastOneSepFirstInternal(4, options)\n    }\n    AT_LEAST_ONE_SEP5(options) {\n      this.atLeastOneSepFirstInternal(5, options)\n    }\n    AT_LEAST_ONE_SEP6(options) {\n      this.atLeastOneSepFirstInternal(6, options)\n    }\n    AT_LEAST_ONE_SEP7(options) {\n      this.atLeastOneSepFirstInternal(7, options)\n    }\n    AT_LEAST_ONE_SEP8(options) {\n      this.atLeastOneSepFirstInternal(8, options)\n    }\n    AT_LEAST_ONE_SEP9(options) {\n      this.atLeastOneSepFirstInternal(9, options)\n    }\n    RULE(name, implementation, config = DEFAULT_RULE_CONFIG) {\n      if (includes(this.definedRulesNames, name)) {\n        const errMsg = defaultGrammarValidatorErrorProvider.buildDuplicateRuleNameError({\n          topLevelRule: name,\n          grammarName: this.className,\n        })\n        const error = {\n          message: errMsg,\n          type: ParserDefinitionErrorType.DUPLICATE_RULE_NAME,\n          ruleName: name,\n        }\n        this.definitionErrors.push(error)\n      }\n      this.definedRulesNames.push(name)\n      const ruleImplementation = this.defineRule(name, implementation, config)\n      this[name] = ruleImplementation\n      return ruleImplementation\n    }\n    OVERRIDE_RULE(name, impl, config = DEFAULT_RULE_CONFIG) {\n      const ruleErrors = validateRuleIsOverridden(name, this.definedRulesNames, this.className)\n      this.definitionErrors = this.definitionErrors.concat(ruleErrors)\n      const ruleImplementation = this.defineRule(name, impl, config)\n      this[name] = ruleImplementation\n      return ruleImplementation\n    }\n    BACKTRACK(grammarRule, args) {\n      return function () {\n        // save org state\n        this.isBackTrackingStack.push(1)\n        const orgState = this.saveRecogState()\n        try {\n          grammarRule.apply(this, args)\n          // if no exception was thrown we have succeed parsing the rule.\n          return true\n        } catch (e) {\n          if (isRecognitionException(e)) {\n            return false\n          } else {\n            throw e\n          }\n        } finally {\n          this.reloadRecogState(orgState)\n          this.isBackTrackingStack.pop()\n        }\n      }\n    }\n    // GAST export APIs\n    getGAstProductions() {\n      return this.gastProductionsCache\n    }\n    getSerializedGastProductions() {\n      return serializeGrammar(values(this.gastProductionsCache))\n    }\n  }\n\n  /**\n   * This trait is responsible for the runtime parsing engine\n   * Used by the official API (recognizer_api.ts)\n   */\n  class RecognizerEngine {\n    initRecognizerEngine(tokenVocabulary, config) {\n      this.className = this.constructor.name\n      // TODO: would using an ES6 Map or plain object be faster (CST building scenario)\n      this.shortRuleNameToFull = {}\n      this.fullRuleNameToShort = {}\n      this.ruleShortNameIdx = 256\n      this.tokenMatcher = tokenStructuredMatcherNoCategories\n      this.subruleIdx = 0\n      this.definedRulesNames = []\n      this.tokensMap = {}\n      this.isBackTrackingStack = []\n      this.RULE_STACK = []\n      this.RULE_OCCURRENCE_STACK = []\n      this.gastProductionsCache = {}\n      if (has(config, 'serializedGrammar')) {\n        throw Error(\n          \"The Parser's configuration can no longer contain a <serializedGrammar> property.\\n\" +\n            '\\tSee: https://chevrotain.io/docs/changes/BREAKING_CHANGES.html#_6-0-0\\n' +\n            '\\tFor Further details.',\n        )\n      }\n      if (isArray$1(tokenVocabulary)) {\n        // This only checks for Token vocabularies provided as arrays.\n        // That is good enough because the main objective is to detect users of pre-V4.0 APIs\n        // rather than all edge cases of empty Token vocabularies.\n        if (isEmpty(tokenVocabulary)) {\n          throw Error(\n            'A Token Vocabulary cannot be empty.\\n' +\n              '\\tNote that the first argument for the parser constructor\\n' +\n              '\\tis no longer a Token vector (since v4.0).',\n          )\n        }\n        if (typeof tokenVocabulary[0].startOffset === 'number') {\n          throw Error(\n            'The Parser constructor no longer accepts a token vector as the first argument.\\n' +\n              '\\tSee: https://chevrotain.io/docs/changes/BREAKING_CHANGES.html#_4-0-0\\n' +\n              '\\tFor Further details.',\n          )\n        }\n      }\n      if (isArray$1(tokenVocabulary)) {\n        this.tokensMap = reduce(\n          tokenVocabulary,\n          (acc, tokType) => {\n            acc[tokType.name] = tokType\n            return acc\n          },\n          {},\n        )\n      } else if (has(tokenVocabulary, 'modes') && every(flatten(values(tokenVocabulary.modes)), isTokenType)) {\n        const allTokenTypes = flatten(values(tokenVocabulary.modes))\n        const uniqueTokens = uniq(allTokenTypes)\n        this.tokensMap = reduce(\n          uniqueTokens,\n          (acc, tokType) => {\n            acc[tokType.name] = tokType\n            return acc\n          },\n          {},\n        )\n      } else if (isObject(tokenVocabulary)) {\n        this.tokensMap = clone(tokenVocabulary)\n      } else {\n        throw new Error(\n          '<tokensDictionary> argument must be An Array of Token constructors,' +\n            ' A dictionary of Token constructors or an IMultiModeLexerDefinition',\n        )\n      }\n      // always add EOF to the tokenNames -> constructors map. it is useful to assure all the input has been\n      // parsed with a clear error message (\"expecting EOF but found ...\")\n      this.tokensMap['EOF'] = EOF\n      const allTokenTypes = has(tokenVocabulary, 'modes')\n        ? flatten(values(tokenVocabulary.modes))\n        : values(tokenVocabulary)\n      const noTokenCategoriesUsed = every(allTokenTypes, (tokenConstructor) =>\n        isEmpty(tokenConstructor.categoryMatches),\n      )\n      this.tokenMatcher = noTokenCategoriesUsed ? tokenStructuredMatcherNoCategories : tokenStructuredMatcher\n      // Because ES2015+ syntax should be supported for creating Token classes\n      // We cannot assume that the Token classes were created using the \"extendToken\" utilities\n      // Therefore we must augment the Token classes both on Lexer initialization and on Parser initialization\n      augmentTokenTypes(values(this.tokensMap))\n    }\n    defineRule(ruleName, impl, config) {\n      if (this.selfAnalysisDone) {\n        throw Error(\n          `Grammar rule <${ruleName}> may not be defined after the 'performSelfAnalysis' method has been called'\\n` +\n            `Make sure that all grammar rule definitions are done before 'performSelfAnalysis' is called.`,\n        )\n      }\n      const resyncEnabled = has(config, 'resyncEnabled')\n        ? config.resyncEnabled // assumes end user provides the correct config value/type\n        : DEFAULT_RULE_CONFIG.resyncEnabled\n      const recoveryValueFunc = has(config, 'recoveryValueFunc')\n        ? config.recoveryValueFunc // assumes end user provides the correct config value/type\n        : DEFAULT_RULE_CONFIG.recoveryValueFunc\n      // performance optimization: Use small integers as keys for the longer human readable \"full\" rule names.\n      // this greatly improves Map access time (as much as 8% for some performance benchmarks).\n      const shortName = this.ruleShortNameIdx << (BITS_FOR_METHOD_TYPE + BITS_FOR_OCCURRENCE_IDX)\n      this.ruleShortNameIdx++\n      this.shortRuleNameToFull[shortName] = ruleName\n      this.fullRuleNameToShort[ruleName] = shortName\n      let invokeRuleWithTry\n      // Micro optimization, only check the condition **once** on rule definition\n      // instead of **every single** rule invocation.\n      if (this.outputCst === true) {\n        invokeRuleWithTry = function invokeRuleWithTry(...args) {\n          try {\n            this.ruleInvocationStateUpdate(shortName, ruleName, this.subruleIdx)\n            impl.apply(this, args)\n            const cst = this.CST_STACK[this.CST_STACK.length - 1]\n            this.cstPostRule(cst)\n            return cst\n          } catch (e) {\n            return this.invokeRuleCatch(e, resyncEnabled, recoveryValueFunc)\n          } finally {\n            this.ruleFinallyStateUpdate()\n          }\n        }\n      } else {\n        invokeRuleWithTry = function invokeRuleWithTryCst(...args) {\n          try {\n            this.ruleInvocationStateUpdate(shortName, ruleName, this.subruleIdx)\n            return impl.apply(this, args)\n          } catch (e) {\n            return this.invokeRuleCatch(e, resyncEnabled, recoveryValueFunc)\n          } finally {\n            this.ruleFinallyStateUpdate()\n          }\n        }\n      }\n      const wrappedGrammarRule = Object.assign(invokeRuleWithTry, { ruleName, originalGrammarAction: impl })\n      return wrappedGrammarRule\n    }\n    invokeRuleCatch(e, resyncEnabledConfig, recoveryValueFunc) {\n      const isFirstInvokedRule = this.RULE_STACK.length === 1\n      // note the reSync is always enabled for the first rule invocation, because we must always be able to\n      // reSync with EOF and just output some INVALID ParseTree\n      // during backtracking reSync recovery is disabled, otherwise we can't be certain the backtracking\n      // path is really the most valid one\n      const reSyncEnabled = resyncEnabledConfig && !this.isBackTracking() && this.recoveryEnabled\n      if (isRecognitionException(e)) {\n        const recogError = e\n        if (reSyncEnabled) {\n          const reSyncTokType = this.findReSyncTokenType()\n          if (this.isInCurrentRuleReSyncSet(reSyncTokType)) {\n            recogError.resyncedTokens = this.reSyncTo(reSyncTokType)\n            if (this.outputCst) {\n              const partialCstResult = this.CST_STACK[this.CST_STACK.length - 1]\n              partialCstResult.recoveredNode = true\n              return partialCstResult\n            } else {\n              return recoveryValueFunc(e)\n            }\n          } else {\n            if (this.outputCst) {\n              const partialCstResult = this.CST_STACK[this.CST_STACK.length - 1]\n              partialCstResult.recoveredNode = true\n              recogError.partialCstResult = partialCstResult\n            }\n            // to be handled Further up the call stack\n            throw recogError\n          }\n        } else if (isFirstInvokedRule) {\n          // otherwise a Redundant input error will be created as well and we cannot guarantee that this is indeed the case\n          this.moveToTerminatedState()\n          // the parser should never throw one of its own errors outside its flow.\n          // even if error recovery is disabled\n          return recoveryValueFunc(e)\n        } else {\n          // to be recovered Further up the call stack\n          throw recogError\n        }\n      } else {\n        // some other Error type which we don't know how to handle (for example a built in JavaScript Error)\n        throw e\n      }\n    }\n    // Implementation of parsing DSL\n    optionInternal(actionORMethodDef, occurrence) {\n      const key = this.getKeyForAutomaticLookahead(OPTION_IDX, occurrence)\n      return this.optionInternalLogic(actionORMethodDef, occurrence, key)\n    }\n    optionInternalLogic(actionORMethodDef, occurrence, key) {\n      let lookAheadFunc = this.getLaFuncFromCache(key)\n      let action\n      if (typeof actionORMethodDef !== 'function') {\n        action = actionORMethodDef.DEF\n        const predicate = actionORMethodDef.GATE\n        // predicate present\n        if (predicate !== undefined) {\n          const orgLookaheadFunction = lookAheadFunc\n          lookAheadFunc = () => {\n            return predicate.call(this) && orgLookaheadFunction.call(this)\n          }\n        }\n      } else {\n        action = actionORMethodDef\n      }\n      if (lookAheadFunc.call(this) === true) {\n        return action.call(this)\n      }\n      return undefined\n    }\n    atLeastOneInternal(prodOccurrence, actionORMethodDef) {\n      const laKey = this.getKeyForAutomaticLookahead(AT_LEAST_ONE_IDX, prodOccurrence)\n      return this.atLeastOneInternalLogic(prodOccurrence, actionORMethodDef, laKey)\n    }\n    atLeastOneInternalLogic(prodOccurrence, actionORMethodDef, key) {\n      let lookAheadFunc = this.getLaFuncFromCache(key)\n      let action\n      if (typeof actionORMethodDef !== 'function') {\n        action = actionORMethodDef.DEF\n        const predicate = actionORMethodDef.GATE\n        // predicate present\n        if (predicate !== undefined) {\n          const orgLookaheadFunction = lookAheadFunc\n          lookAheadFunc = () => {\n            return predicate.call(this) && orgLookaheadFunction.call(this)\n          }\n        }\n      } else {\n        action = actionORMethodDef\n      }\n      if (lookAheadFunc.call(this) === true) {\n        let notStuck = this.doSingleRepetition(action)\n        while (lookAheadFunc.call(this) === true && notStuck === true) {\n          notStuck = this.doSingleRepetition(action)\n        }\n      } else {\n        throw this.raiseEarlyExitException(prodOccurrence, PROD_TYPE.REPETITION_MANDATORY, actionORMethodDef.ERR_MSG)\n      }\n      // note that while it may seem that this can cause an error because by using a recursive call to\n      // AT_LEAST_ONE we change the grammar to AT_LEAST_TWO, AT_LEAST_THREE ... , the possible recursive call\n      // from the tryInRepetitionRecovery(...) will only happen IFF there really are TWO/THREE/.... items.\n      // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n      this.attemptInRepetitionRecovery(\n        this.atLeastOneInternal,\n        [prodOccurrence, actionORMethodDef],\n        lookAheadFunc,\n        AT_LEAST_ONE_IDX,\n        prodOccurrence,\n        NextTerminalAfterAtLeastOneWalker,\n      )\n    }\n    atLeastOneSepFirstInternal(prodOccurrence, options) {\n      const laKey = this.getKeyForAutomaticLookahead(AT_LEAST_ONE_SEP_IDX, prodOccurrence)\n      this.atLeastOneSepFirstInternalLogic(prodOccurrence, options, laKey)\n    }\n    atLeastOneSepFirstInternalLogic(prodOccurrence, options, key) {\n      const action = options.DEF\n      const separator = options.SEP\n      const firstIterationLookaheadFunc = this.getLaFuncFromCache(key)\n      // 1st iteration\n      if (firstIterationLookaheadFunc.call(this) === true) {\n        action.call(this)\n        //  TODO: Optimization can move this function construction into \"attemptInRepetitionRecovery\"\n        //  because it is only needed in error recovery scenarios.\n        const separatorLookAheadFunc = () => {\n          return this.tokenMatcher(this.LA(1), separator)\n        }\n        // 2nd..nth iterations\n        while (this.tokenMatcher(this.LA(1), separator) === true) {\n          // note that this CONSUME will never enter recovery because\n          // the separatorLookAheadFunc checks that the separator really does exist.\n          this.CONSUME(separator)\n          // No need for checking infinite loop here due to consuming the separator.\n          action.call(this)\n        }\n        // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n        this.attemptInRepetitionRecovery(\n          this.repetitionSepSecondInternal,\n          [prodOccurrence, separator, separatorLookAheadFunc, action, NextTerminalAfterAtLeastOneSepWalker],\n          separatorLookAheadFunc,\n          AT_LEAST_ONE_SEP_IDX,\n          prodOccurrence,\n          NextTerminalAfterAtLeastOneSepWalker,\n        )\n      } else {\n        throw this.raiseEarlyExitException(\n          prodOccurrence,\n          PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR,\n          options.ERR_MSG,\n        )\n      }\n    }\n    manyInternal(prodOccurrence, actionORMethodDef) {\n      const laKey = this.getKeyForAutomaticLookahead(MANY_IDX, prodOccurrence)\n      return this.manyInternalLogic(prodOccurrence, actionORMethodDef, laKey)\n    }\n    manyInternalLogic(prodOccurrence, actionORMethodDef, key) {\n      let lookaheadFunction = this.getLaFuncFromCache(key)\n      let action\n      if (typeof actionORMethodDef !== 'function') {\n        action = actionORMethodDef.DEF\n        const predicate = actionORMethodDef.GATE\n        // predicate present\n        if (predicate !== undefined) {\n          const orgLookaheadFunction = lookaheadFunction\n          lookaheadFunction = () => {\n            return predicate.call(this) && orgLookaheadFunction.call(this)\n          }\n        }\n      } else {\n        action = actionORMethodDef\n      }\n      let notStuck = true\n      while (lookaheadFunction.call(this) === true && notStuck === true) {\n        notStuck = this.doSingleRepetition(action)\n      }\n      // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n      this.attemptInRepetitionRecovery(\n        this.manyInternal,\n        [prodOccurrence, actionORMethodDef],\n        lookaheadFunction,\n        MANY_IDX,\n        prodOccurrence,\n        NextTerminalAfterManyWalker,\n        // The notStuck parameter is only relevant when \"attemptInRepetitionRecovery\"\n        // is invoked from manyInternal, in the MANY_SEP case and AT_LEAST_ONE[_SEP]\n        // An infinite loop cannot occur as:\n        // - Either the lookahead is guaranteed to consume something (Single Token Separator)\n        // - AT_LEAST_ONE by definition is guaranteed to consume something (or error out).\n        notStuck,\n      )\n    }\n    manySepFirstInternal(prodOccurrence, options) {\n      const laKey = this.getKeyForAutomaticLookahead(MANY_SEP_IDX, prodOccurrence)\n      this.manySepFirstInternalLogic(prodOccurrence, options, laKey)\n    }\n    manySepFirstInternalLogic(prodOccurrence, options, key) {\n      const action = options.DEF\n      const separator = options.SEP\n      const firstIterationLaFunc = this.getLaFuncFromCache(key)\n      // 1st iteration\n      if (firstIterationLaFunc.call(this) === true) {\n        action.call(this)\n        const separatorLookAheadFunc = () => {\n          return this.tokenMatcher(this.LA(1), separator)\n        }\n        // 2nd..nth iterations\n        while (this.tokenMatcher(this.LA(1), separator) === true) {\n          // note that this CONSUME will never enter recovery because\n          // the separatorLookAheadFunc checks that the separator really does exist.\n          this.CONSUME(separator)\n          // No need for checking infinite loop here due to consuming the separator.\n          action.call(this)\n        }\n        // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n        this.attemptInRepetitionRecovery(\n          this.repetitionSepSecondInternal,\n          [prodOccurrence, separator, separatorLookAheadFunc, action, NextTerminalAfterManySepWalker],\n          separatorLookAheadFunc,\n          MANY_SEP_IDX,\n          prodOccurrence,\n          NextTerminalAfterManySepWalker,\n        )\n      }\n    }\n    repetitionSepSecondInternal(prodOccurrence, separator, separatorLookAheadFunc, action, nextTerminalAfterWalker) {\n      while (separatorLookAheadFunc()) {\n        // note that this CONSUME will never enter recovery because\n        // the separatorLookAheadFunc checks that the separator really does exist.\n        this.CONSUME(separator)\n        action.call(this)\n      }\n      // we can only arrive to this function after an error\n      // has occurred (hence the name 'second') so the following\n      // IF will always be entered, its possible to remove it...\n      // however it is kept to avoid confusion and be consistent.\n      // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n      /* istanbul ignore else */\n      this.attemptInRepetitionRecovery(\n        this.repetitionSepSecondInternal,\n        [prodOccurrence, separator, separatorLookAheadFunc, action, nextTerminalAfterWalker],\n        separatorLookAheadFunc,\n        AT_LEAST_ONE_SEP_IDX,\n        prodOccurrence,\n        nextTerminalAfterWalker,\n      )\n    }\n    doSingleRepetition(action) {\n      const beforeIteration = this.getLexerPosition()\n      action.call(this)\n      const afterIteration = this.getLexerPosition()\n      // This boolean will indicate if this repetition progressed\n      // or if we are \"stuck\" (potential infinite loop in the repetition).\n      return afterIteration > beforeIteration\n    }\n    orInternal(altsOrOpts, occurrence) {\n      const laKey = this.getKeyForAutomaticLookahead(OR_IDX, occurrence)\n      const alts = isArray$1(altsOrOpts) ? altsOrOpts : altsOrOpts.DEF\n      const laFunc = this.getLaFuncFromCache(laKey)\n      const altIdxToTake = laFunc.call(this, alts)\n      if (altIdxToTake !== undefined) {\n        const chosenAlternative = alts[altIdxToTake]\n        return chosenAlternative.ALT.call(this)\n      }\n      this.raiseNoAltException(occurrence, altsOrOpts.ERR_MSG)\n    }\n    ruleFinallyStateUpdate() {\n      this.RULE_STACK.pop()\n      this.RULE_OCCURRENCE_STACK.pop()\n      // NOOP when cst is disabled\n      this.cstFinallyStateUpdate()\n      if (this.RULE_STACK.length === 0 && this.isAtEndOfInput() === false) {\n        const firstRedundantTok = this.LA(1)\n        const errMsg = this.errorMessageProvider.buildNotAllInputParsedMessage({\n          firstRedundant: firstRedundantTok,\n          ruleName: this.getCurrRuleFullName(),\n        })\n        this.SAVE_ERROR(new NotAllInputParsedException(errMsg, firstRedundantTok))\n      }\n    }\n    subruleInternal(ruleToCall, idx, options) {\n      let ruleResult\n      try {\n        const args = options !== undefined ? options.ARGS : undefined\n        this.subruleIdx = idx\n        ruleResult = ruleToCall.apply(this, args)\n        this.cstPostNonTerminal(\n          ruleResult,\n          options !== undefined && options.LABEL !== undefined ? options.LABEL : ruleToCall.ruleName,\n        )\n        return ruleResult\n      } catch (e) {\n        throw this.subruleInternalError(e, options, ruleToCall.ruleName)\n      }\n    }\n    subruleInternalError(e, options, ruleName) {\n      if (isRecognitionException(e) && e.partialCstResult !== undefined) {\n        this.cstPostNonTerminal(\n          e.partialCstResult,\n          options !== undefined && options.LABEL !== undefined ? options.LABEL : ruleName,\n        )\n        delete e.partialCstResult\n      }\n      throw e\n    }\n    consumeInternal(tokType, idx, options) {\n      let consumedToken\n      try {\n        const nextToken = this.LA(1)\n        if (this.tokenMatcher(nextToken, tokType) === true) {\n          this.consumeToken()\n          consumedToken = nextToken\n        } else {\n          this.consumeInternalError(tokType, nextToken, options)\n        }\n      } catch (eFromConsumption) {\n        consumedToken = this.consumeInternalRecovery(tokType, idx, eFromConsumption)\n      }\n      this.cstPostTerminal(\n        options !== undefined && options.LABEL !== undefined ? options.LABEL : tokType.name,\n        consumedToken,\n      )\n      return consumedToken\n    }\n    consumeInternalError(tokType, nextToken, options) {\n      let msg\n      const previousToken = this.LA(0)\n      if (options !== undefined && options.ERR_MSG) {\n        msg = options.ERR_MSG\n      } else {\n        msg = this.errorMessageProvider.buildMismatchTokenMessage({\n          expected: tokType,\n          actual: nextToken,\n          previous: previousToken,\n          ruleName: this.getCurrRuleFullName(),\n        })\n      }\n      throw this.SAVE_ERROR(new MismatchedTokenException(msg, nextToken, previousToken))\n    }\n    consumeInternalRecovery(tokType, idx, eFromConsumption) {\n      // no recovery allowed during backtracking, otherwise backtracking may recover invalid syntax and accept it\n      // but the original syntax could have been parsed successfully without any backtracking + recovery\n      if (\n        this.recoveryEnabled &&\n        // TODO: more robust checking of the exception type. Perhaps Typescript extending expressions?\n        eFromConsumption.name === 'MismatchedTokenException' &&\n        !this.isBackTracking()\n      ) {\n        const follows = this.getFollowsForInRuleRecovery(tokType, idx)\n        try {\n          return this.tryInRuleRecovery(tokType, follows)\n        } catch (eFromInRuleRecovery) {\n          if (eFromInRuleRecovery.name === IN_RULE_RECOVERY_EXCEPTION) {\n            // failed in RuleRecovery.\n            // throw the original error in order to trigger reSync error recovery\n            throw eFromConsumption\n          } else {\n            throw eFromInRuleRecovery\n          }\n        }\n      } else {\n        throw eFromConsumption\n      }\n    }\n    saveRecogState() {\n      // errors is a getter which will clone the errors array\n      const savedErrors = this.errors\n      const savedRuleStack = clone(this.RULE_STACK)\n      return {\n        errors: savedErrors,\n        lexerState: this.exportLexerState(),\n        RULE_STACK: savedRuleStack,\n        CST_STACK: this.CST_STACK,\n      }\n    }\n    reloadRecogState(newState) {\n      this.errors = newState.errors\n      this.importLexerState(newState.lexerState)\n      this.RULE_STACK = newState.RULE_STACK\n    }\n    ruleInvocationStateUpdate(shortName, fullName, idxInCallingRule) {\n      this.RULE_OCCURRENCE_STACK.push(idxInCallingRule)\n      this.RULE_STACK.push(shortName)\n      // NOOP when cst is disabled\n      this.cstInvocationStateUpdate(fullName)\n    }\n    isBackTracking() {\n      return this.isBackTrackingStack.length !== 0\n    }\n    getCurrRuleFullName() {\n      const shortName = this.getLastExplicitRuleShortName()\n      return this.shortRuleNameToFull[shortName]\n    }\n    shortRuleNameToFullName(shortName) {\n      return this.shortRuleNameToFull[shortName]\n    }\n    isAtEndOfInput() {\n      return this.tokenMatcher(this.LA(1), EOF)\n    }\n    reset() {\n      this.resetLexerState()\n      this.subruleIdx = 0\n      this.isBackTrackingStack = []\n      this.errors = []\n      this.RULE_STACK = []\n      // TODO: extract a specific reset for TreeBuilder trait\n      this.CST_STACK = []\n      this.RULE_OCCURRENCE_STACK = []\n    }\n  }\n\n  /**\n   * Trait responsible for runtime parsing errors.\n   */\n  class ErrorHandler {\n    initErrorHandler(config) {\n      this._errors = []\n      this.errorMessageProvider = has(config, 'errorMessageProvider')\n        ? config.errorMessageProvider // assumes end user provides the correct config value/type\n        : DEFAULT_PARSER_CONFIG.errorMessageProvider\n    }\n    SAVE_ERROR(error) {\n      if (isRecognitionException(error)) {\n        error.context = {\n          ruleStack: this.getHumanReadableRuleStack(),\n          ruleOccurrenceStack: clone(this.RULE_OCCURRENCE_STACK),\n        }\n        this._errors.push(error)\n        return error\n      } else {\n        throw Error('Trying to save an Error which is not a RecognitionException')\n      }\n    }\n    get errors() {\n      return clone(this._errors)\n    }\n    set errors(newErrors) {\n      this._errors = newErrors\n    }\n    // TODO: consider caching the error message computed information\n    raiseEarlyExitException(occurrence, prodType, userDefinedErrMsg) {\n      const ruleName = this.getCurrRuleFullName()\n      const ruleGrammar = this.getGAstProductions()[ruleName]\n      const lookAheadPathsPerAlternative = getLookaheadPathsForOptionalProd(\n        occurrence,\n        ruleGrammar,\n        prodType,\n        this.maxLookahead,\n      )\n      const insideProdPaths = lookAheadPathsPerAlternative[0]\n      const actualTokens = []\n      for (let i = 1; i <= this.maxLookahead; i++) {\n        actualTokens.push(this.LA(i))\n      }\n      const msg = this.errorMessageProvider.buildEarlyExitMessage({\n        expectedIterationPaths: insideProdPaths,\n        actual: actualTokens,\n        previous: this.LA(0),\n        customUserDescription: userDefinedErrMsg,\n        ruleName: ruleName,\n      })\n      throw this.SAVE_ERROR(new EarlyExitException(msg, this.LA(1), this.LA(0)))\n    }\n    // TODO: consider caching the error message computed information\n    raiseNoAltException(occurrence, errMsgTypes) {\n      const ruleName = this.getCurrRuleFullName()\n      const ruleGrammar = this.getGAstProductions()[ruleName]\n      // TODO: getLookaheadPathsForOr can be slow for large enough maxLookahead and certain grammars, consider caching ?\n      const lookAheadPathsPerAlternative = getLookaheadPathsForOr(occurrence, ruleGrammar, this.maxLookahead)\n      const actualTokens = []\n      for (let i = 1; i <= this.maxLookahead; i++) {\n        actualTokens.push(this.LA(i))\n      }\n      const previousToken = this.LA(0)\n      const errMsg = this.errorMessageProvider.buildNoViableAltMessage({\n        expectedPathsPerAlt: lookAheadPathsPerAlternative,\n        actual: actualTokens,\n        previous: previousToken,\n        customUserDescription: errMsgTypes,\n        ruleName: this.getCurrRuleFullName(),\n      })\n      throw this.SAVE_ERROR(new NoViableAltException(errMsg, this.LA(1), previousToken))\n    }\n  }\n\n  class ContentAssist {\n    initContentAssist() {}\n    computeContentAssist(startRuleName, precedingInput) {\n      const startRuleGast = this.gastProductionsCache[startRuleName]\n      if (isUndefined(startRuleGast)) {\n        throw Error(`Rule ->${startRuleName}<- does not exist in this grammar.`)\n      }\n      return nextPossibleTokensAfter([startRuleGast], precedingInput, this.tokenMatcher, this.maxLookahead)\n    }\n    // TODO: should this be a member method or a utility? it does not have any state or usage of 'this'...\n    // TODO: should this be more explicitly part of the public API?\n    getNextPossibleTokenTypes(grammarPath) {\n      const topRuleName = head(grammarPath.ruleStack)\n      const gastProductions = this.getGAstProductions()\n      const topProduction = gastProductions[topRuleName]\n      const nextPossibleTokenTypes = new NextAfterTokenWalker(topProduction, grammarPath).startWalking()\n      return nextPossibleTokenTypes\n    }\n  }\n\n  const RECORDING_NULL_OBJECT = {\n    description: 'This Object indicates the Parser is during Recording Phase',\n  }\n  Object.freeze(RECORDING_NULL_OBJECT)\n  const HANDLE_SEPARATOR = true\n  const MAX_METHOD_IDX = Math.pow(2, BITS_FOR_OCCURRENCE_IDX) - 1\n  const RFT = createToken({ name: 'RECORDING_PHASE_TOKEN', pattern: Lexer.NA })\n  augmentTokenTypes([RFT])\n  const RECORDING_PHASE_TOKEN = createTokenInstance(\n    RFT,\n    'This IToken indicates the Parser is in Recording Phase\\n\\t' +\n      '' +\n      'See: https://chevrotain.io/docs/guide/internals.html#grammar-recording for details',\n    // Using \"-1\" instead of NaN (as in EOF) because an actual number is less likely to\n    // cause errors if the output of LA or CONSUME would be (incorrectly) used during the recording phase.\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n  )\n  Object.freeze(RECORDING_PHASE_TOKEN)\n  const RECORDING_PHASE_CSTNODE = {\n    name:\n      'This CSTNode indicates the Parser is in Recording Phase\\n\\t' +\n      'See: https://chevrotain.io/docs/guide/internals.html#grammar-recording for details',\n    children: {},\n  }\n  /**\n   * This trait handles the creation of the GAST structure for Chevrotain Grammars\n   */\n  class GastRecorder {\n    initGastRecorder(config) {\n      this.recordingProdStack = []\n      this.RECORDING_PHASE = false\n    }\n    enableRecording() {\n      this.RECORDING_PHASE = true\n      this.TRACE_INIT('Enable Recording', () => {\n        /**\n         * Warning Dark Voodoo Magic upcoming!\n         * We are \"replacing\" the public parsing DSL methods API\n         * With **new** alternative implementations on the Parser **instance**\n         *\n         * So far this is the only way I've found to avoid performance regressions during parsing time.\n         * - Approx 30% performance regression was measured on Chrome 75 Canary when attempting to replace the \"internal\"\n         *   implementations directly instead.\n         */\n        for (let i = 0; i < 10; i++) {\n          const idx = i > 0 ? i : ''\n          this[`CONSUME${idx}`] = function (arg1, arg2) {\n            return this.consumeInternalRecord(arg1, i, arg2)\n          }\n          this[`SUBRULE${idx}`] = function (arg1, arg2) {\n            return this.subruleInternalRecord(arg1, i, arg2)\n          }\n          this[`OPTION${idx}`] = function (arg1) {\n            return this.optionInternalRecord(arg1, i)\n          }\n          this[`OR${idx}`] = function (arg1) {\n            return this.orInternalRecord(arg1, i)\n          }\n          this[`MANY${idx}`] = function (arg1) {\n            this.manyInternalRecord(i, arg1)\n          }\n          this[`MANY_SEP${idx}`] = function (arg1) {\n            this.manySepFirstInternalRecord(i, arg1)\n          }\n          this[`AT_LEAST_ONE${idx}`] = function (arg1) {\n            this.atLeastOneInternalRecord(i, arg1)\n          }\n          this[`AT_LEAST_ONE_SEP${idx}`] = function (arg1) {\n            this.atLeastOneSepFirstInternalRecord(i, arg1)\n          }\n        }\n        // DSL methods with the idx(suffix) as an argument\n        this[`consume`] = function (idx, arg1, arg2) {\n          return this.consumeInternalRecord(arg1, idx, arg2)\n        }\n        this[`subrule`] = function (idx, arg1, arg2) {\n          return this.subruleInternalRecord(arg1, idx, arg2)\n        }\n        this[`option`] = function (idx, arg1) {\n          return this.optionInternalRecord(arg1, idx)\n        }\n        this[`or`] = function (idx, arg1) {\n          return this.orInternalRecord(arg1, idx)\n        }\n        this[`many`] = function (idx, arg1) {\n          this.manyInternalRecord(idx, arg1)\n        }\n        this[`atLeastOne`] = function (idx, arg1) {\n          this.atLeastOneInternalRecord(idx, arg1)\n        }\n        this.ACTION = this.ACTION_RECORD\n        this.BACKTRACK = this.BACKTRACK_RECORD\n        this.LA = this.LA_RECORD\n      })\n    }\n    disableRecording() {\n      this.RECORDING_PHASE = false\n      // By deleting these **instance** properties, any future invocation\n      // will be deferred to the original methods on the **prototype** object\n      // This seems to get rid of any incorrect optimizations that V8 may\n      // do during the recording phase.\n      this.TRACE_INIT('Deleting Recording methods', () => {\n        const that = this\n        for (let i = 0; i < 10; i++) {\n          const idx = i > 0 ? i : ''\n          delete that[`CONSUME${idx}`]\n          delete that[`SUBRULE${idx}`]\n          delete that[`OPTION${idx}`]\n          delete that[`OR${idx}`]\n          delete that[`MANY${idx}`]\n          delete that[`MANY_SEP${idx}`]\n          delete that[`AT_LEAST_ONE${idx}`]\n          delete that[`AT_LEAST_ONE_SEP${idx}`]\n        }\n        delete that[`consume`]\n        delete that[`subrule`]\n        delete that[`option`]\n        delete that[`or`]\n        delete that[`many`]\n        delete that[`atLeastOne`]\n        delete that.ACTION\n        delete that.BACKTRACK\n        delete that.LA\n      })\n    }\n    //   Parser methods are called inside an ACTION?\n    //   Maybe try/catch/finally on ACTIONS while disabling the recorders state changes?\n    // @ts-expect-error -- noop place holder\n    ACTION_RECORD(impl) {\n      // NO-OP during recording\n    }\n    // Executing backtracking logic will break our recording logic assumptions\n    BACKTRACK_RECORD(grammarRule, args) {\n      return () => true\n    }\n    // LA is part of the official API and may be used for custom lookahead logic\n    // by end users who may forget to wrap it in ACTION or inside a GATE\n    LA_RECORD(howMuch) {\n      // We cannot use the RECORD_PHASE_TOKEN here because someone may depend\n      // On LA return EOF at the end of the input so an infinite loop may occur.\n      return END_OF_FILE\n    }\n    topLevelRuleRecord(name, def) {\n      try {\n        const newTopLevelRule = new Rule({ definition: [], name: name })\n        newTopLevelRule.name = name\n        this.recordingProdStack.push(newTopLevelRule)\n        def.call(this)\n        this.recordingProdStack.pop()\n        return newTopLevelRule\n      } catch (originalError) {\n        if (originalError.KNOWN_RECORDER_ERROR !== true) {\n          try {\n            originalError.message =\n              originalError.message +\n              '\\n\\t This error was thrown during the \"grammar recording phase\" For more info see:\\n\\t' +\n              'https://chevrotain.io/docs/guide/internals.html#grammar-recording'\n          } catch (mutabilityError) {\n            // We may not be able to modify the original error object\n            throw originalError\n          }\n        }\n        throw originalError\n      }\n    }\n    // Implementation of parsing DSL\n    optionInternalRecord(actionORMethodDef, occurrence) {\n      return recordProd.call(this, Option, actionORMethodDef, occurrence)\n    }\n    atLeastOneInternalRecord(occurrence, actionORMethodDef) {\n      recordProd.call(this, RepetitionMandatory, actionORMethodDef, occurrence)\n    }\n    atLeastOneSepFirstInternalRecord(occurrence, options) {\n      recordProd.call(this, RepetitionMandatoryWithSeparator, options, occurrence, HANDLE_SEPARATOR)\n    }\n    manyInternalRecord(occurrence, actionORMethodDef) {\n      recordProd.call(this, Repetition, actionORMethodDef, occurrence)\n    }\n    manySepFirstInternalRecord(occurrence, options) {\n      recordProd.call(this, RepetitionWithSeparator, options, occurrence, HANDLE_SEPARATOR)\n    }\n    orInternalRecord(altsOrOpts, occurrence) {\n      return recordOrProd.call(this, altsOrOpts, occurrence)\n    }\n    subruleInternalRecord(ruleToCall, occurrence, options) {\n      assertMethodIdxIsValid(occurrence)\n      if (!ruleToCall || has(ruleToCall, 'ruleName') === false) {\n        const error = new Error(\n          `<SUBRULE${getIdxSuffix(occurrence)}> argument is invalid` +\n            ` expecting a Parser method reference but got: <${JSON.stringify(ruleToCall)}>` +\n            `\\n inside top level rule: <${this.recordingProdStack[0].name}>`,\n        )\n        error.KNOWN_RECORDER_ERROR = true\n        throw error\n      }\n      const prevProd = last(this.recordingProdStack)\n      const ruleName = ruleToCall.ruleName\n      const newNoneTerminal = new NonTerminal({\n        idx: occurrence,\n        nonTerminalName: ruleName,\n        label: options === null || options === void 0 ? void 0 : options.LABEL,\n        // The resolving of the `referencedRule` property will be done once all the Rule's GASTs have been created\n        referencedRule: undefined,\n      })\n      prevProd.definition.push(newNoneTerminal)\n      return this.outputCst ? RECORDING_PHASE_CSTNODE : RECORDING_NULL_OBJECT\n    }\n    consumeInternalRecord(tokType, occurrence, options) {\n      assertMethodIdxIsValid(occurrence)\n      if (!hasShortKeyProperty(tokType)) {\n        const error = new Error(\n          `<CONSUME${getIdxSuffix(occurrence)}> argument is invalid` +\n            ` expecting a TokenType reference but got: <${JSON.stringify(tokType)}>` +\n            `\\n inside top level rule: <${this.recordingProdStack[0].name}>`,\n        )\n        error.KNOWN_RECORDER_ERROR = true\n        throw error\n      }\n      const prevProd = last(this.recordingProdStack)\n      const newNoneTerminal = new Terminal({\n        idx: occurrence,\n        terminalType: tokType,\n        label: options === null || options === void 0 ? void 0 : options.LABEL,\n      })\n      prevProd.definition.push(newNoneTerminal)\n      return RECORDING_PHASE_TOKEN\n    }\n  }\n  function recordProd(prodConstructor, mainProdArg, occurrence, handleSep = false) {\n    assertMethodIdxIsValid(occurrence)\n    const prevProd = last(this.recordingProdStack)\n    const grammarAction = isFunction(mainProdArg) ? mainProdArg : mainProdArg.DEF\n    const newProd = new prodConstructor({ definition: [], idx: occurrence })\n    if (handleSep) {\n      newProd.separator = mainProdArg.SEP\n    }\n    if (has(mainProdArg, 'MAX_LOOKAHEAD')) {\n      newProd.maxLookahead = mainProdArg.MAX_LOOKAHEAD\n    }\n    this.recordingProdStack.push(newProd)\n    grammarAction.call(this)\n    prevProd.definition.push(newProd)\n    this.recordingProdStack.pop()\n    return RECORDING_NULL_OBJECT\n  }\n  function recordOrProd(mainProdArg, occurrence) {\n    assertMethodIdxIsValid(occurrence)\n    const prevProd = last(this.recordingProdStack)\n    // Only an array of alternatives\n    const hasOptions = isArray$1(mainProdArg) === false\n    const alts = hasOptions === false ? mainProdArg : mainProdArg.DEF\n    const newOrProd = new Alternation({\n      definition: [],\n      idx: occurrence,\n      ignoreAmbiguities: hasOptions && mainProdArg.IGNORE_AMBIGUITIES === true,\n    })\n    if (has(mainProdArg, 'MAX_LOOKAHEAD')) {\n      newOrProd.maxLookahead = mainProdArg.MAX_LOOKAHEAD\n    }\n    const hasPredicates = some(alts, (currAlt) => isFunction(currAlt.GATE))\n    newOrProd.hasPredicates = hasPredicates\n    prevProd.definition.push(newOrProd)\n    forEach(alts, (currAlt) => {\n      const currAltFlat = new Alternative({ definition: [] })\n      newOrProd.definition.push(currAltFlat)\n      if (has(currAlt, 'IGNORE_AMBIGUITIES')) {\n        currAltFlat.ignoreAmbiguities = currAlt.IGNORE_AMBIGUITIES // assumes end user provides the correct config value/type\n      }\n      // **implicit** ignoreAmbiguities due to usage of gate\n      else if (has(currAlt, 'GATE')) {\n        currAltFlat.ignoreAmbiguities = true\n      }\n      this.recordingProdStack.push(currAltFlat)\n      currAlt.ALT.call(this)\n      this.recordingProdStack.pop()\n    })\n    return RECORDING_NULL_OBJECT\n  }\n  function getIdxSuffix(idx) {\n    return idx === 0 ? '' : `${idx}`\n  }\n  function assertMethodIdxIsValid(idx) {\n    if (idx < 0 || idx > MAX_METHOD_IDX) {\n      const error = new Error(\n        // The stack trace will contain all the needed details\n        `Invalid DSL Method idx value: <${idx}>\\n\\t` +\n          `Idx value must be a none negative value smaller than ${MAX_METHOD_IDX + 1}`,\n      )\n      error.KNOWN_RECORDER_ERROR = true\n      throw error\n    }\n  }\n\n  /**\n   * Trait responsible for runtime parsing errors.\n   */\n  class PerformanceTracer {\n    initPerformanceTracer(config) {\n      if (has(config, 'traceInitPerf')) {\n        const userTraceInitPerf = config.traceInitPerf\n        const traceIsNumber = typeof userTraceInitPerf === 'number'\n        this.traceInitMaxIdent = traceIsNumber ? userTraceInitPerf : Infinity\n        this.traceInitPerf = traceIsNumber ? userTraceInitPerf > 0 : userTraceInitPerf // assumes end user provides the correct config value/type\n      } else {\n        this.traceInitMaxIdent = 0\n        this.traceInitPerf = DEFAULT_PARSER_CONFIG.traceInitPerf\n      }\n      this.traceInitIndent = -1\n    }\n    TRACE_INIT(phaseDesc, phaseImpl) {\n      // No need to optimize this using NOOP pattern because\n      // It is not called in a hot spot...\n      if (this.traceInitPerf === true) {\n        this.traceInitIndent++\n        const indent = new Array(this.traceInitIndent + 1).join('\\t')\n        if (this.traceInitIndent < this.traceInitMaxIdent) {\n          console.log(`${indent}--> <${phaseDesc}>`)\n        }\n        const { time, value } = timer(phaseImpl)\n        /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\n        const traceMethod = time > 10 ? console.warn : console.log\n        if (this.traceInitIndent < this.traceInitMaxIdent) {\n          traceMethod(`${indent}<-- <${phaseDesc}> time: ${time}ms`)\n        }\n        this.traceInitIndent--\n        return value\n      } else {\n        return phaseImpl()\n      }\n    }\n  }\n\n  function applyMixins(derivedCtor, baseCtors) {\n    baseCtors.forEach((baseCtor) => {\n      const baseProto = baseCtor.prototype\n      Object.getOwnPropertyNames(baseProto).forEach((propName) => {\n        if (propName === 'constructor') {\n          return\n        }\n        const basePropDescriptor = Object.getOwnPropertyDescriptor(baseProto, propName)\n        // Handle Accessors\n        if (basePropDescriptor && (basePropDescriptor.get || basePropDescriptor.set)) {\n          Object.defineProperty(derivedCtor.prototype, propName, basePropDescriptor)\n        } else {\n          derivedCtor.prototype[propName] = baseCtor.prototype[propName]\n        }\n      })\n    })\n  }\n\n  const END_OF_FILE = createTokenInstance(EOF, '', NaN, NaN, NaN, NaN, NaN, NaN)\n  Object.freeze(END_OF_FILE)\n  const DEFAULT_PARSER_CONFIG = Object.freeze({\n    recoveryEnabled: false,\n    maxLookahead: 3,\n    dynamicTokensEnabled: false,\n    outputCst: true,\n    errorMessageProvider: defaultParserErrorProvider,\n    nodeLocationTracking: 'none',\n    traceInitPerf: false,\n    skipValidations: false,\n  })\n  const DEFAULT_RULE_CONFIG = Object.freeze({\n    recoveryValueFunc: () => undefined,\n    resyncEnabled: true,\n  })\n  var ParserDefinitionErrorType\n  ;(function (ParserDefinitionErrorType) {\n    ParserDefinitionErrorType[(ParserDefinitionErrorType['INVALID_RULE_NAME'] = 0)] = 'INVALID_RULE_NAME'\n    ParserDefinitionErrorType[(ParserDefinitionErrorType['DUPLICATE_RULE_NAME'] = 1)] = 'DUPLICATE_RULE_NAME'\n    ParserDefinitionErrorType[(ParserDefinitionErrorType['INVALID_RULE_OVERRIDE'] = 2)] = 'INVALID_RULE_OVERRIDE'\n    ParserDefinitionErrorType[(ParserDefinitionErrorType['DUPLICATE_PRODUCTIONS'] = 3)] = 'DUPLICATE_PRODUCTIONS'\n    ParserDefinitionErrorType[(ParserDefinitionErrorType['UNRESOLVED_SUBRULE_REF'] = 4)] = 'UNRESOLVED_SUBRULE_REF'\n    ParserDefinitionErrorType[(ParserDefinitionErrorType['LEFT_RECURSION'] = 5)] = 'LEFT_RECURSION'\n    ParserDefinitionErrorType[(ParserDefinitionErrorType['NONE_LAST_EMPTY_ALT'] = 6)] = 'NONE_LAST_EMPTY_ALT'\n    ParserDefinitionErrorType[(ParserDefinitionErrorType['AMBIGUOUS_ALTS'] = 7)] = 'AMBIGUOUS_ALTS'\n    ParserDefinitionErrorType[(ParserDefinitionErrorType['CONFLICT_TOKENS_RULES_NAMESPACE'] = 8)] =\n      'CONFLICT_TOKENS_RULES_NAMESPACE'\n    ParserDefinitionErrorType[(ParserDefinitionErrorType['INVALID_TOKEN_NAME'] = 9)] = 'INVALID_TOKEN_NAME'\n    ParserDefinitionErrorType[(ParserDefinitionErrorType['NO_NON_EMPTY_LOOKAHEAD'] = 10)] = 'NO_NON_EMPTY_LOOKAHEAD'\n    ParserDefinitionErrorType[(ParserDefinitionErrorType['AMBIGUOUS_PREFIX_ALTS'] = 11)] = 'AMBIGUOUS_PREFIX_ALTS'\n    ParserDefinitionErrorType[(ParserDefinitionErrorType['TOO_MANY_ALTS'] = 12)] = 'TOO_MANY_ALTS'\n    ParserDefinitionErrorType[(ParserDefinitionErrorType['CUSTOM_LOOKAHEAD_VALIDATION'] = 13)] =\n      'CUSTOM_LOOKAHEAD_VALIDATION'\n  })(ParserDefinitionErrorType || (ParserDefinitionErrorType = {}))\n  class Parser {\n    /**\n     *  @deprecated use the **instance** method with the same name instead\n     */\n    static performSelfAnalysis(parserInstance) {\n      throw Error(\n        'The **static** `performSelfAnalysis` method has been deprecated.' +\n          '\\t\\nUse the **instance** method with the same name instead.',\n      )\n    }\n    performSelfAnalysis() {\n      this.TRACE_INIT('performSelfAnalysis', () => {\n        let defErrorsMsgs\n        this.selfAnalysisDone = true\n        const className = this.className\n        this.TRACE_INIT('toFastProps', () => {\n          // Without this voodoo magic the parser would be x3-x4 slower\n          // It seems it is better to invoke `toFastProperties` **before**\n          // Any manipulations of the `this` object done during the recording phase.\n          toFastProperties(this)\n        })\n        this.TRACE_INIT('Grammar Recording', () => {\n          try {\n            this.enableRecording()\n            // Building the GAST\n            forEach(this.definedRulesNames, (currRuleName) => {\n              const wrappedRule = this[currRuleName]\n              const originalGrammarAction = wrappedRule['originalGrammarAction']\n              let recordedRuleGast\n              this.TRACE_INIT(`${currRuleName} Rule`, () => {\n                recordedRuleGast = this.topLevelRuleRecord(currRuleName, originalGrammarAction)\n              })\n              this.gastProductionsCache[currRuleName] = recordedRuleGast\n            })\n          } finally {\n            this.disableRecording()\n          }\n        })\n        let resolverErrors = []\n        this.TRACE_INIT('Grammar Resolving', () => {\n          resolverErrors = resolveGrammar({\n            rules: values(this.gastProductionsCache),\n          })\n          this.definitionErrors = this.definitionErrors.concat(resolverErrors)\n        })\n        this.TRACE_INIT('Grammar Validations', () => {\n          // only perform additional grammar validations IFF no resolving errors have occurred.\n          // as unresolved grammar may lead to unhandled runtime exceptions in the follow up validations.\n          if (isEmpty(resolverErrors) && this.skipValidations === false) {\n            const validationErrors = validateGrammar({\n              rules: values(this.gastProductionsCache),\n              tokenTypes: values(this.tokensMap),\n              errMsgProvider: defaultGrammarValidatorErrorProvider,\n              grammarName: className,\n            })\n            const lookaheadValidationErrors = validateLookahead({\n              lookaheadStrategy: this.lookaheadStrategy,\n              rules: values(this.gastProductionsCache),\n              tokenTypes: values(this.tokensMap),\n              grammarName: className,\n            })\n            this.definitionErrors = this.definitionErrors.concat(validationErrors, lookaheadValidationErrors)\n          }\n        })\n        // this analysis may fail if the grammar is not perfectly valid\n        if (isEmpty(this.definitionErrors)) {\n          // The results of these computations are not needed unless error recovery is enabled.\n          if (this.recoveryEnabled) {\n            this.TRACE_INIT('computeAllProdsFollows', () => {\n              const allFollows = computeAllProdsFollows(values(this.gastProductionsCache))\n              this.resyncFollows = allFollows\n            })\n          }\n          this.TRACE_INIT('ComputeLookaheadFunctions', () => {\n            var _a, _b\n            ;(_b = (_a = this.lookaheadStrategy).initialize) === null || _b === void 0\n              ? void 0\n              : _b.call(_a, {\n                  rules: values(this.gastProductionsCache),\n                })\n            this.preComputeLookaheadFunctions(values(this.gastProductionsCache))\n          })\n        }\n        if (!Parser.DEFER_DEFINITION_ERRORS_HANDLING && !isEmpty(this.definitionErrors)) {\n          defErrorsMsgs = map(this.definitionErrors, (defError) => defError.message)\n          throw new Error(\n            `Parser Definition Errors detected:\\n ${defErrorsMsgs.join('\\n-------------------------------\\n')}`,\n          )\n        }\n      })\n    }\n    constructor(tokenVocabulary, config) {\n      this.definitionErrors = []\n      this.selfAnalysisDone = false\n      const that = this\n      that.initErrorHandler(config)\n      that.initLexerAdapter()\n      that.initLooksAhead(config)\n      that.initRecognizerEngine(tokenVocabulary, config)\n      that.initRecoverable(config)\n      that.initTreeBuilder(config)\n      that.initContentAssist()\n      that.initGastRecorder(config)\n      that.initPerformanceTracer(config)\n      if (has(config, 'ignoredIssues')) {\n        throw new Error(\n          'The <ignoredIssues> IParserConfig property has been deprecated.\\n\\t' +\n            'Please use the <IGNORE_AMBIGUITIES> flag on the relevant DSL method instead.\\n\\t' +\n            'See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#IGNORING_AMBIGUITIES\\n\\t' +\n            'For further details.',\n        )\n      }\n      this.skipValidations = has(config, 'skipValidations')\n        ? config.skipValidations // casting assumes the end user passing the correct type\n        : DEFAULT_PARSER_CONFIG.skipValidations\n    }\n  }\n  // Set this flag to true if you don't want the Parser to throw error when problems in it's definition are detected.\n  // (normally during the parser's constructor).\n  // This is a design time flag, it will not affect the runtime error handling of the parser, just design time errors,\n  // for example: duplicate rule names, referencing an unresolved subrule, ect...\n  // This flag should not be enabled during normal usage, it is used in special situations, for example when\n  // needing to display the parser definition errors in some GUI(online playground).\n  Parser.DEFER_DEFINITION_ERRORS_HANDLING = false\n  applyMixins(Parser, [\n    Recoverable,\n    LooksAhead,\n    TreeBuilder,\n    LexerAdapter,\n    RecognizerEngine,\n    RecognizerApi,\n    ErrorHandler,\n    ContentAssist,\n    GastRecorder,\n    PerformanceTracer,\n  ])\n  class CstParser extends Parser {\n    constructor(tokenVocabulary, config = DEFAULT_PARSER_CONFIG) {\n      const configClone = clone(config)\n      configClone.outputCst = true\n      super(tokenVocabulary, configClone)\n    }\n  }\n\n  return { CstParser, Lexer, createToken }\n})()\n\nexport { CstParser, Lexer, createToken }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}