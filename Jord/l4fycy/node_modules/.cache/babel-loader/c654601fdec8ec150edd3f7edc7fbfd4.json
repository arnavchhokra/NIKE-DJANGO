{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _objectSpread from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _asyncToGenerator from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/**\n * @webxr-input-profiles/motion-controllers 1.0.0 https://github.com/immersive-web/webxr-input-profiles\n */\nvar MotionControllerConstants = {\n  Handedness: Object.freeze({\n    NONE: 'none',\n    LEFT: 'left',\n    RIGHT: 'right'\n  }),\n  ComponentState: Object.freeze({\n    DEFAULT: 'default',\n    TOUCHED: 'touched',\n    PRESSED: 'pressed'\n  }),\n  ComponentProperty: Object.freeze({\n    BUTTON: 'button',\n    X_AXIS: 'xAxis',\n    Y_AXIS: 'yAxis',\n    STATE: 'state'\n  }),\n  ComponentType: Object.freeze({\n    TRIGGER: 'trigger',\n    SQUEEZE: 'squeeze',\n    TOUCHPAD: 'touchpad',\n    THUMBSTICK: 'thumbstick',\n    BUTTON: 'button'\n  }),\n  ButtonTouchThreshold: 0.05,\n  AxisTouchThreshold: 0.1,\n  VisualResponseProperty: Object.freeze({\n    TRANSFORM: 'transform',\n    VISIBILITY: 'visibility'\n  })\n};\n/**\n * @description Static helper function to fetch a JSON file and turn it into a JS object\n * @param {string} path - Path to JSON file to be fetched\n */\n\nfunction fetchJsonFile(_x) {\n  return _fetchJsonFile.apply(this, arguments);\n}\n\nfunction _fetchJsonFile() {\n  _fetchJsonFile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(path) {\n    var response;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(path);\n\n          case 2:\n            response = _context.sent;\n\n            if (response.ok) {\n              _context.next = 7;\n              break;\n            }\n\n            throw new Error(response.statusText);\n\n          case 7:\n            return _context.abrupt(\"return\", response.json());\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _fetchJsonFile.apply(this, arguments);\n}\n\nfunction fetchProfilesList(_x2) {\n  return _fetchProfilesList.apply(this, arguments);\n}\n\nfunction _fetchProfilesList() {\n  _fetchProfilesList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(basePath) {\n    var profileListFileName, profilesList;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (basePath) {\n              _context2.next = 2;\n              break;\n            }\n\n            throw new Error('No basePath supplied');\n\n          case 2:\n            profileListFileName = 'profilesList.json';\n            _context2.next = 5;\n            return fetchJsonFile(\"\".concat(basePath, \"/\").concat(profileListFileName));\n\n          case 5:\n            profilesList = _context2.sent;\n            return _context2.abrupt(\"return\", profilesList);\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _fetchProfilesList.apply(this, arguments);\n}\n\nfunction fetchProfile(_x3, _x4) {\n  return _fetchProfile.apply(this, arguments);\n}\n/** @constant {Object} */\n\n\nfunction _fetchProfile() {\n  _fetchProfile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(xrInputSource, basePath) {\n    var defaultProfile,\n        getAssetPath,\n        supportedProfilesList,\n        match,\n        supportedProfile,\n        profile,\n        assetPath,\n        layout,\n        _args3 = arguments;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            defaultProfile = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : null;\n            getAssetPath = _args3.length > 3 && _args3[3] !== undefined ? _args3[3] : true;\n\n            if (xrInputSource) {\n              _context3.next = 4;\n              break;\n            }\n\n            throw new Error('No xrInputSource supplied');\n\n          case 4:\n            if (basePath) {\n              _context3.next = 6;\n              break;\n            }\n\n            throw new Error('No basePath supplied');\n\n          case 6:\n            _context3.next = 8;\n            return fetchProfilesList(basePath);\n\n          case 8:\n            supportedProfilesList = _context3.sent;\n            xrInputSource.profiles.some(function (profileId) {\n              var supportedProfile = supportedProfilesList[profileId];\n\n              if (supportedProfile) {\n                match = {\n                  profileId: profileId,\n                  profilePath: \"\".concat(basePath, \"/\").concat(supportedProfile.path),\n                  deprecated: !!supportedProfile.deprecated\n                };\n              }\n\n              return !!match;\n            });\n\n            if (match) {\n              _context3.next = 17;\n              break;\n            }\n\n            if (defaultProfile) {\n              _context3.next = 13;\n              break;\n            }\n\n            throw new Error('No matching profile name found');\n\n          case 13:\n            supportedProfile = supportedProfilesList[defaultProfile];\n\n            if (supportedProfile) {\n              _context3.next = 16;\n              break;\n            }\n\n            throw new Error(\"No matching profile name found and default profile \\\"\".concat(defaultProfile, \"\\\" missing.\"));\n\n          case 16:\n            match = {\n              profileId: defaultProfile,\n              profilePath: \"\".concat(basePath, \"/\").concat(supportedProfile.path),\n              deprecated: !!supportedProfile.deprecated\n            };\n\n          case 17:\n            _context3.next = 19;\n            return fetchJsonFile(match.profilePath);\n\n          case 19:\n            profile = _context3.sent;\n\n            if (!getAssetPath) {\n              _context3.next = 25;\n              break;\n            }\n\n            if (xrInputSource.handedness === 'any') {\n              layout = profile.layouts[Object.keys(profile.layouts)[0]];\n            } else {\n              layout = profile.layouts[xrInputSource.handedness];\n            }\n\n            if (layout) {\n              _context3.next = 24;\n              break;\n            }\n\n            throw new Error(\"No matching handedness, \".concat(xrInputSource.handedness, \", in profile \").concat(match.profileId));\n\n          case 24:\n            if (layout.assetPath) {\n              assetPath = match.profilePath.replace('profile.json', layout.assetPath);\n            }\n\n          case 25:\n            return _context3.abrupt(\"return\", {\n              profile: profile,\n              assetPath: assetPath\n            });\n\n          case 26:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _fetchProfile.apply(this, arguments);\n}\n\nvar defaultComponentValues = {\n  xAxis: 0,\n  yAxis: 0,\n  button: 0,\n  state: MotionControllerConstants.ComponentState.DEFAULT\n};\n/**\n * @description Converts an X, Y coordinate from the range -1 to 1 (as reported by the Gamepad\n * API) to the range 0 to 1 (for interpolation). Also caps the X, Y values to be bounded within\n * a circle. This ensures that thumbsticks are not animated outside the bounds of their physical\n * range of motion and touchpads do not report touch locations off their physical bounds.\n * @param {number} x The original x coordinate in the range -1 to 1\n * @param {number} y The original y coordinate in the range -1 to 1\n */\n\nfunction normalizeAxes() {\n  var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var xAxis = x;\n  var yAxis = y; // Determine if the point is outside the bounds of the circle\n  // and, if so, place it on the edge of the circle\n\n  var hypotenuse = Math.sqrt(x * x + y * y);\n\n  if (hypotenuse > 1) {\n    var theta = Math.atan2(y, x);\n    xAxis = Math.cos(theta);\n    yAxis = Math.sin(theta);\n  } // Scale and move the circle so values are in the interpolation range.  The circle's origin moves\n  // from (0, 0) to (0.5, 0.5). The circle's radius scales from 1 to be 0.5.\n\n\n  var result = {\n    normalizedXAxis: xAxis * 0.5 + 0.5,\n    normalizedYAxis: yAxis * 0.5 + 0.5\n  };\n  return result;\n}\n/**\n * Contains the description of how the 3D model should visually respond to a specific user input.\n * This is accomplished by initializing the object with the name of a node in the 3D model and\n * property that need to be modified in response to user input, the name of the nodes representing\n * the allowable range of motion, and the name of the input which triggers the change. In response\n * to the named input changing, this object computes the appropriate weighting to use for\n * interpolating between the range of motion nodes.\n */\n\n\nvar VisualResponse = /*#__PURE__*/function () {\n  function VisualResponse(visualResponseDescription) {\n    _classCallCheck(this, VisualResponse);\n\n    this.componentProperty = visualResponseDescription.componentProperty;\n    this.states = visualResponseDescription.states;\n    this.valueNodeName = visualResponseDescription.valueNodeName;\n    this.valueNodeProperty = visualResponseDescription.valueNodeProperty;\n\n    if (this.valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM) {\n      this.minNodeName = visualResponseDescription.minNodeName;\n      this.maxNodeName = visualResponseDescription.maxNodeName;\n    } // Initializes the response's current value based on default data\n\n\n    this.value = 0;\n    this.updateFromComponent(defaultComponentValues);\n  }\n  /**\n   * Computes the visual response's interpolation weight based on component state\n   * @param {Object} componentValues - The component from which to update\n   * @param {number} xAxis - The reported X axis value of the component\n   * @param {number} yAxis - The reported Y axis value of the component\n   * @param {number} button - The reported value of the component's button\n   * @param {string} state - The component's active state\n   */\n\n\n  _createClass(VisualResponse, [{\n    key: \"updateFromComponent\",\n    value: function updateFromComponent(_ref) {\n      var xAxis = _ref.xAxis,\n          yAxis = _ref.yAxis,\n          button = _ref.button,\n          state = _ref.state;\n\n      var _normalizeAxes = normalizeAxes(xAxis, yAxis),\n          normalizedXAxis = _normalizeAxes.normalizedXAxis,\n          normalizedYAxis = _normalizeAxes.normalizedYAxis;\n\n      switch (this.componentProperty) {\n        case MotionControllerConstants.ComponentProperty.X_AXIS:\n          this.value = this.states.includes(state) ? normalizedXAxis : 0.5;\n          break;\n\n        case MotionControllerConstants.ComponentProperty.Y_AXIS:\n          this.value = this.states.includes(state) ? normalizedYAxis : 0.5;\n          break;\n\n        case MotionControllerConstants.ComponentProperty.BUTTON:\n          this.value = this.states.includes(state) ? button : 0;\n          break;\n\n        case MotionControllerConstants.ComponentProperty.STATE:\n          if (this.valueNodeProperty === MotionControllerConstants.VisualResponseProperty.VISIBILITY) {\n            this.value = this.states.includes(state);\n          } else {\n            this.value = this.states.includes(state) ? 1.0 : 0.0;\n          }\n\n          break;\n\n        default:\n          throw new Error(\"Unexpected visualResponse componentProperty \".concat(this.componentProperty));\n      }\n    }\n  }]);\n\n  return VisualResponse;\n}();\n\nvar Component = /*#__PURE__*/function () {\n  /**\n   * @param {Object} componentId - Id of the component\n   * @param {Object} componentDescription - Description of the component to be created\n   */\n  function Component(componentId, componentDescription) {\n    var _this = this;\n\n    _classCallCheck(this, Component);\n\n    if (!componentId || !componentDescription || !componentDescription.visualResponses || !componentDescription.gamepadIndices || Object.keys(componentDescription.gamepadIndices).length === 0) {\n      throw new Error('Invalid arguments supplied');\n    }\n\n    this.id = componentId;\n    this.type = componentDescription.type;\n    this.rootNodeName = componentDescription.rootNodeName;\n    this.touchPointNodeName = componentDescription.touchPointNodeName; // Build all the visual responses for this component\n\n    this.visualResponses = {};\n    Object.keys(componentDescription.visualResponses).forEach(function (responseName) {\n      var visualResponse = new VisualResponse(componentDescription.visualResponses[responseName]);\n      _this.visualResponses[responseName] = visualResponse;\n    }); // Set default values\n\n    this.gamepadIndices = Object.assign({}, componentDescription.gamepadIndices);\n    this.values = {\n      state: MotionControllerConstants.ComponentState.DEFAULT,\n      button: this.gamepadIndices.button !== undefined ? 0 : undefined,\n      xAxis: this.gamepadIndices.xAxis !== undefined ? 0 : undefined,\n      yAxis: this.gamepadIndices.yAxis !== undefined ? 0 : undefined\n    };\n  }\n\n  _createClass(Component, [{\n    key: \"data\",\n    get: function get() {\n      var data = _objectSpread({\n        id: this.id\n      }, this.values);\n\n      return data;\n    }\n    /**\n     * @description Poll for updated data based on current gamepad state\n     * @param {Object} gamepad - The gamepad object from which the component data should be polled\n     */\n\n  }, {\n    key: \"updateFromGamepad\",\n    value: function updateFromGamepad(gamepad) {\n      var _this2 = this;\n\n      // Set the state to default before processing other data sources\n      this.values.state = MotionControllerConstants.ComponentState.DEFAULT; // Get and normalize button\n\n      if (this.gamepadIndices.button !== undefined && gamepad.buttons.length > this.gamepadIndices.button) {\n        var gamepadButton = gamepad.buttons[this.gamepadIndices.button];\n        this.values.button = gamepadButton.value;\n        this.values.button = this.values.button < 0 ? 0 : this.values.button;\n        this.values.button = this.values.button > 1 ? 1 : this.values.button; // Set the state based on the button\n\n        if (gamepadButton.pressed || this.values.button === 1) {\n          this.values.state = MotionControllerConstants.ComponentState.PRESSED;\n        } else if (gamepadButton.touched || this.values.button > MotionControllerConstants.ButtonTouchThreshold) {\n          this.values.state = MotionControllerConstants.ComponentState.TOUCHED;\n        }\n      } // Get and normalize x axis value\n\n\n      if (this.gamepadIndices.xAxis !== undefined && gamepad.axes.length > this.gamepadIndices.xAxis) {\n        this.values.xAxis = gamepad.axes[this.gamepadIndices.xAxis];\n        this.values.xAxis = this.values.xAxis < -1 ? -1 : this.values.xAxis;\n        this.values.xAxis = this.values.xAxis > 1 ? 1 : this.values.xAxis; // If the state is still default, check if the xAxis makes it touched\n\n        if (this.values.state === MotionControllerConstants.ComponentState.DEFAULT && Math.abs(this.values.xAxis) > MotionControllerConstants.AxisTouchThreshold) {\n          this.values.state = MotionControllerConstants.ComponentState.TOUCHED;\n        }\n      } // Get and normalize Y axis value\n\n\n      if (this.gamepadIndices.yAxis !== undefined && gamepad.axes.length > this.gamepadIndices.yAxis) {\n        this.values.yAxis = gamepad.axes[this.gamepadIndices.yAxis];\n        this.values.yAxis = this.values.yAxis < -1 ? -1 : this.values.yAxis;\n        this.values.yAxis = this.values.yAxis > 1 ? 1 : this.values.yAxis; // If the state is still default, check if the yAxis makes it touched\n\n        if (this.values.state === MotionControllerConstants.ComponentState.DEFAULT && Math.abs(this.values.yAxis) > MotionControllerConstants.AxisTouchThreshold) {\n          this.values.state = MotionControllerConstants.ComponentState.TOUCHED;\n        }\n      } // Update the visual response weights based on the current component data\n\n\n      Object.values(this.visualResponses).forEach(function (visualResponse) {\n        visualResponse.updateFromComponent(_this2.values);\n      });\n    }\n  }]);\n\n  return Component;\n}();\n/**\n * @description Builds a motion controller with components and visual responses based on the\n * supplied profile description. Data is polled from the xrInputSource's gamepad.\n * @author Nell Waliczek / https://github.com/NellWaliczek\n */\n\n\nvar MotionController = /*#__PURE__*/function () {\n  /**\n   * @param {Object} xrInputSource - The XRInputSource to build the MotionController around\n   * @param {Object} profile - The best matched profile description for the supplied xrInputSource\n   * @param {Object} assetUrl\n   */\n  function MotionController(xrInputSource, profile, assetUrl) {\n    var _this3 = this;\n\n    _classCallCheck(this, MotionController);\n\n    if (!xrInputSource) {\n      throw new Error('No xrInputSource supplied');\n    }\n\n    if (!profile) {\n      throw new Error('No profile supplied');\n    }\n\n    this.xrInputSource = xrInputSource;\n    this.assetUrl = assetUrl;\n    this.id = profile.profileId; // Build child components as described in the profile description\n\n    this.layoutDescription = profile.layouts[xrInputSource.handedness];\n    this.components = {};\n    Object.keys(this.layoutDescription.components).forEach(function (componentId) {\n      var componentDescription = _this3.layoutDescription.components[componentId];\n      _this3.components[componentId] = new Component(componentId, componentDescription);\n    }); // Initialize components based on current gamepad state\n\n    this.updateFromGamepad();\n  }\n\n  _createClass(MotionController, [{\n    key: \"gripSpace\",\n    get: function get() {\n      return this.xrInputSource.gripSpace;\n    }\n  }, {\n    key: \"targetRaySpace\",\n    get: function get() {\n      return this.xrInputSource.targetRaySpace;\n    }\n    /**\n     * @description Returns a subset of component data for simplified debugging\n     */\n\n  }, {\n    key: \"data\",\n    get: function get() {\n      var data = [];\n      Object.values(this.components).forEach(function (component) {\n        data.push(component.data);\n      });\n      return data;\n    }\n    /**\n     * @description Poll for updated data based on current gamepad state\n     */\n\n  }, {\n    key: \"updateFromGamepad\",\n    value: function updateFromGamepad() {\n      var _this4 = this;\n\n      Object.values(this.components).forEach(function (component) {\n        component.updateFromGamepad(_this4.xrInputSource.gamepad);\n      });\n    }\n  }]);\n\n  return MotionController;\n}();\n\nexport { MotionController, MotionControllerConstants, fetchProfile, fetchProfilesList };","map":{"version":3,"names":["MotionControllerConstants","Handedness","Object","freeze","NONE","LEFT","RIGHT","ComponentState","DEFAULT","TOUCHED","PRESSED","ComponentProperty","BUTTON","X_AXIS","Y_AXIS","STATE","ComponentType","TRIGGER","SQUEEZE","TOUCHPAD","THUMBSTICK","ButtonTouchThreshold","AxisTouchThreshold","VisualResponseProperty","TRANSFORM","VISIBILITY","fetchJsonFile","path","fetch","response","ok","Error","statusText","json","fetchProfilesList","basePath","profileListFileName","profilesList","fetchProfile","xrInputSource","defaultProfile","getAssetPath","supportedProfilesList","profiles","some","profileId","supportedProfile","match","profilePath","deprecated","profile","handedness","layout","layouts","keys","assetPath","replace","defaultComponentValues","xAxis","yAxis","button","state","normalizeAxes","x","y","hypotenuse","Math","sqrt","theta","atan2","cos","sin","result","normalizedXAxis","normalizedYAxis","VisualResponse","visualResponseDescription","componentProperty","states","valueNodeName","valueNodeProperty","minNodeName","maxNodeName","value","updateFromComponent","includes","Component","componentId","componentDescription","visualResponses","gamepadIndices","length","id","type","rootNodeName","touchPointNodeName","forEach","responseName","visualResponse","assign","values","undefined","data","gamepad","buttons","gamepadButton","pressed","touched","axes","abs","MotionController","assetUrl","layoutDescription","components","updateFromGamepad","gripSpace","targetRaySpace","component","push"],"sources":["C:/Users/Arnav/Downloads/l4fycy/node_modules/three-stdlib/libs/MotionControllers.js"],"sourcesContent":["/**\n * @webxr-input-profiles/motion-controllers 1.0.0 https://github.com/immersive-web/webxr-input-profiles\n */\nconst MotionControllerConstants = {\n  Handedness: Object.freeze({\n    NONE: 'none',\n    LEFT: 'left',\n    RIGHT: 'right'\n  }),\n  ComponentState: Object.freeze({\n    DEFAULT: 'default',\n    TOUCHED: 'touched',\n    PRESSED: 'pressed'\n  }),\n  ComponentProperty: Object.freeze({\n    BUTTON: 'button',\n    X_AXIS: 'xAxis',\n    Y_AXIS: 'yAxis',\n    STATE: 'state'\n  }),\n  ComponentType: Object.freeze({\n    TRIGGER: 'trigger',\n    SQUEEZE: 'squeeze',\n    TOUCHPAD: 'touchpad',\n    THUMBSTICK: 'thumbstick',\n    BUTTON: 'button'\n  }),\n  ButtonTouchThreshold: 0.05,\n  AxisTouchThreshold: 0.1,\n  VisualResponseProperty: Object.freeze({\n    TRANSFORM: 'transform',\n    VISIBILITY: 'visibility'\n  })\n};\n/**\n * @description Static helper function to fetch a JSON file and turn it into a JS object\n * @param {string} path - Path to JSON file to be fetched\n */\n\nasync function fetchJsonFile(path) {\n  const response = await fetch(path);\n\n  if (!response.ok) {\n    throw new Error(response.statusText);\n  } else {\n    return response.json();\n  }\n}\n\nasync function fetchProfilesList(basePath) {\n  if (!basePath) {\n    throw new Error('No basePath supplied');\n  }\n\n  const profileListFileName = 'profilesList.json';\n  const profilesList = await fetchJsonFile(`${basePath}/${profileListFileName}`);\n  return profilesList;\n}\n\nasync function fetchProfile(xrInputSource, basePath, defaultProfile = null, getAssetPath = true) {\n  if (!xrInputSource) {\n    throw new Error('No xrInputSource supplied');\n  }\n\n  if (!basePath) {\n    throw new Error('No basePath supplied');\n  } // Get the list of profiles\n\n\n  const supportedProfilesList = await fetchProfilesList(basePath); // Find the relative path to the first requested profile that is recognized\n\n  let match;\n  xrInputSource.profiles.some(profileId => {\n    const supportedProfile = supportedProfilesList[profileId];\n\n    if (supportedProfile) {\n      match = {\n        profileId,\n        profilePath: `${basePath}/${supportedProfile.path}`,\n        deprecated: !!supportedProfile.deprecated\n      };\n    }\n\n    return !!match;\n  });\n\n  if (!match) {\n    if (!defaultProfile) {\n      throw new Error('No matching profile name found');\n    }\n\n    const supportedProfile = supportedProfilesList[defaultProfile];\n\n    if (!supportedProfile) {\n      throw new Error(`No matching profile name found and default profile \"${defaultProfile}\" missing.`);\n    }\n\n    match = {\n      profileId: defaultProfile,\n      profilePath: `${basePath}/${supportedProfile.path}`,\n      deprecated: !!supportedProfile.deprecated\n    };\n  }\n\n  const profile = await fetchJsonFile(match.profilePath);\n  let assetPath;\n\n  if (getAssetPath) {\n    let layout;\n\n    if (xrInputSource.handedness === 'any') {\n      layout = profile.layouts[Object.keys(profile.layouts)[0]];\n    } else {\n      layout = profile.layouts[xrInputSource.handedness];\n    }\n\n    if (!layout) {\n      throw new Error(`No matching handedness, ${xrInputSource.handedness}, in profile ${match.profileId}`);\n    }\n\n    if (layout.assetPath) {\n      assetPath = match.profilePath.replace('profile.json', layout.assetPath);\n    }\n  }\n\n  return {\n    profile,\n    assetPath\n  };\n}\n/** @constant {Object} */\n\n\nconst defaultComponentValues = {\n  xAxis: 0,\n  yAxis: 0,\n  button: 0,\n  state: MotionControllerConstants.ComponentState.DEFAULT\n};\n/**\n * @description Converts an X, Y coordinate from the range -1 to 1 (as reported by the Gamepad\n * API) to the range 0 to 1 (for interpolation). Also caps the X, Y values to be bounded within\n * a circle. This ensures that thumbsticks are not animated outside the bounds of their physical\n * range of motion and touchpads do not report touch locations off their physical bounds.\n * @param {number} x The original x coordinate in the range -1 to 1\n * @param {number} y The original y coordinate in the range -1 to 1\n */\n\nfunction normalizeAxes(x = 0, y = 0) {\n  let xAxis = x;\n  let yAxis = y; // Determine if the point is outside the bounds of the circle\n  // and, if so, place it on the edge of the circle\n\n  const hypotenuse = Math.sqrt(x * x + y * y);\n\n  if (hypotenuse > 1) {\n    const theta = Math.atan2(y, x);\n    xAxis = Math.cos(theta);\n    yAxis = Math.sin(theta);\n  } // Scale and move the circle so values are in the interpolation range.  The circle's origin moves\n  // from (0, 0) to (0.5, 0.5). The circle's radius scales from 1 to be 0.5.\n\n\n  const result = {\n    normalizedXAxis: xAxis * 0.5 + 0.5,\n    normalizedYAxis: yAxis * 0.5 + 0.5\n  };\n  return result;\n}\n/**\n * Contains the description of how the 3D model should visually respond to a specific user input.\n * This is accomplished by initializing the object with the name of a node in the 3D model and\n * property that need to be modified in response to user input, the name of the nodes representing\n * the allowable range of motion, and the name of the input which triggers the change. In response\n * to the named input changing, this object computes the appropriate weighting to use for\n * interpolating between the range of motion nodes.\n */\n\n\nclass VisualResponse {\n  constructor(visualResponseDescription) {\n    this.componentProperty = visualResponseDescription.componentProperty;\n    this.states = visualResponseDescription.states;\n    this.valueNodeName = visualResponseDescription.valueNodeName;\n    this.valueNodeProperty = visualResponseDescription.valueNodeProperty;\n\n    if (this.valueNodeProperty === MotionControllerConstants.VisualResponseProperty.TRANSFORM) {\n      this.minNodeName = visualResponseDescription.minNodeName;\n      this.maxNodeName = visualResponseDescription.maxNodeName;\n    } // Initializes the response's current value based on default data\n\n\n    this.value = 0;\n    this.updateFromComponent(defaultComponentValues);\n  }\n  /**\n   * Computes the visual response's interpolation weight based on component state\n   * @param {Object} componentValues - The component from which to update\n   * @param {number} xAxis - The reported X axis value of the component\n   * @param {number} yAxis - The reported Y axis value of the component\n   * @param {number} button - The reported value of the component's button\n   * @param {string} state - The component's active state\n   */\n\n\n  updateFromComponent({\n    xAxis,\n    yAxis,\n    button,\n    state\n  }) {\n    const {\n      normalizedXAxis,\n      normalizedYAxis\n    } = normalizeAxes(xAxis, yAxis);\n\n    switch (this.componentProperty) {\n      case MotionControllerConstants.ComponentProperty.X_AXIS:\n        this.value = this.states.includes(state) ? normalizedXAxis : 0.5;\n        break;\n\n      case MotionControllerConstants.ComponentProperty.Y_AXIS:\n        this.value = this.states.includes(state) ? normalizedYAxis : 0.5;\n        break;\n\n      case MotionControllerConstants.ComponentProperty.BUTTON:\n        this.value = this.states.includes(state) ? button : 0;\n        break;\n\n      case MotionControllerConstants.ComponentProperty.STATE:\n        if (this.valueNodeProperty === MotionControllerConstants.VisualResponseProperty.VISIBILITY) {\n          this.value = this.states.includes(state);\n        } else {\n          this.value = this.states.includes(state) ? 1.0 : 0.0;\n        }\n\n        break;\n\n      default:\n        throw new Error(`Unexpected visualResponse componentProperty ${this.componentProperty}`);\n    }\n  }\n\n}\n\nclass Component {\n  /**\n   * @param {Object} componentId - Id of the component\n   * @param {Object} componentDescription - Description of the component to be created\n   */\n  constructor(componentId, componentDescription) {\n    if (!componentId || !componentDescription || !componentDescription.visualResponses || !componentDescription.gamepadIndices || Object.keys(componentDescription.gamepadIndices).length === 0) {\n      throw new Error('Invalid arguments supplied');\n    }\n\n    this.id = componentId;\n    this.type = componentDescription.type;\n    this.rootNodeName = componentDescription.rootNodeName;\n    this.touchPointNodeName = componentDescription.touchPointNodeName; // Build all the visual responses for this component\n\n    this.visualResponses = {};\n    Object.keys(componentDescription.visualResponses).forEach(responseName => {\n      const visualResponse = new VisualResponse(componentDescription.visualResponses[responseName]);\n      this.visualResponses[responseName] = visualResponse;\n    }); // Set default values\n\n    this.gamepadIndices = Object.assign({}, componentDescription.gamepadIndices);\n    this.values = {\n      state: MotionControllerConstants.ComponentState.DEFAULT,\n      button: this.gamepadIndices.button !== undefined ? 0 : undefined,\n      xAxis: this.gamepadIndices.xAxis !== undefined ? 0 : undefined,\n      yAxis: this.gamepadIndices.yAxis !== undefined ? 0 : undefined\n    };\n  }\n\n  get data() {\n    const data = {\n      id: this.id,\n      ...this.values\n    };\n    return data;\n  }\n  /**\n   * @description Poll for updated data based on current gamepad state\n   * @param {Object} gamepad - The gamepad object from which the component data should be polled\n   */\n\n\n  updateFromGamepad(gamepad) {\n    // Set the state to default before processing other data sources\n    this.values.state = MotionControllerConstants.ComponentState.DEFAULT; // Get and normalize button\n\n    if (this.gamepadIndices.button !== undefined && gamepad.buttons.length > this.gamepadIndices.button) {\n      const gamepadButton = gamepad.buttons[this.gamepadIndices.button];\n      this.values.button = gamepadButton.value;\n      this.values.button = this.values.button < 0 ? 0 : this.values.button;\n      this.values.button = this.values.button > 1 ? 1 : this.values.button; // Set the state based on the button\n\n      if (gamepadButton.pressed || this.values.button === 1) {\n        this.values.state = MotionControllerConstants.ComponentState.PRESSED;\n      } else if (gamepadButton.touched || this.values.button > MotionControllerConstants.ButtonTouchThreshold) {\n        this.values.state = MotionControllerConstants.ComponentState.TOUCHED;\n      }\n    } // Get and normalize x axis value\n\n\n    if (this.gamepadIndices.xAxis !== undefined && gamepad.axes.length > this.gamepadIndices.xAxis) {\n      this.values.xAxis = gamepad.axes[this.gamepadIndices.xAxis];\n      this.values.xAxis = this.values.xAxis < -1 ? -1 : this.values.xAxis;\n      this.values.xAxis = this.values.xAxis > 1 ? 1 : this.values.xAxis; // If the state is still default, check if the xAxis makes it touched\n\n      if (this.values.state === MotionControllerConstants.ComponentState.DEFAULT && Math.abs(this.values.xAxis) > MotionControllerConstants.AxisTouchThreshold) {\n        this.values.state = MotionControllerConstants.ComponentState.TOUCHED;\n      }\n    } // Get and normalize Y axis value\n\n\n    if (this.gamepadIndices.yAxis !== undefined && gamepad.axes.length > this.gamepadIndices.yAxis) {\n      this.values.yAxis = gamepad.axes[this.gamepadIndices.yAxis];\n      this.values.yAxis = this.values.yAxis < -1 ? -1 : this.values.yAxis;\n      this.values.yAxis = this.values.yAxis > 1 ? 1 : this.values.yAxis; // If the state is still default, check if the yAxis makes it touched\n\n      if (this.values.state === MotionControllerConstants.ComponentState.DEFAULT && Math.abs(this.values.yAxis) > MotionControllerConstants.AxisTouchThreshold) {\n        this.values.state = MotionControllerConstants.ComponentState.TOUCHED;\n      }\n    } // Update the visual response weights based on the current component data\n\n\n    Object.values(this.visualResponses).forEach(visualResponse => {\n      visualResponse.updateFromComponent(this.values);\n    });\n  }\n\n}\n/**\n * @description Builds a motion controller with components and visual responses based on the\n * supplied profile description. Data is polled from the xrInputSource's gamepad.\n * @author Nell Waliczek / https://github.com/NellWaliczek\n */\n\n\nclass MotionController {\n  /**\n   * @param {Object} xrInputSource - The XRInputSource to build the MotionController around\n   * @param {Object} profile - The best matched profile description for the supplied xrInputSource\n   * @param {Object} assetUrl\n   */\n  constructor(xrInputSource, profile, assetUrl) {\n    if (!xrInputSource) {\n      throw new Error('No xrInputSource supplied');\n    }\n\n    if (!profile) {\n      throw new Error('No profile supplied');\n    }\n\n    this.xrInputSource = xrInputSource;\n    this.assetUrl = assetUrl;\n    this.id = profile.profileId; // Build child components as described in the profile description\n\n    this.layoutDescription = profile.layouts[xrInputSource.handedness];\n    this.components = {};\n    Object.keys(this.layoutDescription.components).forEach(componentId => {\n      const componentDescription = this.layoutDescription.components[componentId];\n      this.components[componentId] = new Component(componentId, componentDescription);\n    }); // Initialize components based on current gamepad state\n\n    this.updateFromGamepad();\n  }\n\n  get gripSpace() {\n    return this.xrInputSource.gripSpace;\n  }\n\n  get targetRaySpace() {\n    return this.xrInputSource.targetRaySpace;\n  }\n  /**\n   * @description Returns a subset of component data for simplified debugging\n   */\n\n\n  get data() {\n    const data = [];\n    Object.values(this.components).forEach(component => {\n      data.push(component.data);\n    });\n    return data;\n  }\n  /**\n   * @description Poll for updated data based on current gamepad state\n   */\n\n\n  updateFromGamepad() {\n    Object.values(this.components).forEach(component => {\n      component.updateFromGamepad(this.xrInputSource.gamepad);\n    });\n  }\n\n}\n\nexport { MotionController, MotionControllerConstants, fetchProfile, fetchProfilesList };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}