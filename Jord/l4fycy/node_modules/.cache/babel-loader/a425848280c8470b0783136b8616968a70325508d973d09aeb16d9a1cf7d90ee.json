{"ast":null,"code":"'use client';\n\nimport { modalManager, useModalManager } from \"./chunk-CYRBRIA2.mjs\";\n\n// src/use-modal.ts\nimport { callAllHandlers } from \"@chakra-ui/shared-utils\";\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport { hideOthers } from \"aria-hidden\";\nimport { useCallback, useEffect, useId, useMemo, useRef, useState } from \"react\";\nfunction useModal(props) {\n  const {\n    isOpen,\n    onClose,\n    id,\n    closeOnOverlayClick = true,\n    closeOnEsc = true,\n    useInert = true,\n    onOverlayClick: onOverlayClickProp,\n    onEsc\n  } = props;\n  const dialogRef = useRef(null);\n  const overlayRef = useRef(null);\n  const [dialogId, headerId, bodyId] = useIds(id, \"chakra-modal\", \"chakra-modal--header\", \"chakra-modal--body\");\n  useAriaHidden(dialogRef, isOpen && useInert);\n  const index = useModalManager(dialogRef, isOpen);\n  const mouseDownTarget = useRef(null);\n  const onMouseDown = useCallback(event => {\n    mouseDownTarget.current = event.target;\n  }, []);\n  const onKeyDown = useCallback(event => {\n    if (event.key === \"Escape\") {\n      event.stopPropagation();\n      if (closeOnEsc) {\n        onClose == null ? void 0 : onClose();\n      }\n      onEsc == null ? void 0 : onEsc();\n    }\n  }, [closeOnEsc, onClose, onEsc]);\n  const [headerMounted, setHeaderMounted] = useState(false);\n  const [bodyMounted, setBodyMounted] = useState(false);\n  const getDialogProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return {\n      role: \"dialog\",\n      ...props2,\n      ref: mergeRefs(ref, dialogRef),\n      id: dialogId,\n      tabIndex: -1,\n      \"aria-modal\": true,\n      \"aria-labelledby\": headerMounted ? headerId : void 0,\n      \"aria-describedby\": bodyMounted ? bodyId : void 0,\n      onClick: callAllHandlers(props2.onClick, event => event.stopPropagation())\n    };\n  }, [bodyId, bodyMounted, dialogId, headerId, headerMounted]);\n  const onOverlayClick = useCallback(event => {\n    event.stopPropagation();\n    if (mouseDownTarget.current !== event.target) return;\n    if (!modalManager.isTopModal(dialogRef.current)) return;\n    if (closeOnOverlayClick) {\n      onClose == null ? void 0 : onClose();\n    }\n    onOverlayClickProp == null ? void 0 : onOverlayClickProp();\n  }, [onClose, closeOnOverlayClick, onOverlayClickProp]);\n  const getDialogContainerProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return {\n      ...props2,\n      ref: mergeRefs(ref, overlayRef),\n      onClick: callAllHandlers(props2.onClick, onOverlayClick),\n      onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown),\n      onMouseDown: callAllHandlers(props2.onMouseDown, onMouseDown)\n    };\n  }, [onKeyDown, onMouseDown, onOverlayClick]);\n  return {\n    isOpen,\n    onClose,\n    headerId,\n    bodyId,\n    setBodyMounted,\n    setHeaderMounted,\n    dialogRef,\n    overlayRef,\n    getDialogProps,\n    getDialogContainerProps,\n    index\n  };\n}\nfunction useAriaHidden(ref, shouldHide) {\n  const currentElement = ref.current;\n  useEffect(() => {\n    if (!ref.current || !shouldHide) return void 0;\n    return hideOthers(ref.current);\n  }, [shouldHide, ref, currentElement]);\n}\nfunction useIds(idProp) {\n  for (var _len = arguments.length, prefixes = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    prefixes[_key - 1] = arguments[_key];\n  }\n  const reactId = useId();\n  const id = idProp || reactId;\n  return useMemo(() => {\n    return prefixes.map(prefix => \"\".concat(prefix, \"-\").concat(id));\n  }, [id, prefixes]);\n}\nexport { useModal, useAriaHidden };","map":{"version":3,"names":["callAllHandlers","mergeRefs","hideOthers","useCallback","useEffect","useId","useMemo","useRef","useState","useModal","props","isOpen","onClose","id","closeOnOverlayClick","closeOnEsc","useInert","onOverlayClick","onOverlayClickProp","onEsc","dialogRef","overlayRef","dialogId","headerId","bodyId","useIds","useAriaHidden","index","useModalManager","mouseDownTarget","onMouseDown","event","current","target","onKeyDown","key","stopPropagation","headerMounted","setHeaderMounted","bodyMounted","setBodyMounted","getDialogProps","props2","arguments","length","undefined","ref","role","tabIndex","onClick","modalManager","isTopModal","getDialogContainerProps","shouldHide","currentElement","idProp","_len","prefixes","Array","_key","reactId","map","prefix","concat"],"sources":["D:\\Repos\\NIKE-DJANGO\\Jord\\l4fycy\\node_modules\\@chakra-ui\\modal\\src\\use-modal.ts"],"sourcesContent":["import { callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { PropGetter } from \"@chakra-ui/react-types\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport { hideOthers } from \"aria-hidden\"\n\nimport { useCallback, useEffect, useId, useMemo, useRef, useState } from \"react\"\nimport { modalManager, useModalManager } from \"./modal-manager\"\n\nexport interface UseModalProps {\n  /**\n   * If `true`, the modal will be open.\n   */\n  isOpen: boolean\n  /**\n   * The `id` of the modal\n   */\n  id?: string\n  /**\n   * Callback invoked to close the modal.\n   */\n  onClose(): void\n  /**\n   * If `true`, the modal will close when the overlay is clicked\n   * @default true\n   */\n  closeOnOverlayClick?: boolean\n  /**\n   * If `true`, the modal will close when the `Esc` key is pressed\n   * @default true\n   */\n  closeOnEsc?: boolean\n  /**\n   * Callback fired when the overlay is clicked.\n   */\n  onOverlayClick?(): void\n  /**\n   * Callback fired when the escape key is pressed and focus is within modal\n   */\n  onEsc?(): void\n  /**\n   * A11y: If `true`, the siblings of the `modal` will have `aria-hidden`\n   * set to `true` so that screen readers can only see the `modal`.\n   *\n   * This is commonly known as making the other elements **inert**\n   *\n   * @default true\n   */\n  useInert?: boolean\n}\n\n/**\n * Modal hook that manages all the logic for the modal dialog widget\n * and returns prop getters, state and actions.\n *\n * @param props\n */\nexport function useModal(props: UseModalProps) {\n  const {\n    isOpen,\n    onClose,\n    id,\n    closeOnOverlayClick = true,\n    closeOnEsc = true,\n    useInert = true,\n    onOverlayClick: onOverlayClickProp,\n    onEsc,\n  } = props\n\n  const dialogRef = useRef<HTMLElement>(null)\n  const overlayRef = useRef<HTMLElement>(null)\n\n  const [dialogId, headerId, bodyId] = useIds(\n    id,\n    `chakra-modal`,\n    `chakra-modal--header`,\n    `chakra-modal--body`,\n  )\n\n  /**\n   * Hook used to polyfill `aria-modal` for older browsers.\n   * It uses `aria-hidden` to all other nodes.\n   *\n   * @see https://developer.paciellogroup.com/blog/2018/06/the-current-state-of-modal-dialog-accessibility/\n   */\n  useAriaHidden(dialogRef, isOpen && useInert)\n  /**\n   * Hook used to manage multiple or nested modals\n   */\n  const index = useModalManager(dialogRef, isOpen)\n\n  const mouseDownTarget = useRef<EventTarget | null>(null)\n\n  const onMouseDown = useCallback((event: React.MouseEvent) => {\n    mouseDownTarget.current = event.target\n  }, [])\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      if (event.key === \"Escape\") {\n        event.stopPropagation()\n\n        if (closeOnEsc) {\n          onClose?.()\n        }\n\n        onEsc?.()\n      }\n    },\n    [closeOnEsc, onClose, onEsc],\n  )\n\n  const [headerMounted, setHeaderMounted] = useState(false)\n  const [bodyMounted, setBodyMounted] = useState(false)\n\n  const getDialogProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      role: \"dialog\",\n      ...props,\n      ref: mergeRefs(ref, dialogRef),\n      id: dialogId,\n      tabIndex: -1,\n      \"aria-modal\": true,\n      \"aria-labelledby\": headerMounted ? headerId : undefined,\n      \"aria-describedby\": bodyMounted ? bodyId : undefined,\n      onClick: callAllHandlers(props.onClick, (event: React.MouseEvent) =>\n        event.stopPropagation(),\n      ),\n    }),\n    [bodyId, bodyMounted, dialogId, headerId, headerMounted],\n  )\n\n  const onOverlayClick = useCallback(\n    (event: React.MouseEvent) => {\n      event.stopPropagation()\n      /**\n       * Make sure the event starts and ends on the same DOM element.\n       *\n       * This is used to prevent the modal from closing when you\n       * start dragging from the content, and release drag outside the content.\n       *\n       * We prevent this because it is technically not a considered \"click outside\"\n       */\n      if (mouseDownTarget.current !== event.target) return\n\n      /**\n       * When you click on the overlay, we want to remove only the topmost modal\n       */\n      if (!modalManager.isTopModal(dialogRef.current)) return\n\n      if (closeOnOverlayClick) {\n        onClose?.()\n      }\n\n      onOverlayClickProp?.()\n    },\n    [onClose, closeOnOverlayClick, onOverlayClickProp],\n  )\n\n  const getDialogContainerProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      ref: mergeRefs(ref, overlayRef),\n      onClick: callAllHandlers(props.onClick, onOverlayClick),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onMouseDown: callAllHandlers(props.onMouseDown, onMouseDown),\n    }),\n    [onKeyDown, onMouseDown, onOverlayClick],\n  )\n\n  return {\n    isOpen,\n    onClose,\n    headerId,\n    bodyId,\n    setBodyMounted,\n    setHeaderMounted,\n    dialogRef,\n    overlayRef,\n    getDialogProps,\n    getDialogContainerProps,\n    index,\n  }\n}\n\nexport type UseModalReturn = ReturnType<typeof useModal>\n\n/**\n * Modal hook to polyfill `aria-modal`.\n *\n * It applies `aria-hidden` to elements behind the modal\n * to indicate that they're `inert`.\n *\n * @param ref React ref of the node\n * @param shouldHide whether `aria-hidden` should be applied\n */\nexport function useAriaHidden(\n  ref: React.RefObject<HTMLElement>,\n  shouldHide: boolean,\n) {\n  // save current ref in a local var to trigger the effect on identity change\n  const currentElement = ref.current\n\n  useEffect(() => {\n    // keep using `ref.current` inside the effect\n    // it may have changed during render and the execution of the effect\n    if (!ref.current || !shouldHide) return undefined\n\n    return hideOthers(ref.current)\n  }, [shouldHide, ref, currentElement])\n}\n\nfunction useIds(idProp?: string, ...prefixes: string[]) {\n  const reactId = useId()\n  const id = idProp || reactId\n  return useMemo(() => {\n    return prefixes.map((prefix) => `${prefix}-${id}`)\n  }, [id, prefixes])\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}