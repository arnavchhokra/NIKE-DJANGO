{"ast":null,"code":"import { ShaderChunk, UniformsUtils, MeshDepthMaterial, RGBADepthPacking, MeshDistanceMaterial, ShaderLib, Matrix4, Vector3, Mesh, CylinderGeometry, Vector2, MeshStandardMaterial, DoubleSide } from 'three';\n\n/**\r\n * Regular expression for matching the `void main() {` opener line in GLSL.\r\n * @type {RegExp}\r\n */\nconst voidMainRegExp = /\\bvoid\\s+main\\s*\\(\\s*\\)\\s*{/g;\n\n/**\r\n * Recursively expands all `#include <xyz>` statements within string of shader code.\r\n * Copied from three's WebGLProgram#parseIncludes for external use.\r\n *\r\n * @param {string} source - The GLSL source code to evaluate\r\n * @return {string} The GLSL code with all includes expanded\r\n */\nfunction expandShaderIncludes(source) {\n  const pattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\n  function replace(match, include) {\n    let chunk = ShaderChunk[include];\n    return chunk ? expandShaderIncludes(chunk) : match;\n  }\n  return source.replace(pattern, replace);\n}\n\n/*\r\n * This is a direct copy of MathUtils.generateUUID from Three.js, to preserve compatibility with three\r\n * versions before 0.113.0 as it was changed from Math to MathUtils in that version.\r\n * https://github.com/mrdoob/three.js/blob/dd8b5aa3b270c17096b90945cd2d6d1b13aaec53/src/math/MathUtils.js#L16\r\n */\n\nconst _lut = [];\nfor (let i = 0; i < 256; i++) {\n  _lut[i] = (i < 16 ? '0' : '') + i.toString(16);\n}\nfunction generateUUID() {\n  // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\n\n  const d0 = Math.random() * 0xffffffff | 0;\n  const d1 = Math.random() * 0xffffffff | 0;\n  const d2 = Math.random() * 0xffffffff | 0;\n  const d3 = Math.random() * 0xffffffff | 0;\n  const uuid = _lut[d0 & 0xff] + _lut[d0 >> 8 & 0xff] + _lut[d0 >> 16 & 0xff] + _lut[d0 >> 24 & 0xff] + '-' + _lut[d1 & 0xff] + _lut[d1 >> 8 & 0xff] + '-' + _lut[d1 >> 16 & 0x0f | 0x40] + _lut[d1 >> 24 & 0xff] + '-' + _lut[d2 & 0x3f | 0x80] + _lut[d2 >> 8 & 0xff] + '-' + _lut[d2 >> 16 & 0xff] + _lut[d2 >> 24 & 0xff] + _lut[d3 & 0xff] + _lut[d3 >> 8 & 0xff] + _lut[d3 >> 16 & 0xff] + _lut[d3 >> 24 & 0xff];\n\n  // .toUpperCase() here flattens concatenated strings to save heap memory space.\n  return uuid.toUpperCase();\n}\n\n// Local assign polyfill to avoid importing troika-core\nconst assign = Object.assign || function /*target, ...sources*/\n() {\n  let target = arguments[0];\n  for (let i = 1, len = arguments.length; i < len; i++) {\n    let source = arguments[i];\n    if (source) {\n      for (let prop in source) {\n        if (Object.prototype.hasOwnProperty.call(source, prop)) {\n          target[prop] = source[prop];\n        }\n      }\n    }\n  }\n  return target;\n};\nconst epoch = Date.now();\nconst CONSTRUCTOR_CACHE = new WeakMap();\nconst SHADER_UPGRADE_CACHE = new Map();\n\n// Material ids must be integers, but we can't access the increment from Three's `Material` module,\n// so let's choose a sufficiently large starting value that should theoretically never collide.\nlet materialInstanceId = 1e10;\n\n/**\r\n * A utility for creating a custom shader material derived from another material's\r\n * shaders. This allows you to inject custom shader logic and transforms into the\r\n * builtin ThreeJS materials without having to recreate them from scratch.\r\n *\r\n * @param {THREE.Material} baseMaterial - the original material to derive from\r\n *\r\n * @param {Object} options - How the base material should be modified.\r\n * @param {Object} options.defines - Custom `defines` for the material\r\n * @param {Object} options.extensions - Custom `extensions` for the material, e.g. `{derivatives: true}`\r\n * @param {Object} options.uniforms - Custom `uniforms` for use in the modified shader. These can\r\n *        be accessed and manipulated via the resulting material's `uniforms` property, just like\r\n *        in a ShaderMaterial. You do not need to repeat the base material's own uniforms here.\r\n * @param {String} options.timeUniform - If specified, a uniform of this name will be injected into\r\n *        both shaders, and it will automatically be updated on each render frame with a number of\r\n *        elapsed milliseconds. The \"zero\" epoch time is not significant so don't rely on this as a\r\n *        true calendar time.\r\n * @param {String} options.vertexDefs - Custom GLSL code to inject into the vertex shader's top-level\r\n *        definitions, above the `void main()` function.\r\n * @param {String} options.vertexMainIntro - Custom GLSL code to inject at the top of the vertex\r\n *        shader's `void main` function.\r\n * @param {String} options.vertexMainOutro - Custom GLSL code to inject at the end of the vertex\r\n *        shader's `void main` function.\r\n * @param {String} options.vertexTransform - Custom GLSL code to manipulate the `position`, `normal`,\r\n *        and/or `uv` vertex attributes. This code will be wrapped within a standalone function with\r\n *        those attributes exposed by their normal names as read/write values.\r\n * @param {String} options.fragmentDefs - Custom GLSL code to inject into the fragment shader's top-level\r\n *        definitions, above the `void main()` function.\r\n * @param {String} options.fragmentMainIntro - Custom GLSL code to inject at the top of the fragment\r\n *        shader's `void main` function.\r\n * @param {String} options.fragmentMainOutro - Custom GLSL code to inject at the end of the fragment\r\n *        shader's `void main` function. You can manipulate `gl_FragColor` here but keep in mind it goes\r\n *        after any of ThreeJS's color postprocessing shader chunks (tonemapping, fog, etc.), so if you\r\n *        want those to apply to your changes use `fragmentColorTransform` instead.\r\n * @param {String} options.fragmentColorTransform - Custom GLSL code to manipulate the `gl_FragColor`\r\n *        output value. Will be injected near the end of the `void main` function, but before any\r\n *        of ThreeJS's color postprocessing shader chunks (tonemapping, fog, etc.), and before the\r\n *        `fragmentMainOutro`.\r\n * @param {function<{vertexShader,fragmentShader}>:{vertexShader,fragmentShader}} options.customRewriter - A function\r\n *        for performing custom rewrites of the full shader code. Useful if you need to do something\r\n *        special that's not covered by the other builtin options. This function will be executed before\r\n *        any other transforms are applied.\r\n * @param {boolean} options.chained - Set to `true` to prototype-chain the derived material to the base\r\n *        material, rather than the default behavior of copying it. This allows the derived material to\r\n *        automatically pick up changes made to the base material and its properties. This can be useful\r\n *        where the derived material is hidden from the user as an implementation detail, allowing them\r\n *        to work with the original material like normal. But it can result in unexpected behavior if not\r\n *        handled carefully.\r\n *\r\n * @return {THREE.Material}\r\n *\r\n * The returned material will also have two new methods, `getDepthMaterial()` and `getDistanceMaterial()`,\r\n * which can be called to get a variant of the derived material for use in shadow casting. If the\r\n * target mesh is expected to cast shadows, then you can assign these to the mesh's `customDepthMaterial`\r\n * (for directional and spot lights) and/or `customDistanceMaterial` (for point lights) properties to\r\n * allow the cast shadow to honor your derived shader's vertex transforms and discarded fragments. These\r\n * will also set a custom `#define IS_DEPTH_MATERIAL` or `#define IS_DISTANCE_MATERIAL` that you can look\r\n * for in your derived shaders with `#ifdef` to customize their behavior for the depth or distance\r\n * scenarios, e.g. skipping antialiasing or expensive shader logic.\r\n */\nfunction createDerivedMaterial(baseMaterial, options) {\n  // Generate a key that is unique to the content of these `options`. We'll use this\n  // throughout for caching and for generating the upgraded shader code. This increases\n  // the likelihood that the resulting shaders will line up across multiple calls so\n  // their GL programs can be shared and cached.\n  const optionsKey = getKeyForOptions(options);\n\n  // First check to see if we've already derived from this baseMaterial using this\n  // unique set of options, and if so reuse the constructor to avoid some allocations.\n  let ctorsByDerivation = CONSTRUCTOR_CACHE.get(baseMaterial);\n  if (!ctorsByDerivation) {\n    CONSTRUCTOR_CACHE.set(baseMaterial, ctorsByDerivation = Object.create(null));\n  }\n  if (ctorsByDerivation[optionsKey]) {\n    return new ctorsByDerivation[optionsKey]();\n  }\n  const privateBeforeCompileProp = \"_onBeforeCompile\".concat(optionsKey);\n\n  // Private onBeforeCompile handler that injects the modified shaders and uniforms when\n  // the renderer switches to this material's program\n  const onBeforeCompile = function (shaderInfo, renderer) {\n    baseMaterial.onBeforeCompile.call(this, shaderInfo, renderer);\n\n    // Upgrade the shaders, caching the result by incoming source code\n    const cacheKey = this.customProgramCacheKey() + '|' + shaderInfo.vertexShader + '|' + shaderInfo.fragmentShader;\n    let upgradedShaders = SHADER_UPGRADE_CACHE[cacheKey];\n    if (!upgradedShaders) {\n      const upgraded = upgradeShaders(this, shaderInfo, options, optionsKey);\n      upgradedShaders = SHADER_UPGRADE_CACHE[cacheKey] = upgraded;\n    }\n\n    // Inject upgraded shaders and uniforms into the program\n    shaderInfo.vertexShader = upgradedShaders.vertexShader;\n    shaderInfo.fragmentShader = upgradedShaders.fragmentShader;\n    assign(shaderInfo.uniforms, this.uniforms);\n\n    // Inject auto-updating time uniform if requested\n    if (options.timeUniform) {\n      shaderInfo.uniforms[options.timeUniform] = {\n        get value() {\n          return Date.now() - epoch;\n        }\n      };\n    }\n\n    // Users can still add their own handlers on top of ours\n    if (this[privateBeforeCompileProp]) {\n      this[privateBeforeCompileProp](shaderInfo);\n    }\n  };\n  const DerivedMaterial = function DerivedMaterial() {\n    return derive(options.chained ? baseMaterial : baseMaterial.clone());\n  };\n  const derive = function (base) {\n    // Prototype chain to the base material\n    const derived = Object.create(base, descriptor);\n\n    // Store the baseMaterial for reference; this is always the original even when cloning\n    Object.defineProperty(derived, 'baseMaterial', {\n      value: baseMaterial\n    });\n\n    // Needs its own ids\n    Object.defineProperty(derived, 'id', {\n      value: materialInstanceId++\n    });\n    derived.uuid = generateUUID();\n\n    // Merge uniforms, defines, and extensions\n    derived.uniforms = assign({}, base.uniforms, options.uniforms);\n    derived.defines = assign({}, base.defines, options.defines);\n    derived.defines[\"TROIKA_DERIVED_MATERIAL_\".concat(optionsKey)] = ''; //force a program change from the base material\n    derived.extensions = assign({}, base.extensions, options.extensions);\n\n    // Don't inherit EventDispatcher listeners\n    derived._listeners = undefined;\n    return derived;\n  };\n  const descriptor = {\n    constructor: {\n      value: DerivedMaterial\n    },\n    isDerivedMaterial: {\n      value: true\n    },\n    customProgramCacheKey: {\n      writable: true,\n      configurable: true,\n      value: function () {\n        return baseMaterial.customProgramCacheKey() + '|' + optionsKey;\n      }\n    },\n    onBeforeCompile: {\n      get() {\n        return onBeforeCompile;\n      },\n      set(fn) {\n        this[privateBeforeCompileProp] = fn;\n      }\n    },\n    copy: {\n      writable: true,\n      configurable: true,\n      value: function (source) {\n        baseMaterial.copy.call(this, source);\n        if (!baseMaterial.isShaderMaterial && !baseMaterial.isDerivedMaterial) {\n          assign(this.extensions, source.extensions);\n          assign(this.defines, source.defines);\n          assign(this.uniforms, UniformsUtils.clone(source.uniforms));\n        }\n        return this;\n      }\n    },\n    clone: {\n      writable: true,\n      configurable: true,\n      value: function () {\n        const newBase = new baseMaterial.constructor();\n        return derive(newBase).copy(this);\n      }\n    },\n    /**\r\n     * Utility to get a MeshDepthMaterial that will honor this derived material's vertex\r\n     * transformations and discarded fragments.\r\n     */\n    getDepthMaterial: {\n      writable: true,\n      configurable: true,\n      value: function () {\n        let depthMaterial = this._depthMaterial;\n        if (!depthMaterial) {\n          depthMaterial = this._depthMaterial = createDerivedMaterial(baseMaterial.isDerivedMaterial ? baseMaterial.getDepthMaterial() : new MeshDepthMaterial({\n            depthPacking: RGBADepthPacking\n          }), options);\n          depthMaterial.defines.IS_DEPTH_MATERIAL = '';\n          depthMaterial.uniforms = this.uniforms; //automatically recieve same uniform values\n        }\n        return depthMaterial;\n      }\n    },\n    /**\r\n     * Utility to get a MeshDistanceMaterial that will honor this derived material's vertex\r\n     * transformations and discarded fragments.\r\n     */\n    getDistanceMaterial: {\n      writable: true,\n      configurable: true,\n      value: function () {\n        let distanceMaterial = this._distanceMaterial;\n        if (!distanceMaterial) {\n          distanceMaterial = this._distanceMaterial = createDerivedMaterial(baseMaterial.isDerivedMaterial ? baseMaterial.getDistanceMaterial() : new MeshDistanceMaterial(), options);\n          distanceMaterial.defines.IS_DISTANCE_MATERIAL = '';\n          distanceMaterial.uniforms = this.uniforms; //automatically recieve same uniform values\n        }\n        return distanceMaterial;\n      }\n    },\n    dispose: {\n      writable: true,\n      configurable: true,\n      value() {\n        const {\n          _depthMaterial,\n          _distanceMaterial\n        } = this;\n        if (_depthMaterial) _depthMaterial.dispose();\n        if (_distanceMaterial) _distanceMaterial.dispose();\n        baseMaterial.dispose.call(this);\n      }\n    }\n  };\n  ctorsByDerivation[optionsKey] = DerivedMaterial;\n  return new DerivedMaterial();\n}\nfunction upgradeShaders(material, _ref, options, key) {\n  let {\n    vertexShader,\n    fragmentShader\n  } = _ref;\n  let {\n    vertexDefs,\n    vertexMainIntro,\n    vertexMainOutro,\n    vertexTransform,\n    fragmentDefs,\n    fragmentMainIntro,\n    fragmentMainOutro,\n    fragmentColorTransform,\n    customRewriter,\n    timeUniform\n  } = options;\n  vertexDefs = vertexDefs || '';\n  vertexMainIntro = vertexMainIntro || '';\n  vertexMainOutro = vertexMainOutro || '';\n  fragmentDefs = fragmentDefs || '';\n  fragmentMainIntro = fragmentMainIntro || '';\n  fragmentMainOutro = fragmentMainOutro || '';\n\n  // Expand includes if needed\n  if (vertexTransform || customRewriter) {\n    vertexShader = expandShaderIncludes(vertexShader);\n  }\n  if (fragmentColorTransform || customRewriter) {\n    // We need to be able to find postprocessing chunks after include expansion in order to\n    // put them after the fragmentColorTransform, so mark them with comments first. Even if\n    // this particular derivation doesn't have a fragmentColorTransform, other derivations may,\n    // so we still mark them.\n    fragmentShader = fragmentShader.replace(/^[ \\t]*#include <((?:tonemapping|encodings|fog|premultiplied_alpha|dithering)_fragment)>/gm, '\\n//!BEGIN_POST_CHUNK $1\\n$&\\n//!END_POST_CHUNK\\n');\n    fragmentShader = expandShaderIncludes(fragmentShader);\n  }\n\n  // Apply custom rewriter function\n  if (customRewriter) {\n    let res = customRewriter({\n      vertexShader,\n      fragmentShader\n    });\n    vertexShader = res.vertexShader;\n    fragmentShader = res.fragmentShader;\n  }\n\n  // The fragmentColorTransform needs to go before any postprocessing chunks, so extract\n  // those and re-insert them into the outro in the correct place:\n  if (fragmentColorTransform) {\n    let postChunks = [];\n    fragmentShader = fragmentShader.replace(/^\\/\\/!BEGIN_POST_CHUNK[^]+?^\\/\\/!END_POST_CHUNK/gm,\n    // [^]+? = non-greedy match of any chars including newlines\n    match => {\n      postChunks.push(match);\n      return '';\n    });\n    fragmentMainOutro = \"\".concat(fragmentColorTransform, \"\\n\").concat(postChunks.join('\\n'), \"\\n\").concat(fragmentMainOutro);\n  }\n\n  // Inject auto-updating time uniform if requested\n  if (timeUniform) {\n    const code = \"\\nuniform float \".concat(timeUniform, \";\\n\");\n    vertexDefs = code + vertexDefs;\n    fragmentDefs = code + fragmentDefs;\n  }\n\n  // Inject a function for the vertexTransform and rename all usages of position/normal/uv\n  if (vertexTransform) {\n    // Hoist these defs to the very top so they work in other function defs\n    vertexShader = \"vec3 troika_position_\".concat(key, \";\\nvec3 troika_normal_\").concat(key, \";\\nvec2 troika_uv_\").concat(key, \";\\n\").concat(vertexShader, \"\\n\");\n    vertexDefs = \"\".concat(vertexDefs, \"\\nvoid troikaVertexTransform\").concat(key, \"(inout vec3 position, inout vec3 normal, inout vec2 uv) {\\n  \").concat(vertexTransform, \"\\n}\\n\");\n    vertexMainIntro = \"\\ntroika_position_\".concat(key, \" = vec3(position);\\ntroika_normal_\").concat(key, \" = vec3(normal);\\ntroika_uv_\").concat(key, \" = vec2(uv);\\ntroikaVertexTransform\").concat(key, \"(troika_position_\").concat(key, \", troika_normal_\").concat(key, \", troika_uv_\").concat(key, \");\\n\").concat(vertexMainIntro, \"\\n\");\n    vertexShader = vertexShader.replace(/\\b(position|normal|uv)\\b/g, (match, match1, index, fullStr) => {\n      return /\\battribute\\s+vec[23]\\s+$/.test(fullStr.substr(0, index)) ? match1 : \"troika_\".concat(match1, \"_\").concat(key);\n    });\n\n    // Three r152 introduced the MAP_UV token, replace it too if it's pointing to the main 'uv'\n    // Perhaps the other textures too going forward?\n    if (!(material.map && material.map.channel > 0)) {\n      vertexShader = vertexShader.replace(/\\bMAP_UV\\b/g, \"troika_uv_\".concat(key));\n    }\n  }\n\n  // Inject defs and intro/outro snippets\n  vertexShader = injectIntoShaderCode(vertexShader, key, vertexDefs, vertexMainIntro, vertexMainOutro);\n  fragmentShader = injectIntoShaderCode(fragmentShader, key, fragmentDefs, fragmentMainIntro, fragmentMainOutro);\n  return {\n    vertexShader,\n    fragmentShader\n  };\n}\nfunction injectIntoShaderCode(shaderCode, id, defs, intro, outro) {\n  if (intro || outro || defs) {\n    shaderCode = shaderCode.replace(voidMainRegExp, \"\\n\".concat(defs, \"\\nvoid troikaOrigMain\").concat(id, \"() {\"));\n    shaderCode += \"\\nvoid main() {\\n  \".concat(intro, \"\\n  troikaOrigMain\").concat(id, \"();\\n  \").concat(outro, \"\\n}\");\n  }\n  return shaderCode;\n}\nfunction optionsJsonReplacer(key, value) {\n  return key === 'uniforms' ? undefined : typeof value === 'function' ? value.toString() : value;\n}\nlet _idCtr = 0;\nconst optionsHashesToIds = new Map();\nfunction getKeyForOptions(options) {\n  const optionsHash = JSON.stringify(options, optionsJsonReplacer);\n  let id = optionsHashesToIds.get(optionsHash);\n  if (id == null) {\n    optionsHashesToIds.set(optionsHash, id = ++_idCtr);\n  }\n  return id;\n}\n\n// Copied from threejs WebGLPrograms.js so we can resolve builtin materials to their shaders\n// TODO how can we keep this from getting stale?\nconst MATERIAL_TYPES_TO_SHADERS = {\n  MeshDepthMaterial: 'depth',\n  MeshDistanceMaterial: 'distanceRGBA',\n  MeshNormalMaterial: 'normal',\n  MeshBasicMaterial: 'basic',\n  MeshLambertMaterial: 'lambert',\n  MeshPhongMaterial: 'phong',\n  MeshToonMaterial: 'toon',\n  MeshStandardMaterial: 'physical',\n  MeshPhysicalMaterial: 'physical',\n  MeshMatcapMaterial: 'matcap',\n  LineBasicMaterial: 'basic',\n  LineDashedMaterial: 'dashed',\n  PointsMaterial: 'points',\n  ShadowMaterial: 'shadow',\n  SpriteMaterial: 'sprite'\n};\n\n/**\r\n * Given a Three.js `Material` instance, find the shaders/uniforms that will be\r\n * used to render that material.\r\n *\r\n * @param material - the Material instance\r\n * @return {object} - the material's shader info: `{uniforms:{}, fragmentShader:'', vertexShader:''}`\r\n */\nfunction getShadersForMaterial(material) {\n  let builtinType = MATERIAL_TYPES_TO_SHADERS[material.type];\n  return builtinType ? ShaderLib[builtinType] : material; //TODO fallback for unknown type?\n}\n\n/**\r\n * Find all uniforms and their types within a shader code string.\r\n *\r\n * @param {string} shader - The shader code to parse\r\n * @return {object} mapping of uniform names to their glsl type\r\n */\nfunction getShaderUniformTypes(shader) {\n  let uniformRE = /\\buniform\\s+(int|float|vec[234]|mat[34])\\s+([A-Za-z_][\\w]*)/g;\n  let uniforms = Object.create(null);\n  let match;\n  while ((match = uniformRE.exec(shader)) !== null) {\n    uniforms[match[2]] = match[1];\n  }\n  return uniforms;\n}\n\n/**\r\n * Helper for smoothing out the `m.getInverse(x)` --> `m.copy(x).invert()` conversion\r\n * that happened in ThreeJS r123.\r\n * @param {Matrix4} srcMatrix\r\n * @param {Matrix4} [tgtMatrix]\r\n */\nfunction invertMatrix4(srcMatrix) {\n  let tgtMatrix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Matrix4();\n  if (typeof tgtMatrix.invert === 'function') {\n    tgtMatrix.copy(srcMatrix).invert();\n  } else {\n    tgtMatrix.getInverse(srcMatrix);\n  }\n  return tgtMatrix;\n}\n\n/*\r\nInput geometry is a cylinder with r=1, height in y dimension from 0 to 1,\r\ndivided into a reasonable number of height segments.\r\n*/\n\nconst vertexDefs = \"\\nuniform vec3 pointA;\\nuniform vec3 controlA;\\nuniform vec3 controlB;\\nuniform vec3 pointB;\\nuniform float radius;\\nvarying float bezierT;\\n\\nvec3 cubicBezier(vec3 p1, vec3 c1, vec3 c2, vec3 p2, float t) {\\n  float t2 = 1.0 - t;\\n  float b0 = t2 * t2 * t2;\\n  float b1 = 3.0 * t * t2 * t2;\\n  float b2 = 3.0 * t * t * t2;\\n  float b3 = t * t * t;\\n  return b0 * p1 + b1 * c1 + b2 * c2 + b3 * p2;\\n}\\n\\nvec3 cubicBezierDerivative(vec3 p1, vec3 c1, vec3 c2, vec3 p2, float t) {\\n  float t2 = 1.0 - t;\\n  return -3.0 * p1 * t2 * t2 +\\n    c1 * (3.0 * t2 * t2 - 6.0 * t2 * t) +\\n    c2 * (6.0 * t2 * t - 3.0 * t * t) +\\n    3.0 * p2 * t * t;\\n}\\n\";\nconst vertexTransform = \"\\nfloat t = position.y;\\nbezierT = t;\\nvec3 bezierCenterPos = cubicBezier(pointA, controlA, controlB, pointB, t);\\nvec3 bezierDir = normalize(cubicBezierDerivative(pointA, controlA, controlB, pointB, t));\\n\\n// Make \\\"sideways\\\" always perpendicular to the camera ray; this ensures that any twists\\n// in the cylinder occur where you won't see them: \\nvec3 viewDirection = normalMatrix * vec3(0.0, 0.0, 1.0);\\nif (bezierDir == viewDirection) {\\n  bezierDir = normalize(cubicBezierDerivative(pointA, controlA, controlB, pointB, t == 1.0 ? t - 0.0001 : t + 0.0001));\\n}\\nvec3 sideways = normalize(cross(bezierDir, viewDirection));\\nvec3 upish = normalize(cross(sideways, bezierDir));\\n\\n// Build a matrix for transforming this disc in the cylinder:\\nmat4 discTx;\\ndiscTx[0].xyz = sideways * radius;\\ndiscTx[1].xyz = bezierDir * radius;\\ndiscTx[2].xyz = upish * radius;\\ndiscTx[3].xyz = bezierCenterPos;\\ndiscTx[3][3] = 1.0;\\n\\n// Apply transform, ignoring original y\\nposition = (discTx * vec4(position.x, 0.0, position.z, 1.0)).xyz;\\nnormal = normalize(mat3(discTx) * normal);\\n\";\nconst fragmentDefs = \"\\nuniform vec3 dashing;\\nvarying float bezierT;\\n\";\nconst fragmentMainIntro = \"\\nif (dashing.x + dashing.y > 0.0) {\\n  float dashFrac = mod(bezierT - dashing.z, dashing.x + dashing.y);\\n  if (dashFrac > dashing.x) {\\n    discard;\\n  }\\n}\\n\";\n\n// Debugging: separate color for each of the 6 sides:\n// const fragmentColorTransform = `\n// float sideNum = floor(vUV.x * 6.0);\n// vec3 mixColor = sideNum < 1.0 ? vec3(1.0, 0.0, 0.0) :\n//   sideNum < 2.0 ? vec3(0.0, 1.0, 1.0) :\n//   sideNum < 3.0 ? vec3(1.0, 1.0, 0.0) :\n//   sideNum < 4.0 ? vec3(0.0, 0.0, 1.0) :\n//   sideNum < 5.0 ? vec3(0.0, 1.0, 0.0) :\n//   vec3(1.0, 0.0, 1.0);\n// gl_FragColor.xyz = mix(gl_FragColor.xyz, mixColor, 0.5);\n// `\n\nfunction createBezierMeshMaterial(baseMaterial) {\n  return createDerivedMaterial(baseMaterial, {\n    chained: true,\n    uniforms: {\n      pointA: {\n        value: new Vector3()\n      },\n      controlA: {\n        value: new Vector3()\n      },\n      controlB: {\n        value: new Vector3()\n      },\n      pointB: {\n        value: new Vector3()\n      },\n      radius: {\n        value: 0.01\n      },\n      dashing: {\n        value: new Vector3()\n      } //on, off, offset\n    },\n    vertexDefs,\n    vertexTransform,\n    fragmentDefs,\n    fragmentMainIntro\n  });\n}\nlet geometry = null;\nconst defaultBaseMaterial = /*#__PURE__*/new MeshStandardMaterial({\n  color: 0xffffff,\n  side: DoubleSide\n});\n\n/**\r\n * A ThreeJS `Mesh` that bends a tube shape along a 3D cubic bezier path. The bending is done\r\n * by deforming a straight cylindrical geometry in the vertex shader based on a set of four\r\n * control point uniforms. It patches the necessary GLSL into the mesh's assigned `material`\r\n * automatically.\r\n *\r\n * The cubiz bezier path is determined by its four `Vector3` properties:\r\n * - `pointA`\r\n * - `controlA`\r\n * - `controlB`\r\n * - `pointB`\r\n *\r\n * The tube's radius is controlled by its `radius` property, which defaults to `0.01`.\r\n *\r\n * You can also give the tube a dashed appearance with two properties:\r\n *\r\n * - `dashArray` - an array of two numbers, defining the length of \"on\" and \"off\" parts of\r\n *   the dash. Each is a 0-1 ratio of the entire path's length. (Actually this is the `t` length\r\n *   used as input to the cubic bezier function, not its visible length.)\r\n * - `dashOffset` - offset of where the dash starts. You can animate this to make the dashes move.\r\n *\r\n * Note that the dashes will appear like a hollow tube, not solid. This will be more apparent on\r\n * thicker tubes.\r\n *\r\n * TODO: proper geometry bounding sphere and raycasting\r\n * TODO: allow control of the geometry's segment counts\r\n */\nclass BezierMesh extends Mesh {\n  static getGeometry() {\n    return geometry || (geometry = new CylinderGeometry(1, 1, 1, 6, 64).translate(0, 0.5, 0));\n  }\n  constructor() {\n    super(BezierMesh.getGeometry(), defaultBaseMaterial);\n    this.pointA = new Vector3();\n    this.controlA = new Vector3();\n    this.controlB = new Vector3();\n    this.pointB = new Vector3();\n    this.radius = 0.01;\n    this.dashArray = new Vector2();\n    this.dashOffset = 0;\n\n    // TODO - disabling frustum culling until I figure out how to customize the\n    //  geometry's bounding sphere that gets used\n    this.frustumCulled = false;\n  }\n\n  // Handler for automatically wrapping the base material with our upgrades. We do the wrapping\n  // lazily on _read_ rather than write to avoid unnecessary wrapping on transient values.\n  get material() {\n    let derivedMaterial = this._derivedMaterial;\n    const baseMaterial = this._baseMaterial || this._defaultMaterial || (this._defaultMaterial = defaultBaseMaterial.clone());\n    if (!derivedMaterial || derivedMaterial.baseMaterial !== baseMaterial) {\n      derivedMaterial = this._derivedMaterial = createBezierMeshMaterial(baseMaterial);\n      // dispose the derived material when its base material is disposed:\n      baseMaterial.addEventListener('dispose', function onDispose() {\n        baseMaterial.removeEventListener('dispose', onDispose);\n        derivedMaterial.dispose();\n      });\n    }\n    return derivedMaterial;\n  }\n  set material(baseMaterial) {\n    this._baseMaterial = baseMaterial;\n  }\n\n  // Create and update material for shadows upon request:\n  get customDepthMaterial() {\n    return this.material.getDepthMaterial();\n  }\n  get customDistanceMaterial() {\n    return this.material.getDistanceMaterial();\n  }\n  onBeforeRender() {\n    const {\n      uniforms\n    } = this.material;\n    const {\n      pointA,\n      controlA,\n      controlB,\n      pointB,\n      radius,\n      dashArray,\n      dashOffset\n    } = this;\n    uniforms.pointA.value.copy(pointA);\n    uniforms.controlA.value.copy(controlA);\n    uniforms.controlB.value.copy(controlB);\n    uniforms.pointB.value.copy(pointB);\n    uniforms.radius.value = radius;\n    uniforms.dashing.value.set(dashArray.x, dashArray.y, dashOffset || 0);\n  }\n  raycast( /*raycaster, intersects*/\n  ) {\n    // TODO - just fail for now\n  }\n}\nexport { BezierMesh, createDerivedMaterial, expandShaderIncludes, getShaderUniformTypes, getShadersForMaterial, invertMatrix4, voidMainRegExp };","map":{"version":3,"names":["ShaderChunk","UniformsUtils","MeshDepthMaterial","RGBADepthPacking","MeshDistanceMaterial","ShaderLib","Matrix4","Vector3","Mesh","CylinderGeometry","Vector2","MeshStandardMaterial","DoubleSide","voidMainRegExp","expandShaderIncludes","source","pattern","replace","match","include","chunk","_lut","i","toString","generateUUID","d0","Math","random","d1","d2","d3","uuid","toUpperCase","assign","Object","target","arguments","len","length","prop","prototype","hasOwnProperty","call","epoch","Date","now","CONSTRUCTOR_CACHE","WeakMap","SHADER_UPGRADE_CACHE","Map","materialInstanceId","createDerivedMaterial","baseMaterial","options","optionsKey","getKeyForOptions","ctorsByDerivation","get","set","create","privateBeforeCompileProp","concat","onBeforeCompile","shaderInfo","renderer","cacheKey","customProgramCacheKey","vertexShader","fragmentShader","upgradedShaders","upgraded","upgradeShaders","uniforms","timeUniform","value","DerivedMaterial","derive","chained","clone","base","derived","descriptor","defineProperty","defines","extensions","_listeners","undefined","constructor","isDerivedMaterial","writable","configurable","fn","copy","isShaderMaterial","newBase","getDepthMaterial","depthMaterial","_depthMaterial","depthPacking","IS_DEPTH_MATERIAL","getDistanceMaterial","distanceMaterial","_distanceMaterial","IS_DISTANCE_MATERIAL","dispose","material","_ref","key","vertexDefs","vertexMainIntro","vertexMainOutro","vertexTransform","fragmentDefs","fragmentMainIntro","fragmentMainOutro","fragmentColorTransform","customRewriter","res","postChunks","push","join","code","match1","index","fullStr","test","substr","map","channel","injectIntoShaderCode","shaderCode","id","defs","intro","outro","optionsJsonReplacer","_idCtr","optionsHashesToIds","optionsHash","JSON","stringify","MATERIAL_TYPES_TO_SHADERS","MeshNormalMaterial","MeshBasicMaterial","MeshLambertMaterial","MeshPhongMaterial","MeshToonMaterial","MeshPhysicalMaterial","MeshMatcapMaterial","LineBasicMaterial","LineDashedMaterial","PointsMaterial","ShadowMaterial","SpriteMaterial","getShadersForMaterial","builtinType","type","getShaderUniformTypes","shader","uniformRE","exec","invertMatrix4","srcMatrix","tgtMatrix","invert","getInverse","createBezierMeshMaterial","pointA","controlA","controlB","pointB","radius","dashing","geometry","defaultBaseMaterial","color","side","BezierMesh","getGeometry","translate","dashArray","dashOffset","frustumCulled","derivedMaterial","_derivedMaterial","_baseMaterial","_defaultMaterial","addEventListener","onDispose","removeEventListener","customDepthMaterial","customDistanceMaterial","onBeforeRender","x","y","raycast"],"sources":["D:/Repos/NIKE-DJANGO/Jord/l4fycy/node_modules/troika-three-utils/dist/troika-three-utils.esm.js"],"sourcesContent":["import { ShaderChunk, UniformsUtils, MeshDepthMaterial, RGBADepthPacking, MeshDistanceMaterial, ShaderLib, Matrix4, Vector3, Mesh, CylinderGeometry, Vector2, MeshStandardMaterial, DoubleSide } from 'three';\r\n\r\n/**\r\n * Regular expression for matching the `void main() {` opener line in GLSL.\r\n * @type {RegExp}\r\n */\r\nconst voidMainRegExp = /\\bvoid\\s+main\\s*\\(\\s*\\)\\s*{/g;\r\n\r\n/**\r\n * Recursively expands all `#include <xyz>` statements within string of shader code.\r\n * Copied from three's WebGLProgram#parseIncludes for external use.\r\n *\r\n * @param {string} source - The GLSL source code to evaluate\r\n * @return {string} The GLSL code with all includes expanded\r\n */\r\nfunction expandShaderIncludes( source ) {\r\n  const pattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\r\n  function replace(match, include) {\r\n    let chunk = ShaderChunk[include];\r\n    return chunk ? expandShaderIncludes(chunk) : match\r\n  }\r\n  return source.replace( pattern, replace )\r\n}\r\n\r\n/*\r\n * This is a direct copy of MathUtils.generateUUID from Three.js, to preserve compatibility with three\r\n * versions before 0.113.0 as it was changed from Math to MathUtils in that version.\r\n * https://github.com/mrdoob/three.js/blob/dd8b5aa3b270c17096b90945cd2d6d1b13aaec53/src/math/MathUtils.js#L16\r\n */\r\n\r\nconst _lut = [];\r\n\r\nfor (let i = 0; i < 256; i++) {\r\n  _lut[i] = (i < 16 ? '0' : '') + (i).toString(16);\r\n}\r\n\r\nfunction generateUUID() {\r\n\r\n  // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\r\n\r\n  const d0 = Math.random() * 0xffffffff | 0;\r\n  const d1 = Math.random() * 0xffffffff | 0;\r\n  const d2 = Math.random() * 0xffffffff | 0;\r\n  const d3 = Math.random() * 0xffffffff | 0;\r\n  const uuid = _lut[d0 & 0xff] + _lut[d0 >> 8 & 0xff] + _lut[d0 >> 16 & 0xff] + _lut[d0 >> 24 & 0xff] + '-' +\r\n    _lut[d1 & 0xff] + _lut[d1 >> 8 & 0xff] + '-' + _lut[d1 >> 16 & 0x0f | 0x40] + _lut[d1 >> 24 & 0xff] + '-' +\r\n    _lut[d2 & 0x3f | 0x80] + _lut[d2 >> 8 & 0xff] + '-' + _lut[d2 >> 16 & 0xff] + _lut[d2 >> 24 & 0xff] +\r\n    _lut[d3 & 0xff] + _lut[d3 >> 8 & 0xff] + _lut[d3 >> 16 & 0xff] + _lut[d3 >> 24 & 0xff];\r\n\r\n  // .toUpperCase() here flattens concatenated strings to save heap memory space.\r\n  return uuid.toUpperCase()\r\n\r\n}\r\n\r\n// Local assign polyfill to avoid importing troika-core\r\nconst assign = Object.assign || function(/*target, ...sources*/) {\r\n  let target = arguments[0];\r\n  for (let i = 1, len = arguments.length; i < len; i++) {\r\n    let source = arguments[i];\r\n    if (source) {\r\n      for (let prop in source) {\r\n        if (Object.prototype.hasOwnProperty.call(source, prop)) {\r\n          target[prop] = source[prop];\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return target\r\n};\r\n\r\n\r\nconst epoch = Date.now();\r\nconst CONSTRUCTOR_CACHE = new WeakMap();\r\nconst SHADER_UPGRADE_CACHE = new Map();\r\n\r\n// Material ids must be integers, but we can't access the increment from Three's `Material` module,\r\n// so let's choose a sufficiently large starting value that should theoretically never collide.\r\nlet materialInstanceId = 1e10;\r\n\r\n/**\r\n * A utility for creating a custom shader material derived from another material's\r\n * shaders. This allows you to inject custom shader logic and transforms into the\r\n * builtin ThreeJS materials without having to recreate them from scratch.\r\n *\r\n * @param {THREE.Material} baseMaterial - the original material to derive from\r\n *\r\n * @param {Object} options - How the base material should be modified.\r\n * @param {Object} options.defines - Custom `defines` for the material\r\n * @param {Object} options.extensions - Custom `extensions` for the material, e.g. `{derivatives: true}`\r\n * @param {Object} options.uniforms - Custom `uniforms` for use in the modified shader. These can\r\n *        be accessed and manipulated via the resulting material's `uniforms` property, just like\r\n *        in a ShaderMaterial. You do not need to repeat the base material's own uniforms here.\r\n * @param {String} options.timeUniform - If specified, a uniform of this name will be injected into\r\n *        both shaders, and it will automatically be updated on each render frame with a number of\r\n *        elapsed milliseconds. The \"zero\" epoch time is not significant so don't rely on this as a\r\n *        true calendar time.\r\n * @param {String} options.vertexDefs - Custom GLSL code to inject into the vertex shader's top-level\r\n *        definitions, above the `void main()` function.\r\n * @param {String} options.vertexMainIntro - Custom GLSL code to inject at the top of the vertex\r\n *        shader's `void main` function.\r\n * @param {String} options.vertexMainOutro - Custom GLSL code to inject at the end of the vertex\r\n *        shader's `void main` function.\r\n * @param {String} options.vertexTransform - Custom GLSL code to manipulate the `position`, `normal`,\r\n *        and/or `uv` vertex attributes. This code will be wrapped within a standalone function with\r\n *        those attributes exposed by their normal names as read/write values.\r\n * @param {String} options.fragmentDefs - Custom GLSL code to inject into the fragment shader's top-level\r\n *        definitions, above the `void main()` function.\r\n * @param {String} options.fragmentMainIntro - Custom GLSL code to inject at the top of the fragment\r\n *        shader's `void main` function.\r\n * @param {String} options.fragmentMainOutro - Custom GLSL code to inject at the end of the fragment\r\n *        shader's `void main` function. You can manipulate `gl_FragColor` here but keep in mind it goes\r\n *        after any of ThreeJS's color postprocessing shader chunks (tonemapping, fog, etc.), so if you\r\n *        want those to apply to your changes use `fragmentColorTransform` instead.\r\n * @param {String} options.fragmentColorTransform - Custom GLSL code to manipulate the `gl_FragColor`\r\n *        output value. Will be injected near the end of the `void main` function, but before any\r\n *        of ThreeJS's color postprocessing shader chunks (tonemapping, fog, etc.), and before the\r\n *        `fragmentMainOutro`.\r\n * @param {function<{vertexShader,fragmentShader}>:{vertexShader,fragmentShader}} options.customRewriter - A function\r\n *        for performing custom rewrites of the full shader code. Useful if you need to do something\r\n *        special that's not covered by the other builtin options. This function will be executed before\r\n *        any other transforms are applied.\r\n * @param {boolean} options.chained - Set to `true` to prototype-chain the derived material to the base\r\n *        material, rather than the default behavior of copying it. This allows the derived material to\r\n *        automatically pick up changes made to the base material and its properties. This can be useful\r\n *        where the derived material is hidden from the user as an implementation detail, allowing them\r\n *        to work with the original material like normal. But it can result in unexpected behavior if not\r\n *        handled carefully.\r\n *\r\n * @return {THREE.Material}\r\n *\r\n * The returned material will also have two new methods, `getDepthMaterial()` and `getDistanceMaterial()`,\r\n * which can be called to get a variant of the derived material for use in shadow casting. If the\r\n * target mesh is expected to cast shadows, then you can assign these to the mesh's `customDepthMaterial`\r\n * (for directional and spot lights) and/or `customDistanceMaterial` (for point lights) properties to\r\n * allow the cast shadow to honor your derived shader's vertex transforms and discarded fragments. These\r\n * will also set a custom `#define IS_DEPTH_MATERIAL` or `#define IS_DISTANCE_MATERIAL` that you can look\r\n * for in your derived shaders with `#ifdef` to customize their behavior for the depth or distance\r\n * scenarios, e.g. skipping antialiasing or expensive shader logic.\r\n */\r\nfunction createDerivedMaterial(baseMaterial, options) {\r\n  // Generate a key that is unique to the content of these `options`. We'll use this\r\n  // throughout for caching and for generating the upgraded shader code. This increases\r\n  // the likelihood that the resulting shaders will line up across multiple calls so\r\n  // their GL programs can be shared and cached.\r\n  const optionsKey = getKeyForOptions(options);\r\n\r\n  // First check to see if we've already derived from this baseMaterial using this\r\n  // unique set of options, and if so reuse the constructor to avoid some allocations.\r\n  let ctorsByDerivation = CONSTRUCTOR_CACHE.get(baseMaterial);\r\n  if (!ctorsByDerivation) {\r\n    CONSTRUCTOR_CACHE.set(baseMaterial, (ctorsByDerivation = Object.create(null)));\r\n  }\r\n  if (ctorsByDerivation[optionsKey]) {\r\n    return new ctorsByDerivation[optionsKey]()\r\n  }\r\n\r\n  const privateBeforeCompileProp = `_onBeforeCompile${optionsKey}`;\r\n\r\n  // Private onBeforeCompile handler that injects the modified shaders and uniforms when\r\n  // the renderer switches to this material's program\r\n  const onBeforeCompile = function (shaderInfo, renderer) {\r\n    baseMaterial.onBeforeCompile.call(this, shaderInfo, renderer);\r\n\r\n    // Upgrade the shaders, caching the result by incoming source code\r\n    const cacheKey = this.customProgramCacheKey() + '|' + shaderInfo.vertexShader + '|' + shaderInfo.fragmentShader;\r\n    let upgradedShaders = SHADER_UPGRADE_CACHE[cacheKey];\r\n    if (!upgradedShaders) {\r\n      const upgraded = upgradeShaders(this, shaderInfo, options, optionsKey);\r\n      upgradedShaders = SHADER_UPGRADE_CACHE[cacheKey] = upgraded;\r\n    }\r\n\r\n    // Inject upgraded shaders and uniforms into the program\r\n    shaderInfo.vertexShader = upgradedShaders.vertexShader;\r\n    shaderInfo.fragmentShader = upgradedShaders.fragmentShader;\r\n    assign(shaderInfo.uniforms, this.uniforms);\r\n\r\n    // Inject auto-updating time uniform if requested\r\n    if (options.timeUniform) {\r\n      shaderInfo.uniforms[options.timeUniform] = {\r\n        get value() {return Date.now() - epoch}\r\n      };\r\n    }\r\n\r\n    // Users can still add their own handlers on top of ours\r\n    if (this[privateBeforeCompileProp]) {\r\n      this[privateBeforeCompileProp](shaderInfo);\r\n    }\r\n  };\r\n\r\n  const DerivedMaterial = function DerivedMaterial() {\r\n    return derive(options.chained ? baseMaterial : baseMaterial.clone())\r\n  };\r\n\r\n  const derive = function(base) {\r\n    // Prototype chain to the base material\r\n    const derived = Object.create(base, descriptor);\r\n\r\n    // Store the baseMaterial for reference; this is always the original even when cloning\r\n    Object.defineProperty(derived, 'baseMaterial', { value: baseMaterial });\r\n\r\n    // Needs its own ids\r\n    Object.defineProperty(derived, 'id', { value: materialInstanceId++ });\r\n    derived.uuid = generateUUID();\r\n\r\n    // Merge uniforms, defines, and extensions\r\n    derived.uniforms = assign({}, base.uniforms, options.uniforms);\r\n    derived.defines = assign({}, base.defines, options.defines);\r\n    derived.defines[`TROIKA_DERIVED_MATERIAL_${optionsKey}`] = ''; //force a program change from the base material\r\n    derived.extensions = assign({}, base.extensions, options.extensions);\r\n\r\n    // Don't inherit EventDispatcher listeners\r\n    derived._listeners = undefined;\r\n\r\n    return derived\r\n  };\r\n\r\n  const descriptor = {\r\n    constructor: {value: DerivedMaterial},\r\n    isDerivedMaterial: {value: true},\r\n\r\n    customProgramCacheKey: {\r\n      writable: true,\r\n      configurable: true,\r\n      value: function () {\r\n        return baseMaterial.customProgramCacheKey() + '|' + optionsKey\r\n      }\r\n    },\r\n\r\n    onBeforeCompile: {\r\n      get() {\r\n        return onBeforeCompile\r\n      },\r\n      set(fn) {\r\n        this[privateBeforeCompileProp] = fn;\r\n      }\r\n    },\r\n\r\n    copy: {\r\n      writable: true,\r\n      configurable: true,\r\n      value: function (source) {\r\n        baseMaterial.copy.call(this, source);\r\n        if (!baseMaterial.isShaderMaterial && !baseMaterial.isDerivedMaterial) {\r\n          assign(this.extensions, source.extensions);\r\n          assign(this.defines, source.defines);\r\n          assign(this.uniforms, UniformsUtils.clone(source.uniforms));\r\n        }\r\n        return this\r\n      }\r\n    },\r\n\r\n    clone: {\r\n      writable: true,\r\n      configurable: true,\r\n      value: function () {\r\n        const newBase = new baseMaterial.constructor();\r\n        return derive(newBase).copy(this)\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Utility to get a MeshDepthMaterial that will honor this derived material's vertex\r\n     * transformations and discarded fragments.\r\n     */\r\n    getDepthMaterial: {\r\n      writable: true,\r\n      configurable: true,\r\n      value: function() {\r\n        let depthMaterial = this._depthMaterial;\r\n        if (!depthMaterial) {\r\n          depthMaterial = this._depthMaterial = createDerivedMaterial(\r\n            baseMaterial.isDerivedMaterial\r\n              ? baseMaterial.getDepthMaterial()\r\n              : new MeshDepthMaterial({ depthPacking: RGBADepthPacking }),\r\n            options\r\n          );\r\n          depthMaterial.defines.IS_DEPTH_MATERIAL = '';\r\n          depthMaterial.uniforms = this.uniforms; //automatically recieve same uniform values\r\n        }\r\n        return depthMaterial\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Utility to get a MeshDistanceMaterial that will honor this derived material's vertex\r\n     * transformations and discarded fragments.\r\n     */\r\n    getDistanceMaterial: {\r\n      writable: true,\r\n      configurable: true,\r\n      value: function() {\r\n        let distanceMaterial = this._distanceMaterial;\r\n        if (!distanceMaterial) {\r\n          distanceMaterial = this._distanceMaterial = createDerivedMaterial(\r\n            baseMaterial.isDerivedMaterial\r\n              ? baseMaterial.getDistanceMaterial()\r\n              : new MeshDistanceMaterial(),\r\n            options\r\n          );\r\n          distanceMaterial.defines.IS_DISTANCE_MATERIAL = '';\r\n          distanceMaterial.uniforms = this.uniforms; //automatically recieve same uniform values\r\n        }\r\n        return distanceMaterial\r\n      }\r\n    },\r\n\r\n    dispose: {\r\n      writable: true,\r\n      configurable: true,\r\n      value() {\r\n        const {_depthMaterial, _distanceMaterial} = this;\r\n        if (_depthMaterial) _depthMaterial.dispose();\r\n        if (_distanceMaterial) _distanceMaterial.dispose();\r\n        baseMaterial.dispose.call(this);\r\n      }\r\n    }\r\n  };\r\n\r\n  ctorsByDerivation[optionsKey] = DerivedMaterial;\r\n  return new DerivedMaterial()\r\n}\r\n\r\n\r\nfunction upgradeShaders(material, {vertexShader, fragmentShader}, options, key) {\r\n  let {\r\n    vertexDefs,\r\n    vertexMainIntro,\r\n    vertexMainOutro,\r\n    vertexTransform,\r\n    fragmentDefs,\r\n    fragmentMainIntro,\r\n    fragmentMainOutro,\r\n    fragmentColorTransform,\r\n    customRewriter,\r\n    timeUniform\r\n  } = options;\r\n\r\n  vertexDefs = vertexDefs || '';\r\n  vertexMainIntro = vertexMainIntro || '';\r\n  vertexMainOutro = vertexMainOutro || '';\r\n  fragmentDefs = fragmentDefs || '';\r\n  fragmentMainIntro = fragmentMainIntro || '';\r\n  fragmentMainOutro = fragmentMainOutro || '';\r\n\r\n  // Expand includes if needed\r\n  if (vertexTransform || customRewriter) {\r\n    vertexShader = expandShaderIncludes(vertexShader);\r\n  }\r\n  if (fragmentColorTransform || customRewriter) {\r\n    // We need to be able to find postprocessing chunks after include expansion in order to\r\n    // put them after the fragmentColorTransform, so mark them with comments first. Even if\r\n    // this particular derivation doesn't have a fragmentColorTransform, other derivations may,\r\n    // so we still mark them.\r\n    fragmentShader = fragmentShader.replace(\r\n      /^[ \\t]*#include <((?:tonemapping|encodings|fog|premultiplied_alpha|dithering)_fragment)>/gm,\r\n      '\\n//!BEGIN_POST_CHUNK $1\\n$&\\n//!END_POST_CHUNK\\n'\r\n    );\r\n    fragmentShader = expandShaderIncludes(fragmentShader);\r\n  }\r\n\r\n  // Apply custom rewriter function\r\n  if (customRewriter) {\r\n    let res = customRewriter({vertexShader, fragmentShader});\r\n    vertexShader = res.vertexShader;\r\n    fragmentShader = res.fragmentShader;\r\n  }\r\n\r\n  // The fragmentColorTransform needs to go before any postprocessing chunks, so extract\r\n  // those and re-insert them into the outro in the correct place:\r\n  if (fragmentColorTransform) {\r\n    let postChunks = [];\r\n    fragmentShader = fragmentShader.replace(\r\n      /^\\/\\/!BEGIN_POST_CHUNK[^]+?^\\/\\/!END_POST_CHUNK/gm, // [^]+? = non-greedy match of any chars including newlines\r\n      match => {\r\n        postChunks.push(match);\r\n        return ''\r\n      }\r\n    );\r\n    fragmentMainOutro = `${fragmentColorTransform}\\n${postChunks.join('\\n')}\\n${fragmentMainOutro}`;\r\n  }\r\n\r\n  // Inject auto-updating time uniform if requested\r\n  if (timeUniform) {\r\n    const code = `\\nuniform float ${timeUniform};\\n`;\r\n    vertexDefs = code + vertexDefs;\r\n    fragmentDefs = code + fragmentDefs;\r\n  }\r\n\r\n  // Inject a function for the vertexTransform and rename all usages of position/normal/uv\r\n  if (vertexTransform) {\r\n    // Hoist these defs to the very top so they work in other function defs\r\n    vertexShader = `vec3 troika_position_${key};\r\nvec3 troika_normal_${key};\r\nvec2 troika_uv_${key};\r\n${vertexShader}\r\n`;\r\n    vertexDefs = `${vertexDefs}\r\nvoid troikaVertexTransform${key}(inout vec3 position, inout vec3 normal, inout vec2 uv) {\r\n  ${vertexTransform}\r\n}\r\n`;\r\n    vertexMainIntro = `\r\ntroika_position_${key} = vec3(position);\r\ntroika_normal_${key} = vec3(normal);\r\ntroika_uv_${key} = vec2(uv);\r\ntroikaVertexTransform${key}(troika_position_${key}, troika_normal_${key}, troika_uv_${key});\r\n${vertexMainIntro}\r\n`;\r\n    vertexShader = vertexShader.replace(/\\b(position|normal|uv)\\b/g, (match, match1, index, fullStr) => {\r\n      return /\\battribute\\s+vec[23]\\s+$/.test(fullStr.substr(0, index)) ? match1 : `troika_${match1}_${key}`\r\n    });\r\n\r\n    // Three r152 introduced the MAP_UV token, replace it too if it's pointing to the main 'uv'\r\n    // Perhaps the other textures too going forward?\r\n    if (!(material.map && material.map.channel > 0)) {\r\n      vertexShader = vertexShader.replace(/\\bMAP_UV\\b/g, `troika_uv_${key}`);\r\n    }\r\n  }\r\n\r\n  // Inject defs and intro/outro snippets\r\n  vertexShader = injectIntoShaderCode(vertexShader, key, vertexDefs, vertexMainIntro, vertexMainOutro);\r\n  fragmentShader = injectIntoShaderCode(fragmentShader, key, fragmentDefs, fragmentMainIntro, fragmentMainOutro);\r\n\r\n  return {\r\n    vertexShader,\r\n    fragmentShader\r\n  }\r\n}\r\n\r\nfunction injectIntoShaderCode(shaderCode, id, defs, intro, outro) {\r\n  if (intro || outro || defs) {\r\n    shaderCode = shaderCode.replace(voidMainRegExp, `\r\n${defs}\r\nvoid troikaOrigMain${id}() {`\r\n    );\r\n    shaderCode += `\r\nvoid main() {\r\n  ${intro}\r\n  troikaOrigMain${id}();\r\n  ${outro}\r\n}`;\r\n  }\r\n  return shaderCode\r\n}\r\n\r\n\r\nfunction optionsJsonReplacer(key, value) {\r\n  return key === 'uniforms' ? undefined : typeof value === 'function' ? value.toString() : value\r\n}\r\n\r\nlet _idCtr = 0;\r\nconst optionsHashesToIds = new Map();\r\nfunction getKeyForOptions(options) {\r\n  const optionsHash = JSON.stringify(options, optionsJsonReplacer);\r\n  let id = optionsHashesToIds.get(optionsHash);\r\n  if (id == null) {\r\n    optionsHashesToIds.set(optionsHash, (id = ++_idCtr));\r\n  }\r\n  return id\r\n}\r\n\r\n// Copied from threejs WebGLPrograms.js so we can resolve builtin materials to their shaders\r\n// TODO how can we keep this from getting stale?\r\nconst MATERIAL_TYPES_TO_SHADERS = {\r\n  MeshDepthMaterial: 'depth',\r\n  MeshDistanceMaterial: 'distanceRGBA',\r\n  MeshNormalMaterial: 'normal',\r\n  MeshBasicMaterial: 'basic',\r\n  MeshLambertMaterial: 'lambert',\r\n  MeshPhongMaterial: 'phong',\r\n  MeshToonMaterial: 'toon',\r\n  MeshStandardMaterial: 'physical',\r\n  MeshPhysicalMaterial: 'physical',\r\n  MeshMatcapMaterial: 'matcap',\r\n  LineBasicMaterial: 'basic',\r\n  LineDashedMaterial: 'dashed',\r\n  PointsMaterial: 'points',\r\n  ShadowMaterial: 'shadow',\r\n  SpriteMaterial: 'sprite'\r\n};\r\n\r\n/**\r\n * Given a Three.js `Material` instance, find the shaders/uniforms that will be\r\n * used to render that material.\r\n *\r\n * @param material - the Material instance\r\n * @return {object} - the material's shader info: `{uniforms:{}, fragmentShader:'', vertexShader:''}`\r\n */\r\nfunction getShadersForMaterial(material) {\r\n  let builtinType = MATERIAL_TYPES_TO_SHADERS[material.type];\r\n  return builtinType ? ShaderLib[builtinType] : material //TODO fallback for unknown type?\r\n}\r\n\r\n/**\r\n * Find all uniforms and their types within a shader code string.\r\n *\r\n * @param {string} shader - The shader code to parse\r\n * @return {object} mapping of uniform names to their glsl type\r\n */\r\nfunction getShaderUniformTypes(shader) {\r\n  let uniformRE = /\\buniform\\s+(int|float|vec[234]|mat[34])\\s+([A-Za-z_][\\w]*)/g;\r\n  let uniforms = Object.create(null);\r\n  let match;\r\n  while ((match = uniformRE.exec(shader)) !== null) {\r\n    uniforms[match[2]] = match[1];\r\n  }\r\n  return uniforms\r\n}\r\n\r\n/**\r\n * Helper for smoothing out the `m.getInverse(x)` --> `m.copy(x).invert()` conversion\r\n * that happened in ThreeJS r123.\r\n * @param {Matrix4} srcMatrix\r\n * @param {Matrix4} [tgtMatrix]\r\n */\r\nfunction invertMatrix4(srcMatrix, tgtMatrix = new Matrix4()) {\r\n  if (typeof tgtMatrix.invert === 'function') {\r\n    tgtMatrix.copy(srcMatrix).invert();\r\n  } else {\r\n    tgtMatrix.getInverse(srcMatrix);\r\n  }\r\n  return tgtMatrix\r\n}\r\n\r\n/*\r\nInput geometry is a cylinder with r=1, height in y dimension from 0 to 1,\r\ndivided into a reasonable number of height segments.\r\n*/\r\n\r\nconst vertexDefs = `\r\nuniform vec3 pointA;\r\nuniform vec3 controlA;\r\nuniform vec3 controlB;\r\nuniform vec3 pointB;\r\nuniform float radius;\r\nvarying float bezierT;\r\n\r\nvec3 cubicBezier(vec3 p1, vec3 c1, vec3 c2, vec3 p2, float t) {\r\n  float t2 = 1.0 - t;\r\n  float b0 = t2 * t2 * t2;\r\n  float b1 = 3.0 * t * t2 * t2;\r\n  float b2 = 3.0 * t * t * t2;\r\n  float b3 = t * t * t;\r\n  return b0 * p1 + b1 * c1 + b2 * c2 + b3 * p2;\r\n}\r\n\r\nvec3 cubicBezierDerivative(vec3 p1, vec3 c1, vec3 c2, vec3 p2, float t) {\r\n  float t2 = 1.0 - t;\r\n  return -3.0 * p1 * t2 * t2 +\r\n    c1 * (3.0 * t2 * t2 - 6.0 * t2 * t) +\r\n    c2 * (6.0 * t2 * t - 3.0 * t * t) +\r\n    3.0 * p2 * t * t;\r\n}\r\n`;\r\n\r\nconst vertexTransform = `\r\nfloat t = position.y;\r\nbezierT = t;\r\nvec3 bezierCenterPos = cubicBezier(pointA, controlA, controlB, pointB, t);\r\nvec3 bezierDir = normalize(cubicBezierDerivative(pointA, controlA, controlB, pointB, t));\r\n\r\n// Make \"sideways\" always perpendicular to the camera ray; this ensures that any twists\r\n// in the cylinder occur where you won't see them: \r\nvec3 viewDirection = normalMatrix * vec3(0.0, 0.0, 1.0);\r\nif (bezierDir == viewDirection) {\r\n  bezierDir = normalize(cubicBezierDerivative(pointA, controlA, controlB, pointB, t == 1.0 ? t - 0.0001 : t + 0.0001));\r\n}\r\nvec3 sideways = normalize(cross(bezierDir, viewDirection));\r\nvec3 upish = normalize(cross(sideways, bezierDir));\r\n\r\n// Build a matrix for transforming this disc in the cylinder:\r\nmat4 discTx;\r\ndiscTx[0].xyz = sideways * radius;\r\ndiscTx[1].xyz = bezierDir * radius;\r\ndiscTx[2].xyz = upish * radius;\r\ndiscTx[3].xyz = bezierCenterPos;\r\ndiscTx[3][3] = 1.0;\r\n\r\n// Apply transform, ignoring original y\r\nposition = (discTx * vec4(position.x, 0.0, position.z, 1.0)).xyz;\r\nnormal = normalize(mat3(discTx) * normal);\r\n`;\r\n\r\nconst fragmentDefs = `\r\nuniform vec3 dashing;\r\nvarying float bezierT;\r\n`;\r\n\r\nconst fragmentMainIntro = `\r\nif (dashing.x + dashing.y > 0.0) {\r\n  float dashFrac = mod(bezierT - dashing.z, dashing.x + dashing.y);\r\n  if (dashFrac > dashing.x) {\r\n    discard;\r\n  }\r\n}\r\n`;\r\n\r\n// Debugging: separate color for each of the 6 sides:\r\n// const fragmentColorTransform = `\r\n// float sideNum = floor(vUV.x * 6.0);\r\n// vec3 mixColor = sideNum < 1.0 ? vec3(1.0, 0.0, 0.0) :\r\n//   sideNum < 2.0 ? vec3(0.0, 1.0, 1.0) :\r\n//   sideNum < 3.0 ? vec3(1.0, 1.0, 0.0) :\r\n//   sideNum < 4.0 ? vec3(0.0, 0.0, 1.0) :\r\n//   sideNum < 5.0 ? vec3(0.0, 1.0, 0.0) :\r\n//   vec3(1.0, 0.0, 1.0);\r\n// gl_FragColor.xyz = mix(gl_FragColor.xyz, mixColor, 0.5);\r\n// `\r\n\r\n\r\n\r\nfunction createBezierMeshMaterial(baseMaterial) {\r\n  return createDerivedMaterial(\r\n    baseMaterial,\r\n    {\r\n      chained: true,\r\n      uniforms: {\r\n        pointA: {value: new Vector3()},\r\n        controlA: {value: new Vector3()},\r\n        controlB: {value: new Vector3()},\r\n        pointB: {value: new Vector3()},\r\n        radius: {value: 0.01},\r\n        dashing: {value: new Vector3()} //on, off, offset\r\n      },\r\n      vertexDefs,\r\n      vertexTransform,\r\n      fragmentDefs,\r\n      fragmentMainIntro\r\n    }\r\n  )\r\n}\r\n\r\nlet geometry = null;\r\n\r\nconst defaultBaseMaterial = /*#__PURE__*/new MeshStandardMaterial({color: 0xffffff, side: DoubleSide});\r\n\r\n\r\n/**\r\n * A ThreeJS `Mesh` that bends a tube shape along a 3D cubic bezier path. The bending is done\r\n * by deforming a straight cylindrical geometry in the vertex shader based on a set of four\r\n * control point uniforms. It patches the necessary GLSL into the mesh's assigned `material`\r\n * automatically.\r\n *\r\n * The cubiz bezier path is determined by its four `Vector3` properties:\r\n * - `pointA`\r\n * - `controlA`\r\n * - `controlB`\r\n * - `pointB`\r\n *\r\n * The tube's radius is controlled by its `radius` property, which defaults to `0.01`.\r\n *\r\n * You can also give the tube a dashed appearance with two properties:\r\n *\r\n * - `dashArray` - an array of two numbers, defining the length of \"on\" and \"off\" parts of\r\n *   the dash. Each is a 0-1 ratio of the entire path's length. (Actually this is the `t` length\r\n *   used as input to the cubic bezier function, not its visible length.)\r\n * - `dashOffset` - offset of where the dash starts. You can animate this to make the dashes move.\r\n *\r\n * Note that the dashes will appear like a hollow tube, not solid. This will be more apparent on\r\n * thicker tubes.\r\n *\r\n * TODO: proper geometry bounding sphere and raycasting\r\n * TODO: allow control of the geometry's segment counts\r\n */\r\nclass BezierMesh extends Mesh {\r\n  static getGeometry() {\r\n    return geometry || (geometry =\r\n      new CylinderGeometry(1, 1, 1, 6, 64).translate(0, 0.5, 0)\r\n    )\r\n  }\r\n\r\n  constructor() {\r\n    super(\r\n      BezierMesh.getGeometry(),\r\n      defaultBaseMaterial\r\n    );\r\n\r\n    this.pointA = new Vector3();\r\n    this.controlA = new Vector3();\r\n    this.controlB = new Vector3();\r\n    this.pointB = new Vector3();\r\n    this.radius = 0.01;\r\n    this.dashArray = new Vector2();\r\n    this.dashOffset = 0;\r\n\r\n    // TODO - disabling frustum culling until I figure out how to customize the\r\n    //  geometry's bounding sphere that gets used\r\n    this.frustumCulled = false;\r\n  }\r\n\r\n  // Handler for automatically wrapping the base material with our upgrades. We do the wrapping\r\n  // lazily on _read_ rather than write to avoid unnecessary wrapping on transient values.\r\n  get material() {\r\n    let derivedMaterial = this._derivedMaterial;\r\n    const baseMaterial = this._baseMaterial || this._defaultMaterial || (this._defaultMaterial = defaultBaseMaterial.clone());\r\n    if (!derivedMaterial || derivedMaterial.baseMaterial !== baseMaterial) {\r\n      derivedMaterial = this._derivedMaterial = createBezierMeshMaterial(baseMaterial);\r\n      // dispose the derived material when its base material is disposed:\r\n      baseMaterial.addEventListener('dispose', function onDispose() {\r\n        baseMaterial.removeEventListener('dispose', onDispose);\r\n        derivedMaterial.dispose();\r\n      });\r\n    }\r\n    return derivedMaterial\r\n  }\r\n  set material(baseMaterial) {\r\n    this._baseMaterial = baseMaterial;\r\n  }\r\n\r\n  // Create and update material for shadows upon request:\r\n  get customDepthMaterial() {\r\n    return this.material.getDepthMaterial()\r\n  }\r\n  get customDistanceMaterial() {\r\n    return this.material.getDistanceMaterial()\r\n  }\r\n\r\n  onBeforeRender() {\r\n    const {uniforms} = this.material;\r\n    const {pointA, controlA, controlB, pointB, radius, dashArray, dashOffset} = this;\r\n    uniforms.pointA.value.copy(pointA);\r\n    uniforms.controlA.value.copy(controlA);\r\n    uniforms.controlB.value.copy(controlB);\r\n    uniforms.pointB.value.copy(pointB);\r\n    uniforms.radius.value = radius;\r\n    uniforms.dashing.value.set(dashArray.x, dashArray.y, dashOffset || 0);\r\n  }\r\n\r\n  raycast(/*raycaster, intersects*/) {\r\n    // TODO - just fail for now\r\n  }\r\n}\r\n\r\nexport { BezierMesh, createDerivedMaterial, expandShaderIncludes, getShaderUniformTypes, getShadersForMaterial, invertMatrix4, voidMainRegExp };\r\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,aAAa,EAAEC,iBAAiB,EAAEC,gBAAgB,EAAEC,oBAAoB,EAAEC,SAAS,EAAEC,OAAO,EAAEC,OAAO,EAAEC,IAAI,EAAEC,gBAAgB,EAAEC,OAAO,EAAEC,oBAAoB,EAAEC,UAAU,QAAQ,OAAO;;AAE7M;AACA;AACA;AACA;AACA,MAAMC,cAAc,GAAG,8BAA8B;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,oBAAoBA,CAAEC,MAAM,EAAG;EACtC,MAAMC,OAAO,GAAG,kCAAkC;EAClD,SAASC,OAAOA,CAACC,KAAK,EAAEC,OAAO,EAAE;IAC/B,IAAIC,KAAK,GAAGpB,WAAW,CAACmB,OAAO,CAAC;IAChC,OAAOC,KAAK,GAAGN,oBAAoB,CAACM,KAAK,CAAC,GAAGF,KAAK;EACpD;EACA,OAAOH,MAAM,CAACE,OAAO,CAAED,OAAO,EAAEC,OAAQ,CAAC;AAC3C;;AAEA;AACA;AACA;AACA;AACA;;AAEA,MAAMI,IAAI,GAAG,EAAE;AAEf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,GAAG,EAAEA,CAAC,EAAE,EAAE;EAC5BD,IAAI,CAACC,CAAC,CAAC,GAAG,CAACA,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,IAAKA,CAAC,CAAEC,QAAQ,CAAC,EAAE,CAAC;AAClD;AAEA,SAASC,YAAYA,CAAA,EAAG;EAEtB;;EAEA,MAAMC,EAAE,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,UAAU,GAAG,CAAC;EACzC,MAAMC,EAAE,GAAGF,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,UAAU,GAAG,CAAC;EACzC,MAAME,EAAE,GAAGH,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,UAAU,GAAG,CAAC;EACzC,MAAMG,EAAE,GAAGJ,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,UAAU,GAAG,CAAC;EACzC,MAAMI,IAAI,GAAGV,IAAI,CAACI,EAAE,GAAG,IAAI,CAAC,GAAGJ,IAAI,CAACI,EAAE,IAAI,CAAC,GAAG,IAAI,CAAC,GAAGJ,IAAI,CAACI,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,GAAGJ,IAAI,CAACI,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,GAAG,GAAG,GACvGJ,IAAI,CAACO,EAAE,GAAG,IAAI,CAAC,GAAGP,IAAI,CAACO,EAAE,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,GAAG,GAAGP,IAAI,CAACO,EAAE,IAAI,EAAE,GAAG,IAAI,GAAG,IAAI,CAAC,GAAGP,IAAI,CAACO,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,GAAG,GAAG,GACzGP,IAAI,CAACQ,EAAE,GAAG,IAAI,GAAG,IAAI,CAAC,GAAGR,IAAI,CAACQ,EAAE,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,GAAG,GAAGR,IAAI,CAACQ,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,GAAGR,IAAI,CAACQ,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,GACnGR,IAAI,CAACS,EAAE,GAAG,IAAI,CAAC,GAAGT,IAAI,CAACS,EAAE,IAAI,CAAC,GAAG,IAAI,CAAC,GAAGT,IAAI,CAACS,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,GAAGT,IAAI,CAACS,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC;;EAExF;EACA,OAAOC,IAAI,CAACC,WAAW,CAAC,CAAC;AAE3B;;AAEA;AACA,MAAMC,MAAM,GAAGC,MAAM,CAACD,MAAM,IAAI,SAAS;AAAA,GAAwB;EAC/D,IAAIE,MAAM,GAAGC,SAAS,CAAC,CAAC,CAAC;EACzB,KAAK,IAAId,CAAC,GAAG,CAAC,EAAEe,GAAG,GAAGD,SAAS,CAACE,MAAM,EAAEhB,CAAC,GAAGe,GAAG,EAAEf,CAAC,EAAE,EAAE;IACpD,IAAIP,MAAM,GAAGqB,SAAS,CAACd,CAAC,CAAC;IACzB,IAAIP,MAAM,EAAE;MACV,KAAK,IAAIwB,IAAI,IAAIxB,MAAM,EAAE;QACvB,IAAImB,MAAM,CAACM,SAAS,CAACC,cAAc,CAACC,IAAI,CAAC3B,MAAM,EAAEwB,IAAI,CAAC,EAAE;UACtDJ,MAAM,CAACI,IAAI,CAAC,GAAGxB,MAAM,CAACwB,IAAI,CAAC;QAC7B;MACF;IACF;EACF;EACA,OAAOJ,MAAM;AACf,CAAC;AAGD,MAAMQ,KAAK,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;AACxB,MAAMC,iBAAiB,GAAG,IAAIC,OAAO,CAAC,CAAC;AACvC,MAAMC,oBAAoB,GAAG,IAAIC,GAAG,CAAC,CAAC;;AAEtC;AACA;AACA,IAAIC,kBAAkB,GAAG,IAAI;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,qBAAqBA,CAACC,YAAY,EAAEC,OAAO,EAAE;EACpD;EACA;EACA;EACA;EACA,MAAMC,UAAU,GAAGC,gBAAgB,CAACF,OAAO,CAAC;;EAE5C;EACA;EACA,IAAIG,iBAAiB,GAAGV,iBAAiB,CAACW,GAAG,CAACL,YAAY,CAAC;EAC3D,IAAI,CAACI,iBAAiB,EAAE;IACtBV,iBAAiB,CAACY,GAAG,CAACN,YAAY,EAAGI,iBAAiB,GAAGtB,MAAM,CAACyB,MAAM,CAAC,IAAI,CAAE,CAAC;EAChF;EACA,IAAIH,iBAAiB,CAACF,UAAU,CAAC,EAAE;IACjC,OAAO,IAAIE,iBAAiB,CAACF,UAAU,CAAC,CAAC,CAAC;EAC5C;EAEA,MAAMM,wBAAwB,sBAAAC,MAAA,CAAsBP,UAAU,CAAE;;EAEhE;EACA;EACA,MAAMQ,eAAe,GAAG,SAAAA,CAAUC,UAAU,EAAEC,QAAQ,EAAE;IACtDZ,YAAY,CAACU,eAAe,CAACpB,IAAI,CAAC,IAAI,EAAEqB,UAAU,EAAEC,QAAQ,CAAC;;IAE7D;IACA,MAAMC,QAAQ,GAAG,IAAI,CAACC,qBAAqB,CAAC,CAAC,GAAG,GAAG,GAAGH,UAAU,CAACI,YAAY,GAAG,GAAG,GAAGJ,UAAU,CAACK,cAAc;IAC/G,IAAIC,eAAe,GAAGrB,oBAAoB,CAACiB,QAAQ,CAAC;IACpD,IAAI,CAACI,eAAe,EAAE;MACpB,MAAMC,QAAQ,GAAGC,cAAc,CAAC,IAAI,EAAER,UAAU,EAAEV,OAAO,EAAEC,UAAU,CAAC;MACtEe,eAAe,GAAGrB,oBAAoB,CAACiB,QAAQ,CAAC,GAAGK,QAAQ;IAC7D;;IAEA;IACAP,UAAU,CAACI,YAAY,GAAGE,eAAe,CAACF,YAAY;IACtDJ,UAAU,CAACK,cAAc,GAAGC,eAAe,CAACD,cAAc;IAC1DnC,MAAM,CAAC8B,UAAU,CAACS,QAAQ,EAAE,IAAI,CAACA,QAAQ,CAAC;;IAE1C;IACA,IAAInB,OAAO,CAACoB,WAAW,EAAE;MACvBV,UAAU,CAACS,QAAQ,CAACnB,OAAO,CAACoB,WAAW,CAAC,GAAG;QACzC,IAAIC,KAAKA,CAAA,EAAG;UAAC,OAAO9B,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGF,KAAK;QAAA;MACxC,CAAC;IACH;;IAEA;IACA,IAAI,IAAI,CAACiB,wBAAwB,CAAC,EAAE;MAClC,IAAI,CAACA,wBAAwB,CAAC,CAACG,UAAU,CAAC;IAC5C;EACF,CAAC;EAED,MAAMY,eAAe,GAAG,SAASA,eAAeA,CAAA,EAAG;IACjD,OAAOC,MAAM,CAACvB,OAAO,CAACwB,OAAO,GAAGzB,YAAY,GAAGA,YAAY,CAAC0B,KAAK,CAAC,CAAC,CAAC;EACtE,CAAC;EAED,MAAMF,MAAM,GAAG,SAAAA,CAASG,IAAI,EAAE;IAC5B;IACA,MAAMC,OAAO,GAAG9C,MAAM,CAACyB,MAAM,CAACoB,IAAI,EAAEE,UAAU,CAAC;;IAE/C;IACA/C,MAAM,CAACgD,cAAc,CAACF,OAAO,EAAE,cAAc,EAAE;MAAEN,KAAK,EAAEtB;IAAa,CAAC,CAAC;;IAEvE;IACAlB,MAAM,CAACgD,cAAc,CAACF,OAAO,EAAE,IAAI,EAAE;MAAEN,KAAK,EAAExB,kBAAkB;IAAG,CAAC,CAAC;IACrE8B,OAAO,CAACjD,IAAI,GAAGP,YAAY,CAAC,CAAC;;IAE7B;IACAwD,OAAO,CAACR,QAAQ,GAAGvC,MAAM,CAAC,CAAC,CAAC,EAAE8C,IAAI,CAACP,QAAQ,EAAEnB,OAAO,CAACmB,QAAQ,CAAC;IAC9DQ,OAAO,CAACG,OAAO,GAAGlD,MAAM,CAAC,CAAC,CAAC,EAAE8C,IAAI,CAACI,OAAO,EAAE9B,OAAO,CAAC8B,OAAO,CAAC;IAC3DH,OAAO,CAACG,OAAO,4BAAAtB,MAAA,CAA4BP,UAAU,EAAG,GAAG,EAAE,CAAC,CAAC;IAC/D0B,OAAO,CAACI,UAAU,GAAGnD,MAAM,CAAC,CAAC,CAAC,EAAE8C,IAAI,CAACK,UAAU,EAAE/B,OAAO,CAAC+B,UAAU,CAAC;;IAEpE;IACAJ,OAAO,CAACK,UAAU,GAAGC,SAAS;IAE9B,OAAON,OAAO;EAChB,CAAC;EAED,MAAMC,UAAU,GAAG;IACjBM,WAAW,EAAE;MAACb,KAAK,EAAEC;IAAe,CAAC;IACrCa,iBAAiB,EAAE;MAACd,KAAK,EAAE;IAAI,CAAC;IAEhCR,qBAAqB,EAAE;MACrBuB,QAAQ,EAAE,IAAI;MACdC,YAAY,EAAE,IAAI;MAClBhB,KAAK,EAAE,SAAAA,CAAA,EAAY;QACjB,OAAOtB,YAAY,CAACc,qBAAqB,CAAC,CAAC,GAAG,GAAG,GAAGZ,UAAU;MAChE;IACF,CAAC;IAEDQ,eAAe,EAAE;MACfL,GAAGA,CAAA,EAAG;QACJ,OAAOK,eAAe;MACxB,CAAC;MACDJ,GAAGA,CAACiC,EAAE,EAAE;QACN,IAAI,CAAC/B,wBAAwB,CAAC,GAAG+B,EAAE;MACrC;IACF,CAAC;IAEDC,IAAI,EAAE;MACJH,QAAQ,EAAE,IAAI;MACdC,YAAY,EAAE,IAAI;MAClBhB,KAAK,EAAE,SAAAA,CAAU3D,MAAM,EAAE;QACvBqC,YAAY,CAACwC,IAAI,CAAClD,IAAI,CAAC,IAAI,EAAE3B,MAAM,CAAC;QACpC,IAAI,CAACqC,YAAY,CAACyC,gBAAgB,IAAI,CAACzC,YAAY,CAACoC,iBAAiB,EAAE;UACrEvD,MAAM,CAAC,IAAI,CAACmD,UAAU,EAAErE,MAAM,CAACqE,UAAU,CAAC;UAC1CnD,MAAM,CAAC,IAAI,CAACkD,OAAO,EAAEpE,MAAM,CAACoE,OAAO,CAAC;UACpClD,MAAM,CAAC,IAAI,CAACuC,QAAQ,EAAEvE,aAAa,CAAC6E,KAAK,CAAC/D,MAAM,CAACyD,QAAQ,CAAC,CAAC;QAC7D;QACA,OAAO,IAAI;MACb;IACF,CAAC;IAEDM,KAAK,EAAE;MACLW,QAAQ,EAAE,IAAI;MACdC,YAAY,EAAE,IAAI;MAClBhB,KAAK,EAAE,SAAAA,CAAA,EAAY;QACjB,MAAMoB,OAAO,GAAG,IAAI1C,YAAY,CAACmC,WAAW,CAAC,CAAC;QAC9C,OAAOX,MAAM,CAACkB,OAAO,CAAC,CAACF,IAAI,CAAC,IAAI,CAAC;MACnC;IACF,CAAC;IAED;AACJ;AACA;AACA;IACIG,gBAAgB,EAAE;MAChBN,QAAQ,EAAE,IAAI;MACdC,YAAY,EAAE,IAAI;MAClBhB,KAAK,EAAE,SAAAA,CAAA,EAAW;QAChB,IAAIsB,aAAa,GAAG,IAAI,CAACC,cAAc;QACvC,IAAI,CAACD,aAAa,EAAE;UAClBA,aAAa,GAAG,IAAI,CAACC,cAAc,GAAG9C,qBAAqB,CACzDC,YAAY,CAACoC,iBAAiB,GAC1BpC,YAAY,CAAC2C,gBAAgB,CAAC,CAAC,GAC/B,IAAI7F,iBAAiB,CAAC;YAAEgG,YAAY,EAAE/F;UAAiB,CAAC,CAAC,EAC7DkD,OACF,CAAC;UACD2C,aAAa,CAACb,OAAO,CAACgB,iBAAiB,GAAG,EAAE;UAC5CH,aAAa,CAACxB,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAAC,CAAC;QAC1C;QACA,OAAOwB,aAAa;MACtB;IACF,CAAC;IAED;AACJ;AACA;AACA;IACII,mBAAmB,EAAE;MACnBX,QAAQ,EAAE,IAAI;MACdC,YAAY,EAAE,IAAI;MAClBhB,KAAK,EAAE,SAAAA,CAAA,EAAW;QAChB,IAAI2B,gBAAgB,GAAG,IAAI,CAACC,iBAAiB;QAC7C,IAAI,CAACD,gBAAgB,EAAE;UACrBA,gBAAgB,GAAG,IAAI,CAACC,iBAAiB,GAAGnD,qBAAqB,CAC/DC,YAAY,CAACoC,iBAAiB,GAC1BpC,YAAY,CAACgD,mBAAmB,CAAC,CAAC,GAClC,IAAIhG,oBAAoB,CAAC,CAAC,EAC9BiD,OACF,CAAC;UACDgD,gBAAgB,CAAClB,OAAO,CAACoB,oBAAoB,GAAG,EAAE;UAClDF,gBAAgB,CAAC7B,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAAC,CAAC;QAC7C;QACA,OAAO6B,gBAAgB;MACzB;IACF,CAAC;IAEDG,OAAO,EAAE;MACPf,QAAQ,EAAE,IAAI;MACdC,YAAY,EAAE,IAAI;MAClBhB,KAAKA,CAAA,EAAG;QACN,MAAM;UAACuB,cAAc;UAAEK;QAAiB,CAAC,GAAG,IAAI;QAChD,IAAIL,cAAc,EAAEA,cAAc,CAACO,OAAO,CAAC,CAAC;QAC5C,IAAIF,iBAAiB,EAAEA,iBAAiB,CAACE,OAAO,CAAC,CAAC;QAClDpD,YAAY,CAACoD,OAAO,CAAC9D,IAAI,CAAC,IAAI,CAAC;MACjC;IACF;EACF,CAAC;EAEDc,iBAAiB,CAACF,UAAU,CAAC,GAAGqB,eAAe;EAC/C,OAAO,IAAIA,eAAe,CAAC,CAAC;AAC9B;AAGA,SAASJ,cAAcA,CAACkC,QAAQ,EAAAC,IAAA,EAAkCrD,OAAO,EAAEsD,GAAG,EAAE;EAAA,IAA9C;IAACxC,YAAY;IAAEC;EAAc,CAAC,GAAAsC,IAAA;EAC9D,IAAI;IACFE,UAAU;IACVC,eAAe;IACfC,eAAe;IACfC,eAAe;IACfC,YAAY;IACZC,iBAAiB;IACjBC,iBAAiB;IACjBC,sBAAsB;IACtBC,cAAc;IACd3C;EACF,CAAC,GAAGpB,OAAO;EAEXuD,UAAU,GAAGA,UAAU,IAAI,EAAE;EAC7BC,eAAe,GAAGA,eAAe,IAAI,EAAE;EACvCC,eAAe,GAAGA,eAAe,IAAI,EAAE;EACvCE,YAAY,GAAGA,YAAY,IAAI,EAAE;EACjCC,iBAAiB,GAAGA,iBAAiB,IAAI,EAAE;EAC3CC,iBAAiB,GAAGA,iBAAiB,IAAI,EAAE;;EAE3C;EACA,IAAIH,eAAe,IAAIK,cAAc,EAAE;IACrCjD,YAAY,GAAGrD,oBAAoB,CAACqD,YAAY,CAAC;EACnD;EACA,IAAIgD,sBAAsB,IAAIC,cAAc,EAAE;IAC5C;IACA;IACA;IACA;IACAhD,cAAc,GAAGA,cAAc,CAACnD,OAAO,CACrC,4FAA4F,EAC5F,mDACF,CAAC;IACDmD,cAAc,GAAGtD,oBAAoB,CAACsD,cAAc,CAAC;EACvD;;EAEA;EACA,IAAIgD,cAAc,EAAE;IAClB,IAAIC,GAAG,GAAGD,cAAc,CAAC;MAACjD,YAAY;MAAEC;IAAc,CAAC,CAAC;IACxDD,YAAY,GAAGkD,GAAG,CAAClD,YAAY;IAC/BC,cAAc,GAAGiD,GAAG,CAACjD,cAAc;EACrC;;EAEA;EACA;EACA,IAAI+C,sBAAsB,EAAE;IAC1B,IAAIG,UAAU,GAAG,EAAE;IACnBlD,cAAc,GAAGA,cAAc,CAACnD,OAAO,CACrC,mDAAmD;IAAE;IACrDC,KAAK,IAAI;MACPoG,UAAU,CAACC,IAAI,CAACrG,KAAK,CAAC;MACtB,OAAO,EAAE;IACX,CACF,CAAC;IACDgG,iBAAiB,MAAArD,MAAA,CAAMsD,sBAAsB,QAAAtD,MAAA,CAAKyD,UAAU,CAACE,IAAI,CAAC,IAAI,CAAC,QAAA3D,MAAA,CAAKqD,iBAAiB,CAAE;EACjG;;EAEA;EACA,IAAIzC,WAAW,EAAE;IACf,MAAMgD,IAAI,sBAAA5D,MAAA,CAAsBY,WAAW,QAAK;IAChDmC,UAAU,GAAGa,IAAI,GAAGb,UAAU;IAC9BI,YAAY,GAAGS,IAAI,GAAGT,YAAY;EACpC;;EAEA;EACA,IAAID,eAAe,EAAE;IACnB;IACA5C,YAAY,2BAAAN,MAAA,CAA2B8C,GAAG,4BAAA9C,MAAA,CACzB8C,GAAG,wBAAA9C,MAAA,CACP8C,GAAG,SAAA9C,MAAA,CAClBM,YAAY,OACb;IACGyC,UAAU,MAAA/C,MAAA,CAAM+C,UAAU,kCAAA/C,MAAA,CACF8C,GAAG,mEAAA9C,MAAA,CAC3BkD,eAAe,UAElB;IACGF,eAAe,wBAAAhD,MAAA,CACD8C,GAAG,wCAAA9C,MAAA,CACL8C,GAAG,kCAAA9C,MAAA,CACP8C,GAAG,yCAAA9C,MAAA,CACQ8C,GAAG,uBAAA9C,MAAA,CAAoB8C,GAAG,sBAAA9C,MAAA,CAAmB8C,GAAG,kBAAA9C,MAAA,CAAe8C,GAAG,UAAA9C,MAAA,CACvFgD,eAAe,OAChB;IACG1C,YAAY,GAAGA,YAAY,CAAClD,OAAO,CAAC,2BAA2B,EAAE,CAACC,KAAK,EAAEwG,MAAM,EAAEC,KAAK,EAAEC,OAAO,KAAK;MAClG,OAAO,2BAA2B,CAACC,IAAI,CAACD,OAAO,CAACE,MAAM,CAAC,CAAC,EAAEH,KAAK,CAAC,CAAC,GAAGD,MAAM,aAAA7D,MAAA,CAAa6D,MAAM,OAAA7D,MAAA,CAAI8C,GAAG,CAAE;IACxG,CAAC,CAAC;;IAEF;IACA;IACA,IAAI,EAAEF,QAAQ,CAACsB,GAAG,IAAItB,QAAQ,CAACsB,GAAG,CAACC,OAAO,GAAG,CAAC,CAAC,EAAE;MAC/C7D,YAAY,GAAGA,YAAY,CAAClD,OAAO,CAAC,aAAa,eAAA4C,MAAA,CAAe8C,GAAG,CAAE,CAAC;IACxE;EACF;;EAEA;EACAxC,YAAY,GAAG8D,oBAAoB,CAAC9D,YAAY,EAAEwC,GAAG,EAAEC,UAAU,EAAEC,eAAe,EAAEC,eAAe,CAAC;EACpG1C,cAAc,GAAG6D,oBAAoB,CAAC7D,cAAc,EAAEuC,GAAG,EAAEK,YAAY,EAAEC,iBAAiB,EAAEC,iBAAiB,CAAC;EAE9G,OAAO;IACL/C,YAAY;IACZC;EACF,CAAC;AACH;AAEA,SAAS6D,oBAAoBA,CAACC,UAAU,EAAEC,EAAE,EAAEC,IAAI,EAAEC,KAAK,EAAEC,KAAK,EAAE;EAChE,IAAID,KAAK,IAAIC,KAAK,IAAIF,IAAI,EAAE;IAC1BF,UAAU,GAAGA,UAAU,CAACjH,OAAO,CAACJ,cAAc,OAAAgD,MAAA,CAChDuE,IAAI,2BAAAvE,MAAA,CACesE,EAAE,SACnB,CAAC;IACDD,UAAU,0BAAArE,MAAA,CAEVwE,KAAK,wBAAAxE,MAAA,CACSsE,EAAE,aAAAtE,MAAA,CAChByE,KAAK,QACP;EACA;EACA,OAAOJ,UAAU;AACnB;AAGA,SAASK,mBAAmBA,CAAC5B,GAAG,EAAEjC,KAAK,EAAE;EACvC,OAAOiC,GAAG,KAAK,UAAU,GAAGrB,SAAS,GAAG,OAAOZ,KAAK,KAAK,UAAU,GAAGA,KAAK,CAACnD,QAAQ,CAAC,CAAC,GAAGmD,KAAK;AAChG;AAEA,IAAI8D,MAAM,GAAG,CAAC;AACd,MAAMC,kBAAkB,GAAG,IAAIxF,GAAG,CAAC,CAAC;AACpC,SAASM,gBAAgBA,CAACF,OAAO,EAAE;EACjC,MAAMqF,WAAW,GAAGC,IAAI,CAACC,SAAS,CAACvF,OAAO,EAAEkF,mBAAmB,CAAC;EAChE,IAAIJ,EAAE,GAAGM,kBAAkB,CAAChF,GAAG,CAACiF,WAAW,CAAC;EAC5C,IAAIP,EAAE,IAAI,IAAI,EAAE;IACdM,kBAAkB,CAAC/E,GAAG,CAACgF,WAAW,EAAGP,EAAE,GAAG,EAAEK,MAAO,CAAC;EACtD;EACA,OAAOL,EAAE;AACX;;AAEA;AACA;AACA,MAAMU,yBAAyB,GAAG;EAChC3I,iBAAiB,EAAE,OAAO;EAC1BE,oBAAoB,EAAE,cAAc;EACpC0I,kBAAkB,EAAE,QAAQ;EAC5BC,iBAAiB,EAAE,OAAO;EAC1BC,mBAAmB,EAAE,SAAS;EAC9BC,iBAAiB,EAAE,OAAO;EAC1BC,gBAAgB,EAAE,MAAM;EACxBvI,oBAAoB,EAAE,UAAU;EAChCwI,oBAAoB,EAAE,UAAU;EAChCC,kBAAkB,EAAE,QAAQ;EAC5BC,iBAAiB,EAAE,OAAO;EAC1BC,kBAAkB,EAAE,QAAQ;EAC5BC,cAAc,EAAE,QAAQ;EACxBC,cAAc,EAAE,QAAQ;EACxBC,cAAc,EAAE;AAClB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,qBAAqBA,CAACjD,QAAQ,EAAE;EACvC,IAAIkD,WAAW,GAAGd,yBAAyB,CAACpC,QAAQ,CAACmD,IAAI,CAAC;EAC1D,OAAOD,WAAW,GAAGtJ,SAAS,CAACsJ,WAAW,CAAC,GAAGlD,QAAQ,EAAC;AACzD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASoD,qBAAqBA,CAACC,MAAM,EAAE;EACrC,IAAIC,SAAS,GAAG,8DAA8D;EAC9E,IAAIvF,QAAQ,GAAGtC,MAAM,CAACyB,MAAM,CAAC,IAAI,CAAC;EAClC,IAAIzC,KAAK;EACT,OAAO,CAACA,KAAK,GAAG6I,SAAS,CAACC,IAAI,CAACF,MAAM,CAAC,MAAM,IAAI,EAAE;IAChDtF,QAAQ,CAACtD,KAAK,CAAC,CAAC,CAAC,CAAC,GAAGA,KAAK,CAAC,CAAC,CAAC;EAC/B;EACA,OAAOsD,QAAQ;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASyF,aAAaA,CAACC,SAAS,EAA6B;EAAA,IAA3BC,SAAS,GAAA/H,SAAA,CAAAE,MAAA,QAAAF,SAAA,QAAAkD,SAAA,GAAAlD,SAAA,MAAG,IAAI9B,OAAO,CAAC,CAAC;EACzD,IAAI,OAAO6J,SAAS,CAACC,MAAM,KAAK,UAAU,EAAE;IAC1CD,SAAS,CAACvE,IAAI,CAACsE,SAAS,CAAC,CAACE,MAAM,CAAC,CAAC;EACpC,CAAC,MAAM;IACLD,SAAS,CAACE,UAAU,CAACH,SAAS,CAAC;EACjC;EACA,OAAOC,SAAS;AAClB;;AAEA;AACA;AACA;AACA;;AAEA,MAAMvD,UAAU,woBAwBf;AAED,MAAMG,eAAe,0jCA0BpB;AAED,MAAMC,YAAY,sDAGjB;AAED,MAAMC,iBAAiB,qKAOtB;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA,SAASqD,wBAAwBA,CAAClH,YAAY,EAAE;EAC9C,OAAOD,qBAAqB,CAC1BC,YAAY,EACZ;IACEyB,OAAO,EAAE,IAAI;IACbL,QAAQ,EAAE;MACR+F,MAAM,EAAE;QAAC7F,KAAK,EAAE,IAAInE,OAAO,CAAC;MAAC,CAAC;MAC9BiK,QAAQ,EAAE;QAAC9F,KAAK,EAAE,IAAInE,OAAO,CAAC;MAAC,CAAC;MAChCkK,QAAQ,EAAE;QAAC/F,KAAK,EAAE,IAAInE,OAAO,CAAC;MAAC,CAAC;MAChCmK,MAAM,EAAE;QAAChG,KAAK,EAAE,IAAInE,OAAO,CAAC;MAAC,CAAC;MAC9BoK,MAAM,EAAE;QAACjG,KAAK,EAAE;MAAI,CAAC;MACrBkG,OAAO,EAAE;QAAClG,KAAK,EAAE,IAAInE,OAAO,CAAC;MAAC,CAAC,CAAC;IAClC,CAAC;IACDqG,UAAU;IACVG,eAAe;IACfC,YAAY;IACZC;EACF,CACF,CAAC;AACH;AAEA,IAAI4D,QAAQ,GAAG,IAAI;AAEnB,MAAMC,mBAAmB,GAAG,aAAa,IAAInK,oBAAoB,CAAC;EAACoK,KAAK,EAAE,QAAQ;EAAEC,IAAI,EAAEpK;AAAU,CAAC,CAAC;;AAGtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMqK,UAAU,SAASzK,IAAI,CAAC;EAC5B,OAAO0K,WAAWA,CAAA,EAAG;IACnB,OAAOL,QAAQ,KAAKA,QAAQ,GAC1B,IAAIpK,gBAAgB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC0K,SAAS,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,CAC1D;EACH;EAEA5F,WAAWA,CAAA,EAAG;IACZ,KAAK,CACH0F,UAAU,CAACC,WAAW,CAAC,CAAC,EACxBJ,mBACF,CAAC;IAED,IAAI,CAACP,MAAM,GAAG,IAAIhK,OAAO,CAAC,CAAC;IAC3B,IAAI,CAACiK,QAAQ,GAAG,IAAIjK,OAAO,CAAC,CAAC;IAC7B,IAAI,CAACkK,QAAQ,GAAG,IAAIlK,OAAO,CAAC,CAAC;IAC7B,IAAI,CAACmK,MAAM,GAAG,IAAInK,OAAO,CAAC,CAAC;IAC3B,IAAI,CAACoK,MAAM,GAAG,IAAI;IAClB,IAAI,CAACS,SAAS,GAAG,IAAI1K,OAAO,CAAC,CAAC;IAC9B,IAAI,CAAC2K,UAAU,GAAG,CAAC;;IAEnB;IACA;IACA,IAAI,CAACC,aAAa,GAAG,KAAK;EAC5B;;EAEA;EACA;EACA,IAAI7E,QAAQA,CAAA,EAAG;IACb,IAAI8E,eAAe,GAAG,IAAI,CAACC,gBAAgB;IAC3C,MAAMpI,YAAY,GAAG,IAAI,CAACqI,aAAa,IAAI,IAAI,CAACC,gBAAgB,KAAK,IAAI,CAACA,gBAAgB,GAAGZ,mBAAmB,CAAChG,KAAK,CAAC,CAAC,CAAC;IACzH,IAAI,CAACyG,eAAe,IAAIA,eAAe,CAACnI,YAAY,KAAKA,YAAY,EAAE;MACrEmI,eAAe,GAAG,IAAI,CAACC,gBAAgB,GAAGlB,wBAAwB,CAAClH,YAAY,CAAC;MAChF;MACAA,YAAY,CAACuI,gBAAgB,CAAC,SAAS,EAAE,SAASC,SAASA,CAAA,EAAG;QAC5DxI,YAAY,CAACyI,mBAAmB,CAAC,SAAS,EAAED,SAAS,CAAC;QACtDL,eAAe,CAAC/E,OAAO,CAAC,CAAC;MAC3B,CAAC,CAAC;IACJ;IACA,OAAO+E,eAAe;EACxB;EACA,IAAI9E,QAAQA,CAACrD,YAAY,EAAE;IACzB,IAAI,CAACqI,aAAa,GAAGrI,YAAY;EACnC;;EAEA;EACA,IAAI0I,mBAAmBA,CAAA,EAAG;IACxB,OAAO,IAAI,CAACrF,QAAQ,CAACV,gBAAgB,CAAC,CAAC;EACzC;EACA,IAAIgG,sBAAsBA,CAAA,EAAG;IAC3B,OAAO,IAAI,CAACtF,QAAQ,CAACL,mBAAmB,CAAC,CAAC;EAC5C;EAEA4F,cAAcA,CAAA,EAAG;IACf,MAAM;MAACxH;IAAQ,CAAC,GAAG,IAAI,CAACiC,QAAQ;IAChC,MAAM;MAAC8D,MAAM;MAAEC,QAAQ;MAAEC,QAAQ;MAAEC,MAAM;MAAEC,MAAM;MAAES,SAAS;MAAEC;IAAU,CAAC,GAAG,IAAI;IAChF7G,QAAQ,CAAC+F,MAAM,CAAC7F,KAAK,CAACkB,IAAI,CAAC2E,MAAM,CAAC;IAClC/F,QAAQ,CAACgG,QAAQ,CAAC9F,KAAK,CAACkB,IAAI,CAAC4E,QAAQ,CAAC;IACtChG,QAAQ,CAACiG,QAAQ,CAAC/F,KAAK,CAACkB,IAAI,CAAC6E,QAAQ,CAAC;IACtCjG,QAAQ,CAACkG,MAAM,CAAChG,KAAK,CAACkB,IAAI,CAAC8E,MAAM,CAAC;IAClClG,QAAQ,CAACmG,MAAM,CAACjG,KAAK,GAAGiG,MAAM;IAC9BnG,QAAQ,CAACoG,OAAO,CAAClG,KAAK,CAAChB,GAAG,CAAC0H,SAAS,CAACa,CAAC,EAAEb,SAAS,CAACc,CAAC,EAAEb,UAAU,IAAI,CAAC,CAAC;EACvE;EAEAc,OAAOA,CAAA,CAAC;EAAA,EAA2B;IACjC;EAAA;AAEJ;AAEA,SAASlB,UAAU,EAAE9H,qBAAqB,EAAErC,oBAAoB,EAAE+I,qBAAqB,EAAEH,qBAAqB,EAAEO,aAAa,EAAEpJ,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}