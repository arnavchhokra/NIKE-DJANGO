{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isTokenType = exports.hasExtendingTokensTypesMapProperty = exports.hasExtendingTokensTypesProperty = exports.hasCategoriesProperty = exports.hasShortKeyProperty = exports.singleAssignCategoriesToksMap = exports.assignCategoriesMapProp = exports.assignCategoriesTokensProp = exports.assignTokenDefaultProps = exports.expandCategories = exports.augmentTokenTypes = exports.tokenIdxToClass = exports.tokenShortNameIdx = exports.tokenStructuredMatcherNoCategories = exports.tokenStructuredMatcher = void 0;\n\nvar isEmpty_1 = __importDefault(require(\"lodash/isEmpty\"));\n\nvar compact_1 = __importDefault(require(\"lodash/compact\"));\n\nvar isArray_1 = __importDefault(require(\"lodash/isArray\"));\n\nvar flatten_1 = __importDefault(require(\"lodash/flatten\"));\n\nvar difference_1 = __importDefault(require(\"lodash/difference\"));\n\nvar map_1 = __importDefault(require(\"lodash/map\"));\n\nvar forEach_1 = __importDefault(require(\"lodash/forEach\"));\n\nvar has_1 = __importDefault(require(\"lodash/has\"));\n\nvar includes_1 = __importDefault(require(\"lodash/includes\"));\n\nvar clone_1 = __importDefault(require(\"lodash/clone\"));\n\nfunction tokenStructuredMatcher(tokInstance, tokConstructor) {\n  var instanceType = tokInstance.tokenTypeIdx;\n\n  if (instanceType === tokConstructor.tokenTypeIdx) {\n    return true;\n  } else {\n    return tokConstructor.isParent === true && tokConstructor.categoryMatchesMap[instanceType] === true;\n  }\n}\n\nexports.tokenStructuredMatcher = tokenStructuredMatcher; // Optimized tokenMatcher in case our grammar does not use token categories\n// Being so tiny it is much more likely to be in-lined and this avoid the function call overhead\n\nfunction tokenStructuredMatcherNoCategories(token, tokType) {\n  return token.tokenTypeIdx === tokType.tokenTypeIdx;\n}\n\nexports.tokenStructuredMatcherNoCategories = tokenStructuredMatcherNoCategories;\nexports.tokenShortNameIdx = 1;\nexports.tokenIdxToClass = {};\n\nfunction augmentTokenTypes(tokenTypes) {\n  // collect the parent Token Types as well.\n  var tokenTypesAndParents = expandCategories(tokenTypes); // add required tokenType and categoryMatches properties\n\n  assignTokenDefaultProps(tokenTypesAndParents); // fill up the categoryMatches\n\n  assignCategoriesMapProp(tokenTypesAndParents);\n  assignCategoriesTokensProp(tokenTypesAndParents);\n  (0, forEach_1.default)(tokenTypesAndParents, function (tokType) {\n    tokType.isParent = tokType.categoryMatches.length > 0;\n  });\n}\n\nexports.augmentTokenTypes = augmentTokenTypes;\n\nfunction expandCategories(tokenTypes) {\n  var result = (0, clone_1.default)(tokenTypes);\n  var categories = tokenTypes;\n  var searching = true;\n\n  while (searching) {\n    categories = (0, compact_1.default)((0, flatten_1.default)((0, map_1.default)(categories, function (currTokType) {\n      return currTokType.CATEGORIES;\n    })));\n    var newCategories = (0, difference_1.default)(categories, result);\n    result = result.concat(newCategories);\n\n    if ((0, isEmpty_1.default)(newCategories)) {\n      searching = false;\n    } else {\n      categories = newCategories;\n    }\n  }\n\n  return result;\n}\n\nexports.expandCategories = expandCategories;\n\nfunction assignTokenDefaultProps(tokenTypes) {\n  (0, forEach_1.default)(tokenTypes, function (currTokType) {\n    if (!hasShortKeyProperty(currTokType)) {\n      exports.tokenIdxToClass[exports.tokenShortNameIdx] = currTokType;\n      currTokType.tokenTypeIdx = exports.tokenShortNameIdx++;\n    } // CATEGORIES? : TokenType | TokenType[]\n\n\n    if (hasCategoriesProperty(currTokType) && !(0, isArray_1.default)(currTokType.CATEGORIES) // &&\n    // !isUndefined(currTokType.CATEGORIES.PATTERN)\n    ) {\n      currTokType.CATEGORIES = [currTokType.CATEGORIES];\n    }\n\n    if (!hasCategoriesProperty(currTokType)) {\n      currTokType.CATEGORIES = [];\n    }\n\n    if (!hasExtendingTokensTypesProperty(currTokType)) {\n      currTokType.categoryMatches = [];\n    }\n\n    if (!hasExtendingTokensTypesMapProperty(currTokType)) {\n      currTokType.categoryMatchesMap = {};\n    }\n  });\n}\n\nexports.assignTokenDefaultProps = assignTokenDefaultProps;\n\nfunction assignCategoriesTokensProp(tokenTypes) {\n  (0, forEach_1.default)(tokenTypes, function (currTokType) {\n    // avoid duplications\n    currTokType.categoryMatches = [];\n    (0, forEach_1.default)(currTokType.categoryMatchesMap, function (val, key) {\n      currTokType.categoryMatches.push(exports.tokenIdxToClass[key].tokenTypeIdx);\n    });\n  });\n}\n\nexports.assignCategoriesTokensProp = assignCategoriesTokensProp;\n\nfunction assignCategoriesMapProp(tokenTypes) {\n  (0, forEach_1.default)(tokenTypes, function (currTokType) {\n    singleAssignCategoriesToksMap([], currTokType);\n  });\n}\n\nexports.assignCategoriesMapProp = assignCategoriesMapProp;\n\nfunction singleAssignCategoriesToksMap(path, nextNode) {\n  (0, forEach_1.default)(path, function (pathNode) {\n    nextNode.categoryMatchesMap[pathNode.tokenTypeIdx] = true;\n  });\n  (0, forEach_1.default)(nextNode.CATEGORIES, function (nextCategory) {\n    var newPath = path.concat(nextNode); // avoids infinite loops due to cyclic categories.\n\n    if (!(0, includes_1.default)(newPath, nextCategory)) {\n      singleAssignCategoriesToksMap(newPath, nextCategory);\n    }\n  });\n}\n\nexports.singleAssignCategoriesToksMap = singleAssignCategoriesToksMap;\n\nfunction hasShortKeyProperty(tokType) {\n  return (0, has_1.default)(tokType, \"tokenTypeIdx\");\n}\n\nexports.hasShortKeyProperty = hasShortKeyProperty;\n\nfunction hasCategoriesProperty(tokType) {\n  return (0, has_1.default)(tokType, \"CATEGORIES\");\n}\n\nexports.hasCategoriesProperty = hasCategoriesProperty;\n\nfunction hasExtendingTokensTypesProperty(tokType) {\n  return (0, has_1.default)(tokType, \"categoryMatches\");\n}\n\nexports.hasExtendingTokensTypesProperty = hasExtendingTokensTypesProperty;\n\nfunction hasExtendingTokensTypesMapProperty(tokType) {\n  return (0, has_1.default)(tokType, \"categoryMatchesMap\");\n}\n\nexports.hasExtendingTokensTypesMapProperty = hasExtendingTokensTypesMapProperty;\n\nfunction isTokenType(tokType) {\n  return (0, has_1.default)(tokType, \"tokenTypeIdx\");\n}\n\nexports.isTokenType = isTokenType;","map":{"version":3,"mappings":"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","names":["tokenStructuredMatcher","tokInstance","tokConstructor","instanceType","tokenTypeIdx","isParent","categoryMatchesMap","exports","tokenStructuredMatcherNoCategories","token","tokType","augmentTokenTypes","tokenTypes","tokenTypesAndParents","expandCategories","assignTokenDefaultProps","assignCategoriesMapProp","assignCategoriesTokensProp","categoryMatches","length","result","categories","searching","currTokType","CATEGORIES","newCategories","concat","hasShortKeyProperty","hasCategoriesProperty","hasExtendingTokensTypesProperty","hasExtendingTokensTypesMapProperty","val","key","push","singleAssignCategoriesToksMap","path","nextNode","pathNode","nextCategory","newPath","isTokenType"],"sources":["C:\\Users\\Arnav\\Downloads\\l4fycy\\node_modules\\chevrotain\\src\\scan\\tokens.ts"],"sourcesContent":["import isEmpty from \"lodash/isEmpty\"\nimport compact from \"lodash/compact\"\nimport isArray from \"lodash/isArray\"\nimport flatten from \"lodash/flatten\"\nimport difference from \"lodash/difference\"\nimport map from \"lodash/map\"\nimport forEach from \"lodash/forEach\"\nimport has from \"lodash/has\"\nimport includes from \"lodash/includes\"\nimport clone from \"lodash/clone\"\nimport { IToken, TokenType } from \"@chevrotain/types\"\n\nexport function tokenStructuredMatcher(\n  tokInstance: IToken,\n  tokConstructor: TokenType\n) {\n  const instanceType = tokInstance.tokenTypeIdx\n  if (instanceType === tokConstructor.tokenTypeIdx) {\n    return true\n  } else {\n    return (\n      tokConstructor.isParent === true &&\n      tokConstructor.categoryMatchesMap![instanceType] === true\n    )\n  }\n}\n\n// Optimized tokenMatcher in case our grammar does not use token categories\n// Being so tiny it is much more likely to be in-lined and this avoid the function call overhead\nexport function tokenStructuredMatcherNoCategories(\n  token: IToken,\n  tokType: TokenType\n) {\n  return token.tokenTypeIdx === tokType.tokenTypeIdx\n}\n\nexport let tokenShortNameIdx = 1\nexport const tokenIdxToClass: { [tokenIdx: number]: TokenType } = {}\n\nexport function augmentTokenTypes(tokenTypes: TokenType[]): void {\n  // collect the parent Token Types as well.\n  const tokenTypesAndParents = expandCategories(tokenTypes)\n\n  // add required tokenType and categoryMatches properties\n  assignTokenDefaultProps(tokenTypesAndParents)\n\n  // fill up the categoryMatches\n  assignCategoriesMapProp(tokenTypesAndParents)\n  assignCategoriesTokensProp(tokenTypesAndParents)\n\n  forEach(tokenTypesAndParents, (tokType) => {\n    tokType.isParent = tokType.categoryMatches!.length > 0\n  })\n}\n\nexport function expandCategories(tokenTypes: TokenType[]): TokenType[] {\n  let result = clone(tokenTypes)\n\n  let categories = tokenTypes\n  let searching = true\n  while (searching) {\n    categories = compact(\n      flatten(map(categories, (currTokType) => currTokType.CATEGORIES))\n    )\n\n    const newCategories = difference(categories, result)\n\n    result = result.concat(newCategories)\n\n    if (isEmpty(newCategories)) {\n      searching = false\n    } else {\n      categories = newCategories\n    }\n  }\n  return result\n}\n\nexport function assignTokenDefaultProps(tokenTypes: TokenType[]): void {\n  forEach(tokenTypes, (currTokType) => {\n    if (!hasShortKeyProperty(currTokType)) {\n      tokenIdxToClass[tokenShortNameIdx] = currTokType\n      ;(<any>currTokType).tokenTypeIdx = tokenShortNameIdx++\n    }\n\n    // CATEGORIES? : TokenType | TokenType[]\n    if (\n      hasCategoriesProperty(currTokType) &&\n      !isArray(currTokType.CATEGORIES)\n      // &&\n      // !isUndefined(currTokType.CATEGORIES.PATTERN)\n    ) {\n      currTokType.CATEGORIES = [currTokType.CATEGORIES as unknown as TokenType]\n    }\n\n    if (!hasCategoriesProperty(currTokType)) {\n      currTokType.CATEGORIES = []\n    }\n\n    if (!hasExtendingTokensTypesProperty(currTokType)) {\n      currTokType.categoryMatches = []\n    }\n\n    if (!hasExtendingTokensTypesMapProperty(currTokType)) {\n      currTokType.categoryMatchesMap = {}\n    }\n  })\n}\n\nexport function assignCategoriesTokensProp(tokenTypes: TokenType[]): void {\n  forEach(tokenTypes, (currTokType) => {\n    // avoid duplications\n    currTokType.categoryMatches = []\n    forEach(currTokType.categoryMatchesMap!, (val, key) => {\n      currTokType.categoryMatches!.push(\n        tokenIdxToClass[key as unknown as number].tokenTypeIdx!\n      )\n    })\n  })\n}\n\nexport function assignCategoriesMapProp(tokenTypes: TokenType[]): void {\n  forEach(tokenTypes, (currTokType) => {\n    singleAssignCategoriesToksMap([], currTokType)\n  })\n}\n\nexport function singleAssignCategoriesToksMap(\n  path: TokenType[],\n  nextNode: TokenType\n): void {\n  forEach(path, (pathNode) => {\n    nextNode.categoryMatchesMap![pathNode.tokenTypeIdx!] = true\n  })\n\n  forEach(nextNode.CATEGORIES, (nextCategory) => {\n    const newPath = path.concat(nextNode)\n    // avoids infinite loops due to cyclic categories.\n    if (!includes(newPath, nextCategory)) {\n      singleAssignCategoriesToksMap(newPath, nextCategory)\n    }\n  })\n}\n\nexport function hasShortKeyProperty(tokType: TokenType): boolean {\n  return has(tokType, \"tokenTypeIdx\")\n}\n\nexport function hasCategoriesProperty(tokType: TokenType): boolean {\n  return has(tokType, \"CATEGORIES\")\n}\n\nexport function hasExtendingTokensTypesProperty(tokType: TokenType): boolean {\n  return has(tokType, \"categoryMatches\")\n}\n\nexport function hasExtendingTokensTypesMapProperty(\n  tokType: TokenType\n): boolean {\n  return has(tokType, \"categoryMatchesMap\")\n}\n\nexport function isTokenType(tokType: TokenType): boolean {\n  return has(tokType, \"tokenTypeIdx\")\n}\n"]},"metadata":{},"sourceType":"script"}