{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.charCodeToOptimizedIndex = exports.minOptimizationVal = exports.buildLineBreakIssueMessage = exports.LineTerminatorOptimizedTester = exports.isShortPattern = exports.isCustomPattern = exports.cloneEmptyGroups = exports.performWarningRuntimeChecks = exports.performRuntimeChecks = exports.addStickyFlag = exports.addStartOfInput = exports.findUnreachablePatterns = exports.findModesThatDoNotExist = exports.findInvalidGroupType = exports.findDuplicatePatterns = exports.findUnsupportedFlags = exports.findStartOfInputAnchor = exports.findEmptyMatchRegExps = exports.findEndOfInputAnchor = exports.findInvalidPatterns = exports.findMissingPatterns = exports.validatePatterns = exports.analyzeTokenTypes = exports.enableSticky = exports.disableSticky = exports.SUPPORT_STICKY = exports.MODES = exports.DEFAULT_MODE = void 0;\n\nvar regexp_to_ast_1 = require(\"regexp-to-ast\");\n\nvar lexer_public_1 = require(\"./lexer_public\");\n\nvar first_1 = __importDefault(require(\"lodash/first\"));\n\nvar isEmpty_1 = __importDefault(require(\"lodash/isEmpty\"));\n\nvar compact_1 = __importDefault(require(\"lodash/compact\"));\n\nvar isArray_1 = __importDefault(require(\"lodash/isArray\"));\n\nvar values_1 = __importDefault(require(\"lodash/values\"));\n\nvar flatten_1 = __importDefault(require(\"lodash/flatten\"));\n\nvar reject_1 = __importDefault(require(\"lodash/reject\"));\n\nvar difference_1 = __importDefault(require(\"lodash/difference\"));\n\nvar indexOf_1 = __importDefault(require(\"lodash/indexOf\"));\n\nvar map_1 = __importDefault(require(\"lodash/map\"));\n\nvar forEach_1 = __importDefault(require(\"lodash/forEach\"));\n\nvar isString_1 = __importDefault(require(\"lodash/isString\"));\n\nvar isFunction_1 = __importDefault(require(\"lodash/isFunction\"));\n\nvar isUndefined_1 = __importDefault(require(\"lodash/isUndefined\"));\n\nvar find_1 = __importDefault(require(\"lodash/find\"));\n\nvar has_1 = __importDefault(require(\"lodash/has\"));\n\nvar keys_1 = __importDefault(require(\"lodash/keys\"));\n\nvar isRegExp_1 = __importDefault(require(\"lodash/isRegExp\"));\n\nvar filter_1 = __importDefault(require(\"lodash/filter\"));\n\nvar defaults_1 = __importDefault(require(\"lodash/defaults\"));\n\nvar reduce_1 = __importDefault(require(\"lodash/reduce\"));\n\nvar includes_1 = __importDefault(require(\"lodash/includes\"));\n\nvar utils_1 = require(\"@chevrotain/utils\");\n\nvar reg_exp_1 = require(\"./reg_exp\");\n\nvar reg_exp_parser_1 = require(\"./reg_exp_parser\");\n\nvar PATTERN = \"PATTERN\";\nexports.DEFAULT_MODE = \"defaultMode\";\nexports.MODES = \"modes\";\nexports.SUPPORT_STICKY = typeof new RegExp(\"(?:)\").sticky === \"boolean\";\n\nfunction disableSticky() {\n  exports.SUPPORT_STICKY = false;\n}\n\nexports.disableSticky = disableSticky;\n\nfunction enableSticky() {\n  exports.SUPPORT_STICKY = true;\n}\n\nexports.enableSticky = enableSticky;\n\nfunction analyzeTokenTypes(tokenTypes, options) {\n  options = (0, defaults_1.default)(options, {\n    useSticky: exports.SUPPORT_STICKY,\n    debug: false,\n    safeMode: false,\n    positionTracking: \"full\",\n    lineTerminatorCharacters: [\"\\r\", \"\\n\"],\n    tracer: function tracer(msg, action) {\n      return action();\n    }\n  });\n  var tracer = options.tracer;\n  tracer(\"initCharCodeToOptimizedIndexMap\", function () {\n    initCharCodeToOptimizedIndexMap();\n  });\n  var onlyRelevantTypes;\n  tracer(\"Reject Lexer.NA\", function () {\n    onlyRelevantTypes = (0, reject_1.default)(tokenTypes, function (currType) {\n      return currType[PATTERN] === lexer_public_1.Lexer.NA;\n    });\n  });\n  var hasCustom = false;\n  var allTransformedPatterns;\n  tracer(\"Transform Patterns\", function () {\n    hasCustom = false;\n    allTransformedPatterns = (0, map_1.default)(onlyRelevantTypes, function (currType) {\n      var currPattern = currType[PATTERN];\n      /* istanbul ignore else */\n\n      if ((0, isRegExp_1.default)(currPattern)) {\n        var regExpSource = currPattern.source;\n\n        if (regExpSource.length === 1 && // only these regExp meta characters which can appear in a length one regExp\n        regExpSource !== \"^\" && regExpSource !== \"$\" && regExpSource !== \".\" && !currPattern.ignoreCase) {\n          return regExpSource;\n        } else if (regExpSource.length === 2 && regExpSource[0] === \"\\\\\" && // not a meta character\n        !(0, includes_1.default)([\"d\", \"D\", \"s\", \"S\", \"t\", \"r\", \"n\", \"t\", \"0\", \"c\", \"b\", \"B\", \"f\", \"v\", \"w\", \"W\"], regExpSource[1])) {\n          // escaped meta Characters: /\\+/ /\\[/\n          // or redundant escaping: /\\a/\n          // without the escaping \"\\\"\n          return regExpSource[1];\n        } else {\n          return options.useSticky ? addStickyFlag(currPattern) : addStartOfInput(currPattern);\n        }\n      } else if ((0, isFunction_1.default)(currPattern)) {\n        hasCustom = true; // CustomPatternMatcherFunc - custom patterns do not require any transformations, only wrapping in a RegExp Like object\n\n        return {\n          exec: currPattern\n        };\n      } else if (typeof currPattern === \"object\") {\n        hasCustom = true; // ICustomPattern\n\n        return currPattern;\n      } else if (typeof currPattern === \"string\") {\n        if (currPattern.length === 1) {\n          return currPattern;\n        } else {\n          var escapedRegExpString = currPattern.replace(/[\\\\^$.*+?()[\\]{}|]/g, \"\\\\$&\");\n          var wrappedRegExp = new RegExp(escapedRegExpString);\n          return options.useSticky ? addStickyFlag(wrappedRegExp) : addStartOfInput(wrappedRegExp);\n        }\n      } else {\n        throw Error(\"non exhaustive match\");\n      }\n    });\n  });\n  var patternIdxToType;\n  var patternIdxToGroup;\n  var patternIdxToLongerAltIdxArr;\n  var patternIdxToPushMode;\n  var patternIdxToPopMode;\n  tracer(\"misc mapping\", function () {\n    patternIdxToType = (0, map_1.default)(onlyRelevantTypes, function (currType) {\n      return currType.tokenTypeIdx;\n    });\n    patternIdxToGroup = (0, map_1.default)(onlyRelevantTypes, function (clazz) {\n      var groupName = clazz.GROUP;\n      /* istanbul ignore next */\n\n      if (groupName === lexer_public_1.Lexer.SKIPPED) {\n        return undefined;\n      } else if ((0, isString_1.default)(groupName)) {\n        return groupName;\n      } else if ((0, isUndefined_1.default)(groupName)) {\n        return false;\n      } else {\n        throw Error(\"non exhaustive match\");\n      }\n    });\n    patternIdxToLongerAltIdxArr = (0, map_1.default)(onlyRelevantTypes, function (clazz) {\n      var longerAltType = clazz.LONGER_ALT;\n\n      if (longerAltType) {\n        var longerAltIdxArr = (0, isArray_1.default)(longerAltType) ? (0, map_1.default)(longerAltType, function (type) {\n          return (0, indexOf_1.default)(onlyRelevantTypes, type);\n        }) : [(0, indexOf_1.default)(onlyRelevantTypes, longerAltType)];\n        return longerAltIdxArr;\n      }\n    });\n    patternIdxToPushMode = (0, map_1.default)(onlyRelevantTypes, function (clazz) {\n      return clazz.PUSH_MODE;\n    });\n    patternIdxToPopMode = (0, map_1.default)(onlyRelevantTypes, function (clazz) {\n      return (0, has_1.default)(clazz, \"POP_MODE\");\n    });\n  });\n  var patternIdxToCanLineTerminator;\n  tracer(\"Line Terminator Handling\", function () {\n    var lineTerminatorCharCodes = getCharCodes(options.lineTerminatorCharacters);\n    patternIdxToCanLineTerminator = (0, map_1.default)(onlyRelevantTypes, function (tokType) {\n      return false;\n    });\n\n    if (options.positionTracking !== \"onlyOffset\") {\n      patternIdxToCanLineTerminator = (0, map_1.default)(onlyRelevantTypes, function (tokType) {\n        if ((0, has_1.default)(tokType, \"LINE_BREAKS\")) {\n          return !!tokType.LINE_BREAKS;\n        } else {\n          return checkLineBreaksIssues(tokType, lineTerminatorCharCodes) === false && (0, reg_exp_1.canMatchCharCode)(lineTerminatorCharCodes, tokType.PATTERN);\n        }\n      });\n    }\n  });\n  var patternIdxToIsCustom;\n  var patternIdxToShort;\n  var emptyGroups;\n  var patternIdxToConfig;\n  tracer(\"Misc Mapping #2\", function () {\n    patternIdxToIsCustom = (0, map_1.default)(onlyRelevantTypes, isCustomPattern);\n    patternIdxToShort = (0, map_1.default)(allTransformedPatterns, isShortPattern);\n    emptyGroups = (0, reduce_1.default)(onlyRelevantTypes, function (acc, clazz) {\n      var groupName = clazz.GROUP;\n\n      if ((0, isString_1.default)(groupName) && !(groupName === lexer_public_1.Lexer.SKIPPED)) {\n        acc[groupName] = [];\n      }\n\n      return acc;\n    }, {});\n    patternIdxToConfig = (0, map_1.default)(allTransformedPatterns, function (x, idx) {\n      return {\n        pattern: allTransformedPatterns[idx],\n        longerAlt: patternIdxToLongerAltIdxArr[idx],\n        canLineTerminator: patternIdxToCanLineTerminator[idx],\n        isCustom: patternIdxToIsCustom[idx],\n        short: patternIdxToShort[idx],\n        group: patternIdxToGroup[idx],\n        push: patternIdxToPushMode[idx],\n        pop: patternIdxToPopMode[idx],\n        tokenTypeIdx: patternIdxToType[idx],\n        tokenType: onlyRelevantTypes[idx]\n      };\n    });\n  });\n  var canBeOptimized = true;\n  var charCodeToPatternIdxToConfig = [];\n\n  if (!options.safeMode) {\n    tracer(\"First Char Optimization\", function () {\n      charCodeToPatternIdxToConfig = (0, reduce_1.default)(onlyRelevantTypes, function (result, currTokType, idx) {\n        if (typeof currTokType.PATTERN === \"string\") {\n          var charCode = currTokType.PATTERN.charCodeAt(0);\n          var optimizedIdx = charCodeToOptimizedIndex(charCode);\n          addToMapOfArrays(result, optimizedIdx, patternIdxToConfig[idx]);\n        } else if ((0, isArray_1.default)(currTokType.START_CHARS_HINT)) {\n          var lastOptimizedIdx_1;\n          (0, forEach_1.default)(currTokType.START_CHARS_HINT, function (charOrInt) {\n            var charCode = typeof charOrInt === \"string\" ? charOrInt.charCodeAt(0) : charOrInt;\n            var currOptimizedIdx = charCodeToOptimizedIndex(charCode); // Avoid adding the config multiple times\n\n            /* istanbul ignore else */\n            // - Difficult to check this scenario effects as it is only a performance\n            //   optimization that does not change correctness\n\n            if (lastOptimizedIdx_1 !== currOptimizedIdx) {\n              lastOptimizedIdx_1 = currOptimizedIdx;\n              addToMapOfArrays(result, currOptimizedIdx, patternIdxToConfig[idx]);\n            }\n          });\n        } else if ((0, isRegExp_1.default)(currTokType.PATTERN)) {\n          if (currTokType.PATTERN.unicode) {\n            canBeOptimized = false;\n\n            if (options.ensureOptimizations) {\n              (0, utils_1.PRINT_ERROR)(\"\".concat(reg_exp_1.failedOptimizationPrefixMsg) + \"\\tUnable to analyze < \".concat(currTokType.PATTERN.toString(), \" > pattern.\\n\") + \"\\tThe regexp unicode flag is not currently supported by the regexp-to-ast library.\\n\" + \"\\tThis will disable the lexer's first char optimizations.\\n\" + \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#UNICODE_OPTIMIZE\");\n            }\n          } else {\n            var optimizedCodes = (0, reg_exp_1.getOptimizedStartCodesIndices)(currTokType.PATTERN, options.ensureOptimizations);\n            /* istanbul ignore if */\n            // start code will only be empty given an empty regExp or failure of regexp-to-ast library\n            // the first should be a different validation and the second cannot be tested.\n\n            if ((0, isEmpty_1.default)(optimizedCodes)) {\n              // we cannot understand what codes may start possible matches\n              // The optimization correctness requires knowing start codes for ALL patterns.\n              // Not actually sure this is an error, no debug message\n              canBeOptimized = false;\n            }\n\n            (0, forEach_1.default)(optimizedCodes, function (code) {\n              addToMapOfArrays(result, code, patternIdxToConfig[idx]);\n            });\n          }\n        } else {\n          if (options.ensureOptimizations) {\n            (0, utils_1.PRINT_ERROR)(\"\".concat(reg_exp_1.failedOptimizationPrefixMsg) + \"\\tTokenType: <\".concat(currTokType.name, \"> is using a custom token pattern without providing <start_chars_hint> parameter.\\n\") + \"\\tThis will disable the lexer's first char optimizations.\\n\" + \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#CUSTOM_OPTIMIZE\");\n          }\n\n          canBeOptimized = false;\n        }\n\n        return result;\n      }, []);\n    });\n  }\n\n  return {\n    emptyGroups: emptyGroups,\n    patternIdxToConfig: patternIdxToConfig,\n    charCodeToPatternIdxToConfig: charCodeToPatternIdxToConfig,\n    hasCustom: hasCustom,\n    canBeOptimized: canBeOptimized\n  };\n}\n\nexports.analyzeTokenTypes = analyzeTokenTypes;\n\nfunction validatePatterns(tokenTypes, validModesNames) {\n  var errors = [];\n  var missingResult = findMissingPatterns(tokenTypes);\n  errors = errors.concat(missingResult.errors);\n  var invalidResult = findInvalidPatterns(missingResult.valid);\n  var validTokenTypes = invalidResult.valid;\n  errors = errors.concat(invalidResult.errors);\n  errors = errors.concat(validateRegExpPattern(validTokenTypes));\n  errors = errors.concat(findInvalidGroupType(validTokenTypes));\n  errors = errors.concat(findModesThatDoNotExist(validTokenTypes, validModesNames));\n  errors = errors.concat(findUnreachablePatterns(validTokenTypes));\n  return errors;\n}\n\nexports.validatePatterns = validatePatterns;\n\nfunction validateRegExpPattern(tokenTypes) {\n  var errors = [];\n  var withRegExpPatterns = (0, filter_1.default)(tokenTypes, function (currTokType) {\n    return (0, isRegExp_1.default)(currTokType[PATTERN]);\n  });\n  errors = errors.concat(findEndOfInputAnchor(withRegExpPatterns));\n  errors = errors.concat(findStartOfInputAnchor(withRegExpPatterns));\n  errors = errors.concat(findUnsupportedFlags(withRegExpPatterns));\n  errors = errors.concat(findDuplicatePatterns(withRegExpPatterns));\n  errors = errors.concat(findEmptyMatchRegExps(withRegExpPatterns));\n  return errors;\n}\n\nfunction findMissingPatterns(tokenTypes) {\n  var tokenTypesWithMissingPattern = (0, filter_1.default)(tokenTypes, function (currType) {\n    return !(0, has_1.default)(currType, PATTERN);\n  });\n  var errors = (0, map_1.default)(tokenTypesWithMissingPattern, function (currType) {\n    return {\n      message: \"Token Type: ->\" + currType.name + \"<- missing static 'PATTERN' property\",\n      type: lexer_public_1.LexerDefinitionErrorType.MISSING_PATTERN,\n      tokenTypes: [currType]\n    };\n  });\n  var valid = (0, difference_1.default)(tokenTypes, tokenTypesWithMissingPattern);\n  return {\n    errors: errors,\n    valid: valid\n  };\n}\n\nexports.findMissingPatterns = findMissingPatterns;\n\nfunction findInvalidPatterns(tokenTypes) {\n  var tokenTypesWithInvalidPattern = (0, filter_1.default)(tokenTypes, function (currType) {\n    var pattern = currType[PATTERN];\n    return !(0, isRegExp_1.default)(pattern) && !(0, isFunction_1.default)(pattern) && !(0, has_1.default)(pattern, \"exec\") && !(0, isString_1.default)(pattern);\n  });\n  var errors = (0, map_1.default)(tokenTypesWithInvalidPattern, function (currType) {\n    return {\n      message: \"Token Type: ->\" + currType.name + \"<- static 'PATTERN' can only be a RegExp, a\" + \" Function matching the {CustomPatternMatcherFunc} type or an Object matching the {ICustomPattern} interface.\",\n      type: lexer_public_1.LexerDefinitionErrorType.INVALID_PATTERN,\n      tokenTypes: [currType]\n    };\n  });\n  var valid = (0, difference_1.default)(tokenTypes, tokenTypesWithInvalidPattern);\n  return {\n    errors: errors,\n    valid: valid\n  };\n}\n\nexports.findInvalidPatterns = findInvalidPatterns;\nvar end_of_input = /[^\\\\][$]/;\n\nfunction findEndOfInputAnchor(tokenTypes) {\n  var EndAnchorFinder =\n  /** @class */\n  function (_super) {\n    __extends(EndAnchorFinder, _super);\n\n    function EndAnchorFinder() {\n      var _this = _super !== null && _super.apply(this, arguments) || this;\n\n      _this.found = false;\n      return _this;\n    }\n\n    EndAnchorFinder.prototype.visitEndAnchor = function (node) {\n      this.found = true;\n    };\n\n    return EndAnchorFinder;\n  }(regexp_to_ast_1.BaseRegExpVisitor);\n\n  var invalidRegex = (0, filter_1.default)(tokenTypes, function (currType) {\n    var pattern = currType.PATTERN;\n\n    try {\n      var regexpAst = (0, reg_exp_parser_1.getRegExpAst)(pattern);\n      var endAnchorVisitor = new EndAnchorFinder();\n      endAnchorVisitor.visit(regexpAst);\n      return endAnchorVisitor.found;\n    } catch (e) {\n      // old behavior in case of runtime exceptions with regexp-to-ast.\n\n      /* istanbul ignore next - cannot ensure an error in regexp-to-ast*/\n      return end_of_input.test(pattern.source);\n    }\n  });\n  var errors = (0, map_1.default)(invalidRegex, function (currType) {\n    return {\n      message: \"Unexpected RegExp Anchor Error:\\n\" + \"\\tToken Type: ->\" + currType.name + \"<- static 'PATTERN' cannot contain end of input anchor '$'\\n\" + \"\\tSee chevrotain.io/docs/guide/resolving_lexer_errors.html#ANCHORS\" + \"\\tfor details.\",\n      type: lexer_public_1.LexerDefinitionErrorType.EOI_ANCHOR_FOUND,\n      tokenTypes: [currType]\n    };\n  });\n  return errors;\n}\n\nexports.findEndOfInputAnchor = findEndOfInputAnchor;\n\nfunction findEmptyMatchRegExps(tokenTypes) {\n  var matchesEmptyString = (0, filter_1.default)(tokenTypes, function (currType) {\n    var pattern = currType.PATTERN;\n    return pattern.test(\"\");\n  });\n  var errors = (0, map_1.default)(matchesEmptyString, function (currType) {\n    return {\n      message: \"Token Type: ->\" + currType.name + \"<- static 'PATTERN' must not match an empty string\",\n      type: lexer_public_1.LexerDefinitionErrorType.EMPTY_MATCH_PATTERN,\n      tokenTypes: [currType]\n    };\n  });\n  return errors;\n}\n\nexports.findEmptyMatchRegExps = findEmptyMatchRegExps;\nvar start_of_input = /[^\\\\[][\\^]|^\\^/;\n\nfunction findStartOfInputAnchor(tokenTypes) {\n  var StartAnchorFinder =\n  /** @class */\n  function (_super) {\n    __extends(StartAnchorFinder, _super);\n\n    function StartAnchorFinder() {\n      var _this = _super !== null && _super.apply(this, arguments) || this;\n\n      _this.found = false;\n      return _this;\n    }\n\n    StartAnchorFinder.prototype.visitStartAnchor = function (node) {\n      this.found = true;\n    };\n\n    return StartAnchorFinder;\n  }(regexp_to_ast_1.BaseRegExpVisitor);\n\n  var invalidRegex = (0, filter_1.default)(tokenTypes, function (currType) {\n    var pattern = currType.PATTERN;\n\n    try {\n      var regexpAst = (0, reg_exp_parser_1.getRegExpAst)(pattern);\n      var startAnchorVisitor = new StartAnchorFinder();\n      startAnchorVisitor.visit(regexpAst);\n      return startAnchorVisitor.found;\n    } catch (e) {\n      // old behavior in case of runtime exceptions with regexp-to-ast.\n\n      /* istanbul ignore next - cannot ensure an error in regexp-to-ast*/\n      return start_of_input.test(pattern.source);\n    }\n  });\n  var errors = (0, map_1.default)(invalidRegex, function (currType) {\n    return {\n      message: \"Unexpected RegExp Anchor Error:\\n\" + \"\\tToken Type: ->\" + currType.name + \"<- static 'PATTERN' cannot contain start of input anchor '^'\\n\" + \"\\tSee https://chevrotain.io/docs/guide/resolving_lexer_errors.html#ANCHORS\" + \"\\tfor details.\",\n      type: lexer_public_1.LexerDefinitionErrorType.SOI_ANCHOR_FOUND,\n      tokenTypes: [currType]\n    };\n  });\n  return errors;\n}\n\nexports.findStartOfInputAnchor = findStartOfInputAnchor;\n\nfunction findUnsupportedFlags(tokenTypes) {\n  var invalidFlags = (0, filter_1.default)(tokenTypes, function (currType) {\n    var pattern = currType[PATTERN];\n    return pattern instanceof RegExp && (pattern.multiline || pattern.global);\n  });\n  var errors = (0, map_1.default)(invalidFlags, function (currType) {\n    return {\n      message: \"Token Type: ->\" + currType.name + \"<- static 'PATTERN' may NOT contain global('g') or multiline('m')\",\n      type: lexer_public_1.LexerDefinitionErrorType.UNSUPPORTED_FLAGS_FOUND,\n      tokenTypes: [currType]\n    };\n  });\n  return errors;\n}\n\nexports.findUnsupportedFlags = findUnsupportedFlags; // This can only test for identical duplicate RegExps, not semantically equivalent ones.\n\nfunction findDuplicatePatterns(tokenTypes) {\n  var found = [];\n  var identicalPatterns = (0, map_1.default)(tokenTypes, function (outerType) {\n    return (0, reduce_1.default)(tokenTypes, function (result, innerType) {\n      if (outerType.PATTERN.source === innerType.PATTERN.source && !(0, includes_1.default)(found, innerType) && innerType.PATTERN !== lexer_public_1.Lexer.NA) {\n        // this avoids duplicates in the result, each Token Type may only appear in one \"set\"\n        // in essence we are creating Equivalence classes on equality relation.\n        found.push(innerType);\n        result.push(innerType);\n        return result;\n      }\n\n      return result;\n    }, []);\n  });\n  identicalPatterns = (0, compact_1.default)(identicalPatterns);\n  var duplicatePatterns = (0, filter_1.default)(identicalPatterns, function (currIdenticalSet) {\n    return currIdenticalSet.length > 1;\n  });\n  var errors = (0, map_1.default)(duplicatePatterns, function (setOfIdentical) {\n    var tokenTypeNames = (0, map_1.default)(setOfIdentical, function (currType) {\n      return currType.name;\n    });\n    var dupPatternSrc = (0, first_1.default)(setOfIdentical).PATTERN;\n    return {\n      message: \"The same RegExp pattern ->\".concat(dupPatternSrc, \"<-\") + \"has been used in all of the following Token Types: \".concat(tokenTypeNames.join(\", \"), \" <-\"),\n      type: lexer_public_1.LexerDefinitionErrorType.DUPLICATE_PATTERNS_FOUND,\n      tokenTypes: setOfIdentical\n    };\n  });\n  return errors;\n}\n\nexports.findDuplicatePatterns = findDuplicatePatterns;\n\nfunction findInvalidGroupType(tokenTypes) {\n  var invalidTypes = (0, filter_1.default)(tokenTypes, function (clazz) {\n    if (!(0, has_1.default)(clazz, \"GROUP\")) {\n      return false;\n    }\n\n    var group = clazz.GROUP;\n    return group !== lexer_public_1.Lexer.SKIPPED && group !== lexer_public_1.Lexer.NA && !(0, isString_1.default)(group);\n  });\n  var errors = (0, map_1.default)(invalidTypes, function (currType) {\n    return {\n      message: \"Token Type: ->\" + currType.name + \"<- static 'GROUP' can only be Lexer.SKIPPED/Lexer.NA/A String\",\n      type: lexer_public_1.LexerDefinitionErrorType.INVALID_GROUP_TYPE_FOUND,\n      tokenTypes: [currType]\n    };\n  });\n  return errors;\n}\n\nexports.findInvalidGroupType = findInvalidGroupType;\n\nfunction findModesThatDoNotExist(tokenTypes, validModes) {\n  var invalidModes = (0, filter_1.default)(tokenTypes, function (clazz) {\n    return clazz.PUSH_MODE !== undefined && !(0, includes_1.default)(validModes, clazz.PUSH_MODE);\n  });\n  var errors = (0, map_1.default)(invalidModes, function (tokType) {\n    var msg = \"Token Type: ->\".concat(tokType.name, \"<- static 'PUSH_MODE' value cannot refer to a Lexer Mode ->\").concat(tokType.PUSH_MODE, \"<-\") + \"which does not exist\";\n    return {\n      message: msg,\n      type: lexer_public_1.LexerDefinitionErrorType.PUSH_MODE_DOES_NOT_EXIST,\n      tokenTypes: [tokType]\n    };\n  });\n  return errors;\n}\n\nexports.findModesThatDoNotExist = findModesThatDoNotExist;\n\nfunction findUnreachablePatterns(tokenTypes) {\n  var errors = [];\n  var canBeTested = (0, reduce_1.default)(tokenTypes, function (result, tokType, idx) {\n    var pattern = tokType.PATTERN;\n\n    if (pattern === lexer_public_1.Lexer.NA) {\n      return result;\n    } // a more comprehensive validation for all forms of regExps would require\n    // deeper regExp analysis capabilities\n\n\n    if ((0, isString_1.default)(pattern)) {\n      result.push({\n        str: pattern,\n        idx: idx,\n        tokenType: tokType\n      });\n    } else if ((0, isRegExp_1.default)(pattern) && noMetaChar(pattern)) {\n      result.push({\n        str: pattern.source,\n        idx: idx,\n        tokenType: tokType\n      });\n    }\n\n    return result;\n  }, []);\n  (0, forEach_1.default)(tokenTypes, function (tokType, testIdx) {\n    (0, forEach_1.default)(canBeTested, function (_a) {\n      var str = _a.str,\n          idx = _a.idx,\n          tokenType = _a.tokenType;\n\n      if (testIdx < idx && testTokenType(str, tokType.PATTERN)) {\n        var msg = \"Token: ->\".concat(tokenType.name, \"<- can never be matched.\\n\") + \"Because it appears AFTER the Token Type ->\".concat(tokType.name, \"<-\") + \"in the lexer's definition.\\n\" + \"See https://chevrotain.io/docs/guide/resolving_lexer_errors.html#UNREACHABLE\";\n        errors.push({\n          message: msg,\n          type: lexer_public_1.LexerDefinitionErrorType.UNREACHABLE_PATTERN,\n          tokenTypes: [tokType, tokenType]\n        });\n      }\n    });\n  });\n  return errors;\n}\n\nexports.findUnreachablePatterns = findUnreachablePatterns;\n\nfunction testTokenType(str, pattern) {\n  /* istanbul ignore else */\n  if ((0, isRegExp_1.default)(pattern)) {\n    var regExpArray = pattern.exec(str);\n    return regExpArray !== null && regExpArray.index === 0;\n  } else if ((0, isFunction_1.default)(pattern)) {\n    // maintain the API of custom patterns\n    return pattern(str, 0, [], {});\n  } else if ((0, has_1.default)(pattern, \"exec\")) {\n    // maintain the API of custom patterns\n    return pattern.exec(str, 0, [], {});\n  } else if (typeof pattern === \"string\") {\n    return pattern === str;\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n\nfunction noMetaChar(regExp) {\n  //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\n  var metaChars = [\".\", \"\\\\\", \"[\", \"]\", \"|\", \"^\", \"$\", \"(\", \")\", \"?\", \"*\", \"+\", \"{\"];\n  return (0, find_1.default)(metaChars, function (char) {\n    return regExp.source.indexOf(char) !== -1;\n  }) === undefined;\n}\n\nfunction addStartOfInput(pattern) {\n  var flags = pattern.ignoreCase ? \"i\" : \"\"; // always wrapping in a none capturing group preceded by '^' to make sure matching can only work on start of input.\n  // duplicate/redundant start of input markers have no meaning (/^^^^A/ === /^A/)\n\n  return new RegExp(\"^(?:\".concat(pattern.source, \")\"), flags);\n}\n\nexports.addStartOfInput = addStartOfInput;\n\nfunction addStickyFlag(pattern) {\n  var flags = pattern.ignoreCase ? \"iy\" : \"y\"; // always wrapping in a none capturing group preceded by '^' to make sure matching can only work on start of input.\n  // duplicate/redundant start of input markers have no meaning (/^^^^A/ === /^A/)\n\n  return new RegExp(\"\".concat(pattern.source), flags);\n}\n\nexports.addStickyFlag = addStickyFlag;\n\nfunction performRuntimeChecks(lexerDefinition, trackLines, lineTerminatorCharacters) {\n  var errors = []; // some run time checks to help the end users.\n\n  if (!(0, has_1.default)(lexerDefinition, exports.DEFAULT_MODE)) {\n    errors.push({\n      message: \"A MultiMode Lexer cannot be initialized without a <\" + exports.DEFAULT_MODE + \"> property in its definition\\n\",\n      type: lexer_public_1.LexerDefinitionErrorType.MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE\n    });\n  }\n\n  if (!(0, has_1.default)(lexerDefinition, exports.MODES)) {\n    errors.push({\n      message: \"A MultiMode Lexer cannot be initialized without a <\" + exports.MODES + \"> property in its definition\\n\",\n      type: lexer_public_1.LexerDefinitionErrorType.MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY\n    });\n  }\n\n  if ((0, has_1.default)(lexerDefinition, exports.MODES) && (0, has_1.default)(lexerDefinition, exports.DEFAULT_MODE) && !(0, has_1.default)(lexerDefinition.modes, lexerDefinition.defaultMode)) {\n    errors.push({\n      message: \"A MultiMode Lexer cannot be initialized with a \".concat(exports.DEFAULT_MODE, \": <\").concat(lexerDefinition.defaultMode, \">\") + \"which does not exist\\n\",\n      type: lexer_public_1.LexerDefinitionErrorType.MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST\n    });\n  }\n\n  if ((0, has_1.default)(lexerDefinition, exports.MODES)) {\n    (0, forEach_1.default)(lexerDefinition.modes, function (currModeValue, currModeName) {\n      (0, forEach_1.default)(currModeValue, function (currTokType, currIdx) {\n        if ((0, isUndefined_1.default)(currTokType)) {\n          errors.push({\n            message: \"A Lexer cannot be initialized using an undefined Token Type. Mode:\" + \"<\".concat(currModeName, \"> at index: <\").concat(currIdx, \">\\n\"),\n            type: lexer_public_1.LexerDefinitionErrorType.LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED\n          });\n        }\n      });\n    });\n  }\n\n  return errors;\n}\n\nexports.performRuntimeChecks = performRuntimeChecks;\n\nfunction performWarningRuntimeChecks(lexerDefinition, trackLines, lineTerminatorCharacters) {\n  var warnings = [];\n  var hasAnyLineBreak = false;\n  var allTokenTypes = (0, compact_1.default)((0, flatten_1.default)((0, values_1.default)(lexerDefinition.modes)));\n  var concreteTokenTypes = (0, reject_1.default)(allTokenTypes, function (currType) {\n    return currType[PATTERN] === lexer_public_1.Lexer.NA;\n  });\n  var terminatorCharCodes = getCharCodes(lineTerminatorCharacters);\n\n  if (trackLines) {\n    (0, forEach_1.default)(concreteTokenTypes, function (tokType) {\n      var currIssue = checkLineBreaksIssues(tokType, terminatorCharCodes);\n\n      if (currIssue !== false) {\n        var message = buildLineBreakIssueMessage(tokType, currIssue);\n        var warningDescriptor = {\n          message: message,\n          type: currIssue.issue,\n          tokenType: tokType\n        };\n        warnings.push(warningDescriptor);\n      } else {\n        // we don't want to attempt to scan if the user explicitly specified the line_breaks option.\n        if ((0, has_1.default)(tokType, \"LINE_BREAKS\")) {\n          if (tokType.LINE_BREAKS === true) {\n            hasAnyLineBreak = true;\n          }\n        } else {\n          if ((0, reg_exp_1.canMatchCharCode)(terminatorCharCodes, tokType.PATTERN)) {\n            hasAnyLineBreak = true;\n          }\n        }\n      }\n    });\n  }\n\n  if (trackLines && !hasAnyLineBreak) {\n    warnings.push({\n      message: \"Warning: No LINE_BREAKS Found.\\n\" + \"\\tThis Lexer has been defined to track line and column information,\\n\" + \"\\tBut none of the Token Types can be identified as matching a line terminator.\\n\" + \"\\tSee https://chevrotain.io/docs/guide/resolving_lexer_errors.html#LINE_BREAKS \\n\" + \"\\tfor details.\",\n      type: lexer_public_1.LexerDefinitionErrorType.NO_LINE_BREAKS_FLAGS\n    });\n  }\n\n  return warnings;\n}\n\nexports.performWarningRuntimeChecks = performWarningRuntimeChecks;\n\nfunction cloneEmptyGroups(emptyGroups) {\n  var clonedResult = {};\n  var groupKeys = (0, keys_1.default)(emptyGroups);\n  (0, forEach_1.default)(groupKeys, function (currKey) {\n    var currGroupValue = emptyGroups[currKey];\n    /* istanbul ignore else */\n\n    if ((0, isArray_1.default)(currGroupValue)) {\n      clonedResult[currKey] = [];\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n  });\n  return clonedResult;\n}\n\nexports.cloneEmptyGroups = cloneEmptyGroups; // TODO: refactor to avoid duplication\n\nfunction isCustomPattern(tokenType) {\n  var pattern = tokenType.PATTERN;\n  /* istanbul ignore else */\n\n  if ((0, isRegExp_1.default)(pattern)) {\n    return false;\n  } else if ((0, isFunction_1.default)(pattern)) {\n    // CustomPatternMatcherFunc - custom patterns do not require any transformations, only wrapping in a RegExp Like object\n    return true;\n  } else if ((0, has_1.default)(pattern, \"exec\")) {\n    // ICustomPattern\n    return true;\n  } else if ((0, isString_1.default)(pattern)) {\n    return false;\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n\nexports.isCustomPattern = isCustomPattern;\n\nfunction isShortPattern(pattern) {\n  if ((0, isString_1.default)(pattern) && pattern.length === 1) {\n    return pattern.charCodeAt(0);\n  } else {\n    return false;\n  }\n}\n\nexports.isShortPattern = isShortPattern;\n/**\n * Faster than using a RegExp for default newline detection during lexing.\n */\n\nexports.LineTerminatorOptimizedTester = {\n  // implements /\\n|\\r\\n?/g.test\n  test: function test(text) {\n    var len = text.length;\n\n    for (var i = this.lastIndex; i < len; i++) {\n      var c = text.charCodeAt(i);\n\n      if (c === 10) {\n        this.lastIndex = i + 1;\n        return true;\n      } else if (c === 13) {\n        if (text.charCodeAt(i + 1) === 10) {\n          this.lastIndex = i + 2;\n        } else {\n          this.lastIndex = i + 1;\n        }\n\n        return true;\n      }\n    }\n\n    return false;\n  },\n  lastIndex: 0\n};\n\nfunction checkLineBreaksIssues(tokType, lineTerminatorCharCodes) {\n  if ((0, has_1.default)(tokType, \"LINE_BREAKS\")) {\n    // if the user explicitly declared the line_breaks option we will respect their choice\n    // and assume it is correct.\n    return false;\n  } else {\n    /* istanbul ignore else */\n    if ((0, isRegExp_1.default)(tokType.PATTERN)) {\n      try {\n        // TODO: why is the casting suddenly needed?\n        (0, reg_exp_1.canMatchCharCode)(lineTerminatorCharCodes, tokType.PATTERN);\n      } catch (e) {\n        /* istanbul ignore next - to test this we would have to mock <canMatchCharCode> to throw an error */\n        return {\n          issue: lexer_public_1.LexerDefinitionErrorType.IDENTIFY_TERMINATOR,\n          errMsg: e.message\n        };\n      }\n\n      return false;\n    } else if ((0, isString_1.default)(tokType.PATTERN)) {\n      // string literal patterns can always be analyzed to detect line terminator usage\n      return false;\n    } else if (isCustomPattern(tokType)) {\n      // custom token types\n      return {\n        issue: lexer_public_1.LexerDefinitionErrorType.CUSTOM_LINE_BREAK\n      };\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n  }\n}\n\nfunction buildLineBreakIssueMessage(tokType, details) {\n  /* istanbul ignore else */\n  if (details.issue === lexer_public_1.LexerDefinitionErrorType.IDENTIFY_TERMINATOR) {\n    return \"Warning: unable to identify line terminator usage in pattern.\\n\" + \"\\tThe problem is in the <\".concat(tokType.name, \"> Token Type\\n\") + \"\\t Root cause: \".concat(details.errMsg, \".\\n\") + \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#IDENTIFY_TERMINATOR\";\n  } else if (details.issue === lexer_public_1.LexerDefinitionErrorType.CUSTOM_LINE_BREAK) {\n    return \"Warning: A Custom Token Pattern should specify the <line_breaks> option.\\n\" + \"\\tThe problem is in the <\".concat(tokType.name, \"> Token Type\\n\") + \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#CUSTOM_LINE_BREAK\";\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n\nexports.buildLineBreakIssueMessage = buildLineBreakIssueMessage;\n\nfunction getCharCodes(charsOrCodes) {\n  var charCodes = (0, map_1.default)(charsOrCodes, function (numOrString) {\n    if ((0, isString_1.default)(numOrString)) {\n      return numOrString.charCodeAt(0);\n    } else {\n      return numOrString;\n    }\n  });\n  return charCodes;\n}\n\nfunction addToMapOfArrays(map, key, value) {\n  if (map[key] === undefined) {\n    map[key] = [value];\n  } else {\n    map[key].push(value);\n  }\n}\n\nexports.minOptimizationVal = 256;\n/**\n * We are mapping charCode above ASCI (256) into buckets each in the size of 256.\n * This is because ASCI are the most common start chars so each one of those will get its own\n * possible token configs vector.\n *\n * Tokens starting with charCodes \"above\" ASCI are uncommon, so we can \"afford\"\n * to place these into buckets of possible token configs, What we gain from\n * this is avoiding the case of creating an optimization 'charCodeToPatternIdxToConfig'\n * which would contain 10,000+ arrays of small size (e.g unicode Identifiers scenario).\n * Our 'charCodeToPatternIdxToConfig' max size will now be:\n * 256 + (2^16 / 2^8) - 1 === 511\n *\n * note the hack for fast division integer part extraction\n * See: https://stackoverflow.com/a/4228528\n */\n\nvar charCodeToOptimizedIdxMap = [];\n\nfunction charCodeToOptimizedIndex(charCode) {\n  return charCode < exports.minOptimizationVal ? charCode : charCodeToOptimizedIdxMap[charCode];\n}\n\nexports.charCodeToOptimizedIndex = charCodeToOptimizedIndex;\n/**\n * This is a compromise between cold start / hot running performance\n * Creating this array takes ~3ms on a modern machine,\n * But if we perform the computation at runtime as needed the CSS Lexer benchmark\n * performance degrades by ~10%\n *\n * TODO: Perhaps it should be lazy initialized only if a charCode > 255 is used.\n */\n\nfunction initCharCodeToOptimizedIndexMap() {\n  if ((0, isEmpty_1.default)(charCodeToOptimizedIdxMap)) {\n    charCodeToOptimizedIdxMap = new Array(65536);\n\n    for (var i = 0; i < 65536; i++) {\n      charCodeToOptimizedIdxMap[i] = i > 255 ? 255 + ~~(i / 255) : i;\n    }\n  }\n}","map":{"version":3,"mappings":"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","names":["PATTERN","exports","RegExp","sticky","disableSticky","enableSticky","analyzeTokenTypes","tokenTypes","options","useSticky","debug","safeMode","positionTracking","lineTerminatorCharacters","tracer","msg","action","initCharCodeToOptimizedIndexMap","onlyRelevantTypes","currType","lexer_public_1","NA","hasCustom","allTransformedPatterns","currPattern","regExpSource","source","length","ignoreCase","addStickyFlag","addStartOfInput","exec","escapedRegExpString","replace","wrappedRegExp","Error","patternIdxToType","patternIdxToGroup","patternIdxToLongerAltIdxArr","patternIdxToPushMode","patternIdxToPopMode","tokenTypeIdx","clazz","groupName","GROUP","SKIPPED","undefined","longerAltType","LONGER_ALT","longerAltIdxArr","type","PUSH_MODE","patternIdxToCanLineTerminator","lineTerminatorCharCodes","getCharCodes","tokType","LINE_BREAKS","checkLineBreaksIssues","patternIdxToIsCustom","patternIdxToShort","emptyGroups","patternIdxToConfig","isCustomPattern","isShortPattern","acc","x","idx","pattern","longerAlt","canLineTerminator","isCustom","short","group","push","pop","tokenType","canBeOptimized","charCodeToPatternIdxToConfig","result","currTokType","charCode","charCodeAt","optimizedIdx","charCodeToOptimizedIndex","addToMapOfArrays","START_CHARS_HINT","lastOptimizedIdx_1","charOrInt","currOptimizedIdx","unicode","ensureOptimizations","reg_exp_1","toString","optimizedCodes","code","name","validatePatterns","validModesNames","errors","missingResult","findMissingPatterns","concat","invalidResult","findInvalidPatterns","valid","validTokenTypes","validateRegExpPattern","findInvalidGroupType","findModesThatDoNotExist","findUnreachablePatterns","withRegExpPatterns","findEndOfInputAnchor","findStartOfInputAnchor","findUnsupportedFlags","findDuplicatePatterns","findEmptyMatchRegExps","tokenTypesWithMissingPattern","message","MISSING_PATTERN","tokenTypesWithInvalidPattern","INVALID_PATTERN","end_of_input","__extends","_this","EndAnchorFinder","node","found","regexp_to_ast_1","invalidRegex","regexpAst","endAnchorVisitor","visit","e","test","EOI_ANCHOR_FOUND","matchesEmptyString","EMPTY_MATCH_PATTERN","start_of_input","StartAnchorFinder","startAnchorVisitor","SOI_ANCHOR_FOUND","invalidFlags","multiline","global","UNSUPPORTED_FLAGS_FOUND","identicalPatterns","outerType","innerType","duplicatePatterns","currIdenticalSet","setOfIdentical","tokenTypeNames","dupPatternSrc","join","DUPLICATE_PATTERNS_FOUND","invalidTypes","INVALID_GROUP_TYPE_FOUND","validModes","invalidModes","PUSH_MODE_DOES_NOT_EXIST","canBeTested","str","noMetaChar","testIdx","_a","testTokenType","UNREACHABLE_PATTERN","regExpArray","index","regExp","metaChars","char","indexOf","flags","performRuntimeChecks","lexerDefinition","trackLines","MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE","MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY","modes","defaultMode","MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST","currModeValue","currModeName","currIdx","LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED","performWarningRuntimeChecks","warnings","hasAnyLineBreak","allTokenTypes","concreteTokenTypes","terminatorCharCodes","currIssue","buildLineBreakIssueMessage","warningDescriptor","issue","NO_LINE_BREAKS_FLAGS","cloneEmptyGroups","clonedResult","groupKeys","currKey","currGroupValue","text","len","i","lastIndex","c","IDENTIFY_TERMINATOR","errMsg","CUSTOM_LINE_BREAK","details","charsOrCodes","charCodes","numOrString","map","key","value","charCodeToOptimizedIdxMap","Array"],"sources":["D:\\Jord\\l4fycy\\node_modules\\chevrotain\\src\\scan\\lexer.ts"],"sourcesContent":["import { BaseRegExpVisitor } from \"regexp-to-ast\"\nimport { IRegExpExec, Lexer, LexerDefinitionErrorType } from \"./lexer_public\"\nimport first from \"lodash/first\"\nimport isEmpty from \"lodash/isEmpty\"\nimport compact from \"lodash/compact\"\nimport isArray from \"lodash/isArray\"\nimport values from \"lodash/values\"\nimport flatten from \"lodash/flatten\"\nimport reject from \"lodash/reject\"\nimport difference from \"lodash/difference\"\nimport indexOf from \"lodash/indexOf\"\nimport map from \"lodash/map\"\nimport forEach from \"lodash/forEach\"\nimport isString from \"lodash/isString\"\nimport isFunction from \"lodash/isFunction\"\nimport isUndefined from \"lodash/isUndefined\"\nimport find from \"lodash/find\"\nimport has from \"lodash/has\"\nimport keys from \"lodash/keys\"\nimport isRegExp from \"lodash/isRegExp\"\nimport filter from \"lodash/filter\"\nimport defaults from \"lodash/defaults\"\nimport reduce from \"lodash/reduce\"\nimport includes from \"lodash/includes\"\nimport { PRINT_ERROR } from \"@chevrotain/utils\"\nimport {\n  canMatchCharCode,\n  failedOptimizationPrefixMsg,\n  getOptimizedStartCodesIndices\n} from \"./reg_exp\"\nimport {\n  ILexerDefinitionError,\n  ILineTerminatorsTester,\n  IMultiModeLexerDefinition,\n  IToken,\n  TokenType\n} from \"@chevrotain/types\"\nimport { getRegExpAst } from \"./reg_exp_parser\"\n\nconst PATTERN = \"PATTERN\"\nexport const DEFAULT_MODE = \"defaultMode\"\nexport const MODES = \"modes\"\n\nexport interface IPatternConfig {\n  pattern: IRegExpExec | string\n  longerAlt: number[] | undefined\n  canLineTerminator: boolean\n  isCustom: boolean\n  short: number | false\n  group: string | undefined | false\n  push: string | undefined\n  pop: boolean\n  tokenType: TokenType\n  tokenTypeIdx: number\n}\n\nexport interface IAnalyzeResult {\n  patternIdxToConfig: IPatternConfig[]\n  charCodeToPatternIdxToConfig: { [charCode: number]: IPatternConfig[] }\n  emptyGroups: { [groupName: string]: IToken[] }\n  hasCustom: boolean\n  canBeOptimized: boolean\n}\n\nexport let SUPPORT_STICKY =\n  typeof (<any>new RegExp(\"(?:)\")).sticky === \"boolean\"\n\nexport function disableSticky() {\n  SUPPORT_STICKY = false\n}\n\nexport function enableSticky() {\n  SUPPORT_STICKY = true\n}\n\nexport function analyzeTokenTypes(\n  tokenTypes: TokenType[],\n  options: {\n    positionTracking?: \"full\" | \"onlyStart\" | \"onlyOffset\"\n    ensureOptimizations?: boolean\n    lineTerminatorCharacters?: (number | string)[]\n    // TODO: should `useSticky` be an argument here?\n    useSticky?: boolean\n    safeMode?: boolean\n    tracer?: (msg: string, action: () => void) => void\n  }\n): IAnalyzeResult {\n  options = defaults(options, {\n    useSticky: SUPPORT_STICKY,\n    debug: false as boolean,\n    safeMode: false as boolean,\n    positionTracking: \"full\",\n    lineTerminatorCharacters: [\"\\r\", \"\\n\"],\n    tracer: (msg: string, action: Function) => action()\n  })\n\n  const tracer = options.tracer!\n\n  tracer(\"initCharCodeToOptimizedIndexMap\", () => {\n    initCharCodeToOptimizedIndexMap()\n  })\n\n  let onlyRelevantTypes: TokenType[]\n  tracer(\"Reject Lexer.NA\", () => {\n    onlyRelevantTypes = reject(tokenTypes, (currType) => {\n      return currType[PATTERN] === Lexer.NA\n    })\n  })\n\n  let hasCustom = false\n  let allTransformedPatterns: (IRegExpExec | string)[]\n  tracer(\"Transform Patterns\", () => {\n    hasCustom = false\n    allTransformedPatterns = map(\n      onlyRelevantTypes,\n      (currType): IRegExpExec | string => {\n        const currPattern = currType[PATTERN]\n\n        /* istanbul ignore else */\n        if (isRegExp(currPattern)) {\n          const regExpSource = currPattern.source\n          if (\n            regExpSource.length === 1 &&\n            // only these regExp meta characters which can appear in a length one regExp\n            regExpSource !== \"^\" &&\n            regExpSource !== \"$\" &&\n            regExpSource !== \".\" &&\n            !currPattern.ignoreCase\n          ) {\n            return regExpSource\n          } else if (\n            regExpSource.length === 2 &&\n            regExpSource[0] === \"\\\\\" &&\n            // not a meta character\n            !includes(\n              [\n                \"d\",\n                \"D\",\n                \"s\",\n                \"S\",\n                \"t\",\n                \"r\",\n                \"n\",\n                \"t\",\n                \"0\",\n                \"c\",\n                \"b\",\n                \"B\",\n                \"f\",\n                \"v\",\n                \"w\",\n                \"W\"\n              ],\n              regExpSource[1]\n            )\n          ) {\n            // escaped meta Characters: /\\+/ /\\[/\n            // or redundant escaping: /\\a/\n            // without the escaping \"\\\"\n            return regExpSource[1]\n          } else {\n            return options.useSticky\n              ? addStickyFlag(currPattern)\n              : addStartOfInput(currPattern)\n          }\n        } else if (isFunction(currPattern)) {\n          hasCustom = true\n          // CustomPatternMatcherFunc - custom patterns do not require any transformations, only wrapping in a RegExp Like object\n          return { exec: currPattern }\n        } else if (typeof currPattern === \"object\") {\n          hasCustom = true\n          // ICustomPattern\n          return currPattern\n        } else if (typeof currPattern === \"string\") {\n          if (currPattern.length === 1) {\n            return currPattern\n          } else {\n            const escapedRegExpString = currPattern.replace(\n              /[\\\\^$.*+?()[\\]{}|]/g,\n              \"\\\\$&\"\n            )\n            const wrappedRegExp = new RegExp(escapedRegExpString)\n            return options.useSticky\n              ? addStickyFlag(wrappedRegExp)\n              : addStartOfInput(wrappedRegExp)\n          }\n        } else {\n          throw Error(\"non exhaustive match\")\n        }\n      }\n    )\n  })\n\n  let patternIdxToType: number[]\n  let patternIdxToGroup: (string | undefined | false)[]\n  let patternIdxToLongerAltIdxArr: (number[] | undefined)[]\n  let patternIdxToPushMode: (string | undefined)[]\n  let patternIdxToPopMode: boolean[]\n  tracer(\"misc mapping\", () => {\n    patternIdxToType = map(\n      onlyRelevantTypes,\n      (currType) => currType.tokenTypeIdx!\n    )\n\n    patternIdxToGroup = map(onlyRelevantTypes, (clazz: any) => {\n      const groupName = clazz.GROUP\n      /* istanbul ignore next */\n      if (groupName === Lexer.SKIPPED) {\n        return undefined\n      } else if (isString(groupName)) {\n        return groupName\n      } else if (isUndefined(groupName)) {\n        return false\n      } else {\n        throw Error(\"non exhaustive match\")\n      }\n    })\n\n    patternIdxToLongerAltIdxArr = map(onlyRelevantTypes, (clazz: any) => {\n      const longerAltType = clazz.LONGER_ALT\n\n      if (longerAltType) {\n        const longerAltIdxArr = isArray(longerAltType)\n          ? map(longerAltType, (type: any) => indexOf(onlyRelevantTypes, type))\n          : [indexOf(onlyRelevantTypes, longerAltType)]\n        return longerAltIdxArr\n      }\n    })\n\n    patternIdxToPushMode = map(\n      onlyRelevantTypes,\n      (clazz: any) => clazz.PUSH_MODE\n    )\n\n    patternIdxToPopMode = map(onlyRelevantTypes, (clazz: any) =>\n      has(clazz, \"POP_MODE\")\n    )\n  })\n\n  let patternIdxToCanLineTerminator: boolean[]\n  tracer(\"Line Terminator Handling\", () => {\n    const lineTerminatorCharCodes = getCharCodes(\n      options.lineTerminatorCharacters!\n    )\n    patternIdxToCanLineTerminator = map(onlyRelevantTypes, (tokType) => false)\n    if (options.positionTracking !== \"onlyOffset\") {\n      patternIdxToCanLineTerminator = map(onlyRelevantTypes, (tokType) => {\n        if (has(tokType, \"LINE_BREAKS\")) {\n          return !!tokType.LINE_BREAKS\n        } else {\n          return (\n            checkLineBreaksIssues(tokType, lineTerminatorCharCodes) === false &&\n            canMatchCharCode(\n              lineTerminatorCharCodes,\n              tokType.PATTERN as RegExp | string\n            )\n          )\n        }\n      })\n    }\n  })\n\n  let patternIdxToIsCustom: boolean[]\n  let patternIdxToShort: (number | false)[]\n  let emptyGroups!: { [groupName: string]: IToken[] }\n  let patternIdxToConfig!: IPatternConfig[]\n  tracer(\"Misc Mapping #2\", () => {\n    patternIdxToIsCustom = map(onlyRelevantTypes, isCustomPattern)\n    patternIdxToShort = map(allTransformedPatterns, isShortPattern)\n\n    emptyGroups = reduce(\n      onlyRelevantTypes,\n      (acc, clazz: any) => {\n        const groupName = clazz.GROUP\n        if (isString(groupName) && !(groupName === Lexer.SKIPPED)) {\n          acc[groupName] = []\n        }\n        return acc\n      },\n      {} as { [groupName: string]: IToken[] }\n    )\n\n    patternIdxToConfig = map(\n      allTransformedPatterns,\n      (x, idx): IPatternConfig => {\n        return {\n          pattern: allTransformedPatterns[idx],\n          longerAlt: patternIdxToLongerAltIdxArr[idx],\n          canLineTerminator: patternIdxToCanLineTerminator[idx],\n          isCustom: patternIdxToIsCustom[idx],\n          short: patternIdxToShort[idx],\n          group: patternIdxToGroup[idx],\n          push: patternIdxToPushMode[idx],\n          pop: patternIdxToPopMode[idx],\n          tokenTypeIdx: patternIdxToType[idx],\n          tokenType: onlyRelevantTypes[idx]\n        }\n      }\n    )\n  })\n\n  let canBeOptimized = true\n  let charCodeToPatternIdxToConfig: { [charCode: number]: IPatternConfig[] } =\n    []\n\n  if (!options.safeMode) {\n    tracer(\"First Char Optimization\", () => {\n      charCodeToPatternIdxToConfig = reduce(\n        onlyRelevantTypes,\n        (result, currTokType, idx) => {\n          if (typeof currTokType.PATTERN === \"string\") {\n            const charCode = currTokType.PATTERN.charCodeAt(0)\n            const optimizedIdx = charCodeToOptimizedIndex(charCode)\n            addToMapOfArrays(result, optimizedIdx, patternIdxToConfig[idx])\n          } else if (isArray(currTokType.START_CHARS_HINT)) {\n            let lastOptimizedIdx: number\n            forEach(currTokType.START_CHARS_HINT, (charOrInt) => {\n              const charCode =\n                typeof charOrInt === \"string\"\n                  ? charOrInt.charCodeAt(0)\n                  : charOrInt\n              const currOptimizedIdx = charCodeToOptimizedIndex(charCode)\n              // Avoid adding the config multiple times\n              /* istanbul ignore else */\n              // - Difficult to check this scenario effects as it is only a performance\n              //   optimization that does not change correctness\n              if (lastOptimizedIdx !== currOptimizedIdx) {\n                lastOptimizedIdx = currOptimizedIdx\n                addToMapOfArrays(\n                  result,\n                  currOptimizedIdx,\n                  patternIdxToConfig[idx]\n                )\n              }\n            })\n          } else if (isRegExp(currTokType.PATTERN)) {\n            if (currTokType.PATTERN.unicode) {\n              canBeOptimized = false\n              if (options.ensureOptimizations) {\n                PRINT_ERROR(\n                  `${failedOptimizationPrefixMsg}` +\n                    `\\tUnable to analyze < ${currTokType.PATTERN.toString()} > pattern.\\n` +\n                    \"\\tThe regexp unicode flag is not currently supported by the regexp-to-ast library.\\n\" +\n                    \"\\tThis will disable the lexer's first char optimizations.\\n\" +\n                    \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#UNICODE_OPTIMIZE\"\n                )\n              }\n            } else {\n              const optimizedCodes = getOptimizedStartCodesIndices(\n                currTokType.PATTERN,\n                options.ensureOptimizations\n              )\n              /* istanbul ignore if */\n              // start code will only be empty given an empty regExp or failure of regexp-to-ast library\n              // the first should be a different validation and the second cannot be tested.\n              if (isEmpty(optimizedCodes)) {\n                // we cannot understand what codes may start possible matches\n                // The optimization correctness requires knowing start codes for ALL patterns.\n                // Not actually sure this is an error, no debug message\n                canBeOptimized = false\n              }\n              forEach(optimizedCodes, (code) => {\n                addToMapOfArrays(result, code, patternIdxToConfig[idx])\n              })\n            }\n          } else {\n            if (options.ensureOptimizations) {\n              PRINT_ERROR(\n                `${failedOptimizationPrefixMsg}` +\n                  `\\tTokenType: <${currTokType.name}> is using a custom token pattern without providing <start_chars_hint> parameter.\\n` +\n                  \"\\tThis will disable the lexer's first char optimizations.\\n\" +\n                  \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#CUSTOM_OPTIMIZE\"\n              )\n            }\n            canBeOptimized = false\n          }\n\n          return result\n        },\n        [] as { [charCode: number]: IPatternConfig[] }\n      )\n    })\n  }\n\n  return {\n    emptyGroups: emptyGroups,\n    patternIdxToConfig: patternIdxToConfig,\n    charCodeToPatternIdxToConfig: charCodeToPatternIdxToConfig,\n    hasCustom: hasCustom,\n    canBeOptimized: canBeOptimized\n  }\n}\n\nexport function validatePatterns(\n  tokenTypes: TokenType[],\n  validModesNames: string[]\n): ILexerDefinitionError[] {\n  let errors: ILexerDefinitionError[] = []\n\n  const missingResult = findMissingPatterns(tokenTypes)\n  errors = errors.concat(missingResult.errors)\n\n  const invalidResult = findInvalidPatterns(missingResult.valid)\n  const validTokenTypes = invalidResult.valid\n  errors = errors.concat(invalidResult.errors)\n\n  errors = errors.concat(validateRegExpPattern(validTokenTypes))\n\n  errors = errors.concat(findInvalidGroupType(validTokenTypes))\n\n  errors = errors.concat(\n    findModesThatDoNotExist(validTokenTypes, validModesNames)\n  )\n\n  errors = errors.concat(findUnreachablePatterns(validTokenTypes))\n\n  return errors\n}\n\nfunction validateRegExpPattern(\n  tokenTypes: TokenType[]\n): ILexerDefinitionError[] {\n  let errors: ILexerDefinitionError[] = []\n  const withRegExpPatterns = filter(tokenTypes, (currTokType) =>\n    isRegExp(currTokType[PATTERN])\n  )\n\n  errors = errors.concat(findEndOfInputAnchor(withRegExpPatterns))\n\n  errors = errors.concat(findStartOfInputAnchor(withRegExpPatterns))\n\n  errors = errors.concat(findUnsupportedFlags(withRegExpPatterns))\n\n  errors = errors.concat(findDuplicatePatterns(withRegExpPatterns))\n\n  errors = errors.concat(findEmptyMatchRegExps(withRegExpPatterns))\n\n  return errors\n}\n\nexport interface ILexerFilterResult {\n  errors: ILexerDefinitionError[]\n  valid: TokenType[]\n}\n\nexport function findMissingPatterns(\n  tokenTypes: TokenType[]\n): ILexerFilterResult {\n  const tokenTypesWithMissingPattern = filter(tokenTypes, (currType) => {\n    return !has(currType, PATTERN)\n  })\n\n  const errors = map(tokenTypesWithMissingPattern, (currType) => {\n    return {\n      message:\n        \"Token Type: ->\" +\n        currType.name +\n        \"<- missing static 'PATTERN' property\",\n      type: LexerDefinitionErrorType.MISSING_PATTERN,\n      tokenTypes: [currType]\n    }\n  })\n\n  const valid = difference(tokenTypes, tokenTypesWithMissingPattern)\n  return { errors, valid }\n}\n\nexport function findInvalidPatterns(\n  tokenTypes: TokenType[]\n): ILexerFilterResult {\n  const tokenTypesWithInvalidPattern = filter(tokenTypes, (currType) => {\n    const pattern = currType[PATTERN]\n    return (\n      !isRegExp(pattern) &&\n      !isFunction(pattern) &&\n      !has(pattern, \"exec\") &&\n      !isString(pattern)\n    )\n  })\n\n  const errors = map(tokenTypesWithInvalidPattern, (currType) => {\n    return {\n      message:\n        \"Token Type: ->\" +\n        currType.name +\n        \"<- static 'PATTERN' can only be a RegExp, a\" +\n        \" Function matching the {CustomPatternMatcherFunc} type or an Object matching the {ICustomPattern} interface.\",\n      type: LexerDefinitionErrorType.INVALID_PATTERN,\n      tokenTypes: [currType]\n    }\n  })\n\n  const valid = difference(tokenTypes, tokenTypesWithInvalidPattern)\n  return { errors, valid }\n}\n\nconst end_of_input = /[^\\\\][$]/\n\nexport function findEndOfInputAnchor(\n  tokenTypes: TokenType[]\n): ILexerDefinitionError[] {\n  class EndAnchorFinder extends BaseRegExpVisitor {\n    found = false\n\n    visitEndAnchor(node: unknown) {\n      this.found = true\n    }\n  }\n\n  const invalidRegex = filter(tokenTypes, (currType) => {\n    const pattern = currType.PATTERN\n\n    try {\n      const regexpAst = getRegExpAst(pattern as RegExp)\n      const endAnchorVisitor = new EndAnchorFinder()\n      endAnchorVisitor.visit(regexpAst)\n\n      return endAnchorVisitor.found\n    } catch (e) {\n      // old behavior in case of runtime exceptions with regexp-to-ast.\n      /* istanbul ignore next - cannot ensure an error in regexp-to-ast*/\n      return end_of_input.test((pattern as RegExp).source)\n    }\n  })\n\n  const errors = map(invalidRegex, (currType) => {\n    return {\n      message:\n        \"Unexpected RegExp Anchor Error:\\n\" +\n        \"\\tToken Type: ->\" +\n        currType.name +\n        \"<- static 'PATTERN' cannot contain end of input anchor '$'\\n\" +\n        \"\\tSee chevrotain.io/docs/guide/resolving_lexer_errors.html#ANCHORS\" +\n        \"\\tfor details.\",\n      type: LexerDefinitionErrorType.EOI_ANCHOR_FOUND,\n      tokenTypes: [currType]\n    }\n  })\n\n  return errors\n}\n\nexport function findEmptyMatchRegExps(\n  tokenTypes: TokenType[]\n): ILexerDefinitionError[] {\n  const matchesEmptyString = filter(tokenTypes, (currType) => {\n    const pattern = currType.PATTERN as RegExp\n    return pattern.test(\"\")\n  })\n\n  const errors = map(matchesEmptyString, (currType) => {\n    return {\n      message:\n        \"Token Type: ->\" +\n        currType.name +\n        \"<- static 'PATTERN' must not match an empty string\",\n      type: LexerDefinitionErrorType.EMPTY_MATCH_PATTERN,\n      tokenTypes: [currType]\n    }\n  })\n\n  return errors\n}\n\nconst start_of_input = /[^\\\\[][\\^]|^\\^/\n\nexport function findStartOfInputAnchor(\n  tokenTypes: TokenType[]\n): ILexerDefinitionError[] {\n  class StartAnchorFinder extends BaseRegExpVisitor {\n    found = false\n\n    visitStartAnchor(node: unknown) {\n      this.found = true\n    }\n  }\n\n  const invalidRegex = filter(tokenTypes, (currType) => {\n    const pattern = currType.PATTERN as RegExp\n    try {\n      const regexpAst = getRegExpAst(pattern)\n      const startAnchorVisitor = new StartAnchorFinder()\n      startAnchorVisitor.visit(regexpAst)\n\n      return startAnchorVisitor.found\n    } catch (e) {\n      // old behavior in case of runtime exceptions with regexp-to-ast.\n      /* istanbul ignore next - cannot ensure an error in regexp-to-ast*/\n      return start_of_input.test(pattern.source)\n    }\n  })\n\n  const errors = map(invalidRegex, (currType) => {\n    return {\n      message:\n        \"Unexpected RegExp Anchor Error:\\n\" +\n        \"\\tToken Type: ->\" +\n        currType.name +\n        \"<- static 'PATTERN' cannot contain start of input anchor '^'\\n\" +\n        \"\\tSee https://chevrotain.io/docs/guide/resolving_lexer_errors.html#ANCHORS\" +\n        \"\\tfor details.\",\n      type: LexerDefinitionErrorType.SOI_ANCHOR_FOUND,\n      tokenTypes: [currType]\n    }\n  })\n\n  return errors\n}\n\nexport function findUnsupportedFlags(\n  tokenTypes: TokenType[]\n): ILexerDefinitionError[] {\n  const invalidFlags = filter(tokenTypes, (currType) => {\n    const pattern = currType[PATTERN]\n    return pattern instanceof RegExp && (pattern.multiline || pattern.global)\n  })\n\n  const errors = map(invalidFlags, (currType) => {\n    return {\n      message:\n        \"Token Type: ->\" +\n        currType.name +\n        \"<- static 'PATTERN' may NOT contain global('g') or multiline('m')\",\n      type: LexerDefinitionErrorType.UNSUPPORTED_FLAGS_FOUND,\n      tokenTypes: [currType]\n    }\n  })\n\n  return errors\n}\n\n// This can only test for identical duplicate RegExps, not semantically equivalent ones.\nexport function findDuplicatePatterns(\n  tokenTypes: TokenType[]\n): ILexerDefinitionError[] {\n  const found: TokenType[] = []\n  let identicalPatterns = map(tokenTypes, (outerType: any) => {\n    return reduce(\n      tokenTypes,\n      (result, innerType) => {\n        if (\n          outerType.PATTERN.source === (innerType.PATTERN as RegExp).source &&\n          !includes(found, innerType) &&\n          innerType.PATTERN !== Lexer.NA\n        ) {\n          // this avoids duplicates in the result, each Token Type may only appear in one \"set\"\n          // in essence we are creating Equivalence classes on equality relation.\n          found.push(innerType)\n          result.push(innerType)\n          return result\n        }\n        return result\n      },\n      [] as TokenType[]\n    )\n  })\n\n  identicalPatterns = compact(identicalPatterns)\n\n  const duplicatePatterns = filter(identicalPatterns, (currIdenticalSet) => {\n    return currIdenticalSet.length > 1\n  })\n\n  const errors = map(duplicatePatterns, (setOfIdentical: any) => {\n    const tokenTypeNames = map(setOfIdentical, (currType: any) => {\n      return currType.name\n    })\n\n    const dupPatternSrc = (<any>first(setOfIdentical)).PATTERN\n    return {\n      message:\n        `The same RegExp pattern ->${dupPatternSrc}<-` +\n        `has been used in all of the following Token Types: ${tokenTypeNames.join(\n          \", \"\n        )} <-`,\n      type: LexerDefinitionErrorType.DUPLICATE_PATTERNS_FOUND,\n      tokenTypes: setOfIdentical\n    }\n  })\n\n  return errors\n}\n\nexport function findInvalidGroupType(\n  tokenTypes: TokenType[]\n): ILexerDefinitionError[] {\n  const invalidTypes = filter(tokenTypes, (clazz: any) => {\n    if (!has(clazz, \"GROUP\")) {\n      return false\n    }\n    const group = clazz.GROUP\n\n    return group !== Lexer.SKIPPED && group !== Lexer.NA && !isString(group)\n  })\n\n  const errors = map(invalidTypes, (currType) => {\n    return {\n      message:\n        \"Token Type: ->\" +\n        currType.name +\n        \"<- static 'GROUP' can only be Lexer.SKIPPED/Lexer.NA/A String\",\n      type: LexerDefinitionErrorType.INVALID_GROUP_TYPE_FOUND,\n      tokenTypes: [currType]\n    }\n  })\n\n  return errors\n}\n\nexport function findModesThatDoNotExist(\n  tokenTypes: TokenType[],\n  validModes: string[]\n): ILexerDefinitionError[] {\n  const invalidModes = filter(tokenTypes, (clazz: any) => {\n    return (\n      clazz.PUSH_MODE !== undefined && !includes(validModes, clazz.PUSH_MODE)\n    )\n  })\n\n  const errors = map(invalidModes, (tokType) => {\n    const msg =\n      `Token Type: ->${tokType.name}<- static 'PUSH_MODE' value cannot refer to a Lexer Mode ->${tokType.PUSH_MODE}<-` +\n      `which does not exist`\n    return {\n      message: msg,\n      type: LexerDefinitionErrorType.PUSH_MODE_DOES_NOT_EXIST,\n      tokenTypes: [tokType]\n    }\n  })\n\n  return errors\n}\n\nexport function findUnreachablePatterns(\n  tokenTypes: TokenType[]\n): ILexerDefinitionError[] {\n  const errors: ILexerDefinitionError[] = []\n\n  const canBeTested = reduce(\n    tokenTypes,\n    (result, tokType, idx) => {\n      const pattern = tokType.PATTERN\n\n      if (pattern === Lexer.NA) {\n        return result\n      }\n\n      // a more comprehensive validation for all forms of regExps would require\n      // deeper regExp analysis capabilities\n      if (isString(pattern)) {\n        result.push({ str: pattern, idx, tokenType: tokType })\n      } else if (isRegExp(pattern) && noMetaChar(pattern)) {\n        result.push({ str: pattern.source, idx, tokenType: tokType })\n      }\n      return result\n    },\n    [] as { str: string; idx: number; tokenType: TokenType }[]\n  )\n\n  forEach(tokenTypes, (tokType, testIdx) => {\n    forEach(canBeTested, ({ str, idx, tokenType }) => {\n      if (testIdx < idx && testTokenType(str, tokType.PATTERN)) {\n        const msg =\n          `Token: ->${tokenType.name}<- can never be matched.\\n` +\n          `Because it appears AFTER the Token Type ->${tokType.name}<-` +\n          `in the lexer's definition.\\n` +\n          `See https://chevrotain.io/docs/guide/resolving_lexer_errors.html#UNREACHABLE`\n        errors.push({\n          message: msg,\n          type: LexerDefinitionErrorType.UNREACHABLE_PATTERN,\n          tokenTypes: [tokType, tokenType]\n        })\n      }\n    })\n  })\n\n  return errors\n}\n\nfunction testTokenType(str: string, pattern: any): boolean {\n  /* istanbul ignore else */\n  if (isRegExp(pattern)) {\n    const regExpArray = pattern.exec(str)\n    return regExpArray !== null && regExpArray.index === 0\n  } else if (isFunction(pattern)) {\n    // maintain the API of custom patterns\n    return pattern(str, 0, [], {})\n  } else if (has(pattern, \"exec\")) {\n    // maintain the API of custom patterns\n    return pattern.exec(str, 0, [], {})\n  } else if (typeof pattern === \"string\") {\n    return pattern === str\n  } else {\n    throw Error(\"non exhaustive match\")\n  }\n}\n\nfunction noMetaChar(regExp: RegExp): boolean {\n  //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\n  const metaChars = [\n    \".\",\n    \"\\\\\",\n    \"[\",\n    \"]\",\n    \"|\",\n    \"^\",\n    \"$\",\n    \"(\",\n    \")\",\n    \"?\",\n    \"*\",\n    \"+\",\n    \"{\"\n  ]\n  return (\n    find(metaChars, (char) => regExp.source.indexOf(char) !== -1) === undefined\n  )\n}\n\nexport function addStartOfInput(pattern: RegExp): RegExp {\n  const flags = pattern.ignoreCase ? \"i\" : \"\"\n  // always wrapping in a none capturing group preceded by '^' to make sure matching can only work on start of input.\n  // duplicate/redundant start of input markers have no meaning (/^^^^A/ === /^A/)\n  return new RegExp(`^(?:${pattern.source})`, flags)\n}\n\nexport function addStickyFlag(pattern: RegExp): RegExp {\n  const flags = pattern.ignoreCase ? \"iy\" : \"y\"\n  // always wrapping in a none capturing group preceded by '^' to make sure matching can only work on start of input.\n  // duplicate/redundant start of input markers have no meaning (/^^^^A/ === /^A/)\n  return new RegExp(`${pattern.source}`, flags)\n}\n\nexport function performRuntimeChecks(\n  lexerDefinition: IMultiModeLexerDefinition,\n  trackLines: boolean,\n  lineTerminatorCharacters: (number | string)[]\n): ILexerDefinitionError[] {\n  const errors = []\n\n  // some run time checks to help the end users.\n  if (!has(lexerDefinition, DEFAULT_MODE)) {\n    errors.push({\n      message:\n        \"A MultiMode Lexer cannot be initialized without a <\" +\n        DEFAULT_MODE +\n        \"> property in its definition\\n\",\n      type: LexerDefinitionErrorType.MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE\n    })\n  }\n  if (!has(lexerDefinition, MODES)) {\n    errors.push({\n      message:\n        \"A MultiMode Lexer cannot be initialized without a <\" +\n        MODES +\n        \"> property in its definition\\n\",\n      type: LexerDefinitionErrorType.MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY\n    })\n  }\n\n  if (\n    has(lexerDefinition, MODES) &&\n    has(lexerDefinition, DEFAULT_MODE) &&\n    !has(lexerDefinition.modes, lexerDefinition.defaultMode)\n  ) {\n    errors.push({\n      message:\n        `A MultiMode Lexer cannot be initialized with a ${DEFAULT_MODE}: <${lexerDefinition.defaultMode}>` +\n        `which does not exist\\n`,\n      type: LexerDefinitionErrorType.MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST\n    })\n  }\n\n  if (has(lexerDefinition, MODES)) {\n    forEach(lexerDefinition.modes, (currModeValue, currModeName) => {\n      forEach(currModeValue, (currTokType, currIdx) => {\n        if (isUndefined(currTokType)) {\n          errors.push({\n            message:\n              `A Lexer cannot be initialized using an undefined Token Type. Mode:` +\n              `<${currModeName}> at index: <${currIdx}>\\n`,\n            type: LexerDefinitionErrorType.LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED\n          })\n        }\n      })\n    })\n  }\n\n  return errors\n}\n\nexport function performWarningRuntimeChecks(\n  lexerDefinition: IMultiModeLexerDefinition,\n  trackLines: boolean,\n  lineTerminatorCharacters: (number | string)[]\n): ILexerDefinitionError[] {\n  const warnings = []\n  let hasAnyLineBreak = false\n  const allTokenTypes = compact(flatten(values(lexerDefinition.modes)))\n\n  const concreteTokenTypes = reject(\n    allTokenTypes,\n    (currType) => currType[PATTERN] === Lexer.NA\n  )\n  const terminatorCharCodes = getCharCodes(lineTerminatorCharacters)\n  if (trackLines) {\n    forEach(concreteTokenTypes, (tokType) => {\n      const currIssue = checkLineBreaksIssues(tokType, terminatorCharCodes)\n      if (currIssue !== false) {\n        const message = buildLineBreakIssueMessage(tokType, currIssue)\n        const warningDescriptor = {\n          message,\n          type: currIssue.issue,\n          tokenType: tokType\n        }\n        warnings.push(warningDescriptor)\n      } else {\n        // we don't want to attempt to scan if the user explicitly specified the line_breaks option.\n        if (has(tokType, \"LINE_BREAKS\")) {\n          if (tokType.LINE_BREAKS === true) {\n            hasAnyLineBreak = true\n          }\n        } else {\n          if (\n            canMatchCharCode(terminatorCharCodes, tokType.PATTERN as RegExp)\n          ) {\n            hasAnyLineBreak = true\n          }\n        }\n      }\n    })\n  }\n\n  if (trackLines && !hasAnyLineBreak) {\n    warnings.push({\n      message:\n        \"Warning: No LINE_BREAKS Found.\\n\" +\n        \"\\tThis Lexer has been defined to track line and column information,\\n\" +\n        \"\\tBut none of the Token Types can be identified as matching a line terminator.\\n\" +\n        \"\\tSee https://chevrotain.io/docs/guide/resolving_lexer_errors.html#LINE_BREAKS \\n\" +\n        \"\\tfor details.\",\n      type: LexerDefinitionErrorType.NO_LINE_BREAKS_FLAGS\n    })\n  }\n  return warnings\n}\n\nexport function cloneEmptyGroups(emptyGroups: {\n  [groupName: string]: IToken\n}): { [groupName: string]: IToken } {\n  const clonedResult: any = {}\n  const groupKeys = keys(emptyGroups)\n\n  forEach(groupKeys, (currKey) => {\n    const currGroupValue = emptyGroups[currKey]\n\n    /* istanbul ignore else */\n    if (isArray(currGroupValue)) {\n      clonedResult[currKey] = []\n    } else {\n      throw Error(\"non exhaustive match\")\n    }\n  })\n\n  return clonedResult\n}\n\n// TODO: refactor to avoid duplication\nexport function isCustomPattern(tokenType: TokenType): boolean {\n  const pattern = tokenType.PATTERN\n  /* istanbul ignore else */\n  if (isRegExp(pattern)) {\n    return false\n  } else if (isFunction(pattern)) {\n    // CustomPatternMatcherFunc - custom patterns do not require any transformations, only wrapping in a RegExp Like object\n    return true\n  } else if (has(pattern, \"exec\")) {\n    // ICustomPattern\n    return true\n  } else if (isString(pattern)) {\n    return false\n  } else {\n    throw Error(\"non exhaustive match\")\n  }\n}\n\nexport function isShortPattern(pattern: any): number | false {\n  if (isString(pattern) && pattern.length === 1) {\n    return pattern.charCodeAt(0)\n  } else {\n    return false\n  }\n}\n\n/**\n * Faster than using a RegExp for default newline detection during lexing.\n */\nexport const LineTerminatorOptimizedTester: ILineTerminatorsTester = {\n  // implements /\\n|\\r\\n?/g.test\n  test: function (text) {\n    const len = text.length\n    for (let i = this.lastIndex; i < len; i++) {\n      const c = text.charCodeAt(i)\n      if (c === 10) {\n        this.lastIndex = i + 1\n        return true\n      } else if (c === 13) {\n        if (text.charCodeAt(i + 1) === 10) {\n          this.lastIndex = i + 2\n        } else {\n          this.lastIndex = i + 1\n        }\n        return true\n      }\n    }\n    return false\n  },\n\n  lastIndex: 0\n}\n\nfunction checkLineBreaksIssues(\n  tokType: TokenType,\n  lineTerminatorCharCodes: number[]\n):\n  | {\n      issue:\n        | LexerDefinitionErrorType.IDENTIFY_TERMINATOR\n        | LexerDefinitionErrorType.CUSTOM_LINE_BREAK\n      errMsg?: string\n    }\n  | false {\n  if (has(tokType, \"LINE_BREAKS\")) {\n    // if the user explicitly declared the line_breaks option we will respect their choice\n    // and assume it is correct.\n    return false\n  } else {\n    /* istanbul ignore else */\n    if (isRegExp(tokType.PATTERN)) {\n      try {\n        // TODO: why is the casting suddenly needed?\n        canMatchCharCode(lineTerminatorCharCodes, tokType.PATTERN as RegExp)\n      } catch (e) {\n        /* istanbul ignore next - to test this we would have to mock <canMatchCharCode> to throw an error */\n        return {\n          issue: LexerDefinitionErrorType.IDENTIFY_TERMINATOR,\n          errMsg: (e as Error).message\n        }\n      }\n      return false\n    } else if (isString(tokType.PATTERN)) {\n      // string literal patterns can always be analyzed to detect line terminator usage\n      return false\n    } else if (isCustomPattern(tokType)) {\n      // custom token types\n      return { issue: LexerDefinitionErrorType.CUSTOM_LINE_BREAK }\n    } else {\n      throw Error(\"non exhaustive match\")\n    }\n  }\n}\n\nexport function buildLineBreakIssueMessage(\n  tokType: TokenType,\n  details: {\n    issue:\n      | LexerDefinitionErrorType.IDENTIFY_TERMINATOR\n      | LexerDefinitionErrorType.CUSTOM_LINE_BREAK\n    errMsg?: string\n  }\n): string {\n  /* istanbul ignore else */\n  if (details.issue === LexerDefinitionErrorType.IDENTIFY_TERMINATOR) {\n    return (\n      \"Warning: unable to identify line terminator usage in pattern.\\n\" +\n      `\\tThe problem is in the <${tokType.name}> Token Type\\n` +\n      `\\t Root cause: ${details.errMsg}.\\n` +\n      \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#IDENTIFY_TERMINATOR\"\n    )\n  } else if (details.issue === LexerDefinitionErrorType.CUSTOM_LINE_BREAK) {\n    return (\n      \"Warning: A Custom Token Pattern should specify the <line_breaks> option.\\n\" +\n      `\\tThe problem is in the <${tokType.name}> Token Type\\n` +\n      \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#CUSTOM_LINE_BREAK\"\n    )\n  } else {\n    throw Error(\"non exhaustive match\")\n  }\n}\n\nfunction getCharCodes(charsOrCodes: (number | string)[]): number[] {\n  const charCodes = map(charsOrCodes, (numOrString) => {\n    if (isString(numOrString)) {\n      return numOrString.charCodeAt(0)\n    } else {\n      return numOrString\n    }\n  })\n\n  return charCodes\n}\n\nfunction addToMapOfArrays<T>(\n  map: Record<number, T[]>,\n  key: number,\n  value: T\n): void {\n  if (map[key] === undefined) {\n    map[key] = [value]\n  } else {\n    map[key].push(value)\n  }\n}\n\nexport const minOptimizationVal = 256\n\n/**\n * We are mapping charCode above ASCI (256) into buckets each in the size of 256.\n * This is because ASCI are the most common start chars so each one of those will get its own\n * possible token configs vector.\n *\n * Tokens starting with charCodes \"above\" ASCI are uncommon, so we can \"afford\"\n * to place these into buckets of possible token configs, What we gain from\n * this is avoiding the case of creating an optimization 'charCodeToPatternIdxToConfig'\n * which would contain 10,000+ arrays of small size (e.g unicode Identifiers scenario).\n * Our 'charCodeToPatternIdxToConfig' max size will now be:\n * 256 + (2^16 / 2^8) - 1 === 511\n *\n * note the hack for fast division integer part extraction\n * See: https://stackoverflow.com/a/4228528\n */\nlet charCodeToOptimizedIdxMap: number[] = []\nexport function charCodeToOptimizedIndex(charCode: number): number {\n  return charCode < minOptimizationVal\n    ? charCode\n    : charCodeToOptimizedIdxMap[charCode]\n}\n\n/**\n * This is a compromise between cold start / hot running performance\n * Creating this array takes ~3ms on a modern machine,\n * But if we perform the computation at runtime as needed the CSS Lexer benchmark\n * performance degrades by ~10%\n *\n * TODO: Perhaps it should be lazy initialized only if a charCode > 255 is used.\n */\nfunction initCharCodeToOptimizedIndexMap() {\n  if (isEmpty(charCodeToOptimizedIdxMap)) {\n    charCodeToOptimizedIdxMap = new Array(65536)\n    for (let i = 0; i < 65536; i++) {\n      charCodeToOptimizedIdxMap[i] = i > 255 ? 255 + ~~(i / 255) : i\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}