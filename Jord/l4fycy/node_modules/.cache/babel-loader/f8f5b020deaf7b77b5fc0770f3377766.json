{"ast":null,"code":"import _classCallCheck from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Loader, FileLoader, DataTexture, RGBAFormat, UnsignedByteType, LinearFilter, ClampToEdgeWrapping, DataTexture3D } from 'three'; // http://download.autodesk.com/us/systemdocs/help/2011/lustre/index.html?url=./files/WSc4e151a45a3b785a24c3d9a411df9298473-7ffd.htm,topicNumber=d0e9492\n\nvar LUT3dlLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(LUT3dlLoader, _Loader);\n\n  var _super = _createSuper(LUT3dlLoader);\n\n  function LUT3dlLoader() {\n    _classCallCheck(this, LUT3dlLoader);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(LUT3dlLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var _this = this;\n\n      var loader = new FileLoader(this.manager);\n      loader.setPath(this.path);\n      loader.setResponseType('text');\n      loader.load(url, function (text) {\n        try {\n          onLoad(_this.parse(text));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n\n          _this.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(str) {\n      // remove empty lines and comment lints\n      str = str.replace(/^#.*?(\\n|\\r)/gm, '').replace(/^\\s*?(\\n|\\r)/gm, '').trim();\n      var lines = str.split(/[\\n\\r]+/g); // first line is the positions on the grid that are provided by the LUT\n\n      var gridLines = lines[0].trim().split(/\\s+/g).map(function (e) {\n        return parseFloat(e);\n      });\n      var gridStep = gridLines[1] - gridLines[0];\n      var size = gridLines.length;\n\n      for (var i = 1, l = gridLines.length; i < l; i++) {\n        if (gridStep !== gridLines[i] - gridLines[i - 1]) {\n          throw new Error('LUT3dlLoader: Inconsistent grid size not supported.');\n        }\n      }\n\n      var dataArray = new Array(size * size * size * 4);\n      var index = 0;\n      var maxOutputValue = 0.0;\n\n      for (var _i = 1, _l = lines.length; _i < _l; _i++) {\n        var line = lines[_i].trim();\n\n        var split = line.split(/\\s/g);\n        var r = parseFloat(split[0]);\n        var g = parseFloat(split[1]);\n        var b = parseFloat(split[2]);\n        maxOutputValue = Math.max(maxOutputValue, r, g, b);\n        var bLayer = index % size;\n        var gLayer = Math.floor(index / size) % size;\n        var rLayer = Math.floor(index / (size * size)) % size; // b grows first, then g, then r\n\n        var pixelIndex = bLayer * size * size + gLayer * size + rLayer;\n        dataArray[4 * pixelIndex + 0] = r;\n        dataArray[4 * pixelIndex + 1] = g;\n        dataArray[4 * pixelIndex + 2] = b;\n        dataArray[4 * pixelIndex + 3] = 1.0;\n        index += 1;\n      } // Find the apparent bit depth of the stored RGB values and map the\n      // values to [ 0, 255 ].\n\n\n      var bits = Math.ceil(Math.log2(maxOutputValue));\n      var maxBitValue = Math.pow(2.0, bits);\n\n      for (var _i2 = 0, _l2 = dataArray.length; _i2 < _l2; _i2 += 4) {\n        var _r = dataArray[_i2 + 0];\n        var _g = dataArray[_i2 + 1];\n        var _b = dataArray[_i2 + 2];\n        dataArray[_i2 + 0] = 255 * _r / maxBitValue; // r\n\n        dataArray[_i2 + 1] = 255 * _g / maxBitValue; // g\n\n        dataArray[_i2 + 2] = 255 * _b / maxBitValue; // b\n      }\n\n      var data = new Uint8Array(dataArray);\n      var texture = new DataTexture();\n      texture.image.data = data;\n      texture.image.width = size;\n      texture.image.height = size * size;\n      texture.format = RGBAFormat;\n      texture.type = UnsignedByteType;\n      texture.magFilter = LinearFilter;\n      texture.minFilter = LinearFilter;\n      texture.wrapS = ClampToEdgeWrapping;\n      texture.wrapT = ClampToEdgeWrapping;\n      texture.generateMipmaps = false;\n      var texture3D = new DataTexture3D();\n      texture3D.image.data = data;\n      texture3D.image.width = size;\n      texture3D.image.height = size;\n      texture3D.image.depth = size;\n      texture3D.format = RGBAFormat;\n      texture3D.type = UnsignedByteType;\n      texture3D.magFilter = LinearFilter;\n      texture3D.minFilter = LinearFilter;\n      texture3D.wrapS = ClampToEdgeWrapping;\n      texture3D.wrapT = ClampToEdgeWrapping;\n      texture3D.wrapR = ClampToEdgeWrapping;\n      texture3D.generateMipmaps = false;\n      return {\n        size: size,\n        texture: texture,\n        texture3D: texture3D\n      };\n    }\n  }]);\n\n  return LUT3dlLoader;\n}(Loader);\n\nexport { LUT3dlLoader };","map":{"version":3,"names":["Loader","FileLoader","DataTexture","RGBAFormat","UnsignedByteType","LinearFilter","ClampToEdgeWrapping","DataTexture3D","LUT3dlLoader","url","onLoad","onProgress","onError","loader","manager","setPath","path","setResponseType","load","text","parse","e","console","error","itemError","str","replace","trim","lines","split","gridLines","map","parseFloat","gridStep","size","length","i","l","Error","dataArray","Array","index","maxOutputValue","line","r","g","b","Math","max","bLayer","gLayer","floor","rLayer","pixelIndex","bits","ceil","log2","maxBitValue","pow","data","Uint8Array","texture","image","width","height","format","type","magFilter","minFilter","wrapS","wrapT","generateMipmaps","texture3D","depth","wrapR"],"sources":["C:/Users/Arnav/Downloads/l4fycy/node_modules/three-stdlib/loaders/LUT3dlLoader.js"],"sourcesContent":["import { Loader, FileLoader, DataTexture, RGBAFormat, UnsignedByteType, LinearFilter, ClampToEdgeWrapping, DataTexture3D } from 'three';\n\n// http://download.autodesk.com/us/systemdocs/help/2011/lustre/index.html?url=./files/WSc4e151a45a3b785a24c3d9a411df9298473-7ffd.htm,topicNumber=d0e9492\nclass LUT3dlLoader extends Loader {\n  load(url, onLoad, onProgress, onError) {\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType('text');\n    loader.load(url, text => {\n      try {\n        onLoad(this.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        this.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(str) {\n    // remove empty lines and comment lints\n    str = str.replace(/^#.*?(\\n|\\r)/gm, '').replace(/^\\s*?(\\n|\\r)/gm, '').trim();\n    const lines = str.split(/[\\n\\r]+/g); // first line is the positions on the grid that are provided by the LUT\n\n    const gridLines = lines[0].trim().split(/\\s+/g).map(e => parseFloat(e));\n    const gridStep = gridLines[1] - gridLines[0];\n    const size = gridLines.length;\n\n    for (let i = 1, l = gridLines.length; i < l; i++) {\n      if (gridStep !== gridLines[i] - gridLines[i - 1]) {\n        throw new Error('LUT3dlLoader: Inconsistent grid size not supported.');\n      }\n    }\n\n    const dataArray = new Array(size * size * size * 4);\n    let index = 0;\n    let maxOutputValue = 0.0;\n\n    for (let i = 1, l = lines.length; i < l; i++) {\n      const line = lines[i].trim();\n      const split = line.split(/\\s/g);\n      const r = parseFloat(split[0]);\n      const g = parseFloat(split[1]);\n      const b = parseFloat(split[2]);\n      maxOutputValue = Math.max(maxOutputValue, r, g, b);\n      const bLayer = index % size;\n      const gLayer = Math.floor(index / size) % size;\n      const rLayer = Math.floor(index / (size * size)) % size; // b grows first, then g, then r\n\n      const pixelIndex = bLayer * size * size + gLayer * size + rLayer;\n      dataArray[4 * pixelIndex + 0] = r;\n      dataArray[4 * pixelIndex + 1] = g;\n      dataArray[4 * pixelIndex + 2] = b;\n      dataArray[4 * pixelIndex + 3] = 1.0;\n      index += 1;\n    } // Find the apparent bit depth of the stored RGB values and map the\n    // values to [ 0, 255 ].\n\n\n    const bits = Math.ceil(Math.log2(maxOutputValue));\n    const maxBitValue = Math.pow(2.0, bits);\n\n    for (let i = 0, l = dataArray.length; i < l; i += 4) {\n      const r = dataArray[i + 0];\n      const g = dataArray[i + 1];\n      const b = dataArray[i + 2];\n      dataArray[i + 0] = 255 * r / maxBitValue; // r\n\n      dataArray[i + 1] = 255 * g / maxBitValue; // g\n\n      dataArray[i + 2] = 255 * b / maxBitValue; // b\n    }\n\n    const data = new Uint8Array(dataArray);\n    const texture = new DataTexture();\n    texture.image.data = data;\n    texture.image.width = size;\n    texture.image.height = size * size;\n    texture.format = RGBAFormat;\n    texture.type = UnsignedByteType;\n    texture.magFilter = LinearFilter;\n    texture.minFilter = LinearFilter;\n    texture.wrapS = ClampToEdgeWrapping;\n    texture.wrapT = ClampToEdgeWrapping;\n    texture.generateMipmaps = false;\n    const texture3D = new DataTexture3D();\n    texture3D.image.data = data;\n    texture3D.image.width = size;\n    texture3D.image.height = size;\n    texture3D.image.depth = size;\n    texture3D.format = RGBAFormat;\n    texture3D.type = UnsignedByteType;\n    texture3D.magFilter = LinearFilter;\n    texture3D.minFilter = LinearFilter;\n    texture3D.wrapS = ClampToEdgeWrapping;\n    texture3D.wrapT = ClampToEdgeWrapping;\n    texture3D.wrapR = ClampToEdgeWrapping;\n    texture3D.generateMipmaps = false;\n    return {\n      size,\n      texture,\n      texture3D\n    };\n  }\n\n}\n\nexport { LUT3dlLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}