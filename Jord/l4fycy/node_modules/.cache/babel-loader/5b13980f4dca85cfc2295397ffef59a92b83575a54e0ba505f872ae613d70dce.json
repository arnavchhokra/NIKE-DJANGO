{"ast":null,"code":"import { intersectTri } from '../../utils/ThreeRayIntersectUtilities.js';\nimport { setTriangle } from '../../utils/TriangleUtilities.js';\n\n/*************************************************************/\n/* This file is generated from \"iterationUtils.template.js\". */\n/*************************************************************/\n/* eslint-disable indent */\n\nfunction intersectTris_indirect(bvh, side, ray, offset, count, intersections) {\n  const {\n    geometry,\n    _indirectBuffer\n  } = bvh;\n  for (let i = offset, end = offset + count; i < end; i++) {\n    let vi = _indirectBuffer ? _indirectBuffer[i] : i;\n    intersectTri(geometry, side, ray, vi, intersections);\n  }\n}\nfunction intersectClosestTri_indirect(bvh, side, ray, offset, count) {\n  const {\n    geometry,\n    _indirectBuffer\n  } = bvh;\n  let dist = Infinity;\n  let res = null;\n  for (let i = offset, end = offset + count; i < end; i++) {\n    let intersection;\n    intersection = intersectTri(geometry, side, ray, _indirectBuffer ? _indirectBuffer[i] : i);\n    if (intersection && intersection.distance < dist) {\n      res = intersection;\n      dist = intersection.distance;\n    }\n  }\n  return res;\n}\nfunction iterateOverTriangles_indirect(offset, count, bvh, intersectsTriangleFunc, contained, depth, triangle) {\n  const {\n    geometry\n  } = bvh;\n  const {\n    index\n  } = geometry;\n  const pos = geometry.attributes.position;\n  for (let i = offset, l = count + offset; i < l; i++) {\n    let tri;\n    tri = bvh.resolveTriangleIndex(i);\n    setTriangle(triangle, tri * 3, index, pos);\n    triangle.needsUpdate = true;\n    if (intersectsTriangleFunc(triangle, tri, contained, depth)) {\n      return true;\n    }\n  }\n  return false;\n}\nexport { intersectClosestTri_indirect, intersectTris_indirect, iterateOverTriangles_indirect };","map":{"version":3,"names":["intersectTri","setTriangle","intersectTris_indirect","bvh","side","ray","offset","count","intersections","geometry","_indirectBuffer","i","end","vi","intersectClosestTri_indirect","dist","Infinity","res","intersection","distance","iterateOverTriangles_indirect","intersectsTriangleFunc","contained","depth","triangle","index","pos","attributes","position","l","tri","resolveTriangleIndex","needsUpdate"],"sources":["D:/Github/NIKE-DJANGO/Jord/l4fycy/node_modules/three-mesh-bvh/src/core/utils/iterationUtils_indirect.generated.js"],"sourcesContent":["import { intersectTri } from '../../utils/ThreeRayIntersectUtilities.js';\nimport { setTriangle } from '../../utils/TriangleUtilities.js';\n\n/*************************************************************/\n/* This file is generated from \"iterationUtils.template.js\". */\n/*************************************************************/\n/* eslint-disable indent */\n\nfunction intersectTris_indirect( bvh, side, ray, offset, count, intersections ) {\n\n\tconst { geometry, _indirectBuffer } = bvh;\n\tfor ( let i = offset, end = offset + count; i < end; i ++ ) {\n\n\t\tlet vi = _indirectBuffer ? _indirectBuffer[ i ] : i;\n\t\tintersectTri( geometry, side, ray, vi, intersections );\n\n\n\t}\n\n}\n\nfunction intersectClosestTri_indirect( bvh, side, ray, offset, count ) {\n\n\tconst { geometry, _indirectBuffer } = bvh;\n\tlet dist = Infinity;\n\tlet res = null;\n\tfor ( let i = offset, end = offset + count; i < end; i ++ ) {\n\n\t\tlet intersection;\n\t\tintersection = intersectTri( geometry, side, ray, _indirectBuffer ? _indirectBuffer[ i ] : i );\n\n\n\t\tif ( intersection && intersection.distance < dist ) {\n\n\t\t\tres = intersection;\n\t\t\tdist = intersection.distance;\n\n\t\t}\n\n\t}\n\n\treturn res;\n\n}\n\nfunction iterateOverTriangles_indirect(\n\toffset,\n\tcount,\n\tbvh,\n\tintersectsTriangleFunc,\n\tcontained,\n\tdepth,\n\ttriangle\n) {\n\n\tconst { geometry } = bvh;\n\tconst { index } = geometry;\n\tconst pos = geometry.attributes.position;\n\tfor ( let i = offset, l = count + offset; i < l; i ++ ) {\n\n\t\tlet tri;\n\t\ttri = bvh.resolveTriangleIndex( i );\n\n\t\tsetTriangle( triangle, tri * 3, index, pos );\n\t\ttriangle.needsUpdate = true;\n\n\t\tif ( intersectsTriangleFunc( triangle, tri, contained, depth ) ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t}\n\n\treturn false;\n\n}\n\nexport { intersectClosestTri_indirect, intersectTris_indirect, iterateOverTriangles_indirect };\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,2CAA2C;AACxE,SAASC,WAAW,QAAQ,kCAAkC;;AAE9D;AACA;AACA;AACA;;AAEA,SAASC,sBAAsBA,CAAEC,GAAG,EAAEC,IAAI,EAAEC,GAAG,EAAEC,MAAM,EAAEC,KAAK,EAAEC,aAAa,EAAG;EAE/E,MAAM;IAAEC,QAAQ;IAAEC;EAAgB,CAAC,GAAGP,GAAG;EACzC,KAAM,IAAIQ,CAAC,GAAGL,MAAM,EAAEM,GAAG,GAAGN,MAAM,GAAGC,KAAK,EAAEI,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAG,EAAG;IAE3D,IAAIE,EAAE,GAAGH,eAAe,GAAGA,eAAe,CAAEC,CAAC,CAAE,GAAGA,CAAC;IACnDX,YAAY,CAAES,QAAQ,EAAEL,IAAI,EAAEC,GAAG,EAAEQ,EAAE,EAAEL,aAAc,CAAC;EAGvD;AAED;AAEA,SAASM,4BAA4BA,CAAEX,GAAG,EAAEC,IAAI,EAAEC,GAAG,EAAEC,MAAM,EAAEC,KAAK,EAAG;EAEtE,MAAM;IAAEE,QAAQ;IAAEC;EAAgB,CAAC,GAAGP,GAAG;EACzC,IAAIY,IAAI,GAAGC,QAAQ;EACnB,IAAIC,GAAG,GAAG,IAAI;EACd,KAAM,IAAIN,CAAC,GAAGL,MAAM,EAAEM,GAAG,GAAGN,MAAM,GAAGC,KAAK,EAAEI,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAG,EAAG;IAE3D,IAAIO,YAAY;IAChBA,YAAY,GAAGlB,YAAY,CAAES,QAAQ,EAAEL,IAAI,EAAEC,GAAG,EAAEK,eAAe,GAAGA,eAAe,CAAEC,CAAC,CAAE,GAAGA,CAAE,CAAC;IAG9F,IAAKO,YAAY,IAAIA,YAAY,CAACC,QAAQ,GAAGJ,IAAI,EAAG;MAEnDE,GAAG,GAAGC,YAAY;MAClBH,IAAI,GAAGG,YAAY,CAACC,QAAQ;IAE7B;EAED;EAEA,OAAOF,GAAG;AAEX;AAEA,SAASG,6BAA6BA,CACrCd,MAAM,EACNC,KAAK,EACLJ,GAAG,EACHkB,sBAAsB,EACtBC,SAAS,EACTC,KAAK,EACLC,QAAQ,EACP;EAED,MAAM;IAAEf;EAAS,CAAC,GAAGN,GAAG;EACxB,MAAM;IAAEsB;EAAM,CAAC,GAAGhB,QAAQ;EAC1B,MAAMiB,GAAG,GAAGjB,QAAQ,CAACkB,UAAU,CAACC,QAAQ;EACxC,KAAM,IAAIjB,CAAC,GAAGL,MAAM,EAAEuB,CAAC,GAAGtB,KAAK,GAAGD,MAAM,EAAEK,CAAC,GAAGkB,CAAC,EAAElB,CAAC,EAAG,EAAG;IAEvD,IAAImB,GAAG;IACPA,GAAG,GAAG3B,GAAG,CAAC4B,oBAAoB,CAAEpB,CAAE,CAAC;IAEnCV,WAAW,CAAEuB,QAAQ,EAAEM,GAAG,GAAG,CAAC,EAAEL,KAAK,EAAEC,GAAI,CAAC;IAC5CF,QAAQ,CAACQ,WAAW,GAAG,IAAI;IAE3B,IAAKX,sBAAsB,CAAEG,QAAQ,EAAEM,GAAG,EAAER,SAAS,EAAEC,KAAM,CAAC,EAAG;MAEhE,OAAO,IAAI;IAEZ;EAED;EAEA,OAAO,KAAK;AAEb;AAEA,SAAST,4BAA4B,EAAEZ,sBAAsB,EAAEkB,6BAA6B"},"metadata":{},"sourceType":"module","externalDependencies":[]}