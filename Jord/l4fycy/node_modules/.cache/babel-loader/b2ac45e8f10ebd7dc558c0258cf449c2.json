{"ast":null,"code":"import { Vector3, Matrix3, Box3, Matrix4, Ray, MathUtils } from 'three';\nvar a = {\n  c: null,\n  // center\n  u: [new Vector3(), new Vector3(), new Vector3()],\n  // basis vectors\n  e: [] // half width\n\n};\nvar b = {\n  c: null,\n  // center\n  u: [new Vector3(), new Vector3(), new Vector3()],\n  // basis vectors\n  e: [] // half width\n\n};\nvar R = [[], [], []];\nvar AbsR = [[], [], []];\nvar t = [];\nvar xAxis = new Vector3();\nvar yAxis = new Vector3();\nvar zAxis = new Vector3();\nvar v1 = new Vector3();\nvar size = new Vector3();\nvar closestPoint = new Vector3();\nvar rotationMatrix = new Matrix3();\nvar aabb = new Box3();\nvar matrix = new Matrix4();\nvar inverse = new Matrix4();\nvar localRay = new Ray(); // OBB\n\nfunction OBB() {\n  var center = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector3();\n  var halfSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();\n  var rotation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Matrix3();\n  this.center = center;\n  this.halfSize = halfSize;\n  this.rotation = rotation;\n}\n\nObject.assign(OBB.prototype, {\n  set: function set(center, halfSize, rotation) {\n    this.center = center;\n    this.halfSize = halfSize;\n    this.rotation = rotation;\n    return this;\n  },\n  copy: function copy(obb) {\n    this.center.copy(obb.center);\n    this.halfSize.copy(obb.halfSize);\n    this.rotation.copy(obb.rotation);\n    return this;\n  },\n  clone: function clone() {\n    return new this.constructor().copy(this);\n  },\n  getSize: function getSize(result) {\n    return result.copy(this.halfSize).multiplyScalar(2);\n  },\n\n  /**\n   * Reference: Closest Point on OBB to Point in Real-Time Collision Detection\n   * by Christer Ericson (chapter 5.1.4)\n   */\n  clampPoint: function clampPoint(point, result) {\n    var halfSize = this.halfSize;\n    v1.subVectors(point, this.center);\n    this.rotation.extractBasis(xAxis, yAxis, zAxis); // start at the center position of the OBB\n\n    result.copy(this.center); // project the target onto the OBB axes and walk towards that point\n\n    var x = MathUtils.clamp(v1.dot(xAxis), -halfSize.x, halfSize.x);\n    result.add(xAxis.multiplyScalar(x));\n    var y = MathUtils.clamp(v1.dot(yAxis), -halfSize.y, halfSize.y);\n    result.add(yAxis.multiplyScalar(y));\n    var z = MathUtils.clamp(v1.dot(zAxis), -halfSize.z, halfSize.z);\n    result.add(zAxis.multiplyScalar(z));\n    return result;\n  },\n  containsPoint: function containsPoint(point) {\n    v1.subVectors(point, this.center);\n    this.rotation.extractBasis(xAxis, yAxis, zAxis); // project v1 onto each axis and check if these points lie inside the OBB\n\n    return Math.abs(v1.dot(xAxis)) <= this.halfSize.x && Math.abs(v1.dot(yAxis)) <= this.halfSize.y && Math.abs(v1.dot(zAxis)) <= this.halfSize.z;\n  },\n  intersectsBox3: function intersectsBox3(box3) {\n    return this.intersectsOBB(obb.fromBox3(box3));\n  },\n  intersectsSphere: function intersectsSphere(sphere) {\n    // find the point on the OBB closest to the sphere center\n    this.clampPoint(sphere.center, closestPoint); // if that point is inside the sphere, the OBB and sphere intersect\n\n    return closestPoint.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;\n  },\n\n  /**\n   * Reference: OBB-OBB Intersection in Real-Time Collision Detection\n   * by Christer Ericson (chapter 4.4.1)\n   *\n   */\n  intersectsOBB: function intersectsOBB(obb) {\n    var epsilon = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.EPSILON;\n    // prepare data structures (the code uses the same nomenclature like the reference)\n    a.c = this.center;\n    a.e[0] = this.halfSize.x;\n    a.e[1] = this.halfSize.y;\n    a.e[2] = this.halfSize.z;\n    this.rotation.extractBasis(a.u[0], a.u[1], a.u[2]);\n    b.c = obb.center;\n    b.e[0] = obb.halfSize.x;\n    b.e[1] = obb.halfSize.y;\n    b.e[2] = obb.halfSize.z;\n    obb.rotation.extractBasis(b.u[0], b.u[1], b.u[2]); // compute rotation matrix expressing b in a's coordinate frame\n\n    for (var i = 0; i < 3; i++) {\n      for (var j = 0; j < 3; j++) {\n        R[i][j] = a.u[i].dot(b.u[j]);\n      }\n    } // compute translation vector\n\n\n    v1.subVectors(b.c, a.c); // bring translation into a's coordinate frame\n\n    t[0] = v1.dot(a.u[0]);\n    t[1] = v1.dot(a.u[1]);\n    t[2] = v1.dot(a.u[2]); // compute common subexpressions. Add in an epsilon term to\n    // counteract arithmetic errors when two edges are parallel and\n    // their cross product is (near) null\n\n    for (var _i = 0; _i < 3; _i++) {\n      for (var _j = 0; _j < 3; _j++) {\n        AbsR[_i][_j] = Math.abs(R[_i][_j]) + epsilon;\n      }\n    }\n\n    var ra, rb; // test axes L = A0, L = A1, L = A2\n\n    for (var _i2 = 0; _i2 < 3; _i2++) {\n      ra = a.e[_i2];\n      rb = b.e[0] * AbsR[_i2][0] + b.e[1] * AbsR[_i2][1] + b.e[2] * AbsR[_i2][2];\n      if (Math.abs(t[_i2]) > ra + rb) return false;\n    } // test axes L = B0, L = B1, L = B2\n\n\n    for (var _i3 = 0; _i3 < 3; _i3++) {\n      ra = a.e[0] * AbsR[0][_i3] + a.e[1] * AbsR[1][_i3] + a.e[2] * AbsR[2][_i3];\n      rb = b.e[_i3];\n      if (Math.abs(t[0] * R[0][_i3] + t[1] * R[1][_i3] + t[2] * R[2][_i3]) > ra + rb) return false;\n    } // test axis L = A0 x B0\n\n\n    ra = a.e[1] * AbsR[2][0] + a.e[2] * AbsR[1][0];\n    rb = b.e[1] * AbsR[0][2] + b.e[2] * AbsR[0][1];\n    if (Math.abs(t[2] * R[1][0] - t[1] * R[2][0]) > ra + rb) return false; // test axis L = A0 x B1\n\n    ra = a.e[1] * AbsR[2][1] + a.e[2] * AbsR[1][1];\n    rb = b.e[0] * AbsR[0][2] + b.e[2] * AbsR[0][0];\n    if (Math.abs(t[2] * R[1][1] - t[1] * R[2][1]) > ra + rb) return false; // test axis L = A0 x B2\n\n    ra = a.e[1] * AbsR[2][2] + a.e[2] * AbsR[1][2];\n    rb = b.e[0] * AbsR[0][1] + b.e[1] * AbsR[0][0];\n    if (Math.abs(t[2] * R[1][2] - t[1] * R[2][2]) > ra + rb) return false; // test axis L = A1 x B0\n\n    ra = a.e[0] * AbsR[2][0] + a.e[2] * AbsR[0][0];\n    rb = b.e[1] * AbsR[1][2] + b.e[2] * AbsR[1][1];\n    if (Math.abs(t[0] * R[2][0] - t[2] * R[0][0]) > ra + rb) return false; // test axis L = A1 x B1\n\n    ra = a.e[0] * AbsR[2][1] + a.e[2] * AbsR[0][1];\n    rb = b.e[0] * AbsR[1][2] + b.e[2] * AbsR[1][0];\n    if (Math.abs(t[0] * R[2][1] - t[2] * R[0][1]) > ra + rb) return false; // test axis L = A1 x B2\n\n    ra = a.e[0] * AbsR[2][2] + a.e[2] * AbsR[0][2];\n    rb = b.e[0] * AbsR[1][1] + b.e[1] * AbsR[1][0];\n    if (Math.abs(t[0] * R[2][2] - t[2] * R[0][2]) > ra + rb) return false; // test axis L = A2 x B0\n\n    ra = a.e[0] * AbsR[1][0] + a.e[1] * AbsR[0][0];\n    rb = b.e[1] * AbsR[2][2] + b.e[2] * AbsR[2][1];\n    if (Math.abs(t[1] * R[0][0] - t[0] * R[1][0]) > ra + rb) return false; // test axis L = A2 x B1\n\n    ra = a.e[0] * AbsR[1][1] + a.e[1] * AbsR[0][1];\n    rb = b.e[0] * AbsR[2][2] + b.e[2] * AbsR[2][0];\n    if (Math.abs(t[1] * R[0][1] - t[0] * R[1][1]) > ra + rb) return false; // test axis L = A2 x B2\n\n    ra = a.e[0] * AbsR[1][2] + a.e[1] * AbsR[0][2];\n    rb = b.e[0] * AbsR[2][1] + b.e[1] * AbsR[2][0];\n    if (Math.abs(t[1] * R[0][2] - t[0] * R[1][2]) > ra + rb) return false; // since no separating axis is found, the OBBs must be intersecting\n\n    return true;\n  },\n\n  /**\n   * Reference: Testing Box Against Plane in Real-Time Collision Detection\n   * by Christer Ericson (chapter 5.2.3)\n   */\n  intersectsPlane: function intersectsPlane(plane) {\n    this.rotation.extractBasis(xAxis, yAxis, zAxis); // compute the projection interval radius of this OBB onto L(t) = this->center + t * p.normal;\n\n    var r = this.halfSize.x * Math.abs(plane.normal.dot(xAxis)) + this.halfSize.y * Math.abs(plane.normal.dot(yAxis)) + this.halfSize.z * Math.abs(plane.normal.dot(zAxis)); // compute distance of the OBB's center from the plane\n\n    var d = plane.normal.dot(this.center) - plane.constant; // Intersection occurs when distance d falls within [-r,+r] interval\n\n    return Math.abs(d) <= r;\n  },\n\n  /**\n   * Performs a ray/OBB intersection test and stores the intersection point\n   * to the given 3D vector. If no intersection is detected, *null* is returned.\n   */\n  intersectRay: function intersectRay(ray, result) {\n    // the idea is to perform the intersection test in the local space\n    // of the OBB.\n    this.getSize(size);\n    aabb.setFromCenterAndSize(v1.set(0, 0, 0), size); // create a 4x4 transformation matrix\n\n    matrix4FromRotationMatrix(matrix, this.rotation);\n    matrix.setPosition(this.center); // transform ray to the local space of the OBB\n\n    inverse.copy(matrix).invert();\n    localRay.copy(ray).applyMatrix4(inverse); // perform ray <-> AABB intersection test\n\n    if (localRay.intersectBox(aabb, result)) {\n      // transform the intersection point back to world space\n      return result.applyMatrix4(matrix);\n    } else {\n      return null;\n    }\n  },\n\n  /**\n   * Performs a ray/OBB intersection test. Returns either true or false if\n   * there is a intersection or not.\n   */\n  intersectsRay: function intersectsRay(ray) {\n    return this.intersectRay(ray, v1) !== null;\n  },\n  fromBox3: function fromBox3(box3) {\n    box3.getCenter(this.center);\n    box3.getSize(this.halfSize).multiplyScalar(0.5);\n    this.rotation.identity();\n    return this;\n  },\n  equals: function equals(obb) {\n    return obb.center.equals(this.center) && obb.halfSize.equals(this.halfSize) && obb.rotation.equals(this.rotation);\n  },\n  applyMatrix4: function applyMatrix4(matrix) {\n    var e = matrix.elements;\n    var sx = v1.set(e[0], e[1], e[2]).length();\n    var sy = v1.set(e[4], e[5], e[6]).length();\n    var sz = v1.set(e[8], e[9], e[10]).length();\n    var det = matrix.determinant();\n    if (det < 0) sx = -sx;\n    rotationMatrix.setFromMatrix4(matrix);\n    var invSX = 1 / sx;\n    var invSY = 1 / sy;\n    var invSZ = 1 / sz;\n    rotationMatrix.elements[0] *= invSX;\n    rotationMatrix.elements[1] *= invSX;\n    rotationMatrix.elements[2] *= invSX;\n    rotationMatrix.elements[3] *= invSY;\n    rotationMatrix.elements[4] *= invSY;\n    rotationMatrix.elements[5] *= invSY;\n    rotationMatrix.elements[6] *= invSZ;\n    rotationMatrix.elements[7] *= invSZ;\n    rotationMatrix.elements[8] *= invSZ;\n    this.rotation.multiply(rotationMatrix);\n    this.halfSize.x *= sx;\n    this.halfSize.y *= sy;\n    this.halfSize.z *= sz;\n    v1.setFromMatrixPosition(matrix);\n    this.center.add(v1);\n    return this;\n  }\n});\n\nfunction matrix4FromRotationMatrix(matrix4, matrix3) {\n  var e = matrix4.elements;\n  var me = matrix3.elements;\n  e[0] = me[0];\n  e[1] = me[1];\n  e[2] = me[2];\n  e[3] = 0;\n  e[4] = me[3];\n  e[5] = me[4];\n  e[6] = me[5];\n  e[7] = 0;\n  e[8] = me[6];\n  e[9] = me[7];\n  e[10] = me[8];\n  e[11] = 0;\n  e[12] = 0;\n  e[13] = 0;\n  e[14] = 0;\n  e[15] = 1;\n}\n\nvar obb = new OBB();\nexport { OBB };","map":{"version":3,"names":["Vector3","Matrix3","Box3","Matrix4","Ray","MathUtils","a","c","u","e","b","R","AbsR","t","xAxis","yAxis","zAxis","v1","size","closestPoint","rotationMatrix","aabb","matrix","inverse","localRay","OBB","center","halfSize","rotation","Object","assign","prototype","set","copy","obb","clone","constructor","getSize","result","multiplyScalar","clampPoint","point","subVectors","extractBasis","x","clamp","dot","add","y","z","containsPoint","Math","abs","intersectsBox3","box3","intersectsOBB","fromBox3","intersectsSphere","sphere","distanceToSquared","radius","epsilon","Number","EPSILON","i","j","ra","rb","intersectsPlane","plane","r","normal","d","constant","intersectRay","ray","setFromCenterAndSize","matrix4FromRotationMatrix","setPosition","invert","applyMatrix4","intersectBox","intersectsRay","getCenter","identity","equals","elements","sx","length","sy","sz","det","determinant","setFromMatrix4","invSX","invSY","invSZ","multiply","setFromMatrixPosition","matrix4","matrix3","me"],"sources":["C:/Users/Arnav/Downloads/l4fycy/node_modules/three-stdlib/math/OBB.js"],"sourcesContent":["import { Vector3, Matrix3, Box3, Matrix4, Ray, MathUtils } from 'three';\n\nvar a = {\n  c: null,\n  // center\n  u: [new Vector3(), new Vector3(), new Vector3()],\n  // basis vectors\n  e: [] // half width\n\n};\nvar b = {\n  c: null,\n  // center\n  u: [new Vector3(), new Vector3(), new Vector3()],\n  // basis vectors\n  e: [] // half width\n\n};\nvar R = [[], [], []];\nvar AbsR = [[], [], []];\nvar t = [];\nvar xAxis = new Vector3();\nvar yAxis = new Vector3();\nvar zAxis = new Vector3();\nvar v1 = new Vector3();\nvar size = new Vector3();\nvar closestPoint = new Vector3();\nvar rotationMatrix = new Matrix3();\nvar aabb = new Box3();\nvar matrix = new Matrix4();\nvar inverse = new Matrix4();\nvar localRay = new Ray(); // OBB\n\nfunction OBB(center = new Vector3(), halfSize = new Vector3(), rotation = new Matrix3()) {\n  this.center = center;\n  this.halfSize = halfSize;\n  this.rotation = rotation;\n}\n\nObject.assign(OBB.prototype, {\n  set: function (center, halfSize, rotation) {\n    this.center = center;\n    this.halfSize = halfSize;\n    this.rotation = rotation;\n    return this;\n  },\n  copy: function (obb) {\n    this.center.copy(obb.center);\n    this.halfSize.copy(obb.halfSize);\n    this.rotation.copy(obb.rotation);\n    return this;\n  },\n  clone: function () {\n    return new this.constructor().copy(this);\n  },\n  getSize: function (result) {\n    return result.copy(this.halfSize).multiplyScalar(2);\n  },\n\n  /**\n   * Reference: Closest Point on OBB to Point in Real-Time Collision Detection\n   * by Christer Ericson (chapter 5.1.4)\n   */\n  clampPoint: function (point, result) {\n    var halfSize = this.halfSize;\n    v1.subVectors(point, this.center);\n    this.rotation.extractBasis(xAxis, yAxis, zAxis); // start at the center position of the OBB\n\n    result.copy(this.center); // project the target onto the OBB axes and walk towards that point\n\n    var x = MathUtils.clamp(v1.dot(xAxis), -halfSize.x, halfSize.x);\n    result.add(xAxis.multiplyScalar(x));\n    var y = MathUtils.clamp(v1.dot(yAxis), -halfSize.y, halfSize.y);\n    result.add(yAxis.multiplyScalar(y));\n    var z = MathUtils.clamp(v1.dot(zAxis), -halfSize.z, halfSize.z);\n    result.add(zAxis.multiplyScalar(z));\n    return result;\n  },\n  containsPoint: function (point) {\n    v1.subVectors(point, this.center);\n    this.rotation.extractBasis(xAxis, yAxis, zAxis); // project v1 onto each axis and check if these points lie inside the OBB\n\n    return Math.abs(v1.dot(xAxis)) <= this.halfSize.x && Math.abs(v1.dot(yAxis)) <= this.halfSize.y && Math.abs(v1.dot(zAxis)) <= this.halfSize.z;\n  },\n  intersectsBox3: function (box3) {\n    return this.intersectsOBB(obb.fromBox3(box3));\n  },\n  intersectsSphere: function (sphere) {\n    // find the point on the OBB closest to the sphere center\n    this.clampPoint(sphere.center, closestPoint); // if that point is inside the sphere, the OBB and sphere intersect\n\n    return closestPoint.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;\n  },\n\n  /**\n   * Reference: OBB-OBB Intersection in Real-Time Collision Detection\n   * by Christer Ericson (chapter 4.4.1)\n   *\n   */\n  intersectsOBB: function (obb, epsilon = Number.EPSILON) {\n    // prepare data structures (the code uses the same nomenclature like the reference)\n    a.c = this.center;\n    a.e[0] = this.halfSize.x;\n    a.e[1] = this.halfSize.y;\n    a.e[2] = this.halfSize.z;\n    this.rotation.extractBasis(a.u[0], a.u[1], a.u[2]);\n    b.c = obb.center;\n    b.e[0] = obb.halfSize.x;\n    b.e[1] = obb.halfSize.y;\n    b.e[2] = obb.halfSize.z;\n    obb.rotation.extractBasis(b.u[0], b.u[1], b.u[2]); // compute rotation matrix expressing b in a's coordinate frame\n\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        R[i][j] = a.u[i].dot(b.u[j]);\n      }\n    } // compute translation vector\n\n\n    v1.subVectors(b.c, a.c); // bring translation into a's coordinate frame\n\n    t[0] = v1.dot(a.u[0]);\n    t[1] = v1.dot(a.u[1]);\n    t[2] = v1.dot(a.u[2]); // compute common subexpressions. Add in an epsilon term to\n    // counteract arithmetic errors when two edges are parallel and\n    // their cross product is (near) null\n\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        AbsR[i][j] = Math.abs(R[i][j]) + epsilon;\n      }\n    }\n\n    var ra, rb; // test axes L = A0, L = A1, L = A2\n\n    for (let i = 0; i < 3; i++) {\n      ra = a.e[i];\n      rb = b.e[0] * AbsR[i][0] + b.e[1] * AbsR[i][1] + b.e[2] * AbsR[i][2];\n      if (Math.abs(t[i]) > ra + rb) return false;\n    } // test axes L = B0, L = B1, L = B2\n\n\n    for (let i = 0; i < 3; i++) {\n      ra = a.e[0] * AbsR[0][i] + a.e[1] * AbsR[1][i] + a.e[2] * AbsR[2][i];\n      rb = b.e[i];\n      if (Math.abs(t[0] * R[0][i] + t[1] * R[1][i] + t[2] * R[2][i]) > ra + rb) return false;\n    } // test axis L = A0 x B0\n\n\n    ra = a.e[1] * AbsR[2][0] + a.e[2] * AbsR[1][0];\n    rb = b.e[1] * AbsR[0][2] + b.e[2] * AbsR[0][1];\n    if (Math.abs(t[2] * R[1][0] - t[1] * R[2][0]) > ra + rb) return false; // test axis L = A0 x B1\n\n    ra = a.e[1] * AbsR[2][1] + a.e[2] * AbsR[1][1];\n    rb = b.e[0] * AbsR[0][2] + b.e[2] * AbsR[0][0];\n    if (Math.abs(t[2] * R[1][1] - t[1] * R[2][1]) > ra + rb) return false; // test axis L = A0 x B2\n\n    ra = a.e[1] * AbsR[2][2] + a.e[2] * AbsR[1][2];\n    rb = b.e[0] * AbsR[0][1] + b.e[1] * AbsR[0][0];\n    if (Math.abs(t[2] * R[1][2] - t[1] * R[2][2]) > ra + rb) return false; // test axis L = A1 x B0\n\n    ra = a.e[0] * AbsR[2][0] + a.e[2] * AbsR[0][0];\n    rb = b.e[1] * AbsR[1][2] + b.e[2] * AbsR[1][1];\n    if (Math.abs(t[0] * R[2][0] - t[2] * R[0][0]) > ra + rb) return false; // test axis L = A1 x B1\n\n    ra = a.e[0] * AbsR[2][1] + a.e[2] * AbsR[0][1];\n    rb = b.e[0] * AbsR[1][2] + b.e[2] * AbsR[1][0];\n    if (Math.abs(t[0] * R[2][1] - t[2] * R[0][1]) > ra + rb) return false; // test axis L = A1 x B2\n\n    ra = a.e[0] * AbsR[2][2] + a.e[2] * AbsR[0][2];\n    rb = b.e[0] * AbsR[1][1] + b.e[1] * AbsR[1][0];\n    if (Math.abs(t[0] * R[2][2] - t[2] * R[0][2]) > ra + rb) return false; // test axis L = A2 x B0\n\n    ra = a.e[0] * AbsR[1][0] + a.e[1] * AbsR[0][0];\n    rb = b.e[1] * AbsR[2][2] + b.e[2] * AbsR[2][1];\n    if (Math.abs(t[1] * R[0][0] - t[0] * R[1][0]) > ra + rb) return false; // test axis L = A2 x B1\n\n    ra = a.e[0] * AbsR[1][1] + a.e[1] * AbsR[0][1];\n    rb = b.e[0] * AbsR[2][2] + b.e[2] * AbsR[2][0];\n    if (Math.abs(t[1] * R[0][1] - t[0] * R[1][1]) > ra + rb) return false; // test axis L = A2 x B2\n\n    ra = a.e[0] * AbsR[1][2] + a.e[1] * AbsR[0][2];\n    rb = b.e[0] * AbsR[2][1] + b.e[1] * AbsR[2][0];\n    if (Math.abs(t[1] * R[0][2] - t[0] * R[1][2]) > ra + rb) return false; // since no separating axis is found, the OBBs must be intersecting\n\n    return true;\n  },\n\n  /**\n   * Reference: Testing Box Against Plane in Real-Time Collision Detection\n   * by Christer Ericson (chapter 5.2.3)\n   */\n  intersectsPlane: function (plane) {\n    this.rotation.extractBasis(xAxis, yAxis, zAxis); // compute the projection interval radius of this OBB onto L(t) = this->center + t * p.normal;\n\n    const r = this.halfSize.x * Math.abs(plane.normal.dot(xAxis)) + this.halfSize.y * Math.abs(plane.normal.dot(yAxis)) + this.halfSize.z * Math.abs(plane.normal.dot(zAxis)); // compute distance of the OBB's center from the plane\n\n    const d = plane.normal.dot(this.center) - plane.constant; // Intersection occurs when distance d falls within [-r,+r] interval\n\n    return Math.abs(d) <= r;\n  },\n\n  /**\n   * Performs a ray/OBB intersection test and stores the intersection point\n   * to the given 3D vector. If no intersection is detected, *null* is returned.\n   */\n  intersectRay: function (ray, result) {\n    // the idea is to perform the intersection test in the local space\n    // of the OBB.\n    this.getSize(size);\n    aabb.setFromCenterAndSize(v1.set(0, 0, 0), size); // create a 4x4 transformation matrix\n\n    matrix4FromRotationMatrix(matrix, this.rotation);\n    matrix.setPosition(this.center); // transform ray to the local space of the OBB\n\n    inverse.copy(matrix).invert();\n    localRay.copy(ray).applyMatrix4(inverse); // perform ray <-> AABB intersection test\n\n    if (localRay.intersectBox(aabb, result)) {\n      // transform the intersection point back to world space\n      return result.applyMatrix4(matrix);\n    } else {\n      return null;\n    }\n  },\n\n  /**\n   * Performs a ray/OBB intersection test. Returns either true or false if\n   * there is a intersection or not.\n   */\n  intersectsRay: function (ray) {\n    return this.intersectRay(ray, v1) !== null;\n  },\n  fromBox3: function (box3) {\n    box3.getCenter(this.center);\n    box3.getSize(this.halfSize).multiplyScalar(0.5);\n    this.rotation.identity();\n    return this;\n  },\n  equals: function (obb) {\n    return obb.center.equals(this.center) && obb.halfSize.equals(this.halfSize) && obb.rotation.equals(this.rotation);\n  },\n  applyMatrix4: function (matrix) {\n    var e = matrix.elements;\n    var sx = v1.set(e[0], e[1], e[2]).length();\n    var sy = v1.set(e[4], e[5], e[6]).length();\n    var sz = v1.set(e[8], e[9], e[10]).length();\n    var det = matrix.determinant();\n    if (det < 0) sx = -sx;\n    rotationMatrix.setFromMatrix4(matrix);\n    var invSX = 1 / sx;\n    var invSY = 1 / sy;\n    var invSZ = 1 / sz;\n    rotationMatrix.elements[0] *= invSX;\n    rotationMatrix.elements[1] *= invSX;\n    rotationMatrix.elements[2] *= invSX;\n    rotationMatrix.elements[3] *= invSY;\n    rotationMatrix.elements[4] *= invSY;\n    rotationMatrix.elements[5] *= invSY;\n    rotationMatrix.elements[6] *= invSZ;\n    rotationMatrix.elements[7] *= invSZ;\n    rotationMatrix.elements[8] *= invSZ;\n    this.rotation.multiply(rotationMatrix);\n    this.halfSize.x *= sx;\n    this.halfSize.y *= sy;\n    this.halfSize.z *= sz;\n    v1.setFromMatrixPosition(matrix);\n    this.center.add(v1);\n    return this;\n  }\n});\n\nfunction matrix4FromRotationMatrix(matrix4, matrix3) {\n  var e = matrix4.elements;\n  var me = matrix3.elements;\n  e[0] = me[0];\n  e[1] = me[1];\n  e[2] = me[2];\n  e[3] = 0;\n  e[4] = me[3];\n  e[5] = me[4];\n  e[6] = me[5];\n  e[7] = 0;\n  e[8] = me[6];\n  e[9] = me[7];\n  e[10] = me[8];\n  e[11] = 0;\n  e[12] = 0;\n  e[13] = 0;\n  e[14] = 0;\n  e[15] = 1;\n}\n\nvar obb = new OBB();\n\nexport { OBB };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}