{"ast":null,"code":"import _regeneratorRuntime from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _objectSpread from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\n\nvar VRButton = /*#__PURE__*/function () {\n  function VRButton() {\n    _classCallCheck(this, VRButton);\n  }\n\n  _createClass(VRButton, null, [{\n    key: \"createButton\",\n    value: function createButton(renderer) {\n      var sessionInit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var button = document.createElement('button');\n\n      function\n      /*device*/\n      showEnterVR() {\n        var currentSession = null;\n\n        function onSessionStarted(_x) {\n          return _onSessionStarted.apply(this, arguments);\n        }\n\n        function _onSessionStarted() {\n          _onSessionStarted = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(session) {\n            return _regeneratorRuntime().wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    session.addEventListener('end', onSessionEnded);\n                    _context.next = 3;\n                    return renderer.xr.setSession(session);\n\n                  case 3:\n                    button.textContent = 'EXIT VR';\n                    currentSession = session;\n\n                  case 5:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee);\n          }));\n          return _onSessionStarted.apply(this, arguments);\n        }\n\n        function\n        /*event*/\n        onSessionEnded() {\n          currentSession.removeEventListener('end', onSessionEnded);\n          button.textContent = 'ENTER VR';\n          currentSession = null;\n        } //\n\n\n        button.style.display = '';\n        button.style.cursor = 'pointer';\n        button.style.left = 'calc(50% - 50px)';\n        button.style.width = '100px';\n        button.textContent = 'ENTER VR';\n\n        button.onmouseenter = function () {\n          button.style.opacity = '1.0';\n        };\n\n        button.onmouseleave = function () {\n          button.style.opacity = '0.5';\n        };\n\n        button.onclick = function () {\n          if (currentSession === null) {\n            var _xr; // WebXR's requestReferenceSpace only works if the corresponding feature\n            // was requested at session creation time. For simplicity, just ask for\n            // the interesting ones as optional features, but be aware that the\n            // requestReferenceSpace call will fail if it turns out to be unavailable.\n            // ('local' is always available for immersive sessions and doesn't need to\n            // be requested separately.)\n\n\n            var optionalFeatures = [sessionInit.optionalFeatures, 'local-floor', 'bounded-floor', 'hand-tracking'].flat().filter(Boolean);\n            (_xr = navigator.xr) === null || _xr === void 0 ? void 0 : _xr.requestSession('immersive-vr', _objectSpread(_objectSpread({}, sessionInit), {}, {\n              optionalFeatures: optionalFeatures\n            })).then(onSessionStarted);\n          } else {\n            currentSession.end();\n          }\n        };\n      }\n\n      function disableButton() {\n        button.style.display = '';\n        button.style.cursor = 'auto';\n        button.style.left = 'calc(50% - 75px)';\n        button.style.width = '150px';\n        button.onmouseenter = null;\n        button.onmouseleave = null;\n        button.onclick = null;\n      }\n\n      function showWebXRNotFound() {\n        disableButton();\n        button.textContent = 'VR NOT SUPPORTED';\n      }\n\n      function stylizeElement(element) {\n        element.style.position = 'absolute';\n        element.style.bottom = '20px';\n        element.style.padding = '12px 6px';\n        element.style.border = '1px solid #fff';\n        element.style.borderRadius = '4px';\n        element.style.background = 'rgba(0,0,0,0.1)';\n        element.style.color = '#fff';\n        element.style.font = 'normal 13px sans-serif';\n        element.style.textAlign = 'center';\n        element.style.opacity = '0.5';\n        element.style.outline = 'none';\n        element.style.zIndex = '999';\n      }\n\n      if ('xr' in navigator) {\n        stylizeElement(button);\n        button.id = 'VRButton';\n        button.style.display = 'none' // Query for session mode\n        ;\n        navigator.xr.isSessionSupported('immersive-vr').then(function (supported) {\n          supported ? showEnterVR() : showWebXRNotFound();\n\n          if (supported && VRButton.xrSessionIsGranted) {\n            button.click();\n          }\n        });\n        return button;\n      } else {\n        var message = document.createElement('a');\n\n        if (window.isSecureContext === false) {\n          message.href = document.location.href.replace(/^http:/, 'https:');\n          message.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\n        } else {\n          message.href = 'https://immersiveweb.dev/';\n          message.innerHTML = 'WEBXR NOT AVAILABLE';\n        }\n\n        message.style.left = 'calc(50% - 90px)';\n        message.style.width = '180px';\n        message.style.textDecoration = 'none';\n        stylizeElement(message);\n        return message;\n      }\n    }\n  }, {\n    key: \"registerSessionGrantedListener\",\n    value: function registerSessionGrantedListener() {\n      if ('xr' in navigator) {\n        navigator.xr.addEventListener('sessiongranted', function () {\n          VRButton.xrSessionIsGranted = true;\n        });\n      }\n    }\n  }]);\n\n  return VRButton;\n}();\n\n_defineProperty(VRButton, \"xrSessionIsGranted\", false);\n\nexport { VRButton };","map":{"version":3,"names":["_defineProperty","VRButton","renderer","sessionInit","button","document","createElement","showEnterVR","currentSession","onSessionStarted","session","addEventListener","onSessionEnded","xr","setSession","textContent","removeEventListener","style","display","cursor","left","width","onmouseenter","opacity","onmouseleave","onclick","_xr","optionalFeatures","flat","filter","Boolean","navigator","requestSession","then","end","disableButton","showWebXRNotFound","stylizeElement","element","position","bottom","padding","border","borderRadius","background","color","font","textAlign","outline","zIndex","id","isSessionSupported","supported","xrSessionIsGranted","click","message","window","isSecureContext","href","location","replace","innerHTML","textDecoration"],"sources":["D:/Jord/l4fycy/node_modules/three-stdlib/webxr/VRButton.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\n\nclass VRButton {\n  static createButton(renderer, sessionInit = {}) {\n    const button = document.createElement('button');\n\n    function\n      /*device*/\n    showEnterVR() {\n      let currentSession = null;\n\n      async function onSessionStarted(session) {\n        session.addEventListener('end', onSessionEnded);\n        await renderer.xr.setSession(session);\n        button.textContent = 'EXIT VR';\n        currentSession = session;\n      }\n\n      function\n        /*event*/\n      onSessionEnded() {\n        currentSession.removeEventListener('end', onSessionEnded);\n        button.textContent = 'ENTER VR';\n        currentSession = null;\n      } //\n\n\n      button.style.display = '';\n      button.style.cursor = 'pointer';\n      button.style.left = 'calc(50% - 50px)';\n      button.style.width = '100px';\n      button.textContent = 'ENTER VR';\n\n      button.onmouseenter = () => {\n        button.style.opacity = '1.0';\n      };\n\n      button.onmouseleave = () => {\n        button.style.opacity = '0.5';\n      };\n\n      button.onclick = () => {\n        if (currentSession === null) {\n          var _xr;\n\n          // WebXR's requestReferenceSpace only works if the corresponding feature\n          // was requested at session creation time. For simplicity, just ask for\n          // the interesting ones as optional features, but be aware that the\n          // requestReferenceSpace call will fail if it turns out to be unavailable.\n          // ('local' is always available for immersive sessions and doesn't need to\n          // be requested separately.)\n          const optionalFeatures = [sessionInit.optionalFeatures, 'local-floor', 'bounded-floor', 'hand-tracking'].flat().filter(Boolean);\n          (_xr = navigator.xr) === null || _xr === void 0 ? void 0 : _xr.requestSession('immersive-vr', { ...sessionInit,\n            optionalFeatures\n          }).then(onSessionStarted);\n        } else {\n          currentSession.end();\n        }\n      };\n    }\n\n    function disableButton() {\n      button.style.display = '';\n      button.style.cursor = 'auto';\n      button.style.left = 'calc(50% - 75px)';\n      button.style.width = '150px';\n      button.onmouseenter = null;\n      button.onmouseleave = null;\n      button.onclick = null;\n    }\n\n    function showWebXRNotFound() {\n      disableButton();\n      button.textContent = 'VR NOT SUPPORTED';\n    }\n\n    function stylizeElement(element) {\n      element.style.position = 'absolute';\n      element.style.bottom = '20px';\n      element.style.padding = '12px 6px';\n      element.style.border = '1px solid #fff';\n      element.style.borderRadius = '4px';\n      element.style.background = 'rgba(0,0,0,0.1)';\n      element.style.color = '#fff';\n      element.style.font = 'normal 13px sans-serif';\n      element.style.textAlign = 'center';\n      element.style.opacity = '0.5';\n      element.style.outline = 'none';\n      element.style.zIndex = '999';\n    }\n\n    if ('xr' in navigator) {\n      stylizeElement(button);\n      button.id = 'VRButton';\n      button.style.display = 'none' // Query for session mode\n      ;\n      navigator.xr.isSessionSupported('immersive-vr').then(supported => {\n        supported ? showEnterVR() : showWebXRNotFound();\n\n        if (supported && VRButton.xrSessionIsGranted) {\n          button.click();\n        }\n      });\n      return button;\n    } else {\n      const message = document.createElement('a');\n\n      if (window.isSecureContext === false) {\n        message.href = document.location.href.replace(/^http:/, 'https:');\n        message.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\n      } else {\n        message.href = 'https://immersiveweb.dev/';\n        message.innerHTML = 'WEBXR NOT AVAILABLE';\n      }\n\n      message.style.left = 'calc(50% - 90px)';\n      message.style.width = '180px';\n      message.style.textDecoration = 'none';\n      stylizeElement(message);\n      return message;\n    }\n  }\n\n  static registerSessionGrantedListener() {\n    if ('xr' in navigator) {\n      navigator.xr.addEventListener('sessiongranted', () => {\n        VRButton.xrSessionIsGranted = true;\n      });\n    }\n  }\n\n}\n\n_defineProperty(VRButton, \"xrSessionIsGranted\", false);\n\nexport { VRButton };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}