{"ast":null,"code":"import { Vector4, Vector3 } from 'three';\n/**\n * NURBS utils\n *\n * See NURBSCurve and NURBSSurface.\n **/\n\n/**************************************************************\n *\tNURBS Utils\n **************************************************************/\n\n/*\n\tFinds knot vector span.\n\n\tp : degree\n\tu : parametric value\n\tU : knot vector\n\n\treturns the span\n\t*/\n\nfunction findSpan(p, u, U) {\n  var n = U.length - p - 1;\n\n  if (u >= U[n]) {\n    return n - 1;\n  }\n\n  if (u <= U[p]) {\n    return p;\n  }\n\n  var low = p;\n  var high = n;\n  var mid = Math.floor((low + high) / 2);\n\n  while (u < U[mid] || u >= U[mid + 1]) {\n    if (u < U[mid]) {\n      high = mid;\n    } else {\n      low = mid;\n    }\n\n    mid = Math.floor((low + high) / 2);\n  }\n\n  return mid;\n}\n/*\n\tCalculate basis functions. See The NURBS Book, page 70, algorithm A2.2\n\n\tspan : span in which u lies\n\tu    : parametric point\n\tp    : degree\n\tU    : knot vector\n\n\treturns array[p+1] with basis functions values.\n\t*/\n\n\nfunction calcBasisFunctions(span, u, p, U) {\n  var N = [];\n  var left = [];\n  var right = [];\n  N[0] = 1.0;\n\n  for (var j = 1; j <= p; ++j) {\n    left[j] = u - U[span + 1 - j];\n    right[j] = U[span + j] - u;\n    var saved = 0.0;\n\n    for (var r = 0; r < j; ++r) {\n      var rv = right[r + 1];\n      var lv = left[j - r];\n      var temp = N[r] / (rv + lv);\n      N[r] = saved + rv * temp;\n      saved = lv * temp;\n    }\n\n    N[j] = saved;\n  }\n\n  return N;\n}\n/*\n\tCalculate B-Spline curve points. See The NURBS Book, page 82, algorithm A3.1.\n\n\tp : degree of B-Spline\n\tU : knot vector\n\tP : control points (x, y, z, w)\n\tu : parametric point\n\n\treturns point for given u\n\t*/\n\n\nfunction calcBSplinePoint(p, U, P, u) {\n  var span = findSpan(p, u, U);\n  var N = calcBasisFunctions(span, u, p, U);\n  var C = new Vector4(0, 0, 0, 0);\n\n  for (var j = 0; j <= p; ++j) {\n    var point = P[span - p + j];\n    var Nj = N[j];\n    var wNj = point.w * Nj;\n    C.x += point.x * wNj;\n    C.y += point.y * wNj;\n    C.z += point.z * wNj;\n    C.w += point.w * Nj;\n  }\n\n  return C;\n}\n/*\n\tCalculate basis functions derivatives. See The NURBS Book, page 72, algorithm A2.3.\n\n\tspan : span in which u lies\n\tu    : parametric point\n\tp    : degree\n\tn    : number of derivatives to calculate\n\tU    : knot vector\n\n\treturns array[n+1][p+1] with basis functions derivatives\n\t*/\n\n\nfunction calcBasisFunctionDerivatives(span, u, p, n, U) {\n  var zeroArr = [];\n\n  for (var i = 0; i <= p; ++i) {\n    zeroArr[i] = 0.0;\n  }\n\n  var ders = [];\n\n  for (var _i = 0; _i <= n; ++_i) {\n    ders[_i] = zeroArr.slice(0);\n  }\n\n  var ndu = [];\n\n  for (var _i2 = 0; _i2 <= p; ++_i2) {\n    ndu[_i2] = zeroArr.slice(0);\n  }\n\n  ndu[0][0] = 1.0;\n  var left = zeroArr.slice(0);\n  var right = zeroArr.slice(0);\n\n  for (var _j = 1; _j <= p; ++_j) {\n    left[_j] = u - U[span + 1 - _j];\n    right[_j] = U[span + _j] - u;\n    var saved = 0.0;\n\n    for (var _r = 0; _r < _j; ++_r) {\n      var rv = right[_r + 1];\n      var lv = left[_j - _r];\n      ndu[_j][_r] = rv + lv;\n      var temp = ndu[_r][_j - 1] / ndu[_j][_r];\n      ndu[_r][_j] = saved + rv * temp;\n      saved = lv * temp;\n    }\n\n    ndu[_j][_j] = saved;\n  }\n\n  for (var _j2 = 0; _j2 <= p; ++_j2) {\n    ders[0][_j2] = ndu[_j2][p];\n  }\n\n  for (var _r2 = 0; _r2 <= p; ++_r2) {\n    var s1 = 0;\n    var s2 = 1;\n    var a = [];\n\n    for (var _i3 = 0; _i3 <= p; ++_i3) {\n      a[_i3] = zeroArr.slice(0);\n    }\n\n    a[0][0] = 1.0;\n\n    for (var k = 1; k <= n; ++k) {\n      var d = 0.0;\n      var rk = _r2 - k;\n      var pk = p - k;\n\n      if (_r2 >= k) {\n        a[s2][0] = a[s1][0] / ndu[pk + 1][rk];\n        d = a[s2][0] * ndu[rk][pk];\n      }\n\n      var j1 = rk >= -1 ? 1 : -rk;\n      var j2 = _r2 - 1 <= pk ? k - 1 : p - _r2;\n\n      for (var _j3 = j1; _j3 <= j2; ++_j3) {\n        a[s2][_j3] = (a[s1][_j3] - a[s1][_j3 - 1]) / ndu[pk + 1][rk + _j3];\n        d += a[s2][_j3] * ndu[rk + _j3][pk];\n      }\n\n      if (_r2 <= pk) {\n        a[s2][k] = -a[s1][k - 1] / ndu[pk + 1][_r2];\n        d += a[s2][k] * ndu[_r2][pk];\n      }\n\n      ders[k][_r2] = d;\n      var j = s1;\n      s1 = s2;\n      s2 = j;\n    }\n  }\n\n  var r = p;\n\n  for (var _k = 1; _k <= n; ++_k) {\n    for (var _j4 = 0; _j4 <= p; ++_j4) {\n      ders[_k][_j4] *= r;\n    }\n\n    r *= p - _k;\n  }\n\n  return ders;\n}\n/*\n\t\tCalculate derivatives of a B-Spline. See The NURBS Book, page 93, algorithm A3.2.\n\n\t\tp  : degree\n\t\tU  : knot vector\n\t\tP  : control points\n\t\tu  : Parametric points\n\t\tnd : number of derivatives\n\n\t\treturns array[d+1] with derivatives\n\t\t*/\n\n\nfunction calcBSplineDerivatives(p, U, P, u, nd) {\n  var du = nd < p ? nd : p;\n  var CK = [];\n  var span = findSpan(p, u, U);\n  var nders = calcBasisFunctionDerivatives(span, u, p, du, U);\n  var Pw = [];\n\n  for (var i = 0; i < P.length; ++i) {\n    var point = P[i].clone();\n    var w = point.w;\n    point.x *= w;\n    point.y *= w;\n    point.z *= w;\n    Pw[i] = point;\n  }\n\n  for (var k = 0; k <= du; ++k) {\n    var point = Pw[span - p].clone().multiplyScalar(nders[k][0]);\n\n    for (var j = 1; j <= p; ++j) {\n      point.add(Pw[span - p + j].clone().multiplyScalar(nders[k][j]));\n    }\n\n    CK[k] = point;\n  }\n\n  for (var _k2 = du + 1; _k2 <= nd + 1; ++_k2) {\n    CK[_k2] = new Vector4(0, 0, 0);\n  }\n\n  return CK;\n}\n/*\n\tCalculate \"K over I\"\n\n\treturns k!/(i!(k-i)!)\n\t*/\n\n\nfunction calcKoverI(k, i) {\n  var nom = 1;\n\n  for (var j = 2; j <= k; ++j) {\n    nom *= j;\n  }\n\n  var denom = 1;\n\n  for (var _j5 = 2; _j5 <= i; ++_j5) {\n    denom *= _j5;\n  }\n\n  for (var _j6 = 2; _j6 <= k - i; ++_j6) {\n    denom *= _j6;\n  }\n\n  return nom / denom;\n}\n/*\n\tCalculate derivatives (0-nd) of rational curve. See The NURBS Book, page 127, algorithm A4.2.\n\n\tPders : result of function calcBSplineDerivatives\n\n\treturns array with derivatives for rational curve.\n\t*/\n\n\nfunction calcRationalCurveDerivatives(Pders) {\n  var nd = Pders.length;\n  var Aders = [];\n  var wders = [];\n\n  for (var i = 0; i < nd; ++i) {\n    var point = Pders[i];\n    Aders[i] = new Vector3(point.x, point.y, point.z);\n    wders[i] = point.w;\n  }\n\n  var CK = [];\n\n  for (var k = 0; k < nd; ++k) {\n    var v = Aders[k].clone();\n\n    for (var _i4 = 1; _i4 <= k; ++_i4) {\n      v.sub(CK[k - _i4].clone().multiplyScalar(calcKoverI(k, _i4) * wders[_i4]));\n    }\n\n    CK[k] = v.divideScalar(wders[0]);\n  }\n\n  return CK;\n}\n/*\n\tCalculate NURBS curve derivatives. See The NURBS Book, page 127, algorithm A4.2.\n\n\tp  : degree\n\tU  : knot vector\n\tP  : control points in homogeneous space\n\tu  : parametric points\n\tnd : number of derivatives\n\n\treturns array with derivatives.\n\t*/\n\n\nfunction calcNURBSDerivatives(p, U, P, u, nd) {\n  var Pders = calcBSplineDerivatives(p, U, P, u, nd);\n  return calcRationalCurveDerivatives(Pders);\n}\n/*\n\tCalculate rational B-Spline surface point. See The NURBS Book, page 134, algorithm A4.3.\n\n\tp1, p2 : degrees of B-Spline surface\n\tU1, U2 : knot vectors\n\tP      : control points (x, y, z, w)\n\tu, v   : parametric values\n\n\treturns point for given (u, v)\n\t*/\n\n\nfunction calcSurfacePoint(p, q, U, V, P, u, v, target) {\n  var uspan = findSpan(p, u, U);\n  var vspan = findSpan(q, v, V);\n  var Nu = calcBasisFunctions(uspan, u, p, U);\n  var Nv = calcBasisFunctions(vspan, v, q, V);\n  var temp = [];\n\n  for (var l = 0; l <= q; ++l) {\n    temp[l] = new Vector4(0, 0, 0, 0);\n\n    for (var k = 0; k <= p; ++k) {\n      var point = P[uspan - p + k][vspan - q + l].clone();\n      var w = point.w;\n      point.x *= w;\n      point.y *= w;\n      point.z *= w;\n      temp[l].add(point.multiplyScalar(Nu[k]));\n    }\n  }\n\n  var Sw = new Vector4(0, 0, 0, 0);\n\n  for (var _l = 0; _l <= q; ++_l) {\n    Sw.add(temp[_l].multiplyScalar(Nv[_l]));\n  }\n\n  Sw.divideScalar(Sw.w);\n  target.set(Sw.x, Sw.y, Sw.z);\n}\n\nexport { calcBSplineDerivatives, calcBSplinePoint, calcBasisFunctionDerivatives, calcBasisFunctions, calcKoverI, calcNURBSDerivatives, calcRationalCurveDerivatives, calcSurfacePoint, findSpan };","map":{"version":3,"names":["Vector4","Vector3","findSpan","p","u","U","n","length","low","high","mid","Math","floor","calcBasisFunctions","span","N","left","right","j","saved","r","rv","lv","temp","calcBSplinePoint","P","C","point","Nj","wNj","w","x","y","z","calcBasisFunctionDerivatives","zeroArr","i","ders","slice","ndu","s1","s2","a","k","d","rk","pk","j1","j2","calcBSplineDerivatives","nd","du","CK","nders","Pw","clone","multiplyScalar","add","calcKoverI","nom","denom","calcRationalCurveDerivatives","Pders","Aders","wders","v","sub","divideScalar","calcNURBSDerivatives","calcSurfacePoint","q","V","target","uspan","vspan","Nu","Nv","l","Sw","set"],"sources":["C:/Users/Arnav/Downloads/l4fycy/node_modules/three-stdlib/curves/NURBSUtils.js"],"sourcesContent":["import { Vector4, Vector3 } from 'three';\n\n/**\n * NURBS utils\n *\n * See NURBSCurve and NURBSSurface.\n **/\n\n/**************************************************************\n *\tNURBS Utils\n **************************************************************/\n\n/*\n\tFinds knot vector span.\n\n\tp : degree\n\tu : parametric value\n\tU : knot vector\n\n\treturns the span\n\t*/\n\nfunction findSpan(p, u, U) {\n  const n = U.length - p - 1;\n\n  if (u >= U[n]) {\n    return n - 1;\n  }\n\n  if (u <= U[p]) {\n    return p;\n  }\n\n  let low = p;\n  let high = n;\n  let mid = Math.floor((low + high) / 2);\n\n  while (u < U[mid] || u >= U[mid + 1]) {\n    if (u < U[mid]) {\n      high = mid;\n    } else {\n      low = mid;\n    }\n\n    mid = Math.floor((low + high) / 2);\n  }\n\n  return mid;\n}\n/*\n\tCalculate basis functions. See The NURBS Book, page 70, algorithm A2.2\n\n\tspan : span in which u lies\n\tu    : parametric point\n\tp    : degree\n\tU    : knot vector\n\n\treturns array[p+1] with basis functions values.\n\t*/\n\nfunction calcBasisFunctions(span, u, p, U) {\n  const N = [];\n  const left = [];\n  const right = [];\n  N[0] = 1.0;\n\n  for (let j = 1; j <= p; ++j) {\n    left[j] = u - U[span + 1 - j];\n    right[j] = U[span + j] - u;\n    let saved = 0.0;\n\n    for (let r = 0; r < j; ++r) {\n      const rv = right[r + 1];\n      const lv = left[j - r];\n      const temp = N[r] / (rv + lv);\n      N[r] = saved + rv * temp;\n      saved = lv * temp;\n    }\n\n    N[j] = saved;\n  }\n\n  return N;\n}\n/*\n\tCalculate B-Spline curve points. See The NURBS Book, page 82, algorithm A3.1.\n\n\tp : degree of B-Spline\n\tU : knot vector\n\tP : control points (x, y, z, w)\n\tu : parametric point\n\n\treturns point for given u\n\t*/\n\nfunction calcBSplinePoint(p, U, P, u) {\n  const span = findSpan(p, u, U);\n  const N = calcBasisFunctions(span, u, p, U);\n  const C = new Vector4(0, 0, 0, 0);\n\n  for (let j = 0; j <= p; ++j) {\n    const point = P[span - p + j];\n    const Nj = N[j];\n    const wNj = point.w * Nj;\n    C.x += point.x * wNj;\n    C.y += point.y * wNj;\n    C.z += point.z * wNj;\n    C.w += point.w * Nj;\n  }\n\n  return C;\n}\n/*\n\tCalculate basis functions derivatives. See The NURBS Book, page 72, algorithm A2.3.\n\n\tspan : span in which u lies\n\tu    : parametric point\n\tp    : degree\n\tn    : number of derivatives to calculate\n\tU    : knot vector\n\n\treturns array[n+1][p+1] with basis functions derivatives\n\t*/\n\nfunction calcBasisFunctionDerivatives(span, u, p, n, U) {\n  const zeroArr = [];\n\n  for (let i = 0; i <= p; ++i) zeroArr[i] = 0.0;\n\n  const ders = [];\n\n  for (let i = 0; i <= n; ++i) ders[i] = zeroArr.slice(0);\n\n  const ndu = [];\n\n  for (let i = 0; i <= p; ++i) ndu[i] = zeroArr.slice(0);\n\n  ndu[0][0] = 1.0;\n  const left = zeroArr.slice(0);\n  const right = zeroArr.slice(0);\n\n  for (let j = 1; j <= p; ++j) {\n    left[j] = u - U[span + 1 - j];\n    right[j] = U[span + j] - u;\n    let saved = 0.0;\n\n    for (let r = 0; r < j; ++r) {\n      const rv = right[r + 1];\n      const lv = left[j - r];\n      ndu[j][r] = rv + lv;\n      const temp = ndu[r][j - 1] / ndu[j][r];\n      ndu[r][j] = saved + rv * temp;\n      saved = lv * temp;\n    }\n\n    ndu[j][j] = saved;\n  }\n\n  for (let j = 0; j <= p; ++j) {\n    ders[0][j] = ndu[j][p];\n  }\n\n  for (let r = 0; r <= p; ++r) {\n    let s1 = 0;\n    let s2 = 1;\n    const a = [];\n\n    for (let i = 0; i <= p; ++i) {\n      a[i] = zeroArr.slice(0);\n    }\n\n    a[0][0] = 1.0;\n\n    for (let k = 1; k <= n; ++k) {\n      let d = 0.0;\n      const rk = r - k;\n      const pk = p - k;\n\n      if (r >= k) {\n        a[s2][0] = a[s1][0] / ndu[pk + 1][rk];\n        d = a[s2][0] * ndu[rk][pk];\n      }\n\n      const j1 = rk >= -1 ? 1 : -rk;\n      const j2 = r - 1 <= pk ? k - 1 : p - r;\n\n      for (let j = j1; j <= j2; ++j) {\n        a[s2][j] = (a[s1][j] - a[s1][j - 1]) / ndu[pk + 1][rk + j];\n        d += a[s2][j] * ndu[rk + j][pk];\n      }\n\n      if (r <= pk) {\n        a[s2][k] = -a[s1][k - 1] / ndu[pk + 1][r];\n        d += a[s2][k] * ndu[r][pk];\n      }\n\n      ders[k][r] = d;\n      var j = s1;\n      s1 = s2;\n      s2 = j;\n    }\n  }\n\n  var r = p;\n\n  for (let k = 1; k <= n; ++k) {\n    for (let j = 0; j <= p; ++j) {\n      ders[k][j] *= r;\n    }\n\n    r *= p - k;\n  }\n\n  return ders;\n}\n/*\n\t\tCalculate derivatives of a B-Spline. See The NURBS Book, page 93, algorithm A3.2.\n\n\t\tp  : degree\n\t\tU  : knot vector\n\t\tP  : control points\n\t\tu  : Parametric points\n\t\tnd : number of derivatives\n\n\t\treturns array[d+1] with derivatives\n\t\t*/\n\nfunction calcBSplineDerivatives(p, U, P, u, nd) {\n  const du = nd < p ? nd : p;\n  const CK = [];\n  const span = findSpan(p, u, U);\n  const nders = calcBasisFunctionDerivatives(span, u, p, du, U);\n  const Pw = [];\n\n  for (let i = 0; i < P.length; ++i) {\n    var point = P[i].clone();\n    const w = point.w;\n    point.x *= w;\n    point.y *= w;\n    point.z *= w;\n    Pw[i] = point;\n  }\n\n  for (let k = 0; k <= du; ++k) {\n    var point = Pw[span - p].clone().multiplyScalar(nders[k][0]);\n\n    for (let j = 1; j <= p; ++j) {\n      point.add(Pw[span - p + j].clone().multiplyScalar(nders[k][j]));\n    }\n\n    CK[k] = point;\n  }\n\n  for (let k = du + 1; k <= nd + 1; ++k) {\n    CK[k] = new Vector4(0, 0, 0);\n  }\n\n  return CK;\n}\n/*\n\tCalculate \"K over I\"\n\n\treturns k!/(i!(k-i)!)\n\t*/\n\nfunction calcKoverI(k, i) {\n  let nom = 1;\n\n  for (let j = 2; j <= k; ++j) {\n    nom *= j;\n  }\n\n  let denom = 1;\n\n  for (let j = 2; j <= i; ++j) {\n    denom *= j;\n  }\n\n  for (let j = 2; j <= k - i; ++j) {\n    denom *= j;\n  }\n\n  return nom / denom;\n}\n/*\n\tCalculate derivatives (0-nd) of rational curve. See The NURBS Book, page 127, algorithm A4.2.\n\n\tPders : result of function calcBSplineDerivatives\n\n\treturns array with derivatives for rational curve.\n\t*/\n\nfunction calcRationalCurveDerivatives(Pders) {\n  const nd = Pders.length;\n  const Aders = [];\n  const wders = [];\n\n  for (let i = 0; i < nd; ++i) {\n    const point = Pders[i];\n    Aders[i] = new Vector3(point.x, point.y, point.z);\n    wders[i] = point.w;\n  }\n\n  const CK = [];\n\n  for (let k = 0; k < nd; ++k) {\n    const v = Aders[k].clone();\n\n    for (let i = 1; i <= k; ++i) {\n      v.sub(CK[k - i].clone().multiplyScalar(calcKoverI(k, i) * wders[i]));\n    }\n\n    CK[k] = v.divideScalar(wders[0]);\n  }\n\n  return CK;\n}\n/*\n\tCalculate NURBS curve derivatives. See The NURBS Book, page 127, algorithm A4.2.\n\n\tp  : degree\n\tU  : knot vector\n\tP  : control points in homogeneous space\n\tu  : parametric points\n\tnd : number of derivatives\n\n\treturns array with derivatives.\n\t*/\n\nfunction calcNURBSDerivatives(p, U, P, u, nd) {\n  const Pders = calcBSplineDerivatives(p, U, P, u, nd);\n  return calcRationalCurveDerivatives(Pders);\n}\n/*\n\tCalculate rational B-Spline surface point. See The NURBS Book, page 134, algorithm A4.3.\n\n\tp1, p2 : degrees of B-Spline surface\n\tU1, U2 : knot vectors\n\tP      : control points (x, y, z, w)\n\tu, v   : parametric values\n\n\treturns point for given (u, v)\n\t*/\n\nfunction calcSurfacePoint(p, q, U, V, P, u, v, target) {\n  const uspan = findSpan(p, u, U);\n  const vspan = findSpan(q, v, V);\n  const Nu = calcBasisFunctions(uspan, u, p, U);\n  const Nv = calcBasisFunctions(vspan, v, q, V);\n  const temp = [];\n\n  for (let l = 0; l <= q; ++l) {\n    temp[l] = new Vector4(0, 0, 0, 0);\n\n    for (let k = 0; k <= p; ++k) {\n      const point = P[uspan - p + k][vspan - q + l].clone();\n      const w = point.w;\n      point.x *= w;\n      point.y *= w;\n      point.z *= w;\n      temp[l].add(point.multiplyScalar(Nu[k]));\n    }\n  }\n\n  const Sw = new Vector4(0, 0, 0, 0);\n\n  for (let l = 0; l <= q; ++l) {\n    Sw.add(temp[l].multiplyScalar(Nv[l]));\n  }\n\n  Sw.divideScalar(Sw.w);\n  target.set(Sw.x, Sw.y, Sw.z);\n}\n\nexport { calcBSplineDerivatives, calcBSplinePoint, calcBasisFunctionDerivatives, calcBasisFunctions, calcKoverI, calcNURBSDerivatives, calcRationalCurveDerivatives, calcSurfacePoint, findSpan };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}