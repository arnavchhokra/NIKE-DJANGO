{"ast":null,"code":"import { Mesh, Vector3, Matrix3 } from \"three\";\nclass PLYExporter {\n  parse(object, onDone, options) {\n    if (onDone && typeof onDone === \"object\") {\n      console.warn('THREE.PLYExporter: The options parameter is now the third argument to the \"parse\" function. See the documentation for the new API.');\n      options = onDone;\n      onDone = void 0;\n    }\n    const defaultOptions = {\n      binary: false,\n      excludeAttributes: [],\n      // normal, uv, color, index\n      littleEndian: false\n    };\n    options = Object.assign(defaultOptions, options);\n    const excludeAttributes = options.excludeAttributes;\n    let includeNormals = false;\n    let includeColors = false;\n    let includeUVs = false;\n    let vertexCount = 0;\n    let faceCount = 0;\n    object.traverse(function (child) {\n      if (child instanceof Mesh && child.isMesh) {\n        const mesh = child;\n        const geometry = mesh.geometry;\n        if (!geometry.isBufferGeometry) {\n          throw new Error(\"THREE.PLYExporter: Geometry is not of type THREE.BufferGeometry.\");\n        }\n        const vertices = geometry.getAttribute(\"position\");\n        const normals = geometry.getAttribute(\"normal\");\n        const uvs = geometry.getAttribute(\"uv\");\n        const colors = geometry.getAttribute(\"color\");\n        const indices = geometry.getIndex();\n        if (vertices === void 0) {\n          return;\n        }\n        vertexCount += vertices.count;\n        faceCount += indices ? indices.count / 3 : vertices.count / 3;\n        if (normals !== void 0) includeNormals = true;\n        if (uvs !== void 0) includeUVs = true;\n        if (colors !== void 0) includeColors = true;\n      }\n    });\n    const includeIndices = (excludeAttributes == null ? void 0 : excludeAttributes.indexOf(\"index\")) === -1;\n    includeNormals = includeNormals && (excludeAttributes == null ? void 0 : excludeAttributes.indexOf(\"normal\")) === -1;\n    includeColors = includeColors && (excludeAttributes == null ? void 0 : excludeAttributes.indexOf(\"color\")) === -1;\n    includeUVs = includeUVs && (excludeAttributes == null ? void 0 : excludeAttributes.indexOf(\"uv\")) === -1;\n    if (includeIndices && faceCount !== Math.floor(faceCount)) {\n      console.error(\"PLYExporter: Failed to generate a valid PLY file with triangle indices because the number of indices is not divisible by 3.\");\n      return null;\n    }\n    const indexByteCount = 4;\n    let header = \"ply\\nformat \".concat(options.binary ? options.littleEndian ? \"binary_little_endian\" : \"binary_big_endian\" : \"ascii\", \" 1.0\\nelement vertex \").concat(vertexCount, \"\\nproperty float x\\nproperty float y\\nproperty float z\\n\");\n    if (includeNormals) {\n      header += \"property float nx\\nproperty float ny\\nproperty float nz\\n\";\n    }\n    if (includeUVs) {\n      header += \"property float s\\nproperty float t\\n\";\n    }\n    if (includeColors) {\n      header += \"property uchar red\\nproperty uchar green\\nproperty uchar blue\\n\";\n    }\n    if (includeIndices) {\n      header += \"\".concat(\"element face \".concat(faceCount, \"\\n\"), \"property list uchar int vertex_index\\n\");\n    }\n    header += \"end_header\\n\";\n    const vertex = new Vector3();\n    const normalMatrixWorld = new Matrix3();\n    let result = null;\n    if (options.binary) {\n      const headerBin = new TextEncoder().encode(header);\n      const vertexListLength = vertexCount * (4 * 3 + (includeNormals ? 4 * 3 : 0) + (includeColors ? 3 : 0) + (includeUVs ? 4 * 2 : 0));\n      const faceListLength = includeIndices ? faceCount * (indexByteCount * 3 + 1) : 0;\n      const output = new DataView(new ArrayBuffer(headerBin.length + vertexListLength + faceListLength));\n      new Uint8Array(output.buffer).set(headerBin, 0);\n      let vOffset = headerBin.length;\n      let fOffset = headerBin.length + vertexListLength;\n      let writtenVertices = 0;\n      this.traverseMeshes(object, function (mesh, geometry) {\n        const vertices = geometry.getAttribute(\"position\");\n        const normals = geometry.getAttribute(\"normal\");\n        const uvs = geometry.getAttribute(\"uv\");\n        const colors = geometry.getAttribute(\"color\");\n        const indices = geometry.getIndex();\n        normalMatrixWorld.getNormalMatrix(mesh.matrixWorld);\n        for (let i = 0, l = vertices.count; i < l; i++) {\n          vertex.x = vertices.getX(i);\n          vertex.y = vertices.getY(i);\n          vertex.z = vertices.getZ(i);\n          vertex.applyMatrix4(mesh.matrixWorld);\n          output.setFloat32(vOffset, vertex.x, options.littleEndian);\n          vOffset += 4;\n          output.setFloat32(vOffset, vertex.y, options.littleEndian);\n          vOffset += 4;\n          output.setFloat32(vOffset, vertex.z, options.littleEndian);\n          vOffset += 4;\n          if (includeNormals) {\n            if (normals != null) {\n              vertex.x = normals.getX(i);\n              vertex.y = normals.getY(i);\n              vertex.z = normals.getZ(i);\n              vertex.applyMatrix3(normalMatrixWorld).normalize();\n              output.setFloat32(vOffset, vertex.x, options.littleEndian);\n              vOffset += 4;\n              output.setFloat32(vOffset, vertex.y, options.littleEndian);\n              vOffset += 4;\n              output.setFloat32(vOffset, vertex.z, options.littleEndian);\n              vOffset += 4;\n            } else {\n              output.setFloat32(vOffset, 0, options.littleEndian);\n              vOffset += 4;\n              output.setFloat32(vOffset, 0, options.littleEndian);\n              vOffset += 4;\n              output.setFloat32(vOffset, 0, options.littleEndian);\n              vOffset += 4;\n            }\n          }\n          if (includeUVs) {\n            if (uvs != null) {\n              output.setFloat32(vOffset, uvs.getX(i), options.littleEndian);\n              vOffset += 4;\n              output.setFloat32(vOffset, uvs.getY(i), options.littleEndian);\n              vOffset += 4;\n            } else if (!includeUVs) {\n              output.setFloat32(vOffset, 0, options.littleEndian);\n              vOffset += 4;\n              output.setFloat32(vOffset, 0, options.littleEndian);\n              vOffset += 4;\n            }\n          }\n          if (includeColors) {\n            if (colors != null) {\n              output.setUint8(vOffset, Math.floor(colors.getX(i) * 255));\n              vOffset += 1;\n              output.setUint8(vOffset, Math.floor(colors.getY(i) * 255));\n              vOffset += 1;\n              output.setUint8(vOffset, Math.floor(colors.getZ(i) * 255));\n              vOffset += 1;\n            } else {\n              output.setUint8(vOffset, 255);\n              vOffset += 1;\n              output.setUint8(vOffset, 255);\n              vOffset += 1;\n              output.setUint8(vOffset, 255);\n              vOffset += 1;\n            }\n          }\n        }\n        if (includeIndices) {\n          if (indices !== null) {\n            for (let i = 0, l = indices.count; i < l; i += 3) {\n              output.setUint8(fOffset, 3);\n              fOffset += 1;\n              output.setUint32(fOffset, indices.getX(i + 0) + writtenVertices, options.littleEndian);\n              fOffset += indexByteCount;\n              output.setUint32(fOffset, indices.getX(i + 1) + writtenVertices, options.littleEndian);\n              fOffset += indexByteCount;\n              output.setUint32(fOffset, indices.getX(i + 2) + writtenVertices, options.littleEndian);\n              fOffset += indexByteCount;\n            }\n          } else {\n            for (let i = 0, l = vertices.count; i < l; i += 3) {\n              output.setUint8(fOffset, 3);\n              fOffset += 1;\n              output.setUint32(fOffset, writtenVertices + i, options.littleEndian);\n              fOffset += indexByteCount;\n              output.setUint32(fOffset, writtenVertices + i + 1, options.littleEndian);\n              fOffset += indexByteCount;\n              output.setUint32(fOffset, writtenVertices + i + 2, options.littleEndian);\n              fOffset += indexByteCount;\n            }\n          }\n        }\n        writtenVertices += vertices.count;\n      });\n      result = output.buffer;\n    } else {\n      let writtenVertices = 0;\n      let vertexList = \"\";\n      let faceList = \"\";\n      this.traverseMeshes(object, function (mesh, geometry) {\n        const vertices = geometry.getAttribute(\"position\");\n        const normals = geometry.getAttribute(\"normal\");\n        const uvs = geometry.getAttribute(\"uv\");\n        const colors = geometry.getAttribute(\"color\");\n        const indices = geometry.getIndex();\n        normalMatrixWorld.getNormalMatrix(mesh.matrixWorld);\n        for (let i = 0, l = vertices.count; i < l; i++) {\n          vertex.x = vertices.getX(i);\n          vertex.y = vertices.getY(i);\n          vertex.z = vertices.getZ(i);\n          vertex.applyMatrix4(mesh.matrixWorld);\n          let line = vertex.x + \" \" + vertex.y + \" \" + vertex.z;\n          if (includeNormals) {\n            if (normals != null) {\n              vertex.x = normals.getX(i);\n              vertex.y = normals.getY(i);\n              vertex.z = normals.getZ(i);\n              vertex.applyMatrix3(normalMatrixWorld).normalize();\n              line += \" \" + vertex.x + \" \" + vertex.y + \" \" + vertex.z;\n            } else {\n              line += \" 0 0 0\";\n            }\n          }\n          if (includeUVs) {\n            if (uvs != null) {\n              line += \" \" + uvs.getX(i) + \" \" + uvs.getY(i);\n            } else if (includeUVs) {\n              line += \" 0 0\";\n            }\n          }\n          if (includeColors) {\n            if (colors != null) {\n              line += \" \" + Math.floor(colors.getX(i) * 255) + \" \" + Math.floor(colors.getY(i) * 255) + \" \" + Math.floor(colors.getZ(i) * 255);\n            } else {\n              line += \" 255 255 255\";\n            }\n          }\n          vertexList += line + \"\\n\";\n        }\n        if (includeIndices) {\n          if (indices !== null) {\n            for (let i = 0, l = indices.count; i < l; i += 3) {\n              faceList += \"3 \".concat(indices.getX(i + 0) + writtenVertices);\n              faceList += \" \".concat(indices.getX(i + 1) + writtenVertices);\n              faceList += \" \".concat(indices.getX(i + 2) + writtenVertices, \"\\n\");\n            }\n          } else {\n            for (let i = 0, l = vertices.count; i < l; i += 3) {\n              faceList += \"3 \".concat(writtenVertices + i, \" \").concat(writtenVertices + i + 1, \" \").concat(writtenVertices + i + 2, \"\\n\");\n            }\n          }\n          faceCount += indices ? indices.count / 3 : vertices.count / 3;\n        }\n        writtenVertices += vertices.count;\n      });\n      result = \"\".concat(header).concat(vertexList).concat(includeIndices ? \"\".concat(faceList, \"\\n\") : \"\\n\");\n    }\n    if (typeof onDone === \"function\") {\n      requestAnimationFrame(() => onDone && onDone(typeof result === \"string\" ? result : \"\"));\n    }\n    return result;\n  }\n  // Iterate over the valid meshes in the object\n  traverseMeshes(object, cb) {\n    object.traverse(function (child) {\n      if (child instanceof Mesh && child.isMesh) {\n        const mesh = child;\n        const geometry = mesh.geometry;\n        if (!geometry.isBufferGeometry) {\n          throw new Error(\"THREE.PLYExporter: Geometry is not of type THREE.BufferGeometry.\");\n        }\n        if (geometry.hasAttribute(\"position\")) {\n          cb(mesh, geometry);\n        }\n      }\n    });\n  }\n}\nexport { PLYExporter };","map":{"version":3,"names":["PLYExporter","parse","object","onDone","options","console","warn","defaultOptions","binary","excludeAttributes","littleEndian","Object","assign","includeNormals","includeColors","includeUVs","vertexCount","faceCount","traverse","child","Mesh","isMesh","mesh","geometry","isBufferGeometry","Error","vertices","getAttribute","normals","uvs","colors","indices","getIndex","count","includeIndices","indexOf","Math","floor","error","indexByteCount","header","concat","vertex","Vector3","normalMatrixWorld","Matrix3","result","headerBin","TextEncoder","encode","vertexListLength","faceListLength","output","DataView","ArrayBuffer","length","Uint8Array","buffer","set","vOffset","fOffset","writtenVertices","traverseMeshes","getNormalMatrix","matrixWorld","i","l","x","getX","y","getY","z","getZ","applyMatrix4","setFloat32","applyMatrix3","normalize","setUint8","setUint32","vertexList","faceList","line","requestAnimationFrame","cb","hasAttribute"],"sources":["D:\\Github\\NIKE-DJANGO\\Jord\\l4fycy\\node_modules\\src\\exporters\\PLYExporter.ts"],"sourcesContent":["import { BufferGeometry, Matrix3, Mesh, Object3D, Vector3 } from 'three'\n\n/**\n * https://github.com/gkjohnson/ply-exporter-js\n *\n * Usage:\n *  const exporter = new PLYExporter();\n *\n *  // second argument is a list of options\n *  exporter.parse(mesh, data => console.log(data), { binary: true, excludeAttributes: [ 'color' ], littleEndian: true });\n *\n * Format Definition:\n * http://paulbourke.net/dataformats/ply/\n */\n\nexport interface PLYExporterOptions {\n  binary?: boolean\n  excludeAttributes?: string[]\n  littleEndian?: boolean\n}\n\nclass PLYExporter {\n  public parse(\n    object: Object3D,\n    onDone: ((res: string) => void) | undefined,\n    options: PLYExporterOptions,\n  ): string | ArrayBuffer | null {\n    if (onDone && typeof onDone === 'object') {\n      console.warn(\n        'THREE.PLYExporter: The options parameter is now the third argument to the \"parse\" function. See the documentation for the new API.',\n      )\n      options = onDone\n      onDone = undefined\n    }\n\n    // Default options\n    const defaultOptions = {\n      binary: false,\n      excludeAttributes: [], // normal, uv, color, index\n      littleEndian: false,\n    }\n\n    options = Object.assign(defaultOptions, options)\n\n    const excludeAttributes = options.excludeAttributes\n    let includeNormals = false\n    let includeColors = false\n    let includeUVs = false\n\n    // count the vertices, check which properties are used,\n    // and cache the BufferGeometry\n    let vertexCount = 0\n    let faceCount = 0\n    object.traverse(function (child) {\n      if (child instanceof Mesh && child.isMesh) {\n        const mesh = child\n        const geometry = mesh.geometry\n\n        if (!geometry.isBufferGeometry) {\n          throw new Error('THREE.PLYExporter: Geometry is not of type THREE.BufferGeometry.')\n        }\n\n        const vertices = geometry.getAttribute('position')\n        const normals = geometry.getAttribute('normal')\n        const uvs = geometry.getAttribute('uv')\n        const colors = geometry.getAttribute('color')\n        const indices = geometry.getIndex()\n\n        if (vertices === undefined) {\n          return\n        }\n\n        vertexCount += vertices.count\n        faceCount += indices ? indices.count / 3 : vertices.count / 3\n\n        if (normals !== undefined) includeNormals = true\n\n        if (uvs !== undefined) includeUVs = true\n\n        if (colors !== undefined) includeColors = true\n      }\n    })\n\n    const includeIndices = excludeAttributes?.indexOf('index') === -1\n    includeNormals = includeNormals && excludeAttributes?.indexOf('normal') === -1\n    includeColors = includeColors && excludeAttributes?.indexOf('color') === -1\n    includeUVs = includeUVs && excludeAttributes?.indexOf('uv') === -1\n\n    if (includeIndices && faceCount !== Math.floor(faceCount)) {\n      // point cloud meshes will not have an index array and may not have a\n      // number of vertices that is divisble by 3 (and therefore representable\n      // as triangles)\n      console.error(\n        'PLYExporter: Failed to generate a valid PLY file with triangle indices because the ' +\n          'number of indices is not divisible by 3.',\n      )\n\n      return null\n    }\n\n    const indexByteCount = 4\n\n    let header =\n      'ply\\n' +\n      `format ${\n        options.binary ? (options.littleEndian ? 'binary_little_endian' : 'binary_big_endian') : 'ascii'\n      } 1.0\\n` +\n      `element vertex ${vertexCount}\\n` +\n      // position\n      'property float x\\n' +\n      'property float y\\n' +\n      'property float z\\n'\n\n    if (includeNormals) {\n      // normal\n      header += 'property float nx\\n' + 'property float ny\\n' + 'property float nz\\n'\n    }\n\n    if (includeUVs) {\n      // uvs\n      header += 'property float s\\n' + 'property float t\\n'\n    }\n\n    if (includeColors) {\n      // colors\n      header += 'property uchar red\\n' + 'property uchar green\\n' + 'property uchar blue\\n'\n    }\n\n    if (includeIndices) {\n      // faces\n      header += `${`element face ${faceCount}\\n`}property list uchar int vertex_index\\n`\n    }\n\n    header += 'end_header\\n'\n\n    // Generate attribute data\n    const vertex = new Vector3()\n    const normalMatrixWorld = new Matrix3()\n    let result: string | ArrayBuffer | null = null\n\n    if (options.binary) {\n      // Binary File Generation\n      const headerBin = new TextEncoder().encode(header)\n\n      // 3 position values at 4 bytes\n      // 3 normal values at 4 bytes\n      // 3 color channels with 1 byte\n      // 2 uv values at 4 bytes\n      const vertexListLength =\n        vertexCount * (4 * 3 + (includeNormals ? 4 * 3 : 0) + (includeColors ? 3 : 0) + (includeUVs ? 4 * 2 : 0))\n\n      // 1 byte shape desciptor\n      // 3 vertex indices at ${indexByteCount} bytes\n      const faceListLength = includeIndices ? faceCount * (indexByteCount * 3 + 1) : 0\n      const output = new DataView(new ArrayBuffer(headerBin.length + vertexListLength + faceListLength))\n      new Uint8Array(output.buffer).set(headerBin, 0)\n\n      let vOffset = headerBin.length\n      let fOffset = headerBin.length + vertexListLength\n      let writtenVertices = 0\n      this.traverseMeshes(object, function (mesh, geometry) {\n        const vertices = geometry.getAttribute('position')\n        const normals = geometry.getAttribute('normal')\n        const uvs = geometry.getAttribute('uv')\n        const colors = geometry.getAttribute('color')\n        const indices = geometry.getIndex()\n\n        normalMatrixWorld.getNormalMatrix(mesh.matrixWorld)\n\n        for (let i = 0, l = vertices.count; i < l; i++) {\n          vertex.x = vertices.getX(i)\n          vertex.y = vertices.getY(i)\n          vertex.z = vertices.getZ(i)\n\n          vertex.applyMatrix4(mesh.matrixWorld)\n\n          // Position information\n          output.setFloat32(vOffset, vertex.x, options.littleEndian)\n          vOffset += 4\n\n          output.setFloat32(vOffset, vertex.y, options.littleEndian)\n          vOffset += 4\n\n          output.setFloat32(vOffset, vertex.z, options.littleEndian)\n          vOffset += 4\n\n          // Normal information\n          if (includeNormals) {\n            if (normals != null) {\n              vertex.x = normals.getX(i)\n              vertex.y = normals.getY(i)\n              vertex.z = normals.getZ(i)\n\n              vertex.applyMatrix3(normalMatrixWorld).normalize()\n\n              output.setFloat32(vOffset, vertex.x, options.littleEndian)\n              vOffset += 4\n\n              output.setFloat32(vOffset, vertex.y, options.littleEndian)\n              vOffset += 4\n\n              output.setFloat32(vOffset, vertex.z, options.littleEndian)\n              vOffset += 4\n            } else {\n              output.setFloat32(vOffset, 0, options.littleEndian)\n              vOffset += 4\n\n              output.setFloat32(vOffset, 0, options.littleEndian)\n              vOffset += 4\n\n              output.setFloat32(vOffset, 0, options.littleEndian)\n              vOffset += 4\n            }\n          }\n\n          // UV information\n          if (includeUVs) {\n            if (uvs != null) {\n              output.setFloat32(vOffset, uvs.getX(i), options.littleEndian)\n              vOffset += 4\n\n              output.setFloat32(vOffset, uvs.getY(i), options.littleEndian)\n              vOffset += 4\n            } else if (!includeUVs) {\n              output.setFloat32(vOffset, 0, options.littleEndian)\n              vOffset += 4\n\n              output.setFloat32(vOffset, 0, options.littleEndian)\n              vOffset += 4\n            }\n          }\n\n          // Color information\n          if (includeColors) {\n            if (colors != null) {\n              output.setUint8(vOffset, Math.floor(colors.getX(i) * 255))\n              vOffset += 1\n\n              output.setUint8(vOffset, Math.floor(colors.getY(i) * 255))\n              vOffset += 1\n\n              output.setUint8(vOffset, Math.floor(colors.getZ(i) * 255))\n              vOffset += 1\n            } else {\n              output.setUint8(vOffset, 255)\n              vOffset += 1\n\n              output.setUint8(vOffset, 255)\n              vOffset += 1\n\n              output.setUint8(vOffset, 255)\n              vOffset += 1\n            }\n          }\n        }\n\n        if (includeIndices) {\n          // Create the face list\n\n          if (indices !== null) {\n            for (let i = 0, l = indices.count; i < l; i += 3) {\n              output.setUint8(fOffset, 3)\n              fOffset += 1\n\n              output.setUint32(fOffset, indices.getX(i + 0) + writtenVertices, options.littleEndian)\n              fOffset += indexByteCount\n\n              output.setUint32(fOffset, indices.getX(i + 1) + writtenVertices, options.littleEndian)\n              fOffset += indexByteCount\n\n              output.setUint32(fOffset, indices.getX(i + 2) + writtenVertices, options.littleEndian)\n              fOffset += indexByteCount\n            }\n          } else {\n            for (let i = 0, l = vertices.count; i < l; i += 3) {\n              output.setUint8(fOffset, 3)\n              fOffset += 1\n\n              output.setUint32(fOffset, writtenVertices + i, options.littleEndian)\n              fOffset += indexByteCount\n\n              output.setUint32(fOffset, writtenVertices + i + 1, options.littleEndian)\n              fOffset += indexByteCount\n\n              output.setUint32(fOffset, writtenVertices + i + 2, options.littleEndian)\n              fOffset += indexByteCount\n            }\n          }\n        }\n\n        // Save the amount of verts we've already written so we can offset\n        // the face index on the next mesh\n        writtenVertices += vertices.count\n      })\n\n      result = output.buffer\n    } else {\n      // Ascii File Generation\n      // count the number of vertices\n      let writtenVertices = 0\n      let vertexList = ''\n      let faceList = ''\n\n      this.traverseMeshes(object, function (mesh, geometry) {\n        const vertices = geometry.getAttribute('position')\n        const normals = geometry.getAttribute('normal')\n        const uvs = geometry.getAttribute('uv')\n        const colors = geometry.getAttribute('color')\n        const indices = geometry.getIndex()\n\n        normalMatrixWorld.getNormalMatrix(mesh.matrixWorld)\n\n        // form each line\n        for (let i = 0, l = vertices.count; i < l; i++) {\n          vertex.x = vertices.getX(i)\n          vertex.y = vertices.getY(i)\n          vertex.z = vertices.getZ(i)\n\n          vertex.applyMatrix4(mesh.matrixWorld)\n\n          // Position information\n          let line = vertex.x + ' ' + vertex.y + ' ' + vertex.z\n\n          // Normal information\n          if (includeNormals) {\n            if (normals != null) {\n              vertex.x = normals.getX(i)\n              vertex.y = normals.getY(i)\n              vertex.z = normals.getZ(i)\n\n              vertex.applyMatrix3(normalMatrixWorld).normalize()\n\n              line += ' ' + vertex.x + ' ' + vertex.y + ' ' + vertex.z\n            } else {\n              line += ' 0 0 0'\n            }\n          }\n\n          // UV information\n          if (includeUVs) {\n            if (uvs != null) {\n              line += ' ' + uvs.getX(i) + ' ' + uvs.getY(i)\n            } else if (includeUVs) {\n              line += ' 0 0'\n            }\n          }\n\n          // Color information\n          if (includeColors) {\n            if (colors != null) {\n              line +=\n                ' ' +\n                Math.floor(colors.getX(i) * 255) +\n                ' ' +\n                Math.floor(colors.getY(i) * 255) +\n                ' ' +\n                Math.floor(colors.getZ(i) * 255)\n            } else {\n              line += ' 255 255 255'\n            }\n          }\n\n          vertexList += line + '\\n'\n        }\n\n        // Create the face list\n        if (includeIndices) {\n          if (indices !== null) {\n            for (let i = 0, l = indices.count; i < l; i += 3) {\n              faceList += `3 ${indices.getX(i + 0) + writtenVertices}`\n              faceList += ` ${indices.getX(i + 1) + writtenVertices}`\n              faceList += ` ${indices.getX(i + 2) + writtenVertices}\\n`\n            }\n          } else {\n            for (let i = 0, l = vertices.count; i < l; i += 3) {\n              faceList += `3 ${writtenVertices + i} ${writtenVertices + i + 1} ${writtenVertices + i + 2}\\n`\n            }\n          }\n\n          faceCount += indices ? indices.count / 3 : vertices.count / 3\n        }\n\n        writtenVertices += vertices.count\n      })\n\n      result = `${header}${vertexList}${includeIndices ? `${faceList}\\n` : '\\n'}`\n    }\n\n    if (typeof onDone === 'function') {\n      requestAnimationFrame(() => onDone && onDone(typeof result === 'string' ? result : ''))\n    }\n\n    return result\n  }\n\n  // Iterate over the valid meshes in the object\n  private traverseMeshes(object: Object3D, cb: (mesh: Mesh, geometry: BufferGeometry) => void): void {\n    object.traverse(function (child) {\n      if (child instanceof Mesh && child.isMesh) {\n        const mesh = child\n        const geometry = mesh.geometry\n\n        if (!geometry.isBufferGeometry) {\n          throw new Error('THREE.PLYExporter: Geometry is not of type THREE.BufferGeometry.')\n        }\n\n        if (geometry.hasAttribute('position')) {\n          cb(mesh, geometry)\n        }\n      }\n    })\n  }\n}\n\nexport { PLYExporter }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}