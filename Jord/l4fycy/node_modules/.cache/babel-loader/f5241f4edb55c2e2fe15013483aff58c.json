{"ast":null,"code":"import _createClass from \"D:/Github/NIKE-DJANGO/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"D:/Github/NIKE-DJANGO/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"D:/Github/NIKE-DJANGO/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"D:/Github/NIKE-DJANGO/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { ShaderMaterial, Vector3, Color, Vector2 } from 'three';\n\nvar SpotLightMaterial = /*#__PURE__*/function (_ShaderMaterial) {\n  _inherits(SpotLightMaterial, _ShaderMaterial);\n\n  var _super = _createSuper(SpotLightMaterial);\n\n  function SpotLightMaterial() {\n    _classCallCheck(this, SpotLightMaterial);\n\n    return _super.call(this, {\n      uniforms: {\n        depth: {\n          value: null\n        },\n        opacity: {\n          value: 1\n        },\n        attenuation: {\n          value: 2.5\n        },\n        anglePower: {\n          value: 12\n        },\n        spotPosition: {\n          value: new Vector3(0, 0, 0)\n        },\n        lightColor: {\n          value: new Color('white')\n        },\n        cameraNear: {\n          value: 0\n        },\n        cameraFar: {\n          value: 1\n        },\n        resolution: {\n          value: new Vector2(0, 0)\n        }\n      },\n      transparent: true,\n      depthWrite: false,\n      vertexShader:\n      /* glsl */\n      \"\\n      varying vec3 vNormal;\\n      varying vec3 vWorldPosition;\\n      varying float vViewZ;\\n      varying float vIntensity;\\n      uniform vec3 spotPosition;\\n      uniform float attenuation;      \\n\\n      void main() {\\n        // compute intensity\\n        vNormal = normalize( normalMatrix * normal );\\n        vec4 worldPosition\\t= modelMatrix * vec4( position, 1.0 );\\n        vWorldPosition = worldPosition.xyz;\\n        vec4 viewPosition = viewMatrix * worldPosition;\\n        vViewZ = viewPosition.z;\\n        float intensity\\t= distance(worldPosition.xyz, spotPosition) / attenuation;\\n        intensity\\t= 1.0 - clamp(intensity, 0.0, 1.0);\\n        vIntensity = intensity;        \\n        // set gl_Position\\n        gl_Position\\t= projectionMatrix * viewPosition;\\n\\n      }\",\n      fragmentShader:\n      /* glsl */\n      \"\\n      #include <packing>\\n\\n      varying vec3 vNormal;\\n      varying vec3 vWorldPosition;\\n      uniform vec3 lightColor;\\n      uniform vec3 spotPosition;\\n      uniform float attenuation;\\n      uniform float anglePower;\\n      uniform sampler2D depth;\\n      uniform vec2 resolution;\\n      uniform float cameraNear;\\n      uniform float cameraFar;\\n      varying float vViewZ;\\n      varying float vIntensity;\\n      uniform float opacity;\\n\\n      float readDepth( sampler2D depthSampler, vec2 coord ) {\\n        float fragCoordZ = texture2D( depthSampler, coord ).x;\\n        float viewZ = perspectiveDepthToViewZ(fragCoordZ, cameraNear, cameraFar);\\n        return viewZ;\\n      }\\n\\n      void main() {\\n        float d = 1.0;\\n        bool isSoft = resolution[0] > 0.0 && resolution[1] > 0.0;\\n        if (isSoft) {\\n          vec2 sUv = gl_FragCoord.xy / resolution;\\n          d = readDepth(depth, sUv);\\n        }\\n        float intensity = vIntensity;\\n        vec3 normal\\t= vec3(vNormal.x, vNormal.y, abs(vNormal.z));\\n        float angleIntensity\\t= pow( dot(normal, vec3(0.0, 0.0, 1.0)), anglePower );\\n        intensity\\t*= angleIntensity;\\n        // fades when z is close to sampled depth, meaning the cone is intersecting existing geometry\\n        if (isSoft) {\\n          intensity\\t*= smoothstep(0., 1., vViewZ - d);\\n        }\\n        gl_FragColor = vec4(lightColor, intensity * opacity);\\n\\n        #include <tonemapping_fragment>\\n\\t      #include <encodings_fragment>\\n      }\"\n    });\n  }\n\n  return _createClass(SpotLightMaterial);\n}(ShaderMaterial);\n\nexport { SpotLightMaterial };","map":{"version":3,"names":["ShaderMaterial","Vector3","Color","Vector2","SpotLightMaterial","uniforms","depth","value","opacity","attenuation","anglePower","spotPosition","lightColor","cameraNear","cameraFar","resolution","transparent","depthWrite","vertexShader","fragmentShader"],"sources":["D:/Github/NIKE-DJANGO/Jord/l4fycy/node_modules/@react-three/drei/materials/SpotLightMaterial.js"],"sourcesContent":["import { ShaderMaterial, Vector3, Color, Vector2 } from 'three';\r\n\r\nclass SpotLightMaterial extends ShaderMaterial {\r\n  constructor() {\r\n    super({\r\n      uniforms: {\r\n        depth: {\r\n          value: null\r\n        },\r\n        opacity: {\r\n          value: 1\r\n        },\r\n        attenuation: {\r\n          value: 2.5\r\n        },\r\n        anglePower: {\r\n          value: 12\r\n        },\r\n        spotPosition: {\r\n          value: new Vector3(0, 0, 0)\r\n        },\r\n        lightColor: {\r\n          value: new Color('white')\r\n        },\r\n        cameraNear: {\r\n          value: 0\r\n        },\r\n        cameraFar: {\r\n          value: 1\r\n        },\r\n        resolution: {\r\n          value: new Vector2(0, 0)\r\n        }\r\n      },\r\n      transparent: true,\r\n      depthWrite: false,\r\n      vertexShader:\r\n      /* glsl */\r\n      `\r\n      varying vec3 vNormal;\r\n      varying vec3 vWorldPosition;\r\n      varying float vViewZ;\r\n      varying float vIntensity;\r\n      uniform vec3 spotPosition;\r\n      uniform float attenuation;      \r\n\r\n      void main() {\r\n        // compute intensity\r\n        vNormal = normalize( normalMatrix * normal );\r\n        vec4 worldPosition\t= modelMatrix * vec4( position, 1.0 );\r\n        vWorldPosition = worldPosition.xyz;\r\n        vec4 viewPosition = viewMatrix * worldPosition;\r\n        vViewZ = viewPosition.z;\r\n        float intensity\t= distance(worldPosition.xyz, spotPosition) / attenuation;\r\n        intensity\t= 1.0 - clamp(intensity, 0.0, 1.0);\r\n        vIntensity = intensity;        \r\n        // set gl_Position\r\n        gl_Position\t= projectionMatrix * viewPosition;\r\n\r\n      }`,\r\n      fragmentShader:\r\n      /* glsl */\r\n      `\r\n      #include <packing>\r\n\r\n      varying vec3 vNormal;\r\n      varying vec3 vWorldPosition;\r\n      uniform vec3 lightColor;\r\n      uniform vec3 spotPosition;\r\n      uniform float attenuation;\r\n      uniform float anglePower;\r\n      uniform sampler2D depth;\r\n      uniform vec2 resolution;\r\n      uniform float cameraNear;\r\n      uniform float cameraFar;\r\n      varying float vViewZ;\r\n      varying float vIntensity;\r\n      uniform float opacity;\r\n\r\n      float readDepth( sampler2D depthSampler, vec2 coord ) {\r\n        float fragCoordZ = texture2D( depthSampler, coord ).x;\r\n        float viewZ = perspectiveDepthToViewZ(fragCoordZ, cameraNear, cameraFar);\r\n        return viewZ;\r\n      }\r\n\r\n      void main() {\r\n        float d = 1.0;\r\n        bool isSoft = resolution[0] > 0.0 && resolution[1] > 0.0;\r\n        if (isSoft) {\r\n          vec2 sUv = gl_FragCoord.xy / resolution;\r\n          d = readDepth(depth, sUv);\r\n        }\r\n        float intensity = vIntensity;\r\n        vec3 normal\t= vec3(vNormal.x, vNormal.y, abs(vNormal.z));\r\n        float angleIntensity\t= pow( dot(normal, vec3(0.0, 0.0, 1.0)), anglePower );\r\n        intensity\t*= angleIntensity;\r\n        // fades when z is close to sampled depth, meaning the cone is intersecting existing geometry\r\n        if (isSoft) {\r\n          intensity\t*= smoothstep(0., 1., vViewZ - d);\r\n        }\r\n        gl_FragColor = vec4(lightColor, intensity * opacity);\r\n\r\n        #include <tonemapping_fragment>\r\n\t      #include <encodings_fragment>\r\n      }`\r\n    });\r\n  }\r\n\r\n}\r\n\r\nexport { SpotLightMaterial };\r\n"],"mappings":";;;;AAAA,SAASA,cAAT,EAAyBC,OAAzB,EAAkCC,KAAlC,EAAyCC,OAAzC,QAAwD,OAAxD;;IAEMC,iB;;;;;EACJ,6BAAc;IAAA;;IAAA,yBACN;MACJC,QAAQ,EAAE;QACRC,KAAK,EAAE;UACLC,KAAK,EAAE;QADF,CADC;QAIRC,OAAO,EAAE;UACPD,KAAK,EAAE;QADA,CAJD;QAORE,WAAW,EAAE;UACXF,KAAK,EAAE;QADI,CAPL;QAURG,UAAU,EAAE;UACVH,KAAK,EAAE;QADG,CAVJ;QAaRI,YAAY,EAAE;UACZJ,KAAK,EAAE,IAAIN,OAAJ,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB;QADK,CAbN;QAgBRW,UAAU,EAAE;UACVL,KAAK,EAAE,IAAIL,KAAJ,CAAU,OAAV;QADG,CAhBJ;QAmBRW,UAAU,EAAE;UACVN,KAAK,EAAE;QADG,CAnBJ;QAsBRO,SAAS,EAAE;UACTP,KAAK,EAAE;QADE,CAtBH;QAyBRQ,UAAU,EAAE;UACVR,KAAK,EAAE,IAAIJ,OAAJ,CAAY,CAAZ,EAAe,CAAf;QADG;MAzBJ,CADN;MA8BJa,WAAW,EAAE,IA9BT;MA+BJC,UAAU,EAAE,KA/BR;MAgCJC,YAAY;MACZ;MADY,yxBAhCR;MAwDJC,cAAc;MACd;MADc;IAxDV,CADM;EAuGb;;;EAxG6BnB,c;;AA4GhC,SAASI,iBAAT"},"metadata":{},"sourceType":"module"}