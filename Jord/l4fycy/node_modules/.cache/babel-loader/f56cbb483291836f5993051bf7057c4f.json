{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TreeBuilder = void 0;\n\nvar cst_1 = require(\"../../cst/cst\");\n\nvar noop_1 = __importDefault(require(\"lodash/noop\"));\n\nvar has_1 = __importDefault(require(\"lodash/has\"));\n\nvar keys_1 = __importDefault(require(\"lodash/keys\"));\n\nvar isUndefined_1 = __importDefault(require(\"lodash/isUndefined\"));\n\nvar cst_visitor_1 = require(\"../../cst/cst_visitor\");\n\nvar parser_1 = require(\"../parser\");\n/**\n * This trait is responsible for the CST building logic.\n */\n\n\nvar TreeBuilder =\n/** @class */\nfunction () {\n  function TreeBuilder() {}\n\n  TreeBuilder.prototype.initTreeBuilder = function (config) {\n    this.CST_STACK = []; // outputCst is no longer exposed/defined in the pubic API\n\n    this.outputCst = config.outputCst;\n    this.nodeLocationTracking = (0, has_1.default)(config, \"nodeLocationTracking\") ? config.nodeLocationTracking // assumes end user provides the correct config value/type\n    : parser_1.DEFAULT_PARSER_CONFIG.nodeLocationTracking;\n\n    if (!this.outputCst) {\n      this.cstInvocationStateUpdate = noop_1.default;\n      this.cstFinallyStateUpdate = noop_1.default;\n      this.cstPostTerminal = noop_1.default;\n      this.cstPostNonTerminal = noop_1.default;\n      this.cstPostRule = noop_1.default;\n    } else {\n      if (/full/i.test(this.nodeLocationTracking)) {\n        if (this.recoveryEnabled) {\n          this.setNodeLocationFromToken = cst_1.setNodeLocationFull;\n          this.setNodeLocationFromNode = cst_1.setNodeLocationFull;\n          this.cstPostRule = noop_1.default;\n          this.setInitialNodeLocation = this.setInitialNodeLocationFullRecovery;\n        } else {\n          this.setNodeLocationFromToken = noop_1.default;\n          this.setNodeLocationFromNode = noop_1.default;\n          this.cstPostRule = this.cstPostRuleFull;\n          this.setInitialNodeLocation = this.setInitialNodeLocationFullRegular;\n        }\n      } else if (/onlyOffset/i.test(this.nodeLocationTracking)) {\n        if (this.recoveryEnabled) {\n          this.setNodeLocationFromToken = cst_1.setNodeLocationOnlyOffset;\n          this.setNodeLocationFromNode = cst_1.setNodeLocationOnlyOffset;\n          this.cstPostRule = noop_1.default;\n          this.setInitialNodeLocation = this.setInitialNodeLocationOnlyOffsetRecovery;\n        } else {\n          this.setNodeLocationFromToken = noop_1.default;\n          this.setNodeLocationFromNode = noop_1.default;\n          this.cstPostRule = this.cstPostRuleOnlyOffset;\n          this.setInitialNodeLocation = this.setInitialNodeLocationOnlyOffsetRegular;\n        }\n      } else if (/none/i.test(this.nodeLocationTracking)) {\n        this.setNodeLocationFromToken = noop_1.default;\n        this.setNodeLocationFromNode = noop_1.default;\n        this.cstPostRule = noop_1.default;\n        this.setInitialNodeLocation = noop_1.default;\n      } else {\n        throw Error(\"Invalid <nodeLocationTracking> config option: \\\"\".concat(config.nodeLocationTracking, \"\\\"\"));\n      }\n    }\n  };\n\n  TreeBuilder.prototype.setInitialNodeLocationOnlyOffsetRecovery = function (cstNode) {\n    cstNode.location = {\n      startOffset: NaN,\n      endOffset: NaN\n    };\n  };\n\n  TreeBuilder.prototype.setInitialNodeLocationOnlyOffsetRegular = function (cstNode) {\n    cstNode.location = {\n      // without error recovery the starting Location of a new CstNode is guaranteed\n      // To be the next Token's startOffset (for valid inputs).\n      // For invalid inputs there won't be any CSTOutput so this potential\n      // inaccuracy does not matter\n      startOffset: this.LA(1).startOffset,\n      endOffset: NaN\n    };\n  };\n\n  TreeBuilder.prototype.setInitialNodeLocationFullRecovery = function (cstNode) {\n    cstNode.location = {\n      startOffset: NaN,\n      startLine: NaN,\n      startColumn: NaN,\n      endOffset: NaN,\n      endLine: NaN,\n      endColumn: NaN\n    };\n  };\n  /**\n     *  @see setInitialNodeLocationOnlyOffsetRegular for explanation why this work\n        * @param cstNode\n     */\n\n\n  TreeBuilder.prototype.setInitialNodeLocationFullRegular = function (cstNode) {\n    var nextToken = this.LA(1);\n    cstNode.location = {\n      startOffset: nextToken.startOffset,\n      startLine: nextToken.startLine,\n      startColumn: nextToken.startColumn,\n      endOffset: NaN,\n      endLine: NaN,\n      endColumn: NaN\n    };\n  };\n\n  TreeBuilder.prototype.cstInvocationStateUpdate = function (fullRuleName) {\n    var cstNode = {\n      name: fullRuleName,\n      children: Object.create(null)\n    };\n    this.setInitialNodeLocation(cstNode);\n    this.CST_STACK.push(cstNode);\n  };\n\n  TreeBuilder.prototype.cstFinallyStateUpdate = function () {\n    this.CST_STACK.pop();\n  };\n\n  TreeBuilder.prototype.cstPostRuleFull = function (ruleCstNode) {\n    // casts to `required<CstNodeLocation>` are safe because `cstPostRuleFull` should only be invoked when full location is enabled\n    var prevToken = this.LA(0);\n    var loc = ruleCstNode.location; // If this condition is true it means we consumed at least one Token\n    // In this CstNode.\n\n    if (loc.startOffset <= prevToken.startOffset === true) {\n      loc.endOffset = prevToken.endOffset;\n      loc.endLine = prevToken.endLine;\n      loc.endColumn = prevToken.endColumn;\n    } // \"empty\" CstNode edge case\n    else {\n      loc.startOffset = NaN;\n      loc.startLine = NaN;\n      loc.startColumn = NaN;\n    }\n  };\n\n  TreeBuilder.prototype.cstPostRuleOnlyOffset = function (ruleCstNode) {\n    var prevToken = this.LA(0); // `location' is not null because `cstPostRuleOnlyOffset` will only be invoked when location tracking is enabled.\n\n    var loc = ruleCstNode.location; // If this condition is true it means we consumed at least one Token\n    // In this CstNode.\n\n    if (loc.startOffset <= prevToken.startOffset === true) {\n      loc.endOffset = prevToken.endOffset;\n    } // \"empty\" CstNode edge case\n    else {\n      loc.startOffset = NaN;\n    }\n  };\n\n  TreeBuilder.prototype.cstPostTerminal = function (key, consumedToken) {\n    var rootCst = this.CST_STACK[this.CST_STACK.length - 1];\n    (0, cst_1.addTerminalToCst)(rootCst, consumedToken, key); // This is only used when **both** error recovery and CST Output are enabled.\n\n    this.setNodeLocationFromToken(rootCst.location, consumedToken);\n  };\n\n  TreeBuilder.prototype.cstPostNonTerminal = function (ruleCstResult, ruleName) {\n    var preCstNode = this.CST_STACK[this.CST_STACK.length - 1];\n    (0, cst_1.addNoneTerminalToCst)(preCstNode, ruleName, ruleCstResult); // This is only used when **both** error recovery and CST Output are enabled.\n\n    this.setNodeLocationFromNode(preCstNode.location, ruleCstResult.location);\n  };\n\n  TreeBuilder.prototype.getBaseCstVisitorConstructor = function () {\n    if ((0, isUndefined_1.default)(this.baseCstVisitorConstructor)) {\n      var newBaseCstVisitorConstructor = (0, cst_visitor_1.createBaseSemanticVisitorConstructor)(this.className, (0, keys_1.default)(this.gastProductionsCache));\n      this.baseCstVisitorConstructor = newBaseCstVisitorConstructor;\n      return newBaseCstVisitorConstructor;\n    }\n\n    return this.baseCstVisitorConstructor;\n  };\n\n  TreeBuilder.prototype.getBaseCstVisitorConstructorWithDefaults = function () {\n    if ((0, isUndefined_1.default)(this.baseCstVisitorWithDefaultsConstructor)) {\n      var newConstructor = (0, cst_visitor_1.createBaseVisitorConstructorWithDefaults)(this.className, (0, keys_1.default)(this.gastProductionsCache), this.getBaseCstVisitorConstructor());\n      this.baseCstVisitorWithDefaultsConstructor = newConstructor;\n      return newConstructor;\n    }\n\n    return this.baseCstVisitorWithDefaultsConstructor;\n  };\n\n  TreeBuilder.prototype.getLastExplicitRuleShortName = function () {\n    var ruleStack = this.RULE_STACK;\n    return ruleStack[ruleStack.length - 1];\n  };\n\n  TreeBuilder.prototype.getPreviousExplicitRuleShortName = function () {\n    var ruleStack = this.RULE_STACK;\n    return ruleStack[ruleStack.length - 2];\n  };\n\n  TreeBuilder.prototype.getLastExplicitRuleOccurrenceIndex = function () {\n    var occurrenceStack = this.RULE_OCCURRENCE_STACK;\n    return occurrenceStack[occurrenceStack.length - 1];\n  };\n\n  return TreeBuilder;\n}();\n\nexports.TreeBuilder = TreeBuilder;","map":{"version":3,"mappings":"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","names":["TreeBuilder","config","CST_STACK","outputCst","nodeLocationTracking","parser_1","cstInvocationStateUpdate","noop_1","cstFinallyStateUpdate","cstPostTerminal","cstPostNonTerminal","cstPostRule","test","recoveryEnabled","setNodeLocationFromToken","cst_1","setNodeLocationFromNode","setInitialNodeLocation","setInitialNodeLocationFullRecovery","cstPostRuleFull","setInitialNodeLocationFullRegular","setInitialNodeLocationOnlyOffsetRecovery","cstPostRuleOnlyOffset","setInitialNodeLocationOnlyOffsetRegular","Error","cstNode","location","startOffset","NaN","endOffset","LA","startLine","startColumn","endLine","endColumn","nextToken","fullRuleName","name","children","Object","create","push","pop","ruleCstNode","prevToken","loc","key","consumedToken","rootCst","length","ruleCstResult","ruleName","preCstNode","baseCstVisitorConstructor","newBaseCstVisitorConstructor","className","gastProductionsCache","baseCstVisitorWithDefaultsConstructor","newConstructor","getBaseCstVisitorConstructor","ruleStack","RULE_STACK","occurrenceStack","RULE_OCCURRENCE_STACK","exports"],"sources":["C:\\Users\\Arnav\\Downloads\\l4fycy\\node_modules\\chevrotain\\src\\parse\\parser\\traits\\tree_builder.ts"],"sourcesContent":["import {\n  addNoneTerminalToCst,\n  addTerminalToCst,\n  setNodeLocationFull,\n  setNodeLocationOnlyOffset\n} from \"../../cst/cst\"\nimport noop from \"lodash/noop\"\nimport has from \"lodash/has\"\nimport keys from \"lodash/keys\"\nimport isUndefined from \"lodash/isUndefined\"\nimport {\n  createBaseSemanticVisitorConstructor,\n  createBaseVisitorConstructorWithDefaults\n} from \"../../cst/cst_visitor\"\nimport {\n  CstNode,\n  CstNodeLocation,\n  ICstVisitor,\n  IParserConfig,\n  IToken,\n  nodeLocationTrackingOptions\n} from \"@chevrotain/types\"\nimport { MixedInParser } from \"./parser_traits\"\nimport { DEFAULT_PARSER_CONFIG } from \"../parser\"\n\n/**\n * This trait is responsible for the CST building logic.\n */\nexport class TreeBuilder {\n  outputCst: boolean\n  CST_STACK: CstNode[]\n  baseCstVisitorConstructor: Function\n  baseCstVisitorWithDefaultsConstructor: Function\n\n  // dynamically assigned Methods\n  setNodeLocationFromNode: (\n    nodeLocation: CstNodeLocation,\n    locationInformation: CstNodeLocation\n  ) => void\n  setNodeLocationFromToken: (\n    nodeLocation: CstNodeLocation,\n    locationInformation: CstNodeLocation\n  ) => void\n  cstPostRule: (this: MixedInParser, ruleCstNode: CstNode) => void\n\n  setInitialNodeLocation: (cstNode: CstNode) => void\n  nodeLocationTracking: nodeLocationTrackingOptions\n\n  initTreeBuilder(this: MixedInParser, config: IParserConfig) {\n    this.CST_STACK = []\n\n    // outputCst is no longer exposed/defined in the pubic API\n    this.outputCst = (config as any).outputCst\n\n    this.nodeLocationTracking = has(config, \"nodeLocationTracking\")\n      ? (config.nodeLocationTracking as nodeLocationTrackingOptions) // assumes end user provides the correct config value/type\n      : DEFAULT_PARSER_CONFIG.nodeLocationTracking\n\n    if (!this.outputCst) {\n      this.cstInvocationStateUpdate = noop\n      this.cstFinallyStateUpdate = noop\n      this.cstPostTerminal = noop\n      this.cstPostNonTerminal = noop\n      this.cstPostRule = noop\n    } else {\n      if (/full/i.test(this.nodeLocationTracking)) {\n        if (this.recoveryEnabled) {\n          this.setNodeLocationFromToken = setNodeLocationFull\n          this.setNodeLocationFromNode = setNodeLocationFull\n          this.cstPostRule = noop\n          this.setInitialNodeLocation = this.setInitialNodeLocationFullRecovery\n        } else {\n          this.setNodeLocationFromToken = noop\n          this.setNodeLocationFromNode = noop\n          this.cstPostRule = this.cstPostRuleFull\n          this.setInitialNodeLocation = this.setInitialNodeLocationFullRegular\n        }\n      } else if (/onlyOffset/i.test(this.nodeLocationTracking)) {\n        if (this.recoveryEnabled) {\n          this.setNodeLocationFromToken = <any>setNodeLocationOnlyOffset\n          this.setNodeLocationFromNode = <any>setNodeLocationOnlyOffset\n          this.cstPostRule = noop\n          this.setInitialNodeLocation =\n            this.setInitialNodeLocationOnlyOffsetRecovery\n        } else {\n          this.setNodeLocationFromToken = noop\n          this.setNodeLocationFromNode = noop\n          this.cstPostRule = this.cstPostRuleOnlyOffset\n          this.setInitialNodeLocation =\n            this.setInitialNodeLocationOnlyOffsetRegular\n        }\n      } else if (/none/i.test(this.nodeLocationTracking)) {\n        this.setNodeLocationFromToken = noop\n        this.setNodeLocationFromNode = noop\n        this.cstPostRule = noop\n        this.setInitialNodeLocation = noop\n      } else {\n        throw Error(\n          `Invalid <nodeLocationTracking> config option: \"${config.nodeLocationTracking}\"`\n        )\n      }\n    }\n  }\n\n  setInitialNodeLocationOnlyOffsetRecovery(\n    this: MixedInParser,\n    cstNode: any\n  ): void {\n    cstNode.location = {\n      startOffset: NaN,\n      endOffset: NaN\n    }\n  }\n\n  setInitialNodeLocationOnlyOffsetRegular(\n    this: MixedInParser,\n    cstNode: any\n  ): void {\n    cstNode.location = {\n      // without error recovery the starting Location of a new CstNode is guaranteed\n      // To be the next Token's startOffset (for valid inputs).\n      // For invalid inputs there won't be any CSTOutput so this potential\n      // inaccuracy does not matter\n      startOffset: this.LA(1).startOffset,\n      endOffset: NaN\n    }\n  }\n\n  setInitialNodeLocationFullRecovery(this: MixedInParser, cstNode: any): void {\n    cstNode.location = {\n      startOffset: NaN,\n      startLine: NaN,\n      startColumn: NaN,\n      endOffset: NaN,\n      endLine: NaN,\n      endColumn: NaN\n    }\n  }\n\n  /**\n     *  @see setInitialNodeLocationOnlyOffsetRegular for explanation why this work\n\n     * @param cstNode\n     */\n  setInitialNodeLocationFullRegular(this: MixedInParser, cstNode: any): void {\n    const nextToken = this.LA(1)\n    cstNode.location = {\n      startOffset: nextToken.startOffset,\n      startLine: nextToken.startLine,\n      startColumn: nextToken.startColumn,\n      endOffset: NaN,\n      endLine: NaN,\n      endColumn: NaN\n    }\n  }\n\n  cstInvocationStateUpdate(this: MixedInParser, fullRuleName: string): void {\n    const cstNode: CstNode = {\n      name: fullRuleName,\n      children: Object.create(null)\n    }\n\n    this.setInitialNodeLocation(cstNode)\n    this.CST_STACK.push(cstNode)\n  }\n\n  cstFinallyStateUpdate(this: MixedInParser): void {\n    this.CST_STACK.pop()\n  }\n\n  cstPostRuleFull(this: MixedInParser, ruleCstNode: CstNode): void {\n    // casts to `required<CstNodeLocation>` are safe because `cstPostRuleFull` should only be invoked when full location is enabled\n    const prevToken = this.LA(0) as Required<CstNodeLocation>\n    const loc = ruleCstNode.location as Required<CstNodeLocation>\n\n    // If this condition is true it means we consumed at least one Token\n    // In this CstNode.\n    if (loc.startOffset <= prevToken.startOffset === true) {\n      loc.endOffset = prevToken.endOffset\n      loc.endLine = prevToken.endLine\n      loc.endColumn = prevToken.endColumn\n    }\n    // \"empty\" CstNode edge case\n    else {\n      loc.startOffset = NaN\n      loc.startLine = NaN\n      loc.startColumn = NaN\n    }\n  }\n\n  cstPostRuleOnlyOffset(this: MixedInParser, ruleCstNode: CstNode): void {\n    const prevToken = this.LA(0)\n    // `location' is not null because `cstPostRuleOnlyOffset` will only be invoked when location tracking is enabled.\n    const loc = ruleCstNode.location!\n\n    // If this condition is true it means we consumed at least one Token\n    // In this CstNode.\n    if (loc.startOffset <= prevToken.startOffset === true) {\n      loc.endOffset = prevToken.endOffset\n    }\n    // \"empty\" CstNode edge case\n    else {\n      loc.startOffset = NaN\n    }\n  }\n\n  cstPostTerminal(\n    this: MixedInParser,\n    key: string,\n    consumedToken: IToken\n  ): void {\n    const rootCst = this.CST_STACK[this.CST_STACK.length - 1]\n    addTerminalToCst(rootCst, consumedToken, key)\n    // This is only used when **both** error recovery and CST Output are enabled.\n    this.setNodeLocationFromToken(rootCst.location!, <any>consumedToken)\n  }\n\n  cstPostNonTerminal(\n    this: MixedInParser,\n    ruleCstResult: CstNode,\n    ruleName: string\n  ): void {\n    const preCstNode = this.CST_STACK[this.CST_STACK.length - 1]\n    addNoneTerminalToCst(preCstNode, ruleName, ruleCstResult)\n    // This is only used when **both** error recovery and CST Output are enabled.\n    this.setNodeLocationFromNode(preCstNode.location!, ruleCstResult.location!)\n  }\n\n  getBaseCstVisitorConstructor<IN = any, OUT = any>(\n    this: MixedInParser\n  ): {\n    new (...args: any[]): ICstVisitor<IN, OUT>\n  } {\n    if (isUndefined(this.baseCstVisitorConstructor)) {\n      const newBaseCstVisitorConstructor = createBaseSemanticVisitorConstructor(\n        this.className,\n        keys(this.gastProductionsCache)\n      )\n      this.baseCstVisitorConstructor = newBaseCstVisitorConstructor\n      return newBaseCstVisitorConstructor\n    }\n\n    return <any>this.baseCstVisitorConstructor\n  }\n\n  getBaseCstVisitorConstructorWithDefaults<IN = any, OUT = any>(\n    this: MixedInParser\n  ): {\n    new (...args: any[]): ICstVisitor<IN, OUT>\n  } {\n    if (isUndefined(this.baseCstVisitorWithDefaultsConstructor)) {\n      const newConstructor = createBaseVisitorConstructorWithDefaults(\n        this.className,\n        keys(this.gastProductionsCache),\n        this.getBaseCstVisitorConstructor()\n      )\n      this.baseCstVisitorWithDefaultsConstructor = newConstructor\n      return newConstructor\n    }\n\n    return <any>this.baseCstVisitorWithDefaultsConstructor\n  }\n\n  getLastExplicitRuleShortName(this: MixedInParser): number {\n    const ruleStack = this.RULE_STACK\n    return ruleStack[ruleStack.length - 1]\n  }\n\n  getPreviousExplicitRuleShortName(this: MixedInParser): number {\n    const ruleStack = this.RULE_STACK\n    return ruleStack[ruleStack.length - 2]\n  }\n\n  getLastExplicitRuleOccurrenceIndex(this: MixedInParser): number {\n    const occurrenceStack = this.RULE_OCCURRENCE_STACK\n    return occurrenceStack[occurrenceStack.length - 1]\n  }\n}\n"]},"metadata":{},"sourceType":"script"}