{"ast":null,"code":"function LWO2Parser(IFFParser) {\n  this.IFF = IFFParser;\n}\n\nLWO2Parser.prototype = {\n  constructor: LWO2Parser,\n  parseBlock: function parseBlock() {\n    this.IFF.debugger.offset = this.IFF.reader.offset;\n    this.IFF.debugger.closeForms();\n    var blockID = this.IFF.reader.getIDTag();\n    var length = this.IFF.reader.getUint32(); // size of data in bytes\n\n    if (length > this.IFF.reader.dv.byteLength - this.IFF.reader.offset) {\n      this.IFF.reader.offset -= 4;\n      length = this.IFF.reader.getUint16();\n    }\n\n    this.IFF.debugger.dataOffset = this.IFF.reader.offset;\n    this.IFF.debugger.length = length; // Data types may be found in either LWO2 OR LWO3 spec\n\n    switch (blockID) {\n      case 'FORM':\n        // form blocks may consist of sub -chunks or sub-forms\n        this.IFF.parseForm(length);\n        break;\n      // SKIPPED CHUNKS\n      // if break; is called directly, the position in the lwoTree is not created\n      // any sub chunks and forms are added to the parent form instead\n      // MISC skipped\n\n      case 'ICON': // Thumbnail Icon Image\n\n      case 'VMPA': // Vertex Map Parameter\n\n      case 'BBOX': // bounding box\n      // case 'VMMD':\n      // case 'VTYP':\n      // normal maps can be specified, normally on models imported from other applications. Currently ignored\n\n      case 'NORM': // ENVL FORM skipped\n\n      case 'PRE ':\n      case 'POST':\n      case 'KEY ':\n      case 'SPAN': // CLIP FORM skipped\n\n      case 'TIME':\n      case 'CLRS':\n      case 'CLRA':\n      case 'FILT':\n      case 'DITH':\n      case 'CONT':\n      case 'BRIT':\n      case 'SATR':\n      case 'HUE ':\n      case 'GAMM':\n      case 'NEGA':\n      case 'IFLT':\n      case 'PFLT': // Image Map Layer skipped\n\n      case 'PROJ':\n      case 'AXIS':\n      case 'AAST':\n      case 'PIXB':\n      case 'AUVO':\n      case 'STCK': // Procedural Textures skipped\n\n      case 'PROC':\n      case 'VALU':\n      case 'FUNC': // Gradient Textures skipped\n\n      case 'PNAM':\n      case 'INAM':\n      case 'GRST':\n      case 'GREN':\n      case 'GRPT':\n      case 'FKEY':\n      case 'IKEY': // Texture Mapping Form skipped\n\n      case 'CSYS': // Surface CHUNKs skipped\n\n      case 'OPAQ': // top level 'opacity' checkbox\n\n      case 'CMAP': // clip map\n      // Surface node CHUNKS skipped\n      // These mainly specify the node editor setup in LW\n\n      case 'NLOC':\n      case 'NZOM':\n      case 'NVER':\n      case 'NSRV':\n      case 'NVSK': // unknown\n\n      case 'NCRD':\n      case 'WRPW': // image wrap w ( for cylindrical and spherical projections)\n\n      case 'WRPH': // image wrap h\n\n      case 'NMOD':\n      case 'NPRW':\n      case 'NPLA':\n      case 'NODS':\n      case 'VERS':\n      case 'ENUM':\n      case 'TAG ':\n      case 'OPAC': // Car Material CHUNKS\n\n      case 'CGMD':\n      case 'CGTY':\n      case 'CGST':\n      case 'CGEN':\n      case 'CGTS':\n      case 'CGTE':\n      case 'OSMP':\n      case 'OMDE':\n      case 'OUTR':\n      case 'FLAG':\n      case 'TRNL':\n      case 'GLOW':\n      case 'GVAL': // glow intensity\n\n      case 'SHRP':\n      case 'RFOP':\n      case 'RSAN':\n      case 'TROP':\n      case 'RBLR':\n      case 'TBLR':\n      case 'CLRH':\n      case 'CLRF':\n      case 'ADTR':\n      case 'LINE':\n      case 'ALPH':\n      case 'VCOL':\n      case 'ENAB':\n        this.IFF.debugger.skipped = true;\n        this.IFF.reader.skip(length);\n        break;\n\n      case 'SURF':\n        this.IFF.parseSurfaceLwo2(length);\n        break;\n\n      case 'CLIP':\n        this.IFF.parseClipLwo2(length);\n        break;\n      // Texture node chunks (not in spec)\n\n      case 'IPIX': // usePixelBlending\n\n      case 'IMIP': // useMipMaps\n\n      case 'IMOD': // imageBlendingMode\n\n      case 'AMOD': // unknown\n\n      case 'IINV': // imageInvertAlpha\n\n      case 'INCR': // imageInvertColor\n\n      case 'IAXS': // imageAxis ( for non-UV maps)\n\n      case 'IFOT': // imageFallofType\n\n      case 'ITIM': // timing for animated textures\n\n      case 'IWRL':\n      case 'IUTI':\n      case 'IINX':\n      case 'IINY':\n      case 'IINZ':\n      case 'IREF':\n        // possibly a VX for reused texture nodes\n        if (length === 4) this.IFF.currentNode[blockID] = this.IFF.reader.getInt32();else this.IFF.reader.skip(length);\n        break;\n\n      case 'OTAG':\n        this.IFF.parseObjectTag();\n        break;\n\n      case 'LAYR':\n        this.IFF.parseLayer(length);\n        break;\n\n      case 'PNTS':\n        this.IFF.parsePoints(length);\n        break;\n\n      case 'VMAP':\n        this.IFF.parseVertexMapping(length);\n        break;\n\n      case 'AUVU':\n      case 'AUVN':\n        this.IFF.reader.skip(length - 1);\n        this.IFF.reader.getVariableLengthIndex(); // VX\n\n        break;\n\n      case 'POLS':\n        this.IFF.parsePolygonList(length);\n        break;\n\n      case 'TAGS':\n        this.IFF.parseTagStrings(length);\n        break;\n\n      case 'PTAG':\n        this.IFF.parsePolygonTagMapping(length);\n        break;\n\n      case 'VMAD':\n        this.IFF.parseVertexMapping(length, true);\n        break;\n      // Misc CHUNKS\n\n      case 'DESC':\n        // Description Line\n        this.IFF.currentForm.description = this.IFF.reader.getString();\n        break;\n\n      case 'TEXT':\n      case 'CMNT':\n      case 'NCOM':\n        this.IFF.currentForm.comment = this.IFF.reader.getString();\n        break;\n      // Envelope Form\n\n      case 'NAME':\n        this.IFF.currentForm.channelName = this.IFF.reader.getString();\n        break;\n      // Image Map Layer\n\n      case 'WRAP':\n        this.IFF.currentForm.wrap = {\n          w: this.IFF.reader.getUint16(),\n          h: this.IFF.reader.getUint16()\n        };\n        break;\n\n      case 'IMAG':\n        var index = this.IFF.reader.getVariableLengthIndex();\n        this.IFF.currentForm.imageIndex = index;\n        break;\n      // Texture Mapping Form\n\n      case 'OREF':\n        this.IFF.currentForm.referenceObject = this.IFF.reader.getString();\n        break;\n\n      case 'ROID':\n        this.IFF.currentForm.referenceObjectID = this.IFF.reader.getUint32();\n        break;\n      // Surface Blocks\n\n      case 'SSHN':\n        this.IFF.currentSurface.surfaceShaderName = this.IFF.reader.getString();\n        break;\n\n      case 'AOVN':\n        this.IFF.currentSurface.surfaceCustomAOVName = this.IFF.reader.getString();\n        break;\n      // Nodal Blocks\n\n      case 'NSTA':\n        this.IFF.currentForm.disabled = this.IFF.reader.getUint16();\n        break;\n\n      case 'NRNM':\n        this.IFF.currentForm.realName = this.IFF.reader.getString();\n        break;\n\n      case 'NNME':\n        this.IFF.currentForm.refName = this.IFF.reader.getString();\n        this.IFF.currentSurface.nodes[this.IFF.currentForm.refName] = this.IFF.currentForm;\n        break;\n      // Nodal Blocks : connections\n\n      case 'INME':\n        if (!this.IFF.currentForm.nodeName) this.IFF.currentForm.nodeName = [];\n        this.IFF.currentForm.nodeName.push(this.IFF.reader.getString());\n        break;\n\n      case 'IINN':\n        if (!this.IFF.currentForm.inputNodeName) this.IFF.currentForm.inputNodeName = [];\n        this.IFF.currentForm.inputNodeName.push(this.IFF.reader.getString());\n        break;\n\n      case 'IINM':\n        if (!this.IFF.currentForm.inputName) this.IFF.currentForm.inputName = [];\n        this.IFF.currentForm.inputName.push(this.IFF.reader.getString());\n        break;\n\n      case 'IONM':\n        if (!this.IFF.currentForm.inputOutputName) this.IFF.currentForm.inputOutputName = [];\n        this.IFF.currentForm.inputOutputName.push(this.IFF.reader.getString());\n        break;\n\n      case 'FNAM':\n        this.IFF.currentForm.fileName = this.IFF.reader.getString();\n        break;\n\n      case 'CHAN':\n        // NOTE: ENVL Forms may also have CHAN chunk, however ENVL is currently ignored\n        if (length === 4) this.IFF.currentForm.textureChannel = this.IFF.reader.getIDTag();else this.IFF.reader.skip(length);\n        break;\n      // LWO2 Spec chunks: these are needed since the SURF FORMs are often in LWO2 format\n\n      case 'SMAN':\n        var maxSmoothingAngle = this.IFF.reader.getFloat32();\n        this.IFF.currentSurface.attributes.smooth = maxSmoothingAngle < 0 ? false : true;\n        break;\n      // LWO2: Basic Surface Parameters\n\n      case 'COLR':\n        this.IFF.currentSurface.attributes.Color = {\n          value: this.IFF.reader.getFloat32Array(3)\n        };\n        this.IFF.reader.skip(2); // VX: envelope\n\n        break;\n\n      case 'LUMI':\n        this.IFF.currentSurface.attributes.Luminosity = {\n          value: this.IFF.reader.getFloat32()\n        };\n        this.IFF.reader.skip(2);\n        break;\n\n      case 'SPEC':\n        this.IFF.currentSurface.attributes.Specular = {\n          value: this.IFF.reader.getFloat32()\n        };\n        this.IFF.reader.skip(2);\n        break;\n\n      case 'DIFF':\n        this.IFF.currentSurface.attributes.Diffuse = {\n          value: this.IFF.reader.getFloat32()\n        };\n        this.IFF.reader.skip(2);\n        break;\n\n      case 'REFL':\n        this.IFF.currentSurface.attributes.Reflection = {\n          value: this.IFF.reader.getFloat32()\n        };\n        this.IFF.reader.skip(2);\n        break;\n\n      case 'GLOS':\n        this.IFF.currentSurface.attributes.Glossiness = {\n          value: this.IFF.reader.getFloat32()\n        };\n        this.IFF.reader.skip(2);\n        break;\n\n      case 'TRAN':\n        this.IFF.currentSurface.attributes.opacity = this.IFF.reader.getFloat32();\n        this.IFF.reader.skip(2);\n        break;\n\n      case 'BUMP':\n        this.IFF.currentSurface.attributes.bumpStrength = this.IFF.reader.getFloat32();\n        this.IFF.reader.skip(2);\n        break;\n\n      case 'SIDE':\n        this.IFF.currentSurface.attributes.side = this.IFF.reader.getUint16();\n        break;\n\n      case 'RIMG':\n        this.IFF.currentSurface.attributes.reflectionMap = this.IFF.reader.getVariableLengthIndex();\n        break;\n\n      case 'RIND':\n        this.IFF.currentSurface.attributes.refractiveIndex = this.IFF.reader.getFloat32();\n        this.IFF.reader.skip(2);\n        break;\n\n      case 'TIMG':\n        this.IFF.currentSurface.attributes.refractionMap = this.IFF.reader.getVariableLengthIndex();\n        break;\n\n      case 'IMAP':\n        this.IFF.reader.skip(2);\n        break;\n\n      case 'TMAP':\n        this.IFF.debugger.skipped = true;\n        this.IFF.reader.skip(length); // needs implementing\n\n        break;\n\n      case 'IUVI':\n        // uv channel name\n        this.IFF.currentNode.UVChannel = this.IFF.reader.getString(length);\n        break;\n\n      case 'IUTL':\n        // widthWrappingMode: 0 = Reset, 1 = Repeat, 2 = Mirror, 3 = Edge\n        this.IFF.currentNode.widthWrappingMode = this.IFF.reader.getUint32();\n        break;\n\n      case 'IVTL':\n        // heightWrappingMode\n        this.IFF.currentNode.heightWrappingMode = this.IFF.reader.getUint32();\n        break;\n      // LWO2 USE\n\n      case 'BLOK':\n        // skip\n        break;\n\n      default:\n        this.IFF.parseUnknownCHUNK(blockID, length);\n    }\n\n    if (blockID != 'FORM') {\n      this.IFF.debugger.node = 1;\n      this.IFF.debugger.nodeID = blockID;\n      this.IFF.debugger.log();\n    }\n\n    if (this.IFF.reader.offset >= this.IFF.currentFormEnd) {\n      this.IFF.currentForm = this.IFF.parentForm;\n    }\n  }\n};\nexport { LWO2Parser };","map":{"version":3,"names":["LWO2Parser","IFFParser","IFF","prototype","constructor","parseBlock","debugger","offset","reader","closeForms","blockID","getIDTag","length","getUint32","dv","byteLength","getUint16","dataOffset","parseForm","skipped","skip","parseSurfaceLwo2","parseClipLwo2","currentNode","getInt32","parseObjectTag","parseLayer","parsePoints","parseVertexMapping","getVariableLengthIndex","parsePolygonList","parseTagStrings","parsePolygonTagMapping","currentForm","description","getString","comment","channelName","wrap","w","h","index","imageIndex","referenceObject","referenceObjectID","currentSurface","surfaceShaderName","surfaceCustomAOVName","disabled","realName","refName","nodes","nodeName","push","inputNodeName","inputName","inputOutputName","fileName","textureChannel","maxSmoothingAngle","getFloat32","attributes","smooth","Color","value","getFloat32Array","Luminosity","Specular","Diffuse","Reflection","Glossiness","opacity","bumpStrength","side","reflectionMap","refractiveIndex","refractionMap","UVChannel","widthWrappingMode","heightWrappingMode","parseUnknownCHUNK","node","nodeID","log","currentFormEnd","parentForm"],"sources":["C:/Users/Arnav/Downloads/l4fycy/node_modules/three-stdlib/loaders/lwo/LWO2Parser.js"],"sourcesContent":["function LWO2Parser(IFFParser) {\n  this.IFF = IFFParser;\n}\n\nLWO2Parser.prototype = {\n  constructor: LWO2Parser,\n  parseBlock: function () {\n    this.IFF.debugger.offset = this.IFF.reader.offset;\n    this.IFF.debugger.closeForms();\n    var blockID = this.IFF.reader.getIDTag();\n    var length = this.IFF.reader.getUint32(); // size of data in bytes\n\n    if (length > this.IFF.reader.dv.byteLength - this.IFF.reader.offset) {\n      this.IFF.reader.offset -= 4;\n      length = this.IFF.reader.getUint16();\n    }\n\n    this.IFF.debugger.dataOffset = this.IFF.reader.offset;\n    this.IFF.debugger.length = length; // Data types may be found in either LWO2 OR LWO3 spec\n\n    switch (blockID) {\n      case 'FORM':\n        // form blocks may consist of sub -chunks or sub-forms\n        this.IFF.parseForm(length);\n        break;\n      // SKIPPED CHUNKS\n      // if break; is called directly, the position in the lwoTree is not created\n      // any sub chunks and forms are added to the parent form instead\n      // MISC skipped\n\n      case 'ICON': // Thumbnail Icon Image\n\n      case 'VMPA': // Vertex Map Parameter\n\n      case 'BBOX': // bounding box\n      // case 'VMMD':\n      // case 'VTYP':\n      // normal maps can be specified, normally on models imported from other applications. Currently ignored\n\n      case 'NORM': // ENVL FORM skipped\n\n      case 'PRE ':\n      case 'POST':\n      case 'KEY ':\n      case 'SPAN': // CLIP FORM skipped\n\n      case 'TIME':\n      case 'CLRS':\n      case 'CLRA':\n      case 'FILT':\n      case 'DITH':\n      case 'CONT':\n      case 'BRIT':\n      case 'SATR':\n      case 'HUE ':\n      case 'GAMM':\n      case 'NEGA':\n      case 'IFLT':\n      case 'PFLT': // Image Map Layer skipped\n\n      case 'PROJ':\n      case 'AXIS':\n      case 'AAST':\n      case 'PIXB':\n      case 'AUVO':\n      case 'STCK': // Procedural Textures skipped\n\n      case 'PROC':\n      case 'VALU':\n      case 'FUNC': // Gradient Textures skipped\n\n      case 'PNAM':\n      case 'INAM':\n      case 'GRST':\n      case 'GREN':\n      case 'GRPT':\n      case 'FKEY':\n      case 'IKEY': // Texture Mapping Form skipped\n\n      case 'CSYS': // Surface CHUNKs skipped\n\n      case 'OPAQ': // top level 'opacity' checkbox\n\n      case 'CMAP': // clip map\n      // Surface node CHUNKS skipped\n      // These mainly specify the node editor setup in LW\n\n      case 'NLOC':\n      case 'NZOM':\n      case 'NVER':\n      case 'NSRV':\n      case 'NVSK': // unknown\n\n      case 'NCRD':\n      case 'WRPW': // image wrap w ( for cylindrical and spherical projections)\n\n      case 'WRPH': // image wrap h\n\n      case 'NMOD':\n      case 'NPRW':\n      case 'NPLA':\n      case 'NODS':\n      case 'VERS':\n      case 'ENUM':\n      case 'TAG ':\n      case 'OPAC': // Car Material CHUNKS\n\n      case 'CGMD':\n      case 'CGTY':\n      case 'CGST':\n      case 'CGEN':\n      case 'CGTS':\n      case 'CGTE':\n      case 'OSMP':\n      case 'OMDE':\n      case 'OUTR':\n      case 'FLAG':\n      case 'TRNL':\n      case 'GLOW':\n      case 'GVAL': // glow intensity\n\n      case 'SHRP':\n      case 'RFOP':\n      case 'RSAN':\n      case 'TROP':\n      case 'RBLR':\n      case 'TBLR':\n      case 'CLRH':\n      case 'CLRF':\n      case 'ADTR':\n      case 'LINE':\n      case 'ALPH':\n      case 'VCOL':\n      case 'ENAB':\n        this.IFF.debugger.skipped = true;\n        this.IFF.reader.skip(length);\n        break;\n\n      case 'SURF':\n        this.IFF.parseSurfaceLwo2(length);\n        break;\n\n      case 'CLIP':\n        this.IFF.parseClipLwo2(length);\n        break;\n      // Texture node chunks (not in spec)\n\n      case 'IPIX': // usePixelBlending\n\n      case 'IMIP': // useMipMaps\n\n      case 'IMOD': // imageBlendingMode\n\n      case 'AMOD': // unknown\n\n      case 'IINV': // imageInvertAlpha\n\n      case 'INCR': // imageInvertColor\n\n      case 'IAXS': // imageAxis ( for non-UV maps)\n\n      case 'IFOT': // imageFallofType\n\n      case 'ITIM': // timing for animated textures\n\n      case 'IWRL':\n      case 'IUTI':\n      case 'IINX':\n      case 'IINY':\n      case 'IINZ':\n      case 'IREF':\n        // possibly a VX for reused texture nodes\n        if (length === 4) this.IFF.currentNode[blockID] = this.IFF.reader.getInt32();else this.IFF.reader.skip(length);\n        break;\n\n      case 'OTAG':\n        this.IFF.parseObjectTag();\n        break;\n\n      case 'LAYR':\n        this.IFF.parseLayer(length);\n        break;\n\n      case 'PNTS':\n        this.IFF.parsePoints(length);\n        break;\n\n      case 'VMAP':\n        this.IFF.parseVertexMapping(length);\n        break;\n\n      case 'AUVU':\n      case 'AUVN':\n        this.IFF.reader.skip(length - 1);\n        this.IFF.reader.getVariableLengthIndex(); // VX\n\n        break;\n\n      case 'POLS':\n        this.IFF.parsePolygonList(length);\n        break;\n\n      case 'TAGS':\n        this.IFF.parseTagStrings(length);\n        break;\n\n      case 'PTAG':\n        this.IFF.parsePolygonTagMapping(length);\n        break;\n\n      case 'VMAD':\n        this.IFF.parseVertexMapping(length, true);\n        break;\n      // Misc CHUNKS\n\n      case 'DESC':\n        // Description Line\n        this.IFF.currentForm.description = this.IFF.reader.getString();\n        break;\n\n      case 'TEXT':\n      case 'CMNT':\n      case 'NCOM':\n        this.IFF.currentForm.comment = this.IFF.reader.getString();\n        break;\n      // Envelope Form\n\n      case 'NAME':\n        this.IFF.currentForm.channelName = this.IFF.reader.getString();\n        break;\n      // Image Map Layer\n\n      case 'WRAP':\n        this.IFF.currentForm.wrap = {\n          w: this.IFF.reader.getUint16(),\n          h: this.IFF.reader.getUint16()\n        };\n        break;\n\n      case 'IMAG':\n        var index = this.IFF.reader.getVariableLengthIndex();\n        this.IFF.currentForm.imageIndex = index;\n        break;\n      // Texture Mapping Form\n\n      case 'OREF':\n        this.IFF.currentForm.referenceObject = this.IFF.reader.getString();\n        break;\n\n      case 'ROID':\n        this.IFF.currentForm.referenceObjectID = this.IFF.reader.getUint32();\n        break;\n      // Surface Blocks\n\n      case 'SSHN':\n        this.IFF.currentSurface.surfaceShaderName = this.IFF.reader.getString();\n        break;\n\n      case 'AOVN':\n        this.IFF.currentSurface.surfaceCustomAOVName = this.IFF.reader.getString();\n        break;\n      // Nodal Blocks\n\n      case 'NSTA':\n        this.IFF.currentForm.disabled = this.IFF.reader.getUint16();\n        break;\n\n      case 'NRNM':\n        this.IFF.currentForm.realName = this.IFF.reader.getString();\n        break;\n\n      case 'NNME':\n        this.IFF.currentForm.refName = this.IFF.reader.getString();\n        this.IFF.currentSurface.nodes[this.IFF.currentForm.refName] = this.IFF.currentForm;\n        break;\n      // Nodal Blocks : connections\n\n      case 'INME':\n        if (!this.IFF.currentForm.nodeName) this.IFF.currentForm.nodeName = [];\n        this.IFF.currentForm.nodeName.push(this.IFF.reader.getString());\n        break;\n\n      case 'IINN':\n        if (!this.IFF.currentForm.inputNodeName) this.IFF.currentForm.inputNodeName = [];\n        this.IFF.currentForm.inputNodeName.push(this.IFF.reader.getString());\n        break;\n\n      case 'IINM':\n        if (!this.IFF.currentForm.inputName) this.IFF.currentForm.inputName = [];\n        this.IFF.currentForm.inputName.push(this.IFF.reader.getString());\n        break;\n\n      case 'IONM':\n        if (!this.IFF.currentForm.inputOutputName) this.IFF.currentForm.inputOutputName = [];\n        this.IFF.currentForm.inputOutputName.push(this.IFF.reader.getString());\n        break;\n\n      case 'FNAM':\n        this.IFF.currentForm.fileName = this.IFF.reader.getString();\n        break;\n\n      case 'CHAN':\n        // NOTE: ENVL Forms may also have CHAN chunk, however ENVL is currently ignored\n        if (length === 4) this.IFF.currentForm.textureChannel = this.IFF.reader.getIDTag();else this.IFF.reader.skip(length);\n        break;\n      // LWO2 Spec chunks: these are needed since the SURF FORMs are often in LWO2 format\n\n      case 'SMAN':\n        var maxSmoothingAngle = this.IFF.reader.getFloat32();\n        this.IFF.currentSurface.attributes.smooth = maxSmoothingAngle < 0 ? false : true;\n        break;\n      // LWO2: Basic Surface Parameters\n\n      case 'COLR':\n        this.IFF.currentSurface.attributes.Color = {\n          value: this.IFF.reader.getFloat32Array(3)\n        };\n        this.IFF.reader.skip(2); // VX: envelope\n\n        break;\n\n      case 'LUMI':\n        this.IFF.currentSurface.attributes.Luminosity = {\n          value: this.IFF.reader.getFloat32()\n        };\n        this.IFF.reader.skip(2);\n        break;\n\n      case 'SPEC':\n        this.IFF.currentSurface.attributes.Specular = {\n          value: this.IFF.reader.getFloat32()\n        };\n        this.IFF.reader.skip(2);\n        break;\n\n      case 'DIFF':\n        this.IFF.currentSurface.attributes.Diffuse = {\n          value: this.IFF.reader.getFloat32()\n        };\n        this.IFF.reader.skip(2);\n        break;\n\n      case 'REFL':\n        this.IFF.currentSurface.attributes.Reflection = {\n          value: this.IFF.reader.getFloat32()\n        };\n        this.IFF.reader.skip(2);\n        break;\n\n      case 'GLOS':\n        this.IFF.currentSurface.attributes.Glossiness = {\n          value: this.IFF.reader.getFloat32()\n        };\n        this.IFF.reader.skip(2);\n        break;\n\n      case 'TRAN':\n        this.IFF.currentSurface.attributes.opacity = this.IFF.reader.getFloat32();\n        this.IFF.reader.skip(2);\n        break;\n\n      case 'BUMP':\n        this.IFF.currentSurface.attributes.bumpStrength = this.IFF.reader.getFloat32();\n        this.IFF.reader.skip(2);\n        break;\n\n      case 'SIDE':\n        this.IFF.currentSurface.attributes.side = this.IFF.reader.getUint16();\n        break;\n\n      case 'RIMG':\n        this.IFF.currentSurface.attributes.reflectionMap = this.IFF.reader.getVariableLengthIndex();\n        break;\n\n      case 'RIND':\n        this.IFF.currentSurface.attributes.refractiveIndex = this.IFF.reader.getFloat32();\n        this.IFF.reader.skip(2);\n        break;\n\n      case 'TIMG':\n        this.IFF.currentSurface.attributes.refractionMap = this.IFF.reader.getVariableLengthIndex();\n        break;\n\n      case 'IMAP':\n        this.IFF.reader.skip(2);\n        break;\n\n      case 'TMAP':\n        this.IFF.debugger.skipped = true;\n        this.IFF.reader.skip(length); // needs implementing\n\n        break;\n\n      case 'IUVI':\n        // uv channel name\n        this.IFF.currentNode.UVChannel = this.IFF.reader.getString(length);\n        break;\n\n      case 'IUTL':\n        // widthWrappingMode: 0 = Reset, 1 = Repeat, 2 = Mirror, 3 = Edge\n        this.IFF.currentNode.widthWrappingMode = this.IFF.reader.getUint32();\n        break;\n\n      case 'IVTL':\n        // heightWrappingMode\n        this.IFF.currentNode.heightWrappingMode = this.IFF.reader.getUint32();\n        break;\n      // LWO2 USE\n\n      case 'BLOK':\n        // skip\n        break;\n\n      default:\n        this.IFF.parseUnknownCHUNK(blockID, length);\n    }\n\n    if (blockID != 'FORM') {\n      this.IFF.debugger.node = 1;\n      this.IFF.debugger.nodeID = blockID;\n      this.IFF.debugger.log();\n    }\n\n    if (this.IFF.reader.offset >= this.IFF.currentFormEnd) {\n      this.IFF.currentForm = this.IFF.parentForm;\n    }\n  }\n};\n\nexport { LWO2Parser };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}