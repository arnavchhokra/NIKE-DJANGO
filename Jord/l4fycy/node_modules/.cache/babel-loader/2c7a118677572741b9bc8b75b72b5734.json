{"ast":null,"code":"import _classCallCheck from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _get from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { LineSegmentsGeometry } from './LineSegmentsGeometry.js';\n\nvar LineGeometry = /*#__PURE__*/function (_LineSegmentsGeometry) {\n  _inherits(LineGeometry, _LineSegmentsGeometry);\n\n  var _super = _createSuper(LineGeometry);\n\n  function LineGeometry() {\n    var _thisSuper, _this;\n\n    _classCallCheck(this, LineGeometry);\n\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"type\", 'LineGeometry');\n\n    _defineProperty(_assertThisInitialized(_this), \"isLineGeometry\", true);\n\n    _defineProperty(_assertThisInitialized(_this), \"setColors\", function (array) {\n      // converts [ r1, g1, b1,  r2, g2, b2, ... ] to pairs format\n      var length = array.length - 3;\n      var colors = new Float32Array(2 * length);\n\n      for (var i = 0; i < length; i += 3) {\n        colors[2 * i] = array[i];\n        colors[2 * i + 1] = array[i + 1];\n        colors[2 * i + 2] = array[i + 2];\n        colors[2 * i + 3] = array[i + 3];\n        colors[2 * i + 4] = array[i + 4];\n        colors[2 * i + 5] = array[i + 5];\n      }\n\n      _get((_thisSuper = _assertThisInitialized(_this), _getPrototypeOf(LineGeometry.prototype)), \"setColors\", _thisSuper).call(_thisSuper, colors);\n\n      return _assertThisInitialized(_this);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"fromLine\", function (line) {\n      var geometry = line.geometry;\n\n      if (geometry.isBufferGeometry) {\n        _this.setPositions(Array.from(geometry.attributes.position.array)); // assumes non-indexed\n\n      } // set colors, maybe\n\n\n      return _assertThisInitialized(_this);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"copy\", function () {\n      // todo\n      return _assertThisInitialized(_this);\n    });\n\n    return _this;\n  }\n\n  _createClass(LineGeometry, [{\n    key: \"setPositions\",\n    value: function setPositions(array) {\n      // converts [ x1, y1, z1,  x2, y2, z2, ... ] to pairs format\n      var length = array.length - 3;\n      var points = new Float32Array(2 * length);\n\n      for (var i = 0; i < length; i += 3) {\n        points[2 * i] = array[i];\n        points[2 * i + 1] = array[i + 1];\n        points[2 * i + 2] = array[i + 2];\n        points[2 * i + 3] = array[i + 3];\n        points[2 * i + 4] = array[i + 4];\n        points[2 * i + 5] = array[i + 5];\n      }\n\n      _get(_getPrototypeOf(LineGeometry.prototype), \"setPositions\", this).call(this, points);\n\n      return this;\n    }\n  }]);\n\n  return LineGeometry;\n}(LineSegmentsGeometry);\n\nexport { LineGeometry };","map":{"version":3,"names":["_defineProperty","LineSegmentsGeometry","LineGeometry","array","length","colors","Float32Array","i","line","geometry","isBufferGeometry","setPositions","Array","from","attributes","position","points"],"sources":["C:/Users/Arnav/Downloads/l4fycy/node_modules/three-stdlib/lines/LineGeometry.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { LineSegmentsGeometry } from './LineSegmentsGeometry.js';\n\nclass LineGeometry extends LineSegmentsGeometry {\n  constructor() {\n    super();\n\n    _defineProperty(this, \"type\", 'LineGeometry');\n\n    _defineProperty(this, \"isLineGeometry\", true);\n\n    _defineProperty(this, \"setColors\", array => {\n      // converts [ r1, g1, b1,  r2, g2, b2, ... ] to pairs format\n      const length = array.length - 3;\n      const colors = new Float32Array(2 * length);\n\n      for (let i = 0; i < length; i += 3) {\n        colors[2 * i] = array[i];\n        colors[2 * i + 1] = array[i + 1];\n        colors[2 * i + 2] = array[i + 2];\n        colors[2 * i + 3] = array[i + 3];\n        colors[2 * i + 4] = array[i + 4];\n        colors[2 * i + 5] = array[i + 5];\n      }\n\n      super.setColors(colors);\n      return this;\n    });\n\n    _defineProperty(this, \"fromLine\", line => {\n      const geometry = line.geometry;\n\n      if (geometry.isBufferGeometry) {\n        this.setPositions(Array.from(geometry.attributes.position.array)); // assumes non-indexed\n      } // set colors, maybe\n\n\n      return this;\n    });\n\n    _defineProperty(this, \"copy\", () => {\n      // todo\n      return this;\n    });\n  }\n\n  setPositions(array) {\n    // converts [ x1, y1, z1,  x2, y2, z2, ... ] to pairs format\n    const length = array.length - 3;\n    const points = new Float32Array(2 * length);\n\n    for (let i = 0; i < length; i += 3) {\n      points[2 * i] = array[i];\n      points[2 * i + 1] = array[i + 1];\n      points[2 * i + 2] = array[i + 2];\n      points[2 * i + 3] = array[i + 3];\n      points[2 * i + 4] = array[i + 4];\n      points[2 * i + 5] = array[i + 5];\n    }\n\n    super.setPositions(points);\n    return this;\n  }\n\n}\n\nexport { LineGeometry };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}