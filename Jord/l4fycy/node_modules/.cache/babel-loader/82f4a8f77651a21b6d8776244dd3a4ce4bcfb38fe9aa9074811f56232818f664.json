{"ast":null,"code":"import { BufferAttribute, BufferGeometry, Vector3, Vector4, Matrix4, Matrix3 } from 'three';\nconst _positionVector = /*@__PURE__*/new Vector3();\nconst _normalVector = /*@__PURE__*/new Vector3();\nconst _tangentVector = /*@__PURE__*/new Vector3();\nconst _tangentVector4 = /*@__PURE__*/new Vector4();\nconst _morphVector = /*@__PURE__*/new Vector3();\nconst _temp = /*@__PURE__*/new Vector3();\nconst _skinIndex = /*@__PURE__*/new Vector4();\nconst _skinWeight = /*@__PURE__*/new Vector4();\nconst _matrix = /*@__PURE__*/new Matrix4();\nconst _boneMatrix = /*@__PURE__*/new Matrix4();\n\n// Confirms that the two provided attributes are compatible\nfunction validateAttributes(attr1, attr2) {\n  if (!attr1 && !attr2) {\n    return;\n  }\n  const sameCount = attr1.count === attr2.count;\n  const sameNormalized = attr1.normalized === attr2.normalized;\n  const sameType = attr1.array.constructor === attr2.array.constructor;\n  const sameItemSize = attr1.itemSize === attr2.itemSize;\n  if (!sameCount || !sameNormalized || !sameType || !sameItemSize) {\n    throw new Error();\n  }\n}\n\n// Clones the given attribute with a new compatible buffer attribute but no data\nfunction createAttributeClone(attr) {\n  let countOverride = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  const cons = attr.array.constructor;\n  const normalized = attr.normalized;\n  const itemSize = attr.itemSize;\n  const count = countOverride === null ? attr.count : countOverride;\n  return new BufferAttribute(new cons(itemSize * count), itemSize, normalized);\n}\n\n// target offset is the number of elements in the target buffer stride to skip before copying the\n// attributes contents in to.\nfunction copyAttributeContents(attr, target) {\n  let targetOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  if (attr.isInterleavedBufferAttribute) {\n    const itemSize = attr.itemSize;\n    for (let i = 0, l = attr.count; i < l; i++) {\n      const io = i + targetOffset;\n      target.setX(io, attr.getX(i));\n      if (itemSize >= 2) target.setY(io, attr.getY(i));\n      if (itemSize >= 3) target.setZ(io, attr.getZ(i));\n      if (itemSize >= 4) target.setW(io, attr.getW(i));\n    }\n  } else {\n    const array = target.array;\n    const cons = array.constructor;\n    const byteOffset = array.BYTES_PER_ELEMENT * attr.itemSize * targetOffset;\n    const temp = new cons(array.buffer, byteOffset, attr.array.length);\n    temp.set(attr.array);\n  }\n}\n\n// Adds the \"matrix\" multiplied by \"scale\" to \"target\"\nfunction addScaledMatrix(target, matrix, scale) {\n  const targetArray = target.elements;\n  const matrixArray = matrix.elements;\n  for (let i = 0, l = matrixArray.length; i < l; i++) {\n    targetArray[i] += matrixArray[i] * scale;\n  }\n}\n\n// A version of \"SkinnedMesh.boneTransform\" for normals\nfunction boneNormalTransform(mesh, index, target) {\n  const skeleton = mesh.skeleton;\n  const geometry = mesh.geometry;\n  const bones = skeleton.bones;\n  const boneInverses = skeleton.boneInverses;\n  _skinIndex.fromBufferAttribute(geometry.attributes.skinIndex, index);\n  _skinWeight.fromBufferAttribute(geometry.attributes.skinWeight, index);\n  _matrix.elements.fill(0);\n  for (let i = 0; i < 4; i++) {\n    const weight = _skinWeight.getComponent(i);\n    if (weight !== 0) {\n      const boneIndex = _skinIndex.getComponent(i);\n      _boneMatrix.multiplyMatrices(bones[boneIndex].matrixWorld, boneInverses[boneIndex]);\n      addScaledMatrix(_matrix, _boneMatrix, weight);\n    }\n  }\n  _matrix.multiply(mesh.bindMatrix).premultiply(mesh.bindMatrixInverse);\n  target.transformDirection(_matrix);\n  return target;\n}\n\n// Applies the morph target data to the target vector\nfunction applyMorphTarget(morphData, morphInfluences, morphTargetsRelative, i, target) {\n  _morphVector.set(0, 0, 0);\n  for (let j = 0, jl = morphData.length; j < jl; j++) {\n    const influence = morphInfluences[j];\n    const morphAttribute = morphData[j];\n    if (influence === 0) continue;\n    _temp.fromBufferAttribute(morphAttribute, i);\n    if (morphTargetsRelative) {\n      _morphVector.addScaledVector(_temp, influence);\n    } else {\n      _morphVector.addScaledVector(_temp.sub(target), influence);\n    }\n  }\n  target.add(_morphVector);\n}\n\n// Modified version of BufferGeometryUtils.mergeBufferGeometries that ignores morph targets and updates a attributes in place\nfunction mergeBufferGeometries(geometries) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    useGroups: false,\n    updateIndex: false,\n    skipAttributes: []\n  };\n  let targetGeometry = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new BufferGeometry();\n  const isIndexed = geometries[0].index !== null;\n  const {\n    useGroups = false,\n    updateIndex = false,\n    skipAttributes = []\n  } = options;\n  const attributesUsed = new Set(Object.keys(geometries[0].attributes));\n  const attributes = {};\n  let offset = 0;\n  targetGeometry.clearGroups();\n  for (let i = 0; i < geometries.length; ++i) {\n    const geometry = geometries[i];\n    let attributesCount = 0;\n\n    // ensure that all geometries are indexed, or none\n    if (isIndexed !== (geometry.index !== null)) {\n      throw new Error('StaticGeometryGenerator: All geometries must have compatible attributes; make sure index attribute exists among all geometries, or in none of them.');\n    }\n\n    // gather attributes, exit early if they're different\n    for (const name in geometry.attributes) {\n      if (!attributesUsed.has(name)) {\n        throw new Error('StaticGeometryGenerator: All geometries must have compatible attributes; make sure \"' + name + '\" attribute exists among all geometries, or in none of them.');\n      }\n      if (attributes[name] === undefined) {\n        attributes[name] = [];\n      }\n      attributes[name].push(geometry.attributes[name]);\n      attributesCount++;\n    }\n\n    // ensure geometries have the same number of attributes\n    if (attributesCount !== attributesUsed.size) {\n      throw new Error('StaticGeometryGenerator: Make sure all geometries have the same number of attributes.');\n    }\n    if (useGroups) {\n      let count;\n      if (isIndexed) {\n        count = geometry.index.count;\n      } else if (geometry.attributes.position !== undefined) {\n        count = geometry.attributes.position.count;\n      } else {\n        throw new Error('StaticGeometryGenerator: The geometry must have either an index or a position attribute');\n      }\n      targetGeometry.addGroup(offset, count, i);\n      offset += count;\n    }\n  }\n\n  // merge indices\n  if (isIndexed) {\n    let forceUpdateIndex = false;\n    if (!targetGeometry.index) {\n      let indexCount = 0;\n      for (let i = 0; i < geometries.length; ++i) {\n        indexCount += geometries[i].index.count;\n      }\n      targetGeometry.setIndex(new BufferAttribute(new Uint32Array(indexCount), 1, false));\n      forceUpdateIndex = true;\n    }\n    if (updateIndex || forceUpdateIndex) {\n      const targetIndex = targetGeometry.index;\n      let targetOffset = 0;\n      let indexOffset = 0;\n      for (let i = 0; i < geometries.length; ++i) {\n        const geometry = geometries[i];\n        const index = geometry.index;\n        if (skipAttributes[i] !== true) {\n          for (let j = 0; j < index.count; ++j) {\n            targetIndex.setX(targetOffset, index.getX(j) + indexOffset);\n            targetOffset++;\n          }\n        }\n        indexOffset += geometry.attributes.position.count;\n      }\n    }\n  }\n\n  // merge attributes\n  for (const name in attributes) {\n    const attrList = attributes[name];\n    if (!(name in targetGeometry.attributes)) {\n      let count = 0;\n      for (const key in attrList) {\n        count += attrList[key].count;\n      }\n      targetGeometry.setAttribute(name, createAttributeClone(attributes[name][0], count));\n    }\n    const targetAttribute = targetGeometry.attributes[name];\n    let offset = 0;\n    for (let i = 0, l = attrList.length; i < l; i++) {\n      const attr = attrList[i];\n      if (skipAttributes[i] !== true) {\n        copyAttributeContents(attr, targetAttribute, offset);\n      }\n      offset += attr.count;\n    }\n  }\n  return targetGeometry;\n}\nfunction checkTypedArrayEquality(a, b) {\n  if (a === null || b === null) {\n    return a === b;\n  }\n  if (a.length !== b.length) {\n    return false;\n  }\n  for (let i = 0, l = a.length; i < l; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Checks whether the geometry changed between this and last evaluation\nclass GeometryDiff {\n  constructor(mesh) {\n    this.matrixWorld = new Matrix4();\n    this.geometryHash = null;\n    this.boneMatrices = null;\n    this.primitiveCount = -1;\n    this.mesh = mesh;\n    this.update();\n  }\n  update() {\n    const mesh = this.mesh;\n    const geometry = mesh.geometry;\n    const skeleton = mesh.skeleton;\n    const primitiveCount = (geometry.index ? geometry.index.count : geometry.attributes.position.count) / 3;\n    this.matrixWorld.copy(mesh.matrixWorld);\n    this.geometryHash = geometry.attributes.position.version;\n    this.primitiveCount = primitiveCount;\n    if (skeleton) {\n      // ensure the bone matrix array is updated to the appropriate length\n      if (!skeleton.boneTexture) {\n        skeleton.computeBoneTexture();\n      }\n      skeleton.update();\n\n      // copy data if possible otherwise clone it\n      const boneMatrices = skeleton.boneMatrices;\n      if (!this.boneMatrices || this.boneMatrices.length !== boneMatrices.length) {\n        this.boneMatrices = boneMatrices.slice();\n      } else {\n        this.boneMatrices.set(boneMatrices);\n      }\n    } else {\n      this.boneMatrices = null;\n    }\n  }\n  didChange() {\n    const mesh = this.mesh;\n    const geometry = mesh.geometry;\n    const primitiveCount = (geometry.index ? geometry.index.count : geometry.attributes.position.count) / 3;\n    const identical = this.matrixWorld.equals(mesh.matrixWorld) && this.geometryHash === geometry.attributes.position.version && checkTypedArrayEquality(mesh.skeleton && mesh.skeleton.boneMatrices || null, this.boneMatrices) && this.primitiveCount === primitiveCount;\n    return !identical;\n  }\n}\nexport class StaticGeometryGenerator {\n  constructor(meshes) {\n    if (!Array.isArray(meshes)) {\n      meshes = [meshes];\n    }\n    const finalMeshes = [];\n    meshes.forEach(object => {\n      object.traverseVisible(c => {\n        if (c.isMesh) {\n          finalMeshes.push(c);\n        }\n      });\n    });\n    this.meshes = finalMeshes;\n    this.useGroups = true;\n    this.applyWorldTransforms = true;\n    this.attributes = ['position', 'normal', 'color', 'tangent', 'uv', 'uv2'];\n    this._intermediateGeometry = new Array(finalMeshes.length).fill().map(() => new BufferGeometry());\n    this._diffMap = new WeakMap();\n  }\n  getMaterials() {\n    const materials = [];\n    this.meshes.forEach(mesh => {\n      if (Array.isArray(mesh.material)) {\n        materials.push(...mesh.material);\n      } else {\n        materials.push(mesh.material);\n      }\n    });\n    return materials;\n  }\n  generate() {\n    let targetGeometry = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new BufferGeometry();\n    // track which attributes have been updated and which to skip to avoid unnecessary attribute copies\n    let skipAttributes = [];\n    const {\n      meshes,\n      useGroups,\n      _intermediateGeometry,\n      _diffMap\n    } = this;\n    for (let i = 0, l = meshes.length; i < l; i++) {\n      const mesh = meshes[i];\n      const geom = _intermediateGeometry[i];\n      const diff = _diffMap.get(mesh);\n      if (!diff || diff.didChange(mesh)) {\n        this._convertToStaticGeometry(mesh, geom);\n        skipAttributes.push(false);\n        if (!diff) {\n          _diffMap.set(mesh, new GeometryDiff(mesh));\n        } else {\n          diff.update();\n        }\n      } else {\n        skipAttributes.push(true);\n      }\n    }\n    mergeBufferGeometries(_intermediateGeometry, {\n      useGroups,\n      skipAttributes\n    }, targetGeometry);\n    for (const key in targetGeometry.attributes) {\n      targetGeometry.attributes[key].needsUpdate = true;\n    }\n    return targetGeometry;\n  }\n  _convertToStaticGeometry(mesh) {\n    let targetGeometry = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new BufferGeometry();\n    const geometry = mesh.geometry;\n    const applyWorldTransforms = this.applyWorldTransforms;\n    const includeNormal = this.attributes.includes('normal');\n    const includeTangent = this.attributes.includes('tangent');\n    const attributes = geometry.attributes;\n    const targetAttributes = targetGeometry.attributes;\n\n    // initialize the attributes if they don't exist\n    if (!targetGeometry.index) {\n      targetGeometry.index = geometry.index;\n    }\n    if (!targetAttributes.position) {\n      targetGeometry.setAttribute('position', createAttributeClone(attributes.position));\n    }\n    if (includeNormal && !targetAttributes.normal && attributes.normal) {\n      targetGeometry.setAttribute('normal', createAttributeClone(attributes.normal));\n    }\n    if (includeTangent && !targetAttributes.tangent && attributes.tangent) {\n      targetGeometry.setAttribute('tangent', createAttributeClone(attributes.tangent));\n    }\n\n    // ensure the attributes are consistent\n    validateAttributes(geometry.index, targetGeometry.index);\n    validateAttributes(attributes.position, targetAttributes.position);\n    if (includeNormal) {\n      validateAttributes(attributes.normal, targetAttributes.normal);\n    }\n    if (includeTangent) {\n      validateAttributes(attributes.tangent, targetAttributes.tangent);\n    }\n\n    // generate transformed vertex attribute data\n    const position = attributes.position;\n    const normal = includeNormal ? attributes.normal : null;\n    const tangent = includeTangent ? attributes.tangent : null;\n    const morphPosition = geometry.morphAttributes.position;\n    const morphNormal = geometry.morphAttributes.normal;\n    const morphTangent = geometry.morphAttributes.tangent;\n    const morphTargetsRelative = geometry.morphTargetsRelative;\n    const morphInfluences = mesh.morphTargetInfluences;\n    const normalMatrix = new Matrix3();\n    normalMatrix.getNormalMatrix(mesh.matrixWorld);\n    for (let i = 0, l = attributes.position.count; i < l; i++) {\n      _positionVector.fromBufferAttribute(position, i);\n      if (normal) {\n        _normalVector.fromBufferAttribute(normal, i);\n      }\n      if (tangent) {\n        _tangentVector4.fromBufferAttribute(tangent, i);\n        _tangentVector.fromBufferAttribute(tangent, i);\n      }\n\n      // apply morph target transform\n      if (morphInfluences) {\n        if (morphPosition) {\n          applyMorphTarget(morphPosition, morphInfluences, morphTargetsRelative, i, _positionVector);\n        }\n        if (morphNormal) {\n          applyMorphTarget(morphNormal, morphInfluences, morphTargetsRelative, i, _normalVector);\n        }\n        if (morphTangent) {\n          applyMorphTarget(morphTangent, morphInfluences, morphTargetsRelative, i, _tangentVector);\n        }\n      }\n\n      // apply bone transform\n      if (mesh.isSkinnedMesh) {\n        mesh.applyBoneTransform(i, _positionVector);\n        if (normal) {\n          boneNormalTransform(mesh, i, _normalVector);\n        }\n        if (tangent) {\n          boneNormalTransform(mesh, i, _tangentVector);\n        }\n      }\n\n      // update the vectors of the attributes\n      if (applyWorldTransforms) {\n        _positionVector.applyMatrix4(mesh.matrixWorld);\n      }\n      targetAttributes.position.setXYZ(i, _positionVector.x, _positionVector.y, _positionVector.z);\n      if (normal) {\n        if (applyWorldTransforms) {\n          _normalVector.applyNormalMatrix(normalMatrix);\n        }\n        targetAttributes.normal.setXYZ(i, _normalVector.x, _normalVector.y, _normalVector.z);\n      }\n      if (tangent) {\n        if (applyWorldTransforms) {\n          _tangentVector.transformDirection(mesh.matrixWorld);\n        }\n        targetAttributes.tangent.setXYZW(i, _tangentVector.x, _tangentVector.y, _tangentVector.z, _tangentVector4.w);\n      }\n    }\n\n    // copy other attributes over\n    for (const i in this.attributes) {\n      const key = this.attributes[i];\n      if (key === 'position' || key === 'tangent' || key === 'normal' || !(key in attributes)) {\n        continue;\n      }\n      if (!targetAttributes[key]) {\n        targetGeometry.setAttribute(key, createAttributeClone(attributes[key]));\n      }\n      validateAttributes(attributes[key], targetAttributes[key]);\n      copyAttributeContents(attributes[key], targetAttributes[key]);\n    }\n    return targetGeometry;\n  }\n}","map":{"version":3,"names":["BufferAttribute","BufferGeometry","Vector3","Vector4","Matrix4","Matrix3","_positionVector","_normalVector","_tangentVector","_tangentVector4","_morphVector","_temp","_skinIndex","_skinWeight","_matrix","_boneMatrix","validateAttributes","attr1","attr2","sameCount","count","sameNormalized","normalized","sameType","array","constructor","sameItemSize","itemSize","Error","createAttributeClone","attr","countOverride","arguments","length","undefined","cons","copyAttributeContents","target","targetOffset","isInterleavedBufferAttribute","i","l","io","setX","getX","setY","getY","setZ","getZ","setW","getW","byteOffset","BYTES_PER_ELEMENT","temp","buffer","set","addScaledMatrix","matrix","scale","targetArray","elements","matrixArray","boneNormalTransform","mesh","index","skeleton","geometry","bones","boneInverses","fromBufferAttribute","attributes","skinIndex","skinWeight","fill","weight","getComponent","boneIndex","multiplyMatrices","matrixWorld","multiply","bindMatrix","premultiply","bindMatrixInverse","transformDirection","applyMorphTarget","morphData","morphInfluences","morphTargetsRelative","j","jl","influence","morphAttribute","addScaledVector","sub","add","mergeBufferGeometries","geometries","options","useGroups","updateIndex","skipAttributes","targetGeometry","isIndexed","attributesUsed","Set","Object","keys","offset","clearGroups","attributesCount","name","has","push","size","position","addGroup","forceUpdateIndex","indexCount","setIndex","Uint32Array","targetIndex","indexOffset","attrList","key","setAttribute","targetAttribute","checkTypedArrayEquality","a","b","GeometryDiff","geometryHash","boneMatrices","primitiveCount","update","copy","version","boneTexture","computeBoneTexture","slice","didChange","identical","equals","StaticGeometryGenerator","meshes","Array","isArray","finalMeshes","forEach","object","traverseVisible","c","isMesh","applyWorldTransforms","_intermediateGeometry","map","_diffMap","WeakMap","getMaterials","materials","material","generate","geom","diff","get","_convertToStaticGeometry","needsUpdate","includeNormal","includes","includeTangent","targetAttributes","normal","tangent","morphPosition","morphAttributes","morphNormal","morphTangent","morphTargetInfluences","normalMatrix","getNormalMatrix","isSkinnedMesh","applyBoneTransform","applyMatrix4","setXYZ","x","y","z","applyNormalMatrix","setXYZW","w"],"sources":["D:/Repos/NIKE-DJANGO/Jord/l4fycy/node_modules/three-mesh-bvh/src/utils/StaticGeometryGenerator.js"],"sourcesContent":["import { BufferAttribute, BufferGeometry, Vector3, Vector4, Matrix4, Matrix3 } from 'three';\r\n\r\nconst _positionVector = /*@__PURE__*/ new Vector3();\r\nconst _normalVector = /*@__PURE__*/ new Vector3();\r\nconst _tangentVector = /*@__PURE__*/ new Vector3();\r\nconst _tangentVector4 = /*@__PURE__*/ new Vector4();\r\n\r\nconst _morphVector = /*@__PURE__*/ new Vector3();\r\nconst _temp = /*@__PURE__*/ new Vector3();\r\n\r\nconst _skinIndex = /*@__PURE__*/ new Vector4();\r\nconst _skinWeight = /*@__PURE__*/ new Vector4();\r\nconst _matrix = /*@__PURE__*/ new Matrix4();\r\nconst _boneMatrix = /*@__PURE__*/ new Matrix4();\r\n\r\n// Confirms that the two provided attributes are compatible\r\nfunction validateAttributes( attr1, attr2 ) {\r\n\r\n\tif ( ! attr1 && ! attr2 ) {\r\n\r\n\t\treturn;\r\n\r\n\t}\r\n\r\n\tconst sameCount = attr1.count === attr2.count;\r\n\tconst sameNormalized = attr1.normalized === attr2.normalized;\r\n\tconst sameType = attr1.array.constructor === attr2.array.constructor;\r\n\tconst sameItemSize = attr1.itemSize === attr2.itemSize;\r\n\r\n\tif ( ! sameCount || ! sameNormalized || ! sameType || ! sameItemSize ) {\r\n\r\n\t\tthrow new Error();\r\n\r\n\t}\r\n\r\n}\r\n\r\n// Clones the given attribute with a new compatible buffer attribute but no data\r\nfunction createAttributeClone( attr, countOverride = null ) {\r\n\r\n\tconst cons = attr.array.constructor;\r\n\tconst normalized = attr.normalized;\r\n\tconst itemSize = attr.itemSize;\r\n\tconst count = countOverride === null ? attr.count : countOverride;\r\n\r\n\treturn new BufferAttribute( new cons( itemSize * count ), itemSize, normalized );\r\n\r\n}\r\n\r\n// target offset is the number of elements in the target buffer stride to skip before copying the\r\n// attributes contents in to.\r\nfunction copyAttributeContents( attr, target, targetOffset = 0 ) {\r\n\r\n\tif ( attr.isInterleavedBufferAttribute ) {\r\n\r\n\t\tconst itemSize = attr.itemSize;\r\n\t\tfor ( let i = 0, l = attr.count; i < l; i ++ ) {\r\n\r\n\t\t\tconst io = i + targetOffset;\r\n\t\t\ttarget.setX( io, attr.getX( i ) );\r\n\t\t\tif ( itemSize >= 2 ) target.setY( io, attr.getY( i ) );\r\n\t\t\tif ( itemSize >= 3 ) target.setZ( io, attr.getZ( i ) );\r\n\t\t\tif ( itemSize >= 4 ) target.setW( io, attr.getW( i ) );\r\n\r\n\t\t}\r\n\r\n\t} else {\r\n\r\n\t\tconst array = target.array;\r\n\t\tconst cons = array.constructor;\r\n\t\tconst byteOffset = array.BYTES_PER_ELEMENT * attr.itemSize * targetOffset;\r\n\t\tconst temp = new cons( array.buffer, byteOffset, attr.array.length );\r\n\t\ttemp.set( attr.array );\r\n\r\n\t}\r\n\r\n}\r\n\r\n// Adds the \"matrix\" multiplied by \"scale\" to \"target\"\r\nfunction addScaledMatrix( target, matrix, scale ) {\r\n\r\n\tconst targetArray = target.elements;\r\n\tconst matrixArray = matrix.elements;\r\n\tfor ( let i = 0, l = matrixArray.length; i < l; i ++ ) {\r\n\r\n\t\ttargetArray[ i ] += matrixArray[ i ] * scale;\r\n\r\n\t}\r\n\r\n}\r\n\r\n// A version of \"SkinnedMesh.boneTransform\" for normals\r\nfunction boneNormalTransform( mesh, index, target ) {\r\n\r\n\tconst skeleton = mesh.skeleton;\r\n\tconst geometry = mesh.geometry;\r\n\tconst bones = skeleton.bones;\r\n\tconst boneInverses = skeleton.boneInverses;\r\n\r\n\t_skinIndex.fromBufferAttribute( geometry.attributes.skinIndex, index );\r\n\t_skinWeight.fromBufferAttribute( geometry.attributes.skinWeight, index );\r\n\r\n\t_matrix.elements.fill( 0 );\r\n\r\n\tfor ( let i = 0; i < 4; i ++ ) {\r\n\r\n\t\tconst weight = _skinWeight.getComponent( i );\r\n\r\n\t\tif ( weight !== 0 ) {\r\n\r\n\t\t\tconst boneIndex = _skinIndex.getComponent( i );\r\n\t\t\t_boneMatrix.multiplyMatrices( bones[ boneIndex ].matrixWorld, boneInverses[ boneIndex ] );\r\n\r\n\t\t\taddScaledMatrix( _matrix, _boneMatrix, weight );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t_matrix.multiply( mesh.bindMatrix ).premultiply( mesh.bindMatrixInverse );\r\n\ttarget.transformDirection( _matrix );\r\n\r\n\treturn target;\r\n\r\n}\r\n\r\n// Applies the morph target data to the target vector\r\nfunction applyMorphTarget( morphData, morphInfluences, morphTargetsRelative, i, target ) {\r\n\r\n\t_morphVector.set( 0, 0, 0 );\r\n\tfor ( let j = 0, jl = morphData.length; j < jl; j ++ ) {\r\n\r\n\t\tconst influence = morphInfluences[ j ];\r\n\t\tconst morphAttribute = morphData[ j ];\r\n\r\n\t\tif ( influence === 0 ) continue;\r\n\r\n\t\t_temp.fromBufferAttribute( morphAttribute, i );\r\n\r\n\t\tif ( morphTargetsRelative ) {\r\n\r\n\t\t\t_morphVector.addScaledVector( _temp, influence );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_morphVector.addScaledVector( _temp.sub( target ), influence );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\ttarget.add( _morphVector );\r\n\r\n}\r\n\r\n// Modified version of BufferGeometryUtils.mergeBufferGeometries that ignores morph targets and updates a attributes in place\r\nfunction mergeBufferGeometries( geometries, options = { useGroups: false, updateIndex: false, skipAttributes: [] }, targetGeometry = new BufferGeometry() ) {\r\n\r\n\tconst isIndexed = geometries[ 0 ].index !== null;\r\n\tconst { useGroups = false, updateIndex = false, skipAttributes = [] } = options;\r\n\r\n\tconst attributesUsed = new Set( Object.keys( geometries[ 0 ].attributes ) );\r\n\tconst attributes = {};\r\n\r\n\tlet offset = 0;\r\n\r\n\ttargetGeometry.clearGroups();\r\n\tfor ( let i = 0; i < geometries.length; ++ i ) {\r\n\r\n\t\tconst geometry = geometries[ i ];\r\n\t\tlet attributesCount = 0;\r\n\r\n\t\t// ensure that all geometries are indexed, or none\r\n\t\tif ( isIndexed !== ( geometry.index !== null ) ) {\r\n\r\n\t\t\tthrow new Error( 'StaticGeometryGenerator: All geometries must have compatible attributes; make sure index attribute exists among all geometries, or in none of them.' );\r\n\r\n\t\t}\r\n\r\n\t\t// gather attributes, exit early if they're different\r\n\t\tfor ( const name in geometry.attributes ) {\r\n\r\n\t\t\tif ( ! attributesUsed.has( name ) ) {\r\n\r\n\t\t\t\tthrow new Error( 'StaticGeometryGenerator: All geometries must have compatible attributes; make sure \"' + name + '\" attribute exists among all geometries, or in none of them.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( attributes[ name ] === undefined ) {\r\n\r\n\t\t\t\tattributes[ name ] = [];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tattributes[ name ].push( geometry.attributes[ name ] );\r\n\t\t\tattributesCount ++;\r\n\r\n\t\t}\r\n\r\n\t\t// ensure geometries have the same number of attributes\r\n\t\tif ( attributesCount !== attributesUsed.size ) {\r\n\r\n\t\t\tthrow new Error( 'StaticGeometryGenerator: Make sure all geometries have the same number of attributes.' );\r\n\r\n\t\t}\r\n\r\n\t\tif ( useGroups ) {\r\n\r\n\t\t\tlet count;\r\n\t\t\tif ( isIndexed ) {\r\n\r\n\t\t\t\tcount = geometry.index.count;\r\n\r\n\t\t\t} else if ( geometry.attributes.position !== undefined ) {\r\n\r\n\t\t\t\tcount = geometry.attributes.position.count;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthrow new Error( 'StaticGeometryGenerator: The geometry must have either an index or a position attribute' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttargetGeometry.addGroup( offset, count, i );\r\n\t\t\toffset += count;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// merge indices\r\n\tif ( isIndexed ) {\r\n\r\n\t\tlet forceUpdateIndex = false;\r\n\t\tif ( ! targetGeometry.index ) {\r\n\r\n\t\t\tlet indexCount = 0;\r\n\t\t\tfor ( let i = 0; i < geometries.length; ++ i ) {\r\n\r\n\t\t\t\tindexCount += geometries[ i ].index.count;\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttargetGeometry.setIndex( new BufferAttribute( new Uint32Array( indexCount ), 1, false ) );\r\n\t\t\tforceUpdateIndex = true;\r\n\r\n\t\t}\r\n\r\n\t\tif ( updateIndex || forceUpdateIndex ) {\r\n\r\n\t\t\tconst targetIndex = targetGeometry.index;\r\n\t\t\tlet targetOffset = 0;\r\n\t\t\tlet indexOffset = 0;\r\n\t\t\tfor ( let i = 0; i < geometries.length; ++ i ) {\r\n\r\n\t\t\t\tconst geometry = geometries[ i ];\r\n\t\t\t\tconst index = geometry.index;\r\n\t\t\t\tif ( skipAttributes[ i ] !== true ) {\r\n\r\n\t\t\t\t\tfor ( let j = 0; j < index.count; ++ j ) {\r\n\r\n\t\t\t\t\t\ttargetIndex.setX( targetOffset, index.getX( j ) + indexOffset );\r\n\t\t\t\t\t\ttargetOffset ++;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tindexOffset += geometry.attributes.position.count;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// merge attributes\r\n\tfor ( const name in attributes ) {\r\n\r\n\t\tconst attrList = attributes[ name ];\r\n\t\tif ( ! ( name in targetGeometry.attributes ) ) {\r\n\r\n\t\t\tlet count = 0;\r\n\t\t\tfor ( const key in attrList ) {\r\n\r\n\t\t\t\tcount += attrList[ key ].count;\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttargetGeometry.setAttribute( name, createAttributeClone( attributes[ name ][ 0 ], count ) );\r\n\r\n\t\t}\r\n\r\n\t\tconst targetAttribute = targetGeometry.attributes[ name ];\r\n\t\tlet offset = 0;\r\n\t\tfor ( let i = 0, l = attrList.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst attr = attrList[ i ];\r\n\t\t\tif ( skipAttributes[ i ] !== true ) {\r\n\r\n\t\t\t\tcopyAttributeContents( attr, targetAttribute, offset );\r\n\r\n\t\t\t}\r\n\r\n\t\t\toffset += attr.count;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn targetGeometry;\r\n\r\n}\r\n\r\nfunction checkTypedArrayEquality( a, b ) {\r\n\r\n\tif ( a === null || b === null ) {\r\n\r\n\t\treturn a === b;\r\n\r\n\t}\r\n\r\n\tif ( a.length !== b.length ) {\r\n\r\n\t\treturn false;\r\n\r\n\t}\r\n\r\n\tfor ( let i = 0, l = a.length; i < l; i ++ ) {\r\n\r\n\t\tif ( a[ i ] !== b[ i ] ) {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn true;\r\n\r\n}\r\n\r\n// Checks whether the geometry changed between this and last evaluation\r\nclass GeometryDiff {\r\n\r\n\tconstructor( mesh ) {\r\n\r\n\t\tthis.matrixWorld = new Matrix4();\r\n\t\tthis.geometryHash = null;\r\n\t\tthis.boneMatrices = null;\r\n\t\tthis.primitiveCount = - 1;\r\n\t\tthis.mesh = mesh;\r\n\r\n\t\tthis.update();\r\n\r\n\t}\r\n\r\n\tupdate() {\r\n\r\n\t\tconst mesh = this.mesh;\r\n\t\tconst geometry = mesh.geometry;\r\n\t\tconst skeleton = mesh.skeleton;\r\n\t\tconst primitiveCount = ( geometry.index ? geometry.index.count : geometry.attributes.position.count ) / 3;\r\n\t\tthis.matrixWorld.copy( mesh.matrixWorld );\r\n\t\tthis.geometryHash = geometry.attributes.position.version;\r\n\t\tthis.primitiveCount = primitiveCount;\r\n\r\n\t\tif ( skeleton ) {\r\n\r\n\t\t\t// ensure the bone matrix array is updated to the appropriate length\r\n\t\t\tif ( ! skeleton.boneTexture ) {\r\n\r\n\t\t\t\tskeleton.computeBoneTexture();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tskeleton.update();\r\n\r\n\t\t\t// copy data if possible otherwise clone it\r\n\t\t\tconst boneMatrices = skeleton.boneMatrices;\r\n\t\t\tif ( ! this.boneMatrices || this.boneMatrices.length !== boneMatrices.length ) {\r\n\r\n\t\t\t\tthis.boneMatrices = boneMatrices.slice();\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.boneMatrices.set( boneMatrices );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.boneMatrices = null;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tdidChange() {\r\n\r\n\t\tconst mesh = this.mesh;\r\n\t\tconst geometry = mesh.geometry;\r\n\t\tconst primitiveCount = ( geometry.index ? geometry.index.count : geometry.attributes.position.count ) / 3;\r\n\t\tconst identical =\r\n\t\t\tthis.matrixWorld.equals( mesh.matrixWorld ) &&\r\n\t\t\tthis.geometryHash === geometry.attributes.position.version &&\r\n\t\t\tcheckTypedArrayEquality( mesh.skeleton && mesh.skeleton.boneMatrices || null, this.boneMatrices ) &&\r\n\t\t\tthis.primitiveCount === primitiveCount;\r\n\r\n\t\treturn ! identical;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport class StaticGeometryGenerator {\r\n\r\n\tconstructor( meshes ) {\r\n\r\n\t\tif ( ! Array.isArray( meshes ) ) {\r\n\r\n\t\t\tmeshes = [ meshes ];\r\n\r\n\t\t}\r\n\r\n\t\tconst finalMeshes = [];\r\n\t\tmeshes.forEach( object => {\r\n\r\n\t\t\tobject.traverseVisible( c => {\r\n\r\n\t\t\t\tif ( c.isMesh ) {\r\n\r\n\t\t\t\t\tfinalMeshes.push( c );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} );\r\n\r\n\t\t} );\r\n\r\n\t\tthis.meshes = finalMeshes;\r\n\t\tthis.useGroups = true;\r\n\t\tthis.applyWorldTransforms = true;\r\n\t\tthis.attributes = [ 'position', 'normal', 'color', 'tangent', 'uv', 'uv2' ];\r\n\t\tthis._intermediateGeometry = new Array( finalMeshes.length ).fill().map( () => new BufferGeometry() );\r\n\t\tthis._diffMap = new WeakMap();\r\n\r\n\t}\r\n\r\n\tgetMaterials() {\r\n\r\n\t\tconst materials = [];\r\n\t\tthis.meshes.forEach( mesh => {\r\n\r\n\t\t\tif ( Array.isArray( mesh.material ) ) {\r\n\r\n\t\t\t\tmaterials.push( ...mesh.material );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tmaterials.push( mesh.material );\r\n\r\n\t\t\t}\r\n\r\n\t\t} );\r\n\t\treturn materials;\r\n\r\n\t}\r\n\r\n\tgenerate( targetGeometry = new BufferGeometry() ) {\r\n\r\n\t\t// track which attributes have been updated and which to skip to avoid unnecessary attribute copies\r\n\t\tlet skipAttributes = [];\r\n\t\tconst { meshes, useGroups, _intermediateGeometry, _diffMap } = this;\r\n\t\tfor ( let i = 0, l = meshes.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst mesh = meshes[ i ];\r\n\t\t\tconst geom = _intermediateGeometry[ i ];\r\n\t\t\tconst diff = _diffMap.get( mesh );\r\n\t\t\tif ( ! diff || diff.didChange( mesh ) ) {\r\n\r\n\t\t\t\tthis._convertToStaticGeometry( mesh, geom );\r\n\t\t\t\tskipAttributes.push( false );\r\n\r\n\t\t\t\tif ( ! diff ) {\r\n\r\n\t\t\t\t\t_diffMap.set( mesh, new GeometryDiff( mesh ) );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tdiff.update();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tskipAttributes.push( true );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tmergeBufferGeometries( _intermediateGeometry, { useGroups, skipAttributes }, targetGeometry );\r\n\r\n\t\tfor ( const key in targetGeometry.attributes ) {\r\n\r\n\t\t\ttargetGeometry.attributes[ key ].needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t\treturn targetGeometry;\r\n\r\n\t}\r\n\r\n\t_convertToStaticGeometry( mesh, targetGeometry = new BufferGeometry() ) {\r\n\r\n\t\tconst geometry = mesh.geometry;\r\n\t\tconst applyWorldTransforms = this.applyWorldTransforms;\r\n\t\tconst includeNormal = this.attributes.includes( 'normal' );\r\n\t\tconst includeTangent = this.attributes.includes( 'tangent' );\r\n\t\tconst attributes = geometry.attributes;\r\n\t\tconst targetAttributes = targetGeometry.attributes;\r\n\r\n\t\t// initialize the attributes if they don't exist\r\n\t\tif ( ! targetGeometry.index ) {\r\n\r\n\t\t\ttargetGeometry.index = geometry.index;\r\n\r\n\t\t}\r\n\r\n\t\tif ( ! targetAttributes.position ) {\r\n\r\n\t\t\ttargetGeometry.setAttribute( 'position', createAttributeClone( attributes.position ) );\r\n\r\n\t\t}\r\n\r\n\t\tif ( includeNormal && ! targetAttributes.normal && attributes.normal ) {\r\n\r\n\t\t\ttargetGeometry.setAttribute( 'normal', createAttributeClone( attributes.normal ) );\r\n\r\n\t\t}\r\n\r\n\t\tif ( includeTangent && ! targetAttributes.tangent && attributes.tangent ) {\r\n\r\n\t\t\ttargetGeometry.setAttribute( 'tangent', createAttributeClone( attributes.tangent ) );\r\n\r\n\t\t}\r\n\r\n\t\t// ensure the attributes are consistent\r\n\t\tvalidateAttributes( geometry.index, targetGeometry.index );\r\n\t\tvalidateAttributes( attributes.position, targetAttributes.position );\r\n\r\n\t\tif ( includeNormal ) {\r\n\r\n\t\t\tvalidateAttributes( attributes.normal, targetAttributes.normal );\r\n\r\n\t\t}\r\n\r\n\t\tif ( includeTangent ) {\r\n\r\n\t\t\tvalidateAttributes( attributes.tangent, targetAttributes.tangent );\r\n\r\n\t\t}\r\n\r\n\t\t// generate transformed vertex attribute data\r\n\t\tconst position = attributes.position;\r\n\t\tconst normal = includeNormal ? attributes.normal : null;\r\n\t\tconst tangent = includeTangent ? attributes.tangent : null;\r\n\t\tconst morphPosition = geometry.morphAttributes.position;\r\n\t\tconst morphNormal = geometry.morphAttributes.normal;\r\n\t\tconst morphTangent = geometry.morphAttributes.tangent;\r\n\t\tconst morphTargetsRelative = geometry.morphTargetsRelative;\r\n\t\tconst morphInfluences = mesh.morphTargetInfluences;\r\n\t\tconst normalMatrix = new Matrix3();\r\n\t\tnormalMatrix.getNormalMatrix( mesh.matrixWorld );\r\n\r\n\t\tfor ( let i = 0, l = attributes.position.count; i < l; i ++ ) {\r\n\r\n\t\t\t_positionVector.fromBufferAttribute( position, i );\r\n\t\t\tif ( normal ) {\r\n\r\n\t\t\t\t_normalVector.fromBufferAttribute( normal, i );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( tangent ) {\r\n\r\n\t\t\t\t_tangentVector4.fromBufferAttribute( tangent, i );\r\n\t\t\t\t_tangentVector.fromBufferAttribute( tangent, i );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// apply morph target transform\r\n\t\t\tif ( morphInfluences ) {\r\n\r\n\t\t\t\tif ( morphPosition ) {\r\n\r\n\t\t\t\t\tapplyMorphTarget( morphPosition, morphInfluences, morphTargetsRelative, i, _positionVector );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( morphNormal ) {\r\n\r\n\t\t\t\t\tapplyMorphTarget( morphNormal, morphInfluences, morphTargetsRelative, i, _normalVector );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( morphTangent ) {\r\n\r\n\t\t\t\t\tapplyMorphTarget( morphTangent, morphInfluences, morphTargetsRelative, i, _tangentVector );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// apply bone transform\r\n\t\t\tif ( mesh.isSkinnedMesh ) {\r\n\r\n\t\t\t\tmesh.applyBoneTransform( i, _positionVector );\r\n\t\t\t\tif ( normal ) {\r\n\r\n\t\t\t\t\tboneNormalTransform( mesh, i, _normalVector );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( tangent ) {\r\n\r\n\t\t\t\t\tboneNormalTransform( mesh, i, _tangentVector );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// update the vectors of the attributes\r\n\t\t\tif ( applyWorldTransforms ) {\r\n\r\n\t\t\t\t_positionVector.applyMatrix4( mesh.matrixWorld );\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttargetAttributes.position.setXYZ( i, _positionVector.x, _positionVector.y, _positionVector.z );\r\n\r\n\t\t\tif ( normal ) {\r\n\r\n\t\t\t\tif ( applyWorldTransforms ) {\r\n\r\n\t\t\t\t\t_normalVector.applyNormalMatrix( normalMatrix );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttargetAttributes.normal.setXYZ( i, _normalVector.x, _normalVector.y, _normalVector.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( tangent ) {\r\n\r\n\t\t\t\tif ( applyWorldTransforms ) {\r\n\r\n\t\t\t\t\t_tangentVector.transformDirection( mesh.matrixWorld );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttargetAttributes.tangent.setXYZW( i, _tangentVector.x, _tangentVector.y, _tangentVector.z, _tangentVector4.w );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// copy other attributes over\r\n\t\tfor ( const i in this.attributes ) {\r\n\r\n\t\t\tconst key = this.attributes[ i ];\r\n\t\t\tif ( key === 'position' || key === 'tangent' || key === 'normal' || ! ( key in attributes ) ) {\r\n\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( ! targetAttributes[ key ] ) {\r\n\r\n\t\t\t\ttargetGeometry.setAttribute( key, createAttributeClone( attributes[ key ] ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvalidateAttributes( attributes[ key ], targetAttributes[ key ] );\r\n\t\t\tcopyAttributeContents( attributes[ key ], targetAttributes[ key ] );\r\n\r\n\t\t}\r\n\r\n\t\treturn targetGeometry;\r\n\r\n\t}\r\n\r\n}\r\n"],"mappings":"AAAA,SAASA,eAAe,EAAEC,cAAc,EAAEC,OAAO,EAAEC,OAAO,EAAEC,OAAO,EAAEC,OAAO,QAAQ,OAAO;AAE3F,MAAMC,eAAe,GAAG,aAAc,IAAIJ,OAAO,CAAC,CAAC;AACnD,MAAMK,aAAa,GAAG,aAAc,IAAIL,OAAO,CAAC,CAAC;AACjD,MAAMM,cAAc,GAAG,aAAc,IAAIN,OAAO,CAAC,CAAC;AAClD,MAAMO,eAAe,GAAG,aAAc,IAAIN,OAAO,CAAC,CAAC;AAEnD,MAAMO,YAAY,GAAG,aAAc,IAAIR,OAAO,CAAC,CAAC;AAChD,MAAMS,KAAK,GAAG,aAAc,IAAIT,OAAO,CAAC,CAAC;AAEzC,MAAMU,UAAU,GAAG,aAAc,IAAIT,OAAO,CAAC,CAAC;AAC9C,MAAMU,WAAW,GAAG,aAAc,IAAIV,OAAO,CAAC,CAAC;AAC/C,MAAMW,OAAO,GAAG,aAAc,IAAIV,OAAO,CAAC,CAAC;AAC3C,MAAMW,WAAW,GAAG,aAAc,IAAIX,OAAO,CAAC,CAAC;;AAE/C;AACA,SAASY,kBAAkBA,CAAEC,KAAK,EAAEC,KAAK,EAAG;EAE3C,IAAK,CAAED,KAAK,IAAI,CAAEC,KAAK,EAAG;IAEzB;EAED;EAEA,MAAMC,SAAS,GAAGF,KAAK,CAACG,KAAK,KAAKF,KAAK,CAACE,KAAK;EAC7C,MAAMC,cAAc,GAAGJ,KAAK,CAACK,UAAU,KAAKJ,KAAK,CAACI,UAAU;EAC5D,MAAMC,QAAQ,GAAGN,KAAK,CAACO,KAAK,CAACC,WAAW,KAAKP,KAAK,CAACM,KAAK,CAACC,WAAW;EACpE,MAAMC,YAAY,GAAGT,KAAK,CAACU,QAAQ,KAAKT,KAAK,CAACS,QAAQ;EAEtD,IAAK,CAAER,SAAS,IAAI,CAAEE,cAAc,IAAI,CAAEE,QAAQ,IAAI,CAAEG,YAAY,EAAG;IAEtE,MAAM,IAAIE,KAAK,CAAC,CAAC;EAElB;AAED;;AAEA;AACA,SAASC,oBAAoBA,CAAEC,IAAI,EAAyB;EAAA,IAAvBC,aAAa,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;EAExD,MAAMG,IAAI,GAAGL,IAAI,CAACN,KAAK,CAACC,WAAW;EACnC,MAAMH,UAAU,GAAGQ,IAAI,CAACR,UAAU;EAClC,MAAMK,QAAQ,GAAGG,IAAI,CAACH,QAAQ;EAC9B,MAAMP,KAAK,GAAGW,aAAa,KAAK,IAAI,GAAGD,IAAI,CAACV,KAAK,GAAGW,aAAa;EAEjE,OAAO,IAAI/B,eAAe,CAAE,IAAImC,IAAI,CAAER,QAAQ,GAAGP,KAAM,CAAC,EAAEO,QAAQ,EAAEL,UAAW,CAAC;AAEjF;;AAEA;AACA;AACA,SAASc,qBAAqBA,CAAEN,IAAI,EAAEO,MAAM,EAAqB;EAAA,IAAnBC,YAAY,GAAAN,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;EAE7D,IAAKF,IAAI,CAACS,4BAA4B,EAAG;IAExC,MAAMZ,QAAQ,GAAGG,IAAI,CAACH,QAAQ;IAC9B,KAAM,IAAIa,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGX,IAAI,CAACV,KAAK,EAAEoB,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAG,EAAG;MAE9C,MAAME,EAAE,GAAGF,CAAC,GAAGF,YAAY;MAC3BD,MAAM,CAACM,IAAI,CAAED,EAAE,EAAEZ,IAAI,CAACc,IAAI,CAAEJ,CAAE,CAAE,CAAC;MACjC,IAAKb,QAAQ,IAAI,CAAC,EAAGU,MAAM,CAACQ,IAAI,CAAEH,EAAE,EAAEZ,IAAI,CAACgB,IAAI,CAAEN,CAAE,CAAE,CAAC;MACtD,IAAKb,QAAQ,IAAI,CAAC,EAAGU,MAAM,CAACU,IAAI,CAAEL,EAAE,EAAEZ,IAAI,CAACkB,IAAI,CAAER,CAAE,CAAE,CAAC;MACtD,IAAKb,QAAQ,IAAI,CAAC,EAAGU,MAAM,CAACY,IAAI,CAAEP,EAAE,EAAEZ,IAAI,CAACoB,IAAI,CAAEV,CAAE,CAAE,CAAC;IAEvD;EAED,CAAC,MAAM;IAEN,MAAMhB,KAAK,GAAGa,MAAM,CAACb,KAAK;IAC1B,MAAMW,IAAI,GAAGX,KAAK,CAACC,WAAW;IAC9B,MAAM0B,UAAU,GAAG3B,KAAK,CAAC4B,iBAAiB,GAAGtB,IAAI,CAACH,QAAQ,GAAGW,YAAY;IACzE,MAAMe,IAAI,GAAG,IAAIlB,IAAI,CAAEX,KAAK,CAAC8B,MAAM,EAAEH,UAAU,EAAErB,IAAI,CAACN,KAAK,CAACS,MAAO,CAAC;IACpEoB,IAAI,CAACE,GAAG,CAAEzB,IAAI,CAACN,KAAM,CAAC;EAEvB;AAED;;AAEA;AACA,SAASgC,eAAeA,CAAEnB,MAAM,EAAEoB,MAAM,EAAEC,KAAK,EAAG;EAEjD,MAAMC,WAAW,GAAGtB,MAAM,CAACuB,QAAQ;EACnC,MAAMC,WAAW,GAAGJ,MAAM,CAACG,QAAQ;EACnC,KAAM,IAAIpB,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGoB,WAAW,CAAC5B,MAAM,EAAEO,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAG,EAAG;IAEtDmB,WAAW,CAAEnB,CAAC,CAAE,IAAIqB,WAAW,CAAErB,CAAC,CAAE,GAAGkB,KAAK;EAE7C;AAED;;AAEA;AACA,SAASI,mBAAmBA,CAAEC,IAAI,EAAEC,KAAK,EAAE3B,MAAM,EAAG;EAEnD,MAAM4B,QAAQ,GAAGF,IAAI,CAACE,QAAQ;EAC9B,MAAMC,QAAQ,GAAGH,IAAI,CAACG,QAAQ;EAC9B,MAAMC,KAAK,GAAGF,QAAQ,CAACE,KAAK;EAC5B,MAAMC,YAAY,GAAGH,QAAQ,CAACG,YAAY;EAE1CxD,UAAU,CAACyD,mBAAmB,CAAEH,QAAQ,CAACI,UAAU,CAACC,SAAS,EAAEP,KAAM,CAAC;EACtEnD,WAAW,CAACwD,mBAAmB,CAAEH,QAAQ,CAACI,UAAU,CAACE,UAAU,EAAER,KAAM,CAAC;EAExElD,OAAO,CAAC8C,QAAQ,CAACa,IAAI,CAAE,CAAE,CAAC;EAE1B,KAAM,IAAIjC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAG,EAAG;IAE9B,MAAMkC,MAAM,GAAG7D,WAAW,CAAC8D,YAAY,CAAEnC,CAAE,CAAC;IAE5C,IAAKkC,MAAM,KAAK,CAAC,EAAG;MAEnB,MAAME,SAAS,GAAGhE,UAAU,CAAC+D,YAAY,CAAEnC,CAAE,CAAC;MAC9CzB,WAAW,CAAC8D,gBAAgB,CAAEV,KAAK,CAAES,SAAS,CAAE,CAACE,WAAW,EAAEV,YAAY,CAAEQ,SAAS,CAAG,CAAC;MAEzFpB,eAAe,CAAE1C,OAAO,EAAEC,WAAW,EAAE2D,MAAO,CAAC;IAEhD;EAED;EAEA5D,OAAO,CAACiE,QAAQ,CAAEhB,IAAI,CAACiB,UAAW,CAAC,CAACC,WAAW,CAAElB,IAAI,CAACmB,iBAAkB,CAAC;EACzE7C,MAAM,CAAC8C,kBAAkB,CAAErE,OAAQ,CAAC;EAEpC,OAAOuB,MAAM;AAEd;;AAEA;AACA,SAAS+C,gBAAgBA,CAAEC,SAAS,EAAEC,eAAe,EAAEC,oBAAoB,EAAE/C,CAAC,EAAEH,MAAM,EAAG;EAExF3B,YAAY,CAAC6C,GAAG,CAAE,CAAC,EAAE,CAAC,EAAE,CAAE,CAAC;EAC3B,KAAM,IAAIiC,CAAC,GAAG,CAAC,EAAEC,EAAE,GAAGJ,SAAS,CAACpD,MAAM,EAAEuD,CAAC,GAAGC,EAAE,EAAED,CAAC,EAAG,EAAG;IAEtD,MAAME,SAAS,GAAGJ,eAAe,CAAEE,CAAC,CAAE;IACtC,MAAMG,cAAc,GAAGN,SAAS,CAAEG,CAAC,CAAE;IAErC,IAAKE,SAAS,KAAK,CAAC,EAAG;IAEvB/E,KAAK,CAAC0D,mBAAmB,CAAEsB,cAAc,EAAEnD,CAAE,CAAC;IAE9C,IAAK+C,oBAAoB,EAAG;MAE3B7E,YAAY,CAACkF,eAAe,CAAEjF,KAAK,EAAE+E,SAAU,CAAC;IAEjD,CAAC,MAAM;MAENhF,YAAY,CAACkF,eAAe,CAAEjF,KAAK,CAACkF,GAAG,CAAExD,MAAO,CAAC,EAAEqD,SAAU,CAAC;IAE/D;EAED;EAEArD,MAAM,CAACyD,GAAG,CAAEpF,YAAa,CAAC;AAE3B;;AAEA;AACA,SAASqF,qBAAqBA,CAAEC,UAAU,EAAkH;EAAA,IAAhHC,OAAO,GAAAjE,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG;IAAEkE,SAAS,EAAE,KAAK;IAAEC,WAAW,EAAE,KAAK;IAAEC,cAAc,EAAE;EAAG,CAAC;EAAA,IAAEC,cAAc,GAAArE,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI/B,cAAc,CAAC,CAAC;EAExJ,MAAMqG,SAAS,GAAGN,UAAU,CAAE,CAAC,CAAE,CAAChC,KAAK,KAAK,IAAI;EAChD,MAAM;IAAEkC,SAAS,GAAG,KAAK;IAAEC,WAAW,GAAG,KAAK;IAAEC,cAAc,GAAG;EAAG,CAAC,GAAGH,OAAO;EAE/E,MAAMM,cAAc,GAAG,IAAIC,GAAG,CAAEC,MAAM,CAACC,IAAI,CAAEV,UAAU,CAAE,CAAC,CAAE,CAAC1B,UAAW,CAAE,CAAC;EAC3E,MAAMA,UAAU,GAAG,CAAC,CAAC;EAErB,IAAIqC,MAAM,GAAG,CAAC;EAEdN,cAAc,CAACO,WAAW,CAAC,CAAC;EAC5B,KAAM,IAAIpE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwD,UAAU,CAAC/D,MAAM,EAAE,EAAGO,CAAC,EAAG;IAE9C,MAAM0B,QAAQ,GAAG8B,UAAU,CAAExD,CAAC,CAAE;IAChC,IAAIqE,eAAe,GAAG,CAAC;;IAEvB;IACA,IAAKP,SAAS,MAAOpC,QAAQ,CAACF,KAAK,KAAK,IAAI,CAAE,EAAG;MAEhD,MAAM,IAAIpC,KAAK,CAAE,qJAAsJ,CAAC;IAEzK;;IAEA;IACA,KAAM,MAAMkF,IAAI,IAAI5C,QAAQ,CAACI,UAAU,EAAG;MAEzC,IAAK,CAAEiC,cAAc,CAACQ,GAAG,CAAED,IAAK,CAAC,EAAG;QAEnC,MAAM,IAAIlF,KAAK,CAAE,sFAAsF,GAAGkF,IAAI,GAAG,8DAA+D,CAAC;MAElL;MAEA,IAAKxC,UAAU,CAAEwC,IAAI,CAAE,KAAK5E,SAAS,EAAG;QAEvCoC,UAAU,CAAEwC,IAAI,CAAE,GAAG,EAAE;MAExB;MAEAxC,UAAU,CAAEwC,IAAI,CAAE,CAACE,IAAI,CAAE9C,QAAQ,CAACI,UAAU,CAAEwC,IAAI,CAAG,CAAC;MACtDD,eAAe,EAAG;IAEnB;;IAEA;IACA,IAAKA,eAAe,KAAKN,cAAc,CAACU,IAAI,EAAG;MAE9C,MAAM,IAAIrF,KAAK,CAAE,uFAAwF,CAAC;IAE3G;IAEA,IAAKsE,SAAS,EAAG;MAEhB,IAAI9E,KAAK;MACT,IAAKkF,SAAS,EAAG;QAEhBlF,KAAK,GAAG8C,QAAQ,CAACF,KAAK,CAAC5C,KAAK;MAE7B,CAAC,MAAM,IAAK8C,QAAQ,CAACI,UAAU,CAAC4C,QAAQ,KAAKhF,SAAS,EAAG;QAExDd,KAAK,GAAG8C,QAAQ,CAACI,UAAU,CAAC4C,QAAQ,CAAC9F,KAAK;MAE3C,CAAC,MAAM;QAEN,MAAM,IAAIQ,KAAK,CAAE,yFAA0F,CAAC;MAE7G;MAEAyE,cAAc,CAACc,QAAQ,CAAER,MAAM,EAAEvF,KAAK,EAAEoB,CAAE,CAAC;MAC3CmE,MAAM,IAAIvF,KAAK;IAEhB;EAED;;EAEA;EACA,IAAKkF,SAAS,EAAG;IAEhB,IAAIc,gBAAgB,GAAG,KAAK;IAC5B,IAAK,CAAEf,cAAc,CAACrC,KAAK,EAAG;MAE7B,IAAIqD,UAAU,GAAG,CAAC;MAClB,KAAM,IAAI7E,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwD,UAAU,CAAC/D,MAAM,EAAE,EAAGO,CAAC,EAAG;QAE9C6E,UAAU,IAAIrB,UAAU,CAAExD,CAAC,CAAE,CAACwB,KAAK,CAAC5C,KAAK;MAE1C;MAEAiF,cAAc,CAACiB,QAAQ,CAAE,IAAItH,eAAe,CAAE,IAAIuH,WAAW,CAAEF,UAAW,CAAC,EAAE,CAAC,EAAE,KAAM,CAAE,CAAC;MACzFD,gBAAgB,GAAG,IAAI;IAExB;IAEA,IAAKjB,WAAW,IAAIiB,gBAAgB,EAAG;MAEtC,MAAMI,WAAW,GAAGnB,cAAc,CAACrC,KAAK;MACxC,IAAI1B,YAAY,GAAG,CAAC;MACpB,IAAImF,WAAW,GAAG,CAAC;MACnB,KAAM,IAAIjF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwD,UAAU,CAAC/D,MAAM,EAAE,EAAGO,CAAC,EAAG;QAE9C,MAAM0B,QAAQ,GAAG8B,UAAU,CAAExD,CAAC,CAAE;QAChC,MAAMwB,KAAK,GAAGE,QAAQ,CAACF,KAAK;QAC5B,IAAKoC,cAAc,CAAE5D,CAAC,CAAE,KAAK,IAAI,EAAG;UAEnC,KAAM,IAAIgD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGxB,KAAK,CAAC5C,KAAK,EAAE,EAAGoE,CAAC,EAAG;YAExCgC,WAAW,CAAC7E,IAAI,CAAEL,YAAY,EAAE0B,KAAK,CAACpB,IAAI,CAAE4C,CAAE,CAAC,GAAGiC,WAAY,CAAC;YAC/DnF,YAAY,EAAG;UAEhB;QAED;QAEAmF,WAAW,IAAIvD,QAAQ,CAACI,UAAU,CAAC4C,QAAQ,CAAC9F,KAAK;MAElD;IAED;EAED;;EAEA;EACA,KAAM,MAAM0F,IAAI,IAAIxC,UAAU,EAAG;IAEhC,MAAMoD,QAAQ,GAAGpD,UAAU,CAAEwC,IAAI,CAAE;IACnC,IAAK,EAAIA,IAAI,IAAIT,cAAc,CAAC/B,UAAU,CAAE,EAAG;MAE9C,IAAIlD,KAAK,GAAG,CAAC;MACb,KAAM,MAAMuG,GAAG,IAAID,QAAQ,EAAG;QAE7BtG,KAAK,IAAIsG,QAAQ,CAAEC,GAAG,CAAE,CAACvG,KAAK;MAE/B;MAEAiF,cAAc,CAACuB,YAAY,CAAEd,IAAI,EAAEjF,oBAAoB,CAAEyC,UAAU,CAAEwC,IAAI,CAAE,CAAE,CAAC,CAAE,EAAE1F,KAAM,CAAE,CAAC;IAE5F;IAEA,MAAMyG,eAAe,GAAGxB,cAAc,CAAC/B,UAAU,CAAEwC,IAAI,CAAE;IACzD,IAAIH,MAAM,GAAG,CAAC;IACd,KAAM,IAAInE,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGiF,QAAQ,CAACzF,MAAM,EAAEO,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAG,EAAG;MAEnD,MAAMV,IAAI,GAAG4F,QAAQ,CAAElF,CAAC,CAAE;MAC1B,IAAK4D,cAAc,CAAE5D,CAAC,CAAE,KAAK,IAAI,EAAG;QAEnCJ,qBAAqB,CAAEN,IAAI,EAAE+F,eAAe,EAAElB,MAAO,CAAC;MAEvD;MAEAA,MAAM,IAAI7E,IAAI,CAACV,KAAK;IAErB;EAED;EAEA,OAAOiF,cAAc;AAEtB;AAEA,SAASyB,uBAAuBA,CAAEC,CAAC,EAAEC,CAAC,EAAG;EAExC,IAAKD,CAAC,KAAK,IAAI,IAAIC,CAAC,KAAK,IAAI,EAAG;IAE/B,OAAOD,CAAC,KAAKC,CAAC;EAEf;EAEA,IAAKD,CAAC,CAAC9F,MAAM,KAAK+F,CAAC,CAAC/F,MAAM,EAAG;IAE5B,OAAO,KAAK;EAEb;EAEA,KAAM,IAAIO,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGsF,CAAC,CAAC9F,MAAM,EAAEO,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAG,EAAG;IAE5C,IAAKuF,CAAC,CAAEvF,CAAC,CAAE,KAAKwF,CAAC,CAAExF,CAAC,CAAE,EAAG;MAExB,OAAO,KAAK;IAEb;EAED;EAEA,OAAO,IAAI;AAEZ;;AAEA;AACA,MAAMyF,YAAY,CAAC;EAElBxG,WAAWA,CAAEsC,IAAI,EAAG;IAEnB,IAAI,CAACe,WAAW,GAAG,IAAI1E,OAAO,CAAC,CAAC;IAChC,IAAI,CAAC8H,YAAY,GAAG,IAAI;IACxB,IAAI,CAACC,YAAY,GAAG,IAAI;IACxB,IAAI,CAACC,cAAc,GAAG,CAAE,CAAC;IACzB,IAAI,CAACrE,IAAI,GAAGA,IAAI;IAEhB,IAAI,CAACsE,MAAM,CAAC,CAAC;EAEd;EAEAA,MAAMA,CAAA,EAAG;IAER,MAAMtE,IAAI,GAAG,IAAI,CAACA,IAAI;IACtB,MAAMG,QAAQ,GAAGH,IAAI,CAACG,QAAQ;IAC9B,MAAMD,QAAQ,GAAGF,IAAI,CAACE,QAAQ;IAC9B,MAAMmE,cAAc,GAAG,CAAElE,QAAQ,CAACF,KAAK,GAAGE,QAAQ,CAACF,KAAK,CAAC5C,KAAK,GAAG8C,QAAQ,CAACI,UAAU,CAAC4C,QAAQ,CAAC9F,KAAK,IAAK,CAAC;IACzG,IAAI,CAAC0D,WAAW,CAACwD,IAAI,CAAEvE,IAAI,CAACe,WAAY,CAAC;IACzC,IAAI,CAACoD,YAAY,GAAGhE,QAAQ,CAACI,UAAU,CAAC4C,QAAQ,CAACqB,OAAO;IACxD,IAAI,CAACH,cAAc,GAAGA,cAAc;IAEpC,IAAKnE,QAAQ,EAAG;MAEf;MACA,IAAK,CAAEA,QAAQ,CAACuE,WAAW,EAAG;QAE7BvE,QAAQ,CAACwE,kBAAkB,CAAC,CAAC;MAE9B;MAEAxE,QAAQ,CAACoE,MAAM,CAAC,CAAC;;MAEjB;MACA,MAAMF,YAAY,GAAGlE,QAAQ,CAACkE,YAAY;MAC1C,IAAK,CAAE,IAAI,CAACA,YAAY,IAAI,IAAI,CAACA,YAAY,CAAClG,MAAM,KAAKkG,YAAY,CAAClG,MAAM,EAAG;QAE9E,IAAI,CAACkG,YAAY,GAAGA,YAAY,CAACO,KAAK,CAAC,CAAC;MAEzC,CAAC,MAAM;QAEN,IAAI,CAACP,YAAY,CAAC5E,GAAG,CAAE4E,YAAa,CAAC;MAEtC;IAED,CAAC,MAAM;MAEN,IAAI,CAACA,YAAY,GAAG,IAAI;IAEzB;EAED;EAEAQ,SAASA,CAAA,EAAG;IAEX,MAAM5E,IAAI,GAAG,IAAI,CAACA,IAAI;IACtB,MAAMG,QAAQ,GAAGH,IAAI,CAACG,QAAQ;IAC9B,MAAMkE,cAAc,GAAG,CAAElE,QAAQ,CAACF,KAAK,GAAGE,QAAQ,CAACF,KAAK,CAAC5C,KAAK,GAAG8C,QAAQ,CAACI,UAAU,CAAC4C,QAAQ,CAAC9F,KAAK,IAAK,CAAC;IACzG,MAAMwH,SAAS,GACd,IAAI,CAAC9D,WAAW,CAAC+D,MAAM,CAAE9E,IAAI,CAACe,WAAY,CAAC,IAC3C,IAAI,CAACoD,YAAY,KAAKhE,QAAQ,CAACI,UAAU,CAAC4C,QAAQ,CAACqB,OAAO,IAC1DT,uBAAuB,CAAE/D,IAAI,CAACE,QAAQ,IAAIF,IAAI,CAACE,QAAQ,CAACkE,YAAY,IAAI,IAAI,EAAE,IAAI,CAACA,YAAa,CAAC,IACjG,IAAI,CAACC,cAAc,KAAKA,cAAc;IAEvC,OAAO,CAAEQ,SAAS;EAEnB;AAED;AAEA,OAAO,MAAME,uBAAuB,CAAC;EAEpCrH,WAAWA,CAAEsH,MAAM,EAAG;IAErB,IAAK,CAAEC,KAAK,CAACC,OAAO,CAAEF,MAAO,CAAC,EAAG;MAEhCA,MAAM,GAAG,CAAEA,MAAM,CAAE;IAEpB;IAEA,MAAMG,WAAW,GAAG,EAAE;IACtBH,MAAM,CAACI,OAAO,CAAEC,MAAM,IAAI;MAEzBA,MAAM,CAACC,eAAe,CAAEC,CAAC,IAAI;QAE5B,IAAKA,CAAC,CAACC,MAAM,EAAG;UAEfL,WAAW,CAAClC,IAAI,CAAEsC,CAAE,CAAC;QAEtB;MAED,CAAE,CAAC;IAEJ,CAAE,CAAC;IAEH,IAAI,CAACP,MAAM,GAAGG,WAAW;IACzB,IAAI,CAAChD,SAAS,GAAG,IAAI;IACrB,IAAI,CAACsD,oBAAoB,GAAG,IAAI;IAChC,IAAI,CAAClF,UAAU,GAAG,CAAE,UAAU,EAAE,QAAQ,EAAE,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,KAAK,CAAE;IAC3E,IAAI,CAACmF,qBAAqB,GAAG,IAAIT,KAAK,CAAEE,WAAW,CAACjH,MAAO,CAAC,CAACwC,IAAI,CAAC,CAAC,CAACiF,GAAG,CAAE,MAAM,IAAIzJ,cAAc,CAAC,CAAE,CAAC;IACrG,IAAI,CAAC0J,QAAQ,GAAG,IAAIC,OAAO,CAAC,CAAC;EAE9B;EAEAC,YAAYA,CAAA,EAAG;IAEd,MAAMC,SAAS,GAAG,EAAE;IACpB,IAAI,CAACf,MAAM,CAACI,OAAO,CAAEpF,IAAI,IAAI;MAE5B,IAAKiF,KAAK,CAACC,OAAO,CAAElF,IAAI,CAACgG,QAAS,CAAC,EAAG;QAErCD,SAAS,CAAC9C,IAAI,CAAE,GAAGjD,IAAI,CAACgG,QAAS,CAAC;MAEnC,CAAC,MAAM;QAEND,SAAS,CAAC9C,IAAI,CAAEjD,IAAI,CAACgG,QAAS,CAAC;MAEhC;IAED,CAAE,CAAC;IACH,OAAOD,SAAS;EAEjB;EAEAE,QAAQA,CAAA,EAA0C;IAAA,IAAxC3D,cAAc,GAAArE,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI/B,cAAc,CAAC,CAAC;IAE9C;IACA,IAAImG,cAAc,GAAG,EAAE;IACvB,MAAM;MAAE2C,MAAM;MAAE7C,SAAS;MAAEuD,qBAAqB;MAAEE;IAAS,CAAC,GAAG,IAAI;IACnE,KAAM,IAAInH,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGsG,MAAM,CAAC9G,MAAM,EAAEO,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAG,EAAG;MAEjD,MAAMuB,IAAI,GAAGgF,MAAM,CAAEvG,CAAC,CAAE;MACxB,MAAMyH,IAAI,GAAGR,qBAAqB,CAAEjH,CAAC,CAAE;MACvC,MAAM0H,IAAI,GAAGP,QAAQ,CAACQ,GAAG,CAAEpG,IAAK,CAAC;MACjC,IAAK,CAAEmG,IAAI,IAAIA,IAAI,CAACvB,SAAS,CAAE5E,IAAK,CAAC,EAAG;QAEvC,IAAI,CAACqG,wBAAwB,CAAErG,IAAI,EAAEkG,IAAK,CAAC;QAC3C7D,cAAc,CAACY,IAAI,CAAE,KAAM,CAAC;QAE5B,IAAK,CAAEkD,IAAI,EAAG;UAEbP,QAAQ,CAACpG,GAAG,CAAEQ,IAAI,EAAE,IAAIkE,YAAY,CAAElE,IAAK,CAAE,CAAC;QAE/C,CAAC,MAAM;UAENmG,IAAI,CAAC7B,MAAM,CAAC,CAAC;QAEd;MAED,CAAC,MAAM;QAENjC,cAAc,CAACY,IAAI,CAAE,IAAK,CAAC;MAE5B;IAED;IAEAjB,qBAAqB,CAAE0D,qBAAqB,EAAE;MAAEvD,SAAS;MAAEE;IAAe,CAAC,EAAEC,cAAe,CAAC;IAE7F,KAAM,MAAMsB,GAAG,IAAItB,cAAc,CAAC/B,UAAU,EAAG;MAE9C+B,cAAc,CAAC/B,UAAU,CAAEqD,GAAG,CAAE,CAAC0C,WAAW,GAAG,IAAI;IAEpD;IAEA,OAAOhE,cAAc;EAEtB;EAEA+D,wBAAwBA,CAAErG,IAAI,EAA0C;IAAA,IAAxCsC,cAAc,GAAArE,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI/B,cAAc,CAAC,CAAC;IAEpE,MAAMiE,QAAQ,GAAGH,IAAI,CAACG,QAAQ;IAC9B,MAAMsF,oBAAoB,GAAG,IAAI,CAACA,oBAAoB;IACtD,MAAMc,aAAa,GAAG,IAAI,CAAChG,UAAU,CAACiG,QAAQ,CAAE,QAAS,CAAC;IAC1D,MAAMC,cAAc,GAAG,IAAI,CAAClG,UAAU,CAACiG,QAAQ,CAAE,SAAU,CAAC;IAC5D,MAAMjG,UAAU,GAAGJ,QAAQ,CAACI,UAAU;IACtC,MAAMmG,gBAAgB,GAAGpE,cAAc,CAAC/B,UAAU;;IAElD;IACA,IAAK,CAAE+B,cAAc,CAACrC,KAAK,EAAG;MAE7BqC,cAAc,CAACrC,KAAK,GAAGE,QAAQ,CAACF,KAAK;IAEtC;IAEA,IAAK,CAAEyG,gBAAgB,CAACvD,QAAQ,EAAG;MAElCb,cAAc,CAACuB,YAAY,CAAE,UAAU,EAAE/F,oBAAoB,CAAEyC,UAAU,CAAC4C,QAAS,CAAE,CAAC;IAEvF;IAEA,IAAKoD,aAAa,IAAI,CAAEG,gBAAgB,CAACC,MAAM,IAAIpG,UAAU,CAACoG,MAAM,EAAG;MAEtErE,cAAc,CAACuB,YAAY,CAAE,QAAQ,EAAE/F,oBAAoB,CAAEyC,UAAU,CAACoG,MAAO,CAAE,CAAC;IAEnF;IAEA,IAAKF,cAAc,IAAI,CAAEC,gBAAgB,CAACE,OAAO,IAAIrG,UAAU,CAACqG,OAAO,EAAG;MAEzEtE,cAAc,CAACuB,YAAY,CAAE,SAAS,EAAE/F,oBAAoB,CAAEyC,UAAU,CAACqG,OAAQ,CAAE,CAAC;IAErF;;IAEA;IACA3J,kBAAkB,CAAEkD,QAAQ,CAACF,KAAK,EAAEqC,cAAc,CAACrC,KAAM,CAAC;IAC1DhD,kBAAkB,CAAEsD,UAAU,CAAC4C,QAAQ,EAAEuD,gBAAgB,CAACvD,QAAS,CAAC;IAEpE,IAAKoD,aAAa,EAAG;MAEpBtJ,kBAAkB,CAAEsD,UAAU,CAACoG,MAAM,EAAED,gBAAgB,CAACC,MAAO,CAAC;IAEjE;IAEA,IAAKF,cAAc,EAAG;MAErBxJ,kBAAkB,CAAEsD,UAAU,CAACqG,OAAO,EAAEF,gBAAgB,CAACE,OAAQ,CAAC;IAEnE;;IAEA;IACA,MAAMzD,QAAQ,GAAG5C,UAAU,CAAC4C,QAAQ;IACpC,MAAMwD,MAAM,GAAGJ,aAAa,GAAGhG,UAAU,CAACoG,MAAM,GAAG,IAAI;IACvD,MAAMC,OAAO,GAAGH,cAAc,GAAGlG,UAAU,CAACqG,OAAO,GAAG,IAAI;IAC1D,MAAMC,aAAa,GAAG1G,QAAQ,CAAC2G,eAAe,CAAC3D,QAAQ;IACvD,MAAM4D,WAAW,GAAG5G,QAAQ,CAAC2G,eAAe,CAACH,MAAM;IACnD,MAAMK,YAAY,GAAG7G,QAAQ,CAAC2G,eAAe,CAACF,OAAO;IACrD,MAAMpF,oBAAoB,GAAGrB,QAAQ,CAACqB,oBAAoB;IAC1D,MAAMD,eAAe,GAAGvB,IAAI,CAACiH,qBAAqB;IAClD,MAAMC,YAAY,GAAG,IAAI5K,OAAO,CAAC,CAAC;IAClC4K,YAAY,CAACC,eAAe,CAAEnH,IAAI,CAACe,WAAY,CAAC;IAEhD,KAAM,IAAItC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAG6B,UAAU,CAAC4C,QAAQ,CAAC9F,KAAK,EAAEoB,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAG,EAAG;MAE7DlC,eAAe,CAAC+D,mBAAmB,CAAE6C,QAAQ,EAAE1E,CAAE,CAAC;MAClD,IAAKkI,MAAM,EAAG;QAEbnK,aAAa,CAAC8D,mBAAmB,CAAEqG,MAAM,EAAElI,CAAE,CAAC;MAE/C;MAEA,IAAKmI,OAAO,EAAG;QAEdlK,eAAe,CAAC4D,mBAAmB,CAAEsG,OAAO,EAAEnI,CAAE,CAAC;QACjDhC,cAAc,CAAC6D,mBAAmB,CAAEsG,OAAO,EAAEnI,CAAE,CAAC;MAEjD;;MAEA;MACA,IAAK8C,eAAe,EAAG;QAEtB,IAAKsF,aAAa,EAAG;UAEpBxF,gBAAgB,CAAEwF,aAAa,EAAEtF,eAAe,EAAEC,oBAAoB,EAAE/C,CAAC,EAAElC,eAAgB,CAAC;QAE7F;QAEA,IAAKwK,WAAW,EAAG;UAElB1F,gBAAgB,CAAE0F,WAAW,EAAExF,eAAe,EAAEC,oBAAoB,EAAE/C,CAAC,EAAEjC,aAAc,CAAC;QAEzF;QAEA,IAAKwK,YAAY,EAAG;UAEnB3F,gBAAgB,CAAE2F,YAAY,EAAEzF,eAAe,EAAEC,oBAAoB,EAAE/C,CAAC,EAAEhC,cAAe,CAAC;QAE3F;MAED;;MAEA;MACA,IAAKuD,IAAI,CAACoH,aAAa,EAAG;QAEzBpH,IAAI,CAACqH,kBAAkB,CAAE5I,CAAC,EAAElC,eAAgB,CAAC;QAC7C,IAAKoK,MAAM,EAAG;UAEb5G,mBAAmB,CAAEC,IAAI,EAAEvB,CAAC,EAAEjC,aAAc,CAAC;QAE9C;QAEA,IAAKoK,OAAO,EAAG;UAEd7G,mBAAmB,CAAEC,IAAI,EAAEvB,CAAC,EAAEhC,cAAe,CAAC;QAE/C;MAED;;MAEA;MACA,IAAKgJ,oBAAoB,EAAG;QAE3BlJ,eAAe,CAAC+K,YAAY,CAAEtH,IAAI,CAACe,WAAY,CAAC;MAEjD;MAEA2F,gBAAgB,CAACvD,QAAQ,CAACoE,MAAM,CAAE9I,CAAC,EAAElC,eAAe,CAACiL,CAAC,EAAEjL,eAAe,CAACkL,CAAC,EAAElL,eAAe,CAACmL,CAAE,CAAC;MAE9F,IAAKf,MAAM,EAAG;QAEb,IAAKlB,oBAAoB,EAAG;UAE3BjJ,aAAa,CAACmL,iBAAiB,CAAET,YAAa,CAAC;QAEhD;QAEAR,gBAAgB,CAACC,MAAM,CAACY,MAAM,CAAE9I,CAAC,EAAEjC,aAAa,CAACgL,CAAC,EAAEhL,aAAa,CAACiL,CAAC,EAAEjL,aAAa,CAACkL,CAAE,CAAC;MAEvF;MAEA,IAAKd,OAAO,EAAG;QAEd,IAAKnB,oBAAoB,EAAG;UAE3BhJ,cAAc,CAAC2E,kBAAkB,CAAEpB,IAAI,CAACe,WAAY,CAAC;QAEtD;QAEA2F,gBAAgB,CAACE,OAAO,CAACgB,OAAO,CAAEnJ,CAAC,EAAEhC,cAAc,CAAC+K,CAAC,EAAE/K,cAAc,CAACgL,CAAC,EAAEhL,cAAc,CAACiL,CAAC,EAAEhL,eAAe,CAACmL,CAAE,CAAC;MAE/G;IAED;;IAEA;IACA,KAAM,MAAMpJ,CAAC,IAAI,IAAI,CAAC8B,UAAU,EAAG;MAElC,MAAMqD,GAAG,GAAG,IAAI,CAACrD,UAAU,CAAE9B,CAAC,CAAE;MAChC,IAAKmF,GAAG,KAAK,UAAU,IAAIA,GAAG,KAAK,SAAS,IAAIA,GAAG,KAAK,QAAQ,IAAI,EAAIA,GAAG,IAAIrD,UAAU,CAAE,EAAG;QAE7F;MAED;MAEA,IAAK,CAAEmG,gBAAgB,CAAE9C,GAAG,CAAE,EAAG;QAEhCtB,cAAc,CAACuB,YAAY,CAAED,GAAG,EAAE9F,oBAAoB,CAAEyC,UAAU,CAAEqD,GAAG,CAAG,CAAE,CAAC;MAE9E;MAEA3G,kBAAkB,CAAEsD,UAAU,CAAEqD,GAAG,CAAE,EAAE8C,gBAAgB,CAAE9C,GAAG,CAAG,CAAC;MAChEvF,qBAAqB,CAAEkC,UAAU,CAAEqD,GAAG,CAAE,EAAE8C,gBAAgB,CAAE9C,GAAG,CAAG,CAAC;IAEpE;IAEA,OAAOtB,cAAc;EAEtB;AAED"},"metadata":{},"sourceType":"module","externalDependencies":[]}