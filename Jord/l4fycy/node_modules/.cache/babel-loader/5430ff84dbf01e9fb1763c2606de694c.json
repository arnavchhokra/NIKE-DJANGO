{"ast":null,"code":"import _construct from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/construct.js\";\nimport _toConsumableArray from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport PropertyNode from './core/PropertyNode.js';\nimport VarNode from './core/VarNode.js';\nimport AttributeNode from './core/AttributeNode.js';\nimport ConstNode from './core/ConstNode.js';\nimport UniformNode from './core/UniformNode.js';\nimport BufferNode from './accessors/BufferNode.js';\nimport PositionNode from './accessors/PositionNode.js';\nimport NormalNode from './accessors/NormalNode.js';\nimport CameraNode from './accessors/CameraNode.js';\nimport ModelNode from './accessors/ModelNode.js';\nimport TextureNode from './accessors/TextureNode.js';\nimport UVNode from './accessors/UVNode.js';\nimport OperatorNode from './math/OperatorNode.js';\nimport CondNode from './math/CondNode.js';\nimport MathNode from './math/MathNode.js';\nimport ArrayElementNode from './utils/ArrayElementNode.js';\nimport ConvertNode from './utils/ConvertNode.js';\nimport JoinNode from './utils/JoinNode.js';\nimport SplitNode from './utils/SplitNode.js';\nimport { getValueFromType } from './core/NodeUtils.js'; // core nodes\n\nvar NodeHandler = {\n  construct: function construct(NodeClosure, params) {\n    var inputs = params.shift();\n    return NodeClosure.apply(void 0, [new ShaderNodeObjects(inputs)].concat(_toConsumableArray(params)));\n  },\n  get: function get(node, prop) {\n    if (typeof prop === 'string' && node[prop] === undefined) {\n      if (/^[xyzwrgbastpq]{1,4}$/.test(prop) === true) {\n        // accessing properties ( swizzle )\n        prop = prop.replace(/r|s/g, 'x').replace(/g|t/g, 'y').replace(/b|p/g, 'z').replace(/a|q/g, 'w');\n        return new ShaderNodeObject(new SplitNode(node, prop));\n      } else if (/^\\d+$/.test(prop) === true) {\n        // accessing array\n        return new ShaderNodeObject(new ArrayElementNode(node, uint(Number(prop))));\n      }\n    }\n\n    return node[prop];\n  }\n};\nvar nodeObjects = new WeakMap();\n\nvar ShaderNodeObject = function ShaderNodeObject(obj) {\n  var type = typeof obj;\n\n  if (type === 'number' || type === 'boolean') {\n    return new ShaderNodeObject(getAutoTypedConstNode(obj));\n  } else if (type === 'object') {\n    if (obj.isNode === true) {\n      var _nodeObject = nodeObjects.get(obj);\n\n      if (_nodeObject === undefined) {\n        _nodeObject = new Proxy(obj, NodeHandler);\n        nodeObjects.set(obj, _nodeObject);\n        nodeObjects.set(_nodeObject, _nodeObject);\n      }\n\n      return _nodeObject;\n    }\n  }\n\n  return obj;\n};\n\nvar ShaderNodeObjects = function ShaderNodeObjects(objects) {\n  for (var name in objects) {\n    objects[name] = new ShaderNodeObject(objects[name]);\n  }\n\n  return objects;\n};\n\nvar getShaderNodeArray = function getShaderNodeArray(array) {\n  var len = array.length;\n\n  for (var i = 0; i < len; i++) {\n    array[i] = new ShaderNodeObject(array[i]);\n  }\n\n  return array;\n};\n\nvar ShaderNodeProxy = function ShaderNodeProxy(NodeClass) {\n  var scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var factor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n  if (scope === null) {\n    return function () {\n      for (var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++) {\n        params[_key] = arguments[_key];\n      }\n\n      return new ShaderNodeObject(_construct(NodeClass, _toConsumableArray(getShaderNodeArray(params))));\n    };\n  } else if (factor === null) {\n    return function () {\n      for (var _len2 = arguments.length, params = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        params[_key2] = arguments[_key2];\n      }\n\n      return new ShaderNodeObject(_construct(NodeClass, [scope].concat(_toConsumableArray(getShaderNodeArray(params)))));\n    };\n  } else {\n    factor = new ShaderNodeObject(factor);\n    return function () {\n      for (var _len3 = arguments.length, params = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        params[_key3] = arguments[_key3];\n      }\n\n      return new ShaderNodeObject(_construct(NodeClass, [scope].concat(_toConsumableArray(getShaderNodeArray(params)), [factor])));\n    };\n  }\n};\n\nvar ShaderNodeScript = function ShaderNodeScript(jsFunc) {\n  return function (inputs, builder) {\n    new ShaderNodeObjects(inputs);\n    return new ShaderNodeObject(jsFunc(inputs, builder));\n  };\n};\n\nvar bools = [false, true];\nvar uints = [0, 1, 2, 3];\nvar ints = [-1, -2];\nvar floats = [0.5, 1.5, 1 / 3, 1e-6, 1e6, Math.PI, Math.PI * 2, 1 / Math.PI, 2 / Math.PI, 1 / (Math.PI * 2), Math.PI / 2];\nvar boolsCacheMap = new Map();\n\nfor (var _i = 0, _bools = bools; _i < _bools.length; _i++) {\n  var _bool = _bools[_i];\n  boolsCacheMap.set(_bool, new ConstNode(_bool));\n}\n\nvar uintsCacheMap = new Map();\n\nfor (var _i2 = 0, _uints = uints; _i2 < _uints.length; _i2++) {\n  var _uint = _uints[_i2];\n  uintsCacheMap.set(_uint, new ConstNode(_uint, 'uint'));\n}\n\nvar intsCacheMap = new Map(_toConsumableArray(uintsCacheMap).map(function (el) {\n  return new ConstNode(el.value, 'int');\n}));\n\nfor (var _i3 = 0, _ints = ints; _i3 < _ints.length; _i3++) {\n  var _int = _ints[_i3];\n  intsCacheMap.set(_int, new ConstNode(_int, 'int'));\n}\n\nvar floatsCacheMap = new Map(_toConsumableArray(intsCacheMap).map(function (el) {\n  return new ConstNode(el.value);\n}));\n\nfor (var _i4 = 0, _floats = floats; _i4 < _floats.length; _i4++) {\n  var _float = _floats[_i4];\n  floatsCacheMap.set(_float, new ConstNode(_float));\n}\n\nfor (var _i5 = 0, _floats2 = floats; _i5 < _floats2.length; _i5++) {\n  var _float2 = _floats2[_i5];\n  floatsCacheMap.set(-_float2, new ConstNode(-_float2));\n}\n\nvar constNodesCacheMap = new Map([].concat(_toConsumableArray(boolsCacheMap), _toConsumableArray(floatsCacheMap)));\n\nvar getAutoTypedConstNode = function getAutoTypedConstNode(value) {\n  if (constNodesCacheMap.has(value)) {\n    return constNodesCacheMap.get(value);\n  } else if (value.isNode === true) {\n    return value;\n  } else {\n    return new ConstNode(value);\n  }\n};\n\nvar ConvertType = function ConvertType(type) {\n  var cacheMap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return function () {\n    for (var _len4 = arguments.length, params = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      params[_key4] = arguments[_key4];\n    }\n\n    if (params.length === 0) {\n      return nodeObject(new ConstNode(getValueFromType(type), type));\n    } else {\n      if (type === 'color' && params[0].isNode !== true) {\n        params = [getValueFromType.apply(void 0, [type].concat(_toConsumableArray(params)))];\n      }\n\n      if (params.length === 1 && cacheMap !== null && cacheMap.has(params[0])) {\n        return cacheMap.get(params[0]);\n      }\n\n      var nodes = params.map(getAutoTypedConstNode);\n      return nodeObject(new ConvertNode(nodes.length === 1 ? nodes[0] : new JoinNode(nodes), type));\n    }\n  };\n}; //\n// Node Material Shader Syntax\n//\n\n\nvar ShaderNode = new Proxy(ShaderNodeScript, NodeHandler);\n\nvar nodeObject = function nodeObject(val) {\n  return new ShaderNodeObject(val);\n};\n\nvar uniform = function uniform(value) {\n  var _value$node; // TODO: get ConstNode from .traverse() in the future\n\n\n  value = value.isNode === true ? ((_value$node = value.node) === null || _value$node === void 0 ? void 0 : _value$node.value) || value.value : value;\n  return nodeObject(new UniformNode(value, value.nodeType));\n};\n\nvar label = function label(node, name) {\n  node = nodeObject(node);\n\n  if (node.isVarNode === true) {\n    node.name = name;\n    return node;\n  }\n\n  return nodeObject(new VarNode(node, name));\n};\n\nvar temp = function temp(node) {\n  return nodeObject(new VarNode(nodeObject(node)));\n};\n\nvar color = new ConvertType('color');\nvar float = new ConvertType('float', floatsCacheMap);\nvar int = new ConvertType('int', intsCacheMap);\nvar uint = new ConvertType('uint', uintsCacheMap);\nvar bool = new ConvertType('bool', boolsCacheMap);\nvar vec2 = new ConvertType('vec2');\nvar ivec2 = new ConvertType('ivec2');\nvar uvec2 = new ConvertType('uvec2');\nvar bvec2 = new ConvertType('bvec2');\nvar vec3 = new ConvertType('vec3');\nvar ivec3 = new ConvertType('ivec3');\nvar uvec3 = new ConvertType('uvec3');\nvar bvec3 = new ConvertType('bvec3');\nvar vec4 = new ConvertType('vec4');\nvar ivec4 = new ConvertType('ivec4');\nvar uvec4 = new ConvertType('uvec4');\nvar bvec4 = new ConvertType('bvec4');\nvar mat3 = new ConvertType('mat3');\nvar imat3 = new ConvertType('imat3');\nvar umat3 = new ConvertType('umat3');\nvar bmat3 = new ConvertType('bmat3');\nvar mat4 = new ConvertType('mat4');\nvar imat4 = new ConvertType('imat4');\nvar umat4 = new ConvertType('umat4');\nvar bmat4 = new ConvertType('bmat4');\n\nvar join = function join() {\n  for (var _len5 = arguments.length, params = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n    params[_key5] = arguments[_key5];\n  }\n\n  return nodeObject(new JoinNode(getShaderNodeArray(params)));\n};\n\nvar uv = function uv() {\n  for (var _len6 = arguments.length, params = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n    params[_key6] = arguments[_key6];\n  }\n\n  return nodeObject(_construct(UVNode, params));\n};\n\nvar attribute = function attribute() {\n  for (var _len7 = arguments.length, params = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n    params[_key7] = arguments[_key7];\n  }\n\n  return nodeObject(_construct(AttributeNode, params));\n};\n\nvar buffer = function buffer() {\n  for (var _len8 = arguments.length, params = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n    params[_key8] = arguments[_key8];\n  }\n\n  return nodeObject(_construct(BufferNode, params));\n};\n\nvar texture = function texture() {\n  for (var _len9 = arguments.length, params = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n    params[_key9] = arguments[_key9];\n  }\n\n  return nodeObject(_construct(TextureNode, params));\n};\n\nvar sampler = function sampler(texture) {\n  return nodeObject(new ConvertNode(texture.isNode === true ? texture : new TextureNode(texture), 'sampler'));\n};\n\nvar cond = function cond() {\n  for (var _len10 = arguments.length, params = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n    params[_key10] = arguments[_key10];\n  }\n\n  return nodeObject(_construct(CondNode, _toConsumableArray(getShaderNodeArray(params))));\n};\n\nvar addTo = function addTo(varNode) {\n  for (var _len11 = arguments.length, params = new Array(_len11 > 1 ? _len11 - 1 : 0), _key11 = 1; _key11 < _len11; _key11++) {\n    params[_key11 - 1] = arguments[_key11];\n  }\n\n  varNode.node = add.apply(void 0, [varNode.node].concat(_toConsumableArray(getShaderNodeArray(params))));\n  return nodeObject(varNode);\n};\n\nvar add = new ShaderNodeProxy(OperatorNode, '+');\nvar sub = new ShaderNodeProxy(OperatorNode, '-');\nvar mul = new ShaderNodeProxy(OperatorNode, '*');\nvar div = new ShaderNodeProxy(OperatorNode, '/');\nvar remainder = new ShaderNodeProxy(OperatorNode, '%');\nvar equal = new ShaderNodeProxy(OperatorNode, '==');\nvar assign = new ShaderNodeProxy(OperatorNode, '=');\nvar lessThan = new ShaderNodeProxy(OperatorNode, '<');\nvar greaterThan = new ShaderNodeProxy(OperatorNode, '>');\nvar lessThanEqual = new ShaderNodeProxy(OperatorNode, '<=');\nvar greaterThanEqual = new ShaderNodeProxy(OperatorNode, '>=');\nvar and = new ShaderNodeProxy(OperatorNode, '&&');\nvar or = new ShaderNodeProxy(OperatorNode, '||');\nvar xor = new ShaderNodeProxy(OperatorNode, '^^');\nvar bitAnd = new ShaderNodeProxy(OperatorNode, '&');\nvar bitOr = new ShaderNodeProxy(OperatorNode, '|');\nvar bitXor = new ShaderNodeProxy(OperatorNode, '^');\nvar shiftLeft = new ShaderNodeProxy(OperatorNode, '<<');\nvar shiftRight = new ShaderNodeProxy(OperatorNode, '>>');\nvar element = new ShaderNodeProxy(ArrayElementNode);\nvar normalGeometry = new ShaderNodeObject(new NormalNode(NormalNode.GEOMETRY));\nvar normalLocal = new ShaderNodeObject(new NormalNode(NormalNode.LOCAL));\nvar normalWorld = new ShaderNodeObject(new NormalNode(NormalNode.WORLD));\nvar normalView = new ShaderNodeObject(new NormalNode(NormalNode.VIEW));\nvar transformedNormalView = new ShaderNodeObject(new VarNode(new NormalNode(NormalNode.VIEW), 'TransformedNormalView', 'vec3'));\nvar positionLocal = new ShaderNodeObject(new PositionNode(PositionNode.LOCAL));\nvar positionWorld = new ShaderNodeObject(new PositionNode(PositionNode.WORLD));\nvar positionView = new ShaderNodeObject(new PositionNode(PositionNode.VIEW));\nvar positionViewDirection = new ShaderNodeObject(new PositionNode(PositionNode.VIEW_DIRECTION));\nvar viewMatrix = new ShaderNodeObject(new ModelNode(ModelNode.VIEW_MATRIX));\nvar cameraPosition = new ShaderNodeObject(new CameraNode(CameraNode.POSITION));\nvar diffuseColor = new ShaderNodeObject(new PropertyNode('DiffuseColor', 'vec4'));\nvar roughness = new ShaderNodeObject(new PropertyNode('Roughness', 'float'));\nvar metalness = new ShaderNodeObject(new PropertyNode('Metalness', 'float'));\nvar alphaTest = new ShaderNodeObject(new PropertyNode('AlphaTest', 'float'));\nvar specularColor = new ShaderNodeObject(new PropertyNode('SpecularColor', 'color'));\nvar abs = new ShaderNodeProxy(MathNode, 'abs');\nvar acos = new ShaderNodeProxy(MathNode, 'acos');\nvar asin = new ShaderNodeProxy(MathNode, 'asin');\nvar atan = new ShaderNodeProxy(MathNode, 'atan');\nvar ceil = new ShaderNodeProxy(MathNode, 'ceil');\nvar clamp = new ShaderNodeProxy(MathNode, 'clamp');\nvar cos = new ShaderNodeProxy(MathNode, 'cos');\nvar cross = new ShaderNodeProxy(MathNode, 'cross');\nvar degrees = new ShaderNodeProxy(MathNode, 'degrees');\nvar dFdx = new ShaderNodeProxy(MathNode, 'dFdx');\nvar dFdy = new ShaderNodeProxy(MathNode, 'dFdy');\nvar distance = new ShaderNodeProxy(MathNode, 'distance');\nvar dot = new ShaderNodeProxy(MathNode, 'dot');\nvar exp = new ShaderNodeProxy(MathNode, 'exp');\nvar exp2 = new ShaderNodeProxy(MathNode, 'exp2');\nvar faceforward = new ShaderNodeProxy(MathNode, 'faceforward');\nvar floor = new ShaderNodeProxy(MathNode, 'floor');\nvar fract = new ShaderNodeProxy(MathNode, 'fract');\nvar invert = new ShaderNodeProxy(MathNode, 'invert');\nvar inversesqrt = new ShaderNodeProxy(MathNode, 'inversesqrt');\nvar length = new ShaderNodeProxy(MathNode, 'length');\nvar log = new ShaderNodeProxy(MathNode, 'log');\nvar log2 = new ShaderNodeProxy(MathNode, 'log2');\nvar max = new ShaderNodeProxy(MathNode, 'max');\nvar min = new ShaderNodeProxy(MathNode, 'min');\nvar mix = new ShaderNodeProxy(MathNode, 'mix');\nvar mod = new ShaderNodeProxy(MathNode, 'mod');\nvar negate = new ShaderNodeProxy(MathNode, 'negate');\nvar normalize = new ShaderNodeProxy(MathNode, 'normalize');\nvar pow = new ShaderNodeProxy(MathNode, 'pow');\nvar pow2 = new ShaderNodeProxy(MathNode, 'pow', 2);\nvar pow3 = new ShaderNodeProxy(MathNode, 'pow', 3);\nvar pow4 = new ShaderNodeProxy(MathNode, 'pow', 4);\nvar radians = new ShaderNodeProxy(MathNode, 'radians');\nvar reflect = new ShaderNodeProxy(MathNode, 'reflect');\nvar refract = new ShaderNodeProxy(MathNode, 'refract');\nvar round = new ShaderNodeProxy(MathNode, 'round');\nvar saturate = new ShaderNodeProxy(MathNode, 'saturate');\nvar sign = new ShaderNodeProxy(MathNode, 'sign');\nvar sin = new ShaderNodeProxy(MathNode, 'sin');\nvar smoothstep = new ShaderNodeProxy(MathNode, 'smoothstep');\nvar sqrt = new ShaderNodeProxy(MathNode, 'sqrt');\nvar step = new ShaderNodeProxy(MathNode, 'step');\nvar tan = new ShaderNodeProxy(MathNode, 'tan');\nvar transformDirection = new ShaderNodeProxy(MathNode, 'transformDirection');\nvar EPSILON = float(1e-6);\nvar INFINITY = float(1e6);\nexport { EPSILON, INFINITY, ShaderNode, abs, acos, add, addTo, alphaTest, and, asin, assign, atan, attribute, bitAnd, bitOr, bitXor, bmat3, bmat4, bool, buffer, bvec2, bvec3, bvec4, cameraPosition, ceil, clamp, color, cond, cos, cross, dFdx, dFdy, degrees, diffuseColor, distance, div, dot, element, equal, exp, exp2, faceforward, float, floor, fract, greaterThan, greaterThanEqual, imat3, imat4, int, inversesqrt, invert, ivec2, ivec3, ivec4, join, label, length, lessThan, lessThanEqual, log, log2, mat3, mat4, max, metalness, min, mix, mod, mul, negate, nodeObject, normalGeometry, normalLocal, normalView, normalWorld, normalize, or, positionLocal, positionView, positionViewDirection, positionWorld, pow, pow2, pow3, pow4, radians, reflect, refract, remainder, roughness, round, sampler, saturate, shiftLeft, shiftRight, sign, sin, smoothstep, specularColor, sqrt, step, sub, tan, temp, texture, transformDirection, transformedNormalView, uint, umat3, umat4, uniform, uv, uvec2, uvec3, uvec4, vec2, vec3, vec4, viewMatrix, xor };","map":{"version":3,"names":["PropertyNode","VarNode","AttributeNode","ConstNode","UniformNode","BufferNode","PositionNode","NormalNode","CameraNode","ModelNode","TextureNode","UVNode","OperatorNode","CondNode","MathNode","ArrayElementNode","ConvertNode","JoinNode","SplitNode","getValueFromType","NodeHandler","construct","NodeClosure","params","inputs","shift","ShaderNodeObjects","get","node","prop","undefined","test","replace","ShaderNodeObject","uint","Number","nodeObjects","WeakMap","obj","type","getAutoTypedConstNode","isNode","nodeObject","Proxy","set","objects","name","getShaderNodeArray","array","len","length","i","ShaderNodeProxy","NodeClass","scope","factor","ShaderNodeScript","jsFunc","builder","bools","uints","ints","floats","Math","PI","boolsCacheMap","Map","bool","uintsCacheMap","intsCacheMap","map","el","value","int","floatsCacheMap","float","constNodesCacheMap","has","ConvertType","cacheMap","nodes","ShaderNode","val","uniform","_value$node","nodeType","label","isVarNode","temp","color","vec2","ivec2","uvec2","bvec2","vec3","ivec3","uvec3","bvec3","vec4","ivec4","uvec4","bvec4","mat3","imat3","umat3","bmat3","mat4","imat4","umat4","bmat4","join","uv","attribute","buffer","texture","sampler","cond","addTo","varNode","add","sub","mul","div","remainder","equal","assign","lessThan","greaterThan","lessThanEqual","greaterThanEqual","and","or","xor","bitAnd","bitOr","bitXor","shiftLeft","shiftRight","element","normalGeometry","GEOMETRY","normalLocal","LOCAL","normalWorld","WORLD","normalView","VIEW","transformedNormalView","positionLocal","positionWorld","positionView","positionViewDirection","VIEW_DIRECTION","viewMatrix","VIEW_MATRIX","cameraPosition","POSITION","diffuseColor","roughness","metalness","alphaTest","specularColor","abs","acos","asin","atan","ceil","clamp","cos","cross","degrees","dFdx","dFdy","distance","dot","exp","exp2","faceforward","floor","fract","invert","inversesqrt","log","log2","max","min","mix","mod","negate","normalize","pow","pow2","pow3","pow4","radians","reflect","refract","round","saturate","sign","sin","smoothstep","sqrt","step","tan","transformDirection","EPSILON","INFINITY"],"sources":["C:/Users/Arnav/Downloads/l4fycy/node_modules/three-stdlib/nodes/ShaderNode.js"],"sourcesContent":["import PropertyNode from './core/PropertyNode.js';\nimport VarNode from './core/VarNode.js';\nimport AttributeNode from './core/AttributeNode.js';\nimport ConstNode from './core/ConstNode.js';\nimport UniformNode from './core/UniformNode.js';\nimport BufferNode from './accessors/BufferNode.js';\nimport PositionNode from './accessors/PositionNode.js';\nimport NormalNode from './accessors/NormalNode.js';\nimport CameraNode from './accessors/CameraNode.js';\nimport ModelNode from './accessors/ModelNode.js';\nimport TextureNode from './accessors/TextureNode.js';\nimport UVNode from './accessors/UVNode.js';\nimport OperatorNode from './math/OperatorNode.js';\nimport CondNode from './math/CondNode.js';\nimport MathNode from './math/MathNode.js';\nimport ArrayElementNode from './utils/ArrayElementNode.js';\nimport ConvertNode from './utils/ConvertNode.js';\nimport JoinNode from './utils/JoinNode.js';\nimport SplitNode from './utils/SplitNode.js';\nimport { getValueFromType } from './core/NodeUtils.js';\n\n// core nodes\nconst NodeHandler = {\n  construct(NodeClosure, params) {\n    const inputs = params.shift();\n    return NodeClosure(new ShaderNodeObjects(inputs), ...params);\n  },\n\n  get: function (node, prop) {\n    if (typeof prop === 'string' && node[prop] === undefined) {\n      if (/^[xyzwrgbastpq]{1,4}$/.test(prop) === true) {\n        // accessing properties ( swizzle )\n        prop = prop.replace(/r|s/g, 'x').replace(/g|t/g, 'y').replace(/b|p/g, 'z').replace(/a|q/g, 'w');\n        return new ShaderNodeObject(new SplitNode(node, prop));\n      } else if (/^\\d+$/.test(prop) === true) {\n        // accessing array\n        return new ShaderNodeObject(new ArrayElementNode(node, uint(Number(prop))));\n      }\n    }\n\n    return node[prop];\n  }\n};\nconst nodeObjects = new WeakMap();\n\nconst ShaderNodeObject = function (obj) {\n  const type = typeof obj;\n\n  if (type === 'number' || type === 'boolean') {\n    return new ShaderNodeObject(getAutoTypedConstNode(obj));\n  } else if (type === 'object') {\n    if (obj.isNode === true) {\n      let nodeObject = nodeObjects.get(obj);\n\n      if (nodeObject === undefined) {\n        nodeObject = new Proxy(obj, NodeHandler);\n        nodeObjects.set(obj, nodeObject);\n        nodeObjects.set(nodeObject, nodeObject);\n      }\n\n      return nodeObject;\n    }\n  }\n\n  return obj;\n};\n\nconst ShaderNodeObjects = function (objects) {\n  for (const name in objects) {\n    objects[name] = new ShaderNodeObject(objects[name]);\n  }\n\n  return objects;\n};\n\nconst getShaderNodeArray = array => {\n  const len = array.length;\n\n  for (let i = 0; i < len; i++) {\n    array[i] = new ShaderNodeObject(array[i]);\n  }\n\n  return array;\n};\n\nconst ShaderNodeProxy = function (NodeClass, scope = null, factor = null) {\n  if (scope === null) {\n    return (...params) => {\n      return new ShaderNodeObject(new NodeClass(...getShaderNodeArray(params)));\n    };\n  } else if (factor === null) {\n    return (...params) => {\n      return new ShaderNodeObject(new NodeClass(scope, ...getShaderNodeArray(params)));\n    };\n  } else {\n    factor = new ShaderNodeObject(factor);\n    return (...params) => {\n      return new ShaderNodeObject(new NodeClass(scope, ...getShaderNodeArray(params), factor));\n    };\n  }\n};\n\nconst ShaderNodeScript = function (jsFunc) {\n  return (inputs, builder) => {\n    new ShaderNodeObjects(inputs);\n    return new ShaderNodeObject(jsFunc(inputs, builder));\n  };\n};\n\nconst bools = [false, true];\nconst uints = [0, 1, 2, 3];\nconst ints = [-1, -2];\nconst floats = [0.5, 1.5, 1 / 3, 1e-6, 1e6, Math.PI, Math.PI * 2, 1 / Math.PI, 2 / Math.PI, 1 / (Math.PI * 2), Math.PI / 2];\nconst boolsCacheMap = new Map();\n\nfor (let bool of bools) boolsCacheMap.set(bool, new ConstNode(bool));\n\nconst uintsCacheMap = new Map();\n\nfor (let uint of uints) uintsCacheMap.set(uint, new ConstNode(uint, 'uint'));\n\nconst intsCacheMap = new Map([...uintsCacheMap].map(el => new ConstNode(el.value, 'int')));\n\nfor (let int of ints) intsCacheMap.set(int, new ConstNode(int, 'int'));\n\nconst floatsCacheMap = new Map([...intsCacheMap].map(el => new ConstNode(el.value)));\n\nfor (let float of floats) floatsCacheMap.set(float, new ConstNode(float));\n\nfor (let float of floats) floatsCacheMap.set(-float, new ConstNode(-float));\n\nconst constNodesCacheMap = new Map([...boolsCacheMap, ...floatsCacheMap]);\n\nconst getAutoTypedConstNode = value => {\n  if (constNodesCacheMap.has(value)) {\n    return constNodesCacheMap.get(value);\n  } else if (value.isNode === true) {\n    return value;\n  } else {\n    return new ConstNode(value);\n  }\n};\n\nconst ConvertType = function (type, cacheMap = null) {\n  return (...params) => {\n    if (params.length === 0) {\n      return nodeObject(new ConstNode(getValueFromType(type), type));\n    } else {\n      if (type === 'color' && params[0].isNode !== true) {\n        params = [getValueFromType(type, ...params)];\n      }\n\n      if (params.length === 1 && cacheMap !== null && cacheMap.has(params[0])) {\n        return cacheMap.get(params[0]);\n      }\n\n      const nodes = params.map(getAutoTypedConstNode);\n      return nodeObject(new ConvertNode(nodes.length === 1 ? nodes[0] : new JoinNode(nodes), type));\n    }\n  };\n}; //\n// Node Material Shader Syntax\n//\n\n\nconst ShaderNode = new Proxy(ShaderNodeScript, NodeHandler);\nconst nodeObject = val => {\n  return new ShaderNodeObject(val);\n};\nconst uniform = value => {\n  var _value$node;\n\n  // TODO: get ConstNode from .traverse() in the future\n  value = value.isNode === true ? ((_value$node = value.node) === null || _value$node === void 0 ? void 0 : _value$node.value) || value.value : value;\n  return nodeObject(new UniformNode(value, value.nodeType));\n};\nconst label = (node, name) => {\n  node = nodeObject(node);\n\n  if (node.isVarNode === true) {\n    node.name = name;\n    return node;\n  }\n\n  return nodeObject(new VarNode(node, name));\n};\nconst temp = node => nodeObject(new VarNode(nodeObject(node)));\nconst color = new ConvertType('color');\nconst float = new ConvertType('float', floatsCacheMap);\nconst int = new ConvertType('int', intsCacheMap);\nconst uint = new ConvertType('uint', uintsCacheMap);\nconst bool = new ConvertType('bool', boolsCacheMap);\nconst vec2 = new ConvertType('vec2');\nconst ivec2 = new ConvertType('ivec2');\nconst uvec2 = new ConvertType('uvec2');\nconst bvec2 = new ConvertType('bvec2');\nconst vec3 = new ConvertType('vec3');\nconst ivec3 = new ConvertType('ivec3');\nconst uvec3 = new ConvertType('uvec3');\nconst bvec3 = new ConvertType('bvec3');\nconst vec4 = new ConvertType('vec4');\nconst ivec4 = new ConvertType('ivec4');\nconst uvec4 = new ConvertType('uvec4');\nconst bvec4 = new ConvertType('bvec4');\nconst mat3 = new ConvertType('mat3');\nconst imat3 = new ConvertType('imat3');\nconst umat3 = new ConvertType('umat3');\nconst bmat3 = new ConvertType('bmat3');\nconst mat4 = new ConvertType('mat4');\nconst imat4 = new ConvertType('imat4');\nconst umat4 = new ConvertType('umat4');\nconst bmat4 = new ConvertType('bmat4');\nconst join = (...params) => nodeObject(new JoinNode(getShaderNodeArray(params)));\nconst uv = (...params) => nodeObject(new UVNode(...params));\nconst attribute = (...params) => nodeObject(new AttributeNode(...params));\nconst buffer = (...params) => nodeObject(new BufferNode(...params));\nconst texture = (...params) => nodeObject(new TextureNode(...params));\nconst sampler = texture => nodeObject(new ConvertNode(texture.isNode === true ? texture : new TextureNode(texture), 'sampler'));\nconst cond = (...params) => nodeObject(new CondNode(...getShaderNodeArray(params)));\nconst addTo = (varNode, ...params) => {\n  varNode.node = add(varNode.node, ...getShaderNodeArray(params));\n  return nodeObject(varNode);\n};\nconst add = new ShaderNodeProxy(OperatorNode, '+');\nconst sub = new ShaderNodeProxy(OperatorNode, '-');\nconst mul = new ShaderNodeProxy(OperatorNode, '*');\nconst div = new ShaderNodeProxy(OperatorNode, '/');\nconst remainder = new ShaderNodeProxy(OperatorNode, '%');\nconst equal = new ShaderNodeProxy(OperatorNode, '==');\nconst assign = new ShaderNodeProxy(OperatorNode, '=');\nconst lessThan = new ShaderNodeProxy(OperatorNode, '<');\nconst greaterThan = new ShaderNodeProxy(OperatorNode, '>');\nconst lessThanEqual = new ShaderNodeProxy(OperatorNode, '<=');\nconst greaterThanEqual = new ShaderNodeProxy(OperatorNode, '>=');\nconst and = new ShaderNodeProxy(OperatorNode, '&&');\nconst or = new ShaderNodeProxy(OperatorNode, '||');\nconst xor = new ShaderNodeProxy(OperatorNode, '^^');\nconst bitAnd = new ShaderNodeProxy(OperatorNode, '&');\nconst bitOr = new ShaderNodeProxy(OperatorNode, '|');\nconst bitXor = new ShaderNodeProxy(OperatorNode, '^');\nconst shiftLeft = new ShaderNodeProxy(OperatorNode, '<<');\nconst shiftRight = new ShaderNodeProxy(OperatorNode, '>>');\nconst element = new ShaderNodeProxy(ArrayElementNode);\nconst normalGeometry = new ShaderNodeObject(new NormalNode(NormalNode.GEOMETRY));\nconst normalLocal = new ShaderNodeObject(new NormalNode(NormalNode.LOCAL));\nconst normalWorld = new ShaderNodeObject(new NormalNode(NormalNode.WORLD));\nconst normalView = new ShaderNodeObject(new NormalNode(NormalNode.VIEW));\nconst transformedNormalView = new ShaderNodeObject(new VarNode(new NormalNode(NormalNode.VIEW), 'TransformedNormalView', 'vec3'));\nconst positionLocal = new ShaderNodeObject(new PositionNode(PositionNode.LOCAL));\nconst positionWorld = new ShaderNodeObject(new PositionNode(PositionNode.WORLD));\nconst positionView = new ShaderNodeObject(new PositionNode(PositionNode.VIEW));\nconst positionViewDirection = new ShaderNodeObject(new PositionNode(PositionNode.VIEW_DIRECTION));\nconst viewMatrix = new ShaderNodeObject(new ModelNode(ModelNode.VIEW_MATRIX));\nconst cameraPosition = new ShaderNodeObject(new CameraNode(CameraNode.POSITION));\nconst diffuseColor = new ShaderNodeObject(new PropertyNode('DiffuseColor', 'vec4'));\nconst roughness = new ShaderNodeObject(new PropertyNode('Roughness', 'float'));\nconst metalness = new ShaderNodeObject(new PropertyNode('Metalness', 'float'));\nconst alphaTest = new ShaderNodeObject(new PropertyNode('AlphaTest', 'float'));\nconst specularColor = new ShaderNodeObject(new PropertyNode('SpecularColor', 'color'));\nconst abs = new ShaderNodeProxy(MathNode, 'abs');\nconst acos = new ShaderNodeProxy(MathNode, 'acos');\nconst asin = new ShaderNodeProxy(MathNode, 'asin');\nconst atan = new ShaderNodeProxy(MathNode, 'atan');\nconst ceil = new ShaderNodeProxy(MathNode, 'ceil');\nconst clamp = new ShaderNodeProxy(MathNode, 'clamp');\nconst cos = new ShaderNodeProxy(MathNode, 'cos');\nconst cross = new ShaderNodeProxy(MathNode, 'cross');\nconst degrees = new ShaderNodeProxy(MathNode, 'degrees');\nconst dFdx = new ShaderNodeProxy(MathNode, 'dFdx');\nconst dFdy = new ShaderNodeProxy(MathNode, 'dFdy');\nconst distance = new ShaderNodeProxy(MathNode, 'distance');\nconst dot = new ShaderNodeProxy(MathNode, 'dot');\nconst exp = new ShaderNodeProxy(MathNode, 'exp');\nconst exp2 = new ShaderNodeProxy(MathNode, 'exp2');\nconst faceforward = new ShaderNodeProxy(MathNode, 'faceforward');\nconst floor = new ShaderNodeProxy(MathNode, 'floor');\nconst fract = new ShaderNodeProxy(MathNode, 'fract');\nconst invert = new ShaderNodeProxy(MathNode, 'invert');\nconst inversesqrt = new ShaderNodeProxy(MathNode, 'inversesqrt');\nconst length = new ShaderNodeProxy(MathNode, 'length');\nconst log = new ShaderNodeProxy(MathNode, 'log');\nconst log2 = new ShaderNodeProxy(MathNode, 'log2');\nconst max = new ShaderNodeProxy(MathNode, 'max');\nconst min = new ShaderNodeProxy(MathNode, 'min');\nconst mix = new ShaderNodeProxy(MathNode, 'mix');\nconst mod = new ShaderNodeProxy(MathNode, 'mod');\nconst negate = new ShaderNodeProxy(MathNode, 'negate');\nconst normalize = new ShaderNodeProxy(MathNode, 'normalize');\nconst pow = new ShaderNodeProxy(MathNode, 'pow');\nconst pow2 = new ShaderNodeProxy(MathNode, 'pow', 2);\nconst pow3 = new ShaderNodeProxy(MathNode, 'pow', 3);\nconst pow4 = new ShaderNodeProxy(MathNode, 'pow', 4);\nconst radians = new ShaderNodeProxy(MathNode, 'radians');\nconst reflect = new ShaderNodeProxy(MathNode, 'reflect');\nconst refract = new ShaderNodeProxy(MathNode, 'refract');\nconst round = new ShaderNodeProxy(MathNode, 'round');\nconst saturate = new ShaderNodeProxy(MathNode, 'saturate');\nconst sign = new ShaderNodeProxy(MathNode, 'sign');\nconst sin = new ShaderNodeProxy(MathNode, 'sin');\nconst smoothstep = new ShaderNodeProxy(MathNode, 'smoothstep');\nconst sqrt = new ShaderNodeProxy(MathNode, 'sqrt');\nconst step = new ShaderNodeProxy(MathNode, 'step');\nconst tan = new ShaderNodeProxy(MathNode, 'tan');\nconst transformDirection = new ShaderNodeProxy(MathNode, 'transformDirection');\nconst EPSILON = float(1e-6);\nconst INFINITY = float(1e6);\n\nexport { EPSILON, INFINITY, ShaderNode, abs, acos, add, addTo, alphaTest, and, asin, assign, atan, attribute, bitAnd, bitOr, bitXor, bmat3, bmat4, bool, buffer, bvec2, bvec3, bvec4, cameraPosition, ceil, clamp, color, cond, cos, cross, dFdx, dFdy, degrees, diffuseColor, distance, div, dot, element, equal, exp, exp2, faceforward, float, floor, fract, greaterThan, greaterThanEqual, imat3, imat4, int, inversesqrt, invert, ivec2, ivec3, ivec4, join, label, length, lessThan, lessThanEqual, log, log2, mat3, mat4, max, metalness, min, mix, mod, mul, negate, nodeObject, normalGeometry, normalLocal, normalView, normalWorld, normalize, or, positionLocal, positionView, positionViewDirection, positionWorld, pow, pow2, pow3, pow4, radians, reflect, refract, remainder, roughness, round, sampler, saturate, shiftLeft, shiftRight, sign, sin, smoothstep, specularColor, sqrt, step, sub, tan, temp, texture, transformDirection, transformedNormalView, uint, umat3, umat4, uniform, uv, uvec2, uvec3, uvec4, vec2, vec3, vec4, viewMatrix, xor };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}