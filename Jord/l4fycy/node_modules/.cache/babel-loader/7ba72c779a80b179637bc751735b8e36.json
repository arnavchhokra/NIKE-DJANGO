{"ast":null,"code":"import _createClass from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Vector3, Color, Vector2, BufferGeometry, Float32BufferAttribute } from 'three';\n/**\n * Break faces with edges longer than maxEdgeLength\n */\n\nvar TessellateModifier = /*#__PURE__*/_createClass(function TessellateModifier() {\n  var _this = this;\n\n  var maxEdgeLength = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.1;\n\n  var _maxIterations = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 6;\n\n  _classCallCheck(this, TessellateModifier);\n\n  _defineProperty(this, \"maxEdgeLength\", void 0);\n\n  _defineProperty(this, \"maxIterations\", void 0);\n\n  _defineProperty(this, \"modify\", function (geometry) {\n    if (geometry.index !== null) {\n      geometry = geometry.toNonIndexed();\n    } //\n\n\n    var maxIterations = _this.maxIterations;\n    var maxEdgeLengthSquared = _this.maxEdgeLength * _this.maxEdgeLength;\n    var va = new Vector3();\n    var vb = new Vector3();\n    var vc = new Vector3();\n    var vm = new Vector3();\n    var vs = [va, vb, vc, vm];\n    var na = new Vector3();\n    var nb = new Vector3();\n    var nc = new Vector3();\n    var nm = new Vector3();\n    var ns = [na, nb, nc, nm];\n    var ca = new Color();\n    var cb = new Color();\n    var cc = new Color();\n    var cm = new Color();\n    var cs = [ca, cb, cc, cm];\n    var ua = new Vector2();\n    var ub = new Vector2();\n    var uc = new Vector2();\n    var um = new Vector2();\n    var us = [ua, ub, uc, um];\n    var u2a = new Vector2();\n    var u2b = new Vector2();\n    var u2c = new Vector2();\n    var u2m = new Vector2();\n    var u2s = [u2a, u2b, u2c, u2m];\n    var attributes = geometry.attributes;\n    var hasNormals = attributes.normal !== undefined;\n    var hasColors = attributes.color !== undefined;\n    var hasUVs = attributes.uv !== undefined;\n    var hasUV2s = attributes.uv2 !== undefined;\n    var positions = attributes.position.array;\n    var normals = hasNormals ? attributes.normal.array : null;\n    var colors = hasColors ? attributes.color.array : null;\n    var uvs = hasUVs ? attributes.uv.array : null;\n    var uv2s = hasUV2s ? attributes.uv2.array : null;\n    var positions2 = positions;\n    var normals2 = normals;\n    var colors2 = colors;\n    var uvs2 = uvs;\n    var uv2s2 = uv2s;\n    var iteration = 0;\n    var tessellating = true;\n\n    function addTriangle(a, b, c) {\n      var v1 = vs[a];\n      var v2 = vs[b];\n      var v3 = vs[c];\n      positions2.push(v1.x, v1.y, v1.z);\n      positions2.push(v2.x, v2.y, v2.z);\n      positions2.push(v3.x, v3.y, v3.z);\n\n      if (hasNormals) {\n        var n1 = ns[a];\n        var n2 = ns[b];\n        var n3 = ns[c];\n        normals2.push(n1.x, n1.y, n1.z);\n        normals2.push(n2.x, n2.y, n2.z);\n        normals2.push(n3.x, n3.y, n3.z);\n      }\n\n      if (hasColors) {\n        var c1 = cs[a];\n        var c2 = cs[b];\n        var c3 = cs[c];\n        colors2.push(c1.r, c1.g, c1.b);\n        colors2.push(c2.r, c2.g, c2.b);\n        colors2.push(c3.r, c3.g, c3.b);\n      }\n\n      if (hasUVs) {\n        var u1 = us[a];\n        var u2 = us[b];\n        var u3 = us[c];\n        uvs2.push(u1.x, u1.y);\n        uvs2.push(u2.x, u2.y);\n        uvs2.push(u3.x, u3.y);\n      }\n\n      if (hasUV2s) {\n        var u21 = u2s[a];\n        var u22 = u2s[b];\n        var u23 = u2s[c];\n        uv2s2.push(u21.x, u21.y);\n        uv2s2.push(u22.x, u22.y);\n        uv2s2.push(u23.x, u23.y);\n      }\n    }\n\n    while (tessellating && iteration < maxIterations) {\n      iteration++;\n      tessellating = false;\n      positions = positions2;\n      positions2 = [];\n\n      if (hasNormals) {\n        normals = normals2;\n        normals2 = [];\n      }\n\n      if (hasColors) {\n        colors = colors2;\n        colors2 = [];\n      }\n\n      if (hasUVs) {\n        uvs = uvs2;\n        uvs2 = [];\n      }\n\n      if (hasUV2s) {\n        uv2s = uv2s2;\n        uv2s2 = [];\n      }\n\n      for (var i = 0, i2 = 0, il = positions.length; i < il; i += 9, i2 += 6) {\n        va.fromArray(positions, i + 0);\n        vb.fromArray(positions, i + 3);\n        vc.fromArray(positions, i + 6);\n\n        if (hasNormals && normals) {\n          na.fromArray(normals, i + 0);\n          nb.fromArray(normals, i + 3);\n          nc.fromArray(normals, i + 6);\n        }\n\n        if (hasColors && colors) {\n          ca.fromArray(colors, i + 0);\n          cb.fromArray(colors, i + 3);\n          cc.fromArray(colors, i + 6);\n        }\n\n        if (hasUVs && uvs) {\n          ua.fromArray(uvs, i2 + 0);\n          ub.fromArray(uvs, i2 + 2);\n          uc.fromArray(uvs, i2 + 4);\n        }\n\n        if (hasUV2s && uv2s) {\n          u2a.fromArray(uv2s, i2 + 0);\n          u2b.fromArray(uv2s, i2 + 2);\n          u2c.fromArray(uv2s, i2 + 4);\n        }\n\n        var dab = va.distanceToSquared(vb);\n        var dbc = vb.distanceToSquared(vc);\n        var dac = va.distanceToSquared(vc);\n\n        if (dab > maxEdgeLengthSquared || dbc > maxEdgeLengthSquared || dac > maxEdgeLengthSquared) {\n          tessellating = true;\n\n          if (dab >= dbc && dab >= dac) {\n            vm.lerpVectors(va, vb, 0.5);\n            if (hasNormals) nm.lerpVectors(na, nb, 0.5);\n            if (hasColors) cm.lerpColors(ca, cb, 0.5);\n            if (hasUVs) um.lerpVectors(ua, ub, 0.5);\n            if (hasUV2s) u2m.lerpVectors(u2a, u2b, 0.5);\n            addTriangle(0, 3, 2);\n            addTriangle(3, 1, 2);\n          } else if (dbc >= dab && dbc >= dac) {\n            vm.lerpVectors(vb, vc, 0.5);\n            if (hasNormals) nm.lerpVectors(nb, nc, 0.5);\n            if (hasColors) cm.lerpColors(cb, cc, 0.5);\n            if (hasUVs) um.lerpVectors(ub, uc, 0.5);\n            if (hasUV2s) u2m.lerpVectors(u2b, u2c, 0.5);\n            addTriangle(0, 1, 3);\n            addTriangle(3, 2, 0);\n          } else {\n            vm.lerpVectors(va, vc, 0.5);\n            if (hasNormals) nm.lerpVectors(na, nc, 0.5);\n            if (hasColors) cm.lerpColors(ca, cc, 0.5);\n            if (hasUVs) um.lerpVectors(ua, uc, 0.5);\n            if (hasUV2s) u2m.lerpVectors(u2a, u2c, 0.5);\n            addTriangle(0, 1, 3);\n            addTriangle(3, 1, 2);\n          }\n        } else {\n          addTriangle(0, 1, 2);\n        }\n      }\n    }\n\n    var geometry2 = new BufferGeometry();\n    geometry2.setAttribute('position', new Float32BufferAttribute(positions2, 3));\n\n    if (hasNormals) {\n      geometry2.setAttribute('normal', new Float32BufferAttribute(normals2, 3));\n    }\n\n    if (hasColors) {\n      geometry2.setAttribute('color', new Float32BufferAttribute(colors2, 3));\n    }\n\n    if (hasUVs) {\n      geometry2.setAttribute('uv', new Float32BufferAttribute(uvs2, 2));\n    }\n\n    if (hasUV2s) {\n      geometry2.setAttribute('uv2', new Float32BufferAttribute(uv2s2, 2));\n    }\n\n    return geometry2;\n  });\n\n  this.maxEdgeLength = maxEdgeLength;\n  this.maxIterations = _maxIterations;\n});\n\nexport { TessellateModifier };","map":{"version":3,"names":["_defineProperty","Vector3","Color","Vector2","BufferGeometry","Float32BufferAttribute","TessellateModifier","maxEdgeLength","_maxIterations","geometry","index","toNonIndexed","maxIterations","maxEdgeLengthSquared","va","vb","vc","vm","vs","na","nb","nc","nm","ns","ca","cb","cc","cm","cs","ua","ub","uc","um","us","u2a","u2b","u2c","u2m","u2s","attributes","hasNormals","normal","undefined","hasColors","color","hasUVs","uv","hasUV2s","uv2","positions","position","array","normals","colors","uvs","uv2s","positions2","normals2","colors2","uvs2","uv2s2","iteration","tessellating","addTriangle","a","b","c","v1","v2","v3","push","x","y","z","n1","n2","n3","c1","c2","c3","r","g","u1","u2","u3","u21","u22","u23","i","i2","il","length","fromArray","dab","distanceToSquared","dbc","dac","lerpVectors","lerpColors","geometry2","setAttribute"],"sources":["C:/Users/Arnav/Downloads/l4fycy/node_modules/three-stdlib/modifiers/TessellateModifier.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Vector3, Color, Vector2, BufferGeometry, Float32BufferAttribute } from 'three';\n\n/**\n * Break faces with edges longer than maxEdgeLength\n */\n\nclass TessellateModifier {\n  constructor(maxEdgeLength = 0.1, _maxIterations = 6) {\n    _defineProperty(this, \"maxEdgeLength\", void 0);\n\n    _defineProperty(this, \"maxIterations\", void 0);\n\n    _defineProperty(this, \"modify\", geometry => {\n      if (geometry.index !== null) {\n        geometry = geometry.toNonIndexed();\n      } //\n\n\n      const maxIterations = this.maxIterations;\n      const maxEdgeLengthSquared = this.maxEdgeLength * this.maxEdgeLength;\n      const va = new Vector3();\n      const vb = new Vector3();\n      const vc = new Vector3();\n      const vm = new Vector3();\n      const vs = [va, vb, vc, vm];\n      const na = new Vector3();\n      const nb = new Vector3();\n      const nc = new Vector3();\n      const nm = new Vector3();\n      const ns = [na, nb, nc, nm];\n      const ca = new Color();\n      const cb = new Color();\n      const cc = new Color();\n      const cm = new Color();\n      const cs = [ca, cb, cc, cm];\n      const ua = new Vector2();\n      const ub = new Vector2();\n      const uc = new Vector2();\n      const um = new Vector2();\n      const us = [ua, ub, uc, um];\n      const u2a = new Vector2();\n      const u2b = new Vector2();\n      const u2c = new Vector2();\n      const u2m = new Vector2();\n      const u2s = [u2a, u2b, u2c, u2m];\n      const attributes = geometry.attributes;\n      const hasNormals = attributes.normal !== undefined;\n      const hasColors = attributes.color !== undefined;\n      const hasUVs = attributes.uv !== undefined;\n      const hasUV2s = attributes.uv2 !== undefined;\n      let positions = attributes.position.array;\n      let normals = hasNormals ? attributes.normal.array : null;\n      let colors = hasColors ? attributes.color.array : null;\n      let uvs = hasUVs ? attributes.uv.array : null;\n      let uv2s = hasUV2s ? attributes.uv2.array : null;\n      let positions2 = positions;\n      let normals2 = normals;\n      let colors2 = colors;\n      let uvs2 = uvs;\n      let uv2s2 = uv2s;\n      let iteration = 0;\n      let tessellating = true;\n\n      function addTriangle(a, b, c) {\n        const v1 = vs[a];\n        const v2 = vs[b];\n        const v3 = vs[c];\n        positions2.push(v1.x, v1.y, v1.z);\n        positions2.push(v2.x, v2.y, v2.z);\n        positions2.push(v3.x, v3.y, v3.z);\n\n        if (hasNormals) {\n          const n1 = ns[a];\n          const n2 = ns[b];\n          const n3 = ns[c];\n          normals2.push(n1.x, n1.y, n1.z);\n          normals2.push(n2.x, n2.y, n2.z);\n          normals2.push(n3.x, n3.y, n3.z);\n        }\n\n        if (hasColors) {\n          const c1 = cs[a];\n          const c2 = cs[b];\n          const c3 = cs[c];\n          colors2.push(c1.r, c1.g, c1.b);\n          colors2.push(c2.r, c2.g, c2.b);\n          colors2.push(c3.r, c3.g, c3.b);\n        }\n\n        if (hasUVs) {\n          const u1 = us[a];\n          const u2 = us[b];\n          const u3 = us[c];\n          uvs2.push(u1.x, u1.y);\n          uvs2.push(u2.x, u2.y);\n          uvs2.push(u3.x, u3.y);\n        }\n\n        if (hasUV2s) {\n          const u21 = u2s[a];\n          const u22 = u2s[b];\n          const u23 = u2s[c];\n          uv2s2.push(u21.x, u21.y);\n          uv2s2.push(u22.x, u22.y);\n          uv2s2.push(u23.x, u23.y);\n        }\n      }\n\n      while (tessellating && iteration < maxIterations) {\n        iteration++;\n        tessellating = false;\n        positions = positions2;\n        positions2 = [];\n\n        if (hasNormals) {\n          normals = normals2;\n          normals2 = [];\n        }\n\n        if (hasColors) {\n          colors = colors2;\n          colors2 = [];\n        }\n\n        if (hasUVs) {\n          uvs = uvs2;\n          uvs2 = [];\n        }\n\n        if (hasUV2s) {\n          uv2s = uv2s2;\n          uv2s2 = [];\n        }\n\n        for (let i = 0, i2 = 0, il = positions.length; i < il; i += 9, i2 += 6) {\n          va.fromArray(positions, i + 0);\n          vb.fromArray(positions, i + 3);\n          vc.fromArray(positions, i + 6);\n\n          if (hasNormals && normals) {\n            na.fromArray(normals, i + 0);\n            nb.fromArray(normals, i + 3);\n            nc.fromArray(normals, i + 6);\n          }\n\n          if (hasColors && colors) {\n            ca.fromArray(colors, i + 0);\n            cb.fromArray(colors, i + 3);\n            cc.fromArray(colors, i + 6);\n          }\n\n          if (hasUVs && uvs) {\n            ua.fromArray(uvs, i2 + 0);\n            ub.fromArray(uvs, i2 + 2);\n            uc.fromArray(uvs, i2 + 4);\n          }\n\n          if (hasUV2s && uv2s) {\n            u2a.fromArray(uv2s, i2 + 0);\n            u2b.fromArray(uv2s, i2 + 2);\n            u2c.fromArray(uv2s, i2 + 4);\n          }\n\n          const dab = va.distanceToSquared(vb);\n          const dbc = vb.distanceToSquared(vc);\n          const dac = va.distanceToSquared(vc);\n\n          if (dab > maxEdgeLengthSquared || dbc > maxEdgeLengthSquared || dac > maxEdgeLengthSquared) {\n            tessellating = true;\n\n            if (dab >= dbc && dab >= dac) {\n              vm.lerpVectors(va, vb, 0.5);\n              if (hasNormals) nm.lerpVectors(na, nb, 0.5);\n              if (hasColors) cm.lerpColors(ca, cb, 0.5);\n              if (hasUVs) um.lerpVectors(ua, ub, 0.5);\n              if (hasUV2s) u2m.lerpVectors(u2a, u2b, 0.5);\n              addTriangle(0, 3, 2);\n              addTriangle(3, 1, 2);\n            } else if (dbc >= dab && dbc >= dac) {\n              vm.lerpVectors(vb, vc, 0.5);\n              if (hasNormals) nm.lerpVectors(nb, nc, 0.5);\n              if (hasColors) cm.lerpColors(cb, cc, 0.5);\n              if (hasUVs) um.lerpVectors(ub, uc, 0.5);\n              if (hasUV2s) u2m.lerpVectors(u2b, u2c, 0.5);\n              addTriangle(0, 1, 3);\n              addTriangle(3, 2, 0);\n            } else {\n              vm.lerpVectors(va, vc, 0.5);\n              if (hasNormals) nm.lerpVectors(na, nc, 0.5);\n              if (hasColors) cm.lerpColors(ca, cc, 0.5);\n              if (hasUVs) um.lerpVectors(ua, uc, 0.5);\n              if (hasUV2s) u2m.lerpVectors(u2a, u2c, 0.5);\n              addTriangle(0, 1, 3);\n              addTriangle(3, 1, 2);\n            }\n          } else {\n            addTriangle(0, 1, 2);\n          }\n        }\n      }\n\n      const geometry2 = new BufferGeometry();\n      geometry2.setAttribute('position', new Float32BufferAttribute(positions2, 3));\n\n      if (hasNormals) {\n        geometry2.setAttribute('normal', new Float32BufferAttribute(normals2, 3));\n      }\n\n      if (hasColors) {\n        geometry2.setAttribute('color', new Float32BufferAttribute(colors2, 3));\n      }\n\n      if (hasUVs) {\n        geometry2.setAttribute('uv', new Float32BufferAttribute(uvs2, 2));\n      }\n\n      if (hasUV2s) {\n        geometry2.setAttribute('uv2', new Float32BufferAttribute(uv2s2, 2));\n      }\n\n      return geometry2;\n    });\n\n    this.maxEdgeLength = maxEdgeLength;\n    this.maxIterations = _maxIterations;\n  }\n\n}\n\nexport { TessellateModifier };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}