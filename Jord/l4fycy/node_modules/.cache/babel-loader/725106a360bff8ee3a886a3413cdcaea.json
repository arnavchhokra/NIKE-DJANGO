{"ast":null,"code":"import { PerspectiveCamera, Vector3, Quaternion } from 'three';\n/**\r\n * peppers ghost effect based on http://www.instructables.com/id/Reflective-Prism/?ALLSTEPS\r\n */\n\nvar PeppersGhostEffect = function PeppersGhostEffect(renderer) {\n  var scope = this;\n  scope.cameraDistance = 15;\n  scope.reflectFromAbove = false; // Internals\n\n  var _halfWidth, _width, _height;\n\n  var _cameraF = new PerspectiveCamera(); //front\n\n\n  var _cameraB = new PerspectiveCamera(); //back\n\n\n  var _cameraL = new PerspectiveCamera(); //left\n\n\n  var _cameraR = new PerspectiveCamera(); //right\n\n\n  var _position = new Vector3();\n\n  var _quaternion = new Quaternion();\n\n  var _scale = new Vector3(); // Initialization\n\n\n  renderer.autoClear = false;\n\n  this.setSize = function (width, height) {\n    _halfWidth = width / 2;\n\n    if (width < height) {\n      _width = width / 3;\n      _height = width / 3;\n    } else {\n      _width = height / 3;\n      _height = height / 3;\n    }\n\n    renderer.setSize(width, height);\n  };\n\n  this.render = function (scene, camera) {\n    scene.updateMatrixWorld();\n    if (camera.parent === null) camera.updateMatrixWorld();\n    camera.matrixWorld.decompose(_position, _quaternion, _scale); // front\n\n    _cameraF.position.copy(_position);\n\n    _cameraF.quaternion.copy(_quaternion);\n\n    _cameraF.translateZ(scope.cameraDistance);\n\n    _cameraF.lookAt(scene.position); // back\n\n\n    _cameraB.position.copy(_position);\n\n    _cameraB.quaternion.copy(_quaternion);\n\n    _cameraB.translateZ(-scope.cameraDistance);\n\n    _cameraB.lookAt(scene.position);\n\n    _cameraB.rotation.z += 180 * (Math.PI / 180); // left\n\n    _cameraL.position.copy(_position);\n\n    _cameraL.quaternion.copy(_quaternion);\n\n    _cameraL.translateX(-scope.cameraDistance);\n\n    _cameraL.lookAt(scene.position);\n\n    _cameraL.rotation.x += 90 * (Math.PI / 180); // right\n\n    _cameraR.position.copy(_position);\n\n    _cameraR.quaternion.copy(_quaternion);\n\n    _cameraR.translateX(scope.cameraDistance);\n\n    _cameraR.lookAt(scene.position);\n\n    _cameraR.rotation.x += 90 * (Math.PI / 180);\n    renderer.clear();\n    renderer.setScissorTest(true);\n    renderer.setScissor(_halfWidth - _width / 2, _height * 2, _width, _height);\n    renderer.setViewport(_halfWidth - _width / 2, _height * 2, _width, _height);\n\n    if (scope.reflectFromAbove) {\n      renderer.render(scene, _cameraB);\n    } else {\n      renderer.render(scene, _cameraF);\n    }\n\n    renderer.setScissor(_halfWidth - _width / 2, 0, _width, _height);\n    renderer.setViewport(_halfWidth - _width / 2, 0, _width, _height);\n\n    if (scope.reflectFromAbove) {\n      renderer.render(scene, _cameraF);\n    } else {\n      renderer.render(scene, _cameraB);\n    }\n\n    renderer.setScissor(_halfWidth - _width / 2 - _width, _height, _width, _height);\n    renderer.setViewport(_halfWidth - _width / 2 - _width, _height, _width, _height);\n\n    if (scope.reflectFromAbove) {\n      renderer.render(scene, _cameraR);\n    } else {\n      renderer.render(scene, _cameraL);\n    }\n\n    renderer.setScissor(_halfWidth + _width / 2, _height, _width, _height);\n    renderer.setViewport(_halfWidth + _width / 2, _height, _width, _height);\n\n    if (scope.reflectFromAbove) {\n      renderer.render(scene, _cameraL);\n    } else {\n      renderer.render(scene, _cameraR);\n    }\n\n    renderer.setScissorTest(false);\n  };\n};\n\nexport { PeppersGhostEffect };","map":{"version":3,"names":["PerspectiveCamera","Vector3","Quaternion","PeppersGhostEffect","renderer","scope","cameraDistance","reflectFromAbove","_halfWidth","_width","_height","_cameraF","_cameraB","_cameraL","_cameraR","_position","_quaternion","_scale","autoClear","setSize","width","height","render","scene","camera","updateMatrixWorld","parent","matrixWorld","decompose","position","copy","quaternion","translateZ","lookAt","rotation","z","Math","PI","translateX","x","clear","setScissorTest","setScissor","setViewport"],"sources":["D:/Github/NIKE-DJANGO/Jord/l4fycy/node_modules/three-stdlib/effects/PeppersGhostEffect.js"],"sourcesContent":["import { PerspectiveCamera, Vector3, Quaternion } from 'three';\r\n\r\n/**\r\n * peppers ghost effect based on http://www.instructables.com/id/Reflective-Prism/?ALLSTEPS\r\n */\r\n\r\nconst PeppersGhostEffect = function (renderer) {\r\n  const scope = this;\r\n  scope.cameraDistance = 15;\r\n  scope.reflectFromAbove = false; // Internals\r\n\r\n  let _halfWidth, _width, _height;\r\n\r\n  const _cameraF = new PerspectiveCamera(); //front\r\n\r\n\r\n  const _cameraB = new PerspectiveCamera(); //back\r\n\r\n\r\n  const _cameraL = new PerspectiveCamera(); //left\r\n\r\n\r\n  const _cameraR = new PerspectiveCamera(); //right\r\n\r\n\r\n  const _position = new Vector3();\r\n\r\n  const _quaternion = new Quaternion();\r\n\r\n  const _scale = new Vector3(); // Initialization\r\n\r\n\r\n  renderer.autoClear = false;\r\n\r\n  this.setSize = (width, height) => {\r\n    _halfWidth = width / 2;\r\n\r\n    if (width < height) {\r\n      _width = width / 3;\r\n      _height = width / 3;\r\n    } else {\r\n      _width = height / 3;\r\n      _height = height / 3;\r\n    }\r\n\r\n    renderer.setSize(width, height);\r\n  };\r\n\r\n  this.render = (scene, camera) => {\r\n    scene.updateMatrixWorld();\r\n    if (camera.parent === null) camera.updateMatrixWorld();\r\n    camera.matrixWorld.decompose(_position, _quaternion, _scale); // front\r\n\r\n    _cameraF.position.copy(_position);\r\n\r\n    _cameraF.quaternion.copy(_quaternion);\r\n\r\n    _cameraF.translateZ(scope.cameraDistance);\r\n\r\n    _cameraF.lookAt(scene.position); // back\r\n\r\n\r\n    _cameraB.position.copy(_position);\r\n\r\n    _cameraB.quaternion.copy(_quaternion);\r\n\r\n    _cameraB.translateZ(-scope.cameraDistance);\r\n\r\n    _cameraB.lookAt(scene.position);\r\n\r\n    _cameraB.rotation.z += 180 * (Math.PI / 180); // left\r\n\r\n    _cameraL.position.copy(_position);\r\n\r\n    _cameraL.quaternion.copy(_quaternion);\r\n\r\n    _cameraL.translateX(-scope.cameraDistance);\r\n\r\n    _cameraL.lookAt(scene.position);\r\n\r\n    _cameraL.rotation.x += 90 * (Math.PI / 180); // right\r\n\r\n    _cameraR.position.copy(_position);\r\n\r\n    _cameraR.quaternion.copy(_quaternion);\r\n\r\n    _cameraR.translateX(scope.cameraDistance);\r\n\r\n    _cameraR.lookAt(scene.position);\r\n\r\n    _cameraR.rotation.x += 90 * (Math.PI / 180);\r\n    renderer.clear();\r\n    renderer.setScissorTest(true);\r\n    renderer.setScissor(_halfWidth - _width / 2, _height * 2, _width, _height);\r\n    renderer.setViewport(_halfWidth - _width / 2, _height * 2, _width, _height);\r\n\r\n    if (scope.reflectFromAbove) {\r\n      renderer.render(scene, _cameraB);\r\n    } else {\r\n      renderer.render(scene, _cameraF);\r\n    }\r\n\r\n    renderer.setScissor(_halfWidth - _width / 2, 0, _width, _height);\r\n    renderer.setViewport(_halfWidth - _width / 2, 0, _width, _height);\r\n\r\n    if (scope.reflectFromAbove) {\r\n      renderer.render(scene, _cameraF);\r\n    } else {\r\n      renderer.render(scene, _cameraB);\r\n    }\r\n\r\n    renderer.setScissor(_halfWidth - _width / 2 - _width, _height, _width, _height);\r\n    renderer.setViewport(_halfWidth - _width / 2 - _width, _height, _width, _height);\r\n\r\n    if (scope.reflectFromAbove) {\r\n      renderer.render(scene, _cameraR);\r\n    } else {\r\n      renderer.render(scene, _cameraL);\r\n    }\r\n\r\n    renderer.setScissor(_halfWidth + _width / 2, _height, _width, _height);\r\n    renderer.setViewport(_halfWidth + _width / 2, _height, _width, _height);\r\n\r\n    if (scope.reflectFromAbove) {\r\n      renderer.render(scene, _cameraL);\r\n    } else {\r\n      renderer.render(scene, _cameraR);\r\n    }\r\n\r\n    renderer.setScissorTest(false);\r\n  };\r\n};\r\n\r\nexport { PeppersGhostEffect };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}