{"ast":null,"code":"import { Vector3 } from 'three';\nimport { intersectRay } from '../utils/intersectUtils.js';\nimport { IS_LEAF, OFFSET, COUNT, LEFT_NODE, RIGHT_NODE } from '../utils/nodeBufferUtils.js';\nimport { BufferStack } from '../utils/BufferStack.js';\nimport '../utils/iterationUtils.generated.js';\nimport { intersectTris_indirect } from '../utils/iterationUtils_indirect.generated.js';\n\n/******************************************************/\n/* This file is generated from \"raycast.template.js\". */\n/******************************************************/\n\nconst _boxIntersection = /* @__PURE__ */new Vector3();\nfunction raycast_indirect(bvh, root, side, ray, intersects) {\n  BufferStack.setBuffer(bvh._roots[root]);\n  _raycast(0, bvh, side, ray, intersects);\n  BufferStack.clearBuffer();\n}\nfunction _raycast(nodeIndex32, bvh, side, ray, intersects) {\n  const {\n    float32Array,\n    uint16Array,\n    uint32Array\n  } = BufferStack;\n  const nodeIndex16 = nodeIndex32 * 2;\n  const isLeaf = IS_LEAF(nodeIndex16, uint16Array);\n  if (isLeaf) {\n    const offset = OFFSET(nodeIndex32, uint32Array);\n    const count = COUNT(nodeIndex16, uint16Array);\n    intersectTris_indirect(bvh, side, ray, offset, count, intersects);\n  } else {\n    const leftIndex = LEFT_NODE(nodeIndex32);\n    if (intersectRay(leftIndex, float32Array, ray, _boxIntersection)) {\n      _raycast(leftIndex, bvh, side, ray, intersects);\n    }\n    const rightIndex = RIGHT_NODE(nodeIndex32, uint32Array);\n    if (intersectRay(rightIndex, float32Array, ray, _boxIntersection)) {\n      _raycast(rightIndex, bvh, side, ray, intersects);\n    }\n  }\n}\nexport { raycast_indirect };","map":{"version":3,"names":["Vector3","intersectRay","IS_LEAF","OFFSET","COUNT","LEFT_NODE","RIGHT_NODE","BufferStack","intersectTris_indirect","_boxIntersection","raycast_indirect","bvh","root","side","ray","intersects","setBuffer","_roots","_raycast","clearBuffer","nodeIndex32","float32Array","uint16Array","uint32Array","nodeIndex16","isLeaf","offset","count","leftIndex","rightIndex"],"sources":["D:/Github/NIKE-DJANGO/Jord/l4fycy/node_modules/three-mesh-bvh/src/core/cast/raycast_indirect.generated.js"],"sourcesContent":["import { Vector3 } from 'three';\nimport { intersectRay } from '../utils/intersectUtils.js';\nimport { IS_LEAF, OFFSET, COUNT, LEFT_NODE, RIGHT_NODE } from '../utils/nodeBufferUtils.js';\nimport { BufferStack } from '../utils/BufferStack.js';\nimport '../utils/iterationUtils.generated.js';\nimport { intersectTris_indirect } from '../utils/iterationUtils_indirect.generated.js';\n\n/******************************************************/\n/* This file is generated from \"raycast.template.js\". */\n/******************************************************/\n\nconst _boxIntersection = /* @__PURE__ */ new Vector3();\nfunction raycast_indirect( bvh, root, side, ray, intersects ) {\n\n\tBufferStack.setBuffer( bvh._roots[ root ] );\n\t_raycast( 0, bvh, side, ray, intersects );\n\tBufferStack.clearBuffer();\n\n}\n\nfunction _raycast( nodeIndex32, bvh, side, ray, intersects ) {\n\n\tconst { float32Array, uint16Array, uint32Array } = BufferStack;\n\tconst nodeIndex16 = nodeIndex32 * 2;\n\tconst isLeaf = IS_LEAF( nodeIndex16, uint16Array );\n\tif ( isLeaf ) {\n\n\t\tconst offset = OFFSET( nodeIndex32, uint32Array );\n\t\tconst count = COUNT( nodeIndex16, uint16Array );\n\n\t\tintersectTris_indirect( bvh, side, ray, offset, count, intersects );\n\n\n\t} else {\n\n\t\tconst leftIndex = LEFT_NODE( nodeIndex32 );\n\t\tif ( intersectRay( leftIndex, float32Array, ray, _boxIntersection ) ) {\n\n\t\t\t_raycast( leftIndex, bvh, side, ray, intersects );\n\n\t\t}\n\n\t\tconst rightIndex = RIGHT_NODE( nodeIndex32, uint32Array );\n\t\tif ( intersectRay( rightIndex, float32Array, ray, _boxIntersection ) ) {\n\n\t\t\t_raycast( rightIndex, bvh, side, ray, intersects );\n\n\t\t}\n\n\t}\n\n}\n\nexport { raycast_indirect };\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,OAAO;AAC/B,SAASC,YAAY,QAAQ,4BAA4B;AACzD,SAASC,OAAO,EAAEC,MAAM,EAAEC,KAAK,EAAEC,SAAS,EAAEC,UAAU,QAAQ,6BAA6B;AAC3F,SAASC,WAAW,QAAQ,yBAAyB;AACrD,OAAO,sCAAsC;AAC7C,SAASC,sBAAsB,QAAQ,+CAA+C;;AAEtF;AACA;AACA;;AAEA,MAAMC,gBAAgB,GAAG,eAAgB,IAAIT,OAAO,CAAC,CAAC;AACtD,SAASU,gBAAgBA,CAAEC,GAAG,EAAEC,IAAI,EAAEC,IAAI,EAAEC,GAAG,EAAEC,UAAU,EAAG;EAE7DR,WAAW,CAACS,SAAS,CAAEL,GAAG,CAACM,MAAM,CAAEL,IAAI,CAAG,CAAC;EAC3CM,QAAQ,CAAE,CAAC,EAAEP,GAAG,EAAEE,IAAI,EAAEC,GAAG,EAAEC,UAAW,CAAC;EACzCR,WAAW,CAACY,WAAW,CAAC,CAAC;AAE1B;AAEA,SAASD,QAAQA,CAAEE,WAAW,EAAET,GAAG,EAAEE,IAAI,EAAEC,GAAG,EAAEC,UAAU,EAAG;EAE5D,MAAM;IAAEM,YAAY;IAAEC,WAAW;IAAEC;EAAY,CAAC,GAAGhB,WAAW;EAC9D,MAAMiB,WAAW,GAAGJ,WAAW,GAAG,CAAC;EACnC,MAAMK,MAAM,GAAGvB,OAAO,CAAEsB,WAAW,EAAEF,WAAY,CAAC;EAClD,IAAKG,MAAM,EAAG;IAEb,MAAMC,MAAM,GAAGvB,MAAM,CAAEiB,WAAW,EAAEG,WAAY,CAAC;IACjD,MAAMI,KAAK,GAAGvB,KAAK,CAAEoB,WAAW,EAAEF,WAAY,CAAC;IAE/Cd,sBAAsB,CAAEG,GAAG,EAAEE,IAAI,EAAEC,GAAG,EAAEY,MAAM,EAAEC,KAAK,EAAEZ,UAAW,CAAC;EAGpE,CAAC,MAAM;IAEN,MAAMa,SAAS,GAAGvB,SAAS,CAAEe,WAAY,CAAC;IAC1C,IAAKnB,YAAY,CAAE2B,SAAS,EAAEP,YAAY,EAAEP,GAAG,EAAEL,gBAAiB,CAAC,EAAG;MAErES,QAAQ,CAAEU,SAAS,EAAEjB,GAAG,EAAEE,IAAI,EAAEC,GAAG,EAAEC,UAAW,CAAC;IAElD;IAEA,MAAMc,UAAU,GAAGvB,UAAU,CAAEc,WAAW,EAAEG,WAAY,CAAC;IACzD,IAAKtB,YAAY,CAAE4B,UAAU,EAAER,YAAY,EAAEP,GAAG,EAAEL,gBAAiB,CAAC,EAAG;MAEtES,QAAQ,CAAEW,UAAU,EAAElB,GAAG,EAAEE,IAAI,EAAEC,GAAG,EAAEC,UAAW,CAAC;IAEnD;EAED;AAED;AAEA,SAASL,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}