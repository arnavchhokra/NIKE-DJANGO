{"ast":null,"code":"import _classCallCheck from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Loader, FileLoader, Group, MeshPhongMaterial, Float32BufferAttribute, Color, BufferGeometry, Mesh, LoaderUtils } from 'three';\nimport { unzipSync } from 'fflate';\n/**\n * Description: Early release of an AMF Loader following the pattern of the\n * example loaders in the three.js project.\n *\n * Usage:\n *\tconst loader = new AMFLoader();\n *\tloader.load('/path/to/project.amf', function(objecttree) {\n *\t\tscene.add(objecttree);\n *\t});\n *\n * Materials now supported, material colors supported\n * Zip support, requires fflate\n * No constellation support (yet)!\n *\n */\n\nvar AMFLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(AMFLoader, _Loader);\n\n  var _super = _createSuper(AMFLoader);\n\n  function AMFLoader(manager) {\n    _classCallCheck(this, AMFLoader);\n\n    return _super.call(this, manager);\n  }\n\n  _createClass(AMFLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var loader = new FileLoader(scope.manager);\n      loader.setPath(scope.path);\n      loader.setResponseType('arraybuffer');\n      loader.setRequestHeader(scope.requestHeader);\n      loader.setWithCredentials(scope.withCredentials);\n      loader.load(url, function (text) {\n        try {\n          onLoad(scope.parse(text));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n\n          scope.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(data) {\n      function loadDocument(data) {\n        var view = new DataView(data);\n        var magic = String.fromCharCode(view.getUint8(0), view.getUint8(1));\n\n        if (magic === 'PK') {\n          var zip = null;\n          var file = null;\n          console.log('THREE.AMFLoader: Loading Zip');\n\n          try {\n            zip = unzipSync(new Uint8Array(data));\n          } catch (e) {\n            if (e instanceof ReferenceError) {\n              console.log('THREE.AMFLoader: fflate missing and file is compressed.');\n              return null;\n            }\n          }\n\n          for (file in zip) {\n            if (file.toLowerCase().substr(-4) === '.amf') {\n              break;\n            }\n          }\n\n          console.log('THREE.AMFLoader: Trying to load file asset: ' + file);\n          view = new DataView(zip[file].buffer);\n        }\n\n        var fileText = LoaderUtils.decodeText(view);\n        var xmlData = new DOMParser().parseFromString(fileText, 'application/xml');\n\n        if (xmlData.documentElement.nodeName.toLowerCase() !== 'amf') {\n          console.log('THREE.AMFLoader: Error loading AMF - no AMF document found.');\n          return null;\n        }\n\n        return xmlData;\n      }\n\n      function loadDocumentScale(node) {\n        var scale = 1.0;\n        var unit = 'millimeter';\n\n        if (node.documentElement.attributes.unit !== undefined) {\n          unit = node.documentElement.attributes.unit.value.toLowerCase();\n        }\n\n        var scaleUnits = {\n          millimeter: 1.0,\n          inch: 25.4,\n          feet: 304.8,\n          meter: 1000.0,\n          micron: 0.001\n        };\n\n        if (scaleUnits[unit] !== undefined) {\n          scale = scaleUnits[unit];\n        }\n\n        console.log('THREE.AMFLoader: Unit scale: ' + scale);\n        return scale;\n      }\n\n      function loadMaterials(node) {\n        var matName = 'AMF Material';\n        var matId = node.attributes.id.textContent;\n        var color = {\n          r: 1.0,\n          g: 1.0,\n          b: 1.0,\n          a: 1.0\n        };\n        var loadedMaterial = null;\n\n        for (var _i = 0; _i < node.childNodes.length; _i++) {\n          var matChildEl = node.childNodes[_i];\n\n          if (matChildEl.nodeName === 'metadata' && matChildEl.attributes.type !== undefined) {\n            if (matChildEl.attributes.type.value === 'name') {\n              matName = matChildEl.textContent;\n            }\n          } else if (matChildEl.nodeName === 'color') {\n            color = loadColor(matChildEl);\n          }\n        }\n\n        loadedMaterial = new MeshPhongMaterial({\n          flatShading: true,\n          color: new Color(color.r, color.g, color.b),\n          name: matName\n        });\n\n        if (color.a !== 1.0) {\n          loadedMaterial.transparent = true;\n          loadedMaterial.opacity = color.a;\n        }\n\n        return {\n          id: matId,\n          material: loadedMaterial\n        };\n      }\n\n      function loadColor(node) {\n        var color = {\n          r: 1.0,\n          g: 1.0,\n          b: 1.0,\n          a: 1.0\n        };\n\n        for (var _i2 = 0; _i2 < node.childNodes.length; _i2++) {\n          var matColor = node.childNodes[_i2];\n\n          if (matColor.nodeName === 'r') {\n            color.r = matColor.textContent;\n          } else if (matColor.nodeName === 'g') {\n            color.g = matColor.textContent;\n          } else if (matColor.nodeName === 'b') {\n            color.b = matColor.textContent;\n          } else if (matColor.nodeName === 'a') {\n            color.a = matColor.textContent;\n          }\n        }\n\n        return color;\n      }\n\n      function loadMeshVolume(node) {\n        var volume = {\n          name: '',\n          triangles: [],\n          materialid: null\n        };\n        var currVolumeNode = node.firstElementChild;\n\n        if (node.attributes.materialid !== undefined) {\n          volume.materialId = node.attributes.materialid.nodeValue;\n        }\n\n        while (currVolumeNode) {\n          if (currVolumeNode.nodeName === 'metadata') {\n            if (currVolumeNode.attributes.type !== undefined) {\n              if (currVolumeNode.attributes.type.value === 'name') {\n                volume.name = currVolumeNode.textContent;\n              }\n            }\n          } else if (currVolumeNode.nodeName === 'triangle') {\n            var v1 = currVolumeNode.getElementsByTagName('v1')[0].textContent;\n            var v2 = currVolumeNode.getElementsByTagName('v2')[0].textContent;\n            var v3 = currVolumeNode.getElementsByTagName('v3')[0].textContent;\n            volume.triangles.push(v1, v2, v3);\n          }\n\n          currVolumeNode = currVolumeNode.nextElementSibling;\n        }\n\n        return volume;\n      }\n\n      function loadMeshVertices(node) {\n        var vertArray = [];\n        var normalArray = [];\n        var currVerticesNode = node.firstElementChild;\n\n        while (currVerticesNode) {\n          if (currVerticesNode.nodeName === 'vertex') {\n            var vNode = currVerticesNode.firstElementChild;\n\n            while (vNode) {\n              if (vNode.nodeName === 'coordinates') {\n                var x = vNode.getElementsByTagName('x')[0].textContent;\n                var y = vNode.getElementsByTagName('y')[0].textContent;\n                var z = vNode.getElementsByTagName('z')[0].textContent;\n                vertArray.push(x, y, z);\n              } else if (vNode.nodeName === 'normal') {\n                var nx = vNode.getElementsByTagName('nx')[0].textContent;\n                var ny = vNode.getElementsByTagName('ny')[0].textContent;\n                var nz = vNode.getElementsByTagName('nz')[0].textContent;\n                normalArray.push(nx, ny, nz);\n              }\n\n              vNode = vNode.nextElementSibling;\n            }\n          }\n\n          currVerticesNode = currVerticesNode.nextElementSibling;\n        }\n\n        return {\n          vertices: vertArray,\n          normals: normalArray\n        };\n      }\n\n      function loadObject(node) {\n        var objId = node.attributes.id.textContent;\n        var loadedObject = {\n          name: 'amfobject',\n          meshes: []\n        };\n        var currColor = null;\n        var currObjNode = node.firstElementChild;\n\n        while (currObjNode) {\n          if (currObjNode.nodeName === 'metadata') {\n            if (currObjNode.attributes.type !== undefined) {\n              if (currObjNode.attributes.type.value === 'name') {\n                loadedObject.name = currObjNode.textContent;\n              }\n            }\n          } else if (currObjNode.nodeName === 'color') {\n            currColor = loadColor(currObjNode);\n          } else if (currObjNode.nodeName === 'mesh') {\n            var currMeshNode = currObjNode.firstElementChild;\n            var mesh = {\n              vertices: [],\n              normals: [],\n              volumes: [],\n              color: currColor\n            };\n\n            while (currMeshNode) {\n              if (currMeshNode.nodeName === 'vertices') {\n                var loadedVertices = loadMeshVertices(currMeshNode);\n                mesh.normals = mesh.normals.concat(loadedVertices.normals);\n                mesh.vertices = mesh.vertices.concat(loadedVertices.vertices);\n              } else if (currMeshNode.nodeName === 'volume') {\n                mesh.volumes.push(loadMeshVolume(currMeshNode));\n              }\n\n              currMeshNode = currMeshNode.nextElementSibling;\n            }\n\n            loadedObject.meshes.push(mesh);\n          }\n\n          currObjNode = currObjNode.nextElementSibling;\n        }\n\n        return {\n          id: objId,\n          obj: loadedObject\n        };\n      }\n\n      var xmlData = loadDocument(data);\n      var amfName = '';\n      var amfAuthor = '';\n      var amfScale = loadDocumentScale(xmlData);\n      var amfMaterials = {};\n      var amfObjects = {};\n      var childNodes = xmlData.documentElement.childNodes;\n      var i, j;\n\n      for (i = 0; i < childNodes.length; i++) {\n        var child = childNodes[i];\n\n        if (child.nodeName === 'metadata') {\n          if (child.attributes.type !== undefined) {\n            if (child.attributes.type.value === 'name') {\n              amfName = child.textContent;\n            } else if (child.attributes.type.value === 'author') {\n              amfAuthor = child.textContent;\n            }\n          }\n        } else if (child.nodeName === 'material') {\n          var loadedMaterial = loadMaterials(child);\n          amfMaterials[loadedMaterial.id] = loadedMaterial.material;\n        } else if (child.nodeName === 'object') {\n          var loadedObject = loadObject(child);\n          amfObjects[loadedObject.id] = loadedObject.obj;\n        }\n      }\n\n      var sceneObject = new Group();\n      var defaultMaterial = new MeshPhongMaterial({\n        color: 0xaaaaff,\n        flatShading: true\n      });\n      sceneObject.name = amfName;\n      sceneObject.userData.author = amfAuthor;\n      sceneObject.userData.loader = 'AMF';\n\n      for (var id in amfObjects) {\n        var part = amfObjects[id];\n        var meshes = part.meshes;\n        var newObject = new Group();\n        newObject.name = part.name || '';\n\n        for (i = 0; i < meshes.length; i++) {\n          var objDefaultMaterial = defaultMaterial;\n          var mesh = meshes[i];\n          var vertices = new Float32BufferAttribute(mesh.vertices, 3);\n          var normals = null;\n\n          if (mesh.normals.length) {\n            normals = new Float32BufferAttribute(mesh.normals, 3);\n          }\n\n          if (mesh.color) {\n            var color = mesh.color;\n            objDefaultMaterial = defaultMaterial.clone();\n            objDefaultMaterial.color = new Color(color.r, color.g, color.b);\n\n            if (color.a !== 1.0) {\n              objDefaultMaterial.transparent = true;\n              objDefaultMaterial.opacity = color.a;\n            }\n          }\n\n          var volumes = mesh.volumes;\n\n          for (j = 0; j < volumes.length; j++) {\n            var volume = volumes[j];\n            var newGeometry = new BufferGeometry();\n            var material = objDefaultMaterial;\n            newGeometry.setIndex(volume.triangles);\n            newGeometry.setAttribute('position', vertices.clone());\n\n            if (normals) {\n              newGeometry.setAttribute('normal', normals.clone());\n            }\n\n            if (amfMaterials[volume.materialId] !== undefined) {\n              material = amfMaterials[volume.materialId];\n            }\n\n            newGeometry.scale(amfScale, amfScale, amfScale);\n            newObject.add(new Mesh(newGeometry, material.clone()));\n          }\n        }\n\n        sceneObject.add(newObject);\n      }\n\n      return sceneObject;\n    }\n  }]);\n\n  return AMFLoader;\n}(Loader);\n\nexport { AMFLoader };","map":{"version":3,"names":["Loader","FileLoader","Group","MeshPhongMaterial","Float32BufferAttribute","Color","BufferGeometry","Mesh","LoaderUtils","unzipSync","AMFLoader","manager","url","onLoad","onProgress","onError","scope","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","load","text","parse","e","console","error","itemError","data","loadDocument","view","DataView","magic","String","fromCharCode","getUint8","zip","file","log","Uint8Array","ReferenceError","toLowerCase","substr","buffer","fileText","decodeText","xmlData","DOMParser","parseFromString","documentElement","nodeName","loadDocumentScale","node","scale","unit","attributes","undefined","value","scaleUnits","millimeter","inch","feet","meter","micron","loadMaterials","matName","matId","id","textContent","color","r","g","b","a","loadedMaterial","i","childNodes","length","matChildEl","type","loadColor","flatShading","name","transparent","opacity","material","matColor","loadMeshVolume","volume","triangles","materialid","currVolumeNode","firstElementChild","materialId","nodeValue","v1","getElementsByTagName","v2","v3","push","nextElementSibling","loadMeshVertices","vertArray","normalArray","currVerticesNode","vNode","x","y","z","nx","ny","nz","vertices","normals","loadObject","objId","loadedObject","meshes","currColor","currObjNode","currMeshNode","mesh","volumes","loadedVertices","concat","obj","amfName","amfAuthor","amfScale","amfMaterials","amfObjects","j","child","sceneObject","defaultMaterial","userData","author","part","newObject","objDefaultMaterial","clone","newGeometry","setIndex","setAttribute","add"],"sources":["C:/Users/Arnav/Downloads/l4fycy/node_modules/three-stdlib/loaders/AMFLoader.js"],"sourcesContent":["import { Loader, FileLoader, Group, MeshPhongMaterial, Float32BufferAttribute, Color, BufferGeometry, Mesh, LoaderUtils } from 'three';\nimport { unzipSync } from 'fflate';\n\n/**\n * Description: Early release of an AMF Loader following the pattern of the\n * example loaders in the three.js project.\n *\n * Usage:\n *\tconst loader = new AMFLoader();\n *\tloader.load('/path/to/project.amf', function(objecttree) {\n *\t\tscene.add(objecttree);\n *\t});\n *\n * Materials now supported, material colors supported\n * Zip support, requires fflate\n * No constellation support (yet)!\n *\n */\n\nclass AMFLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(data) {\n    function loadDocument(data) {\n      let view = new DataView(data);\n      const magic = String.fromCharCode(view.getUint8(0), view.getUint8(1));\n\n      if (magic === 'PK') {\n        let zip = null;\n        let file = null;\n        console.log('THREE.AMFLoader: Loading Zip');\n\n        try {\n          zip = unzipSync(new Uint8Array(data));\n        } catch (e) {\n          if (e instanceof ReferenceError) {\n            console.log('THREE.AMFLoader: fflate missing and file is compressed.');\n            return null;\n          }\n        }\n\n        for (file in zip) {\n          if (file.toLowerCase().substr(-4) === '.amf') {\n            break;\n          }\n        }\n\n        console.log('THREE.AMFLoader: Trying to load file asset: ' + file);\n        view = new DataView(zip[file].buffer);\n      }\n\n      const fileText = LoaderUtils.decodeText(view);\n      const xmlData = new DOMParser().parseFromString(fileText, 'application/xml');\n\n      if (xmlData.documentElement.nodeName.toLowerCase() !== 'amf') {\n        console.log('THREE.AMFLoader: Error loading AMF - no AMF document found.');\n        return null;\n      }\n\n      return xmlData;\n    }\n\n    function loadDocumentScale(node) {\n      let scale = 1.0;\n      let unit = 'millimeter';\n\n      if (node.documentElement.attributes.unit !== undefined) {\n        unit = node.documentElement.attributes.unit.value.toLowerCase();\n      }\n\n      const scaleUnits = {\n        millimeter: 1.0,\n        inch: 25.4,\n        feet: 304.8,\n        meter: 1000.0,\n        micron: 0.001\n      };\n\n      if (scaleUnits[unit] !== undefined) {\n        scale = scaleUnits[unit];\n      }\n\n      console.log('THREE.AMFLoader: Unit scale: ' + scale);\n      return scale;\n    }\n\n    function loadMaterials(node) {\n      let matName = 'AMF Material';\n      const matId = node.attributes.id.textContent;\n      let color = {\n        r: 1.0,\n        g: 1.0,\n        b: 1.0,\n        a: 1.0\n      };\n      let loadedMaterial = null;\n\n      for (let i = 0; i < node.childNodes.length; i++) {\n        const matChildEl = node.childNodes[i];\n\n        if (matChildEl.nodeName === 'metadata' && matChildEl.attributes.type !== undefined) {\n          if (matChildEl.attributes.type.value === 'name') {\n            matName = matChildEl.textContent;\n          }\n        } else if (matChildEl.nodeName === 'color') {\n          color = loadColor(matChildEl);\n        }\n      }\n\n      loadedMaterial = new MeshPhongMaterial({\n        flatShading: true,\n        color: new Color(color.r, color.g, color.b),\n        name: matName\n      });\n\n      if (color.a !== 1.0) {\n        loadedMaterial.transparent = true;\n        loadedMaterial.opacity = color.a;\n      }\n\n      return {\n        id: matId,\n        material: loadedMaterial\n      };\n    }\n\n    function loadColor(node) {\n      const color = {\n        r: 1.0,\n        g: 1.0,\n        b: 1.0,\n        a: 1.0\n      };\n\n      for (let i = 0; i < node.childNodes.length; i++) {\n        const matColor = node.childNodes[i];\n\n        if (matColor.nodeName === 'r') {\n          color.r = matColor.textContent;\n        } else if (matColor.nodeName === 'g') {\n          color.g = matColor.textContent;\n        } else if (matColor.nodeName === 'b') {\n          color.b = matColor.textContent;\n        } else if (matColor.nodeName === 'a') {\n          color.a = matColor.textContent;\n        }\n      }\n\n      return color;\n    }\n\n    function loadMeshVolume(node) {\n      const volume = {\n        name: '',\n        triangles: [],\n        materialid: null\n      };\n      let currVolumeNode = node.firstElementChild;\n\n      if (node.attributes.materialid !== undefined) {\n        volume.materialId = node.attributes.materialid.nodeValue;\n      }\n\n      while (currVolumeNode) {\n        if (currVolumeNode.nodeName === 'metadata') {\n          if (currVolumeNode.attributes.type !== undefined) {\n            if (currVolumeNode.attributes.type.value === 'name') {\n              volume.name = currVolumeNode.textContent;\n            }\n          }\n        } else if (currVolumeNode.nodeName === 'triangle') {\n          const v1 = currVolumeNode.getElementsByTagName('v1')[0].textContent;\n          const v2 = currVolumeNode.getElementsByTagName('v2')[0].textContent;\n          const v3 = currVolumeNode.getElementsByTagName('v3')[0].textContent;\n          volume.triangles.push(v1, v2, v3);\n        }\n\n        currVolumeNode = currVolumeNode.nextElementSibling;\n      }\n\n      return volume;\n    }\n\n    function loadMeshVertices(node) {\n      const vertArray = [];\n      const normalArray = [];\n      let currVerticesNode = node.firstElementChild;\n\n      while (currVerticesNode) {\n        if (currVerticesNode.nodeName === 'vertex') {\n          let vNode = currVerticesNode.firstElementChild;\n\n          while (vNode) {\n            if (vNode.nodeName === 'coordinates') {\n              const x = vNode.getElementsByTagName('x')[0].textContent;\n              const y = vNode.getElementsByTagName('y')[0].textContent;\n              const z = vNode.getElementsByTagName('z')[0].textContent;\n              vertArray.push(x, y, z);\n            } else if (vNode.nodeName === 'normal') {\n              const nx = vNode.getElementsByTagName('nx')[0].textContent;\n              const ny = vNode.getElementsByTagName('ny')[0].textContent;\n              const nz = vNode.getElementsByTagName('nz')[0].textContent;\n              normalArray.push(nx, ny, nz);\n            }\n\n            vNode = vNode.nextElementSibling;\n          }\n        }\n\n        currVerticesNode = currVerticesNode.nextElementSibling;\n      }\n\n      return {\n        vertices: vertArray,\n        normals: normalArray\n      };\n    }\n\n    function loadObject(node) {\n      const objId = node.attributes.id.textContent;\n      const loadedObject = {\n        name: 'amfobject',\n        meshes: []\n      };\n      let currColor = null;\n      let currObjNode = node.firstElementChild;\n\n      while (currObjNode) {\n        if (currObjNode.nodeName === 'metadata') {\n          if (currObjNode.attributes.type !== undefined) {\n            if (currObjNode.attributes.type.value === 'name') {\n              loadedObject.name = currObjNode.textContent;\n            }\n          }\n        } else if (currObjNode.nodeName === 'color') {\n          currColor = loadColor(currObjNode);\n        } else if (currObjNode.nodeName === 'mesh') {\n          let currMeshNode = currObjNode.firstElementChild;\n          const mesh = {\n            vertices: [],\n            normals: [],\n            volumes: [],\n            color: currColor\n          };\n\n          while (currMeshNode) {\n            if (currMeshNode.nodeName === 'vertices') {\n              const loadedVertices = loadMeshVertices(currMeshNode);\n              mesh.normals = mesh.normals.concat(loadedVertices.normals);\n              mesh.vertices = mesh.vertices.concat(loadedVertices.vertices);\n            } else if (currMeshNode.nodeName === 'volume') {\n              mesh.volumes.push(loadMeshVolume(currMeshNode));\n            }\n\n            currMeshNode = currMeshNode.nextElementSibling;\n          }\n\n          loadedObject.meshes.push(mesh);\n        }\n\n        currObjNode = currObjNode.nextElementSibling;\n      }\n\n      return {\n        id: objId,\n        obj: loadedObject\n      };\n    }\n\n    const xmlData = loadDocument(data);\n    let amfName = '';\n    let amfAuthor = '';\n    const amfScale = loadDocumentScale(xmlData);\n    const amfMaterials = {};\n    const amfObjects = {};\n    const childNodes = xmlData.documentElement.childNodes;\n    let i, j;\n\n    for (i = 0; i < childNodes.length; i++) {\n      const child = childNodes[i];\n\n      if (child.nodeName === 'metadata') {\n        if (child.attributes.type !== undefined) {\n          if (child.attributes.type.value === 'name') {\n            amfName = child.textContent;\n          } else if (child.attributes.type.value === 'author') {\n            amfAuthor = child.textContent;\n          }\n        }\n      } else if (child.nodeName === 'material') {\n        const loadedMaterial = loadMaterials(child);\n        amfMaterials[loadedMaterial.id] = loadedMaterial.material;\n      } else if (child.nodeName === 'object') {\n        const loadedObject = loadObject(child);\n        amfObjects[loadedObject.id] = loadedObject.obj;\n      }\n    }\n\n    const sceneObject = new Group();\n    const defaultMaterial = new MeshPhongMaterial({\n      color: 0xaaaaff,\n      flatShading: true\n    });\n    sceneObject.name = amfName;\n    sceneObject.userData.author = amfAuthor;\n    sceneObject.userData.loader = 'AMF';\n\n    for (const id in amfObjects) {\n      const part = amfObjects[id];\n      const meshes = part.meshes;\n      const newObject = new Group();\n      newObject.name = part.name || '';\n\n      for (i = 0; i < meshes.length; i++) {\n        let objDefaultMaterial = defaultMaterial;\n        const mesh = meshes[i];\n        const vertices = new Float32BufferAttribute(mesh.vertices, 3);\n        let normals = null;\n\n        if (mesh.normals.length) {\n          normals = new Float32BufferAttribute(mesh.normals, 3);\n        }\n\n        if (mesh.color) {\n          const color = mesh.color;\n          objDefaultMaterial = defaultMaterial.clone();\n          objDefaultMaterial.color = new Color(color.r, color.g, color.b);\n\n          if (color.a !== 1.0) {\n            objDefaultMaterial.transparent = true;\n            objDefaultMaterial.opacity = color.a;\n          }\n        }\n\n        const volumes = mesh.volumes;\n\n        for (j = 0; j < volumes.length; j++) {\n          const volume = volumes[j];\n          const newGeometry = new BufferGeometry();\n          let material = objDefaultMaterial;\n          newGeometry.setIndex(volume.triangles);\n          newGeometry.setAttribute('position', vertices.clone());\n\n          if (normals) {\n            newGeometry.setAttribute('normal', normals.clone());\n          }\n\n          if (amfMaterials[volume.materialId] !== undefined) {\n            material = amfMaterials[volume.materialId];\n          }\n\n          newGeometry.scale(amfScale, amfScale, amfScale);\n          newObject.add(new Mesh(newGeometry, material.clone()));\n        }\n      }\n\n      sceneObject.add(newObject);\n    }\n\n    return sceneObject;\n  }\n\n}\n\nexport { AMFLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}