{"ast":null,"code":"/**\n * Gamma Correction Shader\n * http://en.wikipedia.org/wiki/gamma_correction\n */\nvar GammaCorrectionShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform sampler2D tDiffuse;', 'varying vec2 vUv;', 'void main() {', '\tvec4 tex = texture2D( tDiffuse, vUv );', '\tgl_FragColor = LinearTosRGB( tex );', '}'].join('\\n')\n};\nexport { GammaCorrectionShader };","map":{"version":3,"names":["GammaCorrectionShader","uniforms","tDiffuse","value","vertexShader","join","fragmentShader"],"sources":["D:/Jord/l4fycy/node_modules/three-stdlib/shaders/GammaCorrectionShader.js"],"sourcesContent":["/**\n * Gamma Correction Shader\n * http://en.wikipedia.org/wiki/gamma_correction\n */\nconst GammaCorrectionShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform sampler2D tDiffuse;', 'varying vec2 vUv;', 'void main() {', '\tvec4 tex = texture2D( tDiffuse, vUv );', '\tgl_FragColor = LinearTosRGB( tex );', '}'].join('\\n')\n};\n\nexport { GammaCorrectionShader };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,IAAMA,qBAAqB,GAAG;EAC5BC,QAAQ,EAAE;IACRC,QAAQ,EAAE;MACRC,KAAK,EAAE;IADC;EADF,CADkB;EAM5BC,YAAY,EAAE,CAAC,mBAAD,EAAsB,eAAtB,EAAuC,YAAvC,EAAqD,4EAArD,EAAmI,GAAnI,EAAwIC,IAAxI,CAA6I,IAA7I,CANc;EAO5BC,cAAc,EAAE,CAAC,6BAAD,EAAgC,mBAAhC,EAAqD,eAArD,EAAsE,yCAAtE,EAAiH,sCAAjH,EAAyJ,GAAzJ,EAA8JD,IAA9J,CAAmK,IAAnK;AAPY,CAA9B;AAUA,SAASL,qBAAT"},"metadata":{},"sourceType":"module"}