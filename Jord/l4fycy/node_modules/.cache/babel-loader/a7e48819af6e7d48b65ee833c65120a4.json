{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PerformanceTracer = void 0;\n\nvar has_1 = __importDefault(require(\"lodash/has\"));\n\nvar utils_1 = require(\"@chevrotain/utils\");\n\nvar parser_1 = require(\"../parser\");\n/**\r\n * Trait responsible for runtime parsing errors.\r\n */\n\n\nvar PerformanceTracer =\n/** @class */\nfunction () {\n  function PerformanceTracer() {}\n\n  PerformanceTracer.prototype.initPerformanceTracer = function (config) {\n    if ((0, has_1.default)(config, \"traceInitPerf\")) {\n      var userTraceInitPerf = config.traceInitPerf;\n      var traceIsNumber = typeof userTraceInitPerf === \"number\";\n      this.traceInitMaxIdent = traceIsNumber ? userTraceInitPerf : Infinity;\n      this.traceInitPerf = traceIsNumber ? userTraceInitPerf > 0 : userTraceInitPerf; // assumes end user provides the correct config value/type\n    } else {\n      this.traceInitMaxIdent = 0;\n      this.traceInitPerf = parser_1.DEFAULT_PARSER_CONFIG.traceInitPerf;\n    }\n\n    this.traceInitIndent = -1;\n  };\n\n  PerformanceTracer.prototype.TRACE_INIT = function (phaseDesc, phaseImpl) {\n    // No need to optimize this using NOOP pattern because\n    // It is not called in a hot spot...\n    if (this.traceInitPerf === true) {\n      this.traceInitIndent++;\n      var indent = new Array(this.traceInitIndent + 1).join(\"\\t\");\n\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        console.log(\"\".concat(indent, \"--> <\").concat(phaseDesc, \">\"));\n      }\n\n      var _a = (0, utils_1.timer)(phaseImpl),\n          time = _a.time,\n          value = _a.value;\n      /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\n\n\n      var traceMethod = time > 10 ? console.warn : console.log;\n\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        traceMethod(\"\".concat(indent, \"<-- <\").concat(phaseDesc, \"> time: \").concat(time, \"ms\"));\n      }\n\n      this.traceInitIndent--;\n      return value;\n    } else {\n      return phaseImpl();\n    }\n  };\n\n  return PerformanceTracer;\n}();\n\nexports.PerformanceTracer = PerformanceTracer;","map":{"version":3,"mappings":";;;;;;;;;;;;;AACA;;AACA;;AAEA;AAEA;;;;;AAGA;AAAA;AAAA;EAAA,8BA4CC;;EAvCCA,8DAAsBC,MAAtB,EAA2C;IACzC,IAAI,mBAAIA,MAAJ,EAAY,eAAZ,CAAJ,EAAkC;MAChC,IAAMC,iBAAiB,GAAGD,MAAM,CAACE,aAAjC;MACA,IAAMC,aAAa,GAAG,OAAOF,iBAAP,KAA6B,QAAnD;MACA,KAAKG,iBAAL,GAAyBD,aAAa,GAC1BF,iBAD0B,GAElCI,QAFJ;MAGA,KAAKH,aAAL,GAAqBC,aAAa,GAC9BF,iBAAiB,GAAG,CADU,GAE7BA,iBAFL,CANgC,CAQG;IACpC,CATD,MASO;MACL,KAAKG,iBAAL,GAAyB,CAAzB;MACA,KAAKF,aAAL,GAAqBI,+BAAsBJ,aAA3C;IACD;;IAED,KAAKK,eAAL,GAAuB,CAAC,CAAxB;EACD,CAhBD;;EAkBAR,mDAAmCS,SAAnC,EAAsDC,SAAtD,EAAwE;IACtE;IACA;IACA,IAAI,KAAKP,aAAL,KAAuB,IAA3B,EAAiC;MAC/B,KAAKK,eAAL;MACA,IAAMG,MAAM,GAAG,IAAIC,KAAJ,CAAU,KAAKJ,eAAL,GAAuB,CAAjC,EAAoCK,IAApC,CAAyC,IAAzC,CAAf;;MACA,IAAI,KAAKL,eAAL,GAAuB,KAAKH,iBAAhC,EAAmD;QACjDS,OAAO,CAACC,GAAR,CAAY,UAAGJ,MAAH,EAAS,OAAT,EAASK,MAAT,CAAiBP,SAAjB,EAA0B,GAA1B,CAAZ;MACD;;MACK,SAAkB,mBAAMC,SAAN,CAAlB;MAAA,IAAEO,IAAI,UAAN;MAAA,IAAQC,KAAK,WAAb;MACN;;;MACA,IAAMC,WAAW,GAAGF,IAAI,GAAG,EAAP,GAAYH,OAAO,CAACM,IAApB,GAA2BN,OAAO,CAACC,GAAvD;;MACA,IAAI,KAAKP,eAAL,GAAuB,KAAKH,iBAAhC,EAAmD;QACjDc,WAAW,CAAC,UAAGR,MAAH,EAAS,OAAT,EAASK,MAAT,CAAiBP,SAAjB,EAA0B,UAA1B,EAA0BO,MAA1B,CAAqCC,IAArC,EAAyC,IAAzC,CAAD,CAAX;MACD;;MACD,KAAKT,eAAL;MACA,OAAOU,KAAP;IACD,CAdD,MAcO;MACL,OAAOR,SAAS,EAAhB;IACD;EACF,CApBD;;EAqBF;AAAC,CA5CD;;AAAaW","names":["PerformanceTracer","config","userTraceInitPerf","traceInitPerf","traceIsNumber","traceInitMaxIdent","Infinity","parser_1","traceInitIndent","phaseDesc","phaseImpl","indent","Array","join","console","log","concat","time","value","traceMethod","warn","exports"],"sources":["D:\\Github\\NIKE-DJANGO\\Jord\\l4fycy\\node_modules\\chevrotain\\src\\parse\\parser\\traits\\perf_tracer.ts"],"sourcesContent":["import { IParserConfig } from \"@chevrotain/types\"\r\nimport has from \"lodash/has\"\r\nimport { timer } from \"@chevrotain/utils\"\r\nimport { MixedInParser } from \"./parser_traits\"\r\nimport { DEFAULT_PARSER_CONFIG } from \"../parser\"\r\n\r\n/**\r\n * Trait responsible for runtime parsing errors.\r\n */\r\nexport class PerformanceTracer {\r\n  traceInitPerf: boolean | number\r\n  traceInitMaxIdent: number\r\n  traceInitIndent: number\r\n\r\n  initPerformanceTracer(config: IParserConfig) {\r\n    if (has(config, \"traceInitPerf\")) {\r\n      const userTraceInitPerf = config.traceInitPerf\r\n      const traceIsNumber = typeof userTraceInitPerf === \"number\"\r\n      this.traceInitMaxIdent = traceIsNumber\r\n        ? <number>userTraceInitPerf\r\n        : Infinity\r\n      this.traceInitPerf = traceIsNumber\r\n        ? userTraceInitPerf > 0\r\n        : (userTraceInitPerf as boolean) // assumes end user provides the correct config value/type\r\n    } else {\r\n      this.traceInitMaxIdent = 0\r\n      this.traceInitPerf = DEFAULT_PARSER_CONFIG.traceInitPerf\r\n    }\r\n\r\n    this.traceInitIndent = -1\r\n  }\r\n\r\n  TRACE_INIT<T>(this: MixedInParser, phaseDesc: string, phaseImpl: () => T): T {\r\n    // No need to optimize this using NOOP pattern because\r\n    // It is not called in a hot spot...\r\n    if (this.traceInitPerf === true) {\r\n      this.traceInitIndent++\r\n      const indent = new Array(this.traceInitIndent + 1).join(\"\\t\")\r\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\r\n        console.log(`${indent}--> <${phaseDesc}>`)\r\n      }\r\n      const { time, value } = timer(phaseImpl)\r\n      /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\r\n      const traceMethod = time > 10 ? console.warn : console.log\r\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\r\n        traceMethod(`${indent}<-- <${phaseDesc}> time: ${time}ms`)\r\n      }\r\n      this.traceInitIndent--\r\n      return value\r\n    } else {\r\n      return phaseImpl()\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}