{"ast":null,"code":"import _createClass from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _assertThisInitialized from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Arnav/Downloads/l4fycy/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Mesh, Vector3, Color, FrontSide, Plane, Matrix4, Vector4, PerspectiveCamera, WebGLRenderTarget, UniformsUtils, UniformsLib, ShaderMaterial } from 'three';\n/**\n * Work based on :\n * https://github.com/Slayvin: Flat mirror for three.js\n * https://home.adelphi.edu/~stemkoski/ : An implementation of water shader based on the flat mirror\n * http://29a.ch/ && http://29a.ch/slides/2012/webglwater/ : Water shader explanations in WebGL\n */\n\nvar Water = /*#__PURE__*/function (_Mesh) {\n  _inherits(Water, _Mesh);\n\n  var _super = _createSuper(Water);\n\n  function Water(geometry) {\n    var _this;\n\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Water);\n\n    _this = _super.call(this, geometry);\n\n    var scope = _assertThisInitialized(_this);\n\n    var textureWidth = options.textureWidth !== undefined ? options.textureWidth : 512;\n    var textureHeight = options.textureHeight !== undefined ? options.textureHeight : 512;\n    var clipBias = options.clipBias !== undefined ? options.clipBias : 0.0;\n    var alpha = options.alpha !== undefined ? options.alpha : 1.0;\n    var time = options.time !== undefined ? options.time : 0.0;\n    var normalSampler = options.waterNormals !== undefined ? options.waterNormals : null;\n    var sunDirection = options.sunDirection !== undefined ? options.sunDirection : new Vector3(0.70707, 0.70707, 0.0);\n    var sunColor = new Color(options.sunColor !== undefined ? options.sunColor : 0xffffff);\n    var waterColor = new Color(options.waterColor !== undefined ? options.waterColor : 0x7f7f7f);\n    var eye = options.eye !== undefined ? options.eye : new Vector3(0, 0, 0);\n    var distortionScale = options.distortionScale !== undefined ? options.distortionScale : 20.0;\n    var side = options.side !== undefined ? options.side : FrontSide;\n    var fog = options.fog !== undefined ? options.fog : false; //\n\n    var mirrorPlane = new Plane();\n    var normal = new Vector3();\n    var mirrorWorldPosition = new Vector3();\n    var cameraWorldPosition = new Vector3();\n    var rotationMatrix = new Matrix4();\n    var lookAtPosition = new Vector3(0, 0, -1);\n    var clipPlane = new Vector4();\n    var view = new Vector3();\n    var target = new Vector3();\n    var q = new Vector4();\n    var textureMatrix = new Matrix4();\n    var mirrorCamera = new PerspectiveCamera();\n    var renderTarget = new WebGLRenderTarget(textureWidth, textureHeight);\n    var mirrorShader = {\n      uniforms: UniformsUtils.merge([UniformsLib['fog'], UniformsLib['lights'], {\n        normalSampler: {\n          value: null\n        },\n        mirrorSampler: {\n          value: null\n        },\n        alpha: {\n          value: 1.0\n        },\n        time: {\n          value: 0.0\n        },\n        size: {\n          value: 1.0\n        },\n        distortionScale: {\n          value: 20.0\n        },\n        textureMatrix: {\n          value: new Matrix4()\n        },\n        sunColor: {\n          value: new Color(0x7f7f7f)\n        },\n        sunDirection: {\n          value: new Vector3(0.70707, 0.70707, 0)\n        },\n        eye: {\n          value: new Vector3()\n        },\n        waterColor: {\n          value: new Color(0x555555)\n        }\n      }]),\n      vertexShader:\n      /* glsl */\n      \"\\n\\t\\t\\t\\tuniform mat4 textureMatrix;\\n\\t\\t\\t\\tuniform float time;\\n\\n\\t\\t\\t\\tvarying vec4 mirrorCoord;\\n\\t\\t\\t\\tvarying vec4 worldPosition;\\n\\n\\t\\t\\t\\t#include <common>\\n\\t\\t\\t\\t#include <fog_pars_vertex>\\n\\t\\t\\t\\t#include <shadowmap_pars_vertex>\\n\\t\\t\\t\\t#include <logdepthbuf_pars_vertex>\\n\\n\\t\\t\\t\\tvoid main() {\\n\\t\\t\\t\\t\\tmirrorCoord = modelMatrix * vec4( position, 1.0 );\\n\\t\\t\\t\\t\\tworldPosition = mirrorCoord.xyzw;\\n\\t\\t\\t\\t\\tmirrorCoord = textureMatrix * mirrorCoord;\\n\\t\\t\\t\\t\\tvec4 mvPosition =  modelViewMatrix * vec4( position, 1.0 );\\n\\t\\t\\t\\t\\tgl_Position = projectionMatrix * mvPosition;\\n\\n\\t\\t\\t\\t#include <beginnormal_vertex>\\n\\t\\t\\t\\t#include <defaultnormal_vertex>\\n\\t\\t\\t\\t#include <logdepthbuf_vertex>\\n\\t\\t\\t\\t#include <fog_vertex>\\n\\t\\t\\t\\t#include <shadowmap_vertex>\\n\\t\\t\\t}\",\n      fragmentShader:\n      /* glsl */\n      \"\\n\\t\\t\\t\\tuniform sampler2D mirrorSampler;\\n\\t\\t\\t\\tuniform float alpha;\\n\\t\\t\\t\\tuniform float time;\\n\\t\\t\\t\\tuniform float size;\\n\\t\\t\\t\\tuniform float distortionScale;\\n\\t\\t\\t\\tuniform sampler2D normalSampler;\\n\\t\\t\\t\\tuniform vec3 sunColor;\\n\\t\\t\\t\\tuniform vec3 sunDirection;\\n\\t\\t\\t\\tuniform vec3 eye;\\n\\t\\t\\t\\tuniform vec3 waterColor;\\n\\n\\t\\t\\t\\tvarying vec4 mirrorCoord;\\n\\t\\t\\t\\tvarying vec4 worldPosition;\\n\\n\\t\\t\\t\\tvec4 getNoise( vec2 uv ) {\\n\\t\\t\\t\\t\\tvec2 uv0 = ( uv / 103.0 ) + vec2(time / 17.0, time / 29.0);\\n\\t\\t\\t\\t\\tvec2 uv1 = uv / 107.0-vec2( time / -19.0, time / 31.0 );\\n\\t\\t\\t\\t\\tvec2 uv2 = uv / vec2( 8907.0, 9803.0 ) + vec2( time / 101.0, time / 97.0 );\\n\\t\\t\\t\\t\\tvec2 uv3 = uv / vec2( 1091.0, 1027.0 ) - vec2( time / 109.0, time / -113.0 );\\n\\t\\t\\t\\t\\tvec4 noise = texture2D( normalSampler, uv0 ) +\\n\\t\\t\\t\\t\\t\\ttexture2D( normalSampler, uv1 ) +\\n\\t\\t\\t\\t\\t\\ttexture2D( normalSampler, uv2 ) +\\n\\t\\t\\t\\t\\t\\ttexture2D( normalSampler, uv3 );\\n\\t\\t\\t\\t\\treturn noise * 0.5 - 1.0;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tvoid sunLight( const vec3 surfaceNormal, const vec3 eyeDirection, float shiny, float spec, float diffuse, inout vec3 diffuseColor, inout vec3 specularColor ) {\\n\\t\\t\\t\\t\\tvec3 reflection = normalize( reflect( -sunDirection, surfaceNormal ) );\\n\\t\\t\\t\\t\\tfloat direction = max( 0.0, dot( eyeDirection, reflection ) );\\n\\t\\t\\t\\t\\tspecularColor += pow( direction, shiny ) * sunColor * spec;\\n\\t\\t\\t\\t\\tdiffuseColor += max( dot( sunDirection, surfaceNormal ), 0.0 ) * sunColor * diffuse;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t#include <common>\\n\\t\\t\\t\\t#include <packing>\\n\\t\\t\\t\\t#include <bsdfs>\\n\\t\\t\\t\\t#include <fog_pars_fragment>\\n\\t\\t\\t\\t#include <logdepthbuf_pars_fragment>\\n\\t\\t\\t\\t#include <lights_pars_begin>\\n\\t\\t\\t\\t#include <shadowmap_pars_fragment>\\n\\t\\t\\t\\t#include <shadowmask_pars_fragment>\\n\\n\\t\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\t\\t#include <logdepthbuf_fragment>\\n\\t\\t\\t\\t\\tvec4 noise = getNoise( worldPosition.xz * size );\\n\\t\\t\\t\\t\\tvec3 surfaceNormal = normalize( noise.xzy * vec3( 1.5, 1.0, 1.5 ) );\\n\\n\\t\\t\\t\\t\\tvec3 diffuseLight = vec3(0.0);\\n\\t\\t\\t\\t\\tvec3 specularLight = vec3(0.0);\\n\\n\\t\\t\\t\\t\\tvec3 worldToEye = eye-worldPosition.xyz;\\n\\t\\t\\t\\t\\tvec3 eyeDirection = normalize( worldToEye );\\n\\t\\t\\t\\t\\tsunLight( surfaceNormal, eyeDirection, 100.0, 2.0, 0.5, diffuseLight, specularLight );\\n\\n\\t\\t\\t\\t\\tfloat distance = length(worldToEye);\\n\\n\\t\\t\\t\\t\\tvec2 distortion = surfaceNormal.xz * ( 0.001 + 1.0 / distance ) * distortionScale;\\n\\t\\t\\t\\t\\tvec3 reflectionSample = vec3( texture2D( mirrorSampler, mirrorCoord.xy / mirrorCoord.w + distortion ) );\\n\\n\\t\\t\\t\\t\\tfloat theta = max( dot( eyeDirection, surfaceNormal ), 0.0 );\\n\\t\\t\\t\\t\\tfloat rf0 = 0.3;\\n\\t\\t\\t\\t\\tfloat reflectance = rf0 + ( 1.0 - rf0 ) * pow( ( 1.0 - theta ), 5.0 );\\n\\t\\t\\t\\t\\tvec3 scatter = max( 0.0, dot( surfaceNormal, eyeDirection ) ) * waterColor;\\n\\t\\t\\t\\t\\tvec3 albedo = mix( ( sunColor * diffuseLight * 0.3 + scatter ) * getShadowMask(), ( vec3( 0.1 ) + reflectionSample * 0.9 + reflectionSample * specularLight ), reflectance);\\n\\t\\t\\t\\t\\tvec3 outgoingLight = albedo;\\n\\t\\t\\t\\t\\tgl_FragColor = vec4( outgoingLight, alpha );\\n\\n\\t\\t\\t\\t\\t#include <tonemapping_fragment>\\n\\t\\t\\t\\t\\t#include <fog_fragment>\\n\\t\\t\\t\\t}\"\n    };\n    var material = new ShaderMaterial({\n      fragmentShader: mirrorShader.fragmentShader,\n      vertexShader: mirrorShader.vertexShader,\n      uniforms: UniformsUtils.clone(mirrorShader.uniforms),\n      lights: true,\n      side: side,\n      fog: fog\n    });\n    material.uniforms['mirrorSampler'].value = renderTarget.texture;\n    material.uniforms['textureMatrix'].value = textureMatrix;\n    material.uniforms['alpha'].value = alpha;\n    material.uniforms['time'].value = time;\n    material.uniforms['normalSampler'].value = normalSampler;\n    material.uniforms['sunColor'].value = sunColor;\n    material.uniforms['waterColor'].value = waterColor;\n    material.uniforms['sunDirection'].value = sunDirection;\n    material.uniforms['distortionScale'].value = distortionScale;\n    material.uniforms['eye'].value = eye;\n    scope.material = material;\n\n    scope.onBeforeRender = function (renderer, scene, camera) {\n      mirrorWorldPosition.setFromMatrixPosition(scope.matrixWorld);\n      cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);\n      rotationMatrix.extractRotation(scope.matrixWorld);\n      normal.set(0, 0, 1);\n      normal.applyMatrix4(rotationMatrix);\n      view.subVectors(mirrorWorldPosition, cameraWorldPosition); // Avoid rendering when mirror is facing away\n\n      if (view.dot(normal) > 0) return;\n      view.reflect(normal).negate();\n      view.add(mirrorWorldPosition);\n      rotationMatrix.extractRotation(camera.matrixWorld);\n      lookAtPosition.set(0, 0, -1);\n      lookAtPosition.applyMatrix4(rotationMatrix);\n      lookAtPosition.add(cameraWorldPosition);\n      target.subVectors(mirrorWorldPosition, lookAtPosition);\n      target.reflect(normal).negate();\n      target.add(mirrorWorldPosition);\n      mirrorCamera.position.copy(view);\n      mirrorCamera.up.set(0, 1, 0);\n      mirrorCamera.up.applyMatrix4(rotationMatrix);\n      mirrorCamera.up.reflect(normal);\n      mirrorCamera.lookAt(target);\n      mirrorCamera.far = camera.far; // Used in WebGLBackground\n\n      mirrorCamera.updateMatrixWorld();\n      mirrorCamera.projectionMatrix.copy(camera.projectionMatrix); // Update the texture matrix\n\n      textureMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n      textureMatrix.multiply(mirrorCamera.projectionMatrix);\n      textureMatrix.multiply(mirrorCamera.matrixWorldInverse); // Now update projection matrix with new clip plane, implementing code from: http://www.terathon.com/code/oblique.html\n      // Paper explaining this technique: http://www.terathon.com/lengyel/Lengyel-Oblique.pdf\n\n      mirrorPlane.setFromNormalAndCoplanarPoint(normal, mirrorWorldPosition);\n      mirrorPlane.applyMatrix4(mirrorCamera.matrixWorldInverse);\n      clipPlane.set(mirrorPlane.normal.x, mirrorPlane.normal.y, mirrorPlane.normal.z, mirrorPlane.constant);\n      var projectionMatrix = mirrorCamera.projectionMatrix;\n      q.x = (Math.sign(clipPlane.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];\n      q.y = (Math.sign(clipPlane.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];\n      q.z = -1.0;\n      q.w = (1.0 + projectionMatrix.elements[10]) / projectionMatrix.elements[14]; // Calculate the scaled plane vector\n\n      clipPlane.multiplyScalar(2.0 / clipPlane.dot(q)); // Replacing the third row of the projection matrix\n\n      projectionMatrix.elements[2] = clipPlane.x;\n      projectionMatrix.elements[6] = clipPlane.y;\n      projectionMatrix.elements[10] = clipPlane.z + 1.0 - clipBias;\n      projectionMatrix.elements[14] = clipPlane.w;\n      eye.setFromMatrixPosition(camera.matrixWorld); // Render\n\n      var currentRenderTarget = renderer.getRenderTarget();\n      var currentXrEnabled = renderer.xr.enabled;\n      var currentShadowAutoUpdate = renderer.shadowMap.autoUpdate;\n      scope.visible = false;\n      renderer.xr.enabled = false; // Avoid camera modification and recursion\n\n      renderer.shadowMap.autoUpdate = false; // Avoid re-computing shadows\n\n      renderer.setRenderTarget(renderTarget);\n      renderer.state.buffers.depth.setMask(true); // make sure the depth buffer is writable so it can be properly cleared, see #18897\n\n      if (renderer.autoClear === false) renderer.clear();\n      renderer.render(scene, mirrorCamera);\n      scope.visible = true;\n      renderer.xr.enabled = currentXrEnabled;\n      renderer.shadowMap.autoUpdate = currentShadowAutoUpdate;\n      renderer.setRenderTarget(currentRenderTarget); // Restore viewport\n\n      var viewport = camera.viewport;\n\n      if (viewport !== undefined) {\n        renderer.state.viewport(viewport);\n      }\n    };\n\n    return _this;\n  }\n\n  return _createClass(Water);\n}(Mesh);\n\nWater.prototype.isWater = true;\nexport { Water };","map":{"version":3,"names":["Mesh","Vector3","Color","FrontSide","Plane","Matrix4","Vector4","PerspectiveCamera","WebGLRenderTarget","UniformsUtils","UniformsLib","ShaderMaterial","Water","geometry","options","scope","textureWidth","undefined","textureHeight","clipBias","alpha","time","normalSampler","waterNormals","sunDirection","sunColor","waterColor","eye","distortionScale","side","fog","mirrorPlane","normal","mirrorWorldPosition","cameraWorldPosition","rotationMatrix","lookAtPosition","clipPlane","view","target","q","textureMatrix","mirrorCamera","renderTarget","mirrorShader","uniforms","merge","value","mirrorSampler","size","vertexShader","fragmentShader","material","clone","lights","texture","onBeforeRender","renderer","scene","camera","setFromMatrixPosition","matrixWorld","extractRotation","set","applyMatrix4","subVectors","dot","reflect","negate","add","position","copy","up","lookAt","far","updateMatrixWorld","projectionMatrix","multiply","matrixWorldInverse","setFromNormalAndCoplanarPoint","x","y","z","constant","Math","sign","elements","w","multiplyScalar","currentRenderTarget","getRenderTarget","currentXrEnabled","xr","enabled","currentShadowAutoUpdate","shadowMap","autoUpdate","visible","setRenderTarget","state","buffers","depth","setMask","autoClear","clear","render","viewport","prototype","isWater"],"sources":["C:/Users/Arnav/Downloads/l4fycy/node_modules/three-stdlib/objects/Water.js"],"sourcesContent":["import { Mesh, Vector3, Color, FrontSide, Plane, Matrix4, Vector4, PerspectiveCamera, WebGLRenderTarget, UniformsUtils, UniformsLib, ShaderMaterial } from 'three';\n\n/**\n * Work based on :\n * https://github.com/Slayvin: Flat mirror for three.js\n * https://home.adelphi.edu/~stemkoski/ : An implementation of water shader based on the flat mirror\n * http://29a.ch/ && http://29a.ch/slides/2012/webglwater/ : Water shader explanations in WebGL\n */\n\nclass Water extends Mesh {\n  constructor(geometry, options = {}) {\n    super(geometry);\n    const scope = this;\n    const textureWidth = options.textureWidth !== undefined ? options.textureWidth : 512;\n    const textureHeight = options.textureHeight !== undefined ? options.textureHeight : 512;\n    const clipBias = options.clipBias !== undefined ? options.clipBias : 0.0;\n    const alpha = options.alpha !== undefined ? options.alpha : 1.0;\n    const time = options.time !== undefined ? options.time : 0.0;\n    const normalSampler = options.waterNormals !== undefined ? options.waterNormals : null;\n    const sunDirection = options.sunDirection !== undefined ? options.sunDirection : new Vector3(0.70707, 0.70707, 0.0);\n    const sunColor = new Color(options.sunColor !== undefined ? options.sunColor : 0xffffff);\n    const waterColor = new Color(options.waterColor !== undefined ? options.waterColor : 0x7f7f7f);\n    const eye = options.eye !== undefined ? options.eye : new Vector3(0, 0, 0);\n    const distortionScale = options.distortionScale !== undefined ? options.distortionScale : 20.0;\n    const side = options.side !== undefined ? options.side : FrontSide;\n    const fog = options.fog !== undefined ? options.fog : false; //\n\n    const mirrorPlane = new Plane();\n    const normal = new Vector3();\n    const mirrorWorldPosition = new Vector3();\n    const cameraWorldPosition = new Vector3();\n    const rotationMatrix = new Matrix4();\n    const lookAtPosition = new Vector3(0, 0, -1);\n    const clipPlane = new Vector4();\n    const view = new Vector3();\n    const target = new Vector3();\n    const q = new Vector4();\n    const textureMatrix = new Matrix4();\n    const mirrorCamera = new PerspectiveCamera();\n    const renderTarget = new WebGLRenderTarget(textureWidth, textureHeight);\n    const mirrorShader = {\n      uniforms: UniformsUtils.merge([UniformsLib['fog'], UniformsLib['lights'], {\n        normalSampler: {\n          value: null\n        },\n        mirrorSampler: {\n          value: null\n        },\n        alpha: {\n          value: 1.0\n        },\n        time: {\n          value: 0.0\n        },\n        size: {\n          value: 1.0\n        },\n        distortionScale: {\n          value: 20.0\n        },\n        textureMatrix: {\n          value: new Matrix4()\n        },\n        sunColor: {\n          value: new Color(0x7f7f7f)\n        },\n        sunDirection: {\n          value: new Vector3(0.70707, 0.70707, 0)\n        },\n        eye: {\n          value: new Vector3()\n        },\n        waterColor: {\n          value: new Color(0x555555)\n        }\n      }]),\n      vertexShader:\n      /* glsl */\n      `\n\t\t\t\tuniform mat4 textureMatrix;\n\t\t\t\tuniform float time;\n\n\t\t\t\tvarying vec4 mirrorCoord;\n\t\t\t\tvarying vec4 worldPosition;\n\n\t\t\t\t#include <common>\n\t\t\t\t#include <fog_pars_vertex>\n\t\t\t\t#include <shadowmap_pars_vertex>\n\t\t\t\t#include <logdepthbuf_pars_vertex>\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tmirrorCoord = modelMatrix * vec4( position, 1.0 );\n\t\t\t\t\tworldPosition = mirrorCoord.xyzw;\n\t\t\t\t\tmirrorCoord = textureMatrix * mirrorCoord;\n\t\t\t\t\tvec4 mvPosition =  modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t\tgl_Position = projectionMatrix * mvPosition;\n\n\t\t\t\t#include <beginnormal_vertex>\n\t\t\t\t#include <defaultnormal_vertex>\n\t\t\t\t#include <logdepthbuf_vertex>\n\t\t\t\t#include <fog_vertex>\n\t\t\t\t#include <shadowmap_vertex>\n\t\t\t}`,\n      fragmentShader:\n      /* glsl */\n      `\n\t\t\t\tuniform sampler2D mirrorSampler;\n\t\t\t\tuniform float alpha;\n\t\t\t\tuniform float time;\n\t\t\t\tuniform float size;\n\t\t\t\tuniform float distortionScale;\n\t\t\t\tuniform sampler2D normalSampler;\n\t\t\t\tuniform vec3 sunColor;\n\t\t\t\tuniform vec3 sunDirection;\n\t\t\t\tuniform vec3 eye;\n\t\t\t\tuniform vec3 waterColor;\n\n\t\t\t\tvarying vec4 mirrorCoord;\n\t\t\t\tvarying vec4 worldPosition;\n\n\t\t\t\tvec4 getNoise( vec2 uv ) {\n\t\t\t\t\tvec2 uv0 = ( uv / 103.0 ) + vec2(time / 17.0, time / 29.0);\n\t\t\t\t\tvec2 uv1 = uv / 107.0-vec2( time / -19.0, time / 31.0 );\n\t\t\t\t\tvec2 uv2 = uv / vec2( 8907.0, 9803.0 ) + vec2( time / 101.0, time / 97.0 );\n\t\t\t\t\tvec2 uv3 = uv / vec2( 1091.0, 1027.0 ) - vec2( time / 109.0, time / -113.0 );\n\t\t\t\t\tvec4 noise = texture2D( normalSampler, uv0 ) +\n\t\t\t\t\t\ttexture2D( normalSampler, uv1 ) +\n\t\t\t\t\t\ttexture2D( normalSampler, uv2 ) +\n\t\t\t\t\t\ttexture2D( normalSampler, uv3 );\n\t\t\t\t\treturn noise * 0.5 - 1.0;\n\t\t\t\t}\n\n\t\t\t\tvoid sunLight( const vec3 surfaceNormal, const vec3 eyeDirection, float shiny, float spec, float diffuse, inout vec3 diffuseColor, inout vec3 specularColor ) {\n\t\t\t\t\tvec3 reflection = normalize( reflect( -sunDirection, surfaceNormal ) );\n\t\t\t\t\tfloat direction = max( 0.0, dot( eyeDirection, reflection ) );\n\t\t\t\t\tspecularColor += pow( direction, shiny ) * sunColor * spec;\n\t\t\t\t\tdiffuseColor += max( dot( sunDirection, surfaceNormal ), 0.0 ) * sunColor * diffuse;\n\t\t\t\t}\n\n\t\t\t\t#include <common>\n\t\t\t\t#include <packing>\n\t\t\t\t#include <bsdfs>\n\t\t\t\t#include <fog_pars_fragment>\n\t\t\t\t#include <logdepthbuf_pars_fragment>\n\t\t\t\t#include <lights_pars_begin>\n\t\t\t\t#include <shadowmap_pars_fragment>\n\t\t\t\t#include <shadowmask_pars_fragment>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\t#include <logdepthbuf_fragment>\n\t\t\t\t\tvec4 noise = getNoise( worldPosition.xz * size );\n\t\t\t\t\tvec3 surfaceNormal = normalize( noise.xzy * vec3( 1.5, 1.0, 1.5 ) );\n\n\t\t\t\t\tvec3 diffuseLight = vec3(0.0);\n\t\t\t\t\tvec3 specularLight = vec3(0.0);\n\n\t\t\t\t\tvec3 worldToEye = eye-worldPosition.xyz;\n\t\t\t\t\tvec3 eyeDirection = normalize( worldToEye );\n\t\t\t\t\tsunLight( surfaceNormal, eyeDirection, 100.0, 2.0, 0.5, diffuseLight, specularLight );\n\n\t\t\t\t\tfloat distance = length(worldToEye);\n\n\t\t\t\t\tvec2 distortion = surfaceNormal.xz * ( 0.001 + 1.0 / distance ) * distortionScale;\n\t\t\t\t\tvec3 reflectionSample = vec3( texture2D( mirrorSampler, mirrorCoord.xy / mirrorCoord.w + distortion ) );\n\n\t\t\t\t\tfloat theta = max( dot( eyeDirection, surfaceNormal ), 0.0 );\n\t\t\t\t\tfloat rf0 = 0.3;\n\t\t\t\t\tfloat reflectance = rf0 + ( 1.0 - rf0 ) * pow( ( 1.0 - theta ), 5.0 );\n\t\t\t\t\tvec3 scatter = max( 0.0, dot( surfaceNormal, eyeDirection ) ) * waterColor;\n\t\t\t\t\tvec3 albedo = mix( ( sunColor * diffuseLight * 0.3 + scatter ) * getShadowMask(), ( vec3( 0.1 ) + reflectionSample * 0.9 + reflectionSample * specularLight ), reflectance);\n\t\t\t\t\tvec3 outgoingLight = albedo;\n\t\t\t\t\tgl_FragColor = vec4( outgoingLight, alpha );\n\n\t\t\t\t\t#include <tonemapping_fragment>\n\t\t\t\t\t#include <fog_fragment>\n\t\t\t\t}`\n    };\n    const material = new ShaderMaterial({\n      fragmentShader: mirrorShader.fragmentShader,\n      vertexShader: mirrorShader.vertexShader,\n      uniforms: UniformsUtils.clone(mirrorShader.uniforms),\n      lights: true,\n      side: side,\n      fog: fog\n    });\n    material.uniforms['mirrorSampler'].value = renderTarget.texture;\n    material.uniforms['textureMatrix'].value = textureMatrix;\n    material.uniforms['alpha'].value = alpha;\n    material.uniforms['time'].value = time;\n    material.uniforms['normalSampler'].value = normalSampler;\n    material.uniforms['sunColor'].value = sunColor;\n    material.uniforms['waterColor'].value = waterColor;\n    material.uniforms['sunDirection'].value = sunDirection;\n    material.uniforms['distortionScale'].value = distortionScale;\n    material.uniforms['eye'].value = eye;\n    scope.material = material;\n\n    scope.onBeforeRender = function (renderer, scene, camera) {\n      mirrorWorldPosition.setFromMatrixPosition(scope.matrixWorld);\n      cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);\n      rotationMatrix.extractRotation(scope.matrixWorld);\n      normal.set(0, 0, 1);\n      normal.applyMatrix4(rotationMatrix);\n      view.subVectors(mirrorWorldPosition, cameraWorldPosition); // Avoid rendering when mirror is facing away\n\n      if (view.dot(normal) > 0) return;\n      view.reflect(normal).negate();\n      view.add(mirrorWorldPosition);\n      rotationMatrix.extractRotation(camera.matrixWorld);\n      lookAtPosition.set(0, 0, -1);\n      lookAtPosition.applyMatrix4(rotationMatrix);\n      lookAtPosition.add(cameraWorldPosition);\n      target.subVectors(mirrorWorldPosition, lookAtPosition);\n      target.reflect(normal).negate();\n      target.add(mirrorWorldPosition);\n      mirrorCamera.position.copy(view);\n      mirrorCamera.up.set(0, 1, 0);\n      mirrorCamera.up.applyMatrix4(rotationMatrix);\n      mirrorCamera.up.reflect(normal);\n      mirrorCamera.lookAt(target);\n      mirrorCamera.far = camera.far; // Used in WebGLBackground\n\n      mirrorCamera.updateMatrixWorld();\n      mirrorCamera.projectionMatrix.copy(camera.projectionMatrix); // Update the texture matrix\n\n      textureMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n      textureMatrix.multiply(mirrorCamera.projectionMatrix);\n      textureMatrix.multiply(mirrorCamera.matrixWorldInverse); // Now update projection matrix with new clip plane, implementing code from: http://www.terathon.com/code/oblique.html\n      // Paper explaining this technique: http://www.terathon.com/lengyel/Lengyel-Oblique.pdf\n\n      mirrorPlane.setFromNormalAndCoplanarPoint(normal, mirrorWorldPosition);\n      mirrorPlane.applyMatrix4(mirrorCamera.matrixWorldInverse);\n      clipPlane.set(mirrorPlane.normal.x, mirrorPlane.normal.y, mirrorPlane.normal.z, mirrorPlane.constant);\n      const projectionMatrix = mirrorCamera.projectionMatrix;\n      q.x = (Math.sign(clipPlane.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];\n      q.y = (Math.sign(clipPlane.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];\n      q.z = -1.0;\n      q.w = (1.0 + projectionMatrix.elements[10]) / projectionMatrix.elements[14]; // Calculate the scaled plane vector\n\n      clipPlane.multiplyScalar(2.0 / clipPlane.dot(q)); // Replacing the third row of the projection matrix\n\n      projectionMatrix.elements[2] = clipPlane.x;\n      projectionMatrix.elements[6] = clipPlane.y;\n      projectionMatrix.elements[10] = clipPlane.z + 1.0 - clipBias;\n      projectionMatrix.elements[14] = clipPlane.w;\n      eye.setFromMatrixPosition(camera.matrixWorld); // Render\n\n      const currentRenderTarget = renderer.getRenderTarget();\n      const currentXrEnabled = renderer.xr.enabled;\n      const currentShadowAutoUpdate = renderer.shadowMap.autoUpdate;\n      scope.visible = false;\n      renderer.xr.enabled = false; // Avoid camera modification and recursion\n\n      renderer.shadowMap.autoUpdate = false; // Avoid re-computing shadows\n\n      renderer.setRenderTarget(renderTarget);\n      renderer.state.buffers.depth.setMask(true); // make sure the depth buffer is writable so it can be properly cleared, see #18897\n\n      if (renderer.autoClear === false) renderer.clear();\n      renderer.render(scene, mirrorCamera);\n      scope.visible = true;\n      renderer.xr.enabled = currentXrEnabled;\n      renderer.shadowMap.autoUpdate = currentShadowAutoUpdate;\n      renderer.setRenderTarget(currentRenderTarget); // Restore viewport\n\n      const viewport = camera.viewport;\n\n      if (viewport !== undefined) {\n        renderer.state.viewport(viewport);\n      }\n    };\n  }\n\n}\n\nWater.prototype.isWater = true;\n\nexport { Water };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}