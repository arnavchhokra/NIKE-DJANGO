{"ast":null,"code":"'use client';\n\n// src/use-merge-refs.ts\nimport { useMemo } from \"react\";\nfunction assignRef(ref, value) {\n  if (ref == null) return;\n  if (typeof ref === \"function\") {\n    ref(value);\n    return;\n  }\n  try {\n    ref.current = value;\n  } catch (error) {\n    throw new Error(\"Cannot assign value '\".concat(value, \"' to ref '\").concat(ref, \"'\"));\n  }\n}\nfunction useMergeRefs() {\n  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {\n    refs[_key] = arguments[_key];\n  }\n  return useMemo(() => {\n    if (refs.every(ref => ref == null)) {\n      return null;\n    }\n    return node => {\n      refs.forEach(ref => {\n        if (ref) assignRef(ref, node);\n      });\n    };\n  }, refs);\n}\nexport { assignRef, useMergeRefs };","map":{"version":3,"names":["useMemo","assignRef","ref","value","current","error","Error","concat","useMergeRefs","_len","arguments","length","refs","Array","_key","every","node","forEach"],"sources":["D:\\Repos\\NIKE-DJANGO\\Jord\\l4fycy\\node_modules\\@chakra-ui\\hooks\\src\\use-merge-refs.ts"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\n\nimport { useMemo } from \"react\"\n\ntype ReactRef<T> = React.Ref<T> | React.MutableRefObject<T>\n\nexport function assignRef<T = any>(ref: ReactRef<T> | undefined, value: T) {\n  if (ref == null) return\n\n  if (typeof ref === \"function\") {\n    ref(value)\n    return\n  }\n\n  try {\n    // @ts-ignore\n    ref.current = value\n  } catch (error) {\n    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`)\n  }\n}\n\n/**\n * React hook that merges react refs into a single memoized function\n *\n * @example\n * import React from \"react\";\n * import { useMergeRefs } from `@chakra-ui/hooks`;\n *\n * const Component = React.forwardRef((props, ref) => {\n *   const internalRef = React.useRef();\n *   return <div {...props} ref={useMergeRefs(internalRef, ref)} />;\n * });\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-merge-refs\n */\nexport function useMergeRefs<T>(...refs: (ReactRef<T> | undefined)[]) {\n  return useMemo(() => {\n    if (refs.every((ref) => ref == null)) {\n      return null\n    }\n    return (node: T) => {\n      refs.forEach((ref) => {\n        if (ref) assignRef(ref, node)\n      })\n    }\n  }, refs)\n}\n"],"mappings":";;;AAEA,SAASA,OAAA,QAAe;AAIjB,SAASC,UAAmBC,GAAA,EAA8BC,KAAA,EAAU;EACzE,IAAID,GAAA,IAAO,MAAM;EAEjB,IAAI,OAAOA,GAAA,KAAQ,YAAY;IAC7BA,GAAA,CAAIC,KAAK;IACT;EACF;EAEA,IAAI;IAEFD,GAAA,CAAIE,OAAA,GAAUD,KAAA;EAChB,SAASE,KAAA,EAAO;IACd,MAAM,IAAIC,KAAA,yBAAAC,MAAA,CAA8BJ,KAAK,gBAAAI,MAAA,CAAaL,GAAG,MAAG;EAClE;AACF;AAgBO,SAASM,aAAA,EAAsD;EAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAAnCC,IAAA,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;IAAAF,IAAA,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;EAAA;EACjC,OAAOd,OAAA,CAAQ,MAAM;IACnB,IAAIY,IAAA,CAAKG,KAAA,CAAOb,GAAA,IAAQA,GAAA,IAAO,IAAI,GAAG;MACpC,OAAO;IACT;IACA,OAAQc,IAAA,IAAY;MAClBJ,IAAA,CAAKK,OAAA,CAASf,GAAA,IAAQ;QACpB,IAAIA,GAAA,EAAKD,SAAA,CAAUC,GAAA,EAAKc,IAAI;MAC9B,CAAC;IACH;EACF,GAAGJ,IAAI;AACT"},"metadata":{},"sourceType":"module","externalDependencies":[]}