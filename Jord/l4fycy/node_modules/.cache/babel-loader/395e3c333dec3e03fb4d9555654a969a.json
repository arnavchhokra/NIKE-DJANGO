{"ast":null,"code":"import _classCallCheck from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Loader, FileLoader, Vector3, DataTexture, UnsignedByteType, LinearFilter, ClampToEdgeWrapping, DataTexture3D } from 'three'; // https://wwwimages2.adobe.com/content/dam/acom/en/products/speedgrade/cc/pdfs/cube-lut-specification-1.0.pdf\n\nvar LUTCubeLoader = /*#__PURE__*/function (_Loader) {\n  _inherits(LUTCubeLoader, _Loader);\n\n  var _super = _createSuper(LUTCubeLoader);\n\n  function LUTCubeLoader() {\n    _classCallCheck(this, LUTCubeLoader);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(LUTCubeLoader, [{\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var _this = this;\n\n      var loader = new FileLoader(this.manager);\n      loader.setPath(this.path);\n      loader.setResponseType('text');\n      loader.load(url, function (text) {\n        try {\n          onLoad(_this.parse(text));\n        } catch (e) {\n          if (onError) {\n            onError(e);\n          } else {\n            console.error(e);\n          }\n\n          _this.manager.itemError(url);\n        }\n      }, onProgress, onError);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(str) {\n      // Remove empty lines and comments\n      str = str.replace(/^#.*?(\\n|\\r)/gm, '').replace(/^\\s*?(\\n|\\r)/gm, '').trim();\n      var title = null;\n      var size = null;\n      var domainMin = new Vector3(0, 0, 0);\n      var domainMax = new Vector3(1, 1, 1);\n      var lines = str.split(/[\\n\\r]+/g);\n      var data = null;\n      var currIndex = 0;\n\n      for (var i = 0, l = lines.length; i < l; i++) {\n        var line = lines[i].trim();\n        var split = line.split(/\\s/g);\n\n        switch (split[0]) {\n          case 'TITLE':\n            title = line.substring(7, line.length - 1);\n            break;\n\n          case 'LUT_3D_SIZE':\n            // TODO: A .CUBE LUT file specifies floating point values and could be represented with\n            // more precision than can be captured with Uint8Array.\n            var sizeToken = split[1];\n            size = parseFloat(sizeToken);\n            data = new Uint8Array(size * size * size * 4);\n            break;\n\n          case 'DOMAIN_MIN':\n            domainMin.x = parseFloat(split[1]);\n            domainMin.y = parseFloat(split[2]);\n            domainMin.z = parseFloat(split[3]);\n            break;\n\n          case 'DOMAIN_MAX':\n            domainMax.x = parseFloat(split[1]);\n            domainMax.y = parseFloat(split[2]);\n            domainMax.z = parseFloat(split[3]);\n            break;\n\n          default:\n            var r = parseFloat(split[0]);\n            var g = parseFloat(split[1]);\n            var b = parseFloat(split[2]);\n\n            if (r > 1.0 || r < 0.0 || g > 1.0 || g < 0.0 || b > 1.0 || b < 0.0) {\n              throw new Error('LUTCubeLoader : Non normalized values not supported.');\n            }\n\n            data[currIndex + 0] = r * 255;\n            data[currIndex + 1] = g * 255;\n            data[currIndex + 2] = b * 255;\n            data[currIndex + 3] = 255;\n            currIndex += 4;\n        }\n      }\n\n      var texture = new DataTexture();\n      texture.image.data = data;\n      texture.image.width = size;\n      texture.image.height = size * size;\n      texture.type = UnsignedByteType;\n      texture.magFilter = LinearFilter;\n      texture.minFilter = LinearFilter;\n      texture.wrapS = ClampToEdgeWrapping;\n      texture.wrapT = ClampToEdgeWrapping;\n      texture.generateMipmaps = false;\n      var texture3D = new DataTexture3D();\n      texture3D.image.data = data;\n      texture3D.image.width = size;\n      texture3D.image.height = size;\n      texture3D.image.depth = size;\n      texture3D.type = UnsignedByteType;\n      texture3D.magFilter = LinearFilter;\n      texture3D.minFilter = LinearFilter;\n      texture3D.wrapS = ClampToEdgeWrapping;\n      texture3D.wrapT = ClampToEdgeWrapping;\n      texture3D.wrapR = ClampToEdgeWrapping;\n      texture3D.generateMipmaps = false;\n      return {\n        title: title,\n        size: size,\n        domainMin: domainMin,\n        domainMax: domainMax,\n        texture: texture,\n        texture3D: texture3D\n      };\n    }\n  }]);\n\n  return LUTCubeLoader;\n}(Loader);\n\nexport { LUTCubeLoader };","map":{"version":3,"names":["Loader","FileLoader","Vector3","DataTexture","UnsignedByteType","LinearFilter","ClampToEdgeWrapping","DataTexture3D","LUTCubeLoader","url","onLoad","onProgress","onError","loader","manager","setPath","path","setResponseType","load","text","parse","e","console","error","itemError","str","replace","trim","title","size","domainMin","domainMax","lines","split","data","currIndex","i","l","length","line","substring","sizeToken","parseFloat","Uint8Array","x","y","z","r","g","b","Error","texture","image","width","height","type","magFilter","minFilter","wrapS","wrapT","generateMipmaps","texture3D","depth","wrapR"],"sources":["D:/Jord/l4fycy/node_modules/three-stdlib/loaders/LUTCubeLoader.js"],"sourcesContent":["import { Loader, FileLoader, Vector3, DataTexture, UnsignedByteType, LinearFilter, ClampToEdgeWrapping, DataTexture3D } from 'three';\n\n// https://wwwimages2.adobe.com/content/dam/acom/en/products/speedgrade/cc/pdfs/cube-lut-specification-1.0.pdf\nclass LUTCubeLoader extends Loader {\n  load(url, onLoad, onProgress, onError) {\n    const loader = new FileLoader(this.manager);\n    loader.setPath(this.path);\n    loader.setResponseType('text');\n    loader.load(url, text => {\n      try {\n        onLoad(this.parse(text));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        this.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(str) {\n    // Remove empty lines and comments\n    str = str.replace(/^#.*?(\\n|\\r)/gm, '').replace(/^\\s*?(\\n|\\r)/gm, '').trim();\n    let title = null;\n    let size = null;\n    const domainMin = new Vector3(0, 0, 0);\n    const domainMax = new Vector3(1, 1, 1);\n    const lines = str.split(/[\\n\\r]+/g);\n    let data = null;\n    let currIndex = 0;\n\n    for (let i = 0, l = lines.length; i < l; i++) {\n      const line = lines[i].trim();\n      const split = line.split(/\\s/g);\n\n      switch (split[0]) {\n        case 'TITLE':\n          title = line.substring(7, line.length - 1);\n          break;\n\n        case 'LUT_3D_SIZE':\n          // TODO: A .CUBE LUT file specifies floating point values and could be represented with\n          // more precision than can be captured with Uint8Array.\n          const sizeToken = split[1];\n          size = parseFloat(sizeToken);\n          data = new Uint8Array(size * size * size * 4);\n          break;\n\n        case 'DOMAIN_MIN':\n          domainMin.x = parseFloat(split[1]);\n          domainMin.y = parseFloat(split[2]);\n          domainMin.z = parseFloat(split[3]);\n          break;\n\n        case 'DOMAIN_MAX':\n          domainMax.x = parseFloat(split[1]);\n          domainMax.y = parseFloat(split[2]);\n          domainMax.z = parseFloat(split[3]);\n          break;\n\n        default:\n          const r = parseFloat(split[0]);\n          const g = parseFloat(split[1]);\n          const b = parseFloat(split[2]);\n\n          if (r > 1.0 || r < 0.0 || g > 1.0 || g < 0.0 || b > 1.0 || b < 0.0) {\n            throw new Error('LUTCubeLoader : Non normalized values not supported.');\n          }\n\n          data[currIndex + 0] = r * 255;\n          data[currIndex + 1] = g * 255;\n          data[currIndex + 2] = b * 255;\n          data[currIndex + 3] = 255;\n          currIndex += 4;\n      }\n    }\n\n    const texture = new DataTexture();\n    texture.image.data = data;\n    texture.image.width = size;\n    texture.image.height = size * size;\n    texture.type = UnsignedByteType;\n    texture.magFilter = LinearFilter;\n    texture.minFilter = LinearFilter;\n    texture.wrapS = ClampToEdgeWrapping;\n    texture.wrapT = ClampToEdgeWrapping;\n    texture.generateMipmaps = false;\n    const texture3D = new DataTexture3D();\n    texture3D.image.data = data;\n    texture3D.image.width = size;\n    texture3D.image.height = size;\n    texture3D.image.depth = size;\n    texture3D.type = UnsignedByteType;\n    texture3D.magFilter = LinearFilter;\n    texture3D.minFilter = LinearFilter;\n    texture3D.wrapS = ClampToEdgeWrapping;\n    texture3D.wrapT = ClampToEdgeWrapping;\n    texture3D.wrapR = ClampToEdgeWrapping;\n    texture3D.generateMipmaps = false;\n    return {\n      title,\n      size,\n      domainMin,\n      domainMax,\n      texture,\n      texture3D\n    };\n  }\n\n}\n\nexport { LUTCubeLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}