{"ast":null,"code":"'use client';\n\n// src/index.ts\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\nimport { useCallback, useState, useId } from \"react\";\nfunction useDisclosure() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    onClose: onCloseProp,\n    onOpen: onOpenProp,\n    isOpen: isOpenProp,\n    id: idProp\n  } = props;\n  const handleOpen = useCallbackRef(onOpenProp);\n  const handleClose = useCallbackRef(onCloseProp);\n  const [isOpenState, setIsOpen] = useState(props.defaultIsOpen || false);\n  const isOpen = isOpenProp !== void 0 ? isOpenProp : isOpenState;\n  const isControlled = isOpenProp !== void 0;\n  const uid = useId();\n  const id = idProp != null ? idProp : \"disclosure-\".concat(uid);\n  const onClose = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(false);\n    }\n    handleClose == null ? void 0 : handleClose();\n  }, [isControlled, handleClose]);\n  const onOpen = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(true);\n    }\n    handleOpen == null ? void 0 : handleOpen();\n  }, [isControlled, handleOpen]);\n  const onToggle = useCallback(() => {\n    if (isOpen) {\n      onClose();\n    } else {\n      onOpen();\n    }\n  }, [isOpen, onOpen, onClose]);\n  function getButtonProps() {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return {\n      ...props2,\n      \"aria-expanded\": isOpen,\n      \"aria-controls\": id,\n      onClick(event) {\n        var _a;\n        (_a = props2.onClick) == null ? void 0 : _a.call(props2, event);\n        onToggle();\n      }\n    };\n  }\n  function getDisclosureProps() {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return {\n      ...props2,\n      hidden: !isOpen,\n      id\n    };\n  }\n  return {\n    isOpen,\n    onOpen,\n    onClose,\n    onToggle,\n    isControlled,\n    getButtonProps,\n    getDisclosureProps\n  };\n}\nexport { useDisclosure };","map":{"version":3,"names":["useCallbackRef","useCallback","useState","useId","useDisclosure","props","arguments","length","undefined","onClose","onCloseProp","onOpen","onOpenProp","isOpen","isOpenProp","id","idProp","handleOpen","handleClose","isOpenState","setIsOpen","defaultIsOpen","isControlled","uid","concat","onToggle","getButtonProps","props2","onClick","event","_a","call","getDisclosureProps","hidden"],"sources":["D:\\Github\\NIKE-DJANGO\\Jord\\l4fycy\\node_modules\\@chakra-ui\\react-use-disclosure\\src\\index.ts"],"sourcesContent":["import { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\"\nimport React, { useCallback, useState, useId } from \"react\"\n\nexport interface UseDisclosureProps {\n  isOpen?: boolean\n  defaultIsOpen?: boolean\n  onClose?(): void\n  onOpen?(): void\n  id?: string\n}\n\ntype HTMLProps = React.HTMLAttributes<HTMLElement>\n\n/**\n * `useDisclosure` is a custom hook used to help handle common open, close, or toggle scenarios.\n * It can be used to control feedback component such as `Modal`, `AlertDialog`, `Drawer`, etc.\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-disclosure\n */\nexport function useDisclosure(props: UseDisclosureProps = {}) {\n  const {\n    onClose: onCloseProp,\n    onOpen: onOpenProp,\n    isOpen: isOpenProp,\n    id: idProp,\n  } = props\n\n  const handleOpen = useCallbackRef(onOpenProp)\n  const handleClose = useCallbackRef(onCloseProp)\n\n  const [isOpenState, setIsOpen] = useState(props.defaultIsOpen || false)\n\n  const isOpen = isOpenProp !== undefined ? isOpenProp : isOpenState\n\n  const isControlled = isOpenProp !== undefined\n\n  const uid = useId()\n  const id = idProp ?? `disclosure-${uid}`\n\n  const onClose = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(false)\n    }\n    handleClose?.()\n  }, [isControlled, handleClose])\n\n  const onOpen = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(true)\n    }\n    handleOpen?.()\n  }, [isControlled, handleOpen])\n\n  const onToggle = useCallback(() => {\n    if (isOpen) {\n      onClose()\n    } else {\n      onOpen()\n    }\n  }, [isOpen, onOpen, onClose])\n\n  function getButtonProps(props: HTMLProps = {}): HTMLProps {\n    return {\n      ...props,\n      \"aria-expanded\": isOpen,\n      \"aria-controls\": id,\n      onClick(event) {\n        props.onClick?.(event)\n        onToggle()\n      },\n    }\n  }\n\n  function getDisclosureProps(props: HTMLProps = {}): HTMLProps {\n    return {\n      ...props,\n      hidden: !isOpen,\n      id,\n    }\n  }\n\n  return {\n    isOpen,\n    onOpen,\n    onClose,\n    onToggle,\n    isControlled,\n    getButtonProps,\n    getDisclosureProps,\n  }\n}\n\nexport type UseDisclosureReturn = ReturnType<typeof useDisclosure>\n"],"mappings":";;;AAAA,SAASA,cAAA,QAAsB;AAC/B,SAAgBC,WAAA,EAAaC,QAAA,EAAUC,KAAA,QAAa;AAkB7C,SAASC,cAAA,EAA8C;EAAA,IAAhCC,KAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA4B,CAAC;EACzD,MAAM;IACJG,OAAA,EAASC,WAAA;IACTC,MAAA,EAAQC,UAAA;IACRC,MAAA,EAAQC,UAAA;IACRC,EAAA,EAAIC;EACN,IAAIX,KAAA;EAEJ,MAAMY,UAAA,GAAajB,cAAA,CAAeY,UAAU;EAC5C,MAAMM,WAAA,GAAclB,cAAA,CAAeU,WAAW;EAE9C,MAAM,CAACS,WAAA,EAAaC,SAAS,IAAIlB,QAAA,CAASG,KAAA,CAAMgB,aAAA,IAAiB,KAAK;EAEtE,MAAMR,MAAA,GAASC,UAAA,KAAe,SAAYA,UAAA,GAAaK,WAAA;EAEvD,MAAMG,YAAA,GAAeR,UAAA,KAAe;EAEpC,MAAMS,GAAA,GAAMpB,KAAA,CAAM;EAClB,MAAMY,EAAA,GAAKC,MAAA,WAAAA,MAAA,iBAAAQ,MAAA,CAAwBD,GAAA;EAEnC,MAAMd,OAAA,GAAUR,WAAA,CAAY,MAAM;IAChC,IAAI,CAACqB,YAAA,EAAc;MACjBF,SAAA,CAAU,KAAK;IACjB;IACAF,WAAA,oBAAAA,WAAA;EACF,GAAG,CAACI,YAAA,EAAcJ,WAAW,CAAC;EAE9B,MAAMP,MAAA,GAASV,WAAA,CAAY,MAAM;IAC/B,IAAI,CAACqB,YAAA,EAAc;MACjBF,SAAA,CAAU,IAAI;IAChB;IACAH,UAAA,oBAAAA,UAAA;EACF,GAAG,CAACK,YAAA,EAAcL,UAAU,CAAC;EAE7B,MAAMQ,QAAA,GAAWxB,WAAA,CAAY,MAAM;IACjC,IAAIY,MAAA,EAAQ;MACVJ,OAAA,CAAQ;IACV,OAAO;MACLE,MAAA,CAAO;IACT;EACF,GAAG,CAACE,MAAA,EAAQF,MAAA,EAAQF,OAAO,CAAC;EAE5B,SAASiB,eAAA,EAAiD;IAAA,IAAlCC,MAAA,GAAArB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAmB,CAAC;IAC1C,OAAO;MACL,GAAGqB,MAAA;MACH,iBAAiBd,MAAA;MACjB,iBAAiBE,EAAA;MACjBa,QAAQC,KAAA,EAAO;QAlErB,IAAAC,EAAA;QAmEQ,CAAAA,EAAA,GAAAH,MAAA,CAAMC,OAAA,KAAN,gBAAAE,EAAA,CAAAC,IAAA,CAAAJ,MAAA,EAAgBE,KAAA;QAChBJ,QAAA,CAAS;MACX;IACF;EACF;EAEA,SAASO,mBAAA,EAAqD;IAAA,IAAlCL,MAAA,GAAArB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAmB,CAAC;IAC9C,OAAO;MACL,GAAGqB,MAAA;MACHM,MAAA,EAAQ,CAACpB,MAAA;MACTE;IACF;EACF;EAEA,OAAO;IACLF,MAAA;IACAF,MAAA;IACAF,OAAA;IACAgB,QAAA;IACAH,YAAA;IACAI,cAAA;IACAM;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}