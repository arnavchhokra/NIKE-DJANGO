{"ast":null,"code":"import _toConsumableArray from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createClass from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport * as React from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport { Color, Vector3, Spherical, AdditiveBlending, ShaderMaterial } from 'three';\n\nvar StarfieldMaterial = /*#__PURE__*/function (_ShaderMaterial) {\n  _inherits(StarfieldMaterial, _ShaderMaterial);\n\n  var _super = _createSuper(StarfieldMaterial);\n\n  function StarfieldMaterial() {\n    _classCallCheck(this, StarfieldMaterial);\n\n    return _super.call(this, {\n      uniforms: {\n        time: {\n          value: 0.0\n        },\n        fade: {\n          value: 1.0\n        }\n      },\n      vertexShader:\n      /* glsl */\n      \"\\n      uniform float time;\\n      attribute float size;\\n      varying vec3 vColor;\\n      void main() {\\n        vColor = color;\\n        vec4 mvPosition = modelViewMatrix * vec4(position, 0.5);\\n        gl_PointSize = size * (30.0 / -mvPosition.z) * (3.0 + sin(mvPosition.x + 2.0 * time + 100.0));\\n        gl_Position = projectionMatrix * mvPosition;\\n      }\",\n      fragmentShader:\n      /* glsl */\n      \"\\n      uniform sampler2D pointTexture;\\n      uniform float fade;\\n      varying vec3 vColor;\\n      void main() {\\n        float opacity = 1.0;\\n        if (fade == 1.0) {\\n          float d = distance(gl_PointCoord, vec2(0.5, 0.5));\\n          opacity = 1.0 / (1.0 + exp(16.0 * (d - 0.25)));\\n        }\\n        gl_FragColor = vec4(vColor, opacity);\\n\\n        #include <tonemapping_fragment>\\n\\t      #include <encodings_fragment>\\n      }\"\n    });\n  }\n\n  return _createClass(StarfieldMaterial);\n}(ShaderMaterial);\n\nvar genStar = function genStar(r) {\n  return new Vector3().setFromSpherical(new Spherical(r, Math.acos(1 - Math.random() * 2), Math.random() * 2 * Math.PI));\n};\n\nvar Stars = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var _ref$radius = _ref.radius,\n      radius = _ref$radius === void 0 ? 100 : _ref$radius,\n      _ref$depth = _ref.depth,\n      depth = _ref$depth === void 0 ? 50 : _ref$depth,\n      _ref$count = _ref.count,\n      count = _ref$count === void 0 ? 5000 : _ref$count,\n      _ref$saturation = _ref.saturation,\n      saturation = _ref$saturation === void 0 ? 0 : _ref$saturation,\n      _ref$factor = _ref.factor,\n      factor = _ref$factor === void 0 ? 4 : _ref$factor,\n      _ref$fade = _ref.fade,\n      fade = _ref$fade === void 0 ? false : _ref$fade,\n      _ref$speed = _ref.speed,\n      speed = _ref$speed === void 0 ? 1 : _ref$speed;\n  var material = React.useRef();\n\n  var _React$useMemo = React.useMemo(function () {\n    var positions = [];\n    var colors = [];\n    var sizes = Array.from({\n      length: count\n    }, function () {\n      return (0.5 + 0.5 * Math.random()) * factor;\n    });\n    var color = new Color();\n    var r = radius + depth;\n    var increment = depth / count;\n\n    for (var i = 0; i < count; i++) {\n      r -= increment * Math.random();\n      positions.push.apply(positions, _toConsumableArray(genStar(r).toArray()));\n      color.setHSL(i / count, saturation, 0.9);\n      colors.push(color.r, color.g, color.b);\n    }\n\n    return [new Float32Array(positions), new Float32Array(colors), new Float32Array(sizes)];\n  }, [count, depth, factor, radius, saturation]),\n      _React$useMemo2 = _slicedToArray(_React$useMemo, 3),\n      position = _React$useMemo2[0],\n      color = _React$useMemo2[1],\n      size = _React$useMemo2[2];\n\n  useFrame(function (state) {\n    return material.current && (material.current.uniforms.time.value = state.clock.getElapsedTime() * speed);\n  });\n\n  var _React$useState = React.useState(function () {\n    return new StarfieldMaterial();\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 1),\n      starfieldMaterial = _React$useState2[0];\n\n  return /*#__PURE__*/React.createElement(\"points\", {\n    ref: ref\n  }, /*#__PURE__*/React.createElement(\"bufferGeometry\", null, /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attach: \"attributes-position\",\n    args: [position, 3]\n  }), /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attach: \"attributes-color\",\n    args: [color, 3]\n  }), /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attach: \"attributes-size\",\n    args: [size, 1]\n  })), /*#__PURE__*/React.createElement(\"primitive\", {\n    ref: material,\n    object: starfieldMaterial,\n    attach: \"material\",\n    blending: AdditiveBlending,\n    \"uniforms-fade-value\": fade,\n    transparent: true,\n    vertexColors: true\n  }));\n});\nexport { Stars };","map":{"version":3,"names":["React","useFrame","Color","Vector3","Spherical","AdditiveBlending","ShaderMaterial","StarfieldMaterial","uniforms","time","value","fade","vertexShader","fragmentShader","genStar","r","setFromSpherical","Math","acos","random","PI","Stars","forwardRef","ref","radius","depth","count","saturation","factor","speed","material","useRef","useMemo","positions","colors","sizes","Array","from","length","color","increment","i","push","toArray","setHSL","g","b","Float32Array","position","size","state","current","clock","getElapsedTime","useState","starfieldMaterial","createElement","attach","args","object","blending","transparent","vertexColors"],"sources":["D:/Jord/l4fycy/node_modules/@react-three/drei/core/Stars.js"],"sourcesContent":["import * as React from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport { Color, Vector3, Spherical, AdditiveBlending, ShaderMaterial } from 'three';\n\nclass StarfieldMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      uniforms: {\n        time: {\n          value: 0.0\n        },\n        fade: {\n          value: 1.0\n        }\n      },\n      vertexShader:\n      /* glsl */\n      `\n      uniform float time;\n      attribute float size;\n      varying vec3 vColor;\n      void main() {\n        vColor = color;\n        vec4 mvPosition = modelViewMatrix * vec4(position, 0.5);\n        gl_PointSize = size * (30.0 / -mvPosition.z) * (3.0 + sin(mvPosition.x + 2.0 * time + 100.0));\n        gl_Position = projectionMatrix * mvPosition;\n      }`,\n      fragmentShader:\n      /* glsl */\n      `\n      uniform sampler2D pointTexture;\n      uniform float fade;\n      varying vec3 vColor;\n      void main() {\n        float opacity = 1.0;\n        if (fade == 1.0) {\n          float d = distance(gl_PointCoord, vec2(0.5, 0.5));\n          opacity = 1.0 / (1.0 + exp(16.0 * (d - 0.25)));\n        }\n        gl_FragColor = vec4(vColor, opacity);\n\n        #include <tonemapping_fragment>\n\t      #include <encodings_fragment>\n      }`\n    });\n  }\n\n}\n\nconst genStar = r => {\n  return new Vector3().setFromSpherical(new Spherical(r, Math.acos(1 - Math.random() * 2), Math.random() * 2 * Math.PI));\n};\n\nconst Stars = /*#__PURE__*/React.forwardRef(({\n  radius = 100,\n  depth = 50,\n  count = 5000,\n  saturation = 0,\n  factor = 4,\n  fade = false,\n  speed = 1\n}, ref) => {\n  const material = React.useRef();\n  const [position, color, size] = React.useMemo(() => {\n    const positions = [];\n    const colors = [];\n    const sizes = Array.from({\n      length: count\n    }, () => (0.5 + 0.5 * Math.random()) * factor);\n    const color = new Color();\n    let r = radius + depth;\n    const increment = depth / count;\n\n    for (let i = 0; i < count; i++) {\n      r -= increment * Math.random();\n      positions.push(...genStar(r).toArray());\n      color.setHSL(i / count, saturation, 0.9);\n      colors.push(color.r, color.g, color.b);\n    }\n\n    return [new Float32Array(positions), new Float32Array(colors), new Float32Array(sizes)];\n  }, [count, depth, factor, radius, saturation]);\n  useFrame(state => material.current && (material.current.uniforms.time.value = state.clock.getElapsedTime() * speed));\n  const [starfieldMaterial] = React.useState(() => new StarfieldMaterial());\n  return /*#__PURE__*/React.createElement(\"points\", {\n    ref: ref\n  }, /*#__PURE__*/React.createElement(\"bufferGeometry\", null, /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attach: \"attributes-position\",\n    args: [position, 3]\n  }), /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attach: \"attributes-color\",\n    args: [color, 3]\n  }), /*#__PURE__*/React.createElement(\"bufferAttribute\", {\n    attach: \"attributes-size\",\n    args: [size, 1]\n  })), /*#__PURE__*/React.createElement(\"primitive\", {\n    ref: material,\n    object: starfieldMaterial,\n    attach: \"material\",\n    blending: AdditiveBlending,\n    \"uniforms-fade-value\": fade,\n    transparent: true,\n    vertexColors: true\n  }));\n});\n\nexport { Stars };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}