{"ast":null,"code":"import { Vector3, Color } from 'three';\n/**\n * Currently contains:\n *\n *\ttoon1\n *\ttoon2\n *\thatching\n *\tdotted\n */\n\nvar ToonShader1 = {\n  uniforms: {\n    uDirLightPos: {\n      value: new Vector3()\n    },\n    uDirLightColor: {\n      value: new Color(0xeeeeee)\n    },\n    uAmbientLightColor: {\n      value: new Color(0x050505)\n    },\n    uBaseColor: {\n      value: new Color(0xffffff)\n    }\n  },\n  vertexShader: ['varying vec3 vNormal;', 'varying vec3 vRefract;', 'void main() {', '\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );', '\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );', '\tvec3 worldNormal = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );', '\tvNormal = normalize( normalMatrix * normal );', '\tvec3 I = worldPosition.xyz - cameraPosition;', '\tvRefract = refract( normalize( I ), worldNormal, 1.02 );', '\tgl_Position = projectionMatrix * mvPosition;', '}'].join('\\n'),\n  fragmentShader: ['uniform vec3 uBaseColor;', 'uniform vec3 uDirLightPos;', 'uniform vec3 uDirLightColor;', 'uniform vec3 uAmbientLightColor;', 'varying vec3 vNormal;', 'varying vec3 vRefract;', 'void main() {', '\tfloat directionalLightWeighting = max( dot( normalize( vNormal ), uDirLightPos ), 0.0);', '\tvec3 lightWeighting = uAmbientLightColor + uDirLightColor * directionalLightWeighting;', '\tfloat intensity = smoothstep( - 0.5, 1.0, pow( length(lightWeighting), 20.0 ) );', '\tintensity += length(lightWeighting) * 0.2;', '\tfloat cameraWeighting = dot( normalize( vNormal ), vRefract );', '\tintensity += pow( 1.0 - length( cameraWeighting ), 6.0 );', '\tintensity = intensity * 0.2 + 0.3;', '\tif ( intensity < 0.50 ) {', '\t\tgl_FragColor = vec4( 2.0 * intensity * uBaseColor, 1.0 );', '\t} else {', '\t\tgl_FragColor = vec4( 1.0 - 2.0 * ( 1.0 - intensity ) * ( 1.0 - uBaseColor ), 1.0 );', '}', '}'].join('\\n')\n};\nvar ToonShader2 = {\n  uniforms: {\n    uDirLightPos: {\n      value: new Vector3()\n    },\n    uDirLightColor: {\n      value: new Color(0xeeeeee)\n    },\n    uAmbientLightColor: {\n      value: new Color(0x050505)\n    },\n    uBaseColor: {\n      value: new Color(0xeeeeee)\n    },\n    uLineColor1: {\n      value: new Color(0x808080)\n    },\n    uLineColor2: {\n      value: new Color(0x000000)\n    },\n    uLineColor3: {\n      value: new Color(0x000000)\n    },\n    uLineColor4: {\n      value: new Color(0x000000)\n    }\n  },\n  vertexShader: ['varying vec3 vNormal;', 'void main() {', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '\tvNormal = normalize( normalMatrix * normal );', '}'].join('\\n'),\n  fragmentShader: ['uniform vec3 uBaseColor;', 'uniform vec3 uLineColor1;', 'uniform vec3 uLineColor2;', 'uniform vec3 uLineColor3;', 'uniform vec3 uLineColor4;', 'uniform vec3 uDirLightPos;', 'uniform vec3 uDirLightColor;', 'uniform vec3 uAmbientLightColor;', 'varying vec3 vNormal;', 'void main() {', '\tfloat camera = max( dot( normalize( vNormal ), vec3( 0.0, 0.0, 1.0 ) ), 0.4);', '\tfloat light = max( dot( normalize( vNormal ), uDirLightPos ), 0.0);', '\tgl_FragColor = vec4( uBaseColor, 1.0 );', '\tif ( length(uAmbientLightColor + uDirLightColor * light) < 1.00 ) {', '\t\tgl_FragColor *= vec4( uLineColor1, 1.0 );', '\t}', '\tif ( length(uAmbientLightColor + uDirLightColor * camera) < 0.50 ) {', '\t\tgl_FragColor *= vec4( uLineColor2, 1.0 );', '\t}', '}'].join('\\n')\n};\nvar ToonShaderHatching = {\n  uniforms: {\n    uDirLightPos: {\n      value: new Vector3()\n    },\n    uDirLightColor: {\n      value: new Color(0xeeeeee)\n    },\n    uAmbientLightColor: {\n      value: new Color(0x050505)\n    },\n    uBaseColor: {\n      value: new Color(0xffffff)\n    },\n    uLineColor1: {\n      value: new Color(0x000000)\n    },\n    uLineColor2: {\n      value: new Color(0x000000)\n    },\n    uLineColor3: {\n      value: new Color(0x000000)\n    },\n    uLineColor4: {\n      value: new Color(0x000000)\n    }\n  },\n  vertexShader: ['varying vec3 vNormal;', 'void main() {', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '\tvNormal = normalize( normalMatrix * normal );', '}'].join('\\n'),\n  fragmentShader: ['uniform vec3 uBaseColor;', 'uniform vec3 uLineColor1;', 'uniform vec3 uLineColor2;', 'uniform vec3 uLineColor3;', 'uniform vec3 uLineColor4;', 'uniform vec3 uDirLightPos;', 'uniform vec3 uDirLightColor;', 'uniform vec3 uAmbientLightColor;', 'varying vec3 vNormal;', 'void main() {', '\tfloat directionalLightWeighting = max( dot( normalize(vNormal), uDirLightPos ), 0.0);', '\tvec3 lightWeighting = uAmbientLightColor + uDirLightColor * directionalLightWeighting;', '\tgl_FragColor = vec4( uBaseColor, 1.0 );', '\tif ( length(lightWeighting) < 1.00 ) {', '\t\tif ( mod(gl_FragCoord.x + gl_FragCoord.y, 10.0) == 0.0) {', '\t\t\tgl_FragColor = vec4( uLineColor1, 1.0 );', '\t\t}', '\t}', '\tif ( length(lightWeighting) < 0.75 ) {', '\t\tif (mod(gl_FragCoord.x - gl_FragCoord.y, 10.0) == 0.0) {', '\t\t\tgl_FragColor = vec4( uLineColor2, 1.0 );', '\t\t}', '\t}', '\tif ( length(lightWeighting) < 0.50 ) {', '\t\tif (mod(gl_FragCoord.x + gl_FragCoord.y - 5.0, 10.0) == 0.0) {', '\t\t\tgl_FragColor = vec4( uLineColor3, 1.0 );', '\t\t}', '\t}', '\tif ( length(lightWeighting) < 0.3465 ) {', '\t\tif (mod(gl_FragCoord.x - gl_FragCoord.y - 5.0, 10.0) == 0.0) {', '\t\t\tgl_FragColor = vec4( uLineColor4, 1.0 );', '\t}', '\t}', '}'].join('\\n')\n};\nvar ToonShaderDotted = {\n  uniforms: {\n    uDirLightPos: {\n      value: new Vector3()\n    },\n    uDirLightColor: {\n      value: new Color(0xeeeeee)\n    },\n    uAmbientLightColor: {\n      value: new Color(0x050505)\n    },\n    uBaseColor: {\n      value: new Color(0xffffff)\n    },\n    uLineColor1: {\n      value: new Color(0x000000)\n    }\n  },\n  vertexShader: ['varying vec3 vNormal;', 'void main() {', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '\tvNormal = normalize( normalMatrix * normal );', '}'].join('\\n'),\n  fragmentShader: ['uniform vec3 uBaseColor;', 'uniform vec3 uLineColor1;', 'uniform vec3 uLineColor2;', 'uniform vec3 uLineColor3;', 'uniform vec3 uLineColor4;', 'uniform vec3 uDirLightPos;', 'uniform vec3 uDirLightColor;', 'uniform vec3 uAmbientLightColor;', 'varying vec3 vNormal;', 'void main() {', 'float directionalLightWeighting = max( dot( normalize(vNormal), uDirLightPos ), 0.0);', 'vec3 lightWeighting = uAmbientLightColor + uDirLightColor * directionalLightWeighting;', 'gl_FragColor = vec4( uBaseColor, 1.0 );', 'if ( length(lightWeighting) < 1.00 ) {', '\t\tif ( ( mod(gl_FragCoord.x, 4.001) + mod(gl_FragCoord.y, 4.0) ) > 6.00 ) {', '\t\t\tgl_FragColor = vec4( uLineColor1, 1.0 );', '\t\t}', '\t}', '\tif ( length(lightWeighting) < 0.50 ) {', '\t\tif ( ( mod(gl_FragCoord.x + 2.0, 4.001) + mod(gl_FragCoord.y + 2.0, 4.0) ) > 6.00 ) {', '\t\t\tgl_FragColor = vec4( uLineColor1, 1.0 );', '\t\t}', '\t}', '}'].join('\\n')\n};\nexport { ToonShader1, ToonShader2, ToonShaderDotted, ToonShaderHatching };","map":{"version":3,"names":["Vector3","Color","ToonShader1","uniforms","uDirLightPos","value","uDirLightColor","uAmbientLightColor","uBaseColor","vertexShader","join","fragmentShader","ToonShader2","uLineColor1","uLineColor2","uLineColor3","uLineColor4","ToonShaderHatching","ToonShaderDotted"],"sources":["C:/Users/Arnav/Downloads/l4fycy/node_modules/three-stdlib/shaders/ToonShader.js"],"sourcesContent":["import { Vector3, Color } from 'three';\n\n/**\n * Currently contains:\n *\n *\ttoon1\n *\ttoon2\n *\thatching\n *\tdotted\n */\n\nconst ToonShader1 = {\n  uniforms: {\n    uDirLightPos: {\n      value: new Vector3()\n    },\n    uDirLightColor: {\n      value: new Color(0xeeeeee)\n    },\n    uAmbientLightColor: {\n      value: new Color(0x050505)\n    },\n    uBaseColor: {\n      value: new Color(0xffffff)\n    }\n  },\n  vertexShader: ['varying vec3 vNormal;', 'varying vec3 vRefract;', 'void main() {', '\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );', '\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );', '\tvec3 worldNormal = normalize ( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );', '\tvNormal = normalize( normalMatrix * normal );', '\tvec3 I = worldPosition.xyz - cameraPosition;', '\tvRefract = refract( normalize( I ), worldNormal, 1.02 );', '\tgl_Position = projectionMatrix * mvPosition;', '}'].join('\\n'),\n  fragmentShader: ['uniform vec3 uBaseColor;', 'uniform vec3 uDirLightPos;', 'uniform vec3 uDirLightColor;', 'uniform vec3 uAmbientLightColor;', 'varying vec3 vNormal;', 'varying vec3 vRefract;', 'void main() {', '\tfloat directionalLightWeighting = max( dot( normalize( vNormal ), uDirLightPos ), 0.0);', '\tvec3 lightWeighting = uAmbientLightColor + uDirLightColor * directionalLightWeighting;', '\tfloat intensity = smoothstep( - 0.5, 1.0, pow( length(lightWeighting), 20.0 ) );', '\tintensity += length(lightWeighting) * 0.2;', '\tfloat cameraWeighting = dot( normalize( vNormal ), vRefract );', '\tintensity += pow( 1.0 - length( cameraWeighting ), 6.0 );', '\tintensity = intensity * 0.2 + 0.3;', '\tif ( intensity < 0.50 ) {', '\t\tgl_FragColor = vec4( 2.0 * intensity * uBaseColor, 1.0 );', '\t} else {', '\t\tgl_FragColor = vec4( 1.0 - 2.0 * ( 1.0 - intensity ) * ( 1.0 - uBaseColor ), 1.0 );', '}', '}'].join('\\n')\n};\nconst ToonShader2 = {\n  uniforms: {\n    uDirLightPos: {\n      value: new Vector3()\n    },\n    uDirLightColor: {\n      value: new Color(0xeeeeee)\n    },\n    uAmbientLightColor: {\n      value: new Color(0x050505)\n    },\n    uBaseColor: {\n      value: new Color(0xeeeeee)\n    },\n    uLineColor1: {\n      value: new Color(0x808080)\n    },\n    uLineColor2: {\n      value: new Color(0x000000)\n    },\n    uLineColor3: {\n      value: new Color(0x000000)\n    },\n    uLineColor4: {\n      value: new Color(0x000000)\n    }\n  },\n  vertexShader: ['varying vec3 vNormal;', 'void main() {', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '\tvNormal = normalize( normalMatrix * normal );', '}'].join('\\n'),\n  fragmentShader: ['uniform vec3 uBaseColor;', 'uniform vec3 uLineColor1;', 'uniform vec3 uLineColor2;', 'uniform vec3 uLineColor3;', 'uniform vec3 uLineColor4;', 'uniform vec3 uDirLightPos;', 'uniform vec3 uDirLightColor;', 'uniform vec3 uAmbientLightColor;', 'varying vec3 vNormal;', 'void main() {', '\tfloat camera = max( dot( normalize( vNormal ), vec3( 0.0, 0.0, 1.0 ) ), 0.4);', '\tfloat light = max( dot( normalize( vNormal ), uDirLightPos ), 0.0);', '\tgl_FragColor = vec4( uBaseColor, 1.0 );', '\tif ( length(uAmbientLightColor + uDirLightColor * light) < 1.00 ) {', '\t\tgl_FragColor *= vec4( uLineColor1, 1.0 );', '\t}', '\tif ( length(uAmbientLightColor + uDirLightColor * camera) < 0.50 ) {', '\t\tgl_FragColor *= vec4( uLineColor2, 1.0 );', '\t}', '}'].join('\\n')\n};\nconst ToonShaderHatching = {\n  uniforms: {\n    uDirLightPos: {\n      value: new Vector3()\n    },\n    uDirLightColor: {\n      value: new Color(0xeeeeee)\n    },\n    uAmbientLightColor: {\n      value: new Color(0x050505)\n    },\n    uBaseColor: {\n      value: new Color(0xffffff)\n    },\n    uLineColor1: {\n      value: new Color(0x000000)\n    },\n    uLineColor2: {\n      value: new Color(0x000000)\n    },\n    uLineColor3: {\n      value: new Color(0x000000)\n    },\n    uLineColor4: {\n      value: new Color(0x000000)\n    }\n  },\n  vertexShader: ['varying vec3 vNormal;', 'void main() {', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '\tvNormal = normalize( normalMatrix * normal );', '}'].join('\\n'),\n  fragmentShader: ['uniform vec3 uBaseColor;', 'uniform vec3 uLineColor1;', 'uniform vec3 uLineColor2;', 'uniform vec3 uLineColor3;', 'uniform vec3 uLineColor4;', 'uniform vec3 uDirLightPos;', 'uniform vec3 uDirLightColor;', 'uniform vec3 uAmbientLightColor;', 'varying vec3 vNormal;', 'void main() {', '\tfloat directionalLightWeighting = max( dot( normalize(vNormal), uDirLightPos ), 0.0);', '\tvec3 lightWeighting = uAmbientLightColor + uDirLightColor * directionalLightWeighting;', '\tgl_FragColor = vec4( uBaseColor, 1.0 );', '\tif ( length(lightWeighting) < 1.00 ) {', '\t\tif ( mod(gl_FragCoord.x + gl_FragCoord.y, 10.0) == 0.0) {', '\t\t\tgl_FragColor = vec4( uLineColor1, 1.0 );', '\t\t}', '\t}', '\tif ( length(lightWeighting) < 0.75 ) {', '\t\tif (mod(gl_FragCoord.x - gl_FragCoord.y, 10.0) == 0.0) {', '\t\t\tgl_FragColor = vec4( uLineColor2, 1.0 );', '\t\t}', '\t}', '\tif ( length(lightWeighting) < 0.50 ) {', '\t\tif (mod(gl_FragCoord.x + gl_FragCoord.y - 5.0, 10.0) == 0.0) {', '\t\t\tgl_FragColor = vec4( uLineColor3, 1.0 );', '\t\t}', '\t}', '\tif ( length(lightWeighting) < 0.3465 ) {', '\t\tif (mod(gl_FragCoord.x - gl_FragCoord.y - 5.0, 10.0) == 0.0) {', '\t\t\tgl_FragColor = vec4( uLineColor4, 1.0 );', '\t}', '\t}', '}'].join('\\n')\n};\nconst ToonShaderDotted = {\n  uniforms: {\n    uDirLightPos: {\n      value: new Vector3()\n    },\n    uDirLightColor: {\n      value: new Color(0xeeeeee)\n    },\n    uAmbientLightColor: {\n      value: new Color(0x050505)\n    },\n    uBaseColor: {\n      value: new Color(0xffffff)\n    },\n    uLineColor1: {\n      value: new Color(0x000000)\n    }\n  },\n  vertexShader: ['varying vec3 vNormal;', 'void main() {', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '\tvNormal = normalize( normalMatrix * normal );', '}'].join('\\n'),\n  fragmentShader: ['uniform vec3 uBaseColor;', 'uniform vec3 uLineColor1;', 'uniform vec3 uLineColor2;', 'uniform vec3 uLineColor3;', 'uniform vec3 uLineColor4;', 'uniform vec3 uDirLightPos;', 'uniform vec3 uDirLightColor;', 'uniform vec3 uAmbientLightColor;', 'varying vec3 vNormal;', 'void main() {', 'float directionalLightWeighting = max( dot( normalize(vNormal), uDirLightPos ), 0.0);', 'vec3 lightWeighting = uAmbientLightColor + uDirLightColor * directionalLightWeighting;', 'gl_FragColor = vec4( uBaseColor, 1.0 );', 'if ( length(lightWeighting) < 1.00 ) {', '\t\tif ( ( mod(gl_FragCoord.x, 4.001) + mod(gl_FragCoord.y, 4.0) ) > 6.00 ) {', '\t\t\tgl_FragColor = vec4( uLineColor1, 1.0 );', '\t\t}', '\t}', '\tif ( length(lightWeighting) < 0.50 ) {', '\t\tif ( ( mod(gl_FragCoord.x + 2.0, 4.001) + mod(gl_FragCoord.y + 2.0, 4.0) ) > 6.00 ) {', '\t\t\tgl_FragColor = vec4( uLineColor1, 1.0 );', '\t\t}', '\t}', '}'].join('\\n')\n};\n\nexport { ToonShader1, ToonShader2, ToonShaderDotted, ToonShaderHatching };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}