{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GAstVisitor = void 0;\n\nvar model_1 = require(\"./model\");\n\nvar GAstVisitor =\n/** @class */\nfunction () {\n  function GAstVisitor() {}\n\n  GAstVisitor.prototype.visit = function (node) {\n    var nodeAny = node;\n\n    switch (nodeAny.constructor) {\n      case model_1.NonTerminal:\n        return this.visitNonTerminal(nodeAny);\n\n      case model_1.Alternative:\n        return this.visitAlternative(nodeAny);\n\n      case model_1.Option:\n        return this.visitOption(nodeAny);\n\n      case model_1.RepetitionMandatory:\n        return this.visitRepetitionMandatory(nodeAny);\n\n      case model_1.RepetitionMandatoryWithSeparator:\n        return this.visitRepetitionMandatoryWithSeparator(nodeAny);\n\n      case model_1.RepetitionWithSeparator:\n        return this.visitRepetitionWithSeparator(nodeAny);\n\n      case model_1.Repetition:\n        return this.visitRepetition(nodeAny);\n\n      case model_1.Alternation:\n        return this.visitAlternation(nodeAny);\n\n      case model_1.Terminal:\n        return this.visitTerminal(nodeAny);\n\n      case model_1.Rule:\n        return this.visitRule(nodeAny);\n\n      /* istanbul ignore next */\n\n      default:\n        throw Error(\"non exhaustive match\");\n    }\n  };\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n\n\n  GAstVisitor.prototype.visitNonTerminal = function (node) {};\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n\n\n  GAstVisitor.prototype.visitAlternative = function (node) {};\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n\n\n  GAstVisitor.prototype.visitOption = function (node) {};\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n\n\n  GAstVisitor.prototype.visitRepetition = function (node) {};\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n\n\n  GAstVisitor.prototype.visitRepetitionMandatory = function (node) {};\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n\n\n  GAstVisitor.prototype.visitRepetitionMandatoryWithSeparator = function (node) {};\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n\n\n  GAstVisitor.prototype.visitRepetitionWithSeparator = function (node) {};\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n\n\n  GAstVisitor.prototype.visitAlternation = function (node) {};\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n\n\n  GAstVisitor.prototype.visitTerminal = function (node) {};\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n\n\n  GAstVisitor.prototype.visitRule = function (node) {};\n\n  return GAstVisitor;\n}();\n\nexports.GAstVisitor = GAstVisitor;","map":{"version":3,"mappings":";;;;;;;AAAA;;AAcA;AAAA;AAAA;EAAA,wBA6DC;;EA5DQA,8BAAP,UAAaC,IAAb,EAA8B;IAC5B,IAAMC,OAAO,GAAQD,IAArB;;IACA,QAAQC,OAAO,CAACC,WAAhB;MACE,KAAKC,mBAAL;QACE,OAAO,KAAKC,gBAAL,CAAsBH,OAAtB,CAAP;;MACF,KAAKE,mBAAL;QACE,OAAO,KAAKE,gBAAL,CAAsBJ,OAAtB,CAAP;;MACF,KAAKE,cAAL;QACE,OAAO,KAAKG,WAAL,CAAiBL,OAAjB,CAAP;;MACF,KAAKE,2BAAL;QACE,OAAO,KAAKI,wBAAL,CAA8BN,OAA9B,CAAP;;MACF,KAAKE,wCAAL;QACE,OAAO,KAAKK,qCAAL,CAA2CP,OAA3C,CAAP;;MACF,KAAKE,+BAAL;QACE,OAAO,KAAKM,4BAAL,CAAkCR,OAAlC,CAAP;;MACF,KAAKE,kBAAL;QACE,OAAO,KAAKO,eAAL,CAAqBT,OAArB,CAAP;;MACF,KAAKE,mBAAL;QACE,OAAO,KAAKQ,gBAAL,CAAsBV,OAAtB,CAAP;;MACF,KAAKE,gBAAL;QACE,OAAO,KAAKS,aAAL,CAAmBX,OAAnB,CAAP;;MACF,KAAKE,YAAL;QACE,OAAO,KAAKU,SAAL,CAAeZ,OAAf,CAAP;;MACF;;MACA;QACE,MAAMa,KAAK,CAAC,sBAAD,CAAX;IAvBJ;EAyBD,CA3BM;EA6BP;;;EACOf,yCAAP,UAAwBC,IAAxB,EAAyC,CAAS,CAA3C;EAEP;;;EACOD,yCAAP,UAAwBC,IAAxB,EAAyC,CAAS,CAA3C;EAEP;;;EACOD,oCAAP,UAAmBC,IAAnB,EAA+B,CAAS,CAAjC;EAEP;;;EACOD,wCAAP,UAAuBC,IAAvB,EAAuC,CAAS,CAAzC;EAEP;;;EACOD,iDAAP,UAAgCC,IAAhC,EAAyD,CAAS,CAA3D;EAEP;;;EACOD,8DAAP,UACEC,IADF,EACwC,CAC/B,CAFF;EAIP;;;EACOD,qDAAP,UAAoCC,IAApC,EAAiE,CAAS,CAAnE;EAEP;;;EACOD,yCAAP,UAAwBC,IAAxB,EAAyC,CAAS,CAA3C;EAEP;;;EACOD,sCAAP,UAAqBC,IAArB,EAAmC,CAAS,CAArC;EAEP;;;EACOD,kCAAP,UAAiBC,IAAjB,EAA2B,CAAS,CAA7B;;EACT;AAAC,CA7DD;;AAAsBe","names":["GAstVisitor","node","nodeAny","constructor","model_1","visitNonTerminal","visitAlternative","visitOption","visitRepetitionMandatory","visitRepetitionMandatoryWithSeparator","visitRepetitionWithSeparator","visitRepetition","visitAlternation","visitTerminal","visitRule","Error","exports"],"sources":["D:\\Github\\NIKE-DJANGO\\Jord\\l4fycy\\node_modules\\@chevrotain\\gast\\src\\visitor.ts"],"sourcesContent":["import {\r\n  Alternation,\r\n  Alternative,\r\n  NonTerminal,\r\n  Option,\r\n  Repetition,\r\n  RepetitionMandatory,\r\n  RepetitionMandatoryWithSeparator,\r\n  RepetitionWithSeparator,\r\n  Rule,\r\n  Terminal\r\n} from \"./model\"\r\nimport { IProduction } from \"@chevrotain/types\"\r\n\r\nexport abstract class GAstVisitor {\r\n  public visit(node: IProduction): any {\r\n    const nodeAny: any = node\r\n    switch (nodeAny.constructor) {\r\n      case NonTerminal:\r\n        return this.visitNonTerminal(nodeAny)\r\n      case Alternative:\r\n        return this.visitAlternative(nodeAny)\r\n      case Option:\r\n        return this.visitOption(nodeAny)\r\n      case RepetitionMandatory:\r\n        return this.visitRepetitionMandatory(nodeAny)\r\n      case RepetitionMandatoryWithSeparator:\r\n        return this.visitRepetitionMandatoryWithSeparator(nodeAny)\r\n      case RepetitionWithSeparator:\r\n        return this.visitRepetitionWithSeparator(nodeAny)\r\n      case Repetition:\r\n        return this.visitRepetition(nodeAny)\r\n      case Alternation:\r\n        return this.visitAlternation(nodeAny)\r\n      case Terminal:\r\n        return this.visitTerminal(nodeAny)\r\n      case Rule:\r\n        return this.visitRule(nodeAny)\r\n      /* istanbul ignore next */\r\n      default:\r\n        throw Error(\"non exhaustive match\")\r\n    }\r\n  }\r\n\r\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\r\n  public visitNonTerminal(node: NonTerminal): any {}\r\n\r\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\r\n  public visitAlternative(node: Alternative): any {}\r\n\r\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\r\n  public visitOption(node: Option): any {}\r\n\r\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\r\n  public visitRepetition(node: Repetition): any {}\r\n\r\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\r\n  public visitRepetitionMandatory(node: RepetitionMandatory): any {}\r\n\r\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\r\n  public visitRepetitionMandatoryWithSeparator(\r\n    node: RepetitionMandatoryWithSeparator\r\n  ): any {}\r\n\r\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\r\n  public visitRepetitionWithSeparator(node: RepetitionWithSeparator): any {}\r\n\r\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\r\n  public visitAlternation(node: Alternation): any {}\r\n\r\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\r\n  public visitTerminal(node: Terminal): any {}\r\n\r\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\r\n  public visitRule(node: Rule): any {}\r\n}\r\n"]},"metadata":{},"sourceType":"script"}