{"ast":null,"code":"import _classCallCheck from \"D:/Github/NIKE-DJANGO/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Github/NIKE-DJANGO/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"D:/Github/NIKE-DJANGO/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"D:/Github/NIKE-DJANGO/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"D:/Github/NIKE-DJANGO/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"D:/Github/NIKE-DJANGO/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Object3D } from 'three';\nimport { XRHandPrimitiveModel } from './XRHandPrimitiveModel.js';\nimport { XRHandMeshModel } from './XRHandMeshModel.js';\n\nvar XRHandModel = /*#__PURE__*/function (_Object3D) {\n  _inherits(XRHandModel, _Object3D);\n\n  var _super = _createSuper(XRHandModel);\n\n  function XRHandModel(controller) {\n    var _this;\n\n    _classCallCheck(this, XRHandModel);\n\n    _this = _super.call(this);\n    _this.controller = controller;\n    _this.motionController = null;\n    _this.envMap = null;\n    _this.mesh = null;\n    return _this;\n  }\n\n  _createClass(XRHandModel, [{\n    key: \"updateMatrixWorld\",\n    value: function updateMatrixWorld(force) {\n      _get(_getPrototypeOf(XRHandModel.prototype), \"updateMatrixWorld\", this).call(this, force);\n\n      if (this.motionController) {\n        this.motionController.updateMesh();\n      }\n    }\n  }]);\n\n  return XRHandModel;\n}(Object3D);\n\nvar XRHandModelFactory = /*#__PURE__*/function () {\n  function XRHandModelFactory() {\n    _classCallCheck(this, XRHandModelFactory);\n\n    this.path = null;\n  }\n\n  _createClass(XRHandModelFactory, [{\n    key: \"setPath\",\n    value: function setPath(path) {\n      this.path = path;\n      return this;\n    }\n  }, {\n    key: \"createHandModel\",\n    value: function createHandModel(controller, profile) {\n      var _this2 = this;\n\n      var handModel = new XRHandModel(controller);\n      controller.addEventListener('connected', function (event) {\n        var xrInputSource = event.data;\n\n        if (xrInputSource.hand && !handModel.motionController) {\n          handModel.xrInputSource = xrInputSource; // @todo Detect profile if not provided\n\n          if (profile === undefined || profile === 'spheres') {\n            handModel.motionController = new XRHandPrimitiveModel(handModel, controller, _this2.path, xrInputSource.handedness, {\n              primitive: 'sphere'\n            });\n          } else if (profile === 'boxes') {\n            handModel.motionController = new XRHandPrimitiveModel(handModel, controller, _this2.path, xrInputSource.handedness, {\n              primitive: 'box'\n            });\n          } else if (profile === 'mesh') {\n            handModel.motionController = new XRHandMeshModel(handModel, controller, _this2.path, xrInputSource.handedness);\n          }\n        }\n      });\n      controller.addEventListener('disconnected', function () {// handModel.motionController = null;\n        // handModel.remove( scene );\n        // scene = null;\n      });\n      return handModel;\n    }\n  }]);\n\n  return XRHandModelFactory;\n}();\n\nexport { XRHandModelFactory };","map":{"version":3,"names":["Object3D","XRHandPrimitiveModel","XRHandMeshModel","XRHandModel","controller","motionController","envMap","mesh","force","updateMesh","XRHandModelFactory","path","profile","handModel","addEventListener","event","xrInputSource","data","hand","undefined","handedness","primitive"],"sources":["D:/Github/NIKE-DJANGO/Jord/l4fycy/node_modules/three-stdlib/webxr/XRHandModelFactory.js"],"sourcesContent":["import { Object3D } from 'three';\r\nimport { XRHandPrimitiveModel } from './XRHandPrimitiveModel.js';\r\nimport { XRHandMeshModel } from './XRHandMeshModel.js';\r\n\r\nclass XRHandModel extends Object3D {\r\n  constructor(controller) {\r\n    super();\r\n    this.controller = controller;\r\n    this.motionController = null;\r\n    this.envMap = null;\r\n    this.mesh = null;\r\n  }\r\n\r\n  updateMatrixWorld(force) {\r\n    super.updateMatrixWorld(force);\r\n\r\n    if (this.motionController) {\r\n      this.motionController.updateMesh();\r\n    }\r\n  }\r\n\r\n}\r\n\r\nclass XRHandModelFactory {\r\n  constructor() {\r\n    this.path = null;\r\n  }\r\n\r\n  setPath(path) {\r\n    this.path = path;\r\n    return this;\r\n  }\r\n\r\n  createHandModel(controller, profile) {\r\n    const handModel = new XRHandModel(controller);\r\n    controller.addEventListener('connected', event => {\r\n      const xrInputSource = event.data;\r\n\r\n      if (xrInputSource.hand && !handModel.motionController) {\r\n        handModel.xrInputSource = xrInputSource; // @todo Detect profile if not provided\r\n\r\n        if (profile === undefined || profile === 'spheres') {\r\n          handModel.motionController = new XRHandPrimitiveModel(handModel, controller, this.path, xrInputSource.handedness, {\r\n            primitive: 'sphere'\r\n          });\r\n        } else if (profile === 'boxes') {\r\n          handModel.motionController = new XRHandPrimitiveModel(handModel, controller, this.path, xrInputSource.handedness, {\r\n            primitive: 'box'\r\n          });\r\n        } else if (profile === 'mesh') {\r\n          handModel.motionController = new XRHandMeshModel(handModel, controller, this.path, xrInputSource.handedness);\r\n        }\r\n      }\r\n    });\r\n    controller.addEventListener('disconnected', () => {// handModel.motionController = null;\r\n      // handModel.remove( scene );\r\n      // scene = null;\r\n    });\r\n    return handModel;\r\n  }\r\n\r\n}\r\n\r\nexport { XRHandModelFactory };\r\n"],"mappings":";;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,oBAAT,QAAqC,2BAArC;AACA,SAASC,eAAT,QAAgC,sBAAhC;;IAEMC,W;;;;;EACJ,qBAAYC,UAAZ,EAAwB;IAAA;;IAAA;;IACtB;IACA,MAAKA,UAAL,GAAkBA,UAAlB;IACA,MAAKC,gBAAL,GAAwB,IAAxB;IACA,MAAKC,MAAL,GAAc,IAAd;IACA,MAAKC,IAAL,GAAY,IAAZ;IALsB;EAMvB;;;;WAED,2BAAkBC,KAAlB,EAAyB;MACvB,mFAAwBA,KAAxB;;MAEA,IAAI,KAAKH,gBAAT,EAA2B;QACzB,KAAKA,gBAAL,CAAsBI,UAAtB;MACD;IACF;;;;EAfuBT,Q;;IAmBpBU,kB;EACJ,8BAAc;IAAA;;IACZ,KAAKC,IAAL,GAAY,IAAZ;EACD;;;;WAED,iBAAQA,IAAR,EAAc;MACZ,KAAKA,IAAL,GAAYA,IAAZ;MACA,OAAO,IAAP;IACD;;;WAED,yBAAgBP,UAAhB,EAA4BQ,OAA5B,EAAqC;MAAA;;MACnC,IAAMC,SAAS,GAAG,IAAIV,WAAJ,CAAgBC,UAAhB,CAAlB;MACAA,UAAU,CAACU,gBAAX,CAA4B,WAA5B,EAAyC,UAAAC,KAAK,EAAI;QAChD,IAAMC,aAAa,GAAGD,KAAK,CAACE,IAA5B;;QAEA,IAAID,aAAa,CAACE,IAAd,IAAsB,CAACL,SAAS,CAACR,gBAArC,EAAuD;UACrDQ,SAAS,CAACG,aAAV,GAA0BA,aAA1B,CADqD,CACZ;;UAEzC,IAAIJ,OAAO,KAAKO,SAAZ,IAAyBP,OAAO,KAAK,SAAzC,EAAoD;YAClDC,SAAS,CAACR,gBAAV,GAA6B,IAAIJ,oBAAJ,CAAyBY,SAAzB,EAAoCT,UAApC,EAAgD,MAAI,CAACO,IAArD,EAA2DK,aAAa,CAACI,UAAzE,EAAqF;cAChHC,SAAS,EAAE;YADqG,CAArF,CAA7B;UAGD,CAJD,MAIO,IAAIT,OAAO,KAAK,OAAhB,EAAyB;YAC9BC,SAAS,CAACR,gBAAV,GAA6B,IAAIJ,oBAAJ,CAAyBY,SAAzB,EAAoCT,UAApC,EAAgD,MAAI,CAACO,IAArD,EAA2DK,aAAa,CAACI,UAAzE,EAAqF;cAChHC,SAAS,EAAE;YADqG,CAArF,CAA7B;UAGD,CAJM,MAIA,IAAIT,OAAO,KAAK,MAAhB,EAAwB;YAC7BC,SAAS,CAACR,gBAAV,GAA6B,IAAIH,eAAJ,CAAoBW,SAApB,EAA+BT,UAA/B,EAA2C,MAAI,CAACO,IAAhD,EAAsDK,aAAa,CAACI,UAApE,CAA7B;UACD;QACF;MACF,CAlBD;MAmBAhB,UAAU,CAACU,gBAAX,CAA4B,cAA5B,EAA4C,YAAM,CAAC;QACjD;QACA;MACD,CAHD;MAIA,OAAOD,SAAP;IACD;;;;;;AAIH,SAASH,kBAAT"},"metadata":{},"sourceType":"module"}