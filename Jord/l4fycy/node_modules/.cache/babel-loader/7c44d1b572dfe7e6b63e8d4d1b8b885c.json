{"ast":null,"code":"import _classCallCheck from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { Vector2, WebGLRenderTarget, UniformsUtils, ShaderMaterial, AdditiveBlending } from 'three';\nimport { ConvolutionShader } from '../shaders/ConvolutionShader.js';\n\nvar BloomPass = /*#__PURE__*/function (_Pass) {\n  _inherits(BloomPass, _Pass);\n\n  var _super = _createSuper(BloomPass);\n\n  function BloomPass() {\n    var _this;\n\n    var strength = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    var kernelSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 25;\n    var sigma = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 4;\n    var resolution = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 256;\n\n    _classCallCheck(this, BloomPass);\n\n    _this = _super.call(this); // render targets\n\n    _defineProperty(_assertThisInitialized(_this), \"renderTargetX\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"renderTargetY\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"materialCombine\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"materialConvolution\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"fsQuad\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"combineUniforms\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"convolutionUniforms\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"blurX\", new Vector2(0.001953125, 0.0));\n\n    _defineProperty(_assertThisInitialized(_this), \"blurY\", new Vector2(0.0, 0.001953125));\n\n    _this.renderTargetX = new WebGLRenderTarget(resolution, resolution);\n    _this.renderTargetX.texture.name = 'BloomPass.x';\n    _this.renderTargetY = new WebGLRenderTarget(resolution, resolution);\n    _this.renderTargetY.texture.name = 'BloomPass.y'; // combine material\n\n    _this.combineUniforms = UniformsUtils.clone(CombineShader.uniforms);\n    _this.combineUniforms['strength'].value = strength;\n    _this.materialCombine = new ShaderMaterial({\n      uniforms: _this.combineUniforms,\n      vertexShader: CombineShader.vertexShader,\n      fragmentShader: CombineShader.fragmentShader,\n      blending: AdditiveBlending,\n      transparent: true\n    }); // convolution material\n\n    if (ConvolutionShader === undefined) console.error('BloomPass relies on ConvolutionShader');\n    var convolutionShader = ConvolutionShader;\n    _this.convolutionUniforms = UniformsUtils.clone(convolutionShader.uniforms);\n    _this.convolutionUniforms['uImageIncrement'].value = _this.blurX;\n    _this.convolutionUniforms['cKernel'].value = ConvolutionShader.buildKernel(sigma);\n    _this.materialConvolution = new ShaderMaterial({\n      uniforms: _this.convolutionUniforms,\n      vertexShader: convolutionShader.vertexShader,\n      fragmentShader: convolutionShader.fragmentShader,\n      defines: {\n        KERNEL_SIZE_FLOAT: kernelSize.toFixed(1),\n        KERNEL_SIZE_INT: kernelSize.toFixed(0)\n      }\n    });\n    _this.needsSwap = false;\n    _this.fsQuad = new FullScreenQuad(_this.materialConvolution);\n    return _this;\n  }\n\n  _createClass(BloomPass, [{\n    key: \"render\",\n    value: function render(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n      if (maskActive) renderer.state.buffers.stencil.setTest(false); // Render quad with blured scene into texture (convolution pass 1)\n\n      this.fsQuad.material = this.materialConvolution;\n      this.convolutionUniforms['tDiffuse'].value = readBuffer.texture;\n      this.convolutionUniforms['uImageIncrement'].value = this.blurX;\n      renderer.setRenderTarget(this.renderTargetX);\n      renderer.clear();\n      this.fsQuad.render(renderer); // Render quad with blured scene into texture (convolution pass 2)\n\n      this.convolutionUniforms['tDiffuse'].value = this.renderTargetX.texture;\n      this.convolutionUniforms['uImageIncrement'].value = this.blurY;\n      renderer.setRenderTarget(this.renderTargetY);\n      renderer.clear();\n      this.fsQuad.render(renderer); // Render original scene with superimposed blur to texture\n\n      this.fsQuad.material = this.materialCombine;\n      this.combineUniforms['tDiffuse'].value = this.renderTargetY.texture;\n      if (maskActive) renderer.state.buffers.stencil.setTest(true);\n      renderer.setRenderTarget(readBuffer);\n      if (this.clear) renderer.clear();\n      this.fsQuad.render(renderer);\n    }\n  }]);\n\n  return BloomPass;\n}(Pass);\n\nvar CombineShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    strength: {\n      value: 1.0\n    }\n  },\n  vertexShader:\n  /* glsl */\n  \"\\n  varying vec2 vUv;\\n  void main() {\\n    vUv = uv;\\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n  }\",\n  fragmentShader:\n  /* glsl */\n  \"\\n  uniform float strength;\\n  uniform sampler2D tDiffuse;\\n  varying vec2 vUv;\\n  void main() {\\n    vec4 texel = texture2D( tDiffuse, vUv );\\n    gl_FragColor = strength * texel;\\n  }\"\n};\nexport { BloomPass };","map":{"version":3,"names":["_defineProperty","Pass","FullScreenQuad","Vector2","WebGLRenderTarget","UniformsUtils","ShaderMaterial","AdditiveBlending","ConvolutionShader","BloomPass","strength","kernelSize","sigma","resolution","renderTargetX","texture","name","renderTargetY","combineUniforms","clone","CombineShader","uniforms","value","materialCombine","vertexShader","fragmentShader","blending","transparent","undefined","console","error","convolutionShader","convolutionUniforms","blurX","buildKernel","materialConvolution","defines","KERNEL_SIZE_FLOAT","toFixed","KERNEL_SIZE_INT","needsSwap","fsQuad","renderer","writeBuffer","readBuffer","deltaTime","maskActive","state","buffers","stencil","setTest","material","setRenderTarget","clear","render","blurY","tDiffuse"],"sources":["D:/Jord/l4fycy/node_modules/three-stdlib/postprocessing/BloomPass.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Pass, FullScreenQuad } from './Pass.js';\nimport { Vector2, WebGLRenderTarget, UniformsUtils, ShaderMaterial, AdditiveBlending } from 'three';\nimport { ConvolutionShader } from '../shaders/ConvolutionShader.js';\n\nclass BloomPass extends Pass {\n  constructor(strength = 1, kernelSize = 25, sigma = 4, resolution = 256) {\n    super(); // render targets\n\n    _defineProperty(this, \"renderTargetX\", void 0);\n\n    _defineProperty(this, \"renderTargetY\", void 0);\n\n    _defineProperty(this, \"materialCombine\", void 0);\n\n    _defineProperty(this, \"materialConvolution\", void 0);\n\n    _defineProperty(this, \"fsQuad\", void 0);\n\n    _defineProperty(this, \"combineUniforms\", void 0);\n\n    _defineProperty(this, \"convolutionUniforms\", void 0);\n\n    _defineProperty(this, \"blurX\", new Vector2(0.001953125, 0.0));\n\n    _defineProperty(this, \"blurY\", new Vector2(0.0, 0.001953125));\n\n    this.renderTargetX = new WebGLRenderTarget(resolution, resolution);\n    this.renderTargetX.texture.name = 'BloomPass.x';\n    this.renderTargetY = new WebGLRenderTarget(resolution, resolution);\n    this.renderTargetY.texture.name = 'BloomPass.y'; // combine material\n\n    this.combineUniforms = UniformsUtils.clone(CombineShader.uniforms);\n    this.combineUniforms['strength'].value = strength;\n    this.materialCombine = new ShaderMaterial({\n      uniforms: this.combineUniforms,\n      vertexShader: CombineShader.vertexShader,\n      fragmentShader: CombineShader.fragmentShader,\n      blending: AdditiveBlending,\n      transparent: true\n    }); // convolution material\n\n    if (ConvolutionShader === undefined) console.error('BloomPass relies on ConvolutionShader');\n    const convolutionShader = ConvolutionShader;\n    this.convolutionUniforms = UniformsUtils.clone(convolutionShader.uniforms);\n    this.convolutionUniforms['uImageIncrement'].value = this.blurX;\n    this.convolutionUniforms['cKernel'].value = ConvolutionShader.buildKernel(sigma);\n    this.materialConvolution = new ShaderMaterial({\n      uniforms: this.convolutionUniforms,\n      vertexShader: convolutionShader.vertexShader,\n      fragmentShader: convolutionShader.fragmentShader,\n      defines: {\n        KERNEL_SIZE_FLOAT: kernelSize.toFixed(1),\n        KERNEL_SIZE_INT: kernelSize.toFixed(0)\n      }\n    });\n    this.needsSwap = false;\n    this.fsQuad = new FullScreenQuad(this.materialConvolution);\n  }\n\n  render(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    if (maskActive) renderer.state.buffers.stencil.setTest(false); // Render quad with blured scene into texture (convolution pass 1)\n\n    this.fsQuad.material = this.materialConvolution;\n    this.convolutionUniforms['tDiffuse'].value = readBuffer.texture;\n    this.convolutionUniforms['uImageIncrement'].value = this.blurX;\n    renderer.setRenderTarget(this.renderTargetX);\n    renderer.clear();\n    this.fsQuad.render(renderer); // Render quad with blured scene into texture (convolution pass 2)\n\n    this.convolutionUniforms['tDiffuse'].value = this.renderTargetX.texture;\n    this.convolutionUniforms['uImageIncrement'].value = this.blurY;\n    renderer.setRenderTarget(this.renderTargetY);\n    renderer.clear();\n    this.fsQuad.render(renderer); // Render original scene with superimposed blur to texture\n\n    this.fsQuad.material = this.materialCombine;\n    this.combineUniforms['tDiffuse'].value = this.renderTargetY.texture;\n    if (maskActive) renderer.state.buffers.stencil.setTest(true);\n    renderer.setRenderTarget(readBuffer);\n    if (this.clear) renderer.clear();\n    this.fsQuad.render(renderer);\n  }\n\n}\n\nconst CombineShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    strength: {\n      value: 1.0\n    }\n  },\n  vertexShader:\n  /* glsl */\n  `\n  varying vec2 vUv;\n  void main() {\n    vUv = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n  }`,\n  fragmentShader:\n  /* glsl */\n  `\n  uniform float strength;\n  uniform sampler2D tDiffuse;\n  varying vec2 vUv;\n  void main() {\n    vec4 texel = texture2D( tDiffuse, vUv );\n    gl_FragColor = strength * texel;\n  }`\n};\n\nexport { BloomPass };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}