{"ast":null,"code":"import { Mesh, PlaneGeometry, OrthographicCamera, MathUtils, WebGLRenderTarget, Vector2, RawShaderMaterial, NoBlending } from 'three';\n/**\n * This class generates custom mipmaps for a roughness map by encoding the lost variation in the\n * normal map mip levels as increased roughness in the corresponding roughness mip levels. This\n * helps with rendering accuracy for MeshStandardMaterial, and also helps with anti-aliasing when\n * using PMREM. If the normal map is larger than the roughness map, the roughness map will be\n * enlarged to match the dimensions of the normal map.\n */\n\nvar _mipmapMaterial = _getMipmapMaterial();\n\nvar _mesh = new Mesh(new PlaneGeometry(2, 2), _mipmapMaterial);\n\nvar _flatCamera = new OrthographicCamera(0, 1, 0, 1, 0, 1);\n\nvar _tempTarget = null;\nvar _renderer = null;\n\nfunction RoughnessMipmapper(renderer) {\n  _renderer = renderer;\n\n  _renderer.compile(_mesh, _flatCamera);\n}\n\nRoughnessMipmapper.prototype = {\n  constructor: RoughnessMipmapper,\n  generateMipmaps: function generateMipmaps(material) {\n    if ('roughnessMap' in material === false) return;\n    var roughnessMap = material.roughnessMap,\n        normalMap = material.normalMap;\n\n    if (roughnessMap === null || normalMap === null || !roughnessMap.generateMipmaps || material.userData.roughnessUpdated) {\n      return;\n    }\n\n    material.userData.roughnessUpdated = true;\n    var width = Math.max(roughnessMap.image.width, normalMap.image.width);\n    var height = Math.max(roughnessMap.image.height, normalMap.image.height);\n    if (!MathUtils.isPowerOfTwo(width) || !MathUtils.isPowerOfTwo(height)) return;\n\n    var oldTarget = _renderer.getRenderTarget();\n\n    var autoClear = _renderer.autoClear;\n    _renderer.autoClear = false;\n\n    if (_tempTarget === null || _tempTarget.width !== width || _tempTarget.height !== height) {\n      if (_tempTarget !== null) _tempTarget.dispose();\n      _tempTarget = new WebGLRenderTarget(width, height, {\n        depthBuffer: false\n      });\n      _tempTarget.scissorTest = true;\n    }\n\n    if (width !== roughnessMap.image.width || height !== roughnessMap.image.height) {\n      var params = {\n        wrapS: roughnessMap.wrapS,\n        wrapT: roughnessMap.wrapT,\n        magFilter: roughnessMap.magFilter,\n        minFilter: roughnessMap.minFilter,\n        depthBuffer: false\n      };\n      var newRoughnessTarget = new WebGLRenderTarget(width, height, params);\n      newRoughnessTarget.texture.generateMipmaps = true; // Setting the render target causes the memory to be allocated.\n\n      _renderer.setRenderTarget(newRoughnessTarget);\n\n      material.roughnessMap = newRoughnessTarget.texture;\n      if (material.metalnessMap == roughnessMap) material.metalnessMap = material.roughnessMap;\n      if (material.aoMap == roughnessMap) material.aoMap = material.roughnessMap;\n    }\n\n    _mipmapMaterial.uniforms.roughnessMap.value = roughnessMap;\n    _mipmapMaterial.uniforms.normalMap.value = normalMap;\n    var position = new Vector2(0, 0);\n    var texelSize = _mipmapMaterial.uniforms.texelSize.value;\n\n    for (var mip = 0; width >= 1 && height >= 1; ++mip, width /= 2, height /= 2) {\n      // Rendering to a mip level is not allowed in webGL1. Instead we must set\n      // up a secondary texture to write the result to, then copy it back to the\n      // proper mipmap level.\n      texelSize.set(1.0 / width, 1.0 / height);\n      if (mip == 0) texelSize.set(0.0, 0.0);\n\n      _tempTarget.viewport.set(position.x, position.y, width, height);\n\n      _tempTarget.scissor.set(position.x, position.y, width, height);\n\n      _renderer.setRenderTarget(_tempTarget);\n\n      _renderer.render(_mesh, _flatCamera);\n\n      _renderer.copyFramebufferToTexture(position, material.roughnessMap, mip);\n\n      _mipmapMaterial.uniforms.roughnessMap.value = material.roughnessMap;\n    }\n\n    if (roughnessMap !== material.roughnessMap) roughnessMap.dispose();\n\n    _renderer.setRenderTarget(oldTarget);\n\n    _renderer.autoClear = autoClear;\n  },\n  dispose: function dispose() {\n    _mipmapMaterial.dispose();\n\n    _mesh.geometry.dispose();\n\n    if (_tempTarget != null) _tempTarget.dispose();\n  }\n};\n\nfunction _getMipmapMaterial() {\n  var shaderMaterial = new RawShaderMaterial({\n    uniforms: {\n      roughnessMap: {\n        value: null\n      },\n      normalMap: {\n        value: null\n      },\n      texelSize: {\n        value: new Vector2(1, 1)\n      }\n    },\n    vertexShader:\n    /* glsl */\n    \"\\n\\t\\t\\tprecision mediump float;\\n\\t\\t\\tprecision mediump int;\\n\\n\\t\\t\\tattribute vec3 position;\\n\\t\\t\\tattribute vec2 uv;\\n\\n\\t\\t\\tvarying vec2 vUv;\\n\\n\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\tvUv = uv;\\n\\n\\t\\t\\t\\tgl_Position = vec4( position, 1.0 );\\n\\n\\t\\t\\t}\\n\\t\\t\",\n    fragmentShader:\n    /* glsl */\n    \"\\n\\t\\t\\tprecision mediump float;\\n\\t\\t\\tprecision mediump int;\\n\\n\\t\\t\\tvarying vec2 vUv;\\n\\n\\t\\t\\tuniform sampler2D roughnessMap;\\n\\t\\t\\tuniform sampler2D normalMap;\\n\\t\\t\\tuniform vec2 texelSize;\\n\\n\\t\\t\\t#define ENVMAP_TYPE_CUBE_UV\\n\\n\\t\\t\\tvec4 envMapTexelToLinear( vec4 a ) { return a; }\\n\\n\\t\\t\\t#include <cube_uv_reflection_fragment>\\n\\n\\t\\t\\tfloat roughnessToVariance( float roughness ) {\\n\\n\\t\\t\\t\\tfloat variance = 0.0;\\n\\n\\t\\t\\t\\tif ( roughness >= r1 ) {\\n\\n\\t\\t\\t\\t\\tvariance = ( r0 - roughness ) * ( v1 - v0 ) / ( r0 - r1 ) + v0;\\n\\n\\t\\t\\t\\t} else if ( roughness >= r4 ) {\\n\\n\\t\\t\\t\\t\\tvariance = ( r1 - roughness ) * ( v4 - v1 ) / ( r1 - r4 ) + v1;\\n\\n\\t\\t\\t\\t} else if ( roughness >= r5 ) {\\n\\n\\t\\t\\t\\t\\tvariance = ( r4 - roughness ) * ( v5 - v4 ) / ( r4 - r5 ) + v4;\\n\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\tfloat roughness2 = roughness * roughness;\\n\\n\\t\\t\\t\\t\\tvariance = 1.79 * roughness2 * roughness2;\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\treturn variance;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tfloat varianceToRoughness( float variance ) {\\n\\n\\t\\t\\t\\tfloat roughness = 0.0;\\n\\n\\t\\t\\t\\tif ( variance >= v1 ) {\\n\\n\\t\\t\\t\\t\\troughness = ( v0 - variance ) * ( r1 - r0 ) / ( v0 - v1 ) + r0;\\n\\n\\t\\t\\t\\t} else if ( variance >= v4 ) {\\n\\n\\t\\t\\t\\t\\troughness = ( v1 - variance ) * ( r4 - r1 ) / ( v1 - v4 ) + r1;\\n\\n\\t\\t\\t\\t} else if ( variance >= v5 ) {\\n\\n\\t\\t\\t\\t\\troughness = ( v4 - variance ) * ( r5 - r4 ) / ( v4 - v5 ) + r4;\\n\\n\\t\\t\\t\\t} else {\\n\\n\\t\\t\\t\\t\\troughness = pow( 0.559 * variance, 0.25 ); // 0.559 = 1.0 / 1.79\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\treturn roughness;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\tgl_FragColor = texture2D( roughnessMap, vUv, - 1.0 );\\n\\n\\t\\t\\t\\tif ( texelSize.x == 0.0 ) return;\\n\\n\\t\\t\\t\\tfloat roughness = gl_FragColor.g;\\n\\n\\t\\t\\t\\tfloat variance = roughnessToVariance( roughness );\\n\\n\\t\\t\\t\\tvec3 avgNormal;\\n\\n\\t\\t\\t\\tfor ( float x = - 1.0; x < 2.0; x += 2.0 ) {\\n\\n\\t\\t\\t\\t\\tfor ( float y = - 1.0; y < 2.0; y += 2.0 ) {\\n\\n\\t\\t\\t\\t\\t\\tvec2 uv = vUv + vec2( x, y ) * 0.25 * texelSize;\\n\\n\\t\\t\\t\\t\\t\\tavgNormal += normalize( texture2D( normalMap, uv, - 1.0 ).xyz - 0.5 );\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tvariance += 1.0 - 0.25 * length( avgNormal );\\n\\n\\t\\t\\t\\tgl_FragColor.g = varianceToRoughness( variance );\\n\\n\\t\\t\\t}\\n\\t\\t\",\n    blending: NoBlending,\n    depthTest: false,\n    depthWrite: false\n  });\n  shaderMaterial.type = 'RoughnessMipmapper';\n  return shaderMaterial;\n}\n\nexport { RoughnessMipmapper };","map":{"version":3,"names":["Mesh","PlaneGeometry","OrthographicCamera","MathUtils","WebGLRenderTarget","Vector2","RawShaderMaterial","NoBlending","_mipmapMaterial","_getMipmapMaterial","_mesh","_flatCamera","_tempTarget","_renderer","RoughnessMipmapper","renderer","compile","prototype","constructor","generateMipmaps","material","roughnessMap","normalMap","userData","roughnessUpdated","width","Math","max","image","height","isPowerOfTwo","oldTarget","getRenderTarget","autoClear","dispose","depthBuffer","scissorTest","params","wrapS","wrapT","magFilter","minFilter","newRoughnessTarget","texture","setRenderTarget","metalnessMap","aoMap","uniforms","value","position","texelSize","mip","set","viewport","x","y","scissor","render","copyFramebufferToTexture","geometry","shaderMaterial","vertexShader","fragmentShader","blending","depthTest","depthWrite","type"],"sources":["D:/Jord/l4fycy/node_modules/three-stdlib/utils/RoughnessMipmapper.js"],"sourcesContent":["import { Mesh, PlaneGeometry, OrthographicCamera, MathUtils, WebGLRenderTarget, Vector2, RawShaderMaterial, NoBlending } from 'three';\n\n/**\n * This class generates custom mipmaps for a roughness map by encoding the lost variation in the\n * normal map mip levels as increased roughness in the corresponding roughness mip levels. This\n * helps with rendering accuracy for MeshStandardMaterial, and also helps with anti-aliasing when\n * using PMREM. If the normal map is larger than the roughness map, the roughness map will be\n * enlarged to match the dimensions of the normal map.\n */\n\nvar _mipmapMaterial = _getMipmapMaterial();\n\nvar _mesh = new Mesh(new PlaneGeometry(2, 2), _mipmapMaterial);\n\nvar _flatCamera = new OrthographicCamera(0, 1, 0, 1, 0, 1);\n\nvar _tempTarget = null;\nvar _renderer = null;\n\nfunction RoughnessMipmapper(renderer) {\n  _renderer = renderer;\n\n  _renderer.compile(_mesh, _flatCamera);\n}\n\nRoughnessMipmapper.prototype = {\n  constructor: RoughnessMipmapper,\n  generateMipmaps: function (material) {\n    if ('roughnessMap' in material === false) return;\n    var {\n      roughnessMap,\n      normalMap\n    } = material;\n\n    if (roughnessMap === null || normalMap === null || !roughnessMap.generateMipmaps || material.userData.roughnessUpdated) {\n      return;\n    }\n\n    material.userData.roughnessUpdated = true;\n    var width = Math.max(roughnessMap.image.width, normalMap.image.width);\n    var height = Math.max(roughnessMap.image.height, normalMap.image.height);\n    if (!MathUtils.isPowerOfTwo(width) || !MathUtils.isPowerOfTwo(height)) return;\n\n    var oldTarget = _renderer.getRenderTarget();\n\n    var autoClear = _renderer.autoClear;\n    _renderer.autoClear = false;\n\n    if (_tempTarget === null || _tempTarget.width !== width || _tempTarget.height !== height) {\n      if (_tempTarget !== null) _tempTarget.dispose();\n      _tempTarget = new WebGLRenderTarget(width, height, {\n        depthBuffer: false\n      });\n      _tempTarget.scissorTest = true;\n    }\n\n    if (width !== roughnessMap.image.width || height !== roughnessMap.image.height) {\n      var params = {\n        wrapS: roughnessMap.wrapS,\n        wrapT: roughnessMap.wrapT,\n        magFilter: roughnessMap.magFilter,\n        minFilter: roughnessMap.minFilter,\n        depthBuffer: false\n      };\n      var newRoughnessTarget = new WebGLRenderTarget(width, height, params);\n      newRoughnessTarget.texture.generateMipmaps = true; // Setting the render target causes the memory to be allocated.\n\n      _renderer.setRenderTarget(newRoughnessTarget);\n\n      material.roughnessMap = newRoughnessTarget.texture;\n      if (material.metalnessMap == roughnessMap) material.metalnessMap = material.roughnessMap;\n      if (material.aoMap == roughnessMap) material.aoMap = material.roughnessMap;\n    }\n\n    _mipmapMaterial.uniforms.roughnessMap.value = roughnessMap;\n    _mipmapMaterial.uniforms.normalMap.value = normalMap;\n    var position = new Vector2(0, 0);\n    var texelSize = _mipmapMaterial.uniforms.texelSize.value;\n\n    for (let mip = 0; width >= 1 && height >= 1; ++mip, width /= 2, height /= 2) {\n      // Rendering to a mip level is not allowed in webGL1. Instead we must set\n      // up a secondary texture to write the result to, then copy it back to the\n      // proper mipmap level.\n      texelSize.set(1.0 / width, 1.0 / height);\n      if (mip == 0) texelSize.set(0.0, 0.0);\n\n      _tempTarget.viewport.set(position.x, position.y, width, height);\n\n      _tempTarget.scissor.set(position.x, position.y, width, height);\n\n      _renderer.setRenderTarget(_tempTarget);\n\n      _renderer.render(_mesh, _flatCamera);\n\n      _renderer.copyFramebufferToTexture(position, material.roughnessMap, mip);\n\n      _mipmapMaterial.uniforms.roughnessMap.value = material.roughnessMap;\n    }\n\n    if (roughnessMap !== material.roughnessMap) roughnessMap.dispose();\n\n    _renderer.setRenderTarget(oldTarget);\n\n    _renderer.autoClear = autoClear;\n  },\n  dispose: function () {\n    _mipmapMaterial.dispose();\n\n    _mesh.geometry.dispose();\n\n    if (_tempTarget != null) _tempTarget.dispose();\n  }\n};\n\nfunction _getMipmapMaterial() {\n  var shaderMaterial = new RawShaderMaterial({\n    uniforms: {\n      roughnessMap: {\n        value: null\n      },\n      normalMap: {\n        value: null\n      },\n      texelSize: {\n        value: new Vector2(1, 1)\n      }\n    },\n    vertexShader:\n    /* glsl */\n    `\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tattribute vec3 position;\n\t\t\tattribute vec2 uv;\n\n\t\t\tvarying vec2 vUv;\n\n\t\t\tvoid main() {\n\n\t\t\t\tvUv = uv;\n\n\t\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t\t}\n\t\t`,\n    fragmentShader:\n    /* glsl */\n    `\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec2 vUv;\n\n\t\t\tuniform sampler2D roughnessMap;\n\t\t\tuniform sampler2D normalMap;\n\t\t\tuniform vec2 texelSize;\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\n\t\t\tvec4 envMapTexelToLinear( vec4 a ) { return a; }\n\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tfloat roughnessToVariance( float roughness ) {\n\n\t\t\t\tfloat variance = 0.0;\n\n\t\t\t\tif ( roughness >= r1 ) {\n\n\t\t\t\t\tvariance = ( r0 - roughness ) * ( v1 - v0 ) / ( r0 - r1 ) + v0;\n\n\t\t\t\t} else if ( roughness >= r4 ) {\n\n\t\t\t\t\tvariance = ( r1 - roughness ) * ( v4 - v1 ) / ( r1 - r4 ) + v1;\n\n\t\t\t\t} else if ( roughness >= r5 ) {\n\n\t\t\t\t\tvariance = ( r4 - roughness ) * ( v5 - v4 ) / ( r4 - r5 ) + v4;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfloat roughness2 = roughness * roughness;\n\n\t\t\t\t\tvariance = 1.79 * roughness2 * roughness2;\n\n\t\t\t\t}\n\n\t\t\t\treturn variance;\n\n\t\t\t}\n\n\t\t\tfloat varianceToRoughness( float variance ) {\n\n\t\t\t\tfloat roughness = 0.0;\n\n\t\t\t\tif ( variance >= v1 ) {\n\n\t\t\t\t\troughness = ( v0 - variance ) * ( r1 - r0 ) / ( v0 - v1 ) + r0;\n\n\t\t\t\t} else if ( variance >= v4 ) {\n\n\t\t\t\t\troughness = ( v1 - variance ) * ( r4 - r1 ) / ( v1 - v4 ) + r1;\n\n\t\t\t\t} else if ( variance >= v5 ) {\n\n\t\t\t\t\troughness = ( v4 - variance ) * ( r5 - r4 ) / ( v4 - v5 ) + r4;\n\n\t\t\t\t} else {\n\n\t\t\t\t\troughness = pow( 0.559 * variance, 0.25 ); // 0.559 = 1.0 / 1.79\n\n\t\t\t\t}\n\n\t\t\t\treturn roughness;\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = texture2D( roughnessMap, vUv, - 1.0 );\n\n\t\t\t\tif ( texelSize.x == 0.0 ) return;\n\n\t\t\t\tfloat roughness = gl_FragColor.g;\n\n\t\t\t\tfloat variance = roughnessToVariance( roughness );\n\n\t\t\t\tvec3 avgNormal;\n\n\t\t\t\tfor ( float x = - 1.0; x < 2.0; x += 2.0 ) {\n\n\t\t\t\t\tfor ( float y = - 1.0; y < 2.0; y += 2.0 ) {\n\n\t\t\t\t\t\tvec2 uv = vUv + vec2( x, y ) * 0.25 * texelSize;\n\n\t\t\t\t\t\tavgNormal += normalize( texture2D( normalMap, uv, - 1.0 ).xyz - 0.5 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvariance += 1.0 - 0.25 * length( avgNormal );\n\n\t\t\t\tgl_FragColor.g = varianceToRoughness( variance );\n\n\t\t\t}\n\t\t`,\n    blending: NoBlending,\n    depthTest: false,\n    depthWrite: false\n  });\n  shaderMaterial.type = 'RoughnessMipmapper';\n  return shaderMaterial;\n}\n\nexport { RoughnessMipmapper };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}