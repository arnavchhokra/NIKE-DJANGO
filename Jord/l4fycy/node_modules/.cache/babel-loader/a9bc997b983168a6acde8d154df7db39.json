{"ast":null,"code":"/**\n * Full-screen tone-mapping shader based on http://www.cis.rit.edu/people/faculty/ferwerda/publications/sig02_paper.pdf\n */\nvar ToneMapShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    averageLuminance: {\n      value: 1.0\n    },\n    luminanceMap: {\n      value: null\n    },\n    maxLuminance: {\n      value: 16.0\n    },\n    minLuminance: {\n      value: 0.01\n    },\n    middleGrey: {\n      value: 0.6\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['#include <common>', 'uniform sampler2D tDiffuse;', 'varying vec2 vUv;', 'uniform float middleGrey;', 'uniform float minLuminance;', 'uniform float maxLuminance;', '#ifdef ADAPTED_LUMINANCE', '\tuniform sampler2D luminanceMap;', '#else', '\tuniform float averageLuminance;', '#endif', 'vec3 ToneMap( vec3 vColor ) {', '\t#ifdef ADAPTED_LUMINANCE', // Get the calculated average luminance\n  '\t\tfloat fLumAvg = texture2D(luminanceMap, vec2(0.5, 0.5)).r;', '\t#else', '\t\tfloat fLumAvg = averageLuminance;', '\t#endif', // Calculate the luminance of the current pixel\n  '\tfloat fLumPixel = linearToRelativeLuminance( vColor );', // Apply the modified operator (Eq. 4)\n  '\tfloat fLumScaled = (fLumPixel * middleGrey) / max( minLuminance, fLumAvg );', '\tfloat fLumCompressed = (fLumScaled * (1.0 + (fLumScaled / (maxLuminance * maxLuminance)))) / (1.0 + fLumScaled);', '\treturn fLumCompressed * vColor;', '}', 'void main() {', '\tvec4 texel = texture2D( tDiffuse, vUv );', '\tgl_FragColor = vec4( ToneMap( texel.xyz ), texel.w );', '}'].join('\\n')\n};\nexport { ToneMapShader };","map":{"version":3,"names":["ToneMapShader","uniforms","tDiffuse","value","averageLuminance","luminanceMap","maxLuminance","minLuminance","middleGrey","vertexShader","join","fragmentShader"],"sources":["C:/Users/Arnav/Downloads/l4fycy/node_modules/three-stdlib/shaders/ToneMapShader.js"],"sourcesContent":["/**\n * Full-screen tone-mapping shader based on http://www.cis.rit.edu/people/faculty/ferwerda/publications/sig02_paper.pdf\n */\nconst ToneMapShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    averageLuminance: {\n      value: 1.0\n    },\n    luminanceMap: {\n      value: null\n    },\n    maxLuminance: {\n      value: 16.0\n    },\n    minLuminance: {\n      value: 0.01\n    },\n    middleGrey: {\n      value: 0.6\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['#include <common>', 'uniform sampler2D tDiffuse;', 'varying vec2 vUv;', 'uniform float middleGrey;', 'uniform float minLuminance;', 'uniform float maxLuminance;', '#ifdef ADAPTED_LUMINANCE', '\tuniform sampler2D luminanceMap;', '#else', '\tuniform float averageLuminance;', '#endif', 'vec3 ToneMap( vec3 vColor ) {', '\t#ifdef ADAPTED_LUMINANCE', // Get the calculated average luminance\n  '\t\tfloat fLumAvg = texture2D(luminanceMap, vec2(0.5, 0.5)).r;', '\t#else', '\t\tfloat fLumAvg = averageLuminance;', '\t#endif', // Calculate the luminance of the current pixel\n  '\tfloat fLumPixel = linearToRelativeLuminance( vColor );', // Apply the modified operator (Eq. 4)\n  '\tfloat fLumScaled = (fLumPixel * middleGrey) / max( minLuminance, fLumAvg );', '\tfloat fLumCompressed = (fLumScaled * (1.0 + (fLumScaled / (maxLuminance * maxLuminance)))) / (1.0 + fLumScaled);', '\treturn fLumCompressed * vColor;', '}', 'void main() {', '\tvec4 texel = texture2D( tDiffuse, vUv );', '\tgl_FragColor = vec4( ToneMap( texel.xyz ), texel.w );', '}'].join('\\n')\n};\n\nexport { ToneMapShader };\n"],"mappings":"AAAA;AACA;AACA;AACA,IAAMA,aAAa,GAAG;EACpBC,QAAQ,EAAE;IACRC,QAAQ,EAAE;MACRC,KAAK,EAAE;IADC,CADF;IAIRC,gBAAgB,EAAE;MAChBD,KAAK,EAAE;IADS,CAJV;IAORE,YAAY,EAAE;MACZF,KAAK,EAAE;IADK,CAPN;IAURG,YAAY,EAAE;MACZH,KAAK,EAAE;IADK,CAVN;IAaRI,YAAY,EAAE;MACZJ,KAAK,EAAE;IADK,CAbN;IAgBRK,UAAU,EAAE;MACVL,KAAK,EAAE;IADG;EAhBJ,CADU;EAqBpBM,YAAY,EAAE,CAAC,mBAAD,EAAsB,eAAtB,EAAuC,YAAvC,EAAqD,4EAArD,EAAmI,GAAnI,EAAwIC,IAAxI,CAA6I,IAA7I,CArBM;EAsBpBC,cAAc,EAAE,CAAC,mBAAD,EAAsB,6BAAtB,EAAqD,mBAArD,EAA0E,2BAA1E,EAAuG,6BAAvG,EAAsI,6BAAtI,EAAqK,0BAArK,EAAiM,kCAAjM,EAAqO,OAArO,EAA8O,kCAA9O,EAAkR,QAAlR,EAA4R,+BAA5R,EAA6T,2BAA7T,EAA0V;EAC1W,8DADgB,EACgD,QADhD,EAC0D,qCAD1D,EACiG,SADjG,EAC4G;EAC5H,yDAFgB,EAE2C;EAC3D,8EAHgB,EAGgE,mHAHhE,EAGqL,kCAHrL,EAGyN,GAHzN,EAG8N,eAH9N,EAG+O,2CAH/O,EAG4R,wDAH5R,EAGsV,GAHtV,EAG2VD,IAH3V,CAGgW,IAHhW;AAtBI,CAAtB;AA4BA,SAASV,aAAT"},"metadata":{},"sourceType":"module"}