{"ast":null,"code":"import _regeneratorRuntime from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { CompressedTextureLoader, CompressedTexture, FileLoader, sRGBEncoding, LinearEncoding } from 'three';\nimport { BasisTextureLoader } from './BasisTextureLoader.js';\nimport { ZSTDDecoder } from 'zstddec';\nimport { read, KTX2Model, KTX2Transfer, KTX2SupercompressionScheme, KTX2ChannelUASTC, KTX2ChannelETC1S, KTX2Flags } from 'ktx-parse';\n/**\n * Loader for KTX 2.0 GPU Texture containers.\n *\n * KTX 2.0 is a container format for various GPU texture formats. The loader\n * supports Basis Universal GPU textures, which can be quickly transcoded to\n * a wide variety of GPU texture compression formats. While KTX 2.0 also allows\n * other hardware-specific formats, this loader does not yet parse them.\n *\n * This loader parses the KTX 2.0 container and then relies on\n * THREE.BasisTextureLoader to complete the transcoding process.\n *\n * References:\n * - KTX: http://github.khronos.org/KTX-Specification/\n * - DFD: https://www.khronos.org/registry/DataFormat/specs/1.3/dataformat.1.3.html#basicdescriptor\n */\n\nvar KTX2Loader = /*#__PURE__*/function (_CompressedTextureLoa) {\n  _inherits(KTX2Loader, _CompressedTextureLoa);\n\n  var _super = _createSuper(KTX2Loader);\n\n  function KTX2Loader(manager) {\n    var _this;\n\n    _classCallCheck(this, KTX2Loader);\n\n    _this = _super.call(this, manager);\n    _this.basisLoader = new BasisTextureLoader(manager);\n    _this.zstd = new ZSTDDecoder();\n\n    _this.zstd.init();\n\n    if (typeof MSC_TRANSCODER !== 'undefined') {\n      console.warn('THREE.KTX2Loader: Please update to latest \"basis_transcoder\".' + ' \"msc_basis_transcoder\" is no longer supported in three.js r125+.');\n    }\n\n    return _this;\n  }\n\n  _createClass(KTX2Loader, [{\n    key: \"setTranscoderPath\",\n    value: function setTranscoderPath(path) {\n      this.basisLoader.setTranscoderPath(path);\n      return this;\n    }\n  }, {\n    key: \"setWorkerLimit\",\n    value: function setWorkerLimit(path) {\n      this.basisLoader.setWorkerLimit(path);\n      return this;\n    }\n  }, {\n    key: \"detectSupport\",\n    value: function detectSupport(renderer) {\n      this.basisLoader.detectSupport(renderer);\n      return this;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.basisLoader.dispose();\n      return this;\n    }\n  }, {\n    key: \"load\",\n    value: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var texture = new CompressedTexture();\n      var bufferPending = new Promise(function (resolve, reject) {\n        new FileLoader(scope.manager).setPath(scope.path).setResponseType('arraybuffer').load(url, resolve, onProgress, reject);\n      });\n      bufferPending.then(function (buffer) {\n        scope.parse(buffer, function (_texture) {\n          texture.copy(_texture);\n          texture.needsUpdate = true;\n          if (onLoad) onLoad(texture);\n        }, onError);\n      }).catch(onError);\n      return texture;\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(buffer, onLoad, onError) {\n      var scope = this;\n      var ktx = read(new Uint8Array(buffer));\n\n      if (ktx.pixelDepth > 0) {\n        throw new Error('THREE.KTX2Loader: Only 2D textures are currently supported.');\n      }\n\n      if (ktx.layerCount > 1) {\n        throw new Error('THREE.KTX2Loader: Array textures are not currently supported.');\n      }\n\n      if (ktx.faceCount > 1) {\n        throw new Error('THREE.KTX2Loader: Cube textures are not currently supported.');\n      }\n\n      var dfd = KTX2Utils.getBasicDFD(ktx);\n      KTX2Utils.createLevels(ktx, this.zstd).then(function (levels) {\n        var basisFormat = dfd.colorModel === KTX2Model.UASTC ? BasisTextureLoader.BasisFormat.UASTC_4x4 : BasisTextureLoader.BasisFormat.ETC1S;\n        var parseConfig = {\n          levels: levels,\n          width: ktx.pixelWidth,\n          height: ktx.pixelHeight,\n          basisFormat: basisFormat,\n          hasAlpha: KTX2Utils.getAlpha(ktx)\n        };\n\n        if (basisFormat === BasisTextureLoader.BasisFormat.ETC1S) {\n          parseConfig.globalData = ktx.globalData;\n        }\n\n        return scope.basisLoader.parseInternalAsync(parseConfig);\n      }).then(function (texture) {\n        texture.encoding = dfd.transferFunction === KTX2Transfer.SRGB ? sRGBEncoding : LinearEncoding;\n        texture.premultiplyAlpha = KTX2Utils.getPremultiplyAlpha(ktx);\n        onLoad(texture);\n      }).catch(onError);\n      return this;\n    }\n  }]);\n\n  return KTX2Loader;\n}(CompressedTextureLoader);\n\nvar KTX2Utils = {\n  createLevels: function () {\n    var _createLevels = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(ktx, zstd) {\n      var levels, width, height, levelIndex, levelWidth, levelHeight, levelData;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(ktx.supercompressionScheme === KTX2SupercompressionScheme.ZSTD)) {\n                _context.next = 3;\n                break;\n              }\n\n              _context.next = 3;\n              return zstd.init();\n\n            case 3:\n              levels = [];\n              width = ktx.pixelWidth;\n              height = ktx.pixelHeight;\n\n              for (levelIndex = 0; levelIndex < ktx.levels.length; levelIndex++) {\n                levelWidth = Math.max(1, Math.floor(width / Math.pow(2, levelIndex)));\n                levelHeight = Math.max(1, Math.floor(height / Math.pow(2, levelIndex)));\n                levelData = ktx.levels[levelIndex].levelData;\n\n                if (ktx.supercompressionScheme === KTX2SupercompressionScheme.ZSTD) {\n                  levelData = zstd.decode(levelData, ktx.levels[levelIndex].uncompressedByteLength);\n                }\n\n                levels.push({\n                  index: levelIndex,\n                  width: levelWidth,\n                  height: levelHeight,\n                  data: levelData\n                });\n              }\n\n              return _context.abrupt(\"return\", levels);\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function createLevels(_x, _x2) {\n      return _createLevels.apply(this, arguments);\n    }\n\n    return createLevels;\n  }(),\n  getBasicDFD: function getBasicDFD(ktx) {\n    // Basic Data Format Descriptor Block is always the first DFD.\n    return ktx.dataFormatDescriptor[0];\n  },\n  getAlpha: function getAlpha(ktx) {\n    var dfd = this.getBasicDFD(ktx); // UASTC\n\n    if (dfd.colorModel === KTX2Model.UASTC) {\n      if ((dfd.samples[0].channelID & 0xf) === KTX2ChannelUASTC.RGBA) {\n        return true;\n      }\n\n      return false;\n    } // ETC1S\n\n\n    if (dfd.samples.length === 2 && (dfd.samples[1].channelID & 0xf) === KTX2ChannelETC1S.AAA) {\n      return true;\n    }\n\n    return false;\n  },\n  getPremultiplyAlpha: function getPremultiplyAlpha(ktx) {\n    var dfd = this.getBasicDFD(ktx);\n    return !!(dfd.flags & KTX2Flags.ALPHA_PREMULTIPLIED);\n  }\n};\nexport { KTX2Loader };","map":{"version":3,"names":["CompressedTextureLoader","CompressedTexture","FileLoader","sRGBEncoding","LinearEncoding","BasisTextureLoader","ZSTDDecoder","read","KTX2Model","KTX2Transfer","KTX2SupercompressionScheme","KTX2ChannelUASTC","KTX2ChannelETC1S","KTX2Flags","KTX2Loader","manager","basisLoader","zstd","init","MSC_TRANSCODER","console","warn","path","setTranscoderPath","setWorkerLimit","renderer","detectSupport","dispose","url","onLoad","onProgress","onError","scope","texture","bufferPending","Promise","resolve","reject","setPath","setResponseType","load","then","buffer","parse","_texture","copy","needsUpdate","catch","ktx","Uint8Array","pixelDepth","Error","layerCount","faceCount","dfd","KTX2Utils","getBasicDFD","createLevels","levels","basisFormat","colorModel","UASTC","BasisFormat","UASTC_4x4","ETC1S","parseConfig","width","pixelWidth","height","pixelHeight","hasAlpha","getAlpha","globalData","parseInternalAsync","encoding","transferFunction","SRGB","premultiplyAlpha","getPremultiplyAlpha","supercompressionScheme","ZSTD","levelIndex","length","levelWidth","Math","max","floor","pow","levelHeight","levelData","decode","uncompressedByteLength","push","index","data","dataFormatDescriptor","samples","channelID","RGBA","AAA","flags","ALPHA_PREMULTIPLIED"],"sources":["D:/Jord/l4fycy/node_modules/three-stdlib/loaders/KTX2Loader.js"],"sourcesContent":["import { CompressedTextureLoader, CompressedTexture, FileLoader, sRGBEncoding, LinearEncoding } from 'three';\nimport { BasisTextureLoader } from './BasisTextureLoader.js';\nimport { ZSTDDecoder } from 'zstddec';\nimport { read, KTX2Model, KTX2Transfer, KTX2SupercompressionScheme, KTX2ChannelUASTC, KTX2ChannelETC1S, KTX2Flags } from 'ktx-parse';\n\n/**\n * Loader for KTX 2.0 GPU Texture containers.\n *\n * KTX 2.0 is a container format for various GPU texture formats. The loader\n * supports Basis Universal GPU textures, which can be quickly transcoded to\n * a wide variety of GPU texture compression formats. While KTX 2.0 also allows\n * other hardware-specific formats, this loader does not yet parse them.\n *\n * This loader parses the KTX 2.0 container and then relies on\n * THREE.BasisTextureLoader to complete the transcoding process.\n *\n * References:\n * - KTX: http://github.khronos.org/KTX-Specification/\n * - DFD: https://www.khronos.org/registry/DataFormat/specs/1.3/dataformat.1.3.html#basicdescriptor\n */\n\nclass KTX2Loader extends CompressedTextureLoader {\n  constructor(manager) {\n    super(manager);\n    this.basisLoader = new BasisTextureLoader(manager);\n    this.zstd = new ZSTDDecoder();\n    this.zstd.init();\n\n    if (typeof MSC_TRANSCODER !== 'undefined') {\n      console.warn('THREE.KTX2Loader: Please update to latest \"basis_transcoder\".' + ' \"msc_basis_transcoder\" is no longer supported in three.js r125+.');\n    }\n  }\n\n  setTranscoderPath(path) {\n    this.basisLoader.setTranscoderPath(path);\n    return this;\n  }\n\n  setWorkerLimit(path) {\n    this.basisLoader.setWorkerLimit(path);\n    return this;\n  }\n\n  detectSupport(renderer) {\n    this.basisLoader.detectSupport(renderer);\n    return this;\n  }\n\n  dispose() {\n    this.basisLoader.dispose();\n    return this;\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    var scope = this;\n    var texture = new CompressedTexture();\n    var bufferPending = new Promise(function (resolve, reject) {\n      new FileLoader(scope.manager).setPath(scope.path).setResponseType('arraybuffer').load(url, resolve, onProgress, reject);\n    });\n    bufferPending.then(function (buffer) {\n      scope.parse(buffer, function (_texture) {\n        texture.copy(_texture);\n        texture.needsUpdate = true;\n        if (onLoad) onLoad(texture);\n      }, onError);\n    }).catch(onError);\n    return texture;\n  }\n\n  parse(buffer, onLoad, onError) {\n    var scope = this;\n    var ktx = read(new Uint8Array(buffer));\n\n    if (ktx.pixelDepth > 0) {\n      throw new Error('THREE.KTX2Loader: Only 2D textures are currently supported.');\n    }\n\n    if (ktx.layerCount > 1) {\n      throw new Error('THREE.KTX2Loader: Array textures are not currently supported.');\n    }\n\n    if (ktx.faceCount > 1) {\n      throw new Error('THREE.KTX2Loader: Cube textures are not currently supported.');\n    }\n\n    var dfd = KTX2Utils.getBasicDFD(ktx);\n    KTX2Utils.createLevels(ktx, this.zstd).then(function (levels) {\n      var basisFormat = dfd.colorModel === KTX2Model.UASTC ? BasisTextureLoader.BasisFormat.UASTC_4x4 : BasisTextureLoader.BasisFormat.ETC1S;\n      var parseConfig = {\n        levels: levels,\n        width: ktx.pixelWidth,\n        height: ktx.pixelHeight,\n        basisFormat: basisFormat,\n        hasAlpha: KTX2Utils.getAlpha(ktx)\n      };\n\n      if (basisFormat === BasisTextureLoader.BasisFormat.ETC1S) {\n        parseConfig.globalData = ktx.globalData;\n      }\n\n      return scope.basisLoader.parseInternalAsync(parseConfig);\n    }).then(function (texture) {\n      texture.encoding = dfd.transferFunction === KTX2Transfer.SRGB ? sRGBEncoding : LinearEncoding;\n      texture.premultiplyAlpha = KTX2Utils.getPremultiplyAlpha(ktx);\n      onLoad(texture);\n    }).catch(onError);\n    return this;\n  }\n\n}\n\nvar KTX2Utils = {\n  createLevels: async function (ktx, zstd) {\n    if (ktx.supercompressionScheme === KTX2SupercompressionScheme.ZSTD) {\n      await zstd.init();\n    }\n\n    var levels = [];\n    var width = ktx.pixelWidth;\n    var height = ktx.pixelHeight;\n\n    for (var levelIndex = 0; levelIndex < ktx.levels.length; levelIndex++) {\n      var levelWidth = Math.max(1, Math.floor(width / Math.pow(2, levelIndex)));\n      var levelHeight = Math.max(1, Math.floor(height / Math.pow(2, levelIndex)));\n      var levelData = ktx.levels[levelIndex].levelData;\n\n      if (ktx.supercompressionScheme === KTX2SupercompressionScheme.ZSTD) {\n        levelData = zstd.decode(levelData, ktx.levels[levelIndex].uncompressedByteLength);\n      }\n\n      levels.push({\n        index: levelIndex,\n        width: levelWidth,\n        height: levelHeight,\n        data: levelData\n      });\n    }\n\n    return levels;\n  },\n  getBasicDFD: function (ktx) {\n    // Basic Data Format Descriptor Block is always the first DFD.\n    return ktx.dataFormatDescriptor[0];\n  },\n  getAlpha: function (ktx) {\n    var dfd = this.getBasicDFD(ktx); // UASTC\n\n    if (dfd.colorModel === KTX2Model.UASTC) {\n      if ((dfd.samples[0].channelID & 0xf) === KTX2ChannelUASTC.RGBA) {\n        return true;\n      }\n\n      return false;\n    } // ETC1S\n\n\n    if (dfd.samples.length === 2 && (dfd.samples[1].channelID & 0xf) === KTX2ChannelETC1S.AAA) {\n      return true;\n    }\n\n    return false;\n  },\n  getPremultiplyAlpha: function (ktx) {\n    var dfd = this.getBasicDFD(ktx);\n    return !!(dfd.flags & KTX2Flags.ALPHA_PREMULTIPLIED);\n  }\n};\n\nexport { KTX2Loader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}