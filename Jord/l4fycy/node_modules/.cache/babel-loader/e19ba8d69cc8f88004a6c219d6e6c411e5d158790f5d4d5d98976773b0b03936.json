{"ast":null,"code":"'use client';\n\nimport { __publicField, getNextIndex, getPrevIndex, isElement, sortNodes } from \"./chunk-3A5YOZDU.mjs\";\n\n// src/descendant.ts\nvar DescendantsManager = class {\n  constructor() {\n    var _this = this;\n    __publicField(this, \"descendants\", /* @__PURE__ */new Map());\n    __publicField(this, \"register\", nodeOrOptions => {\n      if (nodeOrOptions == null) return;\n      if (isElement(nodeOrOptions)) {\n        return this.registerNode(nodeOrOptions);\n      }\n      return node => {\n        this.registerNode(node, nodeOrOptions);\n      };\n    });\n    __publicField(this, \"unregister\", node => {\n      this.descendants.delete(node);\n      const sorted = sortNodes(Array.from(this.descendants.keys()));\n      this.assignIndex(sorted);\n    });\n    __publicField(this, \"destroy\", () => {\n      this.descendants.clear();\n    });\n    __publicField(this, \"assignIndex\", descendants => {\n      this.descendants.forEach(descendant => {\n        const index = descendants.indexOf(descendant.node);\n        descendant.index = index;\n        descendant.node.dataset[\"index\"] = descendant.index.toString();\n      });\n    });\n    __publicField(this, \"count\", () => this.descendants.size);\n    __publicField(this, \"enabledCount\", () => this.enabledValues().length);\n    __publicField(this, \"values\", () => {\n      const values = Array.from(this.descendants.values());\n      return values.sort((a, b) => a.index - b.index);\n    });\n    __publicField(this, \"enabledValues\", () => {\n      return this.values().filter(descendant => !descendant.disabled);\n    });\n    __publicField(this, \"item\", index => {\n      if (this.count() === 0) return void 0;\n      return this.values()[index];\n    });\n    __publicField(this, \"enabledItem\", index => {\n      if (this.enabledCount() === 0) return void 0;\n      return this.enabledValues()[index];\n    });\n    __publicField(this, \"first\", () => this.item(0));\n    __publicField(this, \"firstEnabled\", () => this.enabledItem(0));\n    __publicField(this, \"last\", () => this.item(this.descendants.size - 1));\n    __publicField(this, \"lastEnabled\", () => {\n      const lastIndex = this.enabledValues().length - 1;\n      return this.enabledItem(lastIndex);\n    });\n    __publicField(this, \"indexOf\", node => {\n      var _a, _b;\n      if (!node) return -1;\n      return (_b = (_a = this.descendants.get(node)) == null ? void 0 : _a.index) != null ? _b : -1;\n    });\n    __publicField(this, \"enabledIndexOf\", node => {\n      if (node == null) return -1;\n      return this.enabledValues().findIndex(i => i.node.isSameNode(node));\n    });\n    __publicField(this, \"next\", function (index) {\n      let loop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      const next = getNextIndex(index, _this.count(), loop);\n      return _this.item(next);\n    });\n    __publicField(this, \"nextEnabled\", function (index) {\n      let loop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      const item = _this.item(index);\n      if (!item) return;\n      const enabledIndex = _this.enabledIndexOf(item.node);\n      const nextEnabledIndex = getNextIndex(enabledIndex, _this.enabledCount(), loop);\n      return _this.enabledItem(nextEnabledIndex);\n    });\n    __publicField(this, \"prev\", function (index) {\n      let loop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      const prev = getPrevIndex(index, _this.count() - 1, loop);\n      return _this.item(prev);\n    });\n    __publicField(this, \"prevEnabled\", function (index) {\n      let loop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      const item = _this.item(index);\n      if (!item) return;\n      const enabledIndex = _this.enabledIndexOf(item.node);\n      const prevEnabledIndex = getPrevIndex(enabledIndex, _this.enabledCount() - 1, loop);\n      return _this.enabledItem(prevEnabledIndex);\n    });\n    __publicField(this, \"registerNode\", (node, options) => {\n      if (!node || this.descendants.has(node)) return;\n      const keys = Array.from(this.descendants.keys()).concat(node);\n      const sorted = sortNodes(keys);\n      if (options == null ? void 0 : options.disabled) {\n        options.disabled = !!options.disabled;\n      }\n      const descendant = {\n        node,\n        index: -1,\n        ...options\n      };\n      this.descendants.set(node, descendant);\n      this.assignIndex(sorted);\n    });\n  }\n};\nexport { DescendantsManager };","map":{"version":3,"names":["DescendantsManager","constructor","_this","__publicField","Map","nodeOrOptions","isElement","registerNode","node","descendants","delete","sorted","sortNodes","Array","from","keys","assignIndex","clear","forEach","descendant","index","indexOf","dataset","toString","size","enabledValues","length","values","sort","a","b","filter","disabled","count","enabledCount","item","enabledItem","lastIndex","_a","_b","get","findIndex","i","isSameNode","loop","arguments","undefined","next","getNextIndex","enabledIndex","enabledIndexOf","nextEnabledIndex","prev","getPrevIndex","prevEnabledIndex","options","has","concat","set"],"sources":["D:\\Github\\NIKE-DJANGO\\Jord\\l4fycy\\node_modules\\@chakra-ui\\descendant\\src\\descendant.ts"],"sourcesContent":["import { sortNodes, isElement, getNextIndex, getPrevIndex } from \"./utils\"\n\nexport type DescendantOptions<T = {}> = T & {\n  /**\n   * If `true`, the item will be registered in all nodes map\n   * but omitted from enabled nodes map\n   */\n  disabled?: boolean\n  /**\n   * The id of the item\n   */\n  id?: string\n}\n\nexport type Descendant<T, K> = DescendantOptions<K> & {\n  /**\n   * DOM element of the item\n   */\n  node: T\n  /**\n   * index of item in all nodes map and enabled nodes map\n   */\n  index: number\n}\n\n/**\n * @internal\n *\n * Class to manage descendants and their relative indices in the DOM.\n * It uses `node.compareDocumentPosition(...)` under the hood\n */\nexport class DescendantsManager<\n  T extends HTMLElement,\n  K extends Record<string, any> = {},\n> {\n  private descendants = new Map<T, Descendant<T, K>>()\n\n  register = (nodeOrOptions: T | null | DescendantOptions<K>) => {\n    if (nodeOrOptions == null) return\n\n    if (isElement(nodeOrOptions)) {\n      return this.registerNode(nodeOrOptions)\n    }\n\n    return (node: T | null) => {\n      this.registerNode(node, nodeOrOptions)\n    }\n  }\n\n  unregister = (node: T) => {\n    this.descendants.delete(node)\n    const sorted = sortNodes(Array.from(this.descendants.keys()))\n    this.assignIndex(sorted)\n  }\n\n  destroy = () => {\n    this.descendants.clear()\n  }\n\n  private assignIndex = (descendants: Node[]) => {\n    this.descendants.forEach((descendant) => {\n      const index = descendants.indexOf(descendant.node)\n      descendant.index = index\n      descendant.node.dataset[\"index\"] = descendant.index.toString()\n    })\n  }\n\n  count = () => this.descendants.size\n\n  enabledCount = () => this.enabledValues().length\n\n  values = () => {\n    const values = Array.from(this.descendants.values())\n    return values.sort((a, b) => a.index - b.index)\n  }\n\n  enabledValues = () => {\n    return this.values().filter((descendant) => !descendant.disabled)\n  }\n\n  item = (index: number) => {\n    if (this.count() === 0) return undefined\n    return this.values()[index]\n  }\n\n  enabledItem = (index: number) => {\n    if (this.enabledCount() === 0) return undefined\n    return this.enabledValues()[index]\n  }\n\n  first = () => this.item(0)\n\n  firstEnabled = () => this.enabledItem(0)\n\n  last = () => this.item(this.descendants.size - 1)\n\n  lastEnabled = () => {\n    const lastIndex = this.enabledValues().length - 1\n    return this.enabledItem(lastIndex)\n  }\n\n  indexOf = (node: T | null) => {\n    if (!node) return -1\n    return this.descendants.get(node)?.index ?? -1\n  }\n\n  enabledIndexOf = (node: T | null) => {\n    if (node == null) return -1\n    return this.enabledValues().findIndex((i) => i.node.isSameNode(node))\n  }\n\n  next = (index: number, loop = true) => {\n    const next = getNextIndex(index, this.count(), loop)\n    return this.item(next)\n  }\n\n  nextEnabled = (index: number, loop = true) => {\n    const item = this.item(index)\n    if (!item) return\n    const enabledIndex = this.enabledIndexOf(item.node)\n    const nextEnabledIndex = getNextIndex(\n      enabledIndex,\n      this.enabledCount(),\n      loop,\n    )\n    return this.enabledItem(nextEnabledIndex)\n  }\n\n  prev = (index: number, loop = true) => {\n    const prev = getPrevIndex(index, this.count() - 1, loop)\n    return this.item(prev)\n  }\n\n  prevEnabled = (index: number, loop = true) => {\n    const item = this.item(index)\n    if (!item) return\n    const enabledIndex = this.enabledIndexOf(item.node)\n    const prevEnabledIndex = getPrevIndex(\n      enabledIndex,\n      this.enabledCount() - 1,\n      loop,\n    )\n    return this.enabledItem(prevEnabledIndex)\n  }\n\n  private registerNode = (node: T | null, options?: DescendantOptions<K>) => {\n    if (!node || this.descendants.has(node)) return\n\n    const keys = Array.from(this.descendants.keys()).concat(node)\n    const sorted = sortNodes(keys)\n\n    if (options?.disabled) {\n      options.disabled = !!options.disabled\n    }\n\n    const descendant = { node, index: -1, ...options }\n\n    this.descendants.set(node, descendant as Descendant<T, K>)\n\n    this.assignIndex(sorted)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}