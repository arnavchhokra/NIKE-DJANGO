{"ast":null,"code":"import { Vector3 } from 'three';\n/**\n * Generates 2D-Coordinates in a very fast way.\n *\n * Based on work by:\n * @link http://www.openprocessing.org/sketch/15493\n *\n * @param center     Center of Hilbert curve.\n * @param size       Total width of Hilbert curve.\n * @param iterations Number of subdivisions.\n * @param v0         Corner index -X, -Z.\n * @param v1         Corner index -X, +Z.\n * @param v2         Corner index +X, +Z.\n * @param v3         Corner index +X, -Z.\n */\n\nvar hilbert2D = function hilbert2D() {\n  var center = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector3(0, 0, 0);\n  var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n  var iterations = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var v0 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  var v1 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var v2 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 2;\n  var v3 = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 3;\n  // Default Vars\n  var half = size / 2;\n  var vec_s = [new Vector3(center.x - half, center.y, center.z - half), new Vector3(center.x - half, center.y, center.z + half), new Vector3(center.x + half, center.y, center.z + half), new Vector3(center.x + half, center.y, center.z - half)];\n  var vec = [vec_s[v0], vec_s[v1], vec_s[v2], vec_s[v3]]; // Recurse iterations\n\n  if (0 <= --iterations) {\n    var tmp = [];\n    Array.prototype.push.apply(tmp, hilbert2D(vec[0], half, iterations, v0, v3, v2, v1));\n    Array.prototype.push.apply(tmp, hilbert2D(vec[1], half, iterations, v0, v1, v2, v3));\n    Array.prototype.push.apply(tmp, hilbert2D(vec[2], half, iterations, v0, v1, v2, v3));\n    Array.prototype.push.apply(tmp, hilbert2D(vec[3], half, iterations, v2, v1, v0, v3)); // Return recursive call\n\n    return tmp;\n  } // Return complete Hilbert Curve.\n\n\n  return vec;\n};\n/**\n * Generates 3D-Coordinates in a very fast way.\n *\n * Based on work by:\n * @link http://www.openprocessing.org/visuals/?visualID=15599\n *\n * @param center     Center of Hilbert curve.\n * @param size       Total width of Hilbert curve.\n * @param iterations Number of subdivisions.\n * @param v0         Corner index -X, +Y, -Z.\n * @param v1         Corner index -X, +Y, +Z.\n * @param v2         Corner index -X, -Y, +Z.\n * @param v3         Corner index -X, -Y, -Z.\n * @param v4         Corner index +X, -Y, -Z.\n * @param v5         Corner index +X, -Y, +Z.\n * @param v6         Corner index +X, +Y, +Z.\n * @param v7         Corner index +X, +Y, -Z.\n */\n\n\nvar hilbert3D = function hilbert3D() {\n  var center = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Vector3(0, 0, 0);\n  var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n  var iterations = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var v0 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  var v1 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var v2 = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 2;\n  var v3 = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 3;\n  var v4 = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 4;\n  var v5 = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 5;\n  var v6 = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 6;\n  var v7 = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : 7;\n  // Default Vars\n  var half = size / 2;\n  var vec_s = [new Vector3(center.x - half, center.y + half, center.z - half), new Vector3(center.x - half, center.y + half, center.z + half), new Vector3(center.x - half, center.y - half, center.z + half), new Vector3(center.x - half, center.y - half, center.z - half), new Vector3(center.x + half, center.y - half, center.z - half), new Vector3(center.x + half, center.y - half, center.z + half), new Vector3(center.x + half, center.y + half, center.z + half), new Vector3(center.x + half, center.y + half, center.z - half)];\n  var vec = [vec_s[v0], vec_s[v1], vec_s[v2], vec_s[v3], vec_s[v4], vec_s[v5], vec_s[v6], vec_s[v7]]; // Recurse iterations\n\n  if (--iterations >= 0) {\n    var tmp = [];\n    Array.prototype.push.apply(tmp, hilbert3D(vec[0], half, iterations, v0, v3, v4, v7, v6, v5, v2, v1));\n    Array.prototype.push.apply(tmp, hilbert3D(vec[1], half, iterations, v0, v7, v6, v1, v2, v5, v4, v3));\n    Array.prototype.push.apply(tmp, hilbert3D(vec[2], half, iterations, v0, v7, v6, v1, v2, v5, v4, v3));\n    Array.prototype.push.apply(tmp, hilbert3D(vec[3], half, iterations, v2, v3, v0, v1, v6, v7, v4, v5));\n    Array.prototype.push.apply(tmp, hilbert3D(vec[4], half, iterations, v2, v3, v0, v1, v6, v7, v4, v5));\n    Array.prototype.push.apply(tmp, hilbert3D(vec[5], half, iterations, v4, v3, v2, v5, v6, v1, v0, v7));\n    Array.prototype.push.apply(tmp, hilbert3D(vec[6], half, iterations, v4, v3, v2, v5, v6, v1, v0, v7));\n    Array.prototype.push.apply(tmp, hilbert3D(vec[7], half, iterations, v6, v5, v2, v1, v0, v3, v4, v7)); // Return recursive call\n\n    return tmp;\n  } // Return complete Hilbert Curve.\n\n\n  return vec;\n};\n/**\n * Generates a Gosper curve (lying in the XY plane)\n *\n * https://gist.github.com/nitaku/6521802\n *\n * @param size The size of a single gosper island.\n */\n\n\nvar gosper = function gosper() {\n  var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n\n  function fractalize(config) {\n    var output = '';\n    var input = config.axiom;\n\n    for (var i = 0, il = config.steps; 0 <= il ? i < il : i > il; 0 <= il ? i++ : i--) {\n      output = '';\n\n      for (var j = 0, jl = input.length; j < jl; j++) {\n        var char = input[j];\n\n        if (char in config.rules) {\n          output += config.rules[char];\n        } else {\n          output += char;\n        }\n      }\n\n      input = output;\n    }\n\n    return output;\n  }\n\n  function toPoints(config) {\n    var currX = 0;\n    var currY = 0;\n    var angle = 0;\n    var path = [0, 0, 0];\n    var fractal = config.fractal;\n\n    for (var i = 0, l = fractal.length; i < l; i++) {\n      var char = fractal[i];\n\n      if (char === '+') {\n        angle += config.angle;\n      } else if (char === '-') {\n        angle -= config.angle;\n      } else if (char === 'F') {\n        currX += config.size * Math.cos(angle);\n        currY += -config.size * Math.sin(angle);\n        path.push(currX, currY, 0);\n      }\n    }\n\n    return path;\n  } //\n\n\n  var gosper = fractalize({\n    axiom: 'A',\n    steps: 4,\n    rules: {\n      A: 'A+BF++BF-FA--FAFA-BF+',\n      B: '-FA+BFBF++BF+FA--FA-B'\n    }\n  });\n  var points = toPoints({\n    fractal: gosper,\n    size: size,\n    angle: Math.PI / 3 // 60 degrees\n\n  });\n  return points;\n};\n\nvar GeometryUtils = {\n  hilbert3D: hilbert3D,\n  gosper: gosper,\n  hilbert2D: hilbert2D\n};\nexport { GeometryUtils };","map":{"version":3,"names":["Vector3","hilbert2D","center","size","iterations","v0","v1","v2","v3","half","vec_s","x","y","z","vec","tmp","Array","prototype","push","apply","hilbert3D","v4","v5","v6","v7","gosper","fractalize","config","output","input","axiom","i","il","steps","j","jl","length","char","rules","toPoints","currX","currY","angle","path","fractal","l","Math","cos","sin","A","B","points","PI","GeometryUtils"],"sources":["C:/Users/Arnav/Downloads/l4fycy/node_modules/three-stdlib/utils/GeometryUtils.js"],"sourcesContent":["import { Vector3 } from 'three';\n\n/**\n * Generates 2D-Coordinates in a very fast way.\n *\n * Based on work by:\n * @link http://www.openprocessing.org/sketch/15493\n *\n * @param center     Center of Hilbert curve.\n * @param size       Total width of Hilbert curve.\n * @param iterations Number of subdivisions.\n * @param v0         Corner index -X, -Z.\n * @param v1         Corner index -X, +Z.\n * @param v2         Corner index +X, +Z.\n * @param v3         Corner index +X, -Z.\n */\n\nconst hilbert2D = (center = new Vector3(0, 0, 0), size = 10, iterations = 1, v0 = 0, v1 = 1, v2 = 2, v3 = 3) => {\n  // Default Vars\n  const half = size / 2;\n  const vec_s = [new Vector3(center.x - half, center.y, center.z - half), new Vector3(center.x - half, center.y, center.z + half), new Vector3(center.x + half, center.y, center.z + half), new Vector3(center.x + half, center.y, center.z - half)];\n  const vec = [vec_s[v0], vec_s[v1], vec_s[v2], vec_s[v3]]; // Recurse iterations\n\n  if (0 <= --iterations) {\n    const tmp = [];\n    Array.prototype.push.apply(tmp, hilbert2D(vec[0], half, iterations, v0, v3, v2, v1));\n    Array.prototype.push.apply(tmp, hilbert2D(vec[1], half, iterations, v0, v1, v2, v3));\n    Array.prototype.push.apply(tmp, hilbert2D(vec[2], half, iterations, v0, v1, v2, v3));\n    Array.prototype.push.apply(tmp, hilbert2D(vec[3], half, iterations, v2, v1, v0, v3)); // Return recursive call\n\n    return tmp;\n  } // Return complete Hilbert Curve.\n\n\n  return vec;\n};\n/**\n * Generates 3D-Coordinates in a very fast way.\n *\n * Based on work by:\n * @link http://www.openprocessing.org/visuals/?visualID=15599\n *\n * @param center     Center of Hilbert curve.\n * @param size       Total width of Hilbert curve.\n * @param iterations Number of subdivisions.\n * @param v0         Corner index -X, +Y, -Z.\n * @param v1         Corner index -X, +Y, +Z.\n * @param v2         Corner index -X, -Y, +Z.\n * @param v3         Corner index -X, -Y, -Z.\n * @param v4         Corner index +X, -Y, -Z.\n * @param v5         Corner index +X, -Y, +Z.\n * @param v6         Corner index +X, +Y, +Z.\n * @param v7         Corner index +X, +Y, -Z.\n */\n\n\nconst hilbert3D = (center = new Vector3(0, 0, 0), size = 10, iterations = 1, v0 = 0, v1 = 1, v2 = 2, v3 = 3, v4 = 4, v5 = 5, v6 = 6, v7 = 7) => {\n  // Default Vars\n  const half = size / 2;\n  const vec_s = [new Vector3(center.x - half, center.y + half, center.z - half), new Vector3(center.x - half, center.y + half, center.z + half), new Vector3(center.x - half, center.y - half, center.z + half), new Vector3(center.x - half, center.y - half, center.z - half), new Vector3(center.x + half, center.y - half, center.z - half), new Vector3(center.x + half, center.y - half, center.z + half), new Vector3(center.x + half, center.y + half, center.z + half), new Vector3(center.x + half, center.y + half, center.z - half)];\n  const vec = [vec_s[v0], vec_s[v1], vec_s[v2], vec_s[v3], vec_s[v4], vec_s[v5], vec_s[v6], vec_s[v7]]; // Recurse iterations\n\n  if (--iterations >= 0) {\n    const tmp = [];\n    Array.prototype.push.apply(tmp, hilbert3D(vec[0], half, iterations, v0, v3, v4, v7, v6, v5, v2, v1));\n    Array.prototype.push.apply(tmp, hilbert3D(vec[1], half, iterations, v0, v7, v6, v1, v2, v5, v4, v3));\n    Array.prototype.push.apply(tmp, hilbert3D(vec[2], half, iterations, v0, v7, v6, v1, v2, v5, v4, v3));\n    Array.prototype.push.apply(tmp, hilbert3D(vec[3], half, iterations, v2, v3, v0, v1, v6, v7, v4, v5));\n    Array.prototype.push.apply(tmp, hilbert3D(vec[4], half, iterations, v2, v3, v0, v1, v6, v7, v4, v5));\n    Array.prototype.push.apply(tmp, hilbert3D(vec[5], half, iterations, v4, v3, v2, v5, v6, v1, v0, v7));\n    Array.prototype.push.apply(tmp, hilbert3D(vec[6], half, iterations, v4, v3, v2, v5, v6, v1, v0, v7));\n    Array.prototype.push.apply(tmp, hilbert3D(vec[7], half, iterations, v6, v5, v2, v1, v0, v3, v4, v7)); // Return recursive call\n\n    return tmp;\n  } // Return complete Hilbert Curve.\n\n\n  return vec;\n};\n/**\n * Generates a Gosper curve (lying in the XY plane)\n *\n * https://gist.github.com/nitaku/6521802\n *\n * @param size The size of a single gosper island.\n */\n\n\nconst gosper = (size = 1) => {\n  function fractalize(config) {\n    let output = '';\n    let input = config.axiom;\n\n    for (let i = 0, il = config.steps; 0 <= il ? i < il : i > il; 0 <= il ? i++ : i--) {\n      output = '';\n\n      for (let j = 0, jl = input.length; j < jl; j++) {\n        const char = input[j];\n\n        if (char in config.rules) {\n          output += config.rules[char];\n        } else {\n          output += char;\n        }\n      }\n\n      input = output;\n    }\n\n    return output;\n  }\n\n  function toPoints(config) {\n    let currX = 0;\n    let currY = 0;\n    let angle = 0;\n    const path = [0, 0, 0];\n    const fractal = config.fractal;\n\n    for (let i = 0, l = fractal.length; i < l; i++) {\n      const char = fractal[i];\n\n      if (char === '+') {\n        angle += config.angle;\n      } else if (char === '-') {\n        angle -= config.angle;\n      } else if (char === 'F') {\n        currX += config.size * Math.cos(angle);\n        currY += -config.size * Math.sin(angle);\n        path.push(currX, currY, 0);\n      }\n    }\n\n    return path;\n  } //\n\n\n  const gosper = fractalize({\n    axiom: 'A',\n    steps: 4,\n    rules: {\n      A: 'A+BF++BF-FA--FAFA-BF+',\n      B: '-FA+BFBF++BF+FA--FA-B'\n    }\n  });\n  const points = toPoints({\n    fractal: gosper,\n    size: size,\n    angle: Math.PI / 3 // 60 degrees\n\n  });\n  return points;\n};\n\nconst GeometryUtils = {\n  hilbert3D,\n  gosper,\n  hilbert2D\n};\n\nexport { GeometryUtils };\n"],"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAA8F;EAAA,IAA7FC,MAA6F,uEAApF,IAAIF,OAAJ,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAAoF;EAAA,IAA9DG,IAA8D,uEAAvD,EAAuD;EAAA,IAAnDC,UAAmD,uEAAtC,CAAsC;EAAA,IAAnCC,EAAmC,uEAA9B,CAA8B;EAAA,IAA3BC,EAA2B,uEAAtB,CAAsB;EAAA,IAAnBC,EAAmB,uEAAd,CAAc;EAAA,IAAXC,EAAW,uEAAN,CAAM;EAC9G;EACA,IAAMC,IAAI,GAAGN,IAAI,GAAG,CAApB;EACA,IAAMO,KAAK,GAAG,CAAC,IAAIV,OAAJ,CAAYE,MAAM,CAACS,CAAP,GAAWF,IAAvB,EAA6BP,MAAM,CAACU,CAApC,EAAuCV,MAAM,CAACW,CAAP,GAAWJ,IAAlD,CAAD,EAA0D,IAAIT,OAAJ,CAAYE,MAAM,CAACS,CAAP,GAAWF,IAAvB,EAA6BP,MAAM,CAACU,CAApC,EAAuCV,MAAM,CAACW,CAAP,GAAWJ,IAAlD,CAA1D,EAAmH,IAAIT,OAAJ,CAAYE,MAAM,CAACS,CAAP,GAAWF,IAAvB,EAA6BP,MAAM,CAACU,CAApC,EAAuCV,MAAM,CAACW,CAAP,GAAWJ,IAAlD,CAAnH,EAA4K,IAAIT,OAAJ,CAAYE,MAAM,CAACS,CAAP,GAAWF,IAAvB,EAA6BP,MAAM,CAACU,CAApC,EAAuCV,MAAM,CAACW,CAAP,GAAWJ,IAAlD,CAA5K,CAAd;EACA,IAAMK,GAAG,GAAG,CAACJ,KAAK,CAACL,EAAD,CAAN,EAAYK,KAAK,CAACJ,EAAD,CAAjB,EAAuBI,KAAK,CAACH,EAAD,CAA5B,EAAkCG,KAAK,CAACF,EAAD,CAAvC,CAAZ,CAJ8G,CAIpD;;EAE1D,IAAI,KAAK,EAAEJ,UAAX,EAAuB;IACrB,IAAMW,GAAG,GAAG,EAAZ;IACAC,KAAK,CAACC,SAAN,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2BJ,GAA3B,EAAgCd,SAAS,CAACa,GAAG,CAAC,CAAD,CAAJ,EAASL,IAAT,EAAeL,UAAf,EAA2BC,EAA3B,EAA+BG,EAA/B,EAAmCD,EAAnC,EAAuCD,EAAvC,CAAzC;IACAU,KAAK,CAACC,SAAN,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2BJ,GAA3B,EAAgCd,SAAS,CAACa,GAAG,CAAC,CAAD,CAAJ,EAASL,IAAT,EAAeL,UAAf,EAA2BC,EAA3B,EAA+BC,EAA/B,EAAmCC,EAAnC,EAAuCC,EAAvC,CAAzC;IACAQ,KAAK,CAACC,SAAN,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2BJ,GAA3B,EAAgCd,SAAS,CAACa,GAAG,CAAC,CAAD,CAAJ,EAASL,IAAT,EAAeL,UAAf,EAA2BC,EAA3B,EAA+BC,EAA/B,EAAmCC,EAAnC,EAAuCC,EAAvC,CAAzC;IACAQ,KAAK,CAACC,SAAN,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2BJ,GAA3B,EAAgCd,SAAS,CAACa,GAAG,CAAC,CAAD,CAAJ,EAASL,IAAT,EAAeL,UAAf,EAA2BG,EAA3B,EAA+BD,EAA/B,EAAmCD,EAAnC,EAAuCG,EAAvC,CAAzC,EALqB,CAKiE;;IAEtF,OAAOO,GAAP;EACD,CAd6G,CAc5G;;;EAGF,OAAOD,GAAP;AACD,CAlBD;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,IAAMM,SAAS,GAAG,SAAZA,SAAY,GAA8H;EAAA,IAA7HlB,MAA6H,uEAApH,IAAIF,OAAJ,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAAoH;EAAA,IAA9FG,IAA8F,uEAAvF,EAAuF;EAAA,IAAnFC,UAAmF,uEAAtE,CAAsE;EAAA,IAAnEC,EAAmE,uEAA9D,CAA8D;EAAA,IAA3DC,EAA2D,uEAAtD,CAAsD;EAAA,IAAnDC,EAAmD,uEAA9C,CAA8C;EAAA,IAA3CC,EAA2C,uEAAtC,CAAsC;EAAA,IAAnCa,EAAmC,uEAA9B,CAA8B;EAAA,IAA3BC,EAA2B,uEAAtB,CAAsB;EAAA,IAAnBC,EAAmB,uEAAd,CAAc;EAAA,IAAXC,EAAW,0EAAN,CAAM;EAC9I;EACA,IAAMf,IAAI,GAAGN,IAAI,GAAG,CAApB;EACA,IAAMO,KAAK,GAAG,CAAC,IAAIV,OAAJ,CAAYE,MAAM,CAACS,CAAP,GAAWF,IAAvB,EAA6BP,MAAM,CAACU,CAAP,GAAWH,IAAxC,EAA8CP,MAAM,CAACW,CAAP,GAAWJ,IAAzD,CAAD,EAAiE,IAAIT,OAAJ,CAAYE,MAAM,CAACS,CAAP,GAAWF,IAAvB,EAA6BP,MAAM,CAACU,CAAP,GAAWH,IAAxC,EAA8CP,MAAM,CAACW,CAAP,GAAWJ,IAAzD,CAAjE,EAAiI,IAAIT,OAAJ,CAAYE,MAAM,CAACS,CAAP,GAAWF,IAAvB,EAA6BP,MAAM,CAACU,CAAP,GAAWH,IAAxC,EAA8CP,MAAM,CAACW,CAAP,GAAWJ,IAAzD,CAAjI,EAAiM,IAAIT,OAAJ,CAAYE,MAAM,CAACS,CAAP,GAAWF,IAAvB,EAA6BP,MAAM,CAACU,CAAP,GAAWH,IAAxC,EAA8CP,MAAM,CAACW,CAAP,GAAWJ,IAAzD,CAAjM,EAAiQ,IAAIT,OAAJ,CAAYE,MAAM,CAACS,CAAP,GAAWF,IAAvB,EAA6BP,MAAM,CAACU,CAAP,GAAWH,IAAxC,EAA8CP,MAAM,CAACW,CAAP,GAAWJ,IAAzD,CAAjQ,EAAiU,IAAIT,OAAJ,CAAYE,MAAM,CAACS,CAAP,GAAWF,IAAvB,EAA6BP,MAAM,CAACU,CAAP,GAAWH,IAAxC,EAA8CP,MAAM,CAACW,CAAP,GAAWJ,IAAzD,CAAjU,EAAiY,IAAIT,OAAJ,CAAYE,MAAM,CAACS,CAAP,GAAWF,IAAvB,EAA6BP,MAAM,CAACU,CAAP,GAAWH,IAAxC,EAA8CP,MAAM,CAACW,CAAP,GAAWJ,IAAzD,CAAjY,EAAic,IAAIT,OAAJ,CAAYE,MAAM,CAACS,CAAP,GAAWF,IAAvB,EAA6BP,MAAM,CAACU,CAAP,GAAWH,IAAxC,EAA8CP,MAAM,CAACW,CAAP,GAAWJ,IAAzD,CAAjc,CAAd;EACA,IAAMK,GAAG,GAAG,CAACJ,KAAK,CAACL,EAAD,CAAN,EAAYK,KAAK,CAACJ,EAAD,CAAjB,EAAuBI,KAAK,CAACH,EAAD,CAA5B,EAAkCG,KAAK,CAACF,EAAD,CAAvC,EAA6CE,KAAK,CAACW,EAAD,CAAlD,EAAwDX,KAAK,CAACY,EAAD,CAA7D,EAAmEZ,KAAK,CAACa,EAAD,CAAxE,EAA8Eb,KAAK,CAACc,EAAD,CAAnF,CAAZ,CAJ8I,CAIxC;;EAEtG,IAAI,EAAEpB,UAAF,IAAgB,CAApB,EAAuB;IACrB,IAAMW,GAAG,GAAG,EAAZ;IACAC,KAAK,CAACC,SAAN,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2BJ,GAA3B,EAAgCK,SAAS,CAACN,GAAG,CAAC,CAAD,CAAJ,EAASL,IAAT,EAAeL,UAAf,EAA2BC,EAA3B,EAA+BG,EAA/B,EAAmCa,EAAnC,EAAuCG,EAAvC,EAA2CD,EAA3C,EAA+CD,EAA/C,EAAmDf,EAAnD,EAAuDD,EAAvD,CAAzC;IACAU,KAAK,CAACC,SAAN,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2BJ,GAA3B,EAAgCK,SAAS,CAACN,GAAG,CAAC,CAAD,CAAJ,EAASL,IAAT,EAAeL,UAAf,EAA2BC,EAA3B,EAA+BmB,EAA/B,EAAmCD,EAAnC,EAAuCjB,EAAvC,EAA2CC,EAA3C,EAA+Ce,EAA/C,EAAmDD,EAAnD,EAAuDb,EAAvD,CAAzC;IACAQ,KAAK,CAACC,SAAN,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2BJ,GAA3B,EAAgCK,SAAS,CAACN,GAAG,CAAC,CAAD,CAAJ,EAASL,IAAT,EAAeL,UAAf,EAA2BC,EAA3B,EAA+BmB,EAA/B,EAAmCD,EAAnC,EAAuCjB,EAAvC,EAA2CC,EAA3C,EAA+Ce,EAA/C,EAAmDD,EAAnD,EAAuDb,EAAvD,CAAzC;IACAQ,KAAK,CAACC,SAAN,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2BJ,GAA3B,EAAgCK,SAAS,CAACN,GAAG,CAAC,CAAD,CAAJ,EAASL,IAAT,EAAeL,UAAf,EAA2BG,EAA3B,EAA+BC,EAA/B,EAAmCH,EAAnC,EAAuCC,EAAvC,EAA2CiB,EAA3C,EAA+CC,EAA/C,EAAmDH,EAAnD,EAAuDC,EAAvD,CAAzC;IACAN,KAAK,CAACC,SAAN,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2BJ,GAA3B,EAAgCK,SAAS,CAACN,GAAG,CAAC,CAAD,CAAJ,EAASL,IAAT,EAAeL,UAAf,EAA2BG,EAA3B,EAA+BC,EAA/B,EAAmCH,EAAnC,EAAuCC,EAAvC,EAA2CiB,EAA3C,EAA+CC,EAA/C,EAAmDH,EAAnD,EAAuDC,EAAvD,CAAzC;IACAN,KAAK,CAACC,SAAN,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2BJ,GAA3B,EAAgCK,SAAS,CAACN,GAAG,CAAC,CAAD,CAAJ,EAASL,IAAT,EAAeL,UAAf,EAA2BiB,EAA3B,EAA+Bb,EAA/B,EAAmCD,EAAnC,EAAuCe,EAAvC,EAA2CC,EAA3C,EAA+CjB,EAA/C,EAAmDD,EAAnD,EAAuDmB,EAAvD,CAAzC;IACAR,KAAK,CAACC,SAAN,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2BJ,GAA3B,EAAgCK,SAAS,CAACN,GAAG,CAAC,CAAD,CAAJ,EAASL,IAAT,EAAeL,UAAf,EAA2BiB,EAA3B,EAA+Bb,EAA/B,EAAmCD,EAAnC,EAAuCe,EAAvC,EAA2CC,EAA3C,EAA+CjB,EAA/C,EAAmDD,EAAnD,EAAuDmB,EAAvD,CAAzC;IACAR,KAAK,CAACC,SAAN,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2BJ,GAA3B,EAAgCK,SAAS,CAACN,GAAG,CAAC,CAAD,CAAJ,EAASL,IAAT,EAAeL,UAAf,EAA2BmB,EAA3B,EAA+BD,EAA/B,EAAmCf,EAAnC,EAAuCD,EAAvC,EAA2CD,EAA3C,EAA+CG,EAA/C,EAAmDa,EAAnD,EAAuDG,EAAvD,CAAzC,EATqB,CASiF;;IAEtG,OAAOT,GAAP;EACD,CAlB6I,CAkB5I;;;EAGF,OAAOD,GAAP;AACD,CAtBD;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,IAAMW,MAAM,GAAG,kBAAc;EAAA,IAAbtB,IAAa,uEAAN,CAAM;;EAC3B,SAASuB,UAAT,CAAoBC,MAApB,EAA4B;IAC1B,IAAIC,MAAM,GAAG,EAAb;IACA,IAAIC,KAAK,GAAGF,MAAM,CAACG,KAAnB;;IAEA,KAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGL,MAAM,CAACM,KAA5B,EAAmC,KAAKD,EAAL,GAAUD,CAAC,GAAGC,EAAd,GAAmBD,CAAC,GAAGC,EAA1D,EAA8D,KAAKA,EAAL,GAAUD,CAAC,EAAX,GAAgBA,CAAC,EAA/E,EAAmF;MACjFH,MAAM,GAAG,EAAT;;MAEA,KAAK,IAAIM,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGN,KAAK,CAACO,MAA3B,EAAmCF,CAAC,GAAGC,EAAvC,EAA2CD,CAAC,EAA5C,EAAgD;QAC9C,IAAMG,IAAI,GAAGR,KAAK,CAACK,CAAD,CAAlB;;QAEA,IAAIG,IAAI,IAAIV,MAAM,CAACW,KAAnB,EAA0B;UACxBV,MAAM,IAAID,MAAM,CAACW,KAAP,CAAaD,IAAb,CAAV;QACD,CAFD,MAEO;UACLT,MAAM,IAAIS,IAAV;QACD;MACF;;MAEDR,KAAK,GAAGD,MAAR;IACD;;IAED,OAAOA,MAAP;EACD;;EAED,SAASW,QAAT,CAAkBZ,MAAlB,EAA0B;IACxB,IAAIa,KAAK,GAAG,CAAZ;IACA,IAAIC,KAAK,GAAG,CAAZ;IACA,IAAIC,KAAK,GAAG,CAAZ;IACA,IAAMC,IAAI,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAb;IACA,IAAMC,OAAO,GAAGjB,MAAM,CAACiB,OAAvB;;IAEA,KAAK,IAAIb,CAAC,GAAG,CAAR,EAAWc,CAAC,GAAGD,OAAO,CAACR,MAA5B,EAAoCL,CAAC,GAAGc,CAAxC,EAA2Cd,CAAC,EAA5C,EAAgD;MAC9C,IAAMM,IAAI,GAAGO,OAAO,CAACb,CAAD,CAApB;;MAEA,IAAIM,IAAI,KAAK,GAAb,EAAkB;QAChBK,KAAK,IAAIf,MAAM,CAACe,KAAhB;MACD,CAFD,MAEO,IAAIL,IAAI,KAAK,GAAb,EAAkB;QACvBK,KAAK,IAAIf,MAAM,CAACe,KAAhB;MACD,CAFM,MAEA,IAAIL,IAAI,KAAK,GAAb,EAAkB;QACvBG,KAAK,IAAIb,MAAM,CAACxB,IAAP,GAAc2C,IAAI,CAACC,GAAL,CAASL,KAAT,CAAvB;QACAD,KAAK,IAAI,CAACd,MAAM,CAACxB,IAAR,GAAe2C,IAAI,CAACE,GAAL,CAASN,KAAT,CAAxB;QACAC,IAAI,CAACzB,IAAL,CAAUsB,KAAV,EAAiBC,KAAjB,EAAwB,CAAxB;MACD;IACF;;IAED,OAAOE,IAAP;EACD,CA9C0B,CA8CzB;;;EAGF,IAAMlB,MAAM,GAAGC,UAAU,CAAC;IACxBI,KAAK,EAAE,GADiB;IAExBG,KAAK,EAAE,CAFiB;IAGxBK,KAAK,EAAE;MACLW,CAAC,EAAE,uBADE;MAELC,CAAC,EAAE;IAFE;EAHiB,CAAD,CAAzB;EAQA,IAAMC,MAAM,GAAGZ,QAAQ,CAAC;IACtBK,OAAO,EAAEnB,MADa;IAEtBtB,IAAI,EAAEA,IAFgB;IAGtBuC,KAAK,EAAEI,IAAI,CAACM,EAAL,GAAU,CAHK,CAGH;;EAHG,CAAD,CAAvB;EAMA,OAAOD,MAAP;AACD,CAhED;;AAkEA,IAAME,aAAa,GAAG;EACpBjC,SAAS,EAATA,SADoB;EAEpBK,MAAM,EAANA,MAFoB;EAGpBxB,SAAS,EAATA;AAHoB,CAAtB;AAMA,SAASoD,aAAT"},"metadata":{},"sourceType":"module"}