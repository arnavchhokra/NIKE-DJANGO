{"ast":null,"code":"'use client';\n\n// src/use-tooltip.ts\nimport { getScrollParent } from \"@chakra-ui/dom-utils\";\nimport { popperCSSVars, usePopper } from \"@chakra-ui/popper\";\nimport { useDisclosure } from \"@chakra-ui/react-use-disclosure\";\nimport { useEventListener } from \"@chakra-ui/react-use-event-listener\";\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport { callAllHandlers } from \"@chakra-ui/shared-utils\";\nimport { useCallback, useEffect, useId, useRef } from \"react\";\nvar getDoc = ref => {\n  var _a;\n  return ((_a = ref.current) == null ? void 0 : _a.ownerDocument) || document;\n};\nvar getWin = ref => {\n  var _a, _b;\n  return ((_b = (_a = ref.current) == null ? void 0 : _a.ownerDocument) == null ? void 0 : _b.defaultView) || window;\n};\nfunction useTooltip() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    openDelay = 0,\n    closeDelay = 0,\n    closeOnClick = true,\n    closeOnMouseDown,\n    closeOnScroll,\n    closeOnPointerDown = closeOnMouseDown,\n    closeOnEsc = true,\n    onOpen: onOpenProp,\n    onClose: onCloseProp,\n    placement,\n    id,\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    arrowSize = 10,\n    arrowShadowColor,\n    arrowPadding,\n    modifiers,\n    isDisabled,\n    gutter,\n    offset,\n    direction,\n    ...htmlProps\n  } = props;\n  const {\n    isOpen,\n    onOpen,\n    onClose\n  } = useDisclosure({\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    onOpen: onOpenProp,\n    onClose: onCloseProp\n  });\n  const {\n    referenceRef,\n    getPopperProps,\n    getArrowInnerProps,\n    getArrowProps\n  } = usePopper({\n    enabled: isOpen,\n    placement,\n    arrowPadding,\n    modifiers,\n    gutter,\n    offset,\n    direction\n  });\n  const uuid = useId();\n  const uid = id != null ? id : uuid;\n  const tooltipId = \"tooltip-\".concat(uid);\n  const ref = useRef(null);\n  const enterTimeout = useRef();\n  const clearEnterTimeout = useCallback(() => {\n    if (enterTimeout.current) {\n      clearTimeout(enterTimeout.current);\n      enterTimeout.current = void 0;\n    }\n  }, []);\n  const exitTimeout = useRef();\n  const clearExitTimeout = useCallback(() => {\n    if (exitTimeout.current) {\n      clearTimeout(exitTimeout.current);\n      exitTimeout.current = void 0;\n    }\n  }, []);\n  const closeNow = useCallback(() => {\n    clearExitTimeout();\n    onClose();\n  }, [onClose, clearExitTimeout]);\n  const dispatchCloseEvent = useCloseEvent(ref, closeNow);\n  const openWithDelay = useCallback(() => {\n    if (!isDisabled && !enterTimeout.current) {\n      if (isOpen) dispatchCloseEvent();\n      const win = getWin(ref);\n      enterTimeout.current = win.setTimeout(onOpen, openDelay);\n    }\n  }, [dispatchCloseEvent, isDisabled, isOpen, onOpen, openDelay]);\n  const closeWithDelay = useCallback(() => {\n    clearEnterTimeout();\n    const win = getWin(ref);\n    exitTimeout.current = win.setTimeout(closeNow, closeDelay);\n  }, [closeDelay, closeNow, clearEnterTimeout]);\n  const onClick = useCallback(() => {\n    if (isOpen && closeOnClick) {\n      closeWithDelay();\n    }\n  }, [closeOnClick, closeWithDelay, isOpen]);\n  const onPointerDown = useCallback(() => {\n    if (isOpen && closeOnPointerDown) {\n      closeWithDelay();\n    }\n  }, [closeOnPointerDown, closeWithDelay, isOpen]);\n  const onKeyDown = useCallback(event => {\n    if (isOpen && event.key === \"Escape\") {\n      closeWithDelay();\n    }\n  }, [isOpen, closeWithDelay]);\n  useEventListener(() => getDoc(ref), \"keydown\", closeOnEsc ? onKeyDown : void 0);\n  useEventListener(() => {\n    if (!closeOnScroll) return null;\n    const node = ref.current;\n    if (!node) return null;\n    const scrollParent = getScrollParent(node);\n    return scrollParent.localName === \"body\" ? getWin(ref) : scrollParent;\n  }, \"scroll\", () => {\n    if (isOpen && closeOnScroll) {\n      closeNow();\n    }\n  }, {\n    passive: true,\n    capture: true\n  });\n  useEffect(() => {\n    if (!isDisabled) return;\n    clearEnterTimeout();\n    if (isOpen) onClose();\n  }, [isDisabled, isOpen, onClose, clearEnterTimeout]);\n  useEffect(() => {\n    return () => {\n      clearEnterTimeout();\n      clearExitTimeout();\n    };\n  }, [clearEnterTimeout, clearExitTimeout]);\n  useEventListener(() => ref.current, \"pointerleave\", closeWithDelay);\n  const getTriggerProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const triggerProps = {\n      ...props2,\n      ref: mergeRefs(ref, _ref, referenceRef),\n      onPointerEnter: callAllHandlers(props2.onPointerEnter, e => {\n        if (e.pointerType === \"touch\") return;\n        openWithDelay();\n      }),\n      onClick: callAllHandlers(props2.onClick, onClick),\n      onPointerDown: callAllHandlers(props2.onPointerDown, onPointerDown),\n      onFocus: callAllHandlers(props2.onFocus, openWithDelay),\n      onBlur: callAllHandlers(props2.onBlur, closeWithDelay),\n      \"aria-describedby\": isOpen ? tooltipId : void 0\n    };\n    return triggerProps;\n  }, [openWithDelay, closeWithDelay, onPointerDown, isOpen, tooltipId, onClick, referenceRef]);\n  const getTooltipPositionerProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let forwardedRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return getPopperProps({\n      ...props2,\n      style: {\n        ...props2.style,\n        [popperCSSVars.arrowSize.var]: arrowSize ? \"\".concat(arrowSize, \"px\") : void 0,\n        [popperCSSVars.arrowShadowColor.var]: arrowShadowColor\n      }\n    }, forwardedRef);\n  }, [getPopperProps, arrowSize, arrowShadowColor]);\n  const getTooltipProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const styles = {\n      ...props2.style,\n      position: \"relative\",\n      transformOrigin: popperCSSVars.transformOrigin.varRef\n    };\n    return {\n      ref: ref2,\n      ...htmlProps,\n      ...props2,\n      id: tooltipId,\n      role: \"tooltip\",\n      style: styles\n    };\n  }, [htmlProps, tooltipId]);\n  return {\n    isOpen,\n    show: openWithDelay,\n    hide: closeWithDelay,\n    getTriggerProps,\n    getTooltipProps,\n    getTooltipPositionerProps,\n    getArrowProps,\n    getArrowInnerProps\n  };\n}\nvar closeEventName = \"chakra-ui:close-tooltip\";\nfunction useCloseEvent(ref, close) {\n  useEffect(() => {\n    const doc = getDoc(ref);\n    doc.addEventListener(closeEventName, close);\n    return () => doc.removeEventListener(closeEventName, close);\n  }, [close, ref]);\n  return () => {\n    const doc = getDoc(ref);\n    const win = getWin(ref);\n    doc.dispatchEvent(new win.CustomEvent(closeEventName));\n  };\n}\nexport { useTooltip };","map":{"version":3,"names":["getScrollParent","popperCSSVars","usePopper","useDisclosure","useEventListener","mergeRefs","callAllHandlers","useCallback","useEffect","useId","useRef","getDoc","ref","_a","current","ownerDocument","document","getWin","_b","defaultView","window","useTooltip","props","arguments","length","undefined","openDelay","closeDelay","closeOnClick","closeOnMouseDown","closeOnScroll","closeOnPointerDown","closeOnEsc","onOpen","onOpenProp","onClose","onCloseProp","placement","id","isOpen","isOpenProp","defaultIsOpen","arrowSize","arrowShadowColor","arrowPadding","modifiers","isDisabled","gutter","offset","direction","htmlProps","referenceRef","getPopperProps","getArrowInnerProps","getArrowProps","enabled","uuid","uid","tooltipId","concat","enterTimeout","clearEnterTimeout","clearTimeout","exitTimeout","clearExitTimeout","closeNow","dispatchCloseEvent","useCloseEvent","openWithDelay","win","setTimeout","closeWithDelay","onClick","onPointerDown","onKeyDown","event","key","node","scrollParent","localName","passive","capture","getTriggerProps","props2","_ref","triggerProps","onPointerEnter","e","pointerType","onFocus","onBlur","getTooltipPositionerProps","forwardedRef","style","var","getTooltipProps","ref2","styles","position","transformOrigin","varRef","role","show","hide","closeEventName","close","doc","addEventListener","removeEventListener","dispatchEvent","CustomEvent"],"sources":["D:\\Github\\NIKE-DJANGO\\Jord\\l4fycy\\node_modules\\@chakra-ui\\tooltip\\src\\use-tooltip.ts"],"sourcesContent":["import { getScrollParent } from \"@chakra-ui/dom-utils\"\nimport { popperCSSVars, usePopper, UsePopperProps } from \"@chakra-ui/popper\"\nimport { PropGetter } from \"@chakra-ui/react-types\"\nimport { useDisclosure } from \"@chakra-ui/react-use-disclosure\"\nimport { useEventListener } from \"@chakra-ui/react-use-event-listener\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport { callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport React, {\n  useCallback,\n  useEffect,\n  useId,\n  useRef,\n  type RefObject,\n} from \"react\"\n\nexport interface UseTooltipProps\n  extends Pick<\n    UsePopperProps,\n    | \"modifiers\"\n    | \"gutter\"\n    | \"offset\"\n    | \"arrowPadding\"\n    | \"direction\"\n    | \"placement\"\n  > {\n  /**\n   * Delay (in ms) before showing the tooltip\n   * @default 0ms\n   */\n  openDelay?: number\n  /**\n   * Delay (in ms) before hiding the tooltip\n   * @default 0ms\n   */\n  closeDelay?: number\n  /**\n   * If `true`, the tooltip will hide on click\n   * @default true\n   */\n  closeOnClick?: boolean\n  /**\n   * If `true`, the tooltip will hide while the mouse is down\n   * @deprecated - use `closeOnPointerDown` instead\n   */\n  closeOnMouseDown?: boolean\n  /**\n   * If `true`, the tooltip will hide while the pointer is down\n   * @default true\n   */\n  closeOnPointerDown?: boolean\n  /**\n   * If `true`, the tooltip will hide on pressing Esc key\n   * @default true\n   */\n  closeOnEsc?: boolean\n  /**\n   * Callback to run when the tooltip shows\n   */\n  onOpen?(): void\n  /**\n   * Callback to run when the tooltip hides\n   */\n  onClose?(): void\n  /**\n   * Custom `id` to use in place of `uuid`\n   */\n  id?: string\n  /**\n   * If `true`, the tooltip will be shown (in controlled mode)\n   * @default false\n   */\n  isOpen?: boolean\n  /**\n   * If `true`, the tooltip will be initially shown\n   * @default false\n   */\n  defaultIsOpen?: boolean\n  /**\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * @default false\n   */\n  closeOnScroll?: boolean\n  /**\n   * @default 10\n   */\n  arrowSize?: number\n  arrowShadowColor?: string\n}\n\nconst getDoc = (ref: React.RefObject<Element | null>) =>\n  ref.current?.ownerDocument || document\n\nconst getWin = (ref: React.RefObject<Element | null>) =>\n  ref.current?.ownerDocument?.defaultView || window\n\nexport function useTooltip(props: UseTooltipProps = {}) {\n  const {\n    openDelay = 0,\n    closeDelay = 0,\n    closeOnClick = true,\n    closeOnMouseDown,\n    closeOnScroll,\n    closeOnPointerDown = closeOnMouseDown,\n    closeOnEsc = true,\n    onOpen: onOpenProp,\n    onClose: onCloseProp,\n    placement,\n    id,\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    arrowSize = 10,\n    arrowShadowColor,\n    arrowPadding,\n    modifiers,\n    isDisabled,\n    gutter,\n    offset,\n    direction,\n    ...htmlProps\n  } = props\n\n  const { isOpen, onOpen, onClose } = useDisclosure({\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    onOpen: onOpenProp,\n    onClose: onCloseProp,\n  })\n\n  const { referenceRef, getPopperProps, getArrowInnerProps, getArrowProps } =\n    usePopper({\n      enabled: isOpen,\n      placement,\n      arrowPadding,\n      modifiers,\n      gutter,\n      offset,\n      direction,\n    })\n\n  const uuid = useId()\n  const uid = id ?? uuid\n  const tooltipId = `tooltip-${uid}`\n\n  const ref = useRef<HTMLElement>(null)\n\n  const enterTimeout = useRef<number>()\n  const clearEnterTimeout = useCallback(() => {\n    if (enterTimeout.current) {\n      clearTimeout(enterTimeout.current)\n      enterTimeout.current = undefined\n    }\n  }, [])\n\n  const exitTimeout = useRef<number>()\n  const clearExitTimeout = useCallback(() => {\n    if (exitTimeout.current) {\n      clearTimeout(exitTimeout.current)\n      exitTimeout.current = undefined\n    }\n  }, [])\n\n  const closeNow = useCallback(() => {\n    clearExitTimeout()\n    onClose()\n  }, [onClose, clearExitTimeout])\n\n  const dispatchCloseEvent = useCloseEvent(ref, closeNow)\n\n  const openWithDelay = useCallback(() => {\n    if (!isDisabled && !enterTimeout.current) {\n      if (isOpen) dispatchCloseEvent()\n      const win = getWin(ref)\n      enterTimeout.current = win.setTimeout(onOpen, openDelay)\n    }\n  }, [dispatchCloseEvent, isDisabled, isOpen, onOpen, openDelay])\n\n  const closeWithDelay = useCallback(() => {\n    clearEnterTimeout()\n    const win = getWin(ref)\n    exitTimeout.current = win.setTimeout(closeNow, closeDelay)\n  }, [closeDelay, closeNow, clearEnterTimeout])\n\n  const onClick = useCallback(() => {\n    if (isOpen && closeOnClick) {\n      closeWithDelay()\n    }\n  }, [closeOnClick, closeWithDelay, isOpen])\n\n  const onPointerDown = useCallback(() => {\n    if (isOpen && closeOnPointerDown) {\n      closeWithDelay()\n    }\n  }, [closeOnPointerDown, closeWithDelay, isOpen])\n\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (isOpen && event.key === \"Escape\") {\n        closeWithDelay()\n      }\n    },\n    [isOpen, closeWithDelay],\n  )\n\n  useEventListener(\n    () => getDoc(ref),\n    \"keydown\",\n    closeOnEsc ? onKeyDown : undefined,\n  )\n\n  useEventListener(\n    () => {\n      if (!closeOnScroll) return null\n      const node = ref.current\n      if (!node) return null\n      const scrollParent = getScrollParent(node)\n      return scrollParent.localName === \"body\" ? getWin(ref) : scrollParent\n    },\n    \"scroll\",\n    () => {\n      if (isOpen && closeOnScroll) {\n        closeNow()\n      }\n    },\n    { passive: true, capture: true },\n  )\n\n  useEffect(() => {\n    if (!isDisabled) return\n    clearEnterTimeout()\n    if (isOpen) onClose()\n  }, [isDisabled, isOpen, onClose, clearEnterTimeout])\n\n  useEffect(() => {\n    return () => {\n      clearEnterTimeout()\n      clearExitTimeout()\n    }\n  }, [clearEnterTimeout, clearExitTimeout])\n\n  /**\n   * This allows for catching pointerleave events when the tooltip\n   * trigger is disabled. There's currently a known issue in\n   * React regarding the onPointerLeave polyfill.\n   * @see https://github.com/facebook/react/issues/11972\n   */\n  useEventListener(() => ref.current, \"pointerleave\", closeWithDelay)\n\n  const getTriggerProps: PropGetter = useCallback(\n    (props = {}, _ref = null) => {\n      const triggerProps = {\n        ...props,\n        ref: mergeRefs(ref, _ref, referenceRef),\n        onPointerEnter: callAllHandlers(props.onPointerEnter, (e) => {\n          if (e.pointerType === \"touch\") return\n          openWithDelay()\n        }),\n        onClick: callAllHandlers(props.onClick, onClick),\n        onPointerDown: callAllHandlers(props.onPointerDown, onPointerDown),\n        onFocus: callAllHandlers(props.onFocus, openWithDelay),\n        onBlur: callAllHandlers(props.onBlur, closeWithDelay),\n        \"aria-describedby\": isOpen ? tooltipId : undefined,\n      }\n\n      return triggerProps\n    },\n    [\n      openWithDelay,\n      closeWithDelay,\n      onPointerDown,\n      isOpen,\n      tooltipId,\n      onClick,\n      referenceRef,\n    ],\n  )\n\n  const getTooltipPositionerProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) =>\n      getPopperProps(\n        {\n          ...props,\n          style: {\n            ...props.style,\n            [popperCSSVars.arrowSize.var]: arrowSize\n              ? `${arrowSize}px`\n              : undefined,\n            [popperCSSVars.arrowShadowColor.var]: arrowShadowColor,\n          },\n        },\n        forwardedRef,\n      ),\n    [getPopperProps, arrowSize, arrowShadowColor],\n  )\n\n  const getTooltipProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      const styles: React.CSSProperties = {\n        ...props.style,\n        position: \"relative\",\n        transformOrigin: popperCSSVars.transformOrigin.varRef,\n      }\n\n      return {\n        ref,\n        ...htmlProps,\n        ...props,\n        id: tooltipId,\n        role: \"tooltip\",\n        style: styles,\n      }\n    },\n    [htmlProps, tooltipId],\n  )\n\n  return {\n    isOpen,\n    show: openWithDelay,\n    hide: closeWithDelay,\n    getTriggerProps,\n    getTooltipProps,\n    getTooltipPositionerProps,\n    getArrowProps,\n    getArrowInnerProps,\n  }\n}\n\nexport type UseTooltipReturn = ReturnType<typeof useTooltip>\n\nconst closeEventName = \"chakra-ui:close-tooltip\"\n\nfunction useCloseEvent(ref: RefObject<Element>, close: () => void) {\n  useEffect(() => {\n    const doc = getDoc(ref)\n    doc.addEventListener(closeEventName, close)\n    return () => doc.removeEventListener(closeEventName, close)\n  }, [close, ref])\n\n  return () => {\n    const doc = getDoc(ref)\n    const win = getWin(ref)\n    doc.dispatchEvent(new win.CustomEvent(closeEventName))\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}