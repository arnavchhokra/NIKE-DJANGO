{"ast":null,"code":"import _classCallCheck from \"D:/Github/NIKE-DJANGO/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Github/NIKE-DJANGO/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"D:/Github/NIKE-DJANGO/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"D:/Github/NIKE-DJANGO/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { ShaderPass } from './ShaderPass.js';\nvar LUTShader = {\n  defines: {\n    USE_3DTEXTURE: 1\n  },\n  uniforms: {\n    lut3d: {\n      value: null\n    },\n    lut: {\n      value: null\n    },\n    lutSize: {\n      value: 0\n    },\n    tDiffuse: {\n      value: null\n    },\n    intensity: {\n      value: 1.0\n    }\n  },\n  vertexShader:\n  /* glsl */\n  \"\\n\\n\\t\\tvarying vec2 vUv;\\n\\n\\t\\tvoid main() {\\n\\n\\t\\t\\tvUv = uv;\\n\\t\\t\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\n\\t\\t}\\n\\n\\t\",\n  fragmentShader:\n  /* glsl */\n  \"\\n\\t\\tprecision highp sampler3D;\\n\\n\\t\\tuniform float lutSize;\\n\\t\\t#if USE_3DTEXTURE\\n\\t\\tuniform sampler3D lut3d;\\n\\t\\t#else\\n\\t\\tuniform sampler2D lut;\\n\\n\\t\\tvec3 lutLookup( sampler2D tex, float size, vec3 rgb ) {\\n\\n\\t\\t\\tfloat sliceHeight = 1.0 / size;\\n\\t\\t\\tfloat yPixelHeight = 1.0 / ( size * size );\\n\\n\\t\\t\\t// Get the slices on either side of the sample\\n\\t\\t\\tfloat slice = rgb.b * size;\\n\\t\\t\\tfloat interp = fract( slice );\\n\\t\\t\\tfloat slice0 = slice - interp;\\n\\t\\t\\tfloat centeredInterp = interp - 0.5;\\n\\n\\t\\t\\tfloat slice1 = slice0 + sign( centeredInterp );\\n\\n\\t\\t\\t// Pull y sample in by half a pixel in each direction to avoid color\\n\\t\\t\\t// bleeding from adjacent slices.\\n\\t\\t\\tfloat greenOffset = clamp( rgb.g * sliceHeight, yPixelHeight * 0.5, sliceHeight - yPixelHeight * 0.5 );\\n\\n\\t\\t\\tvec2 uv0 = vec2(\\n\\t\\t\\t\\trgb.r,\\n\\t\\t\\t\\tslice0 * sliceHeight + greenOffset\\n\\t\\t\\t);\\n\\t\\t\\tvec2 uv1 = vec2(\\n\\t\\t\\t\\trgb.r,\\n\\t\\t\\t\\tslice1 * sliceHeight + greenOffset\\n\\t\\t\\t);\\n\\n\\t\\t\\tvec3 sample0 = texture2D( tex, uv0 ).rgb;\\n\\t\\t\\tvec3 sample1 = texture2D( tex, uv1 ).rgb;\\n\\n\\t\\t\\treturn mix( sample0, sample1, abs( centeredInterp ) );\\n\\n\\t\\t}\\n\\t\\t#endif\\n\\n\\t\\tvarying vec2 vUv;\\n\\t\\tuniform float intensity;\\n\\t\\tuniform sampler2D tDiffuse;\\n\\t\\tvoid main() {\\n\\n\\t\\t\\tvec4 val = texture2D( tDiffuse, vUv );\\n\\t\\t\\tvec4 lutVal;\\n\\n\\t\\t\\t// pull the sample in by half a pixel so the sample begins\\n\\t\\t\\t// at the center of the edge pixels.\\n\\t\\t\\tfloat pixelWidth = 1.0 / lutSize;\\n\\t\\t\\tfloat halfPixelWidth = 0.5 / lutSize;\\n\\t\\t\\tvec3 uvw = vec3( halfPixelWidth ) + val.rgb * ( 1.0 - pixelWidth );\\n\\n\\t\\t\\t#if USE_3DTEXTURE\\n\\n\\t\\t\\tlutVal = vec4( texture( lut3d, uvw ).rgb, val.a );\\n\\n\\t\\t\\t#else\\n\\n\\t\\t\\tlutVal = vec4( lutLookup( lut, lutSize, uvw ), val.a );\\n\\n\\t\\t\\t#endif\\n\\n\\t\\t\\tgl_FragColor = vec4( mix( val, lutVal, intensity ) );\\n\\n\\t\\t}\\n\\n\\t\"\n};\n\nvar LUTPass = /*#__PURE__*/function (_ShaderPass) {\n  _inherits(LUTPass, _ShaderPass);\n\n  var _super = _createSuper(LUTPass);\n\n  function LUTPass() {\n    var _this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, LUTPass);\n\n    _this = _super.call(this, LUTShader);\n    _this.lut = options.lut || null;\n    _this.intensity = 'intensity' in options ? options.intensity : 1;\n    return _this;\n  }\n\n  _createClass(LUTPass, [{\n    key: \"lut\",\n    get: function get() {\n      return this.material.uniforms.lut.value || this.material.uniforms.lut3d.value;\n    },\n    set: function set(v) {\n      var material = this.material;\n\n      if (v !== this.lut) {\n        material.uniforms.lut3d.value = null;\n        material.uniforms.lut.value = null;\n\n        if (v) {\n          var is3dTextureDefine = v.isDataTexture3D ? 1 : 0;\n\n          if (is3dTextureDefine !== material.defines.USE_3DTEXTURE) {\n            material.defines.USE_3DTEXTURE = is3dTextureDefine;\n            material.needsUpdate = true;\n          }\n\n          material.uniforms.lutSize.value = v.image.width;\n\n          if (v.isDataTexture3D) {\n            material.uniforms.lut3d.value = v;\n          } else {\n            material.uniforms.lut.value = v;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"intensity\",\n    get: function get() {\n      return this.material.uniforms.intensity.value;\n    },\n    set: function set(v) {\n      this.material.uniforms.intensity.value = v;\n    }\n  }]);\n\n  return LUTPass;\n}(ShaderPass);\n\nexport { LUTPass };","map":{"version":3,"names":["ShaderPass","LUTShader","defines","USE_3DTEXTURE","uniforms","lut3d","value","lut","lutSize","tDiffuse","intensity","vertexShader","fragmentShader","LUTPass","options","material","v","is3dTextureDefine","isDataTexture3D","needsUpdate","image","width"],"sources":["D:/Github/NIKE-DJANGO/Jord/l4fycy/node_modules/three-stdlib/postprocessing/LUTPass.js"],"sourcesContent":["import { ShaderPass } from './ShaderPass.js';\r\n\r\nconst LUTShader = {\r\n  defines: {\r\n    USE_3DTEXTURE: 1\r\n  },\r\n  uniforms: {\r\n    lut3d: {\r\n      value: null\r\n    },\r\n    lut: {\r\n      value: null\r\n    },\r\n    lutSize: {\r\n      value: 0\r\n    },\r\n    tDiffuse: {\r\n      value: null\r\n    },\r\n    intensity: {\r\n      value: 1.0\r\n    }\r\n  },\r\n  vertexShader:\r\n  /* glsl */\r\n  `\r\n\r\n\t\tvarying vec2 vUv;\r\n\r\n\t\tvoid main() {\r\n\r\n\t\t\tvUv = uv;\r\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n\r\n\t\t}\r\n\r\n\t`,\r\n  fragmentShader:\r\n  /* glsl */\r\n  `\r\n\t\tprecision highp sampler3D;\r\n\r\n\t\tuniform float lutSize;\r\n\t\t#if USE_3DTEXTURE\r\n\t\tuniform sampler3D lut3d;\r\n\t\t#else\r\n\t\tuniform sampler2D lut;\r\n\r\n\t\tvec3 lutLookup( sampler2D tex, float size, vec3 rgb ) {\r\n\r\n\t\t\tfloat sliceHeight = 1.0 / size;\r\n\t\t\tfloat yPixelHeight = 1.0 / ( size * size );\r\n\r\n\t\t\t// Get the slices on either side of the sample\r\n\t\t\tfloat slice = rgb.b * size;\r\n\t\t\tfloat interp = fract( slice );\r\n\t\t\tfloat slice0 = slice - interp;\r\n\t\t\tfloat centeredInterp = interp - 0.5;\r\n\r\n\t\t\tfloat slice1 = slice0 + sign( centeredInterp );\r\n\r\n\t\t\t// Pull y sample in by half a pixel in each direction to avoid color\r\n\t\t\t// bleeding from adjacent slices.\r\n\t\t\tfloat greenOffset = clamp( rgb.g * sliceHeight, yPixelHeight * 0.5, sliceHeight - yPixelHeight * 0.5 );\r\n\r\n\t\t\tvec2 uv0 = vec2(\r\n\t\t\t\trgb.r,\r\n\t\t\t\tslice0 * sliceHeight + greenOffset\r\n\t\t\t);\r\n\t\t\tvec2 uv1 = vec2(\r\n\t\t\t\trgb.r,\r\n\t\t\t\tslice1 * sliceHeight + greenOffset\r\n\t\t\t);\r\n\r\n\t\t\tvec3 sample0 = texture2D( tex, uv0 ).rgb;\r\n\t\t\tvec3 sample1 = texture2D( tex, uv1 ).rgb;\r\n\r\n\t\t\treturn mix( sample0, sample1, abs( centeredInterp ) );\r\n\r\n\t\t}\r\n\t\t#endif\r\n\r\n\t\tvarying vec2 vUv;\r\n\t\tuniform float intensity;\r\n\t\tuniform sampler2D tDiffuse;\r\n\t\tvoid main() {\r\n\r\n\t\t\tvec4 val = texture2D( tDiffuse, vUv );\r\n\t\t\tvec4 lutVal;\r\n\r\n\t\t\t// pull the sample in by half a pixel so the sample begins\r\n\t\t\t// at the center of the edge pixels.\r\n\t\t\tfloat pixelWidth = 1.0 / lutSize;\r\n\t\t\tfloat halfPixelWidth = 0.5 / lutSize;\r\n\t\t\tvec3 uvw = vec3( halfPixelWidth ) + val.rgb * ( 1.0 - pixelWidth );\r\n\r\n\t\t\t#if USE_3DTEXTURE\r\n\r\n\t\t\tlutVal = vec4( texture( lut3d, uvw ).rgb, val.a );\r\n\r\n\t\t\t#else\r\n\r\n\t\t\tlutVal = vec4( lutLookup( lut, lutSize, uvw ), val.a );\r\n\r\n\t\t\t#endif\r\n\r\n\t\t\tgl_FragColor = vec4( mix( val, lutVal, intensity ) );\r\n\r\n\t\t}\r\n\r\n\t`\r\n};\r\n\r\nclass LUTPass extends ShaderPass {\r\n  set lut(v) {\r\n    const material = this.material;\r\n\r\n    if (v !== this.lut) {\r\n      material.uniforms.lut3d.value = null;\r\n      material.uniforms.lut.value = null;\r\n\r\n      if (v) {\r\n        const is3dTextureDefine = v.isDataTexture3D ? 1 : 0;\r\n\r\n        if (is3dTextureDefine !== material.defines.USE_3DTEXTURE) {\r\n          material.defines.USE_3DTEXTURE = is3dTextureDefine;\r\n          material.needsUpdate = true;\r\n        }\r\n\r\n        material.uniforms.lutSize.value = v.image.width;\r\n\r\n        if (v.isDataTexture3D) {\r\n          material.uniforms.lut3d.value = v;\r\n        } else {\r\n          material.uniforms.lut.value = v;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  get lut() {\r\n    return this.material.uniforms.lut.value || this.material.uniforms.lut3d.value;\r\n  }\r\n\r\n  set intensity(v) {\r\n    this.material.uniforms.intensity.value = v;\r\n  }\r\n\r\n  get intensity() {\r\n    return this.material.uniforms.intensity.value;\r\n  }\r\n\r\n  constructor(options = {}) {\r\n    super(LUTShader);\r\n    this.lut = options.lut || null;\r\n    this.intensity = 'intensity' in options ? options.intensity : 1;\r\n  }\r\n\r\n}\r\n\r\nexport { LUTPass };\r\n"],"mappings":";;;;AAAA,SAASA,UAAT,QAA2B,iBAA3B;AAEA,IAAMC,SAAS,GAAG;EAChBC,OAAO,EAAE;IACPC,aAAa,EAAE;EADR,CADO;EAIhBC,QAAQ,EAAE;IACRC,KAAK,EAAE;MACLC,KAAK,EAAE;IADF,CADC;IAIRC,GAAG,EAAE;MACHD,KAAK,EAAE;IADJ,CAJG;IAORE,OAAO,EAAE;MACPF,KAAK,EAAE;IADA,CAPD;IAURG,QAAQ,EAAE;MACRH,KAAK,EAAE;IADC,CAVF;IAaRI,SAAS,EAAE;MACTJ,KAAK,EAAE;IADE;EAbH,CAJM;EAqBhBK,YAAY;EACZ;EADY,mKArBI;EAmChBC,cAAc;EACd;EADc;AAnCE,CAAlB;;IA+GMC,O;;;;;EAuCJ,mBAA0B;IAAA;;IAAA,IAAdC,OAAc,uEAAJ,EAAI;;IAAA;;IACxB,0BAAMb,SAAN;IACA,MAAKM,GAAL,GAAWO,OAAO,CAACP,GAAR,IAAe,IAA1B;IACA,MAAKG,SAAL,GAAiB,eAAeI,OAAf,GAAyBA,OAAO,CAACJ,SAAjC,GAA6C,CAA9D;IAHwB;EAIzB;;;;SAhBD,eAAU;MACR,OAAO,KAAKK,QAAL,CAAcX,QAAd,CAAuBG,GAAvB,CAA2BD,KAA3B,IAAoC,KAAKS,QAAL,CAAcX,QAAd,CAAuBC,KAAvB,CAA6BC,KAAxE;IACD,C;SA5BD,aAAQU,CAAR,EAAW;MACT,IAAMD,QAAQ,GAAG,KAAKA,QAAtB;;MAEA,IAAIC,CAAC,KAAK,KAAKT,GAAf,EAAoB;QAClBQ,QAAQ,CAACX,QAAT,CAAkBC,KAAlB,CAAwBC,KAAxB,GAAgC,IAAhC;QACAS,QAAQ,CAACX,QAAT,CAAkBG,GAAlB,CAAsBD,KAAtB,GAA8B,IAA9B;;QAEA,IAAIU,CAAJ,EAAO;UACL,IAAMC,iBAAiB,GAAGD,CAAC,CAACE,eAAF,GAAoB,CAApB,GAAwB,CAAlD;;UAEA,IAAID,iBAAiB,KAAKF,QAAQ,CAACb,OAAT,CAAiBC,aAA3C,EAA0D;YACxDY,QAAQ,CAACb,OAAT,CAAiBC,aAAjB,GAAiCc,iBAAjC;YACAF,QAAQ,CAACI,WAAT,GAAuB,IAAvB;UACD;;UAEDJ,QAAQ,CAACX,QAAT,CAAkBI,OAAlB,CAA0BF,KAA1B,GAAkCU,CAAC,CAACI,KAAF,CAAQC,KAA1C;;UAEA,IAAIL,CAAC,CAACE,eAAN,EAAuB;YACrBH,QAAQ,CAACX,QAAT,CAAkBC,KAAlB,CAAwBC,KAAxB,GAAgCU,CAAhC;UACD,CAFD,MAEO;YACLD,QAAQ,CAACX,QAAT,CAAkBG,GAAlB,CAAsBD,KAAtB,GAA8BU,CAA9B;UACD;QACF;MACF;IACF;;;SAUD,eAAgB;MACd,OAAO,KAAKD,QAAL,CAAcX,QAAd,CAAuBM,SAAvB,CAAiCJ,KAAxC;IACD,C;SAND,aAAcU,CAAd,EAAiB;MACf,KAAKD,QAAL,CAAcX,QAAd,CAAuBM,SAAvB,CAAiCJ,KAAjC,GAAyCU,CAAzC;IACD;;;;EAjCmBhB,U;;AA+CtB,SAASa,OAAT"},"metadata":{},"sourceType":"module"}