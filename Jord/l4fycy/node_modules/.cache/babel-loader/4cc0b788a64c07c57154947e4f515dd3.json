{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.genDts = void 0;\n\nvar flatten_1 = __importDefault(require(\"lodash/flatten\"));\n\nvar isArray_1 = __importDefault(require(\"lodash/isArray\"));\n\nvar map_1 = __importDefault(require(\"lodash/map\"));\n\nvar reduce_1 = __importDefault(require(\"lodash/reduce\"));\n\nvar uniq_1 = __importDefault(require(\"lodash/uniq\"));\n\nvar upperFirst_1 = __importDefault(require(\"lodash/upperFirst\"));\n\nfunction genDts(model, options) {\n  var contentParts = [];\n  contentParts = contentParts.concat(\"import type { CstNode, ICstVisitor, IToken } from \\\"chevrotain\\\";\");\n  contentParts = contentParts.concat((0, flatten_1.default)((0, map_1.default)(model, function (node) {\n    return genCstNodeTypes(node);\n  })));\n\n  if (options.includeVisitorInterface) {\n    contentParts = contentParts.concat(genVisitor(options.visitorInterfaceName, model));\n  }\n\n  return contentParts.join(\"\\n\\n\") + \"\\n\";\n}\n\nexports.genDts = genDts;\n\nfunction genCstNodeTypes(node) {\n  var nodeCstInterface = genNodeInterface(node);\n  var nodeChildrenInterface = genNodeChildrenType(node);\n  return [nodeCstInterface, nodeChildrenInterface];\n}\n\nfunction genNodeInterface(node) {\n  var nodeInterfaceName = getNodeInterfaceName(node.name);\n  var childrenTypeName = getNodeChildrenTypeName(node.name);\n  return \"export interface \".concat(nodeInterfaceName, \" extends CstNode {\\n  name: \\\"\").concat(node.name, \"\\\";\\n  children: \").concat(childrenTypeName, \";\\n}\");\n}\n\nfunction genNodeChildrenType(node) {\n  var typeName = getNodeChildrenTypeName(node.name);\n  return \"export type \".concat(typeName, \" = {\\n  \").concat((0, map_1.default)(node.properties, function (property) {\n    return genChildProperty(property);\n  }).join(\"\\n  \"), \"\\n};\");\n}\n\nfunction genChildProperty(prop) {\n  var typeName = buildTypeString(prop.type);\n  return \"\".concat(prop.name).concat(prop.optional ? \"?\" : \"\", \": \").concat(typeName, \"[];\");\n}\n\nfunction genVisitor(name, nodes) {\n  return \"export interface \".concat(name, \"<IN, OUT> extends ICstVisitor<IN, OUT> {\\n  \").concat((0, map_1.default)(nodes, function (node) {\n    return genVisitorFunction(node);\n  }).join(\"\\n  \"), \"\\n}\");\n}\n\nfunction genVisitorFunction(node) {\n  var childrenTypeName = getNodeChildrenTypeName(node.name);\n  return \"\".concat(node.name, \"(children: \").concat(childrenTypeName, \", param?: IN): OUT;\");\n}\n\nfunction buildTypeString(type) {\n  if ((0, isArray_1.default)(type)) {\n    var typeNames = (0, uniq_1.default)((0, map_1.default)(type, function (t) {\n      return getTypeString(t);\n    }));\n    var typeString = (0, reduce_1.default)(typeNames, function (sum, t) {\n      return sum + \" | \" + t;\n    });\n    return \"(\" + typeString + \")\";\n  } else {\n    return getTypeString(type);\n  }\n}\n\nfunction getTypeString(type) {\n  if (type.kind === \"token\") {\n    return \"IToken\";\n  }\n\n  return getNodeInterfaceName(type.name);\n}\n\nfunction getNodeInterfaceName(ruleName) {\n  return (0, upperFirst_1.default)(ruleName) + \"CstNode\";\n}\n\nfunction getNodeChildrenTypeName(ruleName) {\n  return (0, upperFirst_1.default)(ruleName) + \"CstChildren\";\n}","map":{"version":3,"mappings":"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","names":["genDts","model","options","contentParts","concat","node","includeVisitorInterface","genVisitor","visitorInterfaceName","join","exports","genCstNodeTypes","nodeCstInterface","genNodeInterface","nodeChildrenInterface","genNodeChildrenType","nodeInterfaceName","getNodeInterfaceName","name","childrenTypeName","getNodeChildrenTypeName","typeName","properties","property","genChildProperty","prop","buildTypeString","type","optional","nodes","genVisitorFunction","typeNames","t","typeString","sum","getTypeString","kind","ruleName"],"sources":["D:\\Github\\NIKE-DJANGO\\Jord\\l4fycy\\node_modules\\@chevrotain\\cst-dts-gen\\src\\generate.ts"],"sourcesContent":["import flatten from \"lodash/flatten\"\r\nimport isArray from \"lodash/isArray\"\r\nimport map from \"lodash/map\"\r\nimport reduce from \"lodash/reduce\"\r\nimport uniq from \"lodash/uniq\"\r\nimport upperFirst from \"lodash/upperFirst\"\r\nimport { GenerateDtsOptions } from \"@chevrotain/types\"\r\nimport {\r\n  CstNodeTypeDefinition,\r\n  PropertyTypeDefinition,\r\n  PropertyArrayType,\r\n  TokenArrayType,\r\n  RuleArrayType\r\n} from \"./model\"\r\n\r\nexport function genDts(\r\n  model: CstNodeTypeDefinition[],\r\n  options: Required<GenerateDtsOptions>\r\n): string {\r\n  let contentParts: string[] = []\r\n\r\n  contentParts = contentParts.concat(\r\n    `import type { CstNode, ICstVisitor, IToken } from \"chevrotain\";`\r\n  )\r\n\r\n  contentParts = contentParts.concat(\r\n    flatten(map(model, (node) => genCstNodeTypes(node)))\r\n  )\r\n\r\n  if (options.includeVisitorInterface) {\r\n    contentParts = contentParts.concat(\r\n      genVisitor(options.visitorInterfaceName, model)\r\n    )\r\n  }\r\n\r\n  return contentParts.join(\"\\n\\n\") + \"\\n\"\r\n}\r\n\r\nfunction genCstNodeTypes(node: CstNodeTypeDefinition) {\r\n  const nodeCstInterface = genNodeInterface(node)\r\n  const nodeChildrenInterface = genNodeChildrenType(node)\r\n\r\n  return [nodeCstInterface, nodeChildrenInterface]\r\n}\r\n\r\nfunction genNodeInterface(node: CstNodeTypeDefinition) {\r\n  const nodeInterfaceName = getNodeInterfaceName(node.name)\r\n  const childrenTypeName = getNodeChildrenTypeName(node.name)\r\n\r\n  return `export interface ${nodeInterfaceName} extends CstNode {\r\n  name: \"${node.name}\";\r\n  children: ${childrenTypeName};\r\n}`\r\n}\r\n\r\nfunction genNodeChildrenType(node: CstNodeTypeDefinition) {\r\n  const typeName = getNodeChildrenTypeName(node.name)\r\n\r\n  return `export type ${typeName} = {\r\n  ${map(node.properties, (property) => genChildProperty(property)).join(\"\\n  \")}\r\n};`\r\n}\r\n\r\nfunction genChildProperty(prop: PropertyTypeDefinition) {\r\n  const typeName = buildTypeString(prop.type)\r\n  return `${prop.name}${prop.optional ? \"?\" : \"\"}: ${typeName}[];`\r\n}\r\n\r\nfunction genVisitor(name: string, nodes: CstNodeTypeDefinition[]) {\r\n  return `export interface ${name}<IN, OUT> extends ICstVisitor<IN, OUT> {\r\n  ${map(nodes, (node) => genVisitorFunction(node)).join(\"\\n  \")}\r\n}`\r\n}\r\n\r\nfunction genVisitorFunction(node: CstNodeTypeDefinition) {\r\n  const childrenTypeName = getNodeChildrenTypeName(node.name)\r\n  return `${node.name}(children: ${childrenTypeName}, param?: IN): OUT;`\r\n}\r\n\r\nfunction buildTypeString(type: PropertyArrayType) {\r\n  if (isArray(type)) {\r\n    const typeNames = uniq(map(type, (t) => getTypeString(t)))\r\n    const typeString = reduce(typeNames, (sum, t) => sum + \" | \" + t)\r\n    return \"(\" + typeString + \")\"\r\n  } else {\r\n    return getTypeString(type)\r\n  }\r\n}\r\n\r\nfunction getTypeString(type: TokenArrayType | RuleArrayType) {\r\n  if (type.kind === \"token\") {\r\n    return \"IToken\"\r\n  }\r\n  return getNodeInterfaceName(type.name)\r\n}\r\n\r\nfunction getNodeInterfaceName(ruleName: string) {\r\n  return upperFirst(ruleName) + \"CstNode\"\r\n}\r\n\r\nfunction getNodeChildrenTypeName(ruleName: string) {\r\n  return upperFirst(ruleName) + \"CstChildren\"\r\n}\r\n"]},"metadata":{},"sourceType":"script"}