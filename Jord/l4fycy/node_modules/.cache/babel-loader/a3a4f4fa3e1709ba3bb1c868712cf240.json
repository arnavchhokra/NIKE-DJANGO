{"ast":null,"code":"import _createClass from \"D:/Github/NIKE-DJANGO/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"D:/Github/NIKE-DJANGO/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _assertThisInitialized from \"D:/Github/NIKE-DJANGO/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"D:/Github/NIKE-DJANGO/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"D:/Github/NIKE-DJANGO/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Mesh, Color, PerspectiveCamera, Plane, Matrix4, WebGLRenderTarget, ShaderMaterial, UniformsUtils, Vector3, Quaternion, Vector4 } from 'three';\n\nvar Refractor = /*#__PURE__*/function (_Mesh) {\n  _inherits(Refractor, _Mesh);\n\n  var _super = _createSuper(Refractor);\n\n  function Refractor(geometry) {\n    var _this;\n\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Refractor);\n\n    _this = _super.call(this, geometry);\n    _this.type = 'Refractor';\n\n    var scope = _assertThisInitialized(_this);\n\n    var color = options.color !== undefined ? new Color(options.color) : new Color(0x7f7f7f);\n    var textureWidth = options.textureWidth || 512;\n    var textureHeight = options.textureHeight || 512;\n    var clipBias = options.clipBias || 0;\n    var shader = options.shader || Refractor.RefractorShader; //\n\n    var virtualCamera = new PerspectiveCamera();\n    virtualCamera.matrixAutoUpdate = false;\n    virtualCamera.userData.refractor = true; //\n\n    var refractorPlane = new Plane();\n    var textureMatrix = new Matrix4(); // render target\n\n    var renderTarget = new WebGLRenderTarget(textureWidth, textureHeight); // material\n\n    _this.material = new ShaderMaterial({\n      uniforms: UniformsUtils.clone(shader.uniforms),\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader,\n      transparent: true // ensures, refractors are drawn from farthest to closest\n\n    });\n    _this.material.uniforms['color'].value = color;\n    _this.material.uniforms['tDiffuse'].value = renderTarget.texture;\n    _this.material.uniforms['textureMatrix'].value = textureMatrix; // functions\n\n    var visible = function () {\n      var refractorWorldPosition = new Vector3();\n      var cameraWorldPosition = new Vector3();\n      var rotationMatrix = new Matrix4();\n      var view = new Vector3();\n      var normal = new Vector3();\n      return function visible(camera) {\n        refractorWorldPosition.setFromMatrixPosition(scope.matrixWorld);\n        cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);\n        view.subVectors(refractorWorldPosition, cameraWorldPosition);\n        rotationMatrix.extractRotation(scope.matrixWorld);\n        normal.set(0, 0, 1);\n        normal.applyMatrix4(rotationMatrix);\n        return view.dot(normal) < 0;\n      };\n    }();\n\n    var updateRefractorPlane = function () {\n      var normal = new Vector3();\n      var position = new Vector3();\n      var quaternion = new Quaternion();\n      var scale = new Vector3();\n      return function updateRefractorPlane() {\n        scope.matrixWorld.decompose(position, quaternion, scale);\n        normal.set(0, 0, 1).applyQuaternion(quaternion).normalize(); // flip the normal because we want to cull everything above the plane\n\n        normal.negate();\n        refractorPlane.setFromNormalAndCoplanarPoint(normal, position);\n      };\n    }();\n\n    var updateVirtualCamera = function () {\n      var clipPlane = new Plane();\n      var clipVector = new Vector4();\n      var q = new Vector4();\n      return function updateVirtualCamera(camera) {\n        virtualCamera.matrixWorld.copy(camera.matrixWorld);\n        virtualCamera.matrixWorldInverse.copy(virtualCamera.matrixWorld).invert();\n        virtualCamera.projectionMatrix.copy(camera.projectionMatrix);\n        virtualCamera.far = camera.far; // used in WebGLBackground\n        // The following code creates an oblique view frustum for clipping.\n        // see: Lengyel, Eric. “Oblique View Frustum Depth Projection and Clipping”.\n        // Journal of Game Development, Vol. 1, No. 2 (2005), Charles River Media, pp. 5–16\n\n        clipPlane.copy(refractorPlane);\n        clipPlane.applyMatrix4(virtualCamera.matrixWorldInverse);\n        clipVector.set(clipPlane.normal.x, clipPlane.normal.y, clipPlane.normal.z, clipPlane.constant); // calculate the clip-space corner point opposite the clipping plane and\n        // transform it into camera space by multiplying it by the inverse of the projection matrix\n\n        var projectionMatrix = virtualCamera.projectionMatrix;\n        q.x = (Math.sign(clipVector.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];\n        q.y = (Math.sign(clipVector.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];\n        q.z = -1.0;\n        q.w = (1.0 + projectionMatrix.elements[10]) / projectionMatrix.elements[14]; // calculate the scaled plane vector\n\n        clipVector.multiplyScalar(2.0 / clipVector.dot(q)); // replacing the third row of the projection matrix\n\n        projectionMatrix.elements[2] = clipVector.x;\n        projectionMatrix.elements[6] = clipVector.y;\n        projectionMatrix.elements[10] = clipVector.z + 1.0 - clipBias;\n        projectionMatrix.elements[14] = clipVector.w;\n      };\n    }(); // This will update the texture matrix that is used for projective texture mapping in the shader.\n    // see: http://developer.download.nvidia.com/assets/gamedev/docs/projective_texture_mapping.pdf\n\n\n    function updateTextureMatrix(camera) {\n      // this matrix does range mapping to [ 0, 1 ]\n      textureMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0); // we use \"Object Linear Texgen\", so we need to multiply the texture matrix T\n      // (matrix above) with the projection and view matrix of the virtual camera\n      // and the model matrix of the refractor\n\n      textureMatrix.multiply(camera.projectionMatrix);\n      textureMatrix.multiply(camera.matrixWorldInverse);\n      textureMatrix.multiply(scope.matrixWorld);\n    } //\n\n\n    function render(renderer, scene, camera) {\n      scope.visible = false;\n      var currentRenderTarget = renderer.getRenderTarget();\n      var currentXrEnabled = renderer.xr.enabled;\n      var currentShadowAutoUpdate = renderer.shadowMap.autoUpdate;\n      renderer.xr.enabled = false; // avoid camera modification\n\n      renderer.shadowMap.autoUpdate = false; // avoid re-computing shadows\n\n      renderer.setRenderTarget(renderTarget);\n      if (renderer.autoClear === false) renderer.clear();\n      renderer.render(scene, virtualCamera);\n      renderer.xr.enabled = currentXrEnabled;\n      renderer.shadowMap.autoUpdate = currentShadowAutoUpdate;\n      renderer.setRenderTarget(currentRenderTarget); // restore viewport\n\n      var viewport = camera.viewport;\n\n      if (viewport !== undefined) {\n        renderer.state.viewport(viewport);\n      }\n\n      scope.visible = true;\n    } //\n\n\n    _this.onBeforeRender = function (renderer, scene, camera) {\n      // Render\n      renderTarget.texture.encoding = renderer.outputEncoding; // ensure refractors are rendered only once per frame\n\n      if (camera.userData.refractor === true) return; // avoid rendering when the refractor is viewed from behind\n\n      if (!visible(camera) === true) return; // update\n\n      updateRefractorPlane();\n      updateTextureMatrix(camera);\n      updateVirtualCamera(camera);\n      render(renderer, scene, camera);\n    };\n\n    _this.getRenderTarget = function () {\n      return renderTarget;\n    };\n\n    _this.dispose = function () {\n      renderTarget.dispose();\n      scope.material.dispose();\n    };\n\n    return _this;\n  }\n\n  return _createClass(Refractor);\n}(Mesh);\n\nRefractor.prototype.isRefractor = true;\nRefractor.RefractorShader = {\n  uniforms: {\n    color: {\n      value: null\n    },\n    tDiffuse: {\n      value: null\n    },\n    textureMatrix: {\n      value: null\n    }\n  },\n  vertexShader:\n  /* glsl */\n  \"\\n\\n\\t\\tuniform mat4 textureMatrix;\\n\\n\\t\\tvarying vec4 vUv;\\n\\n\\t\\tvoid main() {\\n\\n\\t\\t\\tvUv = textureMatrix * vec4( position, 1.0 );\\n\\t\\t\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\\n\\t\\t}\",\n  fragmentShader:\n  /* glsl */\n  \"\\n\\n\\t\\tuniform vec3 color;\\n\\t\\tuniform sampler2D tDiffuse;\\n\\n\\t\\tvarying vec4 vUv;\\n\\n\\t\\tfloat blendOverlay( float base, float blend ) {\\n\\n\\t\\t\\treturn( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );\\n\\n\\t\\t}\\n\\n\\t\\tvec3 blendOverlay( vec3 base, vec3 blend ) {\\n\\n\\t\\t\\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ), blendOverlay( base.b, blend.b ) );\\n\\n\\t\\t}\\n\\n\\t\\tvoid main() {\\n\\n\\t\\t\\tvec4 base = texture2DProj( tDiffuse, vUv );\\n\\t\\t\\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );\\n\\n\\t\\t}\"\n};\nexport { Refractor };","map":{"version":3,"names":["Mesh","Color","PerspectiveCamera","Plane","Matrix4","WebGLRenderTarget","ShaderMaterial","UniformsUtils","Vector3","Quaternion","Vector4","Refractor","geometry","options","type","scope","color","undefined","textureWidth","textureHeight","clipBias","shader","RefractorShader","virtualCamera","matrixAutoUpdate","userData","refractor","refractorPlane","textureMatrix","renderTarget","material","uniforms","clone","vertexShader","fragmentShader","transparent","value","texture","visible","refractorWorldPosition","cameraWorldPosition","rotationMatrix","view","normal","camera","setFromMatrixPosition","matrixWorld","subVectors","extractRotation","set","applyMatrix4","dot","updateRefractorPlane","position","quaternion","scale","decompose","applyQuaternion","normalize","negate","setFromNormalAndCoplanarPoint","updateVirtualCamera","clipPlane","clipVector","q","copy","matrixWorldInverse","invert","projectionMatrix","far","x","y","z","constant","Math","sign","elements","w","multiplyScalar","updateTextureMatrix","multiply","render","renderer","scene","currentRenderTarget","getRenderTarget","currentXrEnabled","xr","enabled","currentShadowAutoUpdate","shadowMap","autoUpdate","setRenderTarget","autoClear","clear","viewport","state","onBeforeRender","encoding","outputEncoding","dispose","prototype","isRefractor","tDiffuse"],"sources":["D:/Github/NIKE-DJANGO/Jord/l4fycy/node_modules/three-stdlib/objects/Refractor.js"],"sourcesContent":["import { Mesh, Color, PerspectiveCamera, Plane, Matrix4, WebGLRenderTarget, ShaderMaterial, UniformsUtils, Vector3, Quaternion, Vector4 } from 'three';\r\n\r\nclass Refractor extends Mesh {\r\n  constructor(geometry, options = {}) {\r\n    super(geometry);\r\n    this.type = 'Refractor';\r\n    const scope = this;\r\n    const color = options.color !== undefined ? new Color(options.color) : new Color(0x7f7f7f);\r\n    const textureWidth = options.textureWidth || 512;\r\n    const textureHeight = options.textureHeight || 512;\r\n    const clipBias = options.clipBias || 0;\r\n    const shader = options.shader || Refractor.RefractorShader; //\r\n\r\n    const virtualCamera = new PerspectiveCamera();\r\n    virtualCamera.matrixAutoUpdate = false;\r\n    virtualCamera.userData.refractor = true; //\r\n\r\n    const refractorPlane = new Plane();\r\n    const textureMatrix = new Matrix4(); // render target\r\n\r\n    const renderTarget = new WebGLRenderTarget(textureWidth, textureHeight); // material\r\n\r\n    this.material = new ShaderMaterial({\r\n      uniforms: UniformsUtils.clone(shader.uniforms),\r\n      vertexShader: shader.vertexShader,\r\n      fragmentShader: shader.fragmentShader,\r\n      transparent: true // ensures, refractors are drawn from farthest to closest\r\n\r\n    });\r\n    this.material.uniforms['color'].value = color;\r\n    this.material.uniforms['tDiffuse'].value = renderTarget.texture;\r\n    this.material.uniforms['textureMatrix'].value = textureMatrix; // functions\r\n\r\n    const visible = function () {\r\n      const refractorWorldPosition = new Vector3();\r\n      const cameraWorldPosition = new Vector3();\r\n      const rotationMatrix = new Matrix4();\r\n      const view = new Vector3();\r\n      const normal = new Vector3();\r\n      return function visible(camera) {\r\n        refractorWorldPosition.setFromMatrixPosition(scope.matrixWorld);\r\n        cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);\r\n        view.subVectors(refractorWorldPosition, cameraWorldPosition);\r\n        rotationMatrix.extractRotation(scope.matrixWorld);\r\n        normal.set(0, 0, 1);\r\n        normal.applyMatrix4(rotationMatrix);\r\n        return view.dot(normal) < 0;\r\n      };\r\n    }();\r\n\r\n    const updateRefractorPlane = function () {\r\n      const normal = new Vector3();\r\n      const position = new Vector3();\r\n      const quaternion = new Quaternion();\r\n      const scale = new Vector3();\r\n      return function updateRefractorPlane() {\r\n        scope.matrixWorld.decompose(position, quaternion, scale);\r\n        normal.set(0, 0, 1).applyQuaternion(quaternion).normalize(); // flip the normal because we want to cull everything above the plane\r\n\r\n        normal.negate();\r\n        refractorPlane.setFromNormalAndCoplanarPoint(normal, position);\r\n      };\r\n    }();\r\n\r\n    const updateVirtualCamera = function () {\r\n      const clipPlane = new Plane();\r\n      const clipVector = new Vector4();\r\n      const q = new Vector4();\r\n      return function updateVirtualCamera(camera) {\r\n        virtualCamera.matrixWorld.copy(camera.matrixWorld);\r\n        virtualCamera.matrixWorldInverse.copy(virtualCamera.matrixWorld).invert();\r\n        virtualCamera.projectionMatrix.copy(camera.projectionMatrix);\r\n        virtualCamera.far = camera.far; // used in WebGLBackground\r\n        // The following code creates an oblique view frustum for clipping.\r\n        // see: Lengyel, Eric. “Oblique View Frustum Depth Projection and Clipping”.\r\n        // Journal of Game Development, Vol. 1, No. 2 (2005), Charles River Media, pp. 5–16\r\n\r\n        clipPlane.copy(refractorPlane);\r\n        clipPlane.applyMatrix4(virtualCamera.matrixWorldInverse);\r\n        clipVector.set(clipPlane.normal.x, clipPlane.normal.y, clipPlane.normal.z, clipPlane.constant); // calculate the clip-space corner point opposite the clipping plane and\r\n        // transform it into camera space by multiplying it by the inverse of the projection matrix\r\n\r\n        const projectionMatrix = virtualCamera.projectionMatrix;\r\n        q.x = (Math.sign(clipVector.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];\r\n        q.y = (Math.sign(clipVector.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];\r\n        q.z = -1.0;\r\n        q.w = (1.0 + projectionMatrix.elements[10]) / projectionMatrix.elements[14]; // calculate the scaled plane vector\r\n\r\n        clipVector.multiplyScalar(2.0 / clipVector.dot(q)); // replacing the third row of the projection matrix\r\n\r\n        projectionMatrix.elements[2] = clipVector.x;\r\n        projectionMatrix.elements[6] = clipVector.y;\r\n        projectionMatrix.elements[10] = clipVector.z + 1.0 - clipBias;\r\n        projectionMatrix.elements[14] = clipVector.w;\r\n      };\r\n    }(); // This will update the texture matrix that is used for projective texture mapping in the shader.\r\n    // see: http://developer.download.nvidia.com/assets/gamedev/docs/projective_texture_mapping.pdf\r\n\r\n\r\n    function updateTextureMatrix(camera) {\r\n      // this matrix does range mapping to [ 0, 1 ]\r\n      textureMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0); // we use \"Object Linear Texgen\", so we need to multiply the texture matrix T\r\n      // (matrix above) with the projection and view matrix of the virtual camera\r\n      // and the model matrix of the refractor\r\n\r\n      textureMatrix.multiply(camera.projectionMatrix);\r\n      textureMatrix.multiply(camera.matrixWorldInverse);\r\n      textureMatrix.multiply(scope.matrixWorld);\r\n    } //\r\n\r\n\r\n    function render(renderer, scene, camera) {\r\n      scope.visible = false;\r\n      const currentRenderTarget = renderer.getRenderTarget();\r\n      const currentXrEnabled = renderer.xr.enabled;\r\n      const currentShadowAutoUpdate = renderer.shadowMap.autoUpdate;\r\n      renderer.xr.enabled = false; // avoid camera modification\r\n\r\n      renderer.shadowMap.autoUpdate = false; // avoid re-computing shadows\r\n\r\n      renderer.setRenderTarget(renderTarget);\r\n      if (renderer.autoClear === false) renderer.clear();\r\n      renderer.render(scene, virtualCamera);\r\n      renderer.xr.enabled = currentXrEnabled;\r\n      renderer.shadowMap.autoUpdate = currentShadowAutoUpdate;\r\n      renderer.setRenderTarget(currentRenderTarget); // restore viewport\r\n\r\n      const viewport = camera.viewport;\r\n\r\n      if (viewport !== undefined) {\r\n        renderer.state.viewport(viewport);\r\n      }\r\n\r\n      scope.visible = true;\r\n    } //\r\n\r\n\r\n    this.onBeforeRender = function (renderer, scene, camera) {\r\n      // Render\r\n      renderTarget.texture.encoding = renderer.outputEncoding; // ensure refractors are rendered only once per frame\r\n\r\n      if (camera.userData.refractor === true) return; // avoid rendering when the refractor is viewed from behind\r\n\r\n      if (!visible(camera) === true) return; // update\r\n\r\n      updateRefractorPlane();\r\n      updateTextureMatrix(camera);\r\n      updateVirtualCamera(camera);\r\n      render(renderer, scene, camera);\r\n    };\r\n\r\n    this.getRenderTarget = function () {\r\n      return renderTarget;\r\n    };\r\n\r\n    this.dispose = function () {\r\n      renderTarget.dispose();\r\n      scope.material.dispose();\r\n    };\r\n  }\r\n\r\n}\r\n\r\nRefractor.prototype.isRefractor = true;\r\nRefractor.RefractorShader = {\r\n  uniforms: {\r\n    color: {\r\n      value: null\r\n    },\r\n    tDiffuse: {\r\n      value: null\r\n    },\r\n    textureMatrix: {\r\n      value: null\r\n    }\r\n  },\r\n  vertexShader:\r\n  /* glsl */\r\n  `\r\n\r\n\t\tuniform mat4 textureMatrix;\r\n\r\n\t\tvarying vec4 vUv;\r\n\r\n\t\tvoid main() {\r\n\r\n\t\t\tvUv = textureMatrix * vec4( position, 1.0 );\r\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n\r\n\t\t}`,\r\n  fragmentShader:\r\n  /* glsl */\r\n  `\r\n\r\n\t\tuniform vec3 color;\r\n\t\tuniform sampler2D tDiffuse;\r\n\r\n\t\tvarying vec4 vUv;\r\n\r\n\t\tfloat blendOverlay( float base, float blend ) {\r\n\r\n\t\t\treturn( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );\r\n\r\n\t\t}\r\n\r\n\t\tvec3 blendOverlay( vec3 base, vec3 blend ) {\r\n\r\n\t\t\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ), blendOverlay( base.b, blend.b ) );\r\n\r\n\t\t}\r\n\r\n\t\tvoid main() {\r\n\r\n\t\t\tvec4 base = texture2DProj( tDiffuse, vUv );\r\n\t\t\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );\r\n\r\n\t\t}`\r\n};\r\n\r\nexport { Refractor };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}