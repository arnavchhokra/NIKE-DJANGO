{"ast":null,"code":"\"use strict\";\n/* istanbul ignore next */\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EarlyExitException = exports.NotAllInputParsedException = exports.NoViableAltException = exports.MismatchedTokenException = exports.isRecognitionException = void 0;\n\nvar includes_1 = __importDefault(require(\"lodash/includes\"));\n\nvar MISMATCHED_TOKEN_EXCEPTION = \"MismatchedTokenException\";\nvar NO_VIABLE_ALT_EXCEPTION = \"NoViableAltException\";\nvar EARLY_EXIT_EXCEPTION = \"EarlyExitException\";\nvar NOT_ALL_INPUT_PARSED_EXCEPTION = \"NotAllInputParsedException\";\nvar RECOGNITION_EXCEPTION_NAMES = [MISMATCHED_TOKEN_EXCEPTION, NO_VIABLE_ALT_EXCEPTION, EARLY_EXIT_EXCEPTION, NOT_ALL_INPUT_PARSED_EXCEPTION];\nObject.freeze(RECOGNITION_EXCEPTION_NAMES); // hacks to bypass no support for custom Errors in javascript/typescript\n\nfunction isRecognitionException(error) {\n  // can't do instanceof on hacked custom js exceptions\n  return (0, includes_1.default)(RECOGNITION_EXCEPTION_NAMES, error.name);\n}\n\nexports.isRecognitionException = isRecognitionException;\n\nvar RecognitionException =\n/** @class */\nfunction (_super) {\n  __extends(RecognitionException, _super);\n\n  function RecognitionException(message, token) {\n    var _newTarget = this.constructor;\n\n    var _this = _super.call(this, message)\n    /* istanbul ignore next */\n    || this;\n\n    _this.token = token;\n    _this.resyncedTokens = []; // fix prototype chain when typescript target is ES5\n\n    Object.setPrototypeOf(_this, _newTarget.prototype);\n    /* istanbul ignore next - V8 workaround to remove constructor from stacktrace when typescript target is ES5 */\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(_this, _this.constructor);\n    }\n\n    return _this;\n  }\n\n  return RecognitionException;\n}(Error);\n\nvar MismatchedTokenException =\n/** @class */\nfunction (_super) {\n  __extends(MismatchedTokenException, _super);\n\n  function MismatchedTokenException(message, token, previousToken) {\n    var _this = _super.call(this, message, token)\n    /* istanbul ignore next */\n    || this;\n\n    _this.previousToken = previousToken;\n    _this.name = MISMATCHED_TOKEN_EXCEPTION;\n    return _this;\n  }\n\n  return MismatchedTokenException;\n}(RecognitionException);\n\nexports.MismatchedTokenException = MismatchedTokenException;\n\nvar NoViableAltException =\n/** @class */\nfunction (_super) {\n  __extends(NoViableAltException, _super);\n\n  function NoViableAltException(message, token, previousToken) {\n    var _this = _super.call(this, message, token)\n    /* istanbul ignore next */\n    || this;\n\n    _this.previousToken = previousToken;\n    _this.name = NO_VIABLE_ALT_EXCEPTION;\n    return _this;\n  }\n\n  return NoViableAltException;\n}(RecognitionException);\n\nexports.NoViableAltException = NoViableAltException;\n\nvar NotAllInputParsedException =\n/** @class */\nfunction (_super) {\n  __extends(NotAllInputParsedException, _super);\n\n  function NotAllInputParsedException(message, token) {\n    var _this = _super.call(this, message, token)\n    /* istanbul ignore next */\n    || this;\n\n    _this.name = NOT_ALL_INPUT_PARSED_EXCEPTION;\n    return _this;\n  }\n\n  return NotAllInputParsedException;\n}(RecognitionException);\n\nexports.NotAllInputParsedException = NotAllInputParsedException;\n\nvar EarlyExitException =\n/** @class */\nfunction (_super) {\n  __extends(EarlyExitException, _super);\n\n  function EarlyExitException(message, token, previousToken) {\n    var _this = _super.call(this, message, token)\n    /* istanbul ignore next */\n    || this;\n\n    _this.previousToken = previousToken;\n    _this.name = EARLY_EXIT_EXCEPTION;\n    return _this;\n  }\n\n  return EarlyExitException;\n}(RecognitionException);\n\nexports.EarlyExitException = EarlyExitException;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAOA,IAAMA,0BAA0B,GAAG,0BAAnC;AACA,IAAMC,uBAAuB,GAAG,sBAAhC;AACA,IAAMC,oBAAoB,GAAG,oBAA7B;AACA,IAAMC,8BAA8B,GAAG,4BAAvC;AAEA,IAAMC,2BAA2B,GAAG,CAClCJ,0BADkC,EAElCC,uBAFkC,EAGlCC,oBAHkC,EAIlCC,8BAJkC,CAApC;AAOAE,MAAM,CAACC,MAAP,CAAcF,2BAAd,E,CAEA;;AACA,SAAgBG,sBAAhB,CAAuCC,KAAvC,EAAmD;EACjD;EACA,OAAO,wBAASJ,2BAAT,EAAsCI,KAAK,CAACC,IAA5C,CAAP;AACD;;AAHDC;;AAKA;AAAA;AAAA;EACUC;;EAMR,8BAAsBC,OAAtB,EAA8CC,KAA9C,EAA2D;;;IAA3D,YACEC,kBAAMF,OAAN;IAAc;IAAd,GASD,IAVD;;IAA8CG;IAF9CA,uBAA2B,EAA3B,CAE2D,CAGzD;;IACAV,MAAM,CAACW,cAAP,CAAsBD,KAAtB,EAA4BE,WAAWC,SAAvC;IAEA;;IACA,IAAIC,KAAK,CAACC,iBAAV,EAA6B;MAC3BD,KAAK,CAACC,iBAAN,CAAwBL,KAAxB,EAA8BA,KAAI,CAACM,WAAnC;IACD;;;EACF;;EACH;AAAC,CAlBD,CACUF,KADV;;AAoBA;AAAA;AAAA;EAA8CR;;EAC5C,kCAAYC,OAAZ,EAA6BC,KAA7B,EAAmDS,aAAnD,EAAwE;IAAxE,YACER,kBAAMF,OAAN,EAAeC,KAAf;IAAqB;IAArB,GAED,IAHD;;IAAmDE;IAEjDA,KAAI,CAACN,IAAL,GAAYT,0BAAZ;;EACD;;EACH;AAAC,CALD,CAA8CuB,oBAA9C;;AAAab;;AAOb;AAAA;AAAA;EAA0CC;;EACxC,8BAAYC,OAAZ,EAA6BC,KAA7B,EAAmDS,aAAnD,EAAwE;IAAxE,YACER,kBAAMF,OAAN,EAAeC,KAAf;IAAqB;IAArB,GAED,IAHD;;IAAmDE;IAEjDA,KAAI,CAACN,IAAL,GAAYR,uBAAZ;;EACD;;EACH;AAAC,CALD,CAA0CsB,oBAA1C;;AAAab;;AAOb;AAAA;AAAA;EAAgDC;;EAC9C,oCAAYC,OAAZ,EAA6BC,KAA7B,EAA0C;IAA1C,YACEC,kBAAMF,OAAN,EAAeC,KAAf;IAAqB;IAArB,GAED,IAHD;;IAEEE,KAAI,CAACN,IAAL,GAAYN,8BAAZ;;EACD;;EACH;AAAC,CALD,CAAgDoB,oBAAhD;;AAAab;;AAOb;AAAA;AAAA;EAAwCC;;EACtC,4BAAYC,OAAZ,EAA6BC,KAA7B,EAAmDS,aAAnD,EAAwE;IAAxE,YACER,kBAAMF,OAAN,EAAeC,KAAf;IAAqB;IAArB,GAED,IAHD;;IAAmDE;IAEjDA,KAAI,CAACN,IAAL,GAAYP,oBAAZ;;EACD;;EACH;AAAC,CALD,CAAwCqB,oBAAxC;;AAAab","names":["MISMATCHED_TOKEN_EXCEPTION","NO_VIABLE_ALT_EXCEPTION","EARLY_EXIT_EXCEPTION","NOT_ALL_INPUT_PARSED_EXCEPTION","RECOGNITION_EXCEPTION_NAMES","Object","freeze","isRecognitionException","error","name","exports","__extends","message","token","_super","_this","setPrototypeOf","_newTarget","prototype","Error","captureStackTrace","constructor","previousToken","RecognitionException"],"sources":["D:\\Jord\\l4fycy\\node_modules\\chevrotain\\src\\parse\\exceptions_public.ts"],"sourcesContent":["import includes from \"lodash/includes\"\nimport {\n  IToken,\n  IRecognitionException,\n  IRecognizerContext\n} from \"@chevrotain/types\"\n\nconst MISMATCHED_TOKEN_EXCEPTION = \"MismatchedTokenException\"\nconst NO_VIABLE_ALT_EXCEPTION = \"NoViableAltException\"\nconst EARLY_EXIT_EXCEPTION = \"EarlyExitException\"\nconst NOT_ALL_INPUT_PARSED_EXCEPTION = \"NotAllInputParsedException\"\n\nconst RECOGNITION_EXCEPTION_NAMES = [\n  MISMATCHED_TOKEN_EXCEPTION,\n  NO_VIABLE_ALT_EXCEPTION,\n  EARLY_EXIT_EXCEPTION,\n  NOT_ALL_INPUT_PARSED_EXCEPTION\n]\n\nObject.freeze(RECOGNITION_EXCEPTION_NAMES)\n\n// hacks to bypass no support for custom Errors in javascript/typescript\nexport function isRecognitionException(error: Error) {\n  // can't do instanceof on hacked custom js exceptions\n  return includes(RECOGNITION_EXCEPTION_NAMES, error.name)\n}\n\nabstract class RecognitionException\n  extends Error\n  implements IRecognitionException\n{\n  context: IRecognizerContext\n  resyncedTokens: IToken[] = []\n\n  protected constructor(message: string, public token: IToken) {\n    super(message)\n\n    // fix prototype chain when typescript target is ES5\n    Object.setPrototypeOf(this, new.target.prototype)\n\n    /* istanbul ignore next - V8 workaround to remove constructor from stacktrace when typescript target is ES5 */\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor)\n    }\n  }\n}\n\nexport class MismatchedTokenException extends RecognitionException {\n  constructor(message: string, token: IToken, public previousToken: IToken) {\n    super(message, token)\n    this.name = MISMATCHED_TOKEN_EXCEPTION\n  }\n}\n\nexport class NoViableAltException extends RecognitionException {\n  constructor(message: string, token: IToken, public previousToken: IToken) {\n    super(message, token)\n    this.name = NO_VIABLE_ALT_EXCEPTION\n  }\n}\n\nexport class NotAllInputParsedException extends RecognitionException {\n  constructor(message: string, token: IToken) {\n    super(message, token)\n    this.name = NOT_ALL_INPUT_PARSED_EXCEPTION\n  }\n}\n\nexport class EarlyExitException extends RecognitionException {\n  constructor(message: string, token: IToken, public previousToken: IToken) {\n    super(message, token)\n    this.name = EARLY_EXIT_EXCEPTION\n  }\n}\n"]},"metadata":{},"sourceType":"script"}