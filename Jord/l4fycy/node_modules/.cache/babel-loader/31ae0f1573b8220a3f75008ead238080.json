{"ast":null,"code":"/**\r\n * RGB Shift Shader\r\n * Shifts red and blue channels from center in opposite directions\r\n * Ported from http://kriss.cx/tom/2009/05/rgb-shift/\r\n * by Tom Butterworth / http://kriss.cx/tom/\r\n *\r\n * amount: shift distance (1 is width of input)\r\n * angle: shift angle in radians\r\n */\nvar RGBShiftShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    amount: {\n      value: 0.005\n    },\n    angle: {\n      value: 0.0\n    }\n  },\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\n  fragmentShader: ['uniform sampler2D tDiffuse;', 'uniform float amount;', 'uniform float angle;', 'varying vec2 vUv;', 'void main() {', '\tvec2 offset = amount * vec2( cos(angle), sin(angle));', '\tvec4 cr = texture2D(tDiffuse, vUv + offset);', '\tvec4 cga = texture2D(tDiffuse, vUv);', '\tvec4 cb = texture2D(tDiffuse, vUv - offset);', '\tgl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);', '}'].join('\\n')\n};\nexport { RGBShiftShader };","map":{"version":3,"names":["RGBShiftShader","uniforms","tDiffuse","value","amount","angle","vertexShader","join","fragmentShader"],"sources":["D:/Github/NIKE-DJANGO/Jord/l4fycy/node_modules/three-stdlib/shaders/RGBShiftShader.js"],"sourcesContent":["/**\r\n * RGB Shift Shader\r\n * Shifts red and blue channels from center in opposite directions\r\n * Ported from http://kriss.cx/tom/2009/05/rgb-shift/\r\n * by Tom Butterworth / http://kriss.cx/tom/\r\n *\r\n * amount: shift distance (1 is width of input)\r\n * angle: shift angle in radians\r\n */\r\nconst RGBShiftShader = {\r\n  uniforms: {\r\n    tDiffuse: {\r\n      value: null\r\n    },\r\n    amount: {\r\n      value: 0.005\r\n    },\r\n    angle: {\r\n      value: 0.0\r\n    }\r\n  },\r\n  vertexShader: ['varying vec2 vUv;', 'void main() {', '\tvUv = uv;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '}'].join('\\n'),\r\n  fragmentShader: ['uniform sampler2D tDiffuse;', 'uniform float amount;', 'uniform float angle;', 'varying vec2 vUv;', 'void main() {', '\tvec2 offset = amount * vec2( cos(angle), sin(angle));', '\tvec4 cr = texture2D(tDiffuse, vUv + offset);', '\tvec4 cga = texture2D(tDiffuse, vUv);', '\tvec4 cb = texture2D(tDiffuse, vUv - offset);', '\tgl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);', '}'].join('\\n')\r\n};\r\n\r\nexport { RGBShiftShader };\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMA,cAAc,GAAG;EACrBC,QAAQ,EAAE;IACRC,QAAQ,EAAE;MACRC,KAAK,EAAE;IADC,CADF;IAIRC,MAAM,EAAE;MACND,KAAK,EAAE;IADD,CAJA;IAORE,KAAK,EAAE;MACLF,KAAK,EAAE;IADF;EAPC,CADW;EAYrBG,YAAY,EAAE,CAAC,mBAAD,EAAsB,eAAtB,EAAuC,YAAvC,EAAqD,4EAArD,EAAmI,GAAnI,EAAwIC,IAAxI,CAA6I,IAA7I,CAZO;EAarBC,cAAc,EAAE,CAAC,6BAAD,EAAgC,uBAAhC,EAAyD,sBAAzD,EAAiF,mBAAjF,EAAsG,eAAtG,EAAuH,wDAAvH,EAAiL,+CAAjL,EAAkO,uCAAlO,EAA2Q,+CAA3Q,EAA4T,iDAA5T,EAA+W,GAA/W,EAAoXD,IAApX,CAAyX,IAAzX;AAbK,CAAvB;AAgBA,SAASP,cAAT"},"metadata":{},"sourceType":"module"}