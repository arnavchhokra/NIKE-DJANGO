{"ast":null,"code":"import _createForOfIteratorHelper from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { ShaderMaterial, Material } from 'three';\nimport { getNodesKeys } from '../core/NodeUtils.js';\n\nvar NodeMaterial = /*#__PURE__*/function (_ShaderMaterial) {\n  _inherits(NodeMaterial, _ShaderMaterial);\n\n  var _super = _createSuper(NodeMaterial);\n\n  function NodeMaterial() {\n    var _this;\n\n    _classCallCheck(this, NodeMaterial);\n\n    _this = _super.call(this);\n    _this.type = _this.constructor.name;\n    _this.lights = true;\n    return _this;\n  }\n\n  _createClass(NodeMaterial, [{\n    key: \"setDefaultValues\",\n    value: function setDefaultValues(values) {\n      // This approach is to reuse the native refreshUniforms*\n      // and turn available the use of features like transmission and environment in core\n      var value;\n\n      for (var property in values) {\n        value = values[property];\n\n        if (this[property] === undefined) {\n          if (value && typeof value.clone === 'function') {\n            this[property] = value.clone();\n          } else {\n            this[property] = value;\n          }\n        }\n      }\n\n      Object.assign(this.defines, values.defines);\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON(meta) {\n      var isRoot = meta === undefined || typeof meta === 'string';\n\n      if (isRoot) {\n        meta = {\n          textures: {},\n          images: {},\n          nodes: {}\n        };\n      }\n\n      var data = Material.prototype.toJSON.call(this, meta);\n      var nodeKeys = getNodesKeys(this);\n      data.inputNodes = {};\n\n      var _iterator = _createForOfIteratorHelper(nodeKeys),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var name = _step.value;\n          data.inputNodes[name] = this[name].toJSON(meta).uuid;\n        } // TODO: Copied from Object3D.toJSON\n\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      function extractFromCache(cache) {\n        var values = [];\n\n        for (var key in cache) {\n          var _data = cache[key];\n          delete _data.metadata;\n          values.push(_data);\n        }\n\n        return values;\n      }\n\n      if (isRoot) {\n        var textures = extractFromCache(meta.textures);\n        var images = extractFromCache(meta.images);\n        var nodes = extractFromCache(meta.nodes);\n        if (textures.length > 0) data.textures = textures;\n        if (images.length > 0) data.images = images;\n        if (nodes.length > 0) data.nodes = nodes;\n      }\n\n      return data;\n    }\n  }]);\n\n  return NodeMaterial;\n}(ShaderMaterial);\n\nNodeMaterial.prototype.isNodeMaterial = true;\nexport default NodeMaterial;","map":{"version":3,"names":["ShaderMaterial","Material","getNodesKeys","NodeMaterial","type","constructor","name","lights","values","value","property","undefined","clone","Object","assign","defines","meta","isRoot","textures","images","nodes","data","prototype","toJSON","call","nodeKeys","inputNodes","uuid","extractFromCache","cache","key","metadata","push","length","isNodeMaterial"],"sources":["D:/Jord/l4fycy/node_modules/three-stdlib/nodes/materials/NodeMaterial.js"],"sourcesContent":["import { ShaderMaterial, Material } from 'three';\nimport { getNodesKeys } from '../core/NodeUtils.js';\n\nclass NodeMaterial extends ShaderMaterial {\n  constructor() {\n    super();\n    this.type = this.constructor.name;\n    this.lights = true;\n  }\n\n  setDefaultValues(values) {\n    // This approach is to reuse the native refreshUniforms*\n    // and turn available the use of features like transmission and environment in core\n    let value;\n\n    for (const property in values) {\n      value = values[property];\n\n      if (this[property] === undefined) {\n        if (value && typeof value.clone === 'function') {\n          this[property] = value.clone();\n        } else {\n          this[property] = value;\n        }\n      }\n    }\n\n    Object.assign(this.defines, values.defines);\n  }\n\n  toJSON(meta) {\n    const isRoot = meta === undefined || typeof meta === 'string';\n\n    if (isRoot) {\n      meta = {\n        textures: {},\n        images: {},\n        nodes: {}\n      };\n    }\n\n    const data = Material.prototype.toJSON.call(this, meta);\n    const nodeKeys = getNodesKeys(this);\n    data.inputNodes = {};\n\n    for (const name of nodeKeys) {\n      data.inputNodes[name] = this[name].toJSON(meta).uuid;\n    } // TODO: Copied from Object3D.toJSON\n\n\n    function extractFromCache(cache) {\n      const values = [];\n\n      for (const key in cache) {\n        const data = cache[key];\n        delete data.metadata;\n        values.push(data);\n      }\n\n      return values;\n    }\n\n    if (isRoot) {\n      const textures = extractFromCache(meta.textures);\n      const images = extractFromCache(meta.images);\n      const nodes = extractFromCache(meta.nodes);\n      if (textures.length > 0) data.textures = textures;\n      if (images.length > 0) data.images = images;\n      if (nodes.length > 0) data.nodes = nodes;\n    }\n\n    return data;\n  }\n\n}\n\nNodeMaterial.prototype.isNodeMaterial = true;\n\nexport default NodeMaterial;\n"],"mappings":";;;;;AAAA,SAASA,cAAT,EAAyBC,QAAzB,QAAyC,OAAzC;AACA,SAASC,YAAT,QAA6B,sBAA7B;;IAEMC,Y;;;;;EACJ,wBAAc;IAAA;;IAAA;;IACZ;IACA,MAAKC,IAAL,GAAY,MAAKC,WAAL,CAAiBC,IAA7B;IACA,MAAKC,MAAL,GAAc,IAAd;IAHY;EAIb;;;;WAED,0BAAiBC,MAAjB,EAAyB;MACvB;MACA;MACA,IAAIC,KAAJ;;MAEA,KAAK,IAAMC,QAAX,IAAuBF,MAAvB,EAA+B;QAC7BC,KAAK,GAAGD,MAAM,CAACE,QAAD,CAAd;;QAEA,IAAI,KAAKA,QAAL,MAAmBC,SAAvB,EAAkC;UAChC,IAAIF,KAAK,IAAI,OAAOA,KAAK,CAACG,KAAb,KAAuB,UAApC,EAAgD;YAC9C,KAAKF,QAAL,IAAiBD,KAAK,CAACG,KAAN,EAAjB;UACD,CAFD,MAEO;YACL,KAAKF,QAAL,IAAiBD,KAAjB;UACD;QACF;MACF;;MAEDI,MAAM,CAACC,MAAP,CAAc,KAAKC,OAAnB,EAA4BP,MAAM,CAACO,OAAnC;IACD;;;WAED,gBAAOC,IAAP,EAAa;MACX,IAAMC,MAAM,GAAGD,IAAI,KAAKL,SAAT,IAAsB,OAAOK,IAAP,KAAgB,QAArD;;MAEA,IAAIC,MAAJ,EAAY;QACVD,IAAI,GAAG;UACLE,QAAQ,EAAE,EADL;UAELC,MAAM,EAAE,EAFH;UAGLC,KAAK,EAAE;QAHF,CAAP;MAKD;;MAED,IAAMC,IAAI,GAAGpB,QAAQ,CAACqB,SAAT,CAAmBC,MAAnB,CAA0BC,IAA1B,CAA+B,IAA/B,EAAqCR,IAArC,CAAb;MACA,IAAMS,QAAQ,GAAGvB,YAAY,CAAC,IAAD,CAA7B;MACAmB,IAAI,CAACK,UAAL,GAAkB,EAAlB;;MAbW,2CAeQD,QAfR;MAAA;;MAAA;QAeX,oDAA6B;UAAA,IAAlBnB,IAAkB;UAC3Be,IAAI,CAACK,UAAL,CAAgBpB,IAAhB,IAAwB,KAAKA,IAAL,EAAWiB,MAAX,CAAkBP,IAAlB,EAAwBW,IAAhD;QACD,CAjBU,CAiBT;;MAjBS;QAAA;MAAA;QAAA;MAAA;;MAoBX,SAASC,gBAAT,CAA0BC,KAA1B,EAAiC;QAC/B,IAAMrB,MAAM,GAAG,EAAf;;QAEA,KAAK,IAAMsB,GAAX,IAAkBD,KAAlB,EAAyB;UACvB,IAAMR,KAAI,GAAGQ,KAAK,CAACC,GAAD,CAAlB;UACA,OAAOT,KAAI,CAACU,QAAZ;UACAvB,MAAM,CAACwB,IAAP,CAAYX,KAAZ;QACD;;QAED,OAAOb,MAAP;MACD;;MAED,IAAIS,MAAJ,EAAY;QACV,IAAMC,QAAQ,GAAGU,gBAAgB,CAACZ,IAAI,CAACE,QAAN,CAAjC;QACA,IAAMC,MAAM,GAAGS,gBAAgB,CAACZ,IAAI,CAACG,MAAN,CAA/B;QACA,IAAMC,KAAK,GAAGQ,gBAAgB,CAACZ,IAAI,CAACI,KAAN,CAA9B;QACA,IAAIF,QAAQ,CAACe,MAAT,GAAkB,CAAtB,EAAyBZ,IAAI,CAACH,QAAL,GAAgBA,QAAhB;QACzB,IAAIC,MAAM,CAACc,MAAP,GAAgB,CAApB,EAAuBZ,IAAI,CAACF,MAAL,GAAcA,MAAd;QACvB,IAAIC,KAAK,CAACa,MAAN,GAAe,CAAnB,EAAsBZ,IAAI,CAACD,KAAL,GAAaA,KAAb;MACvB;;MAED,OAAOC,IAAP;IACD;;;;EArEwBrB,c;;AAyE3BG,YAAY,CAACmB,SAAb,CAAuBY,cAAvB,GAAwC,IAAxC;AAEA,eAAe/B,YAAf"},"metadata":{},"sourceType":"module"}