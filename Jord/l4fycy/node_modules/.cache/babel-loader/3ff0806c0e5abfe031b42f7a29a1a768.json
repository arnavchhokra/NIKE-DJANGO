{"ast":null,"code":"import _classCallCheck from \"D:/Github/NIKE-DJANGO/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Github/NIKE-DJANGO/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Vector3, Quaternion, Matrix4 } from 'three';\nimport { CharsetEncoder } from 'mmd-parser';\n/**\r\n * Dependencies\r\n *  - mmd-parser https://github.com/takahirox/mmd-parser\r\n */\n\nvar MMDExporter = /*#__PURE__*/function () {\n  function MMDExporter() {\n    _classCallCheck(this, MMDExporter);\n\n    _defineProperty(this, \"u2sTable\", void 0);\n  }\n  /* TODO: implement\r\n  // mesh -> pmd\r\n  this.parsePmd = function ( object ) {\r\n  };\r\n  */\n\n  /* TODO: implement\r\n  // mesh -> pmx\r\n  this.parsePmx = function ( object ) {\r\n  };\r\n  */\n\n  /* TODO: implement\r\n  // animation + skeleton -> vmd\r\n  this.parseVmd = function ( object ) {\r\n  };\r\n  */\n\n  /*\r\n   * skeleton -> vpd\r\n   * Returns Shift_JIS encoded Uint8Array. Otherwise return strings.\r\n   */\n\n\n  _createClass(MMDExporter, [{\n    key: \"parseVpd\",\n    value: function parseVpd(skin, outputShiftJis, useOriginalBones) {\n      if (skin.isSkinnedMesh !== true) {\n        console.warn('THREE.MMDExporter: parseVpd() requires SkinnedMesh instance.');\n        return null;\n      }\n\n      function toStringsFromNumber(num) {\n        if (Math.abs(num) < 1e-6) num = 0;\n        var a = num.toString();\n\n        if (a.indexOf('.') === -1) {\n          a += '.';\n        }\n\n        a += '000000';\n        var index = a.indexOf('.');\n        var d = a.slice(0, index);\n        var p = a.slice(index + 1, index + 7);\n        return d + '.' + p;\n      }\n\n      function toStringsFromArray(array) {\n        var a = [];\n\n        for (var i = 0, il = array.length; i < il; i++) {\n          a.push(toStringsFromNumber(array[i]));\n        }\n\n        return a.join(',');\n      }\n\n      skin.updateMatrixWorld(true);\n      var bones = skin.skeleton.bones;\n      var bones2 = this.getBindBones(skin);\n      var position = new Vector3();\n      var quaternion = new Quaternion();\n      var quaternion2 = new Quaternion();\n      var matrix = new Matrix4();\n      var array = [];\n      array.push('Vocaloid Pose Data file');\n      array.push('');\n      array.push((skin.name !== '' ? skin.name.replace(/\\s/g, '_') : 'skin') + '.osm;');\n      array.push(bones.length + ';');\n      array.push('');\n\n      for (var i = 0, il = bones.length; i < il; i++) {\n        var bone = bones[i];\n        var bone2 = bones2[i];\n        /*\r\n         * use the bone matrix saved before solving IK.\r\n         * see CCDIKSolver for the detail.\r\n         */\n\n        if (useOriginalBones === true && bone.userData.ik !== undefined && bone.userData.ik.originalMatrix !== undefined) {\n          matrix.fromArray(bone.userData.ik.originalMatrix);\n        } else {\n          matrix.copy(bone.matrix);\n        }\n\n        position.setFromMatrixPosition(matrix);\n        quaternion.setFromRotationMatrix(matrix);\n        var pArray = position.sub(bone2.position).toArray();\n        var qArray = quaternion2.copy(bone2.quaternion).conjugate().multiply(quaternion).toArray(); // right to left\n\n        pArray[2] = -pArray[2];\n        qArray[0] = -qArray[0];\n        qArray[1] = -qArray[1];\n        array.push('Bone' + i + '{' + bone.name);\n        array.push('  ' + toStringsFromArray(pArray) + ';');\n        array.push('  ' + toStringsFromArray(qArray) + ';');\n        array.push('}');\n        array.push('');\n      }\n\n      array.push('');\n      var lines = array.join('\\n');\n      return outputShiftJis === true ? this.unicodeToShiftjis(lines) : lines;\n    } // Unicode to Shift_JIS table\n\n  }, {\n    key: \"unicodeToShiftjis\",\n    value: function unicodeToShiftjis(str) {\n      if (this.u2sTable === undefined) {\n        var encoder = new CharsetEncoder(); // eslint-disable-line no-undef\n\n        var table = encoder.s2uTable;\n        this.u2sTable = {};\n        var keys = Object.keys(table);\n\n        for (var i = 0, il = keys.length; i < il; i++) {\n          var key = keys[i];\n          var value = table[key];\n          this.u2sTable[value] = parseInt(key);\n        }\n      }\n\n      var array = [];\n\n      for (var _i = 0, _il = str.length; _i < _il; _i++) {\n        var code = str.charCodeAt(_i);\n        var _value = this.u2sTable[code];\n\n        if (_value === undefined) {\n          throw 'cannot convert charcode 0x' + code.toString(16);\n        } else if (_value > 0xff) {\n          array.push(_value >> 8 & 0xff);\n          array.push(_value & 0xff);\n        } else {\n          array.push(_value & 0xff);\n        }\n      }\n\n      return new Uint8Array(array);\n    }\n  }, {\n    key: \"getBindBones\",\n    value: function getBindBones(skin) {\n      // any more efficient ways?\n      var poseSkin = skin.clone();\n      poseSkin.pose();\n      return poseSkin.skeleton.bones;\n    }\n  }]);\n\n  return MMDExporter;\n}();\n\nexport { MMDExporter };","map":{"version":3,"names":["_defineProperty","Vector3","Quaternion","Matrix4","CharsetEncoder","MMDExporter","skin","outputShiftJis","useOriginalBones","isSkinnedMesh","console","warn","toStringsFromNumber","num","Math","abs","a","toString","indexOf","index","d","slice","p","toStringsFromArray","array","i","il","length","push","join","updateMatrixWorld","bones","skeleton","bones2","getBindBones","position","quaternion","quaternion2","matrix","name","replace","bone","bone2","userData","ik","undefined","originalMatrix","fromArray","copy","setFromMatrixPosition","setFromRotationMatrix","pArray","sub","toArray","qArray","conjugate","multiply","lines","unicodeToShiftjis","str","u2sTable","encoder","table","s2uTable","keys","Object","key","value","parseInt","code","charCodeAt","Uint8Array","poseSkin","clone","pose"],"sources":["D:/Github/NIKE-DJANGO/Jord/l4fycy/node_modules/three-stdlib/exporters/MMDExporter.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\r\nimport { Vector3, Quaternion, Matrix4 } from 'three';\r\nimport { CharsetEncoder } from 'mmd-parser';\r\n\r\n/**\r\n * Dependencies\r\n *  - mmd-parser https://github.com/takahirox/mmd-parser\r\n */\r\n\r\nclass MMDExporter {\r\n  constructor() {\r\n    _defineProperty(this, \"u2sTable\", void 0);\r\n  }\r\n\r\n  /* TODO: implement\r\n  // mesh -> pmd\r\n  this.parsePmd = function ( object ) {\r\n  };\r\n  */\r\n\r\n  /* TODO: implement\r\n  // mesh -> pmx\r\n  this.parsePmx = function ( object ) {\r\n  };\r\n  */\r\n\r\n  /* TODO: implement\r\n  // animation + skeleton -> vmd\r\n  this.parseVmd = function ( object ) {\r\n  };\r\n  */\r\n\r\n  /*\r\n   * skeleton -> vpd\r\n   * Returns Shift_JIS encoded Uint8Array. Otherwise return strings.\r\n   */\r\n  parseVpd(skin, outputShiftJis, useOriginalBones) {\r\n    if (skin.isSkinnedMesh !== true) {\r\n      console.warn('THREE.MMDExporter: parseVpd() requires SkinnedMesh instance.');\r\n      return null;\r\n    }\r\n\r\n    function toStringsFromNumber(num) {\r\n      if (Math.abs(num) < 1e-6) num = 0;\r\n      let a = num.toString();\r\n\r\n      if (a.indexOf('.') === -1) {\r\n        a += '.';\r\n      }\r\n\r\n      a += '000000';\r\n      const index = a.indexOf('.');\r\n      const d = a.slice(0, index);\r\n      const p = a.slice(index + 1, index + 7);\r\n      return d + '.' + p;\r\n    }\r\n\r\n    function toStringsFromArray(array) {\r\n      const a = [];\r\n\r\n      for (let i = 0, il = array.length; i < il; i++) {\r\n        a.push(toStringsFromNumber(array[i]));\r\n      }\r\n\r\n      return a.join(',');\r\n    }\r\n\r\n    skin.updateMatrixWorld(true);\r\n    const bones = skin.skeleton.bones;\r\n    const bones2 = this.getBindBones(skin);\r\n    const position = new Vector3();\r\n    const quaternion = new Quaternion();\r\n    const quaternion2 = new Quaternion();\r\n    const matrix = new Matrix4();\r\n    const array = [];\r\n    array.push('Vocaloid Pose Data file');\r\n    array.push('');\r\n    array.push((skin.name !== '' ? skin.name.replace(/\\s/g, '_') : 'skin') + '.osm;');\r\n    array.push(bones.length + ';');\r\n    array.push('');\r\n\r\n    for (let i = 0, il = bones.length; i < il; i++) {\r\n      const bone = bones[i];\r\n      const bone2 = bones2[i];\r\n      /*\r\n       * use the bone matrix saved before solving IK.\r\n       * see CCDIKSolver for the detail.\r\n       */\r\n\r\n      if (useOriginalBones === true && bone.userData.ik !== undefined && bone.userData.ik.originalMatrix !== undefined) {\r\n        matrix.fromArray(bone.userData.ik.originalMatrix);\r\n      } else {\r\n        matrix.copy(bone.matrix);\r\n      }\r\n\r\n      position.setFromMatrixPosition(matrix);\r\n      quaternion.setFromRotationMatrix(matrix);\r\n      const pArray = position.sub(bone2.position).toArray();\r\n      const qArray = quaternion2.copy(bone2.quaternion).conjugate().multiply(quaternion).toArray(); // right to left\r\n\r\n      pArray[2] = -pArray[2];\r\n      qArray[0] = -qArray[0];\r\n      qArray[1] = -qArray[1];\r\n      array.push('Bone' + i + '{' + bone.name);\r\n      array.push('  ' + toStringsFromArray(pArray) + ';');\r\n      array.push('  ' + toStringsFromArray(qArray) + ';');\r\n      array.push('}');\r\n      array.push('');\r\n    }\r\n\r\n    array.push('');\r\n    const lines = array.join('\\n');\r\n    return outputShiftJis === true ? this.unicodeToShiftjis(lines) : lines;\r\n  } // Unicode to Shift_JIS table\r\n\r\n\r\n  unicodeToShiftjis(str) {\r\n    if (this.u2sTable === undefined) {\r\n      const encoder = new CharsetEncoder(); // eslint-disable-line no-undef\r\n\r\n      const table = encoder.s2uTable;\r\n      this.u2sTable = {};\r\n      const keys = Object.keys(table);\r\n\r\n      for (let i = 0, il = keys.length; i < il; i++) {\r\n        let key = keys[i];\r\n        const value = table[key];\r\n        this.u2sTable[value] = parseInt(key);\r\n      }\r\n    }\r\n\r\n    const array = [];\r\n\r\n    for (let i = 0, il = str.length; i < il; i++) {\r\n      const code = str.charCodeAt(i);\r\n      const value = this.u2sTable[code];\r\n\r\n      if (value === undefined) {\r\n        throw 'cannot convert charcode 0x' + code.toString(16);\r\n      } else if (value > 0xff) {\r\n        array.push(value >> 8 & 0xff);\r\n        array.push(value & 0xff);\r\n      } else {\r\n        array.push(value & 0xff);\r\n      }\r\n    }\r\n\r\n    return new Uint8Array(array);\r\n  }\r\n\r\n  getBindBones(skin) {\r\n    // any more efficient ways?\r\n    const poseSkin = skin.clone();\r\n    poseSkin.pose();\r\n    return poseSkin.skeleton.bones;\r\n  }\r\n\r\n}\r\n\r\nexport { MMDExporter };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}