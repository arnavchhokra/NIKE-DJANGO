{"ast":null,"code":"import _createForOfIteratorHelper from \"D:/Jord/l4fycy/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nexport default function potpack(boxes) {\n  // calculate total box area and maximum box width\n  var area = 0;\n  var maxWidth = 0;\n\n  var _iterator = _createForOfIteratorHelper(boxes),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var box = _step.value;\n      area += box.w * box.h;\n      maxWidth = Math.max(maxWidth, box.w);\n    } // sort the boxes for insertion by height, descending\n\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  boxes.sort(function (a, b) {\n    return b.h - a.h;\n  }); // aim for a squarish resulting container,\n  // slightly adjusted for sub-100% space utilization\n\n  var startWidth = Math.max(Math.ceil(Math.sqrt(area / 0.95)), maxWidth); // start with a single empty space, unbounded at the bottom\n\n  var spaces = [{\n    x: 0,\n    y: 0,\n    w: startWidth,\n    h: Infinity\n  }];\n  var width = 0;\n  var height = 0;\n\n  var _iterator2 = _createForOfIteratorHelper(boxes),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _box = _step2.value;\n\n      // look through spaces backwards so that we check smaller spaces first\n      for (var i = spaces.length - 1; i >= 0; i--) {\n        var space = spaces[i]; // look for empty spaces that can accommodate the current box\n\n        if (_box.w > space.w || _box.h > space.h) continue; // found the space; add the box to its top-left corner\n        // |-------|-------|\n        // |  box  |       |\n        // |_______|       |\n        // |         space |\n        // |_______________|\n\n        _box.x = space.x;\n        _box.y = space.y;\n        height = Math.max(height, _box.y + _box.h);\n        width = Math.max(width, _box.x + _box.w);\n\n        if (_box.w === space.w && _box.h === space.h) {\n          // space matches the box exactly; remove it\n          var last = spaces.pop();\n          if (i < spaces.length) spaces[i] = last;\n        } else if (_box.h === space.h) {\n          // space matches the box height; update it accordingly\n          // |-------|---------------|\n          // |  box  | updated space |\n          // |_______|_______________|\n          space.x += _box.w;\n          space.w -= _box.w;\n        } else if (_box.w === space.w) {\n          // space matches the box width; update it accordingly\n          // |---------------|\n          // |      box      |\n          // |_______________|\n          // | updated space |\n          // |_______________|\n          space.y += _box.h;\n          space.h -= _box.h;\n        } else {\n          // otherwise the box splits the space into two spaces\n          // |-------|-----------|\n          // |  box  | new space |\n          // |_______|___________|\n          // | updated space     |\n          // |___________________|\n          spaces.push({\n            x: space.x + _box.w,\n            y: space.y,\n            w: space.w - _box.w,\n            h: _box.h\n          });\n          space.y += _box.h;\n          space.h -= _box.h;\n        }\n\n        break;\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return {\n    w: width,\n    // container width\n    h: height,\n    // container height\n    fill: area / (width * height) || 0 // space utilization\n\n  };\n}","map":{"version":3,"names":["potpack","boxes","area","maxWidth","box","w","h","Math","max","sort","a","b","startWidth","ceil","sqrt","spaces","x","y","Infinity","width","height","i","length","space","last","pop","push","fill"],"sources":["D:/Jord/l4fycy/node_modules/potpack/index.mjs"],"sourcesContent":["\nexport default function potpack(boxes) {\n\n    // calculate total box area and maximum box width\n    let area = 0;\n    let maxWidth = 0;\n\n    for (const box of boxes) {\n        area += box.w * box.h;\n        maxWidth = Math.max(maxWidth, box.w);\n    }\n\n    // sort the boxes for insertion by height, descending\n    boxes.sort((a, b) => b.h - a.h);\n\n    // aim for a squarish resulting container,\n    // slightly adjusted for sub-100% space utilization\n    const startWidth = Math.max(Math.ceil(Math.sqrt(area / 0.95)), maxWidth);\n\n    // start with a single empty space, unbounded at the bottom\n    const spaces = [{x: 0, y: 0, w: startWidth, h: Infinity}];\n\n    let width = 0;\n    let height = 0;\n\n    for (const box of boxes) {\n        // look through spaces backwards so that we check smaller spaces first\n        for (let i = spaces.length - 1; i >= 0; i--) {\n            const space = spaces[i];\n\n            // look for empty spaces that can accommodate the current box\n            if (box.w > space.w || box.h > space.h) continue;\n\n            // found the space; add the box to its top-left corner\n            // |-------|-------|\n            // |  box  |       |\n            // |_______|       |\n            // |         space |\n            // |_______________|\n            box.x = space.x;\n            box.y = space.y;\n\n            height = Math.max(height, box.y + box.h);\n            width = Math.max(width, box.x + box.w);\n\n            if (box.w === space.w && box.h === space.h) {\n                // space matches the box exactly; remove it\n                const last = spaces.pop();\n                if (i < spaces.length) spaces[i] = last;\n\n            } else if (box.h === space.h) {\n                // space matches the box height; update it accordingly\n                // |-------|---------------|\n                // |  box  | updated space |\n                // |_______|_______________|\n                space.x += box.w;\n                space.w -= box.w;\n\n            } else if (box.w === space.w) {\n                // space matches the box width; update it accordingly\n                // |---------------|\n                // |      box      |\n                // |_______________|\n                // | updated space |\n                // |_______________|\n                space.y += box.h;\n                space.h -= box.h;\n\n            } else {\n                // otherwise the box splits the space into two spaces\n                // |-------|-----------|\n                // |  box  | new space |\n                // |_______|___________|\n                // | updated space     |\n                // |___________________|\n                spaces.push({\n                    x: space.x + box.w,\n                    y: space.y,\n                    w: space.w - box.w,\n                    h: box.h\n                });\n                space.y += box.h;\n                space.h -= box.h;\n            }\n            break;\n        }\n    }\n\n    return {\n        w: width, // container width\n        h: height, // container height\n        fill: (area / (width * height)) || 0 // space utilization\n    };\n}\n"],"mappings":";AACA,eAAe,SAASA,OAAT,CAAiBC,KAAjB,EAAwB;EAEnC;EACA,IAAIC,IAAI,GAAG,CAAX;EACA,IAAIC,QAAQ,GAAG,CAAf;;EAJmC,2CAMjBF,KANiB;EAAA;;EAAA;IAMnC,oDAAyB;MAAA,IAAdG,GAAc;MACrBF,IAAI,IAAIE,GAAG,CAACC,CAAJ,GAAQD,GAAG,CAACE,CAApB;MACAH,QAAQ,GAAGI,IAAI,CAACC,GAAL,CAASL,QAAT,EAAmBC,GAAG,CAACC,CAAvB,CAAX;IACH,CATkC,CAWnC;;EAXmC;IAAA;EAAA;IAAA;EAAA;;EAYnCJ,KAAK,CAACQ,IAAN,CAAW,UAACC,CAAD,EAAIC,CAAJ;IAAA,OAAUA,CAAC,CAACL,CAAF,GAAMI,CAAC,CAACJ,CAAlB;EAAA,CAAX,EAZmC,CAcnC;EACA;;EACA,IAAMM,UAAU,GAAGL,IAAI,CAACC,GAAL,CAASD,IAAI,CAACM,IAAL,CAAUN,IAAI,CAACO,IAAL,CAAUZ,IAAI,GAAG,IAAjB,CAAV,CAAT,EAA4CC,QAA5C,CAAnB,CAhBmC,CAkBnC;;EACA,IAAMY,MAAM,GAAG,CAAC;IAACC,CAAC,EAAE,CAAJ;IAAOC,CAAC,EAAE,CAAV;IAAaZ,CAAC,EAAEO,UAAhB;IAA4BN,CAAC,EAAEY;EAA/B,CAAD,CAAf;EAEA,IAAIC,KAAK,GAAG,CAAZ;EACA,IAAIC,MAAM,GAAG,CAAb;;EAtBmC,4CAwBjBnB,KAxBiB;EAAA;;EAAA;IAwBnC,uDAAyB;MAAA,IAAdG,IAAc;;MACrB;MACA,KAAK,IAAIiB,CAAC,GAAGN,MAAM,CAACO,MAAP,GAAgB,CAA7B,EAAgCD,CAAC,IAAI,CAArC,EAAwCA,CAAC,EAAzC,EAA6C;QACzC,IAAME,KAAK,GAAGR,MAAM,CAACM,CAAD,CAApB,CADyC,CAGzC;;QACA,IAAIjB,IAAG,CAACC,CAAJ,GAAQkB,KAAK,CAAClB,CAAd,IAAmBD,IAAG,CAACE,CAAJ,GAAQiB,KAAK,CAACjB,CAArC,EAAwC,SAJC,CAMzC;QACA;QACA;QACA;QACA;QACA;;QACAF,IAAG,CAACY,CAAJ,GAAQO,KAAK,CAACP,CAAd;QACAZ,IAAG,CAACa,CAAJ,GAAQM,KAAK,CAACN,CAAd;QAEAG,MAAM,GAAGb,IAAI,CAACC,GAAL,CAASY,MAAT,EAAiBhB,IAAG,CAACa,CAAJ,GAAQb,IAAG,CAACE,CAA7B,CAAT;QACAa,KAAK,GAAGZ,IAAI,CAACC,GAAL,CAASW,KAAT,EAAgBf,IAAG,CAACY,CAAJ,GAAQZ,IAAG,CAACC,CAA5B,CAAR;;QAEA,IAAID,IAAG,CAACC,CAAJ,KAAUkB,KAAK,CAAClB,CAAhB,IAAqBD,IAAG,CAACE,CAAJ,KAAUiB,KAAK,CAACjB,CAAzC,EAA4C;UACxC;UACA,IAAMkB,IAAI,GAAGT,MAAM,CAACU,GAAP,EAAb;UACA,IAAIJ,CAAC,GAAGN,MAAM,CAACO,MAAf,EAAuBP,MAAM,CAACM,CAAD,CAAN,GAAYG,IAAZ;QAE1B,CALD,MAKO,IAAIpB,IAAG,CAACE,CAAJ,KAAUiB,KAAK,CAACjB,CAApB,EAAuB;UAC1B;UACA;UACA;UACA;UACAiB,KAAK,CAACP,CAAN,IAAWZ,IAAG,CAACC,CAAf;UACAkB,KAAK,CAAClB,CAAN,IAAWD,IAAG,CAACC,CAAf;QAEH,CARM,MAQA,IAAID,IAAG,CAACC,CAAJ,KAAUkB,KAAK,CAAClB,CAApB,EAAuB;UAC1B;UACA;UACA;UACA;UACA;UACA;UACAkB,KAAK,CAACN,CAAN,IAAWb,IAAG,CAACE,CAAf;UACAiB,KAAK,CAACjB,CAAN,IAAWF,IAAG,CAACE,CAAf;QAEH,CAVM,MAUA;UACH;UACA;UACA;UACA;UACA;UACA;UACAS,MAAM,CAACW,IAAP,CAAY;YACRV,CAAC,EAAEO,KAAK,CAACP,CAAN,GAAUZ,IAAG,CAACC,CADT;YAERY,CAAC,EAAEM,KAAK,CAACN,CAFD;YAGRZ,CAAC,EAAEkB,KAAK,CAAClB,CAAN,GAAUD,IAAG,CAACC,CAHT;YAIRC,CAAC,EAAEF,IAAG,CAACE;UAJC,CAAZ;UAMAiB,KAAK,CAACN,CAAN,IAAWb,IAAG,CAACE,CAAf;UACAiB,KAAK,CAACjB,CAAN,IAAWF,IAAG,CAACE,CAAf;QACH;;QACD;MACH;IACJ;EArFkC;IAAA;EAAA;IAAA;EAAA;;EAuFnC,OAAO;IACHD,CAAC,EAAEc,KADA;IACO;IACVb,CAAC,EAAEc,MAFA;IAEQ;IACXO,IAAI,EAAGzB,IAAI,IAAIiB,KAAK,GAAGC,MAAZ,CAAL,IAA6B,CAHhC,CAGkC;;EAHlC,CAAP;AAKH"},"metadata":{},"sourceType":"module"}