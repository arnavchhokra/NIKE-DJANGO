{"ast":null,"code":"import { Color, Vector2, WebGLRenderTarget, LinearFilter, RGBAFormat, NearestFilter, DepthTexture, UnsignedShortType, MeshDepthMaterial, RGBADepthPacking, NoBlending, MeshNormalMaterial, ShaderMaterial, UniformsUtils, CustomBlending, DstColorFactor, ZeroFactor, AddEquation, DstAlphaFactor } from 'three';\nimport { FullScreenQuad, Pass } from './Pass.js';\nimport { SAOShader } from '../shaders/SAOShader.js';\nimport { DepthLimitedBlurShader, BlurShaderUtils } from '../shaders/DepthLimitedBlurShader.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { UnpackDepthRGBAShader } from '../shaders/UnpackDepthRGBAShader.js';\n/**\r\n * SAO implementation inspired from bhouston previous SAO work\r\n */\n\nvar SAOPass = function SAOPass(scene, camera, depthTexture, useNormals, resolution) {\n  this.scene = scene;\n  this.camera = camera;\n  this.clear = true;\n  this.needsSwap = false;\n  this.supportsDepthTextureExtension = depthTexture !== undefined ? depthTexture : false;\n  this.supportsNormalTexture = useNormals !== undefined ? useNormals : false;\n  this.originalClearColor = new Color();\n  this._oldClearColor = new Color();\n  this.oldClearAlpha = 1;\n  this.params = {\n    output: 0,\n    saoBias: 0.5,\n    saoIntensity: 0.18,\n    saoScale: 1,\n    saoKernelRadius: 100,\n    saoMinResolution: 0,\n    saoBlur: true,\n    saoBlurRadius: 8,\n    saoBlurStdDev: 4,\n    saoBlurDepthCutoff: 0.01\n  };\n  this.resolution = resolution !== undefined ? new Vector2(resolution.x, resolution.y) : new Vector2(256, 256);\n  this.saoRenderTarget = new WebGLRenderTarget(this.resolution.x, this.resolution.y, {\n    minFilter: LinearFilter,\n    magFilter: LinearFilter,\n    format: RGBAFormat\n  });\n  this.blurIntermediateRenderTarget = this.saoRenderTarget.clone();\n  this.beautyRenderTarget = this.saoRenderTarget.clone();\n  this.normalRenderTarget = new WebGLRenderTarget(this.resolution.x, this.resolution.y, {\n    minFilter: NearestFilter,\n    magFilter: NearestFilter,\n    format: RGBAFormat\n  });\n  this.depthRenderTarget = this.normalRenderTarget.clone();\n\n  if (this.supportsDepthTextureExtension) {\n    var depthTexture = new DepthTexture();\n    depthTexture.type = UnsignedShortType;\n    this.beautyRenderTarget.depthTexture = depthTexture;\n    this.beautyRenderTarget.depthBuffer = true;\n  }\n\n  this.depthMaterial = new MeshDepthMaterial();\n  this.depthMaterial.depthPacking = RGBADepthPacking;\n  this.depthMaterial.blending = NoBlending;\n  this.normalMaterial = new MeshNormalMaterial();\n  this.normalMaterial.blending = NoBlending;\n\n  if (SAOShader === undefined) {\n    console.error('THREE.SAOPass relies on SAOShader');\n  }\n\n  this.saoMaterial = new ShaderMaterial({\n    defines: Object.assign({}, SAOShader.defines),\n    fragmentShader: SAOShader.fragmentShader,\n    vertexShader: SAOShader.vertexShader,\n    uniforms: UniformsUtils.clone(SAOShader.uniforms)\n  });\n  this.saoMaterial.extensions.derivatives = true;\n  this.saoMaterial.defines['DEPTH_PACKING'] = this.supportsDepthTextureExtension ? 0 : 1;\n  this.saoMaterial.defines['NORMAL_TEXTURE'] = this.supportsNormalTexture ? 1 : 0;\n  this.saoMaterial.defines['PERSPECTIVE_CAMERA'] = this.camera.isPerspectiveCamera ? 1 : 0;\n  this.saoMaterial.uniforms['tDepth'].value = this.supportsDepthTextureExtension ? depthTexture : this.depthRenderTarget.texture;\n  this.saoMaterial.uniforms['tNormal'].value = this.normalRenderTarget.texture;\n  this.saoMaterial.uniforms['size'].value.set(this.resolution.x, this.resolution.y);\n  this.saoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse);\n  this.saoMaterial.uniforms['cameraProjectionMatrix'].value = this.camera.projectionMatrix;\n  this.saoMaterial.blending = NoBlending;\n\n  if (DepthLimitedBlurShader === undefined) {\n    console.error('THREE.SAOPass relies on DepthLimitedBlurShader');\n  }\n\n  this.vBlurMaterial = new ShaderMaterial({\n    uniforms: UniformsUtils.clone(DepthLimitedBlurShader.uniforms),\n    defines: Object.assign({}, DepthLimitedBlurShader.defines),\n    vertexShader: DepthLimitedBlurShader.vertexShader,\n    fragmentShader: DepthLimitedBlurShader.fragmentShader\n  });\n  this.vBlurMaterial.defines['DEPTH_PACKING'] = this.supportsDepthTextureExtension ? 0 : 1;\n  this.vBlurMaterial.defines['PERSPECTIVE_CAMERA'] = this.camera.isPerspectiveCamera ? 1 : 0;\n  this.vBlurMaterial.uniforms['tDiffuse'].value = this.saoRenderTarget.texture;\n  this.vBlurMaterial.uniforms['tDepth'].value = this.supportsDepthTextureExtension ? depthTexture : this.depthRenderTarget.texture;\n  this.vBlurMaterial.uniforms['size'].value.set(this.resolution.x, this.resolution.y);\n  this.vBlurMaterial.blending = NoBlending;\n  this.hBlurMaterial = new ShaderMaterial({\n    uniforms: UniformsUtils.clone(DepthLimitedBlurShader.uniforms),\n    defines: Object.assign({}, DepthLimitedBlurShader.defines),\n    vertexShader: DepthLimitedBlurShader.vertexShader,\n    fragmentShader: DepthLimitedBlurShader.fragmentShader\n  });\n  this.hBlurMaterial.defines['DEPTH_PACKING'] = this.supportsDepthTextureExtension ? 0 : 1;\n  this.hBlurMaterial.defines['PERSPECTIVE_CAMERA'] = this.camera.isPerspectiveCamera ? 1 : 0;\n  this.hBlurMaterial.uniforms['tDiffuse'].value = this.blurIntermediateRenderTarget.texture;\n  this.hBlurMaterial.uniforms['tDepth'].value = this.supportsDepthTextureExtension ? depthTexture : this.depthRenderTarget.texture;\n  this.hBlurMaterial.uniforms['size'].value.set(this.resolution.x, this.resolution.y);\n  this.hBlurMaterial.blending = NoBlending;\n\n  if (CopyShader === undefined) {\n    console.error('THREE.SAOPass relies on CopyShader');\n  }\n\n  this.materialCopy = new ShaderMaterial({\n    uniforms: UniformsUtils.clone(CopyShader.uniforms),\n    vertexShader: CopyShader.vertexShader,\n    fragmentShader: CopyShader.fragmentShader,\n    blending: NoBlending\n  });\n  this.materialCopy.transparent = true;\n  this.materialCopy.depthTest = false;\n  this.materialCopy.depthWrite = false;\n  this.materialCopy.blending = CustomBlending;\n  this.materialCopy.blendSrc = DstColorFactor;\n  this.materialCopy.blendDst = ZeroFactor;\n  this.materialCopy.blendEquation = AddEquation;\n  this.materialCopy.blendSrcAlpha = DstAlphaFactor;\n  this.materialCopy.blendDstAlpha = ZeroFactor;\n  this.materialCopy.blendEquationAlpha = AddEquation;\n\n  if (UnpackDepthRGBAShader === undefined) {\n    console.error('THREE.SAOPass relies on UnpackDepthRGBAShader');\n  }\n\n  this.depthCopy = new ShaderMaterial({\n    uniforms: UniformsUtils.clone(UnpackDepthRGBAShader.uniforms),\n    vertexShader: UnpackDepthRGBAShader.vertexShader,\n    fragmentShader: UnpackDepthRGBAShader.fragmentShader,\n    blending: NoBlending\n  });\n  this.fsQuad = new FullScreenQuad(null);\n};\n\nSAOPass.OUTPUT = {\n  Beauty: 1,\n  Default: 0,\n  SAO: 2,\n  Depth: 3,\n  Normal: 4\n};\nSAOPass.prototype = Object.assign(Object.create(Pass.prototype), {\n  constructor: SAOPass,\n  render: function render(renderer, writeBuffer, readBuffer\n  /*, deltaTime, maskActive*/\n  ) {\n    // Rendering readBuffer first when rendering to screen\n    if (this.renderToScreen) {\n      this.materialCopy.blending = NoBlending;\n      this.materialCopy.uniforms['tDiffuse'].value = readBuffer.texture;\n      this.materialCopy.needsUpdate = true;\n      this.renderPass(renderer, this.materialCopy, null);\n    }\n\n    if (this.params.output === 1) {\n      return;\n    }\n\n    renderer.getClearColor(this._oldClearColor);\n    this.oldClearAlpha = renderer.getClearAlpha();\n    var oldAutoClear = renderer.autoClear;\n    renderer.autoClear = false;\n    renderer.setRenderTarget(this.depthRenderTarget);\n    renderer.clear();\n    this.saoMaterial.uniforms['bias'].value = this.params.saoBias;\n    this.saoMaterial.uniforms['intensity'].value = this.params.saoIntensity;\n    this.saoMaterial.uniforms['scale'].value = this.params.saoScale;\n    this.saoMaterial.uniforms['kernelRadius'].value = this.params.saoKernelRadius;\n    this.saoMaterial.uniforms['minResolution'].value = this.params.saoMinResolution;\n    this.saoMaterial.uniforms['cameraNear'].value = this.camera.near;\n    this.saoMaterial.uniforms['cameraFar'].value = this.camera.far; // this.saoMaterial.uniforms['randomSeed'].value = Math.random();\n\n    var depthCutoff = this.params.saoBlurDepthCutoff * (this.camera.far - this.camera.near);\n    this.vBlurMaterial.uniforms['depthCutoff'].value = depthCutoff;\n    this.hBlurMaterial.uniforms['depthCutoff'].value = depthCutoff;\n    this.vBlurMaterial.uniforms['cameraNear'].value = this.camera.near;\n    this.vBlurMaterial.uniforms['cameraFar'].value = this.camera.far;\n    this.hBlurMaterial.uniforms['cameraNear'].value = this.camera.near;\n    this.hBlurMaterial.uniforms['cameraFar'].value = this.camera.far;\n    this.params.saoBlurRadius = Math.floor(this.params.saoBlurRadius);\n\n    if (this.prevStdDev !== this.params.saoBlurStdDev || this.prevNumSamples !== this.params.saoBlurRadius) {\n      BlurShaderUtils.configure(this.vBlurMaterial, this.params.saoBlurRadius, this.params.saoBlurStdDev, new Vector2(0, 1));\n      BlurShaderUtils.configure(this.hBlurMaterial, this.params.saoBlurRadius, this.params.saoBlurStdDev, new Vector2(1, 0));\n      this.prevStdDev = this.params.saoBlurStdDev;\n      this.prevNumSamples = this.params.saoBlurRadius;\n    } // Rendering scene to depth texture\n\n\n    renderer.setClearColor(0x000000);\n    renderer.setRenderTarget(this.beautyRenderTarget);\n    renderer.clear();\n    renderer.render(this.scene, this.camera); // Re-render scene if depth texture extension is not supported\n\n    if (!this.supportsDepthTextureExtension) {\n      // Clear rule : far clipping plane in both RGBA and Basic encoding\n      this.renderOverride(renderer, this.depthMaterial, this.depthRenderTarget, 0x000000, 1.0);\n    }\n\n    if (this.supportsNormalTexture) {\n      // Clear rule : default normal is facing the camera\n      this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0);\n    } // Rendering SAO texture\n\n\n    this.renderPass(renderer, this.saoMaterial, this.saoRenderTarget, 0xffffff, 1.0); // Blurring SAO texture\n\n    if (this.params.saoBlur) {\n      this.renderPass(renderer, this.vBlurMaterial, this.blurIntermediateRenderTarget, 0xffffff, 1.0);\n      this.renderPass(renderer, this.hBlurMaterial, this.saoRenderTarget, 0xffffff, 1.0);\n    }\n\n    var outputMaterial = this.materialCopy; // Setting up SAO rendering\n\n    if (this.params.output === 3) {\n      if (this.supportsDepthTextureExtension) {\n        this.materialCopy.uniforms['tDiffuse'].value = this.beautyRenderTarget.depthTexture;\n        this.materialCopy.needsUpdate = true;\n      } else {\n        this.depthCopy.uniforms['tDiffuse'].value = this.depthRenderTarget.texture;\n        this.depthCopy.needsUpdate = true;\n        outputMaterial = this.depthCopy;\n      }\n    } else if (this.params.output === 4) {\n      this.materialCopy.uniforms['tDiffuse'].value = this.normalRenderTarget.texture;\n      this.materialCopy.needsUpdate = true;\n    } else {\n      this.materialCopy.uniforms['tDiffuse'].value = this.saoRenderTarget.texture;\n      this.materialCopy.needsUpdate = true;\n    } // Blending depends on output, only want a CustomBlending when showing SAO\n\n\n    if (this.params.output === 0) {\n      outputMaterial.blending = CustomBlending;\n    } else {\n      outputMaterial.blending = NoBlending;\n    } // Rendering SAOPass result on top of previous pass\n\n\n    this.renderPass(renderer, outputMaterial, this.renderToScreen ? null : readBuffer);\n    renderer.setClearColor(this._oldClearColor, this.oldClearAlpha);\n    renderer.autoClear = oldAutoClear;\n  },\n  renderPass: function renderPass(renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\n    // save original state\n    renderer.getClearColor(this.originalClearColor);\n    var originalClearAlpha = renderer.getClearAlpha();\n    var originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget); // setup pass state\n\n    renderer.autoClear = false;\n\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n\n    this.fsQuad.material = passMaterial;\n    this.fsQuad.render(renderer); // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  },\n  renderOverride: function renderOverride(renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\n    renderer.getClearColor(this.originalClearColor);\n    var originalClearAlpha = renderer.getClearAlpha();\n    var originalAutoClear = renderer.autoClear;\n    renderer.setRenderTarget(renderTarget);\n    renderer.autoClear = false;\n    clearColor = overrideMaterial.clearColor || clearColor;\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\n\n    if (clearColor !== undefined && clearColor !== null) {\n      renderer.setClearColor(clearColor);\n      renderer.setClearAlpha(clearAlpha || 0.0);\n      renderer.clear();\n    }\n\n    this.scene.overrideMaterial = overrideMaterial;\n    renderer.render(this.scene, this.camera);\n    this.scene.overrideMaterial = null; // restore original state\n\n    renderer.autoClear = originalAutoClear;\n    renderer.setClearColor(this.originalClearColor);\n    renderer.setClearAlpha(originalClearAlpha);\n  },\n  setSize: function setSize(width, height) {\n    this.beautyRenderTarget.setSize(width, height);\n    this.saoRenderTarget.setSize(width, height);\n    this.blurIntermediateRenderTarget.setSize(width, height);\n    this.normalRenderTarget.setSize(width, height);\n    this.depthRenderTarget.setSize(width, height);\n    this.saoMaterial.uniforms['size'].value.set(width, height);\n    this.saoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse);\n    this.saoMaterial.uniforms['cameraProjectionMatrix'].value = this.camera.projectionMatrix;\n    this.saoMaterial.needsUpdate = true;\n    this.vBlurMaterial.uniforms['size'].value.set(width, height);\n    this.vBlurMaterial.needsUpdate = true;\n    this.hBlurMaterial.uniforms['size'].value.set(width, height);\n    this.hBlurMaterial.needsUpdate = true;\n  }\n});\nexport { SAOPass };","map":{"version":3,"names":["Color","Vector2","WebGLRenderTarget","LinearFilter","RGBAFormat","NearestFilter","DepthTexture","UnsignedShortType","MeshDepthMaterial","RGBADepthPacking","NoBlending","MeshNormalMaterial","ShaderMaterial","UniformsUtils","CustomBlending","DstColorFactor","ZeroFactor","AddEquation","DstAlphaFactor","FullScreenQuad","Pass","SAOShader","DepthLimitedBlurShader","BlurShaderUtils","CopyShader","UnpackDepthRGBAShader","SAOPass","scene","camera","depthTexture","useNormals","resolution","clear","needsSwap","supportsDepthTextureExtension","undefined","supportsNormalTexture","originalClearColor","_oldClearColor","oldClearAlpha","params","output","saoBias","saoIntensity","saoScale","saoKernelRadius","saoMinResolution","saoBlur","saoBlurRadius","saoBlurStdDev","saoBlurDepthCutoff","x","y","saoRenderTarget","minFilter","magFilter","format","blurIntermediateRenderTarget","clone","beautyRenderTarget","normalRenderTarget","depthRenderTarget","type","depthBuffer","depthMaterial","depthPacking","blending","normalMaterial","console","error","saoMaterial","defines","Object","assign","fragmentShader","vertexShader","uniforms","extensions","derivatives","isPerspectiveCamera","value","texture","set","copy","projectionMatrixInverse","projectionMatrix","vBlurMaterial","hBlurMaterial","materialCopy","transparent","depthTest","depthWrite","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthCopy","fsQuad","OUTPUT","Beauty","Default","SAO","Depth","Normal","prototype","create","constructor","render","renderer","writeBuffer","readBuffer","renderToScreen","needsUpdate","renderPass","getClearColor","getClearAlpha","oldAutoClear","autoClear","setRenderTarget","near","far","depthCutoff","Math","floor","prevStdDev","prevNumSamples","configure","setClearColor","renderOverride","outputMaterial","passMaterial","renderTarget","clearColor","clearAlpha","originalClearAlpha","originalAutoClear","setClearAlpha","material","overrideMaterial","setSize","width","height"],"sources":["D:/Github/NIKE-DJANGO/Jord/l4fycy/node_modules/three-stdlib/postprocessing/SAOPass.js"],"sourcesContent":["import { Color, Vector2, WebGLRenderTarget, LinearFilter, RGBAFormat, NearestFilter, DepthTexture, UnsignedShortType, MeshDepthMaterial, RGBADepthPacking, NoBlending, MeshNormalMaterial, ShaderMaterial, UniformsUtils, CustomBlending, DstColorFactor, ZeroFactor, AddEquation, DstAlphaFactor } from 'three';\r\nimport { FullScreenQuad, Pass } from './Pass.js';\r\nimport { SAOShader } from '../shaders/SAOShader.js';\r\nimport { DepthLimitedBlurShader, BlurShaderUtils } from '../shaders/DepthLimitedBlurShader.js';\r\nimport { CopyShader } from '../shaders/CopyShader.js';\r\nimport { UnpackDepthRGBAShader } from '../shaders/UnpackDepthRGBAShader.js';\r\n\r\n/**\r\n * SAO implementation inspired from bhouston previous SAO work\r\n */\r\n\r\nvar SAOPass = function (scene, camera, depthTexture, useNormals, resolution) {\r\n  this.scene = scene;\r\n  this.camera = camera;\r\n  this.clear = true;\r\n  this.needsSwap = false;\r\n  this.supportsDepthTextureExtension = depthTexture !== undefined ? depthTexture : false;\r\n  this.supportsNormalTexture = useNormals !== undefined ? useNormals : false;\r\n  this.originalClearColor = new Color();\r\n  this._oldClearColor = new Color();\r\n  this.oldClearAlpha = 1;\r\n  this.params = {\r\n    output: 0,\r\n    saoBias: 0.5,\r\n    saoIntensity: 0.18,\r\n    saoScale: 1,\r\n    saoKernelRadius: 100,\r\n    saoMinResolution: 0,\r\n    saoBlur: true,\r\n    saoBlurRadius: 8,\r\n    saoBlurStdDev: 4,\r\n    saoBlurDepthCutoff: 0.01\r\n  };\r\n  this.resolution = resolution !== undefined ? new Vector2(resolution.x, resolution.y) : new Vector2(256, 256);\r\n  this.saoRenderTarget = new WebGLRenderTarget(this.resolution.x, this.resolution.y, {\r\n    minFilter: LinearFilter,\r\n    magFilter: LinearFilter,\r\n    format: RGBAFormat\r\n  });\r\n  this.blurIntermediateRenderTarget = this.saoRenderTarget.clone();\r\n  this.beautyRenderTarget = this.saoRenderTarget.clone();\r\n  this.normalRenderTarget = new WebGLRenderTarget(this.resolution.x, this.resolution.y, {\r\n    minFilter: NearestFilter,\r\n    magFilter: NearestFilter,\r\n    format: RGBAFormat\r\n  });\r\n  this.depthRenderTarget = this.normalRenderTarget.clone();\r\n\r\n  if (this.supportsDepthTextureExtension) {\r\n    var depthTexture = new DepthTexture();\r\n    depthTexture.type = UnsignedShortType;\r\n    this.beautyRenderTarget.depthTexture = depthTexture;\r\n    this.beautyRenderTarget.depthBuffer = true;\r\n  }\r\n\r\n  this.depthMaterial = new MeshDepthMaterial();\r\n  this.depthMaterial.depthPacking = RGBADepthPacking;\r\n  this.depthMaterial.blending = NoBlending;\r\n  this.normalMaterial = new MeshNormalMaterial();\r\n  this.normalMaterial.blending = NoBlending;\r\n\r\n  if (SAOShader === undefined) {\r\n    console.error('THREE.SAOPass relies on SAOShader');\r\n  }\r\n\r\n  this.saoMaterial = new ShaderMaterial({\r\n    defines: Object.assign({}, SAOShader.defines),\r\n    fragmentShader: SAOShader.fragmentShader,\r\n    vertexShader: SAOShader.vertexShader,\r\n    uniforms: UniformsUtils.clone(SAOShader.uniforms)\r\n  });\r\n  this.saoMaterial.extensions.derivatives = true;\r\n  this.saoMaterial.defines['DEPTH_PACKING'] = this.supportsDepthTextureExtension ? 0 : 1;\r\n  this.saoMaterial.defines['NORMAL_TEXTURE'] = this.supportsNormalTexture ? 1 : 0;\r\n  this.saoMaterial.defines['PERSPECTIVE_CAMERA'] = this.camera.isPerspectiveCamera ? 1 : 0;\r\n  this.saoMaterial.uniforms['tDepth'].value = this.supportsDepthTextureExtension ? depthTexture : this.depthRenderTarget.texture;\r\n  this.saoMaterial.uniforms['tNormal'].value = this.normalRenderTarget.texture;\r\n  this.saoMaterial.uniforms['size'].value.set(this.resolution.x, this.resolution.y);\r\n  this.saoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse);\r\n  this.saoMaterial.uniforms['cameraProjectionMatrix'].value = this.camera.projectionMatrix;\r\n  this.saoMaterial.blending = NoBlending;\r\n\r\n  if (DepthLimitedBlurShader === undefined) {\r\n    console.error('THREE.SAOPass relies on DepthLimitedBlurShader');\r\n  }\r\n\r\n  this.vBlurMaterial = new ShaderMaterial({\r\n    uniforms: UniformsUtils.clone(DepthLimitedBlurShader.uniforms),\r\n    defines: Object.assign({}, DepthLimitedBlurShader.defines),\r\n    vertexShader: DepthLimitedBlurShader.vertexShader,\r\n    fragmentShader: DepthLimitedBlurShader.fragmentShader\r\n  });\r\n  this.vBlurMaterial.defines['DEPTH_PACKING'] = this.supportsDepthTextureExtension ? 0 : 1;\r\n  this.vBlurMaterial.defines['PERSPECTIVE_CAMERA'] = this.camera.isPerspectiveCamera ? 1 : 0;\r\n  this.vBlurMaterial.uniforms['tDiffuse'].value = this.saoRenderTarget.texture;\r\n  this.vBlurMaterial.uniforms['tDepth'].value = this.supportsDepthTextureExtension ? depthTexture : this.depthRenderTarget.texture;\r\n  this.vBlurMaterial.uniforms['size'].value.set(this.resolution.x, this.resolution.y);\r\n  this.vBlurMaterial.blending = NoBlending;\r\n  this.hBlurMaterial = new ShaderMaterial({\r\n    uniforms: UniformsUtils.clone(DepthLimitedBlurShader.uniforms),\r\n    defines: Object.assign({}, DepthLimitedBlurShader.defines),\r\n    vertexShader: DepthLimitedBlurShader.vertexShader,\r\n    fragmentShader: DepthLimitedBlurShader.fragmentShader\r\n  });\r\n  this.hBlurMaterial.defines['DEPTH_PACKING'] = this.supportsDepthTextureExtension ? 0 : 1;\r\n  this.hBlurMaterial.defines['PERSPECTIVE_CAMERA'] = this.camera.isPerspectiveCamera ? 1 : 0;\r\n  this.hBlurMaterial.uniforms['tDiffuse'].value = this.blurIntermediateRenderTarget.texture;\r\n  this.hBlurMaterial.uniforms['tDepth'].value = this.supportsDepthTextureExtension ? depthTexture : this.depthRenderTarget.texture;\r\n  this.hBlurMaterial.uniforms['size'].value.set(this.resolution.x, this.resolution.y);\r\n  this.hBlurMaterial.blending = NoBlending;\r\n\r\n  if (CopyShader === undefined) {\r\n    console.error('THREE.SAOPass relies on CopyShader');\r\n  }\r\n\r\n  this.materialCopy = new ShaderMaterial({\r\n    uniforms: UniformsUtils.clone(CopyShader.uniforms),\r\n    vertexShader: CopyShader.vertexShader,\r\n    fragmentShader: CopyShader.fragmentShader,\r\n    blending: NoBlending\r\n  });\r\n  this.materialCopy.transparent = true;\r\n  this.materialCopy.depthTest = false;\r\n  this.materialCopy.depthWrite = false;\r\n  this.materialCopy.blending = CustomBlending;\r\n  this.materialCopy.blendSrc = DstColorFactor;\r\n  this.materialCopy.blendDst = ZeroFactor;\r\n  this.materialCopy.blendEquation = AddEquation;\r\n  this.materialCopy.blendSrcAlpha = DstAlphaFactor;\r\n  this.materialCopy.blendDstAlpha = ZeroFactor;\r\n  this.materialCopy.blendEquationAlpha = AddEquation;\r\n\r\n  if (UnpackDepthRGBAShader === undefined) {\r\n    console.error('THREE.SAOPass relies on UnpackDepthRGBAShader');\r\n  }\r\n\r\n  this.depthCopy = new ShaderMaterial({\r\n    uniforms: UniformsUtils.clone(UnpackDepthRGBAShader.uniforms),\r\n    vertexShader: UnpackDepthRGBAShader.vertexShader,\r\n    fragmentShader: UnpackDepthRGBAShader.fragmentShader,\r\n    blending: NoBlending\r\n  });\r\n  this.fsQuad = new FullScreenQuad(null);\r\n};\r\n\r\nSAOPass.OUTPUT = {\r\n  Beauty: 1,\r\n  Default: 0,\r\n  SAO: 2,\r\n  Depth: 3,\r\n  Normal: 4\r\n};\r\nSAOPass.prototype = Object.assign(Object.create(Pass.prototype), {\r\n  constructor: SAOPass,\r\n  render: function (renderer, writeBuffer, readBuffer\r\n  /*, deltaTime, maskActive*/\r\n  ) {\r\n    // Rendering readBuffer first when rendering to screen\r\n    if (this.renderToScreen) {\r\n      this.materialCopy.blending = NoBlending;\r\n      this.materialCopy.uniforms['tDiffuse'].value = readBuffer.texture;\r\n      this.materialCopy.needsUpdate = true;\r\n      this.renderPass(renderer, this.materialCopy, null);\r\n    }\r\n\r\n    if (this.params.output === 1) {\r\n      return;\r\n    }\r\n\r\n    renderer.getClearColor(this._oldClearColor);\r\n    this.oldClearAlpha = renderer.getClearAlpha();\r\n    var oldAutoClear = renderer.autoClear;\r\n    renderer.autoClear = false;\r\n    renderer.setRenderTarget(this.depthRenderTarget);\r\n    renderer.clear();\r\n    this.saoMaterial.uniforms['bias'].value = this.params.saoBias;\r\n    this.saoMaterial.uniforms['intensity'].value = this.params.saoIntensity;\r\n    this.saoMaterial.uniforms['scale'].value = this.params.saoScale;\r\n    this.saoMaterial.uniforms['kernelRadius'].value = this.params.saoKernelRadius;\r\n    this.saoMaterial.uniforms['minResolution'].value = this.params.saoMinResolution;\r\n    this.saoMaterial.uniforms['cameraNear'].value = this.camera.near;\r\n    this.saoMaterial.uniforms['cameraFar'].value = this.camera.far; // this.saoMaterial.uniforms['randomSeed'].value = Math.random();\r\n\r\n    var depthCutoff = this.params.saoBlurDepthCutoff * (this.camera.far - this.camera.near);\r\n    this.vBlurMaterial.uniforms['depthCutoff'].value = depthCutoff;\r\n    this.hBlurMaterial.uniforms['depthCutoff'].value = depthCutoff;\r\n    this.vBlurMaterial.uniforms['cameraNear'].value = this.camera.near;\r\n    this.vBlurMaterial.uniforms['cameraFar'].value = this.camera.far;\r\n    this.hBlurMaterial.uniforms['cameraNear'].value = this.camera.near;\r\n    this.hBlurMaterial.uniforms['cameraFar'].value = this.camera.far;\r\n    this.params.saoBlurRadius = Math.floor(this.params.saoBlurRadius);\r\n\r\n    if (this.prevStdDev !== this.params.saoBlurStdDev || this.prevNumSamples !== this.params.saoBlurRadius) {\r\n      BlurShaderUtils.configure(this.vBlurMaterial, this.params.saoBlurRadius, this.params.saoBlurStdDev, new Vector2(0, 1));\r\n      BlurShaderUtils.configure(this.hBlurMaterial, this.params.saoBlurRadius, this.params.saoBlurStdDev, new Vector2(1, 0));\r\n      this.prevStdDev = this.params.saoBlurStdDev;\r\n      this.prevNumSamples = this.params.saoBlurRadius;\r\n    } // Rendering scene to depth texture\r\n\r\n\r\n    renderer.setClearColor(0x000000);\r\n    renderer.setRenderTarget(this.beautyRenderTarget);\r\n    renderer.clear();\r\n    renderer.render(this.scene, this.camera); // Re-render scene if depth texture extension is not supported\r\n\r\n    if (!this.supportsDepthTextureExtension) {\r\n      // Clear rule : far clipping plane in both RGBA and Basic encoding\r\n      this.renderOverride(renderer, this.depthMaterial, this.depthRenderTarget, 0x000000, 1.0);\r\n    }\r\n\r\n    if (this.supportsNormalTexture) {\r\n      // Clear rule : default normal is facing the camera\r\n      this.renderOverride(renderer, this.normalMaterial, this.normalRenderTarget, 0x7777ff, 1.0);\r\n    } // Rendering SAO texture\r\n\r\n\r\n    this.renderPass(renderer, this.saoMaterial, this.saoRenderTarget, 0xffffff, 1.0); // Blurring SAO texture\r\n\r\n    if (this.params.saoBlur) {\r\n      this.renderPass(renderer, this.vBlurMaterial, this.blurIntermediateRenderTarget, 0xffffff, 1.0);\r\n      this.renderPass(renderer, this.hBlurMaterial, this.saoRenderTarget, 0xffffff, 1.0);\r\n    }\r\n\r\n    var outputMaterial = this.materialCopy; // Setting up SAO rendering\r\n\r\n    if (this.params.output === 3) {\r\n      if (this.supportsDepthTextureExtension) {\r\n        this.materialCopy.uniforms['tDiffuse'].value = this.beautyRenderTarget.depthTexture;\r\n        this.materialCopy.needsUpdate = true;\r\n      } else {\r\n        this.depthCopy.uniforms['tDiffuse'].value = this.depthRenderTarget.texture;\r\n        this.depthCopy.needsUpdate = true;\r\n        outputMaterial = this.depthCopy;\r\n      }\r\n    } else if (this.params.output === 4) {\r\n      this.materialCopy.uniforms['tDiffuse'].value = this.normalRenderTarget.texture;\r\n      this.materialCopy.needsUpdate = true;\r\n    } else {\r\n      this.materialCopy.uniforms['tDiffuse'].value = this.saoRenderTarget.texture;\r\n      this.materialCopy.needsUpdate = true;\r\n    } // Blending depends on output, only want a CustomBlending when showing SAO\r\n\r\n\r\n    if (this.params.output === 0) {\r\n      outputMaterial.blending = CustomBlending;\r\n    } else {\r\n      outputMaterial.blending = NoBlending;\r\n    } // Rendering SAOPass result on top of previous pass\r\n\r\n\r\n    this.renderPass(renderer, outputMaterial, this.renderToScreen ? null : readBuffer);\r\n    renderer.setClearColor(this._oldClearColor, this.oldClearAlpha);\r\n    renderer.autoClear = oldAutoClear;\r\n  },\r\n  renderPass: function (renderer, passMaterial, renderTarget, clearColor, clearAlpha) {\r\n    // save original state\r\n    renderer.getClearColor(this.originalClearColor);\r\n    var originalClearAlpha = renderer.getClearAlpha();\r\n    var originalAutoClear = renderer.autoClear;\r\n    renderer.setRenderTarget(renderTarget); // setup pass state\r\n\r\n    renderer.autoClear = false;\r\n\r\n    if (clearColor !== undefined && clearColor !== null) {\r\n      renderer.setClearColor(clearColor);\r\n      renderer.setClearAlpha(clearAlpha || 0.0);\r\n      renderer.clear();\r\n    }\r\n\r\n    this.fsQuad.material = passMaterial;\r\n    this.fsQuad.render(renderer); // restore original state\r\n\r\n    renderer.autoClear = originalAutoClear;\r\n    renderer.setClearColor(this.originalClearColor);\r\n    renderer.setClearAlpha(originalClearAlpha);\r\n  },\r\n  renderOverride: function (renderer, overrideMaterial, renderTarget, clearColor, clearAlpha) {\r\n    renderer.getClearColor(this.originalClearColor);\r\n    var originalClearAlpha = renderer.getClearAlpha();\r\n    var originalAutoClear = renderer.autoClear;\r\n    renderer.setRenderTarget(renderTarget);\r\n    renderer.autoClear = false;\r\n    clearColor = overrideMaterial.clearColor || clearColor;\r\n    clearAlpha = overrideMaterial.clearAlpha || clearAlpha;\r\n\r\n    if (clearColor !== undefined && clearColor !== null) {\r\n      renderer.setClearColor(clearColor);\r\n      renderer.setClearAlpha(clearAlpha || 0.0);\r\n      renderer.clear();\r\n    }\r\n\r\n    this.scene.overrideMaterial = overrideMaterial;\r\n    renderer.render(this.scene, this.camera);\r\n    this.scene.overrideMaterial = null; // restore original state\r\n\r\n    renderer.autoClear = originalAutoClear;\r\n    renderer.setClearColor(this.originalClearColor);\r\n    renderer.setClearAlpha(originalClearAlpha);\r\n  },\r\n  setSize: function (width, height) {\r\n    this.beautyRenderTarget.setSize(width, height);\r\n    this.saoRenderTarget.setSize(width, height);\r\n    this.blurIntermediateRenderTarget.setSize(width, height);\r\n    this.normalRenderTarget.setSize(width, height);\r\n    this.depthRenderTarget.setSize(width, height);\r\n    this.saoMaterial.uniforms['size'].value.set(width, height);\r\n    this.saoMaterial.uniforms['cameraInverseProjectionMatrix'].value.copy(this.camera.projectionMatrixInverse);\r\n    this.saoMaterial.uniforms['cameraProjectionMatrix'].value = this.camera.projectionMatrix;\r\n    this.saoMaterial.needsUpdate = true;\r\n    this.vBlurMaterial.uniforms['size'].value.set(width, height);\r\n    this.vBlurMaterial.needsUpdate = true;\r\n    this.hBlurMaterial.uniforms['size'].value.set(width, height);\r\n    this.hBlurMaterial.needsUpdate = true;\r\n  }\r\n});\r\n\r\nexport { SAOPass };\r\n"],"mappings":"AAAA,SAASA,KAAT,EAAgBC,OAAhB,EAAyBC,iBAAzB,EAA4CC,YAA5C,EAA0DC,UAA1D,EAAsEC,aAAtE,EAAqFC,YAArF,EAAmGC,iBAAnG,EAAsHC,iBAAtH,EAAyIC,gBAAzI,EAA2JC,UAA3J,EAAuKC,kBAAvK,EAA2LC,cAA3L,EAA2MC,aAA3M,EAA0NC,cAA1N,EAA0OC,cAA1O,EAA0PC,UAA1P,EAAsQC,WAAtQ,EAAmRC,cAAnR,QAAyS,OAAzS;AACA,SAASC,cAAT,EAAyBC,IAAzB,QAAqC,WAArC;AACA,SAASC,SAAT,QAA0B,yBAA1B;AACA,SAASC,sBAAT,EAAiCC,eAAjC,QAAwD,sCAAxD;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,qBAAT,QAAsC,qCAAtC;AAEA;AACA;AACA;;AAEA,IAAIC,OAAO,GAAG,SAAVA,OAAU,CAAUC,KAAV,EAAiBC,MAAjB,EAAyBC,YAAzB,EAAuCC,UAAvC,EAAmDC,UAAnD,EAA+D;EAC3E,KAAKJ,KAAL,GAAaA,KAAb;EACA,KAAKC,MAAL,GAAcA,MAAd;EACA,KAAKI,KAAL,GAAa,IAAb;EACA,KAAKC,SAAL,GAAiB,KAAjB;EACA,KAAKC,6BAAL,GAAqCL,YAAY,KAAKM,SAAjB,GAA6BN,YAA7B,GAA4C,KAAjF;EACA,KAAKO,qBAAL,GAA6BN,UAAU,KAAKK,SAAf,GAA2BL,UAA3B,GAAwC,KAArE;EACA,KAAKO,kBAAL,GAA0B,IAAIrC,KAAJ,EAA1B;EACA,KAAKsC,cAAL,GAAsB,IAAItC,KAAJ,EAAtB;EACA,KAAKuC,aAAL,GAAqB,CAArB;EACA,KAAKC,MAAL,GAAc;IACZC,MAAM,EAAE,CADI;IAEZC,OAAO,EAAE,GAFG;IAGZC,YAAY,EAAE,IAHF;IAIZC,QAAQ,EAAE,CAJE;IAKZC,eAAe,EAAE,GALL;IAMZC,gBAAgB,EAAE,CANN;IAOZC,OAAO,EAAE,IAPG;IAQZC,aAAa,EAAE,CARH;IASZC,aAAa,EAAE,CATH;IAUZC,kBAAkB,EAAE;EAVR,CAAd;EAYA,KAAKnB,UAAL,GAAkBA,UAAU,KAAKI,SAAf,GAA2B,IAAIlC,OAAJ,CAAY8B,UAAU,CAACoB,CAAvB,EAA0BpB,UAAU,CAACqB,CAArC,CAA3B,GAAqE,IAAInD,OAAJ,CAAY,GAAZ,EAAiB,GAAjB,CAAvF;EACA,KAAKoD,eAAL,GAAuB,IAAInD,iBAAJ,CAAsB,KAAK6B,UAAL,CAAgBoB,CAAtC,EAAyC,KAAKpB,UAAL,CAAgBqB,CAAzD,EAA4D;IACjFE,SAAS,EAAEnD,YADsE;IAEjFoD,SAAS,EAAEpD,YAFsE;IAGjFqD,MAAM,EAAEpD;EAHyE,CAA5D,CAAvB;EAKA,KAAKqD,4BAAL,GAAoC,KAAKJ,eAAL,CAAqBK,KAArB,EAApC;EACA,KAAKC,kBAAL,GAA0B,KAAKN,eAAL,CAAqBK,KAArB,EAA1B;EACA,KAAKE,kBAAL,GAA0B,IAAI1D,iBAAJ,CAAsB,KAAK6B,UAAL,CAAgBoB,CAAtC,EAAyC,KAAKpB,UAAL,CAAgBqB,CAAzD,EAA4D;IACpFE,SAAS,EAAEjD,aADyE;IAEpFkD,SAAS,EAAElD,aAFyE;IAGpFmD,MAAM,EAAEpD;EAH4E,CAA5D,CAA1B;EAKA,KAAKyD,iBAAL,GAAyB,KAAKD,kBAAL,CAAwBF,KAAxB,EAAzB;;EAEA,IAAI,KAAKxB,6BAAT,EAAwC;IACtC,IAAIL,YAAY,GAAG,IAAIvB,YAAJ,EAAnB;IACAuB,YAAY,CAACiC,IAAb,GAAoBvD,iBAApB;IACA,KAAKoD,kBAAL,CAAwB9B,YAAxB,GAAuCA,YAAvC;IACA,KAAK8B,kBAAL,CAAwBI,WAAxB,GAAsC,IAAtC;EACD;;EAED,KAAKC,aAAL,GAAqB,IAAIxD,iBAAJ,EAArB;EACA,KAAKwD,aAAL,CAAmBC,YAAnB,GAAkCxD,gBAAlC;EACA,KAAKuD,aAAL,CAAmBE,QAAnB,GAA8BxD,UAA9B;EACA,KAAKyD,cAAL,GAAsB,IAAIxD,kBAAJ,EAAtB;EACA,KAAKwD,cAAL,CAAoBD,QAApB,GAA+BxD,UAA/B;;EAEA,IAAIW,SAAS,KAAKc,SAAlB,EAA6B;IAC3BiC,OAAO,CAACC,KAAR,CAAc,mCAAd;EACD;;EAED,KAAKC,WAAL,GAAmB,IAAI1D,cAAJ,CAAmB;IACpC2D,OAAO,EAAEC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBpD,SAAS,CAACkD,OAA5B,CAD2B;IAEpCG,cAAc,EAAErD,SAAS,CAACqD,cAFU;IAGpCC,YAAY,EAAEtD,SAAS,CAACsD,YAHY;IAIpCC,QAAQ,EAAE/D,aAAa,CAAC6C,KAAd,CAAoBrC,SAAS,CAACuD,QAA9B;EAJ0B,CAAnB,CAAnB;EAMA,KAAKN,WAAL,CAAiBO,UAAjB,CAA4BC,WAA5B,GAA0C,IAA1C;EACA,KAAKR,WAAL,CAAiBC,OAAjB,CAAyB,eAAzB,IAA4C,KAAKrC,6BAAL,GAAqC,CAArC,GAAyC,CAArF;EACA,KAAKoC,WAAL,CAAiBC,OAAjB,CAAyB,gBAAzB,IAA6C,KAAKnC,qBAAL,GAA6B,CAA7B,GAAiC,CAA9E;EACA,KAAKkC,WAAL,CAAiBC,OAAjB,CAAyB,oBAAzB,IAAiD,KAAK3C,MAAL,CAAYmD,mBAAZ,GAAkC,CAAlC,GAAsC,CAAvF;EACA,KAAKT,WAAL,CAAiBM,QAAjB,CAA0B,QAA1B,EAAoCI,KAApC,GAA4C,KAAK9C,6BAAL,GAAqCL,YAArC,GAAoD,KAAKgC,iBAAL,CAAuBoB,OAAvH;EACA,KAAKX,WAAL,CAAiBM,QAAjB,CAA0B,SAA1B,EAAqCI,KAArC,GAA6C,KAAKpB,kBAAL,CAAwBqB,OAArE;EACA,KAAKX,WAAL,CAAiBM,QAAjB,CAA0B,MAA1B,EAAkCI,KAAlC,CAAwCE,GAAxC,CAA4C,KAAKnD,UAAL,CAAgBoB,CAA5D,EAA+D,KAAKpB,UAAL,CAAgBqB,CAA/E;EACA,KAAKkB,WAAL,CAAiBM,QAAjB,CAA0B,+BAA1B,EAA2DI,KAA3D,CAAiEG,IAAjE,CAAsE,KAAKvD,MAAL,CAAYwD,uBAAlF;EACA,KAAKd,WAAL,CAAiBM,QAAjB,CAA0B,wBAA1B,EAAoDI,KAApD,GAA4D,KAAKpD,MAAL,CAAYyD,gBAAxE;EACA,KAAKf,WAAL,CAAiBJ,QAAjB,GAA4BxD,UAA5B;;EAEA,IAAIY,sBAAsB,KAAKa,SAA/B,EAA0C;IACxCiC,OAAO,CAACC,KAAR,CAAc,gDAAd;EACD;;EAED,KAAKiB,aAAL,GAAqB,IAAI1E,cAAJ,CAAmB;IACtCgE,QAAQ,EAAE/D,aAAa,CAAC6C,KAAd,CAAoBpC,sBAAsB,CAACsD,QAA3C,CAD4B;IAEtCL,OAAO,EAAEC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBnD,sBAAsB,CAACiD,OAAzC,CAF6B;IAGtCI,YAAY,EAAErD,sBAAsB,CAACqD,YAHC;IAItCD,cAAc,EAAEpD,sBAAsB,CAACoD;EAJD,CAAnB,CAArB;EAMA,KAAKY,aAAL,CAAmBf,OAAnB,CAA2B,eAA3B,IAA8C,KAAKrC,6BAAL,GAAqC,CAArC,GAAyC,CAAvF;EACA,KAAKoD,aAAL,CAAmBf,OAAnB,CAA2B,oBAA3B,IAAmD,KAAK3C,MAAL,CAAYmD,mBAAZ,GAAkC,CAAlC,GAAsC,CAAzF;EACA,KAAKO,aAAL,CAAmBV,QAAnB,CAA4B,UAA5B,EAAwCI,KAAxC,GAAgD,KAAK3B,eAAL,CAAqB4B,OAArE;EACA,KAAKK,aAAL,CAAmBV,QAAnB,CAA4B,QAA5B,EAAsCI,KAAtC,GAA8C,KAAK9C,6BAAL,GAAqCL,YAArC,GAAoD,KAAKgC,iBAAL,CAAuBoB,OAAzH;EACA,KAAKK,aAAL,CAAmBV,QAAnB,CAA4B,MAA5B,EAAoCI,KAApC,CAA0CE,GAA1C,CAA8C,KAAKnD,UAAL,CAAgBoB,CAA9D,EAAiE,KAAKpB,UAAL,CAAgBqB,CAAjF;EACA,KAAKkC,aAAL,CAAmBpB,QAAnB,GAA8BxD,UAA9B;EACA,KAAK6E,aAAL,GAAqB,IAAI3E,cAAJ,CAAmB;IACtCgE,QAAQ,EAAE/D,aAAa,CAAC6C,KAAd,CAAoBpC,sBAAsB,CAACsD,QAA3C,CAD4B;IAEtCL,OAAO,EAAEC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBnD,sBAAsB,CAACiD,OAAzC,CAF6B;IAGtCI,YAAY,EAAErD,sBAAsB,CAACqD,YAHC;IAItCD,cAAc,EAAEpD,sBAAsB,CAACoD;EAJD,CAAnB,CAArB;EAMA,KAAKa,aAAL,CAAmBhB,OAAnB,CAA2B,eAA3B,IAA8C,KAAKrC,6BAAL,GAAqC,CAArC,GAAyC,CAAvF;EACA,KAAKqD,aAAL,CAAmBhB,OAAnB,CAA2B,oBAA3B,IAAmD,KAAK3C,MAAL,CAAYmD,mBAAZ,GAAkC,CAAlC,GAAsC,CAAzF;EACA,KAAKQ,aAAL,CAAmBX,QAAnB,CAA4B,UAA5B,EAAwCI,KAAxC,GAAgD,KAAKvB,4BAAL,CAAkCwB,OAAlF;EACA,KAAKM,aAAL,CAAmBX,QAAnB,CAA4B,QAA5B,EAAsCI,KAAtC,GAA8C,KAAK9C,6BAAL,GAAqCL,YAArC,GAAoD,KAAKgC,iBAAL,CAAuBoB,OAAzH;EACA,KAAKM,aAAL,CAAmBX,QAAnB,CAA4B,MAA5B,EAAoCI,KAApC,CAA0CE,GAA1C,CAA8C,KAAKnD,UAAL,CAAgBoB,CAA9D,EAAiE,KAAKpB,UAAL,CAAgBqB,CAAjF;EACA,KAAKmC,aAAL,CAAmBrB,QAAnB,GAA8BxD,UAA9B;;EAEA,IAAIc,UAAU,KAAKW,SAAnB,EAA8B;IAC5BiC,OAAO,CAACC,KAAR,CAAc,oCAAd;EACD;;EAED,KAAKmB,YAAL,GAAoB,IAAI5E,cAAJ,CAAmB;IACrCgE,QAAQ,EAAE/D,aAAa,CAAC6C,KAAd,CAAoBlC,UAAU,CAACoD,QAA/B,CAD2B;IAErCD,YAAY,EAAEnD,UAAU,CAACmD,YAFY;IAGrCD,cAAc,EAAElD,UAAU,CAACkD,cAHU;IAIrCR,QAAQ,EAAExD;EAJ2B,CAAnB,CAApB;EAMA,KAAK8E,YAAL,CAAkBC,WAAlB,GAAgC,IAAhC;EACA,KAAKD,YAAL,CAAkBE,SAAlB,GAA8B,KAA9B;EACA,KAAKF,YAAL,CAAkBG,UAAlB,GAA+B,KAA/B;EACA,KAAKH,YAAL,CAAkBtB,QAAlB,GAA6BpD,cAA7B;EACA,KAAK0E,YAAL,CAAkBI,QAAlB,GAA6B7E,cAA7B;EACA,KAAKyE,YAAL,CAAkBK,QAAlB,GAA6B7E,UAA7B;EACA,KAAKwE,YAAL,CAAkBM,aAAlB,GAAkC7E,WAAlC;EACA,KAAKuE,YAAL,CAAkBO,aAAlB,GAAkC7E,cAAlC;EACA,KAAKsE,YAAL,CAAkBQ,aAAlB,GAAkChF,UAAlC;EACA,KAAKwE,YAAL,CAAkBS,kBAAlB,GAAuChF,WAAvC;;EAEA,IAAIQ,qBAAqB,KAAKU,SAA9B,EAAyC;IACvCiC,OAAO,CAACC,KAAR,CAAc,+CAAd;EACD;;EAED,KAAK6B,SAAL,GAAiB,IAAItF,cAAJ,CAAmB;IAClCgE,QAAQ,EAAE/D,aAAa,CAAC6C,KAAd,CAAoBjC,qBAAqB,CAACmD,QAA1C,CADwB;IAElCD,YAAY,EAAElD,qBAAqB,CAACkD,YAFF;IAGlCD,cAAc,EAAEjD,qBAAqB,CAACiD,cAHJ;IAIlCR,QAAQ,EAAExD;EAJwB,CAAnB,CAAjB;EAMA,KAAKyF,MAAL,GAAc,IAAIhF,cAAJ,CAAmB,IAAnB,CAAd;AACD,CApID;;AAsIAO,OAAO,CAAC0E,MAAR,GAAiB;EACfC,MAAM,EAAE,CADO;EAEfC,OAAO,EAAE,CAFM;EAGfC,GAAG,EAAE,CAHU;EAIfC,KAAK,EAAE,CAJQ;EAKfC,MAAM,EAAE;AALO,CAAjB;AAOA/E,OAAO,CAACgF,SAAR,GAAoBlC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACmC,MAAP,CAAcvF,IAAI,CAACsF,SAAnB,CAAd,EAA6C;EAC/DE,WAAW,EAAElF,OADkD;EAE/DmF,MAAM,EAAE,gBAAUC,QAAV,EAAoBC,WAApB,EAAiCC;EACzC;EADQ,EAEN;IACA;IACA,IAAI,KAAKC,cAAT,EAAyB;MACvB,KAAKzB,YAAL,CAAkBtB,QAAlB,GAA6BxD,UAA7B;MACA,KAAK8E,YAAL,CAAkBZ,QAAlB,CAA2B,UAA3B,EAAuCI,KAAvC,GAA+CgC,UAAU,CAAC/B,OAA1D;MACA,KAAKO,YAAL,CAAkB0B,WAAlB,GAAgC,IAAhC;MACA,KAAKC,UAAL,CAAgBL,QAAhB,EAA0B,KAAKtB,YAA/B,EAA6C,IAA7C;IACD;;IAED,IAAI,KAAKhD,MAAL,CAAYC,MAAZ,KAAuB,CAA3B,EAA8B;MAC5B;IACD;;IAEDqE,QAAQ,CAACM,aAAT,CAAuB,KAAK9E,cAA5B;IACA,KAAKC,aAAL,GAAqBuE,QAAQ,CAACO,aAAT,EAArB;IACA,IAAIC,YAAY,GAAGR,QAAQ,CAACS,SAA5B;IACAT,QAAQ,CAACS,SAAT,GAAqB,KAArB;IACAT,QAAQ,CAACU,eAAT,CAAyB,KAAK3D,iBAA9B;IACAiD,QAAQ,CAAC9E,KAAT;IACA,KAAKsC,WAAL,CAAiBM,QAAjB,CAA0B,MAA1B,EAAkCI,KAAlC,GAA0C,KAAKxC,MAAL,CAAYE,OAAtD;IACA,KAAK4B,WAAL,CAAiBM,QAAjB,CAA0B,WAA1B,EAAuCI,KAAvC,GAA+C,KAAKxC,MAAL,CAAYG,YAA3D;IACA,KAAK2B,WAAL,CAAiBM,QAAjB,CAA0B,OAA1B,EAAmCI,KAAnC,GAA2C,KAAKxC,MAAL,CAAYI,QAAvD;IACA,KAAK0B,WAAL,CAAiBM,QAAjB,CAA0B,cAA1B,EAA0CI,KAA1C,GAAkD,KAAKxC,MAAL,CAAYK,eAA9D;IACA,KAAKyB,WAAL,CAAiBM,QAAjB,CAA0B,eAA1B,EAA2CI,KAA3C,GAAmD,KAAKxC,MAAL,CAAYM,gBAA/D;IACA,KAAKwB,WAAL,CAAiBM,QAAjB,CAA0B,YAA1B,EAAwCI,KAAxC,GAAgD,KAAKpD,MAAL,CAAY6F,IAA5D;IACA,KAAKnD,WAAL,CAAiBM,QAAjB,CAA0B,WAA1B,EAAuCI,KAAvC,GAA+C,KAAKpD,MAAL,CAAY8F,GAA3D,CAzBA,CAyBgE;;IAEhE,IAAIC,WAAW,GAAG,KAAKnF,MAAL,CAAYU,kBAAZ,IAAkC,KAAKtB,MAAL,CAAY8F,GAAZ,GAAkB,KAAK9F,MAAL,CAAY6F,IAAhE,CAAlB;IACA,KAAKnC,aAAL,CAAmBV,QAAnB,CAA4B,aAA5B,EAA2CI,KAA3C,GAAmD2C,WAAnD;IACA,KAAKpC,aAAL,CAAmBX,QAAnB,CAA4B,aAA5B,EAA2CI,KAA3C,GAAmD2C,WAAnD;IACA,KAAKrC,aAAL,CAAmBV,QAAnB,CAA4B,YAA5B,EAA0CI,KAA1C,GAAkD,KAAKpD,MAAL,CAAY6F,IAA9D;IACA,KAAKnC,aAAL,CAAmBV,QAAnB,CAA4B,WAA5B,EAAyCI,KAAzC,GAAiD,KAAKpD,MAAL,CAAY8F,GAA7D;IACA,KAAKnC,aAAL,CAAmBX,QAAnB,CAA4B,YAA5B,EAA0CI,KAA1C,GAAkD,KAAKpD,MAAL,CAAY6F,IAA9D;IACA,KAAKlC,aAAL,CAAmBX,QAAnB,CAA4B,WAA5B,EAAyCI,KAAzC,GAAiD,KAAKpD,MAAL,CAAY8F,GAA7D;IACA,KAAKlF,MAAL,CAAYQ,aAAZ,GAA4B4E,IAAI,CAACC,KAAL,CAAW,KAAKrF,MAAL,CAAYQ,aAAvB,CAA5B;;IAEA,IAAI,KAAK8E,UAAL,KAAoB,KAAKtF,MAAL,CAAYS,aAAhC,IAAiD,KAAK8E,cAAL,KAAwB,KAAKvF,MAAL,CAAYQ,aAAzF,EAAwG;MACtGzB,eAAe,CAACyG,SAAhB,CAA0B,KAAK1C,aAA/B,EAA8C,KAAK9C,MAAL,CAAYQ,aAA1D,EAAyE,KAAKR,MAAL,CAAYS,aAArF,EAAoG,IAAIhD,OAAJ,CAAY,CAAZ,EAAe,CAAf,CAApG;MACAsB,eAAe,CAACyG,SAAhB,CAA0B,KAAKzC,aAA/B,EAA8C,KAAK/C,MAAL,CAAYQ,aAA1D,EAAyE,KAAKR,MAAL,CAAYS,aAArF,EAAoG,IAAIhD,OAAJ,CAAY,CAAZ,EAAe,CAAf,CAApG;MACA,KAAK6H,UAAL,GAAkB,KAAKtF,MAAL,CAAYS,aAA9B;MACA,KAAK8E,cAAL,GAAsB,KAAKvF,MAAL,CAAYQ,aAAlC;IACD,CAzCD,CAyCE;;;IAGF8D,QAAQ,CAACmB,aAAT,CAAuB,QAAvB;IACAnB,QAAQ,CAACU,eAAT,CAAyB,KAAK7D,kBAA9B;IACAmD,QAAQ,CAAC9E,KAAT;IACA8E,QAAQ,CAACD,MAAT,CAAgB,KAAKlF,KAArB,EAA4B,KAAKC,MAAjC,EA/CA,CA+C0C;;IAE1C,IAAI,CAAC,KAAKM,6BAAV,EAAyC;MACvC;MACA,KAAKgG,cAAL,CAAoBpB,QAApB,EAA8B,KAAK9C,aAAnC,EAAkD,KAAKH,iBAAvD,EAA0E,QAA1E,EAAoF,GAApF;IACD;;IAED,IAAI,KAAKzB,qBAAT,EAAgC;MAC9B;MACA,KAAK8F,cAAL,CAAoBpB,QAApB,EAA8B,KAAK3C,cAAnC,EAAmD,KAAKP,kBAAxD,EAA4E,QAA5E,EAAsF,GAAtF;IACD,CAzDD,CAyDE;;;IAGF,KAAKuD,UAAL,CAAgBL,QAAhB,EAA0B,KAAKxC,WAA/B,EAA4C,KAAKjB,eAAjD,EAAkE,QAAlE,EAA4E,GAA5E,EA5DA,CA4DkF;;IAElF,IAAI,KAAKb,MAAL,CAAYO,OAAhB,EAAyB;MACvB,KAAKoE,UAAL,CAAgBL,QAAhB,EAA0B,KAAKxB,aAA/B,EAA8C,KAAK7B,4BAAnD,EAAiF,QAAjF,EAA2F,GAA3F;MACA,KAAK0D,UAAL,CAAgBL,QAAhB,EAA0B,KAAKvB,aAA/B,EAA8C,KAAKlC,eAAnD,EAAoE,QAApE,EAA8E,GAA9E;IACD;;IAED,IAAI8E,cAAc,GAAG,KAAK3C,YAA1B,CAnEA,CAmEwC;;IAExC,IAAI,KAAKhD,MAAL,CAAYC,MAAZ,KAAuB,CAA3B,EAA8B;MAC5B,IAAI,KAAKP,6BAAT,EAAwC;QACtC,KAAKsD,YAAL,CAAkBZ,QAAlB,CAA2B,UAA3B,EAAuCI,KAAvC,GAA+C,KAAKrB,kBAAL,CAAwB9B,YAAvE;QACA,KAAK2D,YAAL,CAAkB0B,WAAlB,GAAgC,IAAhC;MACD,CAHD,MAGO;QACL,KAAKhB,SAAL,CAAetB,QAAf,CAAwB,UAAxB,EAAoCI,KAApC,GAA4C,KAAKnB,iBAAL,CAAuBoB,OAAnE;QACA,KAAKiB,SAAL,CAAegB,WAAf,GAA6B,IAA7B;QACAiB,cAAc,GAAG,KAAKjC,SAAtB;MACD;IACF,CATD,MASO,IAAI,KAAK1D,MAAL,CAAYC,MAAZ,KAAuB,CAA3B,EAA8B;MACnC,KAAK+C,YAAL,CAAkBZ,QAAlB,CAA2B,UAA3B,EAAuCI,KAAvC,GAA+C,KAAKpB,kBAAL,CAAwBqB,OAAvE;MACA,KAAKO,YAAL,CAAkB0B,WAAlB,GAAgC,IAAhC;IACD,CAHM,MAGA;MACL,KAAK1B,YAAL,CAAkBZ,QAAlB,CAA2B,UAA3B,EAAuCI,KAAvC,GAA+C,KAAK3B,eAAL,CAAqB4B,OAApE;MACA,KAAKO,YAAL,CAAkB0B,WAAlB,GAAgC,IAAhC;IACD,CApFD,CAoFE;;;IAGF,IAAI,KAAK1E,MAAL,CAAYC,MAAZ,KAAuB,CAA3B,EAA8B;MAC5B0F,cAAc,CAACjE,QAAf,GAA0BpD,cAA1B;IACD,CAFD,MAEO;MACLqH,cAAc,CAACjE,QAAf,GAA0BxD,UAA1B;IACD,CA3FD,CA2FE;;;IAGF,KAAKyG,UAAL,CAAgBL,QAAhB,EAA0BqB,cAA1B,EAA0C,KAAKlB,cAAL,GAAsB,IAAtB,GAA6BD,UAAvE;IACAF,QAAQ,CAACmB,aAAT,CAAuB,KAAK3F,cAA5B,EAA4C,KAAKC,aAAjD;IACAuE,QAAQ,CAACS,SAAT,GAAqBD,YAArB;EACD,CArG8D;EAsG/DH,UAAU,EAAE,oBAAUL,QAAV,EAAoBsB,YAApB,EAAkCC,YAAlC,EAAgDC,UAAhD,EAA4DC,UAA5D,EAAwE;IAClF;IACAzB,QAAQ,CAACM,aAAT,CAAuB,KAAK/E,kBAA5B;IACA,IAAImG,kBAAkB,GAAG1B,QAAQ,CAACO,aAAT,EAAzB;IACA,IAAIoB,iBAAiB,GAAG3B,QAAQ,CAACS,SAAjC;IACAT,QAAQ,CAACU,eAAT,CAAyBa,YAAzB,EALkF,CAK1C;;IAExCvB,QAAQ,CAACS,SAAT,GAAqB,KAArB;;IAEA,IAAIe,UAAU,KAAKnG,SAAf,IAA4BmG,UAAU,KAAK,IAA/C,EAAqD;MACnDxB,QAAQ,CAACmB,aAAT,CAAuBK,UAAvB;MACAxB,QAAQ,CAAC4B,aAAT,CAAuBH,UAAU,IAAI,GAArC;MACAzB,QAAQ,CAAC9E,KAAT;IACD;;IAED,KAAKmE,MAAL,CAAYwC,QAAZ,GAAuBP,YAAvB;IACA,KAAKjC,MAAL,CAAYU,MAAZ,CAAmBC,QAAnB,EAhBkF,CAgBpD;;IAE9BA,QAAQ,CAACS,SAAT,GAAqBkB,iBAArB;IACA3B,QAAQ,CAACmB,aAAT,CAAuB,KAAK5F,kBAA5B;IACAyE,QAAQ,CAAC4B,aAAT,CAAuBF,kBAAvB;EACD,CA3H8D;EA4H/DN,cAAc,EAAE,wBAAUpB,QAAV,EAAoB8B,gBAApB,EAAsCP,YAAtC,EAAoDC,UAApD,EAAgEC,UAAhE,EAA4E;IAC1FzB,QAAQ,CAACM,aAAT,CAAuB,KAAK/E,kBAA5B;IACA,IAAImG,kBAAkB,GAAG1B,QAAQ,CAACO,aAAT,EAAzB;IACA,IAAIoB,iBAAiB,GAAG3B,QAAQ,CAACS,SAAjC;IACAT,QAAQ,CAACU,eAAT,CAAyBa,YAAzB;IACAvB,QAAQ,CAACS,SAAT,GAAqB,KAArB;IACAe,UAAU,GAAGM,gBAAgB,CAACN,UAAjB,IAA+BA,UAA5C;IACAC,UAAU,GAAGK,gBAAgB,CAACL,UAAjB,IAA+BA,UAA5C;;IAEA,IAAID,UAAU,KAAKnG,SAAf,IAA4BmG,UAAU,KAAK,IAA/C,EAAqD;MACnDxB,QAAQ,CAACmB,aAAT,CAAuBK,UAAvB;MACAxB,QAAQ,CAAC4B,aAAT,CAAuBH,UAAU,IAAI,GAArC;MACAzB,QAAQ,CAAC9E,KAAT;IACD;;IAED,KAAKL,KAAL,CAAWiH,gBAAX,GAA8BA,gBAA9B;IACA9B,QAAQ,CAACD,MAAT,CAAgB,KAAKlF,KAArB,EAA4B,KAAKC,MAAjC;IACA,KAAKD,KAAL,CAAWiH,gBAAX,GAA8B,IAA9B,CAjB0F,CAiBtD;;IAEpC9B,QAAQ,CAACS,SAAT,GAAqBkB,iBAArB;IACA3B,QAAQ,CAACmB,aAAT,CAAuB,KAAK5F,kBAA5B;IACAyE,QAAQ,CAAC4B,aAAT,CAAuBF,kBAAvB;EACD,CAlJ8D;EAmJ/DK,OAAO,EAAE,iBAAUC,KAAV,EAAiBC,MAAjB,EAAyB;IAChC,KAAKpF,kBAAL,CAAwBkF,OAAxB,CAAgCC,KAAhC,EAAuCC,MAAvC;IACA,KAAK1F,eAAL,CAAqBwF,OAArB,CAA6BC,KAA7B,EAAoCC,MAApC;IACA,KAAKtF,4BAAL,CAAkCoF,OAAlC,CAA0CC,KAA1C,EAAiDC,MAAjD;IACA,KAAKnF,kBAAL,CAAwBiF,OAAxB,CAAgCC,KAAhC,EAAuCC,MAAvC;IACA,KAAKlF,iBAAL,CAAuBgF,OAAvB,CAA+BC,KAA/B,EAAsCC,MAAtC;IACA,KAAKzE,WAAL,CAAiBM,QAAjB,CAA0B,MAA1B,EAAkCI,KAAlC,CAAwCE,GAAxC,CAA4C4D,KAA5C,EAAmDC,MAAnD;IACA,KAAKzE,WAAL,CAAiBM,QAAjB,CAA0B,+BAA1B,EAA2DI,KAA3D,CAAiEG,IAAjE,CAAsE,KAAKvD,MAAL,CAAYwD,uBAAlF;IACA,KAAKd,WAAL,CAAiBM,QAAjB,CAA0B,wBAA1B,EAAoDI,KAApD,GAA4D,KAAKpD,MAAL,CAAYyD,gBAAxE;IACA,KAAKf,WAAL,CAAiB4C,WAAjB,GAA+B,IAA/B;IACA,KAAK5B,aAAL,CAAmBV,QAAnB,CAA4B,MAA5B,EAAoCI,KAApC,CAA0CE,GAA1C,CAA8C4D,KAA9C,EAAqDC,MAArD;IACA,KAAKzD,aAAL,CAAmB4B,WAAnB,GAAiC,IAAjC;IACA,KAAK3B,aAAL,CAAmBX,QAAnB,CAA4B,MAA5B,EAAoCI,KAApC,CAA0CE,GAA1C,CAA8C4D,KAA9C,EAAqDC,MAArD;IACA,KAAKxD,aAAL,CAAmB2B,WAAnB,GAAiC,IAAjC;EACD;AAjK8D,CAA7C,CAApB;AAoKA,SAASxF,OAAT"},"metadata":{},"sourceType":"module"}