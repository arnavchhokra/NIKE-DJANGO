{"ast":null,"code":"import * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree, useFrame } from '@react-three/fiber';\n\n// eslint-disable-next-line no-shadow\nvar AnimationState = /*#__PURE__*/function (AnimationState) {\n  AnimationState[AnimationState[\"NONE\"] = 0] = \"NONE\";\n  AnimationState[AnimationState[\"START\"] = 1] = \"START\";\n  AnimationState[AnimationState[\"ACTIVE\"] = 2] = \"ACTIVE\";\n  return AnimationState;\n}(AnimationState || {});\nconst isOrthographic = def => def && def.isOrthographicCamera;\nconst isBox3 = def => def && def.isBox3;\nconst interpolateFuncDefault = t => {\n  // Imitates the previously used THREE.MathUtils.damp\n  return 1 - Math.exp(-5 * t) + 0.007 * t;\n};\nconst context = /*#__PURE__*/React.createContext(null);\nfunction Bounds(_ref) {\n  let {\n    children,\n    maxDuration = 1.0,\n    margin = 1.2,\n    observe,\n    fit,\n    clip,\n    interpolateFunc = interpolateFuncDefault,\n    onFit\n  } = _ref;\n  const ref = React.useRef(null);\n  const {\n    camera,\n    size,\n    invalidate\n  } = useThree();\n  const controls = useThree(state => state.controls);\n  const onFitRef = React.useRef(onFit);\n  onFitRef.current = onFit;\n  const origin = React.useRef({\n    camPos: new THREE.Vector3(),\n    camRot: new THREE.Quaternion(),\n    camZoom: 1\n  });\n  const goal = React.useRef({\n    camPos: undefined,\n    camRot: undefined,\n    camZoom: undefined,\n    camUp: undefined,\n    target: undefined\n  });\n  const animationState = React.useRef(AnimationState.NONE);\n  const t = React.useRef(0); // represent animation state from 0 to 1\n\n  const [box] = React.useState(() => new THREE.Box3());\n  const api = React.useMemo(() => {\n    function getSize() {\n      const boxSize = box.getSize(new THREE.Vector3());\n      const center = box.getCenter(new THREE.Vector3());\n      const maxSize = Math.max(boxSize.x, boxSize.y, boxSize.z);\n      const fitHeightDistance = isOrthographic(camera) ? maxSize * 4 : maxSize / (2 * Math.atan(Math.PI * camera.fov / 360));\n      const fitWidthDistance = isOrthographic(camera) ? maxSize * 4 : fitHeightDistance / camera.aspect;\n      const distance = margin * Math.max(fitHeightDistance, fitWidthDistance);\n      return {\n        box,\n        size: boxSize,\n        center,\n        distance\n      };\n    }\n    return {\n      getSize,\n      refresh(object) {\n        if (isBox3(object)) box.copy(object);else {\n          const target = object || ref.current;\n          if (!target) return this;\n          target.updateWorldMatrix(true, true);\n          box.setFromObject(target);\n        }\n        if (box.isEmpty()) {\n          const max = camera.position.length() || 10;\n          box.setFromCenterAndSize(new THREE.Vector3(), new THREE.Vector3(max, max, max));\n        }\n        origin.current.camPos.copy(camera.position);\n        origin.current.camRot.copy(camera.quaternion);\n        isOrthographic(camera) && (origin.current.camZoom = camera.zoom);\n        goal.current.camPos = undefined;\n        goal.current.camRot = undefined;\n        goal.current.camZoom = undefined;\n        goal.current.camUp = undefined;\n        goal.current.target = undefined;\n        return this;\n      },\n      reset() {\n        const {\n          center,\n          distance\n        } = getSize();\n        const direction = camera.position.clone().sub(center).normalize();\n        goal.current.camPos = center.clone().addScaledVector(direction, distance);\n        goal.current.target = center.clone();\n        const mCamRot = new THREE.Matrix4().lookAt(goal.current.camPos, goal.current.target, camera.up);\n        goal.current.camRot = new THREE.Quaternion().setFromRotationMatrix(mCamRot);\n        animationState.current = AnimationState.START;\n        t.current = 0;\n        return this;\n      },\n      moveTo(position) {\n        goal.current.camPos = Array.isArray(position) ? new THREE.Vector3(...position) : position.clone();\n        animationState.current = AnimationState.START;\n        t.current = 0;\n        return this;\n      },\n      lookAt(_ref2) {\n        let {\n          target,\n          up\n        } = _ref2;\n        goal.current.target = Array.isArray(target) ? new THREE.Vector3(...target) : target.clone();\n        if (up) {\n          goal.current.camUp = Array.isArray(up) ? new THREE.Vector3(...up) : up.clone();\n        } else {\n          goal.current.camUp = camera.up.clone();\n        }\n        const mCamRot = new THREE.Matrix4().lookAt(goal.current.camPos || camera.position, goal.current.target, goal.current.camUp);\n        goal.current.camRot = new THREE.Quaternion().setFromRotationMatrix(mCamRot);\n        animationState.current = AnimationState.START;\n        t.current = 0;\n        return this;\n      },\n      /**\r\n       * @deprecated Use moveTo and lookAt instead\r\n       */\n      to(_ref3) {\n        let {\n          position,\n          target\n        } = _ref3;\n        return this.moveTo(position).lookAt({\n          target\n        });\n      },\n      fit() {\n        if (!isOrthographic(camera)) {\n          // For non-orthographic cameras, fit should behave exactly like reset\n          return this.reset();\n        }\n\n        // For orthographic cameras, fit should only modify the zoom value\n        let maxHeight = 0,\n          maxWidth = 0;\n        const vertices = [new THREE.Vector3(box.min.x, box.min.y, box.min.z), new THREE.Vector3(box.min.x, box.max.y, box.min.z), new THREE.Vector3(box.min.x, box.min.y, box.max.z), new THREE.Vector3(box.min.x, box.max.y, box.max.z), new THREE.Vector3(box.max.x, box.max.y, box.max.z), new THREE.Vector3(box.max.x, box.max.y, box.min.z), new THREE.Vector3(box.max.x, box.min.y, box.max.z), new THREE.Vector3(box.max.x, box.min.y, box.min.z)];\n\n        // Transform the center and each corner to camera space\n        const pos = goal.current.camPos || camera.position;\n        const target = goal.current.target || (controls == null ? void 0 : controls.target);\n        const up = goal.current.camUp || camera.up;\n        const mCamWInv = target ? new THREE.Matrix4().lookAt(pos, target, up).setPosition(pos).invert() : camera.matrixWorldInverse;\n        for (const v of vertices) {\n          v.applyMatrix4(mCamWInv);\n          maxHeight = Math.max(maxHeight, Math.abs(v.y));\n          maxWidth = Math.max(maxWidth, Math.abs(v.x));\n        }\n        maxHeight *= 2;\n        maxWidth *= 2;\n        const zoomForHeight = (camera.top - camera.bottom) / maxHeight;\n        const zoomForWidth = (camera.right - camera.left) / maxWidth;\n        goal.current.camZoom = Math.min(zoomForHeight, zoomForWidth) / margin;\n        animationState.current = AnimationState.START;\n        t.current = 0;\n        onFitRef.current && onFitRef.current(this.getSize());\n        return this;\n      },\n      clip() {\n        const {\n          distance\n        } = getSize();\n        camera.near = distance / 100;\n        camera.far = distance * 100;\n        camera.updateProjectionMatrix();\n        if (controls) {\n          controls.maxDistance = distance * 10;\n          controls.update();\n        }\n        invalidate();\n        return this;\n      }\n    };\n  }, [box, camera, controls, margin, invalidate]);\n  React.useLayoutEffect(() => {\n    if (controls) {\n      // Try to prevent drag hijacking\n      const callback = () => {\n        if (controls && goal.current.target && animationState.current !== AnimationState.NONE) {\n          const front = new THREE.Vector3().setFromMatrixColumn(camera.matrix, 2);\n          const d0 = origin.current.camPos.distanceTo(controls.target);\n          const d1 = (goal.current.camPos || origin.current.camPos).distanceTo(goal.current.target);\n          const d = (1 - t.current) * d0 + t.current * d1;\n          controls.target.copy(camera.position).addScaledVector(front, -d);\n          controls.update();\n        }\n        animationState.current = AnimationState.NONE;\n      };\n      controls.addEventListener('start', callback);\n      return () => controls.removeEventListener('start', callback);\n    }\n  }, [controls]);\n\n  // Scale pointer on window resize\n  const count = React.useRef(0);\n  React.useLayoutEffect(() => {\n    if (observe || count.current++ === 0) {\n      api.refresh();\n      if (fit) api.reset().fit();\n      if (clip) api.clip();\n    }\n  }, [size, clip, fit, observe, camera, controls]);\n  useFrame((state, delta) => {\n    // This [additional animation step START] is needed to guarantee that delta used in animation isn't absurdly high (2-3 seconds) which is actually possible if rendering happens on demand...\n    if (animationState.current === AnimationState.START) {\n      animationState.current = AnimationState.ACTIVE;\n      invalidate();\n    } else if (animationState.current === AnimationState.ACTIVE) {\n      t.current += delta / maxDuration;\n      if (t.current >= 1) {\n        goal.current.camPos && camera.position.copy(goal.current.camPos);\n        goal.current.camRot && camera.quaternion.copy(goal.current.camRot);\n        goal.current.camUp && camera.up.copy(goal.current.camUp);\n        goal.current.camZoom && isOrthographic(camera) && (camera.zoom = goal.current.camZoom);\n        camera.updateMatrixWorld();\n        camera.updateProjectionMatrix();\n        if (controls && goal.current.target) {\n          controls.target.copy(goal.current.target);\n          controls.update();\n        }\n        animationState.current = AnimationState.NONE;\n      } else {\n        const k = interpolateFunc(t.current);\n        goal.current.camPos && camera.position.lerpVectors(origin.current.camPos, goal.current.camPos, k);\n        goal.current.camRot && camera.quaternion.slerpQuaternions(origin.current.camRot, goal.current.camRot, k);\n        goal.current.camUp && camera.up.set(0, 1, 0).applyQuaternion(camera.quaternion);\n        goal.current.camZoom && isOrthographic(camera) && (camera.zoom = (1 - k) * origin.current.camZoom + k * goal.current.camZoom);\n        camera.updateMatrixWorld();\n        camera.updateProjectionMatrix();\n      }\n      invalidate();\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"group\", {\n    ref: ref\n  }, /*#__PURE__*/React.createElement(context.Provider, {\n    value: api\n  }, children));\n}\nfunction useBounds() {\n  return React.useContext(context);\n}\nexport { Bounds, useBounds };","map":{"version":3,"names":["React","THREE","useThree","useFrame","AnimationState","isOrthographic","def","isOrthographicCamera","isBox3","interpolateFuncDefault","t","Math","exp","context","createContext","Bounds","_ref","children","maxDuration","margin","observe","fit","clip","interpolateFunc","onFit","ref","useRef","camera","size","invalidate","controls","state","onFitRef","current","origin","camPos","Vector3","camRot","Quaternion","camZoom","goal","undefined","camUp","target","animationState","NONE","box","useState","Box3","api","useMemo","getSize","boxSize","center","getCenter","maxSize","max","x","y","z","fitHeightDistance","atan","PI","fov","fitWidthDistance","aspect","distance","refresh","object","copy","updateWorldMatrix","setFromObject","isEmpty","position","length","setFromCenterAndSize","quaternion","zoom","reset","direction","clone","sub","normalize","addScaledVector","mCamRot","Matrix4","lookAt","up","setFromRotationMatrix","START","moveTo","Array","isArray","_ref2","to","_ref3","maxHeight","maxWidth","vertices","min","pos","mCamWInv","setPosition","invert","matrixWorldInverse","v","applyMatrix4","abs","zoomForHeight","top","bottom","zoomForWidth","right","left","near","far","updateProjectionMatrix","maxDistance","update","useLayoutEffect","callback","front","setFromMatrixColumn","matrix","d0","distanceTo","d1","d","addEventListener","removeEventListener","count","delta","ACTIVE","updateMatrixWorld","k","lerpVectors","slerpQuaternions","set","applyQuaternion","createElement","Provider","value","useBounds","useContext"],"sources":["D:/Repos/NIKE-DJANGO/Jord/l4fycy/node_modules/@react-three/drei/core/Bounds.js"],"sourcesContent":["import * as React from 'react';\r\nimport * as THREE from 'three';\r\nimport { useThree, useFrame } from '@react-three/fiber';\r\n\r\n// eslint-disable-next-line no-shadow\r\nvar AnimationState = /*#__PURE__*/function (AnimationState) {\r\n  AnimationState[AnimationState[\"NONE\"] = 0] = \"NONE\";\r\n  AnimationState[AnimationState[\"START\"] = 1] = \"START\";\r\n  AnimationState[AnimationState[\"ACTIVE\"] = 2] = \"ACTIVE\";\r\n  return AnimationState;\r\n}(AnimationState || {});\r\nconst isOrthographic = def => def && def.isOrthographicCamera;\r\nconst isBox3 = def => def && def.isBox3;\r\nconst interpolateFuncDefault = t => {\r\n  // Imitates the previously used THREE.MathUtils.damp\r\n  return 1 - Math.exp(-5 * t) + 0.007 * t;\r\n};\r\nconst context = /*#__PURE__*/React.createContext(null);\r\nfunction Bounds({\r\n  children,\r\n  maxDuration = 1.0,\r\n  margin = 1.2,\r\n  observe,\r\n  fit,\r\n  clip,\r\n  interpolateFunc = interpolateFuncDefault,\r\n  onFit\r\n}) {\r\n  const ref = React.useRef(null);\r\n  const {\r\n    camera,\r\n    size,\r\n    invalidate\r\n  } = useThree();\r\n  const controls = useThree(state => state.controls);\r\n  const onFitRef = React.useRef(onFit);\r\n  onFitRef.current = onFit;\r\n  const origin = React.useRef({\r\n    camPos: new THREE.Vector3(),\r\n    camRot: new THREE.Quaternion(),\r\n    camZoom: 1\r\n  });\r\n  const goal = React.useRef({\r\n    camPos: undefined,\r\n    camRot: undefined,\r\n    camZoom: undefined,\r\n    camUp: undefined,\r\n    target: undefined\r\n  });\r\n  const animationState = React.useRef(AnimationState.NONE);\r\n  const t = React.useRef(0); // represent animation state from 0 to 1\r\n\r\n  const [box] = React.useState(() => new THREE.Box3());\r\n  const api = React.useMemo(() => {\r\n    function getSize() {\r\n      const boxSize = box.getSize(new THREE.Vector3());\r\n      const center = box.getCenter(new THREE.Vector3());\r\n      const maxSize = Math.max(boxSize.x, boxSize.y, boxSize.z);\r\n      const fitHeightDistance = isOrthographic(camera) ? maxSize * 4 : maxSize / (2 * Math.atan(Math.PI * camera.fov / 360));\r\n      const fitWidthDistance = isOrthographic(camera) ? maxSize * 4 : fitHeightDistance / camera.aspect;\r\n      const distance = margin * Math.max(fitHeightDistance, fitWidthDistance);\r\n      return {\r\n        box,\r\n        size: boxSize,\r\n        center,\r\n        distance\r\n      };\r\n    }\r\n    return {\r\n      getSize,\r\n      refresh(object) {\r\n        if (isBox3(object)) box.copy(object);else {\r\n          const target = object || ref.current;\r\n          if (!target) return this;\r\n          target.updateWorldMatrix(true, true);\r\n          box.setFromObject(target);\r\n        }\r\n        if (box.isEmpty()) {\r\n          const max = camera.position.length() || 10;\r\n          box.setFromCenterAndSize(new THREE.Vector3(), new THREE.Vector3(max, max, max));\r\n        }\r\n        origin.current.camPos.copy(camera.position);\r\n        origin.current.camRot.copy(camera.quaternion);\r\n        isOrthographic(camera) && (origin.current.camZoom = camera.zoom);\r\n        goal.current.camPos = undefined;\r\n        goal.current.camRot = undefined;\r\n        goal.current.camZoom = undefined;\r\n        goal.current.camUp = undefined;\r\n        goal.current.target = undefined;\r\n        return this;\r\n      },\r\n      reset() {\r\n        const {\r\n          center,\r\n          distance\r\n        } = getSize();\r\n        const direction = camera.position.clone().sub(center).normalize();\r\n        goal.current.camPos = center.clone().addScaledVector(direction, distance);\r\n        goal.current.target = center.clone();\r\n        const mCamRot = new THREE.Matrix4().lookAt(goal.current.camPos, goal.current.target, camera.up);\r\n        goal.current.camRot = new THREE.Quaternion().setFromRotationMatrix(mCamRot);\r\n        animationState.current = AnimationState.START;\r\n        t.current = 0;\r\n        return this;\r\n      },\r\n      moveTo(position) {\r\n        goal.current.camPos = Array.isArray(position) ? new THREE.Vector3(...position) : position.clone();\r\n        animationState.current = AnimationState.START;\r\n        t.current = 0;\r\n        return this;\r\n      },\r\n      lookAt({\r\n        target,\r\n        up\r\n      }) {\r\n        goal.current.target = Array.isArray(target) ? new THREE.Vector3(...target) : target.clone();\r\n        if (up) {\r\n          goal.current.camUp = Array.isArray(up) ? new THREE.Vector3(...up) : up.clone();\r\n        } else {\r\n          goal.current.camUp = camera.up.clone();\r\n        }\r\n        const mCamRot = new THREE.Matrix4().lookAt(goal.current.camPos || camera.position, goal.current.target, goal.current.camUp);\r\n        goal.current.camRot = new THREE.Quaternion().setFromRotationMatrix(mCamRot);\r\n        animationState.current = AnimationState.START;\r\n        t.current = 0;\r\n        return this;\r\n      },\r\n      /**\r\n       * @deprecated Use moveTo and lookAt instead\r\n       */\r\n      to({\r\n        position,\r\n        target\r\n      }) {\r\n        return this.moveTo(position).lookAt({\r\n          target\r\n        });\r\n      },\r\n      fit() {\r\n        if (!isOrthographic(camera)) {\r\n          // For non-orthographic cameras, fit should behave exactly like reset\r\n          return this.reset();\r\n        }\r\n\r\n        // For orthographic cameras, fit should only modify the zoom value\r\n        let maxHeight = 0,\r\n          maxWidth = 0;\r\n        const vertices = [new THREE.Vector3(box.min.x, box.min.y, box.min.z), new THREE.Vector3(box.min.x, box.max.y, box.min.z), new THREE.Vector3(box.min.x, box.min.y, box.max.z), new THREE.Vector3(box.min.x, box.max.y, box.max.z), new THREE.Vector3(box.max.x, box.max.y, box.max.z), new THREE.Vector3(box.max.x, box.max.y, box.min.z), new THREE.Vector3(box.max.x, box.min.y, box.max.z), new THREE.Vector3(box.max.x, box.min.y, box.min.z)];\r\n\r\n        // Transform the center and each corner to camera space\r\n        const pos = goal.current.camPos || camera.position;\r\n        const target = goal.current.target || (controls == null ? void 0 : controls.target);\r\n        const up = goal.current.camUp || camera.up;\r\n        const mCamWInv = target ? new THREE.Matrix4().lookAt(pos, target, up).setPosition(pos).invert() : camera.matrixWorldInverse;\r\n        for (const v of vertices) {\r\n          v.applyMatrix4(mCamWInv);\r\n          maxHeight = Math.max(maxHeight, Math.abs(v.y));\r\n          maxWidth = Math.max(maxWidth, Math.abs(v.x));\r\n        }\r\n        maxHeight *= 2;\r\n        maxWidth *= 2;\r\n        const zoomForHeight = (camera.top - camera.bottom) / maxHeight;\r\n        const zoomForWidth = (camera.right - camera.left) / maxWidth;\r\n        goal.current.camZoom = Math.min(zoomForHeight, zoomForWidth) / margin;\r\n        animationState.current = AnimationState.START;\r\n        t.current = 0;\r\n        onFitRef.current && onFitRef.current(this.getSize());\r\n        return this;\r\n      },\r\n      clip() {\r\n        const {\r\n          distance\r\n        } = getSize();\r\n        camera.near = distance / 100;\r\n        camera.far = distance * 100;\r\n        camera.updateProjectionMatrix();\r\n        if (controls) {\r\n          controls.maxDistance = distance * 10;\r\n          controls.update();\r\n        }\r\n        invalidate();\r\n        return this;\r\n      }\r\n    };\r\n  }, [box, camera, controls, margin, invalidate]);\r\n  React.useLayoutEffect(() => {\r\n    if (controls) {\r\n      // Try to prevent drag hijacking\r\n      const callback = () => {\r\n        if (controls && goal.current.target && animationState.current !== AnimationState.NONE) {\r\n          const front = new THREE.Vector3().setFromMatrixColumn(camera.matrix, 2);\r\n          const d0 = origin.current.camPos.distanceTo(controls.target);\r\n          const d1 = (goal.current.camPos || origin.current.camPos).distanceTo(goal.current.target);\r\n          const d = (1 - t.current) * d0 + t.current * d1;\r\n          controls.target.copy(camera.position).addScaledVector(front, -d);\r\n          controls.update();\r\n        }\r\n        animationState.current = AnimationState.NONE;\r\n      };\r\n      controls.addEventListener('start', callback);\r\n      return () => controls.removeEventListener('start', callback);\r\n    }\r\n  }, [controls]);\r\n\r\n  // Scale pointer on window resize\r\n  const count = React.useRef(0);\r\n  React.useLayoutEffect(() => {\r\n    if (observe || count.current++ === 0) {\r\n      api.refresh();\r\n      if (fit) api.reset().fit();\r\n      if (clip) api.clip();\r\n    }\r\n  }, [size, clip, fit, observe, camera, controls]);\r\n  useFrame((state, delta) => {\r\n    // This [additional animation step START] is needed to guarantee that delta used in animation isn't absurdly high (2-3 seconds) which is actually possible if rendering happens on demand...\r\n    if (animationState.current === AnimationState.START) {\r\n      animationState.current = AnimationState.ACTIVE;\r\n      invalidate();\r\n    } else if (animationState.current === AnimationState.ACTIVE) {\r\n      t.current += delta / maxDuration;\r\n      if (t.current >= 1) {\r\n        goal.current.camPos && camera.position.copy(goal.current.camPos);\r\n        goal.current.camRot && camera.quaternion.copy(goal.current.camRot);\r\n        goal.current.camUp && camera.up.copy(goal.current.camUp);\r\n        goal.current.camZoom && isOrthographic(camera) && (camera.zoom = goal.current.camZoom);\r\n        camera.updateMatrixWorld();\r\n        camera.updateProjectionMatrix();\r\n        if (controls && goal.current.target) {\r\n          controls.target.copy(goal.current.target);\r\n          controls.update();\r\n        }\r\n        animationState.current = AnimationState.NONE;\r\n      } else {\r\n        const k = interpolateFunc(t.current);\r\n        goal.current.camPos && camera.position.lerpVectors(origin.current.camPos, goal.current.camPos, k);\r\n        goal.current.camRot && camera.quaternion.slerpQuaternions(origin.current.camRot, goal.current.camRot, k);\r\n        goal.current.camUp && camera.up.set(0, 1, 0).applyQuaternion(camera.quaternion);\r\n        goal.current.camZoom && isOrthographic(camera) && (camera.zoom = (1 - k) * origin.current.camZoom + k * goal.current.camZoom);\r\n        camera.updateMatrixWorld();\r\n        camera.updateProjectionMatrix();\r\n      }\r\n      invalidate();\r\n    }\r\n  });\r\n  return /*#__PURE__*/React.createElement(\"group\", {\r\n    ref: ref\r\n  }, /*#__PURE__*/React.createElement(context.Provider, {\r\n    value: api\r\n  }, children));\r\n}\r\nfunction useBounds() {\r\n  return React.useContext(context);\r\n}\r\n\r\nexport { Bounds, useBounds };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}