{"ast":null,"code":"'use client';\n\n// src/use-id.ts\nimport { useCallback, useId as useReactId, useMemo, useState } from \"react\";\nfunction useId(idProp, prefix) {\n  const id = useReactId();\n  return useMemo(() => idProp || [prefix, id].filter(Boolean).join(\"-\"), [idProp, prefix, id]);\n}\nfunction useIds(idProp) {\n  for (var _len = arguments.length, prefixes = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    prefixes[_key - 1] = arguments[_key];\n  }\n  const id = useId(idProp);\n  return useMemo(() => {\n    return prefixes.map(prefix => \"\".concat(prefix, \"-\").concat(id));\n  }, [id, prefixes]);\n}\nfunction useOptionalPart(partId) {\n  const [id, setId] = useState(null);\n  const ref = useCallback(node => {\n    setId(node ? partId : null);\n  }, [partId]);\n  return {\n    ref,\n    id,\n    isRendered: Boolean(id)\n  };\n}\nexport { useId, useIds, useOptionalPart };","map":{"version":3,"names":["useCallback","useId","useReactId","useMemo","useState","idProp","prefix","id","filter","Boolean","join","useIds","_len","arguments","length","prefixes","Array","_key","map","concat","useOptionalPart","partId","setId","ref","node","isRendered"],"sources":["D:\\Repos\\NIKE-DJANGO\\Jord\\l4fycy\\node_modules\\@chakra-ui\\hooks\\src\\use-id.ts"],"sourcesContent":["import { useCallback, useId as useReactId, useMemo, useState } from \"react\"\n\nexport function useId(idProp?: string, prefix?: string): string {\n  const id = useReactId()\n\n  return useMemo(\n    () => idProp || [prefix, id].filter(Boolean).join(\"-\"),\n    [idProp, prefix, id],\n  )\n}\n\n/**\n * React hook to generate ids for use in compound components\n *\n * @param idProp the external id passed from the user\n * @param prefixes array of prefixes to use\n *\n * @example\n *\n * ```js\n * const [buttonId, menuId] = useIds(\"52\", \"button\", \"menu\")\n *\n * // buttonId will be `button-52`\n * // menuId will be `menu-52`\n * ```\n */\nexport function useIds(idProp?: string, ...prefixes: string[]) {\n  const id = useId(idProp)\n  return useMemo(() => {\n    return prefixes.map((prefix) => `${prefix}-${id}`)\n  }, [id, prefixes])\n}\n\n/**\n * Used to generate an id, and after render, check if that id is rendered, so we know\n * if we can use it in places such as `aria-labelledby`.\n *\n * @param partId - The unique id for the component part\n *\n * @example\n * const { ref, id } = useOptionalPart<HTMLInputElement>(`${id}-label`)\n */\nexport function useOptionalPart<T = any>(partId: string) {\n  const [id, setId] = useState<string | null>(null)\n  const ref = useCallback(\n    (node: T) => {\n      setId(node ? partId : null)\n    },\n    [partId],\n  )\n  return { ref, id, isRendered: Boolean(id) }\n}\n"],"mappings":";;;AAAA,SAASA,WAAA,EAAaC,KAAA,IAASC,UAAA,EAAYC,OAAA,EAASC,QAAA,QAAgB;AAE7D,SAASH,MAAMI,MAAA,EAAiBC,MAAA,EAAyB;EAC9D,MAAMC,EAAA,GAAKL,UAAA,CAAW;EAEtB,OAAOC,OAAA,CACL,MAAME,MAAA,IAAU,CAACC,MAAA,EAAQC,EAAE,EAAEC,MAAA,CAAOC,OAAO,EAAEC,IAAA,CAAK,GAAG,GACrD,CAACL,MAAA,EAAQC,MAAA,EAAQC,EAAE,CACrB;AACF;AAiBO,SAASI,OAAON,MAAA,EAAwC;EAAA,SAAAO,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAApBC,QAAA,OAAAC,KAAA,CAAAJ,IAAA,OAAAA,IAAA,WAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;IAAAF,QAAA,CAAAE,IAAA,QAAAJ,SAAA,CAAAI,IAAA;EAAA;EACzC,MAAMV,EAAA,GAAKN,KAAA,CAAMI,MAAM;EACvB,OAAOF,OAAA,CAAQ,MAAM;IACnB,OAAOY,QAAA,CAASG,GAAA,CAAKZ,MAAA,OAAAa,MAAA,CAAcb,MAAM,OAAAa,MAAA,CAAIZ,EAAE,CAAE;EACnD,GAAG,CAACA,EAAA,EAAIQ,QAAQ,CAAC;AACnB;AAWO,SAASK,gBAAyBC,MAAA,EAAgB;EACvD,MAAM,CAACd,EAAA,EAAIe,KAAK,IAAIlB,QAAA,CAAwB,IAAI;EAChD,MAAMmB,GAAA,GAAMvB,WAAA,CACTwB,IAAA,IAAY;IACXF,KAAA,CAAME,IAAA,GAAOH,MAAA,GAAS,IAAI;EAC5B,GACA,CAACA,MAAM,CACT;EACA,OAAO;IAAEE,GAAA;IAAKhB,EAAA;IAAIkB,UAAA,EAAYhB,OAAA,CAAQF,EAAE;EAAE;AAC5C"},"metadata":{},"sourceType":"module","externalDependencies":[]}